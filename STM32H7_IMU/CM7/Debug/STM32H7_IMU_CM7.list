
STM32H7_IMU_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087bc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  08008a60  08008a60  00018a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e34  08008e34  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008e34  08008e34  00018e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e3c  08008e3c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e3c  08008e3c  00018e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e40  08008e40  00018e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  24000000  08008e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  240001d8  0800901c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000460  0800901c  00020460  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001261d  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002556  00000000  00000000  00032866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00034dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a60  00000000  00000000  00035b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003acce  00000000  00000000  000365b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012aab  00000000  00000000  00071286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001808c9  00000000  00000000  00083d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000463c  00000000  00000000  002045fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00208c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008a44 	.word	0x08008a44

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08008a44 	.word	0x08008a44

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemInit+0xfc>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <SystemInit+0xfc>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0xfc>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <SystemInit+0xfc>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	2b06      	cmp	r3, #6
 80006b6:	d807      	bhi.n	80006c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemInit+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x100>)
 80006c2:	f043 0307 	orr.w	r3, r3, #7
 80006c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <SystemInit+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <SystemInit+0x104>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x104>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <SystemInit+0x104>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	492c      	ldr	r1, [pc, #176]	; (8000790 <SystemInit+0x104>)
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemInit+0x108>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemInit+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <SystemInit+0x100>)
 80006fc:	f043 0307 	orr.w	r3, r3, #7
 8000700:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemInit+0x104>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemInit+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemInit+0x104>)
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <SystemInit+0x10c>)
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <SystemInit+0x104>)
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <SystemInit+0x110>)
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <SystemInit+0x104>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <SystemInit+0x114>)
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <SystemInit+0x104>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <SystemInit+0x114>)
 8000730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <SystemInit+0x104>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <SystemInit+0x114>)
 800073c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <SystemInit+0x104>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <SystemInit+0x104>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <SystemInit+0x104>)
 8000752:	2200      	movs	r2, #0
 8000754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x118>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <SystemInit+0x118>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x11c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x120>)
 8000768:	4013      	ands	r3, r2
 800076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076e:	d202      	bcs.n	8000776 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SystemInit+0x124>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0x128>)
 8000778:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800077c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	52002000 	.word	0x52002000
 8000790:	58024400 	.word	0x58024400
 8000794:	eaf6ed7f 	.word	0xeaf6ed7f
 8000798:	02020200 	.word	0x02020200
 800079c:	01ff0000 	.word	0x01ff0000
 80007a0:	01010280 	.word	0x01010280
 80007a4:	580000c0 	.word	0x580000c0
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	ffff0000 	.word	0xffff0000
 80007b0:	51008108 	.word	0x51008108
 80007b4:	52004000 	.word	0x52004000

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b092      	sub	sp, #72	; 0x48
 80007bc:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007c4:	bf00      	nop
 80007c6:	4b6a      	ldr	r3, [pc, #424]	; (8000970 <main+0x1b8>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d004      	beq.n	80007dc <main+0x24>
 80007d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d4:	1e5a      	subs	r2, r3, #1
 80007d6:	637a      	str	r2, [r7, #52]	; 0x34
 80007d8:	2b00      	cmp	r3, #0
 80007da:	dcf4      	bgt.n	80007c6 <main+0xe>
  if ( timeout < 0 )
 80007dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007de:	2b00      	cmp	r3, #0
 80007e0:	da01      	bge.n	80007e6 <main+0x2e>
  {
  Error_Handler();
 80007e2:	f000 fad9 	bl	8000d98 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e6:	f000 fced 	bl	80011c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ea:	f000 f8c9 	bl	8000980 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007ee:	4b60      	ldr	r3, [pc, #384]	; (8000970 <main+0x1b8>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f4:	4a5e      	ldr	r2, [pc, #376]	; (8000970 <main+0x1b8>)
 80007f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007fe:	4b5c      	ldr	r3, [pc, #368]	; (8000970 <main+0x1b8>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800080c:	2000      	movs	r0, #0
 800080e:	f001 f849 	bl	80018a4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000812:	2100      	movs	r1, #0
 8000814:	2000      	movs	r0, #0
 8000816:	f001 f85f 	bl	80018d8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800081a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000820:	bf00      	nop
 8000822:	4b53      	ldr	r3, [pc, #332]	; (8000970 <main+0x1b8>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800082a:	2b00      	cmp	r3, #0
 800082c:	d104      	bne.n	8000838 <main+0x80>
 800082e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000830:	1e5a      	subs	r2, r3, #1
 8000832:	637a      	str	r2, [r7, #52]	; 0x34
 8000834:	2b00      	cmp	r3, #0
 8000836:	dcf4      	bgt.n	8000822 <main+0x6a>
if ( timeout < 0 )
 8000838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800083a:	2b00      	cmp	r3, #0
 800083c:	da01      	bge.n	8000842 <main+0x8a>
{
Error_Handler();
 800083e:	f000 faab 	bl	8000d98 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000842:	f000 f9bd 	bl	8000bc0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000846:	f000 f96f 	bl	8000b28 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800084a:	f000 f915 	bl	8000a78 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int16_t acc_x, acc_y, acc_z;
  int16_t gyro_x, gyro_y, gyro_z;
  //int16_t mag_x, mag_y, mag_z;
  uint8_t imu_data[14];
  mpu9250_write_reg(27, 0x00);
 800084e:	2100      	movs	r1, #0
 8000850:	201b      	movs	r0, #27
 8000852:	f000 fa4d 	bl	8000cf0 <mpu9250_write_reg>
  HAL_Delay(100);
 8000856:	2064      	movs	r0, #100	; 0x64
 8000858:	f000 fd46 	bl	80012e8 <HAL_Delay>
  mpu9250_write_reg(28, 0x08);
 800085c:	2108      	movs	r1, #8
 800085e:	201c      	movs	r0, #28
 8000860:	f000 fa46 	bl	8000cf0 <mpu9250_write_reg>
  HAL_Delay(100);
 8000864:	2064      	movs	r0, #100	; 0x64
 8000866:	f000 fd3f 	bl	80012e8 <HAL_Delay>
  float a_conv = 2.0 / 32768;
 800086a:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
  float g_conv = 250.0 / 32768.0;
 8000870:	4b40      	ldr	r3, [pc, #256]	; (8000974 <main+0x1bc>)
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Starting !\r\n");
 8000874:	4840      	ldr	r0, [pc, #256]	; (8000978 <main+0x1c0>)
 8000876:	f006 f9cd 	bl	8006c14 <puts>
  while (1)
  {
	  HAL_Delay(5);
 800087a:	2005      	movs	r0, #5
 800087c:	f000 fd34 	bl	80012e8 <HAL_Delay>
	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 8000880:	f107 0308 	add.w	r3, r7, #8
 8000884:	220e      	movs	r2, #14
 8000886:	4619      	mov	r1, r3
 8000888:	203b      	movs	r0, #59	; 0x3b
 800088a:	f000 fa57 	bl	8000d3c <mpu9250_read_reg>
	  acc_x = ((int16_t)imu_data[0]<<8) + imu_data[1];
 800088e:	7a3b      	ldrb	r3, [r7, #8]
 8000890:	b29b      	uxth	r3, r3
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	b29a      	uxth	r2, r3
 8000896:	7a7b      	ldrb	r3, [r7, #9]
 8000898:	b29b      	uxth	r3, r3
 800089a:	4413      	add	r3, r2
 800089c:	b29b      	uxth	r3, r3
 800089e:	857b      	strh	r3, [r7, #42]	; 0x2a
	  acc_y = ((int16_t)imu_data[2]<<8) + imu_data[3];
 80008a0:	7abb      	ldrb	r3, [r7, #10]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	7afb      	ldrb	r3, [r7, #11]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	4413      	add	r3, r2
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	853b      	strh	r3, [r7, #40]	; 0x28
	  acc_z = ((int16_t)imu_data[4]<<8) + imu_data[5];
 80008b2:	7b3b      	ldrb	r3, [r7, #12]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	7b7b      	ldrb	r3, [r7, #13]
 80008bc:	b29b      	uxth	r3, r3
 80008be:	4413      	add	r3, r2
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	84fb      	strh	r3, [r7, #38]	; 0x26
//	  gyro_x = ((int16_t)imu_data[0]<<8) + imu_data[1];
//	  gyro_y = ((int16_t)imu_data[2]<<8) + imu_data[3];
//	  gyro_z = ((int16_t)imu_data[4]<<8) + imu_data[5];


	  a_x = (float)(acc_x *  a_conv) * 9.81;
 80008c4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80008c8:	ee07 3a90 	vmov	s15, r3
 80008cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80008d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008dc:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000968 <main+0x1b0>
 80008e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e8:	edc7 7a08 	vstr	s15, [r7, #32]
	  a_y = (float)(acc_y *  a_conv) * 9.81;
 80008ec:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80008f0:	ee07 3a90 	vmov	s15, r3
 80008f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80008fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000900:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000904:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8000968 <main+0x1b0>
 8000908:	ee27 7b06 	vmul.f64	d7, d7, d6
 800090c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000910:	edc7 7a07 	vstr	s15, [r7, #28]
	  a_z = (float)(acc_z *  a_conv) * 9.81;
 8000914:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000918:	ee07 3a90 	vmov	s15, r3
 800091c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000920:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000928:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800092c:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8000968 <main+0x1b0>
 8000930:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000934:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000938:	edc7 7a06 	vstr	s15, [r7, #24]
//	  g_x = (float)(gyro_x *  g_conv);
//	  g_y = (float)(gyro_y *  g_conv);
//	  g_z = (float)(gyro_z *  g_conv);

//	  printf("Acc{x: %.3f, y: %.3f, z:%.3f}, Gyro{x: %.3f, y: %.3f, z:%.3f}\r\n",a_x, a_y, a_z,g_x, g_y, g_z);
	  printf("Acc{x: %.3f, y: %.3f, z:%.3f}\r\n",a_x, a_y, a_z);
 800093c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000940:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000944:	edd7 7a07 	vldr	s15, [r7, #28]
 8000948:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800094c:	edd7 6a06 	vldr	s13, [r7, #24]
 8000950:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000954:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000958:	ed8d 7b00 	vstr	d7, [sp]
 800095c:	ec53 2b15 	vmov	r2, r3, d5
 8000960:	4806      	ldr	r0, [pc, #24]	; (800097c <main+0x1c4>)
 8000962:	f006 f8f1 	bl	8006b48 <iprintf>
	  HAL_Delay(5);
 8000966:	e788      	b.n	800087a <main+0xc2>
 8000968:	51eb851f 	.word	0x51eb851f
 800096c:	40239eb8 	.word	0x40239eb8
 8000970:	58024400 	.word	0x58024400
 8000974:	3bfa0000 	.word	0x3bfa0000
 8000978:	08008a60 	.word	0x08008a60
 800097c:	08008a6c 	.word	0x08008a6c

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b09c      	sub	sp, #112	; 0x70
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098a:	224c      	movs	r2, #76	; 0x4c
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f006 fa20 	bl	8006dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2220      	movs	r2, #32
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f006 fa1a 	bl	8006dd4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009a0:	2004      	movs	r0, #4
 80009a2:	f000 ffad 	bl	8001900 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <SystemClock_Config+0xf0>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	4a30      	ldr	r2, [pc, #192]	; (8000a70 <SystemClock_Config+0xf0>)
 80009b0:	f023 0301 	bic.w	r3, r3, #1
 80009b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009b6:	4b2e      	ldr	r3, [pc, #184]	; (8000a70 <SystemClock_Config+0xf0>)
 80009b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <SystemClock_Config+0xf4>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009c8:	4a2a      	ldr	r2, [pc, #168]	; (8000a74 <SystemClock_Config+0xf4>)
 80009ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <SystemClock_Config+0xf4>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009dc:	bf00      	nop
 80009de:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <SystemClock_Config+0xf4>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ea:	d1f8      	bne.n	80009de <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ec:	2301      	movs	r3, #1
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f6:	2302      	movs	r3, #2
 80009f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009fa:	2302      	movs	r3, #2
 80009fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009fe:	2301      	movs	r3, #1
 8000a00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000a02:	2312      	movs	r3, #18
 8000a04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a12:	230c      	movs	r3, #12
 8000a14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a16:	2302      	movs	r3, #2
 8000a18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000a1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 ffc5 	bl	80019b4 <HAL_RCC_OscConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a30:	f000 f9b2 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a34:	233f      	movs	r3, #63	; 0x3f
 8000a36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a48:	2340      	movs	r3, #64	; 0x40
 8000a4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2101      	movs	r1, #1
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 fbd9 	bl	8002210 <HAL_RCC_ClockConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000a64:	f000 f998 	bl	8000d98 <Error_Handler>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3770      	adds	r7, #112	; 0x70
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	58000400 	.word	0x58000400
 8000a74:	58024800 	.word	0x58024800

08000a78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a7c:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000a7e:	4a29      	ldr	r2, [pc, #164]	; (8000b24 <MX_SPI1_Init+0xac>)
 8000a80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a82:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000a84:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a8a:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a90:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000a92:	2207      	movs	r2, #7
 8000a94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a96:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000a98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a9c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000aa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000aa4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000aa8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000aac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000ab0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ab4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_07DATA;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000adc:	22c0      	movs	r2, #192	; 0xc0
 8000ade:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_SPI1_Init+0xa8>)
 8000b0c:	f003 fa74 	bl	8003ff8 <HAL_SPI_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000b16:	f000 f93f 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	240001f4 	.word	0x240001f4
 8000b24:	40013000 	.word	0x40013000

08000b28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b2c:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <MX_USART3_UART_Init+0x90>)
 8000b2e:	4a23      	ldr	r2, [pc, #140]	; (8000bbc <MX_USART3_UART_Init+0x94>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b32:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <MX_USART3_UART_Init+0x90>)
 8000b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <MX_USART3_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <MX_USART3_UART_Init+0x90>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <MX_USART3_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_USART3_UART_Init+0x90>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <MX_USART3_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_USART3_UART_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <MX_USART3_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_USART3_UART_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <MX_USART3_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b70:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <MX_USART3_UART_Init+0x90>)
 8000b72:	f004 f9e6 	bl	8004f42 <HAL_UART_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b7c:	f000 f90c 	bl	8000d98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b80:	2100      	movs	r1, #0
 8000b82:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <MX_USART3_UART_Init+0x90>)
 8000b84:	f005 fa1a 	bl	8005fbc <HAL_UARTEx_SetTxFifoThreshold>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b8e:	f000 f903 	bl	8000d98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b92:	2100      	movs	r1, #0
 8000b94:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <MX_USART3_UART_Init+0x90>)
 8000b96:	f005 fa4f 	bl	8006038 <HAL_UARTEx_SetRxFifoThreshold>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ba0:	f000 f8fa 	bl	8000d98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <MX_USART3_UART_Init+0x90>)
 8000ba6:	f005 f9d0 	bl	8005f4a <HAL_UARTEx_DisableFifoMode>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bb0:	f000 f8f2 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2400027c 	.word	0x2400027c
 8000bbc:	40004800 	.word	0x40004800

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	4b42      	ldr	r3, [pc, #264]	; (8000ce0 <MX_GPIO_Init+0x120>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bdc:	4a40      	ldr	r2, [pc, #256]	; (8000ce0 <MX_GPIO_Init+0x120>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be6:	4b3e      	ldr	r3, [pc, #248]	; (8000ce0 <MX_GPIO_Init+0x120>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf4:	4b3a      	ldr	r3, [pc, #232]	; (8000ce0 <MX_GPIO_Init+0x120>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfa:	4a39      	ldr	r2, [pc, #228]	; (8000ce0 <MX_GPIO_Init+0x120>)
 8000bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c04:	4b36      	ldr	r3, [pc, #216]	; (8000ce0 <MX_GPIO_Init+0x120>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b33      	ldr	r3, [pc, #204]	; (8000ce0 <MX_GPIO_Init+0x120>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	4a31      	ldr	r2, [pc, #196]	; (8000ce0 <MX_GPIO_Init+0x120>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c22:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <MX_GPIO_Init+0x120>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c30:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <MX_GPIO_Init+0x120>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c36:	4a2a      	ldr	r2, [pc, #168]	; (8000ce0 <MX_GPIO_Init+0x120>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c40:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <MX_GPIO_Init+0x120>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	4b24      	ldr	r3, [pc, #144]	; (8000ce0 <MX_GPIO_Init+0x120>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	4a22      	ldr	r2, [pc, #136]	; (8000ce0 <MX_GPIO_Init+0x120>)
 8000c56:	f043 0308 	orr.w	r3, r3, #8
 8000c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5e:	4b20      	ldr	r3, [pc, #128]	; (8000ce0 <MX_GPIO_Init+0x120>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	f003 0308 	and.w	r3, r3, #8
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2110      	movs	r1, #16
 8000c70:	481c      	ldr	r0, [pc, #112]	; (8000ce4 <MX_GPIO_Init+0x124>)
 8000c72:	f000 fdfd 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c7c:	481a      	ldr	r0, [pc, #104]	; (8000ce8 <MX_GPIO_Init+0x128>)
 8000c7e:	f000 fdf7 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	4815      	ldr	r0, [pc, #84]	; (8000cec <MX_GPIO_Init+0x12c>)
 8000c98:	f000 fc3a 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000c9c:	2310      	movs	r3, #16
 8000c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <MX_GPIO_Init+0x124>)
 8000cb4:	f000 fc2c 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cb8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_GPIO_Init+0x128>)
 8000cd2:	f000 fc1d 	bl	8001510 <HAL_GPIO_Init>

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	58024400 	.word	0x58024400
 8000ce4:	58020000 	.word	0x58020000
 8000ce8:	58020400 	.word	0x58020400
 8000cec:	58020800 	.word	0x58020800

08000cf0 <mpu9250_write_reg>:

/* USER CODE BEGIN 4 */
void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	460a      	mov	r2, r1
 8000cfa:	71fb      	strb	r3, [r7, #7]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2110      	movs	r1, #16
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <mpu9250_write_reg+0x44>)
 8000d06:	f000 fdb3 	bl	8001870 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8000d0a:	1df9      	adds	r1, r7, #7
 8000d0c:	2364      	movs	r3, #100	; 0x64
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4809      	ldr	r0, [pc, #36]	; (8000d38 <mpu9250_write_reg+0x48>)
 8000d12:	f003 fa77 	bl	8004204 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8000d16:	1db9      	adds	r1, r7, #6
 8000d18:	2364      	movs	r3, #100	; 0x64
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4806      	ldr	r0, [pc, #24]	; (8000d38 <mpu9250_write_reg+0x48>)
 8000d1e:	f003 fa71 	bl	8004204 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2110      	movs	r1, #16
 8000d26:	4803      	ldr	r0, [pc, #12]	; (8000d34 <mpu9250_write_reg+0x44>)
 8000d28:	f000 fda2 	bl	8001870 <HAL_GPIO_WritePin>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	58020000 	.word	0x58020000
 8000d38:	240001f4 	.word	0x240001f4

08000d3c <mpu9250_read_reg>:
void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2110      	movs	r1, #16
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <mpu9250_read_reg+0x54>)
 8000d5c:	f000 fd88 	bl	8001870 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 8000d60:	f107 010f 	add.w	r1, r7, #15
 8000d64:	2364      	movs	r3, #100	; 0x64
 8000d66:	2201      	movs	r2, #1
 8000d68:	480a      	ldr	r0, [pc, #40]	; (8000d94 <mpu9250_read_reg+0x58>)
 8000d6a:	f003 fa4b 	bl	8004204 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, len, 100);
 8000d6e:	79bb      	ldrb	r3, [r7, #6]
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	2364      	movs	r3, #100	; 0x64
 8000d74:	6839      	ldr	r1, [r7, #0]
 8000d76:	4807      	ldr	r0, [pc, #28]	; (8000d94 <mpu9250_read_reg+0x58>)
 8000d78:	f003 fc36 	bl	80045e8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <mpu9250_read_reg+0x54>)
 8000d82:	f000 fd75 	bl	8001870 <HAL_GPIO_WritePin>
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	58020000 	.word	0x58020000
 8000d94:	240001f4 	.word	0x240001f4

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <Error_Handler+0x8>
	...

08000da4 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000dac:	1d39      	adds	r1, r7, #4
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	2201      	movs	r2, #1
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <__io_putchar+0x20>)
 8000db6:	f004 f914 	bl	8004fe2 <HAL_UART_Transmit>
  return ch;
 8000dba:	687b      	ldr	r3, [r7, #4]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2400027c 	.word	0x2400027c

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_MspInit+0x30>)
 8000dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dd4:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <HAL_MspInit+0x30>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_MspInit+0x30>)
 8000de0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	58024400 	.word	0x58024400

08000dfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0b8      	sub	sp, #224	; 0xe0
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	22bc      	movs	r2, #188	; 0xbc
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f005 ffd9 	bl	8006dd4 <memset>
  if(hspi->Instance==SPI1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a24      	ldr	r2, [pc, #144]	; (8000eb8 <HAL_SPI_MspInit+0xbc>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d141      	bne.n	8000eb0 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e30:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fd74 	bl	8002928 <HAL_RCCEx_PeriphCLKConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000e46:	f7ff ffa7 	bl	8000d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <HAL_SPI_MspInit+0xc0>)
 8000e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e50:	4a1a      	ldr	r2, [pc, #104]	; (8000ebc <HAL_SPI_MspInit+0xc0>)
 8000e52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_SPI_MspInit+0xc0>)
 8000e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_SPI_MspInit+0xc0>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <HAL_SPI_MspInit+0xc0>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <HAL_SPI_MspInit+0xc0>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e86:	23e0      	movs	r3, #224	; 0xe0
 8000e88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_SPI_MspInit+0xc4>)
 8000eac:	f000 fb30 	bl	8001510 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	37e0      	adds	r7, #224	; 0xe0
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40013000 	.word	0x40013000
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	58020000 	.word	0x58020000

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b0b8      	sub	sp, #224	; 0xe0
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	22bc      	movs	r2, #188	; 0xbc
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f005 ff75 	bl	8006dd4 <memset>
  if(huart->Instance==USART3)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a25      	ldr	r2, [pc, #148]	; (8000f84 <HAL_UART_MspInit+0xc0>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d142      	bne.n	8000f7a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 fd10 	bl	8002928 <HAL_RCCEx_PeriphCLKConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f0e:	f7ff ff43 	bl	8000d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f18:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f36:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f38:	f043 0308 	orr.w	r3, r3, #8
 8000f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_UART_MspInit+0xc4>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	f003 0308 	and.w	r3, r3, #8
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f68:	2307      	movs	r3, #7
 8000f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f6e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_UART_MspInit+0xc8>)
 8000f76:	f000 facb 	bl	8001510 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	37e0      	adds	r7, #224	; 0xe0
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40004800 	.word	0x40004800
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	58020c00 	.word	0x58020c00

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <NMI_Handler+0x4>

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>

08000fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 f964 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
	return 1;
 8000fe8:	2301      	movs	r3, #1
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <_kill>:

int _kill(int pid, int sig)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ffe:	f005 ff3b 	bl	8006e78 <__errno>
 8001002:	4603      	mov	r3, r0
 8001004:	2216      	movs	r2, #22
 8001006:	601a      	str	r2, [r3, #0]
	return -1;
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <_exit>:

void _exit (int status)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ffe7 	bl	8000ff4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001026:	e7fe      	b.n	8001026 <_exit+0x12>

08001028 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	e00a      	b.n	8001050 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800103a:	f3af 8000 	nop.w
 800103e:	4601      	mov	r1, r0
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	60ba      	str	r2, [r7, #8]
 8001046:	b2ca      	uxtb	r2, r1
 8001048:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3301      	adds	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	dbf0      	blt.n	800103a <_read+0x12>
	}

return len;
 8001058:	687b      	ldr	r3, [r7, #4]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	60f8      	str	r0, [r7, #12]
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e009      	b.n	8001088 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	60ba      	str	r2, [r7, #8]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fe91 	bl	8000da4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	429a      	cmp	r2, r3
 800108e:	dbf1      	blt.n	8001074 <_write+0x12>
	}
	return len;
 8001090:	687b      	ldr	r3, [r7, #4]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <_close>:

int _close(int file)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
	return -1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010c2:	605a      	str	r2, [r3, #4]
	return 0;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <_isatty>:

int _isatty(int file)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
	return 1;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
	return 0;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <_sbrk+0x5c>)
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <_sbrk+0x60>)
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <_sbrk+0x64>)
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <_sbrk+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	429a      	cmp	r2, r3
 8001132:	d207      	bcs.n	8001144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001134:	f005 fea0 	bl	8006e78 <__errno>
 8001138:	4603      	mov	r3, r0
 800113a:	220c      	movs	r2, #12
 800113c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e009      	b.n	8001158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <_sbrk+0x64>)
 8001154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	24080000 	.word	0x24080000
 8001164:	00000400 	.word	0x00000400
 8001168:	2400030c 	.word	0x2400030c
 800116c:	24000460 	.word	0x24000460

08001170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001174:	f7ff fa8a 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800117a:	490d      	ldr	r1, [pc, #52]	; (80011b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001190:	4c0a      	ldr	r4, [pc, #40]	; (80011bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119e:	f005 fe71 	bl	8006e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a2:	f7ff fb09 	bl	80007b8 <main>
  bx  lr
 80011a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011b0:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80011b4:	08008e44 	.word	0x08008e44
  ldr r2, =_sbss
 80011b8:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80011bc:	24000460 	.word	0x24000460

080011c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC3_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ca:	2003      	movs	r0, #3
 80011cc:	f000 f96e 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011d0:	f001 f9d4 	bl	800257c <HAL_RCC_GetSysClockFreq>
 80011d4:	4602      	mov	r2, r0
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_Init+0x68>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	0a1b      	lsrs	r3, r3, #8
 80011dc:	f003 030f 	and.w	r3, r3, #15
 80011e0:	4913      	ldr	r1, [pc, #76]	; (8001230 <HAL_Init+0x6c>)
 80011e2:	5ccb      	ldrb	r3, [r1, r3]
 80011e4:	f003 031f 	and.w	r3, r3, #31
 80011e8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_Init+0x68>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <HAL_Init+0x6c>)
 80011f8:	5cd3      	ldrb	r3, [r2, r3]
 80011fa:	f003 031f 	and.w	r3, r3, #31
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	fa22 f303 	lsr.w	r3, r2, r3
 8001204:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <HAL_Init+0x70>)
 8001206:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001208:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <HAL_Init+0x74>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800120e:	200f      	movs	r0, #15
 8001210:	f000 f814 	bl	800123c <HAL_InitTick>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e002      	b.n	8001224 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800121e:	f7ff fdd3 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	58024400 	.word	0x58024400
 8001230:	08008a8c 	.word	0x08008a8c
 8001234:	24000004 	.word	0x24000004
 8001238:	24000000 	.word	0x24000000

0800123c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_InitTick+0x60>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e021      	b.n	8001294 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <HAL_InitTick+0x64>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_InitTick+0x60>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f945 	bl	80014f6 <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00e      	b.n	8001294 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d80a      	bhi.n	8001292 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 f91d 	bl	80014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <HAL_InitTick+0x68>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2400000c 	.word	0x2400000c
 80012a0:	24000000 	.word	0x24000000
 80012a4:	24000008 	.word	0x24000008

080012a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x20>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_IncTick+0x24>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <HAL_IncTick+0x24>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	2400000c 	.word	0x2400000c
 80012cc:	24000310 	.word	0x24000310

080012d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <HAL_GetTick+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	24000310 	.word	0x24000310

080012e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff ffee 	bl	80012d0 <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d005      	beq.n	800130e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_Delay+0x44>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800130e:	bf00      	nop
 8001310:	f7ff ffde 	bl	80012d0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d8f7      	bhi.n	8001310 <HAL_Delay+0x28>
  {
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2400000c 	.word	0x2400000c

08001330 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <HAL_GetREVID+0x14>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	0c1b      	lsrs	r3, r3, #16
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	5c001000 	.word	0x5c001000

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <__NVIC_SetPriorityGrouping+0x40>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	4313      	orrs	r3, r2
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <__NVIC_SetPriorityGrouping+0x40>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00
 800138c:	05fa0000 	.word	0x05fa0000

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	; (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	; (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f7ff ff8e 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff47 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff5e 	bl	8001390 <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff90 	bl	8001400 <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5f 	bl	80013ac <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffb2 	bl	8001468 <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800151e:	4b89      	ldr	r3, [pc, #548]	; (8001744 <HAL_GPIO_Init+0x234>)
 8001520:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001522:	e194      	b.n	800184e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	2101      	movs	r1, #1
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 8186 	beq.w	8001848 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b01      	cmp	r3, #1
 8001546:	d005      	beq.n	8001554 <HAL_GPIO_Init+0x44>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d130      	bne.n	80015b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800158a:	2201      	movs	r2, #1
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	091b      	lsrs	r3, r3, #4
 80015a0:	f003 0201 	and.w	r2, r3, #1
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d017      	beq.n	80015f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2203      	movs	r2, #3
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d123      	bne.n	8001646 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	08da      	lsrs	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3208      	adds	r2, #8
 8001606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	220f      	movs	r2, #15
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	691a      	ldr	r2, [r3, #16]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	08da      	lsrs	r2, r3, #3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3208      	adds	r2, #8
 8001640:	69b9      	ldr	r1, [r7, #24]
 8001642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0203 	and.w	r2, r3, #3
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80e0 	beq.w	8001848 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <HAL_GPIO_Init+0x238>)
 800168a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800168e:	4a2e      	ldr	r2, [pc, #184]	; (8001748 <HAL_GPIO_Init+0x238>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001698:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_GPIO_Init+0x238>)
 800169a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016a6:	4a29      	ldr	r2, [pc, #164]	; (800174c <HAL_GPIO_Init+0x23c>)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3302      	adds	r3, #2
 80016ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	220f      	movs	r2, #15
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a20      	ldr	r2, [pc, #128]	; (8001750 <HAL_GPIO_Init+0x240>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d052      	beq.n	8001778 <HAL_GPIO_Init+0x268>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a1f      	ldr	r2, [pc, #124]	; (8001754 <HAL_GPIO_Init+0x244>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d031      	beq.n	800173e <HAL_GPIO_Init+0x22e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <HAL_GPIO_Init+0x248>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d02b      	beq.n	800173a <HAL_GPIO_Init+0x22a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a1d      	ldr	r2, [pc, #116]	; (800175c <HAL_GPIO_Init+0x24c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d025      	beq.n	8001736 <HAL_GPIO_Init+0x226>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a1c      	ldr	r2, [pc, #112]	; (8001760 <HAL_GPIO_Init+0x250>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d01f      	beq.n	8001732 <HAL_GPIO_Init+0x222>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <HAL_GPIO_Init+0x254>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d019      	beq.n	800172e <HAL_GPIO_Init+0x21e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <HAL_GPIO_Init+0x258>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d013      	beq.n	800172a <HAL_GPIO_Init+0x21a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a19      	ldr	r2, [pc, #100]	; (800176c <HAL_GPIO_Init+0x25c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d00d      	beq.n	8001726 <HAL_GPIO_Init+0x216>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a18      	ldr	r2, [pc, #96]	; (8001770 <HAL_GPIO_Init+0x260>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d007      	beq.n	8001722 <HAL_GPIO_Init+0x212>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a17      	ldr	r2, [pc, #92]	; (8001774 <HAL_GPIO_Init+0x264>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_GPIO_Init+0x20e>
 800171a:	2309      	movs	r3, #9
 800171c:	e02d      	b.n	800177a <HAL_GPIO_Init+0x26a>
 800171e:	230a      	movs	r3, #10
 8001720:	e02b      	b.n	800177a <HAL_GPIO_Init+0x26a>
 8001722:	2308      	movs	r3, #8
 8001724:	e029      	b.n	800177a <HAL_GPIO_Init+0x26a>
 8001726:	2307      	movs	r3, #7
 8001728:	e027      	b.n	800177a <HAL_GPIO_Init+0x26a>
 800172a:	2306      	movs	r3, #6
 800172c:	e025      	b.n	800177a <HAL_GPIO_Init+0x26a>
 800172e:	2305      	movs	r3, #5
 8001730:	e023      	b.n	800177a <HAL_GPIO_Init+0x26a>
 8001732:	2304      	movs	r3, #4
 8001734:	e021      	b.n	800177a <HAL_GPIO_Init+0x26a>
 8001736:	2303      	movs	r3, #3
 8001738:	e01f      	b.n	800177a <HAL_GPIO_Init+0x26a>
 800173a:	2302      	movs	r3, #2
 800173c:	e01d      	b.n	800177a <HAL_GPIO_Init+0x26a>
 800173e:	2301      	movs	r3, #1
 8001740:	e01b      	b.n	800177a <HAL_GPIO_Init+0x26a>
 8001742:	bf00      	nop
 8001744:	58000080 	.word	0x58000080
 8001748:	58024400 	.word	0x58024400
 800174c:	58000400 	.word	0x58000400
 8001750:	58020000 	.word	0x58020000
 8001754:	58020400 	.word	0x58020400
 8001758:	58020800 	.word	0x58020800
 800175c:	58020c00 	.word	0x58020c00
 8001760:	58021000 	.word	0x58021000
 8001764:	58021400 	.word	0x58021400
 8001768:	58021800 	.word	0x58021800
 800176c:	58021c00 	.word	0x58021c00
 8001770:	58022000 	.word	0x58022000
 8001774:	58022400 	.word	0x58022400
 8001778:	2300      	movs	r3, #0
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	f002 0203 	and.w	r2, r2, #3
 8001780:	0092      	lsls	r2, r2, #2
 8001782:	4093      	lsls	r3, r2
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800178a:	4938      	ldr	r1, [pc, #224]	; (800186c <HAL_GPIO_Init+0x35c>)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	089b      	lsrs	r3, r3, #2
 8001790:	3302      	adds	r3, #2
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	3301      	adds	r3, #1
 800184c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa22 f303 	lsr.w	r3, r2, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	f47f ae63 	bne.w	8001524 <HAL_GPIO_Init+0x14>
  }
}
 800185e:	bf00      	nop
 8001860:	bf00      	nop
 8001862:	3724      	adds	r7, #36	; 0x24
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	58000400 	.word	0x58000400

08001870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
 800187c:	4613      	mov	r3, r2
 800187e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001880:	787b      	ldrb	r3, [r7, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800188c:	e003      	b.n	8001896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	041a      	lsls	r2, r3, #16
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	619a      	str	r2, [r3, #24]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80018ac:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <HAL_HSEM_FastTake+0x2c>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3320      	adds	r3, #32
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_HSEM_FastTake+0x30>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	e000      	b.n	80018c2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	58026400 	.word	0x58026400
 80018d4:	80000300 	.word	0x80000300

080018d8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80018e2:	4906      	ldr	r1, [pc, #24]	; (80018fc <HAL_HSEM_Release+0x24>)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	58026400 	.word	0x58026400

08001900 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001908:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	2b06      	cmp	r3, #6
 8001912:	d00a      	beq.n	800192a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	429a      	cmp	r2, r3
 8001920:	d001      	beq.n	8001926 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e040      	b.n	80019a8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e03e      	b.n	80019a8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001932:	491f      	ldr	r1, [pc, #124]	; (80019b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4313      	orrs	r3, r2
 8001938:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800193a:	f7ff fcc9 	bl	80012d0 <HAL_GetTick>
 800193e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001940:	e009      	b.n	8001956 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001942:	f7ff fcc5 	bl	80012d0 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001950:	d901      	bls.n	8001956 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e028      	b.n	80019a8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800195e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001962:	d1ee      	bne.n	8001942 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b1e      	cmp	r3, #30
 8001968:	d008      	beq.n	800197c <HAL_PWREx_ConfigSupply+0x7c>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b2e      	cmp	r3, #46	; 0x2e
 800196e:	d005      	beq.n	800197c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b1d      	cmp	r3, #29
 8001974:	d002      	beq.n	800197c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b2d      	cmp	r3, #45	; 0x2d
 800197a:	d114      	bne.n	80019a6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800197c:	f7ff fca8 	bl	80012d0 <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001982:	e009      	b.n	8001998 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001984:	f7ff fca4 	bl	80012d0 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001992:	d901      	bls.n	8001998 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e007      	b.n	80019a8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a4:	d1ee      	bne.n	8001984 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	58024800 	.word	0x58024800

080019b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08c      	sub	sp, #48	; 0x30
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	f000 bc1d 	b.w	8002202 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 8087 	beq.w	8001ae4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d6:	4b99      	ldr	r3, [pc, #612]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019e0:	4b96      	ldr	r3, [pc, #600]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80019e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e8:	2b10      	cmp	r3, #16
 80019ea:	d007      	beq.n	80019fc <HAL_RCC_OscConfig+0x48>
 80019ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ee:	2b18      	cmp	r3, #24
 80019f0:	d110      	bne.n	8001a14 <HAL_RCC_OscConfig+0x60>
 80019f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d10b      	bne.n	8001a14 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fc:	4b8f      	ldr	r3, [pc, #572]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d06c      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x12e>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d168      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e3f6      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1c:	d106      	bne.n	8001a2c <HAL_RCC_OscConfig+0x78>
 8001a1e:	4b87      	ldr	r3, [pc, #540]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a86      	ldr	r2, [pc, #536]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e02e      	b.n	8001a8a <HAL_RCC_OscConfig+0xd6>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10c      	bne.n	8001a4e <HAL_RCC_OscConfig+0x9a>
 8001a34:	4b81      	ldr	r3, [pc, #516]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a80      	ldr	r2, [pc, #512]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b7e      	ldr	r3, [pc, #504]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a7d      	ldr	r2, [pc, #500]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	e01d      	b.n	8001a8a <HAL_RCC_OscConfig+0xd6>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a56:	d10c      	bne.n	8001a72 <HAL_RCC_OscConfig+0xbe>
 8001a58:	4b78      	ldr	r3, [pc, #480]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a77      	ldr	r2, [pc, #476]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b75      	ldr	r3, [pc, #468]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a74      	ldr	r2, [pc, #464]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	e00b      	b.n	8001a8a <HAL_RCC_OscConfig+0xd6>
 8001a72:	4b72      	ldr	r3, [pc, #456]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a71      	ldr	r2, [pc, #452]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a6e      	ldr	r2, [pc, #440]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d013      	beq.n	8001aba <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a92:	f7ff fc1d 	bl	80012d0 <HAL_GetTick>
 8001a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a9a:	f7ff fc19 	bl	80012d0 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b64      	cmp	r3, #100	; 0x64
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e3aa      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aac:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0xe6>
 8001ab8:	e014      	b.n	8001ae4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff fc09 	bl	80012d0 <HAL_GetTick>
 8001abe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac2:	f7ff fc05 	bl	80012d0 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b64      	cmp	r3, #100	; 0x64
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e396      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ad4:	4b59      	ldr	r3, [pc, #356]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x10e>
 8001ae0:	e000      	b.n	8001ae4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80cb 	beq.w	8001c88 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001af2:	4b52      	ldr	r3, [pc, #328]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001afa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001afc:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d007      	beq.n	8001b18 <HAL_RCC_OscConfig+0x164>
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	2b18      	cmp	r3, #24
 8001b0c:	d156      	bne.n	8001bbc <HAL_RCC_OscConfig+0x208>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d151      	bne.n	8001bbc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b18:	4b48      	ldr	r3, [pc, #288]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_OscConfig+0x17c>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e368      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b30:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 0219 	bic.w	r2, r3, #25
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	493f      	ldr	r1, [pc, #252]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b42:	f7ff fbc5 	bl	80012d0 <HAL_GetTick>
 8001b46:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b4a:	f7ff fbc1 	bl	80012d0 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e352      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b5c:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b68:	f7ff fbe2 	bl	8001330 <HAL_GetREVID>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d817      	bhi.n	8001ba6 <HAL_RCC_OscConfig+0x1f2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b40      	cmp	r3, #64	; 0x40
 8001b7c:	d108      	bne.n	8001b90 <HAL_RCC_OscConfig+0x1dc>
 8001b7e:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b86:	4a2d      	ldr	r2, [pc, #180]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b8e:	e07b      	b.n	8001c88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b90:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	031b      	lsls	r3, r3, #12
 8001b9e:	4927      	ldr	r1, [pc, #156]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba4:	e070      	b.n	8001c88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba6:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	061b      	lsls	r3, r3, #24
 8001bb4:	4921      	ldr	r1, [pc, #132]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bba:	e065      	b.n	8001c88 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d048      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 0219 	bic.w	r2, r3, #25
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	491a      	ldr	r1, [pc, #104]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fb7b 	bl	80012d0 <HAL_GetTick>
 8001bda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bde:	f7ff fb77 	bl	80012d0 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e308      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfc:	f7ff fb98 	bl	8001330 <HAL_GetREVID>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d81a      	bhi.n	8001c40 <HAL_RCC_OscConfig+0x28c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2b40      	cmp	r3, #64	; 0x40
 8001c10:	d108      	bne.n	8001c24 <HAL_RCC_OscConfig+0x270>
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c1a:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c20:	6053      	str	r3, [r2, #4]
 8001c22:	e031      	b.n	8001c88 <HAL_RCC_OscConfig+0x2d4>
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	031b      	lsls	r3, r3, #12
 8001c32:	4902      	ldr	r1, [pc, #8]	; (8001c3c <HAL_RCC_OscConfig+0x288>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
 8001c38:	e026      	b.n	8001c88 <HAL_RCC_OscConfig+0x2d4>
 8001c3a:	bf00      	nop
 8001c3c:	58024400 	.word	0x58024400
 8001c40:	4b9a      	ldr	r3, [pc, #616]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	061b      	lsls	r3, r3, #24
 8001c4e:	4997      	ldr	r1, [pc, #604]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
 8001c54:	e018      	b.n	8001c88 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c56:	4b95      	ldr	r3, [pc, #596]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a94      	ldr	r2, [pc, #592]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff fb35 	bl	80012d0 <HAL_GetTick>
 8001c66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fb31 	bl	80012d0 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e2c2      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c7c:	4b8b      	ldr	r3, [pc, #556]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a9 	beq.w	8001de8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c96:	4b85      	ldr	r3, [pc, #532]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ca0:	4b82      	ldr	r3, [pc, #520]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d007      	beq.n	8001cbc <HAL_RCC_OscConfig+0x308>
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b18      	cmp	r3, #24
 8001cb0:	d13a      	bne.n	8001d28 <HAL_RCC_OscConfig+0x374>
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d135      	bne.n	8001d28 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cbc:	4b7b      	ldr	r3, [pc, #492]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x320>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	2b80      	cmp	r3, #128	; 0x80
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e296      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cd4:	f7ff fb2c 	bl	8001330 <HAL_GetREVID>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f241 0203 	movw	r2, #4099	; 0x1003
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d817      	bhi.n	8001d12 <HAL_RCC_OscConfig+0x35e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	2b20      	cmp	r3, #32
 8001ce8:	d108      	bne.n	8001cfc <HAL_RCC_OscConfig+0x348>
 8001cea:	4b70      	ldr	r3, [pc, #448]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001cf2:	4a6e      	ldr	r2, [pc, #440]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001cf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cf8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cfa:	e075      	b.n	8001de8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cfc:	4b6b      	ldr	r3, [pc, #428]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	069b      	lsls	r3, r3, #26
 8001d0a:	4968      	ldr	r1, [pc, #416]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d10:	e06a      	b.n	8001de8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d12:	4b66      	ldr	r3, [pc, #408]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	061b      	lsls	r3, r3, #24
 8001d20:	4962      	ldr	r1, [pc, #392]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d26:	e05f      	b.n	8001de8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d042      	beq.n	8001db6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d30:	4b5e      	ldr	r3, [pc, #376]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a5d      	ldr	r2, [pc, #372]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fac8 	bl	80012d0 <HAL_GetTick>
 8001d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d44:	f7ff fac4 	bl	80012d0 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e255      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d56:	4b55      	ldr	r3, [pc, #340]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d62:	f7ff fae5 	bl	8001330 <HAL_GetREVID>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d817      	bhi.n	8001da0 <HAL_RCC_OscConfig+0x3ec>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	2b20      	cmp	r3, #32
 8001d76:	d108      	bne.n	8001d8a <HAL_RCC_OscConfig+0x3d6>
 8001d78:	4b4c      	ldr	r3, [pc, #304]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d80:	4a4a      	ldr	r2, [pc, #296]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d86:	6053      	str	r3, [r2, #4]
 8001d88:	e02e      	b.n	8001de8 <HAL_RCC_OscConfig+0x434>
 8001d8a:	4b48      	ldr	r3, [pc, #288]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	069b      	lsls	r3, r3, #26
 8001d98:	4944      	ldr	r1, [pc, #272]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]
 8001d9e:	e023      	b.n	8001de8 <HAL_RCC_OscConfig+0x434>
 8001da0:	4b42      	ldr	r3, [pc, #264]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	061b      	lsls	r3, r3, #24
 8001dae:	493f      	ldr	r1, [pc, #252]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60cb      	str	r3, [r1, #12]
 8001db4:	e018      	b.n	8001de8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a3c      	ldr	r2, [pc, #240]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fa85 	bl	80012d0 <HAL_GetTick>
 8001dc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001dca:	f7ff fa81 	bl	80012d0 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e212      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ddc:	4b33      	ldr	r3, [pc, #204]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f0      	bne.n	8001dca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d036      	beq.n	8001e62 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d019      	beq.n	8001e30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e00:	4a2a      	ldr	r2, [pc, #168]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e08:	f7ff fa62 	bl	80012d0 <HAL_GetTick>
 8001e0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e10:	f7ff fa5e 	bl	80012d0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1ef      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e22:	4b22      	ldr	r3, [pc, #136]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x45c>
 8001e2e:	e018      	b.n	8001e62 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e30:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e34:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fa48 	bl	80012d0 <HAL_GetTick>
 8001e40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e44:	f7ff fa44 	bl	80012d0 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e1d5      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d039      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d01c      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001e7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e82:	f7ff fa25 	bl	80012d0 <HAL_GetTick>
 8001e86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e8a:	f7ff fa21 	bl	80012d0 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e1b2      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x4d6>
 8001ea8:	e01b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
 8001eaa:	bf00      	nop
 8001eac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001eb0:	4b9b      	ldr	r3, [pc, #620]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a9a      	ldr	r2, [pc, #616]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff fa08 	bl	80012d0 <HAL_GetTick>
 8001ec0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ec4:	f7ff fa04 	bl	80012d0 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e195      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ed6:	4b92      	ldr	r3, [pc, #584]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8081 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ef0:	4b8c      	ldr	r3, [pc, #560]	; (8002124 <HAL_RCC_OscConfig+0x770>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a8b      	ldr	r2, [pc, #556]	; (8002124 <HAL_RCC_OscConfig+0x770>)
 8001ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001efc:	f7ff f9e8 	bl	80012d0 <HAL_GetTick>
 8001f00:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f04:	f7ff f9e4 	bl	80012d0 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e175      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f16:	4b83      	ldr	r3, [pc, #524]	; (8002124 <HAL_RCC_OscConfig+0x770>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d106      	bne.n	8001f38 <HAL_RCC_OscConfig+0x584>
 8001f2a:	4b7d      	ldr	r3, [pc, #500]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2e:	4a7c      	ldr	r2, [pc, #496]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6713      	str	r3, [r2, #112]	; 0x70
 8001f36:	e02d      	b.n	8001f94 <HAL_RCC_OscConfig+0x5e0>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10c      	bne.n	8001f5a <HAL_RCC_OscConfig+0x5a6>
 8001f40:	4b77      	ldr	r3, [pc, #476]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	4a76      	ldr	r2, [pc, #472]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f46:	f023 0301 	bic.w	r3, r3, #1
 8001f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4c:	4b74      	ldr	r3, [pc, #464]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a73      	ldr	r2, [pc, #460]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f52:	f023 0304 	bic.w	r3, r3, #4
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
 8001f58:	e01c      	b.n	8001f94 <HAL_RCC_OscConfig+0x5e0>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x5c8>
 8001f62:	4b6f      	ldr	r3, [pc, #444]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f66:	4a6e      	ldr	r2, [pc, #440]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6e:	4b6c      	ldr	r3, [pc, #432]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f72:	4a6b      	ldr	r2, [pc, #428]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7a:	e00b      	b.n	8001f94 <HAL_RCC_OscConfig+0x5e0>
 8001f7c:	4b68      	ldr	r3, [pc, #416]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	4a67      	ldr	r2, [pc, #412]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	6713      	str	r3, [r2, #112]	; 0x70
 8001f88:	4b65      	ldr	r3, [pc, #404]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8c:	4a64      	ldr	r2, [pc, #400]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001f8e:	f023 0304 	bic.w	r3, r3, #4
 8001f92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d015      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9c:	f7ff f998 	bl	80012d0 <HAL_GetTick>
 8001fa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7ff f994 	bl	80012d0 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e123      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fba:	4b59      	ldr	r3, [pc, #356]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0ee      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x5f0>
 8001fc6:	e014      	b.n	8001ff2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc8:	f7ff f982 	bl	80012d0 <HAL_GetTick>
 8001fcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f7ff f97e 	bl	80012d0 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e10d      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fe6:	4b4e      	ldr	r3, [pc, #312]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1ee      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8102 	beq.w	8002200 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ffc:	4b48      	ldr	r3, [pc, #288]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002004:	2b18      	cmp	r3, #24
 8002006:	f000 80bd 	beq.w	8002184 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	2b02      	cmp	r3, #2
 8002010:	f040 809e 	bne.w	8002150 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002014:	4b42      	ldr	r3, [pc, #264]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a41      	ldr	r2, [pc, #260]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 800201a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800201e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7ff f956 	bl	80012d0 <HAL_GetTick>
 8002024:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002028:	f7ff f952 	bl	80012d0 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e0e3      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800203a:	4b39      	ldr	r3, [pc, #228]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8002048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800204a:	4b37      	ldr	r3, [pc, #220]	; (8002128 <HAL_RCC_OscConfig+0x774>)
 800204c:	4013      	ands	r3, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	430a      	orrs	r2, r1
 800205a:	4931      	ldr	r1, [pc, #196]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 800205c:	4313      	orrs	r3, r2
 800205e:	628b      	str	r3, [r1, #40]	; 0x28
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	3b01      	subs	r3, #1
 8002066:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206e:	3b01      	subs	r3, #1
 8002070:	025b      	lsls	r3, r3, #9
 8002072:	b29b      	uxth	r3, r3
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	3b01      	subs	r3, #1
 800207c:	041b      	lsls	r3, r3, #16
 800207e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002088:	3b01      	subs	r3, #1
 800208a:	061b      	lsls	r3, r3, #24
 800208c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002090:	4923      	ldr	r1, [pc, #140]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8002092:	4313      	orrs	r3, r2
 8002094:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	4a21      	ldr	r2, [pc, #132]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020a2:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_RCC_OscConfig+0x778>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020ae:	00d2      	lsls	r2, r2, #3
 80020b0:	491b      	ldr	r1, [pc, #108]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	f023 020c 	bic.w	r2, r3, #12
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4917      	ldr	r1, [pc, #92]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	f023 0202 	bic.w	r2, r3, #2
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d4:	4912      	ldr	r1, [pc, #72]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	4a10      	ldr	r2, [pc, #64]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 80020f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	4a07      	ldr	r2, [pc, #28]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <HAL_RCC_OscConfig+0x76c>)
 8002110:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7ff f8db 	bl	80012d0 <HAL_GetTick>
 800211a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800211c:	e011      	b.n	8002142 <HAL_RCC_OscConfig+0x78e>
 800211e:	bf00      	nop
 8002120:	58024400 	.word	0x58024400
 8002124:	58024800 	.word	0x58024800
 8002128:	fffffc0c 	.word	0xfffffc0c
 800212c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002130:	f7ff f8ce 	bl	80012d0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e05f      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002142:	4b32      	ldr	r3, [pc, #200]	; (800220c <HAL_RCC_OscConfig+0x858>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x77c>
 800214e:	e057      	b.n	8002200 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002150:	4b2e      	ldr	r3, [pc, #184]	; (800220c <HAL_RCC_OscConfig+0x858>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a2d      	ldr	r2, [pc, #180]	; (800220c <HAL_RCC_OscConfig+0x858>)
 8002156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800215a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7ff f8b8 	bl	80012d0 <HAL_GetTick>
 8002160:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002164:	f7ff f8b4 	bl	80012d0 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e045      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002176:	4b25      	ldr	r3, [pc, #148]	; (800220c <HAL_RCC_OscConfig+0x858>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x7b0>
 8002182:	e03d      	b.n	8002200 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002184:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_RCC_OscConfig+0x858>)
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800218a:	4b20      	ldr	r3, [pc, #128]	; (800220c <HAL_RCC_OscConfig+0x858>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	2b01      	cmp	r3, #1
 8002196:	d031      	beq.n	80021fc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	f003 0203 	and.w	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d12a      	bne.n	80021fc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d122      	bne.n	80021fc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d11a      	bne.n	80021fc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	0a5b      	lsrs	r3, r3, #9
 80021ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d111      	bne.n	80021fc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	0c1b      	lsrs	r3, r3, #16
 80021dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d108      	bne.n	80021fc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	0e1b      	lsrs	r3, r3, #24
 80021ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3730      	adds	r7, #48	; 0x30
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	58024400 	.word	0x58024400

08002210 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e19c      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002224:	4b8a      	ldr	r3, [pc, #552]	; (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d910      	bls.n	8002254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b87      	ldr	r3, [pc, #540]	; (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 020f 	bic.w	r2, r3, #15
 800223a:	4985      	ldr	r1, [pc, #532]	; (8002450 <HAL_RCC_ClockConfig+0x240>)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b83      	ldr	r3, [pc, #524]	; (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e184      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d010      	beq.n	8002282 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	4b7b      	ldr	r3, [pc, #492]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800226c:	429a      	cmp	r2, r3
 800226e:	d908      	bls.n	8002282 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002270:	4b78      	ldr	r3, [pc, #480]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	4975      	ldr	r1, [pc, #468]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 800227e:	4313      	orrs	r3, r2
 8002280:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d010      	beq.n	80022b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	4b70      	ldr	r3, [pc, #448]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800229a:	429a      	cmp	r2, r3
 800229c:	d908      	bls.n	80022b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800229e:	4b6d      	ldr	r3, [pc, #436]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	496a      	ldr	r1, [pc, #424]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d010      	beq.n	80022de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699a      	ldr	r2, [r3, #24]
 80022c0:	4b64      	ldr	r3, [pc, #400]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d908      	bls.n	80022de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022cc:	4b61      	ldr	r3, [pc, #388]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	495e      	ldr	r1, [pc, #376]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d010      	beq.n	800230c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	4b59      	ldr	r3, [pc, #356]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d908      	bls.n	800230c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022fa:	4b56      	ldr	r3, [pc, #344]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4953      	ldr	r1, [pc, #332]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002308:	4313      	orrs	r3, r2
 800230a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d010      	beq.n	800233a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	4b4d      	ldr	r3, [pc, #308]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	429a      	cmp	r2, r3
 8002326:	d908      	bls.n	800233a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002328:	4b4a      	ldr	r3, [pc, #296]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f023 020f 	bic.w	r2, r3, #15
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4947      	ldr	r1, [pc, #284]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002336:	4313      	orrs	r3, r2
 8002338:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d055      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002346:	4b43      	ldr	r3, [pc, #268]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4940      	ldr	r1, [pc, #256]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002354:	4313      	orrs	r3, r2
 8002356:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d107      	bne.n	8002370 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002360:	4b3c      	ldr	r3, [pc, #240]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d121      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0f6      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d107      	bne.n	8002388 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002378:	4b36      	ldr	r3, [pc, #216]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d115      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0ea      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d107      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002390:	4b30      	ldr	r3, [pc, #192]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d109      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0de      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023a0:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0d6      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023b0:	4b28      	ldr	r3, [pc, #160]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	f023 0207 	bic.w	r2, r3, #7
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4925      	ldr	r1, [pc, #148]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c2:	f7fe ff85 	bl	80012d0 <HAL_GetTick>
 80023c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ca:	f7fe ff81 	bl	80012d0 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0be      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e0:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d1eb      	bne.n	80023ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d010      	beq.n	8002420 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	429a      	cmp	r2, r3
 800240c:	d208      	bcs.n	8002420 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f023 020f 	bic.w	r2, r3, #15
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	490e      	ldr	r1, [pc, #56]	; (8002454 <HAL_RCC_ClockConfig+0x244>)
 800241c:	4313      	orrs	r3, r2
 800241e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d214      	bcs.n	8002458 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 020f 	bic.w	r2, r3, #15
 8002436:	4906      	ldr	r1, [pc, #24]	; (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <HAL_RCC_ClockConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d005      	beq.n	8002458 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e086      	b.n	800255e <HAL_RCC_ClockConfig+0x34e>
 8002450:	52002000 	.word	0x52002000
 8002454:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d010      	beq.n	8002486 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	4b3f      	ldr	r3, [pc, #252]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002470:	429a      	cmp	r2, r3
 8002472:	d208      	bcs.n	8002486 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002474:	4b3c      	ldr	r3, [pc, #240]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	4939      	ldr	r1, [pc, #228]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002482:	4313      	orrs	r3, r2
 8002484:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d010      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	4b34      	ldr	r3, [pc, #208]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800249e:	429a      	cmp	r2, r3
 80024a0:	d208      	bcs.n	80024b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024a2:	4b31      	ldr	r3, [pc, #196]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	492e      	ldr	r1, [pc, #184]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d010      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	4b28      	ldr	r3, [pc, #160]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d208      	bcs.n	80024e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024d0:	4b25      	ldr	r3, [pc, #148]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	4922      	ldr	r1, [pc, #136]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d010      	beq.n	8002510 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69da      	ldr	r2, [r3, #28]
 80024f2:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d208      	bcs.n	8002510 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80024fe:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4917      	ldr	r1, [pc, #92]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 800250c:	4313      	orrs	r3, r2
 800250e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002510:	f000 f834 	bl	800257c <HAL_RCC_GetSysClockFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	4912      	ldr	r1, [pc, #72]	; (800256c <HAL_RCC_ClockConfig+0x35c>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
 800252c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <HAL_RCC_ClockConfig+0x358>)
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	4a0d      	ldr	r2, [pc, #52]	; (800256c <HAL_RCC_ClockConfig+0x35c>)
 8002538:	5cd3      	ldrb	r3, [r2, r3]
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
 8002544:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <HAL_RCC_ClockConfig+0x360>)
 8002546:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <HAL_RCC_ClockConfig+0x364>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_RCC_ClockConfig+0x368>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fe72 	bl	800123c <HAL_InitTick>
 8002558:	4603      	mov	r3, r0
 800255a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	58024400 	.word	0x58024400
 800256c:	08008a8c 	.word	0x08008a8c
 8002570:	24000004 	.word	0x24000004
 8002574:	24000000 	.word	0x24000000
 8002578:	24000008 	.word	0x24000008

0800257c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002582:	4bb3      	ldr	r3, [pc, #716]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800258a:	2b18      	cmp	r3, #24
 800258c:	f200 8155 	bhi.w	800283a <HAL_RCC_GetSysClockFreq+0x2be>
 8002590:	a201      	add	r2, pc, #4	; (adr r2, 8002598 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002596:	bf00      	nop
 8002598:	080025fd 	.word	0x080025fd
 800259c:	0800283b 	.word	0x0800283b
 80025a0:	0800283b 	.word	0x0800283b
 80025a4:	0800283b 	.word	0x0800283b
 80025a8:	0800283b 	.word	0x0800283b
 80025ac:	0800283b 	.word	0x0800283b
 80025b0:	0800283b 	.word	0x0800283b
 80025b4:	0800283b 	.word	0x0800283b
 80025b8:	08002623 	.word	0x08002623
 80025bc:	0800283b 	.word	0x0800283b
 80025c0:	0800283b 	.word	0x0800283b
 80025c4:	0800283b 	.word	0x0800283b
 80025c8:	0800283b 	.word	0x0800283b
 80025cc:	0800283b 	.word	0x0800283b
 80025d0:	0800283b 	.word	0x0800283b
 80025d4:	0800283b 	.word	0x0800283b
 80025d8:	08002629 	.word	0x08002629
 80025dc:	0800283b 	.word	0x0800283b
 80025e0:	0800283b 	.word	0x0800283b
 80025e4:	0800283b 	.word	0x0800283b
 80025e8:	0800283b 	.word	0x0800283b
 80025ec:	0800283b 	.word	0x0800283b
 80025f0:	0800283b 	.word	0x0800283b
 80025f4:	0800283b 	.word	0x0800283b
 80025f8:	0800262f 	.word	0x0800262f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025fc:	4b94      	ldr	r3, [pc, #592]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002608:	4b91      	ldr	r3, [pc, #580]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	08db      	lsrs	r3, r3, #3
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	4a90      	ldr	r2, [pc, #576]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
 8002618:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800261a:	e111      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800261c:	4b8d      	ldr	r3, [pc, #564]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800261e:	61bb      	str	r3, [r7, #24]
    break;
 8002620:	e10e      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002622:	4b8d      	ldr	r3, [pc, #564]	; (8002858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002624:	61bb      	str	r3, [r7, #24]
    break;
 8002626:	e10b      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002628:	4b8c      	ldr	r3, [pc, #560]	; (800285c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800262a:	61bb      	str	r3, [r7, #24]
    break;
 800262c:	e108      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800262e:	4b88      	ldr	r3, [pc, #544]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002638:	4b85      	ldr	r3, [pc, #532]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002642:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002644:	4b82      	ldr	r3, [pc, #520]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800264e:	4b80      	ldr	r3, [pc, #512]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	08db      	lsrs	r3, r3, #3
 8002654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	ee07 3a90 	vmov	s15, r3
 8002662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002666:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80e1 	beq.w	8002834 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b02      	cmp	r3, #2
 8002676:	f000 8083 	beq.w	8002780 <HAL_RCC_GetSysClockFreq+0x204>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b02      	cmp	r3, #2
 800267e:	f200 80a1 	bhi.w	80027c4 <HAL_RCC_GetSysClockFreq+0x248>
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x114>
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d056      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x1c0>
 800268e:	e099      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002690:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d02d      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800269c:	4b6c      	ldr	r3, [pc, #432]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	08db      	lsrs	r3, r3, #3
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	4a6b      	ldr	r2, [pc, #428]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	ee07 3a90 	vmov	s15, r3
 80026b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026c6:	4b62      	ldr	r3, [pc, #392]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80026f6:	e087      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	ee07 3a90 	vmov	s15, r3
 80026fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002702:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002864 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800270a:	4b51      	ldr	r3, [pc, #324]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800271a:	ed97 6a02 	vldr	s12, [r7, #8]
 800271e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800272a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800272e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800273a:	e065      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002746:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002868 <HAL_RCC_GetSysClockFreq+0x2ec>
 800274a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800274e:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800275e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002762:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800276a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800276e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800277e:	e043      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	ee07 3a90 	vmov	s15, r3
 8002786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800278a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800286c <HAL_RCC_GetSysClockFreq+0x2f0>
 800278e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002792:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800279a:	ee07 3a90 	vmov	s15, r3
 800279e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027c2:	e021      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002868 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027d6:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002806:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	0a5b      	lsrs	r3, r3, #9
 800280e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002812:	3301      	adds	r3, #1
 8002814:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002820:	edd7 6a07 	vldr	s13, [r7, #28]
 8002824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800282c:	ee17 3a90 	vmov	r3, s15
 8002830:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002832:	e005      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	61bb      	str	r3, [r7, #24]
    break;
 8002838:	e002      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800283c:	61bb      	str	r3, [r7, #24]
    break;
 800283e:	bf00      	nop
  }

  return sysclockfreq;
 8002840:	69bb      	ldr	r3, [r7, #24]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	; 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	58024400 	.word	0x58024400
 8002854:	03d09000 	.word	0x03d09000
 8002858:	003d0900 	.word	0x003d0900
 800285c:	007a1200 	.word	0x007a1200
 8002860:	46000000 	.word	0x46000000
 8002864:	4c742400 	.word	0x4c742400
 8002868:	4a742400 	.word	0x4a742400
 800286c:	4af42400 	.word	0x4af42400

08002870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002876:	f7ff fe81 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800287a:	4602      	mov	r2, r0
 800287c:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	490f      	ldr	r1, [pc, #60]	; (80028c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002888:	5ccb      	ldrb	r3, [r1, r3]
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	fa22 f303 	lsr.w	r3, r2, r3
 8002892:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	fa22 f303 	lsr.w	r3, r2, r3
 80028aa:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80028ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80028b4:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	58024400 	.word	0x58024400
 80028c4:	08008a8c 	.word	0x08008a8c
 80028c8:	24000004 	.word	0x24000004
 80028cc:	24000000 	.word	0x24000000

080028d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80028d4:	f7ff ffcc 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4904      	ldr	r1, [pc, #16]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	58024400 	.word	0x58024400
 80028f8:	08008a8c 	.word	0x08008a8c

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002900:	f7ff ffb6 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4904      	ldr	r1, [pc, #16]	; (8002924 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	58024400 	.word	0x58024400
 8002924:	08008a8c 	.word	0x08008a8c

08002928 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002930:	2300      	movs	r3, #0
 8002932:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002934:	2300      	movs	r3, #0
 8002936:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d03f      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002948:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800294c:	d02a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800294e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002952:	d824      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002958:	d018      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800295a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800295e:	d81e      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002968:	d007      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800296a:	e018      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800296c:	4ba3      	ldr	r3, [pc, #652]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	4aa2      	ldr	r2, [pc, #648]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002976:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002978:	e015      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3304      	adds	r3, #4
 800297e:	2102      	movs	r1, #2
 8002980:	4618      	mov	r0, r3
 8002982:	f001 f9d5 	bl	8003d30 <RCCEx_PLL2_Config>
 8002986:	4603      	mov	r3, r0
 8002988:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800298a:	e00c      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3324      	adds	r3, #36	; 0x24
 8002990:	2102      	movs	r1, #2
 8002992:	4618      	mov	r0, r3
 8002994:	f001 fa7e 	bl	8003e94 <RCCEx_PLL3_Config>
 8002998:	4603      	mov	r3, r0
 800299a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800299c:	e003      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
      break;
 80029a2:	e000      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80029a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80029ac:	4b93      	ldr	r3, [pc, #588]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029b8:	4990      	ldr	r1, [pc, #576]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	650b      	str	r3, [r1, #80]	; 0x50
 80029be:	e001      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d03d      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d826      	bhi.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80029d8:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80029da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029de:	bf00      	nop
 80029e0:	080029f5 	.word	0x080029f5
 80029e4:	08002a03 	.word	0x08002a03
 80029e8:	08002a15 	.word	0x08002a15
 80029ec:	08002a2d 	.word	0x08002a2d
 80029f0:	08002a2d 	.word	0x08002a2d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029f4:	4b81      	ldr	r3, [pc, #516]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	4a80      	ldr	r2, [pc, #512]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a00:	e015      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3304      	adds	r3, #4
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f001 f991 	bl	8003d30 <RCCEx_PLL2_Config>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a12:	e00c      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3324      	adds	r3, #36	; 0x24
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f001 fa3a 	bl	8003e94 <RCCEx_PLL3_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a24:	e003      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	75fb      	strb	r3, [r7, #23]
      break;
 8002a2a:	e000      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a34:	4b71      	ldr	r3, [pc, #452]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a38:	f023 0207 	bic.w	r2, r3, #7
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	496e      	ldr	r1, [pc, #440]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	650b      	str	r3, [r1, #80]	; 0x50
 8002a46:	e001      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d042      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a60:	d02b      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a66:	d825      	bhi.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a68:	2bc0      	cmp	r3, #192	; 0xc0
 8002a6a:	d028      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002a6c:	2bc0      	cmp	r3, #192	; 0xc0
 8002a6e:	d821      	bhi.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a70:	2b80      	cmp	r3, #128	; 0x80
 8002a72:	d016      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002a74:	2b80      	cmp	r3, #128	; 0x80
 8002a76:	d81d      	bhi.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002a7c:	2b40      	cmp	r3, #64	; 0x40
 8002a7e:	d007      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002a80:	e018      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a82:	4b5e      	ldr	r3, [pc, #376]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	4a5d      	ldr	r2, [pc, #372]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a8e:	e017      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 f94a 	bl	8003d30 <RCCEx_PLL2_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002aa0:	e00e      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3324      	adds	r3, #36	; 0x24
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f001 f9f3 	bl	8003e94 <RCCEx_PLL3_Config>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002ab2:	e005      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ab8:	e002      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002aba:	bf00      	nop
 8002abc:	e000      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ac6:	4b4d      	ldr	r3, [pc, #308]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	494a      	ldr	r1, [pc, #296]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	650b      	str	r3, [r1, #80]	; 0x50
 8002ad8:	e001      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d049      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002af0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002af4:	d030      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002af6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002afa:	d82a      	bhi.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002afc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b00:	d02c      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002b02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b06:	d824      	bhi.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b0c:	d018      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b12:	d81e      	bhi.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002b18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b1c:	d007      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002b1e:	e018      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b20:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	4a35      	ldr	r2, [pc, #212]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b2c:	e017      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2100      	movs	r1, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f001 f8fb 	bl	8003d30 <RCCEx_PLL2_Config>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002b3e:	e00e      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3324      	adds	r3, #36	; 0x24
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 f9a4 	bl	8003e94 <RCCEx_PLL3_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b50:	e005      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	75fb      	strb	r3, [r7, #23]
      break;
 8002b56:	e002      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b58:	bf00      	nop
 8002b5a:	e000      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b64:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b72:	4922      	ldr	r1, [pc, #136]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	658b      	str	r3, [r1, #88]	; 0x58
 8002b78:	e001      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
 8002b7c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d04b      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b94:	d030      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002b96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b9a:	d82a      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ba0:	d02e      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002ba2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ba6:	d824      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002ba8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bac:	d018      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002bae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bb2:	d81e      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bbc:	d007      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002bbe:	e018      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	4a0d      	ldr	r2, [pc, #52]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bcc:	e019      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 f8ab 	bl	8003d30 <RCCEx_PLL2_Config>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002bde:	e010      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3324      	adds	r3, #36	; 0x24
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f001 f954 	bl	8003e94 <RCCEx_PLL3_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bf0:	e007      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf6:	e004      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002bf8:	bf00      	nop
 8002bfa:	e002      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002bfc:	58024400 	.word	0x58024400
      break;
 8002c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10a      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002c08:	4b99      	ldr	r3, [pc, #612]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c16:	4996      	ldr	r1, [pc, #600]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	658b      	str	r3, [r1, #88]	; 0x58
 8002c1c:	e001      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
 8002c20:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d032      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c32:	2b30      	cmp	r3, #48	; 0x30
 8002c34:	d01c      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002c36:	2b30      	cmp	r3, #48	; 0x30
 8002c38:	d817      	bhi.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d00c      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	d813      	bhi.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d016      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d10f      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c4a:	4b89      	ldr	r3, [pc, #548]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	4a88      	ldr	r2, [pc, #544]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c56:	e00e      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 f866 	bl	8003d30 <RCCEx_PLL2_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c68:	e005      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c6e:	e002      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002c70:	bf00      	nop
 8002c72:	e000      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c76:	7dfb      	ldrb	r3, [r7, #23]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d109      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c7c:	4b7c      	ldr	r3, [pc, #496]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c88:	4979      	ldr	r1, [pc, #484]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c8e:	e001      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d047      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ca8:	d030      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002caa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cae:	d82a      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002cb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cb4:	d02c      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002cb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cba:	d824      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc0:	d018      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc6:	d81e      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd0:	d007      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002cd2:	e018      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd4:	4b66      	ldr	r3, [pc, #408]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	4a65      	ldr	r2, [pc, #404]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ce0:	e017      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f001 f821 	bl	8003d30 <RCCEx_PLL2_Config>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cf2:	e00e      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3324      	adds	r3, #36	; 0x24
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 f8ca 	bl	8003e94 <RCCEx_PLL3_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d04:	e005      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	75fb      	strb	r3, [r7, #23]
      break;
 8002d0a:	e002      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002d0c:	bf00      	nop
 8002d0e:	e000      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d18:	4b55      	ldr	r3, [pc, #340]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	4952      	ldr	r1, [pc, #328]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	650b      	str	r3, [r1, #80]	; 0x50
 8002d2a:	e001      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d049      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d44:	d02e      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002d46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d4a:	d828      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d50:	d02a      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002d52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d56:	d822      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d5c:	d026      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002d5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d62:	d81c      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d68:	d010      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d6e:	d816      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01d      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d78:	d111      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	2101      	movs	r1, #1
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 ffd5 	bl	8003d30 <RCCEx_PLL2_Config>
 8002d86:	4603      	mov	r3, r0
 8002d88:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d8a:	e012      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3324      	adds	r3, #36	; 0x24
 8002d90:	2101      	movs	r1, #1
 8002d92:	4618      	mov	r0, r3
 8002d94:	f001 f87e 	bl	8003e94 <RCCEx_PLL3_Config>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d9c:	e009      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	75fb      	strb	r3, [r7, #23]
      break;
 8002da2:	e006      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002da4:	bf00      	nop
 8002da6:	e004      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002da8:	bf00      	nop
 8002daa:	e002      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002dac:	bf00      	nop
 8002dae:	e000      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d109      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002db8:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dbc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc4:	492a      	ldr	r1, [pc, #168]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	650b      	str	r3, [r1, #80]	; 0x50
 8002dca:	e001      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
 8002dce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d04d      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002de6:	d02e      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dec:	d828      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df2:	d02a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d822      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002dfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002dfe:	d026      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002e00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e04:	d81c      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e0a:	d010      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e10:	d816      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01d      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002e16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e1a:	d111      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	2101      	movs	r1, #1
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 ff84 	bl	8003d30 <RCCEx_PLL2_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e2c:	e012      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3324      	adds	r3, #36	; 0x24
 8002e32:	2101      	movs	r1, #1
 8002e34:	4618      	mov	r0, r3
 8002e36:	f001 f82d 	bl	8003e94 <RCCEx_PLL3_Config>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e3e:	e009      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	75fb      	strb	r3, [r7, #23]
      break;
 8002e44:	e006      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e46:	bf00      	nop
 8002e48:	e004      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e4a:	bf00      	nop
 8002e4c:	e002      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e000      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e5a:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e68:	4901      	ldr	r1, [pc, #4]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	658b      	str	r3, [r1, #88]	; 0x58
 8002e6e:	e003      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002e70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
 8002e76:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d02f      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e8c:	d00e      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002e8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e92:	d814      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d015      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002e98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e9c:	d10f      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e9e:	4baf      	ldr	r3, [pc, #700]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea2:	4aae      	ldr	r2, [pc, #696]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002eaa:	e00c      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 ff3c 	bl	8003d30 <RCCEx_PLL2_Config>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ebc:	e003      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d109      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ecc:	4ba3      	ldr	r3, [pc, #652]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed8:	49a0      	ldr	r1, [pc, #640]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	650b      	str	r3, [r1, #80]	; 0x50
 8002ede:	e001      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
 8002ee2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d032      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d81b      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002ef8:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efe:	bf00      	nop
 8002f00:	08002f37 	.word	0x08002f37
 8002f04:	08002f11 	.word	0x08002f11
 8002f08:	08002f1f 	.word	0x08002f1f
 8002f0c:	08002f37 	.word	0x08002f37
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f10:	4b92      	ldr	r3, [pc, #584]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	4a91      	ldr	r2, [pc, #580]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f1c:	e00c      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3304      	adds	r3, #4
 8002f22:	2102      	movs	r1, #2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 ff03 	bl	8003d30 <RCCEx_PLL2_Config>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f2e:	e003      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	75fb      	strb	r3, [r7, #23]
      break;
 8002f34:	e000      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f3e:	4b87      	ldr	r3, [pc, #540]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f42:	f023 0203 	bic.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	4984      	ldr	r1, [pc, #528]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f50:	e001      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 8086 	beq.w	8003070 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f64:	4b7e      	ldr	r3, [pc, #504]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a7d      	ldr	r2, [pc, #500]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f70:	f7fe f9ae 	bl	80012d0 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f76:	e009      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f78:	f7fe f9aa 	bl	80012d0 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d902      	bls.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	75fb      	strb	r3, [r7, #23]
        break;
 8002f8a:	e005      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f8c:	4b74      	ldr	r3, [pc, #464]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ef      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d166      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f9e:	4b6f      	ldr	r3, [pc, #444]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fa0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fa8:	4053      	eors	r3, r2
 8002faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d013      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fb2:	4b6a      	ldr	r3, [pc, #424]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fbc:	4b67      	ldr	r3, [pc, #412]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	4a66      	ldr	r2, [pc, #408]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fc8:	4b64      	ldr	r3, [pc, #400]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	4a63      	ldr	r2, [pc, #396]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002fd4:	4a61      	ldr	r2, [pc, #388]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe4:	d115      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7fe f973 	bl	80012d0 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fec:	e00b      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f7fe f96f 	bl	80012d0 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d902      	bls.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	75fb      	strb	r3, [r7, #23]
            break;
 8003004:	e005      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003006:	4b55      	ldr	r3, [pc, #340]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0ed      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003012:	7dfb      	ldrb	r3, [r7, #23]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d126      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800301e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003026:	d10d      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003028:	4b4c      	ldr	r3, [pc, #304]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003036:	0919      	lsrs	r1, r3, #4
 8003038:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800303a:	400b      	ands	r3, r1
 800303c:	4947      	ldr	r1, [pc, #284]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800303e:	4313      	orrs	r3, r2
 8003040:	610b      	str	r3, [r1, #16]
 8003042:	e005      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003044:	4b45      	ldr	r3, [pc, #276]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	4a44      	ldr	r2, [pc, #272]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800304a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800304e:	6113      	str	r3, [r2, #16]
 8003050:	4b42      	ldr	r3, [pc, #264]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003052:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800305a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305e:	493f      	ldr	r1, [pc, #252]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003060:	4313      	orrs	r3, r2
 8003062:	670b      	str	r3, [r1, #112]	; 0x70
 8003064:	e004      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	75bb      	strb	r3, [r7, #22]
 800306a:	e001      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306c:	7dfb      	ldrb	r3, [r7, #23]
 800306e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 8085 	beq.w	8003188 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003082:	2b28      	cmp	r3, #40	; 0x28
 8003084:	d866      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003086:	a201      	add	r2, pc, #4	; (adr r2, 800308c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308c:	08003169 	.word	0x08003169
 8003090:	08003155 	.word	0x08003155
 8003094:	08003155 	.word	0x08003155
 8003098:	08003155 	.word	0x08003155
 800309c:	08003155 	.word	0x08003155
 80030a0:	08003155 	.word	0x08003155
 80030a4:	08003155 	.word	0x08003155
 80030a8:	08003155 	.word	0x08003155
 80030ac:	08003131 	.word	0x08003131
 80030b0:	08003155 	.word	0x08003155
 80030b4:	08003155 	.word	0x08003155
 80030b8:	08003155 	.word	0x08003155
 80030bc:	08003155 	.word	0x08003155
 80030c0:	08003155 	.word	0x08003155
 80030c4:	08003155 	.word	0x08003155
 80030c8:	08003155 	.word	0x08003155
 80030cc:	08003143 	.word	0x08003143
 80030d0:	08003155 	.word	0x08003155
 80030d4:	08003155 	.word	0x08003155
 80030d8:	08003155 	.word	0x08003155
 80030dc:	08003155 	.word	0x08003155
 80030e0:	08003155 	.word	0x08003155
 80030e4:	08003155 	.word	0x08003155
 80030e8:	08003155 	.word	0x08003155
 80030ec:	08003169 	.word	0x08003169
 80030f0:	08003155 	.word	0x08003155
 80030f4:	08003155 	.word	0x08003155
 80030f8:	08003155 	.word	0x08003155
 80030fc:	08003155 	.word	0x08003155
 8003100:	08003155 	.word	0x08003155
 8003104:	08003155 	.word	0x08003155
 8003108:	08003155 	.word	0x08003155
 800310c:	08003169 	.word	0x08003169
 8003110:	08003155 	.word	0x08003155
 8003114:	08003155 	.word	0x08003155
 8003118:	08003155 	.word	0x08003155
 800311c:	08003155 	.word	0x08003155
 8003120:	08003155 	.word	0x08003155
 8003124:	08003155 	.word	0x08003155
 8003128:	08003155 	.word	0x08003155
 800312c:	08003169 	.word	0x08003169
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3304      	adds	r3, #4
 8003134:	2101      	movs	r1, #1
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fdfa 	bl	8003d30 <RCCEx_PLL2_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003140:	e013      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3324      	adds	r3, #36	; 0x24
 8003146:	2101      	movs	r1, #1
 8003148:	4618      	mov	r0, r3
 800314a:	f000 fea3 	bl	8003e94 <RCCEx_PLL3_Config>
 800314e:	4603      	mov	r3, r0
 8003150:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003152:	e00a      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	75fb      	strb	r3, [r7, #23]
      break;
 8003158:	e007      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800315a:	bf00      	nop
 800315c:	58024400 	.word	0x58024400
 8003160:	58024800 	.word	0x58024800
 8003164:	00ffffcf 	.word	0x00ffffcf
      break;
 8003168:	bf00      	nop
    }

    if(ret == HAL_OK)
 800316a:	7dfb      	ldrb	r3, [r7, #23]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003170:	4b96      	ldr	r3, [pc, #600]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003174:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800317c:	4993      	ldr	r1, [pc, #588]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800317e:	4313      	orrs	r3, r2
 8003180:	654b      	str	r3, [r1, #84]	; 0x54
 8003182:	e001      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003184:	7dfb      	ldrb	r3, [r7, #23]
 8003186:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d038      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003198:	2b05      	cmp	r3, #5
 800319a:	d821      	bhi.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800319c:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080031e7 	.word	0x080031e7
 80031a8:	080031bd 	.word	0x080031bd
 80031ac:	080031cf 	.word	0x080031cf
 80031b0:	080031e7 	.word	0x080031e7
 80031b4:	080031e7 	.word	0x080031e7
 80031b8:	080031e7 	.word	0x080031e7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3304      	adds	r3, #4
 80031c0:	2101      	movs	r1, #1
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fdb4 	bl	8003d30 <RCCEx_PLL2_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80031cc:	e00c      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3324      	adds	r3, #36	; 0x24
 80031d2:	2101      	movs	r1, #1
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fe5d 	bl	8003e94 <RCCEx_PLL3_Config>
 80031da:	4603      	mov	r3, r0
 80031dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80031de:	e003      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	75fb      	strb	r3, [r7, #23]
      break;
 80031e4:	e000      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80031e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80031ee:	4b77      	ldr	r3, [pc, #476]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f2:	f023 0207 	bic.w	r2, r3, #7
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fa:	4974      	ldr	r1, [pc, #464]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	654b      	str	r3, [r1, #84]	; 0x54
 8003200:	e001      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	d03a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003218:	2b05      	cmp	r3, #5
 800321a:	d821      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800321c:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003222:	bf00      	nop
 8003224:	08003267 	.word	0x08003267
 8003228:	0800323d 	.word	0x0800323d
 800322c:	0800324f 	.word	0x0800324f
 8003230:	08003267 	.word	0x08003267
 8003234:	08003267 	.word	0x08003267
 8003238:	08003267 	.word	0x08003267
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3304      	adds	r3, #4
 8003240:	2101      	movs	r1, #1
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fd74 	bl	8003d30 <RCCEx_PLL2_Config>
 8003248:	4603      	mov	r3, r0
 800324a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800324c:	e00c      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3324      	adds	r3, #36	; 0x24
 8003252:	2101      	movs	r1, #1
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fe1d 	bl	8003e94 <RCCEx_PLL3_Config>
 800325a:	4603      	mov	r3, r0
 800325c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800325e:	e003      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	75fb      	strb	r3, [r7, #23]
      break;
 8003264:	e000      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10a      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800326e:	4b57      	ldr	r3, [pc, #348]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003272:	f023 0207 	bic.w	r2, r3, #7
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327c:	4953      	ldr	r1, [pc, #332]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800327e:	4313      	orrs	r3, r2
 8003280:	658b      	str	r3, [r1, #88]	; 0x58
 8003282:	e001      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d04b      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800329a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800329e:	d02e      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80032a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032a4:	d828      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80032a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032aa:	d02a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80032ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b0:	d822      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80032b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032b6:	d026      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80032b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032bc:	d81c      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80032be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032c2:	d010      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80032c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032c8:	d816      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01d      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80032ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032d2:	d111      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3304      	adds	r3, #4
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fd28 	bl	8003d30 <RCCEx_PLL2_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80032e4:	e012      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3324      	adds	r3, #36	; 0x24
 80032ea:	2102      	movs	r1, #2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fdd1 	bl	8003e94 <RCCEx_PLL3_Config>
 80032f2:	4603      	mov	r3, r0
 80032f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80032f6:	e009      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	75fb      	strb	r3, [r7, #23]
      break;
 80032fc:	e006      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80032fe:	bf00      	nop
 8003300:	e004      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003302:	bf00      	nop
 8003304:	e002      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003306:	bf00      	nop
 8003308:	e000      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800330a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800330c:	7dfb      	ldrb	r3, [r7, #23]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10a      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003312:	4b2e      	ldr	r3, [pc, #184]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003320:	492a      	ldr	r1, [pc, #168]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003322:	4313      	orrs	r3, r2
 8003324:	654b      	str	r3, [r1, #84]	; 0x54
 8003326:	e001      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d04d      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800333e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003342:	d02e      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003344:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003348:	d828      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800334a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334e:	d02a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003354:	d822      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003356:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800335a:	d026      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800335c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003360:	d81c      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003366:	d010      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336c:	d816      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01d      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003376:	d111      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fcd6 	bl	8003d30 <RCCEx_PLL2_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003388:	e012      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3324      	adds	r3, #36	; 0x24
 800338e:	2102      	movs	r1, #2
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fd7f 	bl	8003e94 <RCCEx_PLL3_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800339a:	e009      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	75fb      	strb	r3, [r7, #23]
      break;
 80033a0:	e006      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80033a2:	bf00      	nop
 80033a4:	e004      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80033a6:	bf00      	nop
 80033a8:	e002      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80033aa:	bf00      	nop
 80033ac:	e000      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80033ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033c4:	4901      	ldr	r1, [pc, #4]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	658b      	str	r3, [r1, #88]	; 0x58
 80033ca:	e003      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80033cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d04b      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033ea:	d02e      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80033ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033f0:	d828      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80033f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f6:	d02a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80033f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033fc:	d822      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80033fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003402:	d026      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003404:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003408:	d81c      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800340a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800340e:	d010      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003414:	d816      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01d      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800341a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800341e:	d111      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fc82 	bl	8003d30 <RCCEx_PLL2_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003430:	e012      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3324      	adds	r3, #36	; 0x24
 8003436:	2102      	movs	r1, #2
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fd2b 	bl	8003e94 <RCCEx_PLL3_Config>
 800343e:	4603      	mov	r3, r0
 8003440:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003442:	e009      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	75fb      	strb	r3, [r7, #23]
      break;
 8003448:	e006      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800344a:	bf00      	nop
 800344c:	e004      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800344e:	bf00      	nop
 8003450:	e002      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003452:	bf00      	nop
 8003454:	e000      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003456:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003458:	7dfb      	ldrb	r3, [r7, #23]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10a      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800345e:	4b9d      	ldr	r3, [pc, #628]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800346c:	4999      	ldr	r1, [pc, #612]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800346e:	4313      	orrs	r3, r2
 8003470:	658b      	str	r3, [r1, #88]	; 0x58
 8003472:	e001      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003474:	7dfb      	ldrb	r3, [r7, #23]
 8003476:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d01a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800348a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348e:	d10a      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3324      	adds	r3, #36	; 0x24
 8003494:	2102      	movs	r1, #2
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fcfc 	bl	8003e94 <RCCEx_PLL3_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80034a6:	4b8b      	ldr	r3, [pc, #556]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034b4:	4987      	ldr	r1, [pc, #540]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d01a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034d0:	d10a      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3324      	adds	r3, #36	; 0x24
 80034d6:	2102      	movs	r1, #2
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fcdb 	bl	8003e94 <RCCEx_PLL3_Config>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034e8:	4b7a      	ldr	r3, [pc, #488]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f6:	4977      	ldr	r1, [pc, #476]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d034      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800350e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003512:	d01d      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003518:	d817      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800351e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003522:	d009      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003524:	e011      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3304      	adds	r3, #4
 800352a:	2100      	movs	r1, #0
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fbff 	bl	8003d30 <RCCEx_PLL2_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003536:	e00c      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3324      	adds	r3, #36	; 0x24
 800353c:	2102      	movs	r1, #2
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fca8 	bl	8003e94 <RCCEx_PLL3_Config>
 8003544:	4603      	mov	r3, r0
 8003546:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003548:	e003      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	75fb      	strb	r3, [r7, #23]
      break;
 800354e:	e000      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003550:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003552:	7dfb      	ldrb	r3, [r7, #23]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10a      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003558:	4b5e      	ldr	r3, [pc, #376]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003566:	495b      	ldr	r1, [pc, #364]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003568:	4313      	orrs	r3, r2
 800356a:	658b      	str	r3, [r1, #88]	; 0x58
 800356c:	e001      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356e:	7dfb      	ldrb	r3, [r7, #23]
 8003570:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d033      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003584:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003588:	d01c      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800358a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800358e:	d816      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003594:	d003      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003596:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800359a:	d007      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800359c:	e00f      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800359e:	4b4d      	ldr	r3, [pc, #308]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	4a4c      	ldr	r2, [pc, #304]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80035aa:	e00c      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3324      	adds	r3, #36	; 0x24
 80035b0:	2101      	movs	r1, #1
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fc6e 	bl	8003e94 <RCCEx_PLL3_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80035bc:	e003      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	75fb      	strb	r3, [r7, #23]
      break;
 80035c2:	e000      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80035c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035cc:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035da:	493e      	ldr	r1, [pc, #248]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	654b      	str	r3, [r1, #84]	; 0x54
 80035e0:	e001      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d029      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80035fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fe:	d007      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003600:	e00f      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003602:	4b34      	ldr	r3, [pc, #208]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	4a33      	ldr	r2, [pc, #204]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800360e:	e00b      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3304      	adds	r3, #4
 8003614:	2102      	movs	r1, #2
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fb8a 	bl	8003d30 <RCCEx_PLL2_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003620:	e002      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	75fb      	strb	r3, [r7, #23]
      break;
 8003626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800362e:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003632:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363a:	4926      	ldr	r1, [pc, #152]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800363c:	4313      	orrs	r3, r2
 800363e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003640:	e001      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003642:	7dfb      	ldrb	r3, [r7, #23]
 8003644:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3324      	adds	r3, #36	; 0x24
 8003656:	2102      	movs	r1, #2
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fc1b 	bl	8003e94 <RCCEx_PLL3_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d033      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800367c:	d017      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800367e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003682:	d811      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003688:	d013      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800368a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368e:	d80b      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d010      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003698:	d106      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	4a0d      	ldr	r2, [pc, #52]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80036a6:	e007      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	75fb      	strb	r3, [r7, #23]
      break;
 80036ac:	e004      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80036ae:	bf00      	nop
 80036b0:	e002      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80036b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036be:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ca:	4902      	ldr	r1, [pc, #8]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	654b      	str	r3, [r1, #84]	; 0x54
 80036d0:	e004      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80036d2:	bf00      	nop
 80036d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
 80036da:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036e8:	4b31      	ldr	r3, [pc, #196]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	492e      	ldr	r1, [pc, #184]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003706:	4b2a      	ldr	r3, [pc, #168]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003714:	4926      	ldr	r1, [pc, #152]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003716:	4313      	orrs	r3, r2
 8003718:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003726:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003732:	491f      	ldr	r1, [pc, #124]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003734:	4313      	orrs	r3, r2
 8003736:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003744:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	4a19      	ldr	r2, [pc, #100]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800374a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800374e:	6113      	str	r3, [r2, #16]
 8003750:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800375a:	4915      	ldr	r1, [pc, #84]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800375c:	4313      	orrs	r3, r2
 800375e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	da08      	bge.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003768:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800376a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003774:	490e      	ldr	r1, [pc, #56]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003776:	4313      	orrs	r3, r2
 8003778:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003794:	4906      	ldr	r1, [pc, #24]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003796:	4313      	orrs	r3, r2
 8003798:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800379a:	7dbb      	ldrb	r3, [r7, #22]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e000      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	58024400 	.word	0x58024400

080037b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80037b8:	f7ff f85a 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4904      	ldr	r1, [pc, #16]	; (80037dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	58024400 	.word	0x58024400
 80037dc:	08008a8c 	.word	0x08008a8c

080037e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	; 0x24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037e8:	4ba1      	ldr	r3, [pc, #644]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80037f2:	4b9f      	ldr	r3, [pc, #636]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	0b1b      	lsrs	r3, r3, #12
 80037f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80037fe:	4b9c      	ldr	r3, [pc, #624]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800380a:	4b99      	ldr	r3, [pc, #612]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	08db      	lsrs	r3, r3, #3
 8003810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003822:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 8111 	beq.w	8003a50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b02      	cmp	r3, #2
 8003832:	f000 8083 	beq.w	800393c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b02      	cmp	r3, #2
 800383a:	f200 80a1 	bhi.w	8003980 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d056      	beq.n	80038f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800384a:	e099      	b.n	8003980 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800384c:	4b88      	ldr	r3, [pc, #544]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d02d      	beq.n	80038b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003858:	4b85      	ldr	r3, [pc, #532]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	08db      	lsrs	r3, r3, #3
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	4a84      	ldr	r2, [pc, #528]	; (8003a74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
 8003868:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	ee07 3a90 	vmov	s15, r3
 8003870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003882:	4b7b      	ldr	r3, [pc, #492]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003892:	ed97 6a03 	vldr	s12, [r7, #12]
 8003896:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800389a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800389e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80038b2:	e087      	b.n	80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80038c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038c6:	4b6a      	ldr	r3, [pc, #424]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038f6:	e065      	b.n	80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003902:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800390a:	4b59      	ldr	r3, [pc, #356]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391a:	ed97 6a03 	vldr	s12, [r7, #12]
 800391e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800392e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003936:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800393a:	e043      	b.n	80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003946:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800394a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394e:	4b48      	ldr	r3, [pc, #288]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003962:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800396a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800397e:	e021      	b.n	80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800398e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003992:	4b37      	ldr	r3, [pc, #220]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80039a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80039c4:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	0a5b      	lsrs	r3, r3, #9
 80039ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039de:	edd7 6a07 	vldr	s13, [r7, #28]
 80039e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ea:	ee17 2a90 	vmov	r2, s15
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80039f2:	4b1f      	ldr	r3, [pc, #124]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	0c1b      	lsrs	r3, r3, #16
 80039f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a18:	ee17 2a90 	vmov	r2, s15
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003a20:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	0e1b      	lsrs	r3, r3, #24
 8003a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a46:	ee17 2a90 	vmov	r2, s15
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a4e:	e008      	b.n	8003a62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	609a      	str	r2, [r3, #8]
}
 8003a62:	bf00      	nop
 8003a64:	3724      	adds	r7, #36	; 0x24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	58024400 	.word	0x58024400
 8003a74:	03d09000 	.word	0x03d09000
 8003a78:	46000000 	.word	0x46000000
 8003a7c:	4c742400 	.word	0x4c742400
 8003a80:	4a742400 	.word	0x4a742400
 8003a84:	4af42400 	.word	0x4af42400

08003a88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b089      	sub	sp, #36	; 0x24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a90:	4ba1      	ldr	r3, [pc, #644]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003a9a:	4b9f      	ldr	r3, [pc, #636]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	0d1b      	lsrs	r3, r3, #20
 8003aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aa4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003aa6:	4b9c      	ldr	r3, [pc, #624]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	0a1b      	lsrs	r3, r3, #8
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003ab2:	4b99      	ldr	r3, [pc, #612]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	08db      	lsrs	r3, r3, #3
 8003ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	fb02 f303 	mul.w	r3, r2, r3
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8111 	beq.w	8003cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	f000 8083 	beq.w	8003be4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	f200 80a1 	bhi.w	8003c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d056      	beq.n	8003ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003af2:	e099      	b.n	8003c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003af4:	4b88      	ldr	r3, [pc, #544]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d02d      	beq.n	8003b5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b00:	4b85      	ldr	r3, [pc, #532]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	08db      	lsrs	r3, r3, #3
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	4a84      	ldr	r2, [pc, #528]	; (8003d1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b10:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	ee07 3a90 	vmov	s15, r3
 8003b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b2a:	4b7b      	ldr	r3, [pc, #492]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b56:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003b5a:	e087      	b.n	8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b6e:	4b6a      	ldr	r3, [pc, #424]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b9e:	e065      	b.n	8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003baa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bb2:	4b59      	ldr	r3, [pc, #356]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003be2:	e043      	b.n	8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bf6:	4b48      	ldr	r3, [pc, #288]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c26:	e021      	b.n	8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c3a:	4b37      	ldr	r3, [pc, #220]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003c6c:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	0a5b      	lsrs	r3, r3, #9
 8003c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c92:	ee17 2a90 	vmov	r2, s15
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003c9a:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	0c1b      	lsrs	r3, r3, #16
 8003ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cc0:	ee17 2a90 	vmov	r2, s15
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003cc8:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	0e1b      	lsrs	r3, r3, #24
 8003cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cee:	ee17 2a90 	vmov	r2, s15
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003cf6:	e008      	b.n	8003d0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	609a      	str	r2, [r3, #8]
}
 8003d0a:	bf00      	nop
 8003d0c:	3724      	adds	r7, #36	; 0x24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	03d09000 	.word	0x03d09000
 8003d20:	46000000 	.word	0x46000000
 8003d24:	4c742400 	.word	0x4c742400
 8003d28:	4a742400 	.word	0x4a742400
 8003d2c:	4af42400 	.word	0x4af42400

08003d30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d3e:	4b53      	ldr	r3, [pc, #332]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d101      	bne.n	8003d4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e099      	b.n	8003e82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d4e:	4b4f      	ldr	r3, [pc, #316]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a4e      	ldr	r2, [pc, #312]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003d54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5a:	f7fd fab9 	bl	80012d0 <HAL_GetTick>
 8003d5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d60:	e008      	b.n	8003d74 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d62:	f7fd fab5 	bl	80012d0 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e086      	b.n	8003e82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d74:	4b45      	ldr	r3, [pc, #276]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f0      	bne.n	8003d62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d80:	4b42      	ldr	r3, [pc, #264]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	031b      	lsls	r3, r3, #12
 8003d8e:	493f      	ldr	r1, [pc, #252]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	628b      	str	r3, [r1, #40]	; 0x28
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	025b      	lsls	r3, r3, #9
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	041b      	lsls	r3, r3, #16
 8003db2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	061b      	lsls	r3, r3, #24
 8003dc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003dc4:	4931      	ldr	r1, [pc, #196]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003dca:	4b30      	ldr	r3, [pc, #192]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	492d      	ldr	r1, [pc, #180]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ddc:	4b2b      	ldr	r3, [pc, #172]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	f023 0220 	bic.w	r2, r3, #32
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	4928      	ldr	r1, [pc, #160]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003dee:	4b27      	ldr	r3, [pc, #156]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	4a26      	ldr	r2, [pc, #152]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003df4:	f023 0310 	bic.w	r3, r3, #16
 8003df8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003dfa:	4b24      	ldr	r3, [pc, #144]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003dfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dfe:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <RCCEx_PLL2_Config+0x160>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	69d2      	ldr	r2, [r2, #28]
 8003e06:	00d2      	lsls	r2, r2, #3
 8003e08:	4920      	ldr	r1, [pc, #128]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e0e:	4b1f      	ldr	r3, [pc, #124]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e14:	f043 0310 	orr.w	r3, r3, #16
 8003e18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d106      	bne.n	8003e2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e20:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	4a19      	ldr	r2, [pc, #100]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e2c:	e00f      	b.n	8003e4e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d106      	bne.n	8003e42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e34:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e40:	e005      	b.n	8003e4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	4a11      	ldr	r2, [pc, #68]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e4e:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a0e      	ldr	r2, [pc, #56]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e5a:	f7fd fa39 	bl	80012d0 <HAL_GetTick>
 8003e5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e60:	e008      	b.n	8003e74 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e62:	f7fd fa35 	bl	80012d0 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e006      	b.n	8003e82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <RCCEx_PLL2_Config+0x15c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	58024400 	.word	0x58024400
 8003e90:	ffff0007 	.word	0xffff0007

08003e94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ea2:	4b53      	ldr	r3, [pc, #332]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d101      	bne.n	8003eb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e099      	b.n	8003fe6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003eb2:	4b4f      	ldr	r3, [pc, #316]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a4e      	ldr	r2, [pc, #312]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ebe:	f7fd fa07 	bl	80012d0 <HAL_GetTick>
 8003ec2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ec4:	e008      	b.n	8003ed8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ec6:	f7fd fa03 	bl	80012d0 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e086      	b.n	8003fe6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ed8:	4b45      	ldr	r3, [pc, #276]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f0      	bne.n	8003ec6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ee4:	4b42      	ldr	r3, [pc, #264]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	051b      	lsls	r3, r3, #20
 8003ef2:	493f      	ldr	r1, [pc, #252]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	628b      	str	r3, [r1, #40]	; 0x28
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	025b      	lsls	r3, r3, #9
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	041b      	lsls	r3, r3, #16
 8003f16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	061b      	lsls	r3, r3, #24
 8003f24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f28:	4931      	ldr	r1, [pc, #196]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f2e:	4b30      	ldr	r3, [pc, #192]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	492d      	ldr	r1, [pc, #180]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f40:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	4928      	ldr	r1, [pc, #160]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f52:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	4a26      	ldr	r2, [pc, #152]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f62:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <RCCEx_PLL3_Config+0x160>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	69d2      	ldr	r2, [r2, #28]
 8003f6a:	00d2      	lsls	r2, r2, #3
 8003f6c:	4920      	ldr	r1, [pc, #128]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f72:	4b1f      	ldr	r3, [pc, #124]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	4a1e      	ldr	r2, [pc, #120]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d106      	bne.n	8003f92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f84:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	4a19      	ldr	r2, [pc, #100]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f90:	e00f      	b.n	8003fb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d106      	bne.n	8003fa6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f98:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	4a14      	ldr	r2, [pc, #80]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003f9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fa4:	e005      	b.n	8003fb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003fa6:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	4a11      	ldr	r2, [pc, #68]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbe:	f7fd f987 	bl	80012d0 <HAL_GetTick>
 8003fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fc4:	e008      	b.n	8003fd8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003fc6:	f7fd f983 	bl	80012d0 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e006      	b.n	8003fe6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <RCCEx_PLL3_Config+0x15c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	58024400 	.word	0x58024400
 8003ff4:	ffff0007 	.word	0xffff0007

08003ff8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e0f1      	b.n	80041ee <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a78      	ldr	r2, [pc, #480]	; (80041f8 <HAL_SPI_Init+0x200>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00f      	beq.n	800403a <HAL_SPI_Init+0x42>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a77      	ldr	r2, [pc, #476]	; (80041fc <HAL_SPI_Init+0x204>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00a      	beq.n	800403a <HAL_SPI_Init+0x42>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a75      	ldr	r2, [pc, #468]	; (8004200 <HAL_SPI_Init+0x208>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d005      	beq.n	800403a <HAL_SPI_Init+0x42>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	2b0f      	cmp	r3, #15
 8004034:	d901      	bls.n	800403a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e0d9      	b.n	80041ee <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 ff66 	bl	8004f0c <SPI_GetPacketSize>
 8004040:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a6c      	ldr	r2, [pc, #432]	; (80041f8 <HAL_SPI_Init+0x200>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00c      	beq.n	8004066 <HAL_SPI_Init+0x6e>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a6a      	ldr	r2, [pc, #424]	; (80041fc <HAL_SPI_Init+0x204>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d007      	beq.n	8004066 <HAL_SPI_Init+0x6e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a69      	ldr	r2, [pc, #420]	; (8004200 <HAL_SPI_Init+0x208>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d002      	beq.n	8004066 <HAL_SPI_Init+0x6e>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b08      	cmp	r3, #8
 8004064:	d811      	bhi.n	800408a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800406a:	4a63      	ldr	r2, [pc, #396]	; (80041f8 <HAL_SPI_Init+0x200>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d009      	beq.n	8004084 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a61      	ldr	r2, [pc, #388]	; (80041fc <HAL_SPI_Init+0x204>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <HAL_SPI_Init+0x8c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a60      	ldr	r2, [pc, #384]	; (8004200 <HAL_SPI_Init+0x208>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d104      	bne.n	800408e <HAL_SPI_Init+0x96>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b10      	cmp	r3, #16
 8004088:	d901      	bls.n	800408e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e0af      	b.n	80041ee <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fc feaa 	bl	8000dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80040ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040d4:	d119      	bne.n	800410a <HAL_SPI_Init+0x112>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040de:	d103      	bne.n	80040e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10c      	bne.n	800410a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80040f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040f8:	d107      	bne.n	800410a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004108:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69da      	ldr	r2, [r3, #28]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	431a      	orrs	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411c:	ea42 0103 	orr.w	r1, r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800416a:	ea42 0103 	orr.w	r1, r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d113      	bne.n	80041aa <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004194:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041a8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0201 	bic.w	r2, r2, #1
 80041b8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40013000 	.word	0x40013000
 80041fc:	40003800 	.word	0x40003800
 8004200:	40003c00 	.word	0x40003c00

08004204 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	; 0x28
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3320      	adds	r3, #32
 800421a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_SPI_Transmit+0x2a>
 800422a:	2302      	movs	r3, #2
 800422c:	e1d7      	b.n	80045de <HAL_SPI_Transmit+0x3da>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004236:	f7fd f84b 	bl	80012d0 <HAL_GetTick>
 800423a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	d007      	beq.n	8004258 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004248:	2302      	movs	r3, #2
 800424a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004254:	7efb      	ldrb	r3, [r7, #27]
 8004256:	e1c2      	b.n	80045de <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_SPI_Transmit+0x60>
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d107      	bne.n	8004274 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004270:	7efb      	ldrb	r3, [r7, #27]
 8004272:	e1b4      	b.n	80045de <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2203      	movs	r2, #3
 8004278:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	88fa      	ldrh	r2, [r7, #6]
 800428e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	88fa      	ldrh	r2, [r7, #6]
 8004296:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80042c4:	d107      	bne.n	80042d6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	4b96      	ldr	r3, [pc, #600]	; (8004538 <HAL_SPI_Transmit+0x334>)
 80042de:	4013      	ands	r3, r2
 80042e0:	88f9      	ldrh	r1, [r7, #6]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	6812      	ldr	r2, [r2, #0]
 80042e6:	430b      	orrs	r3, r1
 80042e8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0201 	orr.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004302:	d107      	bne.n	8004314 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004312:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b0f      	cmp	r3, #15
 800431a:	d947      	bls.n	80043ac <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800431c:	e03f      	b.n	800439e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b02      	cmp	r3, #2
 800432a:	d114      	bne.n	8004356 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433c:	1d1a      	adds	r2, r3, #4
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004354:	e023      	b.n	800439e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004356:	f7fc ffbb 	bl	80012d0 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d803      	bhi.n	800436e <HAL_SPI_Transmit+0x16a>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436c:	d102      	bne.n	8004374 <HAL_SPI_Transmit+0x170>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d114      	bne.n	800439e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fcfb 	bl	8004d70 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004388:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e11f      	b.n	80045de <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1b9      	bne.n	800431e <HAL_SPI_Transmit+0x11a>
 80043aa:	e0f2      	b.n	8004592 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b07      	cmp	r3, #7
 80043b2:	f240 80e7 	bls.w	8004584 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80043b6:	e05d      	b.n	8004474 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d132      	bne.n	800442c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d918      	bls.n	8004404 <HAL_SPI_Transmit+0x200>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d014      	beq.n	8004404 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ea:	1d1a      	adds	r2, r3, #4
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b02      	subs	r3, #2
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004402:	e037      	b.n	8004474 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004408:	881a      	ldrh	r2, [r3, #0]
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004412:	1c9a      	adds	r2, r3, #2
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800442a:	e023      	b.n	8004474 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800442c:	f7fc ff50 	bl	80012d0 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d803      	bhi.n	8004444 <HAL_SPI_Transmit+0x240>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004442:	d102      	bne.n	800444a <HAL_SPI_Transmit+0x246>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d114      	bne.n	8004474 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fc90 	bl	8004d70 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800445e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e0b4      	b.n	80045de <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d19b      	bne.n	80043b8 <HAL_SPI_Transmit+0x1b4>
 8004480:	e087      	b.n	8004592 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b02      	cmp	r3, #2
 800448e:	d155      	bne.n	800453c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b03      	cmp	r3, #3
 800449a:	d918      	bls.n	80044ce <HAL_SPI_Transmit+0x2ca>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a0:	2b40      	cmp	r3, #64	; 0x40
 80044a2:	d914      	bls.n	80044ce <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b4:	1d1a      	adds	r2, r3, #4
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b04      	subs	r3, #4
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80044cc:	e05a      	b.n	8004584 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d917      	bls.n	800450a <HAL_SPI_Transmit+0x306>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d013      	beq.n	800450a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e6:	881a      	ldrh	r2, [r3, #0]
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f0:	1c9a      	adds	r2, r3, #2
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b02      	subs	r3, #2
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004508:	e03c      	b.n	8004584 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3320      	adds	r3, #32
 8004514:	7812      	ldrb	r2, [r2, #0]
 8004516:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004534:	e026      	b.n	8004584 <HAL_SPI_Transmit+0x380>
 8004536:	bf00      	nop
 8004538:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800453c:	f7fc fec8 	bl	80012d0 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d803      	bhi.n	8004554 <HAL_SPI_Transmit+0x350>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004552:	d102      	bne.n	800455a <HAL_SPI_Transmit+0x356>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d114      	bne.n	8004584 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 fc08 	bl	8004d70 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800456e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e02c      	b.n	80045de <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	f47f af78 	bne.w	8004482 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2200      	movs	r2, #0
 800459a:	2108      	movs	r1, #8
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fc87 	bl	8004eb0 <SPI_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ae:	f043 0220 	orr.w	r2, r3, #32
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fbd9 	bl	8004d70 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e000      	b.n	80045de <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80045dc:	7efb      	ldrb	r3, [r7, #27]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3720      	adds	r7, #32
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop

080045e8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	4613      	mov	r3, r2
 80045f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3330      	adds	r3, #48	; 0x30
 8004602:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800460c:	d112      	bne.n	8004634 <HAL_SPI_Receive+0x4c>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10e      	bne.n	8004634 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2204      	movs	r2, #4
 800461a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800461e:	88fa      	ldrh	r2, [r7, #6]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f978 	bl	8004920 <HAL_SPI_TransmitReceive>
 8004630:	4603      	mov	r3, r0
 8004632:	e16f      	b.n	8004914 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_SPI_Receive+0x5a>
 800463e:	2302      	movs	r3, #2
 8004640:	e168      	b.n	8004914 <HAL_SPI_Receive+0x32c>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800464a:	f7fc fe41 	bl	80012d0 <HAL_GetTick>
 800464e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d007      	beq.n	800466c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800465c:	2302      	movs	r3, #2
 800465e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004668:	7ffb      	ldrb	r3, [r7, #31]
 800466a:	e153      	b.n	8004914 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <HAL_SPI_Receive+0x90>
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d107      	bne.n	8004688 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004684:	7ffb      	ldrb	r3, [r7, #31]
 8004686:	e145      	b.n	8004914 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2204      	movs	r2, #4
 800468c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	88fa      	ldrh	r2, [r7, #6]
 80046a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	88fa      	ldrh	r2, [r7, #6]
 80046aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80046d8:	d107      	bne.n	80046ea <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	4b8a      	ldr	r3, [pc, #552]	; (800491c <HAL_SPI_Receive+0x334>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	88f9      	ldrh	r1, [r7, #6]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	6812      	ldr	r2, [r2, #0]
 80046fa:	430b      	orrs	r3, r1
 80046fc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0201 	orr.w	r2, r2, #1
 800470c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004716:	d107      	bne.n	8004728 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004726:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	2b0f      	cmp	r3, #15
 800472e:	d948      	bls.n	80047c2 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004730:	e040      	b.n	80047b4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695a      	ldr	r2, [r3, #20]
 8004738:	f248 0308 	movw	r3, #32776	; 0x8008
 800473c:	4013      	ands	r3, r2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d014      	beq.n	800476c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800474a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800474c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004752:	1d1a      	adds	r2, r3, #4
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800476a:	e023      	b.n	80047b4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800476c:	f7fc fdb0 	bl	80012d0 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d803      	bhi.n	8004784 <HAL_SPI_Receive+0x19c>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004782:	d102      	bne.n	800478a <HAL_SPI_Receive+0x1a2>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d114      	bne.n	80047b4 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 faf0 	bl	8004d70 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e0af      	b.n	8004914 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1b8      	bne.n	8004732 <HAL_SPI_Receive+0x14a>
 80047c0:	e095      	b.n	80048ee <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	2b07      	cmp	r3, #7
 80047c8:	f240 808b 	bls.w	80048e2 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80047cc:	e03f      	b.n	800484e <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d114      	bne.n	8004806 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	8812      	ldrh	r2, [r2, #0]
 80047e4:	b292      	uxth	r2, r2
 80047e6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ec:	1c9a      	adds	r2, r3, #2
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004804:	e023      	b.n	800484e <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004806:	f7fc fd63 	bl	80012d0 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d803      	bhi.n	800481e <HAL_SPI_Receive+0x236>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481c:	d102      	bne.n	8004824 <HAL_SPI_Receive+0x23c>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d114      	bne.n	800484e <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 faa3 	bl	8004d70 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004838:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e062      	b.n	8004914 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1b9      	bne.n	80047ce <HAL_SPI_Receive+0x1e6>
 800485a:	e048      	b.n	80048ee <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b01      	cmp	r3, #1
 8004868:	d117      	bne.n	800489a <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004876:	7812      	ldrb	r2, [r2, #0]
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004898:	e023      	b.n	80048e2 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800489a:	f7fc fd19 	bl	80012d0 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d803      	bhi.n	80048b2 <HAL_SPI_Receive+0x2ca>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b0:	d102      	bne.n	80048b8 <HAL_SPI_Receive+0x2d0>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d114      	bne.n	80048e2 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fa59 	bl	8004d70 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e018      	b.n	8004914 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1b6      	bne.n	800485c <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 fa3e 	bl	8004d70 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8004912:	7ffb      	ldrb	r3, [r7, #31]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3720      	adds	r7, #32
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	ffff0000 	.word	0xffff0000

08004920 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08e      	sub	sp, #56	; 0x38
 8004924:	af02      	add	r7, sp, #8
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3320      	adds	r3, #32
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3330      	adds	r3, #48	; 0x30
 8004942:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_SPI_TransmitReceive+0x32>
 800494e:	2302      	movs	r3, #2
 8004950:	e209      	b.n	8004d66 <HAL_SPI_TransmitReceive+0x446>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800495a:	f7fc fcb9 	bl	80012d0 <HAL_GetTick>
 800495e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8004960:	887b      	ldrh	r3, [r7, #2]
 8004962:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8004964:	887b      	ldrh	r3, [r7, #2]
 8004966:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800496e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004976:	7efb      	ldrb	r3, [r7, #27]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d014      	beq.n	80049a6 <HAL_SPI_TransmitReceive+0x86>
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004982:	d106      	bne.n	8004992 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8004988:	2b00      	cmp	r3, #0
 800498a:	d102      	bne.n	8004992 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800498c:	7efb      	ldrb	r3, [r7, #27]
 800498e:	2b04      	cmp	r3, #4
 8004990:	d009      	beq.n	80049a6 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8004992:	2302      	movs	r3, #2
 8004994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80049a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049a4:	e1df      	b.n	8004d66 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_SPI_TransmitReceive+0x98>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <HAL_SPI_TransmitReceive+0x98>
 80049b2:	887b      	ldrh	r3, [r7, #2]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80049c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049ca:	e1cc      	b.n	8004d66 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d003      	beq.n	80049e0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2205      	movs	r2, #5
 80049dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	887a      	ldrh	r2, [r7, #2]
 80049f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	887a      	ldrh	r2, [r7, #2]
 80049fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	887a      	ldrh	r2, [r7, #2]
 8004a08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	887a      	ldrh	r2, [r7, #2]
 8004a10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	4b82      	ldr	r3, [pc, #520]	; (8004c30 <HAL_SPI_TransmitReceive+0x310>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	8879      	ldrh	r1, [r7, #2]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a4c:	d107      	bne.n	8004a5e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2b0f      	cmp	r3, #15
 8004a64:	d970      	bls.n	8004b48 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004a66:	e068      	b.n	8004b3a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d11a      	bne.n	8004aac <HAL_SPI_TransmitReceive+0x18c>
 8004a76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d017      	beq.n	8004aac <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6812      	ldr	r2, [r2, #0]
 8004a86:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8c:	1d1a      	adds	r2, r3, #4
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004aaa:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695a      	ldr	r2, [r3, #20]
 8004ab2:	f248 0308 	movw	r3, #32776	; 0x8008
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01a      	beq.n	8004af2 <HAL_SPI_TransmitReceive+0x1d2>
 8004abc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d017      	beq.n	8004af2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004acc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ad2:	1d1a      	adds	r2, r3, #4
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004af0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004af2:	f7fc fbed 	bl	80012d0 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d803      	bhi.n	8004b0a <HAL_SPI_TransmitReceive+0x1ea>
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d102      	bne.n	8004b10 <HAL_SPI_TransmitReceive+0x1f0>
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d114      	bne.n	8004b3a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 f92d 	bl	8004d70 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e115      	b.n	8004d66 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004b3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d193      	bne.n	8004a68 <HAL_SPI_TransmitReceive+0x148>
 8004b40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d190      	bne.n	8004a68 <HAL_SPI_TransmitReceive+0x148>
 8004b46:	e0e7      	b.n	8004d18 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	2b07      	cmp	r3, #7
 8004b4e:	f240 80dd 	bls.w	8004d0c <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004b52:	e066      	b.n	8004c22 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d119      	bne.n	8004b96 <HAL_SPI_TransmitReceive+0x276>
 8004b62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d016      	beq.n	8004b96 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6c:	881a      	ldrh	r2, [r3, #0]
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b76:	1c9a      	adds	r2, r3, #2
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b94:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d11a      	bne.n	8004bda <HAL_SPI_TransmitReceive+0x2ba>
 8004ba4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d017      	beq.n	8004bda <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bae:	6a3a      	ldr	r2, [r7, #32]
 8004bb0:	8812      	ldrh	r2, [r2, #0]
 8004bb2:	b292      	uxth	r2, r2
 8004bb4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bba:	1c9a      	adds	r2, r3, #2
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004bd8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bda:	f7fc fb79 	bl	80012d0 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d803      	bhi.n	8004bf2 <HAL_SPI_TransmitReceive+0x2d2>
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf0:	d102      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x2d8>
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d114      	bne.n	8004c22 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f8b9 	bl	8004d70 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e0a1      	b.n	8004d66 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004c22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d195      	bne.n	8004b54 <HAL_SPI_TransmitReceive+0x234>
 8004c28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d192      	bne.n	8004b54 <HAL_SPI_TransmitReceive+0x234>
 8004c2e:	e073      	b.n	8004d18 <HAL_SPI_TransmitReceive+0x3f8>
 8004c30:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d11b      	bne.n	8004c7a <HAL_SPI_TransmitReceive+0x35a>
 8004c42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d018      	beq.n	8004c7a <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3320      	adds	r3, #32
 8004c52:	7812      	ldrb	r2, [r2, #0]
 8004c54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004c78:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d11d      	bne.n	8004cc4 <HAL_SPI_TransmitReceive+0x3a4>
 8004c88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d01a      	beq.n	8004cc4 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c9a:	7812      	ldrb	r2, [r2, #0]
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004cc2:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cc4:	f7fc fb04 	bl	80012d0 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d803      	bhi.n	8004cdc <HAL_SPI_TransmitReceive+0x3bc>
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cda:	d102      	bne.n	8004ce2 <HAL_SPI_TransmitReceive+0x3c2>
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d114      	bne.n	8004d0c <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 f844 	bl	8004d70 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cf6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e02c      	b.n	8004d66 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004d0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d190      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x314>
 8004d12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d18d      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8004d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2108      	movs	r1, #8
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 f8c4 	bl	8004eb0 <SPI_WaitOnFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d34:	f043 0220 	orr.w	r2, r3, #32
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f816 	bl	8004d70 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e001      	b.n	8004d66 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8004d62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3730      	adds	r7, #48	; 0x30
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop

08004d70 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0208 	orr.w	r2, r2, #8
 8004d8e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0210 	orr.w	r2, r2, #16
 8004d9e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0201 	bic.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6919      	ldr	r1, [r3, #16]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4b3c      	ldr	r3, [pc, #240]	; (8004eac <SPI_CloseTransfer+0x13c>)
 8004dbc:	400b      	ands	r3, r1
 8004dbe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004dce:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d014      	beq.n	8004e06 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00f      	beq.n	8004e06 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699a      	ldr	r2, [r3, #24]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0220 	orr.w	r2, r2, #32
 8004e04:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d014      	beq.n	8004e3c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00f      	beq.n	8004e3c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e22:	f043 0204 	orr.w	r2, r3, #4
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699a      	ldr	r2, [r3, #24]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e3a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00f      	beq.n	8004e66 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e4c:	f043 0201 	orr.w	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	699a      	ldr	r2, [r3, #24]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e64:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00f      	beq.n	8004e90 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e76:	f043 0208 	orr.w	r2, r3, #8
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e8e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8004ea0:	bf00      	nop
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	fffffc90 	.word	0xfffffc90

08004eb0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004ec0:	e010      	b.n	8004ee4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ec2:	f7fc fa05 	bl	80012d0 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d803      	bhi.n	8004eda <SPI_WaitOnFlagUntilTimeout+0x2a>
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d102      	bne.n	8004ee0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e00f      	b.n	8004f04 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695a      	ldr	r2, [r3, #20]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4013      	ands	r3, r2
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	bf0c      	ite	eq
 8004ef4:	2301      	moveq	r3, #1
 8004ef6:	2300      	movne	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	79fb      	ldrb	r3, [r7, #7]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d0df      	beq.n	8004ec2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f18:	095b      	lsrs	r3, r3, #5
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	3301      	adds	r3, #1
 8004f24:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	3307      	adds	r3, #7
 8004f2a:	08db      	lsrs	r3, r3, #3
 8004f2c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	fb02 f303 	mul.w	r3, r2, r3
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e042      	b.n	8004fda <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fb ffac 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2224      	movs	r2, #36	; 0x24
 8004f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0201 	bic.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f8c3 	bl	8005110 <UART_SetConfig>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e022      	b.n	8004fda <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fe1f 	bl	8005be0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fb0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fc0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0201 	orr.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fea6 	bl	8005d24 <UART_CheckIdleState>
 8004fd8:	4603      	mov	r3, r0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b08a      	sub	sp, #40	; 0x28
 8004fe6:	af02      	add	r7, sp, #8
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	603b      	str	r3, [r7, #0]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	f040 8083 	bne.w	8005104 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <HAL_UART_Transmit+0x28>
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e07b      	b.n	8005106 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_UART_Transmit+0x3a>
 8005018:	2302      	movs	r3, #2
 800501a:	e074      	b.n	8005106 <HAL_UART_Transmit+0x124>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2221      	movs	r2, #33	; 0x21
 8005030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005034:	f7fc f94c 	bl	80012d0 <HAL_GetTick>
 8005038:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	88fa      	ldrh	r2, [r7, #6]
 800503e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	88fa      	ldrh	r2, [r7, #6]
 8005046:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005052:	d108      	bne.n	8005066 <HAL_UART_Transmit+0x84>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d104      	bne.n	8005066 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800505c:	2300      	movs	r3, #0
 800505e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	e003      	b.n	800506e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005076:	e02c      	b.n	80050d2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2200      	movs	r2, #0
 8005080:	2180      	movs	r1, #128	; 0x80
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 fe99 	bl	8005dba <UART_WaitOnFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e039      	b.n	8005106 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10b      	bne.n	80050b0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	3302      	adds	r3, #2
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	e007      	b.n	80050c0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	781a      	ldrb	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	3301      	adds	r3, #1
 80050be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1cc      	bne.n	8005078 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2200      	movs	r2, #0
 80050e6:	2140      	movs	r1, #64	; 0x40
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 fe66 	bl	8005dba <UART_WaitOnFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e006      	b.n	8005106 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	e000      	b.n	8005106 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005114:	b092      	sub	sp, #72	; 0x48
 8005116:	af00      	add	r7, sp, #0
 8005118:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	431a      	orrs	r2, r3
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	431a      	orrs	r2, r3
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	4313      	orrs	r3, r2
 8005136:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	4bbe      	ldr	r3, [pc, #760]	; (8005438 <UART_SetConfig+0x328>)
 8005140:	4013      	ands	r3, r2
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	6812      	ldr	r2, [r2, #0]
 8005146:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005148:	430b      	orrs	r3, r1
 800514a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4ab3      	ldr	r2, [pc, #716]	; (800543c <UART_SetConfig+0x32c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005178:	4313      	orrs	r3, r2
 800517a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	4baf      	ldr	r3, [pc, #700]	; (8005440 <UART_SetConfig+0x330>)
 8005184:	4013      	ands	r3, r2
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	6812      	ldr	r2, [r2, #0]
 800518a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800518c:	430b      	orrs	r3, r1
 800518e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	f023 010f 	bic.w	r1, r3, #15
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4aa6      	ldr	r2, [pc, #664]	; (8005444 <UART_SetConfig+0x334>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d177      	bne.n	80052a0 <UART_SetConfig+0x190>
 80051b0:	4ba5      	ldr	r3, [pc, #660]	; (8005448 <UART_SetConfig+0x338>)
 80051b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051b8:	2b28      	cmp	r3, #40	; 0x28
 80051ba:	d86d      	bhi.n	8005298 <UART_SetConfig+0x188>
 80051bc:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <UART_SetConfig+0xb4>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	08005269 	.word	0x08005269
 80051c8:	08005299 	.word	0x08005299
 80051cc:	08005299 	.word	0x08005299
 80051d0:	08005299 	.word	0x08005299
 80051d4:	08005299 	.word	0x08005299
 80051d8:	08005299 	.word	0x08005299
 80051dc:	08005299 	.word	0x08005299
 80051e0:	08005299 	.word	0x08005299
 80051e4:	08005271 	.word	0x08005271
 80051e8:	08005299 	.word	0x08005299
 80051ec:	08005299 	.word	0x08005299
 80051f0:	08005299 	.word	0x08005299
 80051f4:	08005299 	.word	0x08005299
 80051f8:	08005299 	.word	0x08005299
 80051fc:	08005299 	.word	0x08005299
 8005200:	08005299 	.word	0x08005299
 8005204:	08005279 	.word	0x08005279
 8005208:	08005299 	.word	0x08005299
 800520c:	08005299 	.word	0x08005299
 8005210:	08005299 	.word	0x08005299
 8005214:	08005299 	.word	0x08005299
 8005218:	08005299 	.word	0x08005299
 800521c:	08005299 	.word	0x08005299
 8005220:	08005299 	.word	0x08005299
 8005224:	08005281 	.word	0x08005281
 8005228:	08005299 	.word	0x08005299
 800522c:	08005299 	.word	0x08005299
 8005230:	08005299 	.word	0x08005299
 8005234:	08005299 	.word	0x08005299
 8005238:	08005299 	.word	0x08005299
 800523c:	08005299 	.word	0x08005299
 8005240:	08005299 	.word	0x08005299
 8005244:	08005289 	.word	0x08005289
 8005248:	08005299 	.word	0x08005299
 800524c:	08005299 	.word	0x08005299
 8005250:	08005299 	.word	0x08005299
 8005254:	08005299 	.word	0x08005299
 8005258:	08005299 	.word	0x08005299
 800525c:	08005299 	.word	0x08005299
 8005260:	08005299 	.word	0x08005299
 8005264:	08005291 	.word	0x08005291
 8005268:	2301      	movs	r3, #1
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800526e:	e222      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005270:	2304      	movs	r3, #4
 8005272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005276:	e21e      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005278:	2308      	movs	r3, #8
 800527a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800527e:	e21a      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005280:	2310      	movs	r3, #16
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005286:	e216      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005288:	2320      	movs	r3, #32
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528e:	e212      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005290:	2340      	movs	r3, #64	; 0x40
 8005292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005296:	e20e      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005298:	2380      	movs	r3, #128	; 0x80
 800529a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529e:	e20a      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a69      	ldr	r2, [pc, #420]	; (800544c <UART_SetConfig+0x33c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d130      	bne.n	800530c <UART_SetConfig+0x1fc>
 80052aa:	4b67      	ldr	r3, [pc, #412]	; (8005448 <UART_SetConfig+0x338>)
 80052ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	2b05      	cmp	r3, #5
 80052b4:	d826      	bhi.n	8005304 <UART_SetConfig+0x1f4>
 80052b6:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <UART_SetConfig+0x1ac>)
 80052b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052bc:	080052d5 	.word	0x080052d5
 80052c0:	080052dd 	.word	0x080052dd
 80052c4:	080052e5 	.word	0x080052e5
 80052c8:	080052ed 	.word	0x080052ed
 80052cc:	080052f5 	.word	0x080052f5
 80052d0:	080052fd 	.word	0x080052fd
 80052d4:	2300      	movs	r3, #0
 80052d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052da:	e1ec      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80052dc:	2304      	movs	r3, #4
 80052de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e2:	e1e8      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80052e4:	2308      	movs	r3, #8
 80052e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ea:	e1e4      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80052ec:	2310      	movs	r3, #16
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f2:	e1e0      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80052f4:	2320      	movs	r3, #32
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fa:	e1dc      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80052fc:	2340      	movs	r3, #64	; 0x40
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005302:	e1d8      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005304:	2380      	movs	r3, #128	; 0x80
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530a:	e1d4      	b.n	80056b6 <UART_SetConfig+0x5a6>
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a4f      	ldr	r2, [pc, #316]	; (8005450 <UART_SetConfig+0x340>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d130      	bne.n	8005378 <UART_SetConfig+0x268>
 8005316:	4b4c      	ldr	r3, [pc, #304]	; (8005448 <UART_SetConfig+0x338>)
 8005318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	2b05      	cmp	r3, #5
 8005320:	d826      	bhi.n	8005370 <UART_SetConfig+0x260>
 8005322:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <UART_SetConfig+0x218>)
 8005324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005328:	08005341 	.word	0x08005341
 800532c:	08005349 	.word	0x08005349
 8005330:	08005351 	.word	0x08005351
 8005334:	08005359 	.word	0x08005359
 8005338:	08005361 	.word	0x08005361
 800533c:	08005369 	.word	0x08005369
 8005340:	2300      	movs	r3, #0
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005346:	e1b6      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005348:	2304      	movs	r3, #4
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800534e:	e1b2      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005350:	2308      	movs	r3, #8
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005356:	e1ae      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005358:	2310      	movs	r3, #16
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535e:	e1aa      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005360:	2320      	movs	r3, #32
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005366:	e1a6      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005368:	2340      	movs	r3, #64	; 0x40
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536e:	e1a2      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005370:	2380      	movs	r3, #128	; 0x80
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005376:	e19e      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a35      	ldr	r2, [pc, #212]	; (8005454 <UART_SetConfig+0x344>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d130      	bne.n	80053e4 <UART_SetConfig+0x2d4>
 8005382:	4b31      	ldr	r3, [pc, #196]	; (8005448 <UART_SetConfig+0x338>)
 8005384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	2b05      	cmp	r3, #5
 800538c:	d826      	bhi.n	80053dc <UART_SetConfig+0x2cc>
 800538e:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <UART_SetConfig+0x284>)
 8005390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005394:	080053ad 	.word	0x080053ad
 8005398:	080053b5 	.word	0x080053b5
 800539c:	080053bd 	.word	0x080053bd
 80053a0:	080053c5 	.word	0x080053c5
 80053a4:	080053cd 	.word	0x080053cd
 80053a8:	080053d5 	.word	0x080053d5
 80053ac:	2300      	movs	r3, #0
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b2:	e180      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80053b4:	2304      	movs	r3, #4
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ba:	e17c      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80053bc:	2308      	movs	r3, #8
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053c2:	e178      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80053c4:	2310      	movs	r3, #16
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ca:	e174      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80053cc:	2320      	movs	r3, #32
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d2:	e170      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80053d4:	2340      	movs	r3, #64	; 0x40
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053da:	e16c      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80053dc:	2380      	movs	r3, #128	; 0x80
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e2:	e168      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a1b      	ldr	r2, [pc, #108]	; (8005458 <UART_SetConfig+0x348>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d142      	bne.n	8005474 <UART_SetConfig+0x364>
 80053ee:	4b16      	ldr	r3, [pc, #88]	; (8005448 <UART_SetConfig+0x338>)
 80053f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	2b05      	cmp	r3, #5
 80053f8:	d838      	bhi.n	800546c <UART_SetConfig+0x35c>
 80053fa:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <UART_SetConfig+0x2f0>)
 80053fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005400:	08005419 	.word	0x08005419
 8005404:	08005421 	.word	0x08005421
 8005408:	08005429 	.word	0x08005429
 800540c:	08005431 	.word	0x08005431
 8005410:	0800545d 	.word	0x0800545d
 8005414:	08005465 	.word	0x08005465
 8005418:	2300      	movs	r3, #0
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541e:	e14a      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005420:	2304      	movs	r3, #4
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005426:	e146      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005428:	2308      	movs	r3, #8
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542e:	e142      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005430:	2310      	movs	r3, #16
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005436:	e13e      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005438:	cfff69f3 	.word	0xcfff69f3
 800543c:	58000c00 	.word	0x58000c00
 8005440:	11fff4ff 	.word	0x11fff4ff
 8005444:	40011000 	.word	0x40011000
 8005448:	58024400 	.word	0x58024400
 800544c:	40004400 	.word	0x40004400
 8005450:	40004800 	.word	0x40004800
 8005454:	40004c00 	.word	0x40004c00
 8005458:	40005000 	.word	0x40005000
 800545c:	2320      	movs	r3, #32
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005462:	e128      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005464:	2340      	movs	r3, #64	; 0x40
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546a:	e124      	b.n	80056b6 <UART_SetConfig+0x5a6>
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005472:	e120      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4acb      	ldr	r2, [pc, #812]	; (80057a8 <UART_SetConfig+0x698>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d176      	bne.n	800556c <UART_SetConfig+0x45c>
 800547e:	4bcb      	ldr	r3, [pc, #812]	; (80057ac <UART_SetConfig+0x69c>)
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005486:	2b28      	cmp	r3, #40	; 0x28
 8005488:	d86c      	bhi.n	8005564 <UART_SetConfig+0x454>
 800548a:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <UART_SetConfig+0x380>)
 800548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005490:	08005535 	.word	0x08005535
 8005494:	08005565 	.word	0x08005565
 8005498:	08005565 	.word	0x08005565
 800549c:	08005565 	.word	0x08005565
 80054a0:	08005565 	.word	0x08005565
 80054a4:	08005565 	.word	0x08005565
 80054a8:	08005565 	.word	0x08005565
 80054ac:	08005565 	.word	0x08005565
 80054b0:	0800553d 	.word	0x0800553d
 80054b4:	08005565 	.word	0x08005565
 80054b8:	08005565 	.word	0x08005565
 80054bc:	08005565 	.word	0x08005565
 80054c0:	08005565 	.word	0x08005565
 80054c4:	08005565 	.word	0x08005565
 80054c8:	08005565 	.word	0x08005565
 80054cc:	08005565 	.word	0x08005565
 80054d0:	08005545 	.word	0x08005545
 80054d4:	08005565 	.word	0x08005565
 80054d8:	08005565 	.word	0x08005565
 80054dc:	08005565 	.word	0x08005565
 80054e0:	08005565 	.word	0x08005565
 80054e4:	08005565 	.word	0x08005565
 80054e8:	08005565 	.word	0x08005565
 80054ec:	08005565 	.word	0x08005565
 80054f0:	0800554d 	.word	0x0800554d
 80054f4:	08005565 	.word	0x08005565
 80054f8:	08005565 	.word	0x08005565
 80054fc:	08005565 	.word	0x08005565
 8005500:	08005565 	.word	0x08005565
 8005504:	08005565 	.word	0x08005565
 8005508:	08005565 	.word	0x08005565
 800550c:	08005565 	.word	0x08005565
 8005510:	08005555 	.word	0x08005555
 8005514:	08005565 	.word	0x08005565
 8005518:	08005565 	.word	0x08005565
 800551c:	08005565 	.word	0x08005565
 8005520:	08005565 	.word	0x08005565
 8005524:	08005565 	.word	0x08005565
 8005528:	08005565 	.word	0x08005565
 800552c:	08005565 	.word	0x08005565
 8005530:	0800555d 	.word	0x0800555d
 8005534:	2301      	movs	r3, #1
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800553a:	e0bc      	b.n	80056b6 <UART_SetConfig+0x5a6>
 800553c:	2304      	movs	r3, #4
 800553e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005542:	e0b8      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005544:	2308      	movs	r3, #8
 8005546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800554a:	e0b4      	b.n	80056b6 <UART_SetConfig+0x5a6>
 800554c:	2310      	movs	r3, #16
 800554e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005552:	e0b0      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005554:	2320      	movs	r3, #32
 8005556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800555a:	e0ac      	b.n	80056b6 <UART_SetConfig+0x5a6>
 800555c:	2340      	movs	r3, #64	; 0x40
 800555e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005562:	e0a8      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005564:	2380      	movs	r3, #128	; 0x80
 8005566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556a:	e0a4      	b.n	80056b6 <UART_SetConfig+0x5a6>
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a8f      	ldr	r2, [pc, #572]	; (80057b0 <UART_SetConfig+0x6a0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d130      	bne.n	80055d8 <UART_SetConfig+0x4c8>
 8005576:	4b8d      	ldr	r3, [pc, #564]	; (80057ac <UART_SetConfig+0x69c>)
 8005578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	2b05      	cmp	r3, #5
 8005580:	d826      	bhi.n	80055d0 <UART_SetConfig+0x4c0>
 8005582:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <UART_SetConfig+0x478>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	080055a1 	.word	0x080055a1
 800558c:	080055a9 	.word	0x080055a9
 8005590:	080055b1 	.word	0x080055b1
 8005594:	080055b9 	.word	0x080055b9
 8005598:	080055c1 	.word	0x080055c1
 800559c:	080055c9 	.word	0x080055c9
 80055a0:	2300      	movs	r3, #0
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a6:	e086      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80055a8:	2304      	movs	r3, #4
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ae:	e082      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80055b0:	2308      	movs	r3, #8
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b6:	e07e      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80055b8:	2310      	movs	r3, #16
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055be:	e07a      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80055c0:	2320      	movs	r3, #32
 80055c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c6:	e076      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80055c8:	2340      	movs	r3, #64	; 0x40
 80055ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ce:	e072      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80055d0:	2380      	movs	r3, #128	; 0x80
 80055d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055d6:	e06e      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a75      	ldr	r2, [pc, #468]	; (80057b4 <UART_SetConfig+0x6a4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d130      	bne.n	8005644 <UART_SetConfig+0x534>
 80055e2:	4b72      	ldr	r3, [pc, #456]	; (80057ac <UART_SetConfig+0x69c>)
 80055e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	2b05      	cmp	r3, #5
 80055ec:	d826      	bhi.n	800563c <UART_SetConfig+0x52c>
 80055ee:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <UART_SetConfig+0x4e4>)
 80055f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f4:	0800560d 	.word	0x0800560d
 80055f8:	08005615 	.word	0x08005615
 80055fc:	0800561d 	.word	0x0800561d
 8005600:	08005625 	.word	0x08005625
 8005604:	0800562d 	.word	0x0800562d
 8005608:	08005635 	.word	0x08005635
 800560c:	2300      	movs	r3, #0
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005612:	e050      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005614:	2304      	movs	r3, #4
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800561a:	e04c      	b.n	80056b6 <UART_SetConfig+0x5a6>
 800561c:	2308      	movs	r3, #8
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005622:	e048      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005624:	2310      	movs	r3, #16
 8005626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800562a:	e044      	b.n	80056b6 <UART_SetConfig+0x5a6>
 800562c:	2320      	movs	r3, #32
 800562e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005632:	e040      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005634:	2340      	movs	r3, #64	; 0x40
 8005636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800563a:	e03c      	b.n	80056b6 <UART_SetConfig+0x5a6>
 800563c:	2380      	movs	r3, #128	; 0x80
 800563e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005642:	e038      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a5b      	ldr	r2, [pc, #364]	; (80057b8 <UART_SetConfig+0x6a8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d130      	bne.n	80056b0 <UART_SetConfig+0x5a0>
 800564e:	4b57      	ldr	r3, [pc, #348]	; (80057ac <UART_SetConfig+0x69c>)
 8005650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	2b05      	cmp	r3, #5
 8005658:	d826      	bhi.n	80056a8 <UART_SetConfig+0x598>
 800565a:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <UART_SetConfig+0x550>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	08005679 	.word	0x08005679
 8005664:	08005681 	.word	0x08005681
 8005668:	08005689 	.word	0x08005689
 800566c:	08005691 	.word	0x08005691
 8005670:	08005699 	.word	0x08005699
 8005674:	080056a1 	.word	0x080056a1
 8005678:	2302      	movs	r3, #2
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567e:	e01a      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005680:	2304      	movs	r3, #4
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005686:	e016      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005688:	2308      	movs	r3, #8
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568e:	e012      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005690:	2310      	movs	r3, #16
 8005692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005696:	e00e      	b.n	80056b6 <UART_SetConfig+0x5a6>
 8005698:	2320      	movs	r3, #32
 800569a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800569e:	e00a      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80056a0:	2340      	movs	r3, #64	; 0x40
 80056a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056a6:	e006      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ae:	e002      	b.n	80056b6 <UART_SetConfig+0x5a6>
 80056b0:	2380      	movs	r3, #128	; 0x80
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a3f      	ldr	r2, [pc, #252]	; (80057b8 <UART_SetConfig+0x6a8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	f040 80f8 	bne.w	80058b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	dc46      	bgt.n	8005758 <UART_SetConfig+0x648>
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	f2c0 8082 	blt.w	80057d4 <UART_SetConfig+0x6c4>
 80056d0:	3b02      	subs	r3, #2
 80056d2:	2b1e      	cmp	r3, #30
 80056d4:	d87e      	bhi.n	80057d4 <UART_SetConfig+0x6c4>
 80056d6:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <UART_SetConfig+0x5cc>)
 80056d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056dc:	0800575f 	.word	0x0800575f
 80056e0:	080057d5 	.word	0x080057d5
 80056e4:	08005767 	.word	0x08005767
 80056e8:	080057d5 	.word	0x080057d5
 80056ec:	080057d5 	.word	0x080057d5
 80056f0:	080057d5 	.word	0x080057d5
 80056f4:	08005777 	.word	0x08005777
 80056f8:	080057d5 	.word	0x080057d5
 80056fc:	080057d5 	.word	0x080057d5
 8005700:	080057d5 	.word	0x080057d5
 8005704:	080057d5 	.word	0x080057d5
 8005708:	080057d5 	.word	0x080057d5
 800570c:	080057d5 	.word	0x080057d5
 8005710:	080057d5 	.word	0x080057d5
 8005714:	08005787 	.word	0x08005787
 8005718:	080057d5 	.word	0x080057d5
 800571c:	080057d5 	.word	0x080057d5
 8005720:	080057d5 	.word	0x080057d5
 8005724:	080057d5 	.word	0x080057d5
 8005728:	080057d5 	.word	0x080057d5
 800572c:	080057d5 	.word	0x080057d5
 8005730:	080057d5 	.word	0x080057d5
 8005734:	080057d5 	.word	0x080057d5
 8005738:	080057d5 	.word	0x080057d5
 800573c:	080057d5 	.word	0x080057d5
 8005740:	080057d5 	.word	0x080057d5
 8005744:	080057d5 	.word	0x080057d5
 8005748:	080057d5 	.word	0x080057d5
 800574c:	080057d5 	.word	0x080057d5
 8005750:	080057d5 	.word	0x080057d5
 8005754:	080057c7 	.word	0x080057c7
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	d037      	beq.n	80057cc <UART_SetConfig+0x6bc>
 800575c:	e03a      	b.n	80057d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800575e:	f7fe f829 	bl	80037b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005762:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005764:	e03c      	b.n	80057e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800576a:	4618      	mov	r0, r3
 800576c:	f7fe f838 	bl	80037e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005774:	e034      	b.n	80057e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005776:	f107 0318 	add.w	r3, r7, #24
 800577a:	4618      	mov	r0, r3
 800577c:	f7fe f984 	bl	8003a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005784:	e02c      	b.n	80057e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005786:	4b09      	ldr	r3, [pc, #36]	; (80057ac <UART_SetConfig+0x69c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b00      	cmp	r3, #0
 8005790:	d016      	beq.n	80057c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005792:	4b06      	ldr	r3, [pc, #24]	; (80057ac <UART_SetConfig+0x69c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	08db      	lsrs	r3, r3, #3
 8005798:	f003 0303 	and.w	r3, r3, #3
 800579c:	4a07      	ldr	r2, [pc, #28]	; (80057bc <UART_SetConfig+0x6ac>)
 800579e:	fa22 f303 	lsr.w	r3, r2, r3
 80057a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057a4:	e01c      	b.n	80057e0 <UART_SetConfig+0x6d0>
 80057a6:	bf00      	nop
 80057a8:	40011400 	.word	0x40011400
 80057ac:	58024400 	.word	0x58024400
 80057b0:	40007800 	.word	0x40007800
 80057b4:	40007c00 	.word	0x40007c00
 80057b8:	58000c00 	.word	0x58000c00
 80057bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80057c0:	4b9d      	ldr	r3, [pc, #628]	; (8005a38 <UART_SetConfig+0x928>)
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057c4:	e00c      	b.n	80057e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057c6:	4b9d      	ldr	r3, [pc, #628]	; (8005a3c <UART_SetConfig+0x92c>)
 80057c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057ca:	e009      	b.n	80057e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057d2:	e005      	b.n	80057e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80057de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 81de 	beq.w	8005ba4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	4a94      	ldr	r2, [pc, #592]	; (8005a40 <UART_SetConfig+0x930>)
 80057ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057f2:	461a      	mov	r2, r3
 80057f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80057fa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	4613      	mov	r3, r2
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	4413      	add	r3, r2
 8005806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005808:	429a      	cmp	r2, r3
 800580a:	d305      	bcc.n	8005818 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005814:	429a      	cmp	r2, r3
 8005816:	d903      	bls.n	8005820 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800581e:	e1c1      	b.n	8005ba4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005822:	2200      	movs	r2, #0
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	60fa      	str	r2, [r7, #12]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	4a84      	ldr	r2, [pc, #528]	; (8005a40 <UART_SetConfig+0x930>)
 800582e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005832:	b29b      	uxth	r3, r3
 8005834:	2200      	movs	r2, #0
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	607a      	str	r2, [r7, #4]
 800583a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800583e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005842:	f7fa fda5 	bl	8000390 <__aeabi_uldivmod>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4610      	mov	r0, r2
 800584c:	4619      	mov	r1, r3
 800584e:	f04f 0200 	mov.w	r2, #0
 8005852:	f04f 0300 	mov.w	r3, #0
 8005856:	020b      	lsls	r3, r1, #8
 8005858:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800585c:	0202      	lsls	r2, r0, #8
 800585e:	6979      	ldr	r1, [r7, #20]
 8005860:	6849      	ldr	r1, [r1, #4]
 8005862:	0849      	lsrs	r1, r1, #1
 8005864:	2000      	movs	r0, #0
 8005866:	460c      	mov	r4, r1
 8005868:	4605      	mov	r5, r0
 800586a:	eb12 0804 	adds.w	r8, r2, r4
 800586e:	eb43 0905 	adc.w	r9, r3, r5
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	469a      	mov	sl, r3
 800587a:	4693      	mov	fp, r2
 800587c:	4652      	mov	r2, sl
 800587e:	465b      	mov	r3, fp
 8005880:	4640      	mov	r0, r8
 8005882:	4649      	mov	r1, r9
 8005884:	f7fa fd84 	bl	8000390 <__aeabi_uldivmod>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	4613      	mov	r3, r2
 800588e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005896:	d308      	bcc.n	80058aa <UART_SetConfig+0x79a>
 8005898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800589e:	d204      	bcs.n	80058aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058a6:	60da      	str	r2, [r3, #12]
 80058a8:	e17c      	b.n	8005ba4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80058b0:	e178      	b.n	8005ba4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ba:	f040 80c5 	bne.w	8005a48 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80058be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	dc48      	bgt.n	8005958 <UART_SetConfig+0x848>
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	db7b      	blt.n	80059c2 <UART_SetConfig+0x8b2>
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d879      	bhi.n	80059c2 <UART_SetConfig+0x8b2>
 80058ce:	a201      	add	r2, pc, #4	; (adr r2, 80058d4 <UART_SetConfig+0x7c4>)
 80058d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d4:	0800595f 	.word	0x0800595f
 80058d8:	08005967 	.word	0x08005967
 80058dc:	080059c3 	.word	0x080059c3
 80058e0:	080059c3 	.word	0x080059c3
 80058e4:	0800596f 	.word	0x0800596f
 80058e8:	080059c3 	.word	0x080059c3
 80058ec:	080059c3 	.word	0x080059c3
 80058f0:	080059c3 	.word	0x080059c3
 80058f4:	0800597f 	.word	0x0800597f
 80058f8:	080059c3 	.word	0x080059c3
 80058fc:	080059c3 	.word	0x080059c3
 8005900:	080059c3 	.word	0x080059c3
 8005904:	080059c3 	.word	0x080059c3
 8005908:	080059c3 	.word	0x080059c3
 800590c:	080059c3 	.word	0x080059c3
 8005910:	080059c3 	.word	0x080059c3
 8005914:	0800598f 	.word	0x0800598f
 8005918:	080059c3 	.word	0x080059c3
 800591c:	080059c3 	.word	0x080059c3
 8005920:	080059c3 	.word	0x080059c3
 8005924:	080059c3 	.word	0x080059c3
 8005928:	080059c3 	.word	0x080059c3
 800592c:	080059c3 	.word	0x080059c3
 8005930:	080059c3 	.word	0x080059c3
 8005934:	080059c3 	.word	0x080059c3
 8005938:	080059c3 	.word	0x080059c3
 800593c:	080059c3 	.word	0x080059c3
 8005940:	080059c3 	.word	0x080059c3
 8005944:	080059c3 	.word	0x080059c3
 8005948:	080059c3 	.word	0x080059c3
 800594c:	080059c3 	.word	0x080059c3
 8005950:	080059c3 	.word	0x080059c3
 8005954:	080059b5 	.word	0x080059b5
 8005958:	2b40      	cmp	r3, #64	; 0x40
 800595a:	d02e      	beq.n	80059ba <UART_SetConfig+0x8aa>
 800595c:	e031      	b.n	80059c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800595e:	f7fc ffb7 	bl	80028d0 <HAL_RCC_GetPCLK1Freq>
 8005962:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005964:	e033      	b.n	80059ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005966:	f7fc ffc9 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 800596a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800596c:	e02f      	b.n	80059ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800596e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005972:	4618      	mov	r0, r3
 8005974:	f7fd ff34 	bl	80037e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800597c:	e027      	b.n	80059ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800597e:	f107 0318 	add.w	r3, r7, #24
 8005982:	4618      	mov	r0, r3
 8005984:	f7fe f880 	bl	8003a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800598c:	e01f      	b.n	80059ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800598e:	4b2d      	ldr	r3, [pc, #180]	; (8005a44 <UART_SetConfig+0x934>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b00      	cmp	r3, #0
 8005998:	d009      	beq.n	80059ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800599a:	4b2a      	ldr	r3, [pc, #168]	; (8005a44 <UART_SetConfig+0x934>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	08db      	lsrs	r3, r3, #3
 80059a0:	f003 0303 	and.w	r3, r3, #3
 80059a4:	4a24      	ldr	r2, [pc, #144]	; (8005a38 <UART_SetConfig+0x928>)
 80059a6:	fa22 f303 	lsr.w	r3, r2, r3
 80059aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059ac:	e00f      	b.n	80059ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80059ae:	4b22      	ldr	r3, [pc, #136]	; (8005a38 <UART_SetConfig+0x928>)
 80059b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059b2:	e00c      	b.n	80059ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059b4:	4b21      	ldr	r3, [pc, #132]	; (8005a3c <UART_SetConfig+0x92c>)
 80059b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059b8:	e009      	b.n	80059ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059c0:	e005      	b.n	80059ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80059cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 80e7 	beq.w	8005ba4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	4a19      	ldr	r2, [pc, #100]	; (8005a40 <UART_SetConfig+0x930>)
 80059dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059e0:	461a      	mov	r2, r3
 80059e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80059e8:	005a      	lsls	r2, r3, #1
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	085b      	lsrs	r3, r3, #1
 80059f0:	441a      	add	r2, r3
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	2b0f      	cmp	r3, #15
 8005a00:	d916      	bls.n	8005a30 <UART_SetConfig+0x920>
 8005a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a08:	d212      	bcs.n	8005a30 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	f023 030f 	bic.w	r3, r3, #15
 8005a12:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a16:	085b      	lsrs	r3, r3, #1
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a22:	4313      	orrs	r3, r2
 8005a24:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005a2c:	60da      	str	r2, [r3, #12]
 8005a2e:	e0b9      	b.n	8005ba4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005a36:	e0b5      	b.n	8005ba4 <UART_SetConfig+0xa94>
 8005a38:	03d09000 	.word	0x03d09000
 8005a3c:	003d0900 	.word	0x003d0900
 8005a40:	08008a9c 	.word	0x08008a9c
 8005a44:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a4c:	2b20      	cmp	r3, #32
 8005a4e:	dc49      	bgt.n	8005ae4 <UART_SetConfig+0x9d4>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	db7c      	blt.n	8005b4e <UART_SetConfig+0xa3e>
 8005a54:	2b20      	cmp	r3, #32
 8005a56:	d87a      	bhi.n	8005b4e <UART_SetConfig+0xa3e>
 8005a58:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <UART_SetConfig+0x950>)
 8005a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5e:	bf00      	nop
 8005a60:	08005aeb 	.word	0x08005aeb
 8005a64:	08005af3 	.word	0x08005af3
 8005a68:	08005b4f 	.word	0x08005b4f
 8005a6c:	08005b4f 	.word	0x08005b4f
 8005a70:	08005afb 	.word	0x08005afb
 8005a74:	08005b4f 	.word	0x08005b4f
 8005a78:	08005b4f 	.word	0x08005b4f
 8005a7c:	08005b4f 	.word	0x08005b4f
 8005a80:	08005b0b 	.word	0x08005b0b
 8005a84:	08005b4f 	.word	0x08005b4f
 8005a88:	08005b4f 	.word	0x08005b4f
 8005a8c:	08005b4f 	.word	0x08005b4f
 8005a90:	08005b4f 	.word	0x08005b4f
 8005a94:	08005b4f 	.word	0x08005b4f
 8005a98:	08005b4f 	.word	0x08005b4f
 8005a9c:	08005b4f 	.word	0x08005b4f
 8005aa0:	08005b1b 	.word	0x08005b1b
 8005aa4:	08005b4f 	.word	0x08005b4f
 8005aa8:	08005b4f 	.word	0x08005b4f
 8005aac:	08005b4f 	.word	0x08005b4f
 8005ab0:	08005b4f 	.word	0x08005b4f
 8005ab4:	08005b4f 	.word	0x08005b4f
 8005ab8:	08005b4f 	.word	0x08005b4f
 8005abc:	08005b4f 	.word	0x08005b4f
 8005ac0:	08005b4f 	.word	0x08005b4f
 8005ac4:	08005b4f 	.word	0x08005b4f
 8005ac8:	08005b4f 	.word	0x08005b4f
 8005acc:	08005b4f 	.word	0x08005b4f
 8005ad0:	08005b4f 	.word	0x08005b4f
 8005ad4:	08005b4f 	.word	0x08005b4f
 8005ad8:	08005b4f 	.word	0x08005b4f
 8005adc:	08005b4f 	.word	0x08005b4f
 8005ae0:	08005b41 	.word	0x08005b41
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	d02e      	beq.n	8005b46 <UART_SetConfig+0xa36>
 8005ae8:	e031      	b.n	8005b4e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aea:	f7fc fef1 	bl	80028d0 <HAL_RCC_GetPCLK1Freq>
 8005aee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005af0:	e033      	b.n	8005b5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af2:	f7fc ff03 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 8005af6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005af8:	e02f      	b.n	8005b5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fd fe6e 	bl	80037e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b08:	e027      	b.n	8005b5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b0a:	f107 0318 	add.w	r3, r7, #24
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fd ffba 	bl	8003a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b18:	e01f      	b.n	8005b5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b1a:	4b2d      	ldr	r3, [pc, #180]	; (8005bd0 <UART_SetConfig+0xac0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b26:	4b2a      	ldr	r3, [pc, #168]	; (8005bd0 <UART_SetConfig+0xac0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	08db      	lsrs	r3, r3, #3
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	4a28      	ldr	r2, [pc, #160]	; (8005bd4 <UART_SetConfig+0xac4>)
 8005b32:	fa22 f303 	lsr.w	r3, r2, r3
 8005b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b38:	e00f      	b.n	8005b5a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005b3a:	4b26      	ldr	r3, [pc, #152]	; (8005bd4 <UART_SetConfig+0xac4>)
 8005b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b3e:	e00c      	b.n	8005b5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b40:	4b25      	ldr	r3, [pc, #148]	; (8005bd8 <UART_SetConfig+0xac8>)
 8005b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b44:	e009      	b.n	8005b5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b4c:	e005      	b.n	8005b5a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005b58:	bf00      	nop
    }

    if (pclk != 0U)
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d021      	beq.n	8005ba4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	4a1d      	ldr	r2, [pc, #116]	; (8005bdc <UART_SetConfig+0xacc>)
 8005b66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	085b      	lsrs	r3, r3, #1
 8005b78:	441a      	add	r2, r3
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b82:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	2b0f      	cmp	r3, #15
 8005b88:	d909      	bls.n	8005b9e <UART_SetConfig+0xa8e>
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b90:	d205      	bcs.n	8005b9e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60da      	str	r2, [r3, #12]
 8005b9c:	e002      	b.n	8005ba4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005bc0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3748      	adds	r7, #72	; 0x48
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bce:	bf00      	nop
 8005bd0:	58024400 	.word	0x58024400
 8005bd4:	03d09000 	.word	0x03d09000
 8005bd8:	003d0900 	.word	0x003d0900
 8005bdc:	08008a9c 	.word	0x08008a9c

08005be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01a      	beq.n	8005cf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cde:	d10a      	bne.n	8005cf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	605a      	str	r2, [r3, #4]
  }
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d34:	f7fb facc 	bl	80012d0 <HAL_GetTick>
 8005d38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d10e      	bne.n	8005d66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f82f 	bl	8005dba <UART_WaitOnFlagUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e025      	b.n	8005db2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d10e      	bne.n	8005d92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f819 	bl	8005dba <UART_WaitOnFlagUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e00f      	b.n	8005db2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b09c      	sub	sp, #112	; 0x70
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	603b      	str	r3, [r7, #0]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dca:	e0a9      	b.n	8005f20 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd2:	f000 80a5 	beq.w	8005f20 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd6:	f7fb fa7b 	bl	80012d0 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d302      	bcc.n	8005dec <UART_WaitOnFlagUntilTimeout+0x32>
 8005de6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d140      	bne.n	8005e6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e00:	667b      	str	r3, [r7, #100]	; 0x64
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e0c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e6      	bne.n	8005dec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3308      	adds	r3, #8
 8005e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e30:	f023 0301 	bic.w	r3, r3, #1
 8005e34:	663b      	str	r3, [r7, #96]	; 0x60
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e5      	bne.n	8005e1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e069      	b.n	8005f42 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d051      	beq.n	8005f20 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e8a:	d149      	bne.n	8005f20 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e6      	bne.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3308      	adds	r3, #8
 8005ece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	e853 3f00 	ldrex	r3, [r3]
 8005ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f023 0301 	bic.w	r3, r3, #1
 8005ede:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ee8:	623a      	str	r2, [r7, #32]
 8005eea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	69f9      	ldr	r1, [r7, #28]
 8005eee:	6a3a      	ldr	r2, [r7, #32]
 8005ef0:	e841 2300 	strex	r3, r2, [r1]
 8005ef4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e5      	bne.n	8005ec8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e010      	b.n	8005f42 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69da      	ldr	r2, [r3, #28]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	bf0c      	ite	eq
 8005f30:	2301      	moveq	r3, #1
 8005f32:	2300      	movne	r3, #0
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	461a      	mov	r2, r3
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	f43f af46 	beq.w	8005dcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3770      	adds	r7, #112	; 0x70
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_UARTEx_DisableFifoMode+0x16>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e027      	b.n	8005fb0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2224      	movs	r2, #36	; 0x24
 8005f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0201 	bic.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e02d      	b.n	8006030 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2224      	movs	r2, #36	; 0x24
 8005fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0201 	bic.w	r2, r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f84f 	bl	80060b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2220      	movs	r2, #32
 8006022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800604c:	2302      	movs	r3, #2
 800604e:	e02d      	b.n	80060ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2224      	movs	r2, #36	; 0x24
 800605c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0201 	bic.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f811 	bl	80060b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2220      	movs	r2, #32
 800609e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d108      	bne.n	80060d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80060d4:	e031      	b.n	800613a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80060d6:	2310      	movs	r3, #16
 80060d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80060da:	2310      	movs	r3, #16
 80060dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	0e5b      	lsrs	r3, r3, #25
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	0f5b      	lsrs	r3, r3, #29
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060fe:	7bbb      	ldrb	r3, [r7, #14]
 8006100:	7b3a      	ldrb	r2, [r7, #12]
 8006102:	4911      	ldr	r1, [pc, #68]	; (8006148 <UARTEx_SetNbDataToProcess+0x94>)
 8006104:	5c8a      	ldrb	r2, [r1, r2]
 8006106:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800610a:	7b3a      	ldrb	r2, [r7, #12]
 800610c:	490f      	ldr	r1, [pc, #60]	; (800614c <UARTEx_SetNbDataToProcess+0x98>)
 800610e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006110:	fb93 f3f2 	sdiv	r3, r3, r2
 8006114:	b29a      	uxth	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	7b7a      	ldrb	r2, [r7, #13]
 8006120:	4909      	ldr	r1, [pc, #36]	; (8006148 <UARTEx_SetNbDataToProcess+0x94>)
 8006122:	5c8a      	ldrb	r2, [r1, r2]
 8006124:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006128:	7b7a      	ldrb	r2, [r7, #13]
 800612a:	4908      	ldr	r1, [pc, #32]	; (800614c <UARTEx_SetNbDataToProcess+0x98>)
 800612c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800612e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006132:	b29a      	uxth	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800613a:	bf00      	nop
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	08008ab4 	.word	0x08008ab4
 800614c:	08008abc 	.word	0x08008abc

08006150 <__cvt>:
 8006150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006152:	ed2d 8b02 	vpush	{d8}
 8006156:	eeb0 8b40 	vmov.f64	d8, d0
 800615a:	b085      	sub	sp, #20
 800615c:	4617      	mov	r7, r2
 800615e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006160:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006162:	ee18 2a90 	vmov	r2, s17
 8006166:	f025 0520 	bic.w	r5, r5, #32
 800616a:	2a00      	cmp	r2, #0
 800616c:	bfb6      	itet	lt
 800616e:	222d      	movlt	r2, #45	; 0x2d
 8006170:	2200      	movge	r2, #0
 8006172:	eeb1 8b40 	vneglt.f64	d8, d0
 8006176:	2d46      	cmp	r5, #70	; 0x46
 8006178:	460c      	mov	r4, r1
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	d004      	beq.n	8006188 <__cvt+0x38>
 800617e:	2d45      	cmp	r5, #69	; 0x45
 8006180:	d100      	bne.n	8006184 <__cvt+0x34>
 8006182:	3401      	adds	r4, #1
 8006184:	2102      	movs	r1, #2
 8006186:	e000      	b.n	800618a <__cvt+0x3a>
 8006188:	2103      	movs	r1, #3
 800618a:	ab03      	add	r3, sp, #12
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	ab02      	add	r3, sp, #8
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	4622      	mov	r2, r4
 8006194:	4633      	mov	r3, r6
 8006196:	eeb0 0b48 	vmov.f64	d0, d8
 800619a:	f000 ff25 	bl	8006fe8 <_dtoa_r>
 800619e:	2d47      	cmp	r5, #71	; 0x47
 80061a0:	d101      	bne.n	80061a6 <__cvt+0x56>
 80061a2:	07fb      	lsls	r3, r7, #31
 80061a4:	d51a      	bpl.n	80061dc <__cvt+0x8c>
 80061a6:	2d46      	cmp	r5, #70	; 0x46
 80061a8:	eb00 0204 	add.w	r2, r0, r4
 80061ac:	d10c      	bne.n	80061c8 <__cvt+0x78>
 80061ae:	7803      	ldrb	r3, [r0, #0]
 80061b0:	2b30      	cmp	r3, #48	; 0x30
 80061b2:	d107      	bne.n	80061c4 <__cvt+0x74>
 80061b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80061b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061bc:	bf1c      	itt	ne
 80061be:	f1c4 0401 	rsbne	r4, r4, #1
 80061c2:	6034      	strne	r4, [r6, #0]
 80061c4:	6833      	ldr	r3, [r6, #0]
 80061c6:	441a      	add	r2, r3
 80061c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80061cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d0:	bf08      	it	eq
 80061d2:	9203      	streq	r2, [sp, #12]
 80061d4:	2130      	movs	r1, #48	; 0x30
 80061d6:	9b03      	ldr	r3, [sp, #12]
 80061d8:	4293      	cmp	r3, r2
 80061da:	d307      	bcc.n	80061ec <__cvt+0x9c>
 80061dc:	9b03      	ldr	r3, [sp, #12]
 80061de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061e0:	1a1b      	subs	r3, r3, r0
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	b005      	add	sp, #20
 80061e6:	ecbd 8b02 	vpop	{d8}
 80061ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ec:	1c5c      	adds	r4, r3, #1
 80061ee:	9403      	str	r4, [sp, #12]
 80061f0:	7019      	strb	r1, [r3, #0]
 80061f2:	e7f0      	b.n	80061d6 <__cvt+0x86>

080061f4 <__exponent>:
 80061f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061f6:	4603      	mov	r3, r0
 80061f8:	2900      	cmp	r1, #0
 80061fa:	bfb8      	it	lt
 80061fc:	4249      	neglt	r1, r1
 80061fe:	f803 2b02 	strb.w	r2, [r3], #2
 8006202:	bfb4      	ite	lt
 8006204:	222d      	movlt	r2, #45	; 0x2d
 8006206:	222b      	movge	r2, #43	; 0x2b
 8006208:	2909      	cmp	r1, #9
 800620a:	7042      	strb	r2, [r0, #1]
 800620c:	dd2a      	ble.n	8006264 <__exponent+0x70>
 800620e:	f10d 0207 	add.w	r2, sp, #7
 8006212:	4617      	mov	r7, r2
 8006214:	260a      	movs	r6, #10
 8006216:	4694      	mov	ip, r2
 8006218:	fb91 f5f6 	sdiv	r5, r1, r6
 800621c:	fb06 1415 	mls	r4, r6, r5, r1
 8006220:	3430      	adds	r4, #48	; 0x30
 8006222:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006226:	460c      	mov	r4, r1
 8006228:	2c63      	cmp	r4, #99	; 0x63
 800622a:	f102 32ff 	add.w	r2, r2, #4294967295
 800622e:	4629      	mov	r1, r5
 8006230:	dcf1      	bgt.n	8006216 <__exponent+0x22>
 8006232:	3130      	adds	r1, #48	; 0x30
 8006234:	f1ac 0402 	sub.w	r4, ip, #2
 8006238:	f802 1c01 	strb.w	r1, [r2, #-1]
 800623c:	1c41      	adds	r1, r0, #1
 800623e:	4622      	mov	r2, r4
 8006240:	42ba      	cmp	r2, r7
 8006242:	d30a      	bcc.n	800625a <__exponent+0x66>
 8006244:	f10d 0209 	add.w	r2, sp, #9
 8006248:	eba2 020c 	sub.w	r2, r2, ip
 800624c:	42bc      	cmp	r4, r7
 800624e:	bf88      	it	hi
 8006250:	2200      	movhi	r2, #0
 8006252:	4413      	add	r3, r2
 8006254:	1a18      	subs	r0, r3, r0
 8006256:	b003      	add	sp, #12
 8006258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800625a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800625e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006262:	e7ed      	b.n	8006240 <__exponent+0x4c>
 8006264:	2330      	movs	r3, #48	; 0x30
 8006266:	3130      	adds	r1, #48	; 0x30
 8006268:	7083      	strb	r3, [r0, #2]
 800626a:	70c1      	strb	r1, [r0, #3]
 800626c:	1d03      	adds	r3, r0, #4
 800626e:	e7f1      	b.n	8006254 <__exponent+0x60>

08006270 <_printf_float>:
 8006270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006274:	b08b      	sub	sp, #44	; 0x2c
 8006276:	460c      	mov	r4, r1
 8006278:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800627c:	4616      	mov	r6, r2
 800627e:	461f      	mov	r7, r3
 8006280:	4605      	mov	r5, r0
 8006282:	f000 fdaf 	bl	8006de4 <_localeconv_r>
 8006286:	f8d0 b000 	ldr.w	fp, [r0]
 800628a:	4658      	mov	r0, fp
 800628c:	f7fa f878 	bl	8000380 <strlen>
 8006290:	2300      	movs	r3, #0
 8006292:	9308      	str	r3, [sp, #32]
 8006294:	f8d8 3000 	ldr.w	r3, [r8]
 8006298:	f894 9018 	ldrb.w	r9, [r4, #24]
 800629c:	6822      	ldr	r2, [r4, #0]
 800629e:	3307      	adds	r3, #7
 80062a0:	f023 0307 	bic.w	r3, r3, #7
 80062a4:	f103 0108 	add.w	r1, r3, #8
 80062a8:	f8c8 1000 	str.w	r1, [r8]
 80062ac:	ed93 0b00 	vldr	d0, [r3]
 80062b0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8006510 <_printf_float+0x2a0>
 80062b4:	eeb0 7bc0 	vabs.f64	d7, d0
 80062b8:	eeb4 7b46 	vcmp.f64	d7, d6
 80062bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80062c4:	4682      	mov	sl, r0
 80062c6:	dd24      	ble.n	8006312 <_printf_float+0xa2>
 80062c8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80062cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d0:	d502      	bpl.n	80062d8 <_printf_float+0x68>
 80062d2:	232d      	movs	r3, #45	; 0x2d
 80062d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d8:	498f      	ldr	r1, [pc, #572]	; (8006518 <_printf_float+0x2a8>)
 80062da:	4b90      	ldr	r3, [pc, #576]	; (800651c <_printf_float+0x2ac>)
 80062dc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80062e0:	bf94      	ite	ls
 80062e2:	4688      	movls	r8, r1
 80062e4:	4698      	movhi	r8, r3
 80062e6:	2303      	movs	r3, #3
 80062e8:	6123      	str	r3, [r4, #16]
 80062ea:	f022 0204 	bic.w	r2, r2, #4
 80062ee:	2300      	movs	r3, #0
 80062f0:	6022      	str	r2, [r4, #0]
 80062f2:	9304      	str	r3, [sp, #16]
 80062f4:	9700      	str	r7, [sp, #0]
 80062f6:	4633      	mov	r3, r6
 80062f8:	aa09      	add	r2, sp, #36	; 0x24
 80062fa:	4621      	mov	r1, r4
 80062fc:	4628      	mov	r0, r5
 80062fe:	f000 f9d1 	bl	80066a4 <_printf_common>
 8006302:	3001      	adds	r0, #1
 8006304:	f040 808a 	bne.w	800641c <_printf_float+0x1ac>
 8006308:	f04f 30ff 	mov.w	r0, #4294967295
 800630c:	b00b      	add	sp, #44	; 0x2c
 800630e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006312:	eeb4 0b40 	vcmp.f64	d0, d0
 8006316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800631a:	d709      	bvc.n	8006330 <_printf_float+0xc0>
 800631c:	ee10 3a90 	vmov	r3, s1
 8006320:	2b00      	cmp	r3, #0
 8006322:	bfbc      	itt	lt
 8006324:	232d      	movlt	r3, #45	; 0x2d
 8006326:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800632a:	497d      	ldr	r1, [pc, #500]	; (8006520 <_printf_float+0x2b0>)
 800632c:	4b7d      	ldr	r3, [pc, #500]	; (8006524 <_printf_float+0x2b4>)
 800632e:	e7d5      	b.n	80062dc <_printf_float+0x6c>
 8006330:	6863      	ldr	r3, [r4, #4]
 8006332:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006336:	9104      	str	r1, [sp, #16]
 8006338:	1c59      	adds	r1, r3, #1
 800633a:	d13c      	bne.n	80063b6 <_printf_float+0x146>
 800633c:	2306      	movs	r3, #6
 800633e:	6063      	str	r3, [r4, #4]
 8006340:	2300      	movs	r3, #0
 8006342:	9303      	str	r3, [sp, #12]
 8006344:	ab08      	add	r3, sp, #32
 8006346:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800634a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800634e:	ab07      	add	r3, sp, #28
 8006350:	6861      	ldr	r1, [r4, #4]
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	6022      	str	r2, [r4, #0]
 8006356:	f10d 031b 	add.w	r3, sp, #27
 800635a:	4628      	mov	r0, r5
 800635c:	f7ff fef8 	bl	8006150 <__cvt>
 8006360:	9b04      	ldr	r3, [sp, #16]
 8006362:	9907      	ldr	r1, [sp, #28]
 8006364:	2b47      	cmp	r3, #71	; 0x47
 8006366:	4680      	mov	r8, r0
 8006368:	d108      	bne.n	800637c <_printf_float+0x10c>
 800636a:	1cc8      	adds	r0, r1, #3
 800636c:	db02      	blt.n	8006374 <_printf_float+0x104>
 800636e:	6863      	ldr	r3, [r4, #4]
 8006370:	4299      	cmp	r1, r3
 8006372:	dd41      	ble.n	80063f8 <_printf_float+0x188>
 8006374:	f1a9 0902 	sub.w	r9, r9, #2
 8006378:	fa5f f989 	uxtb.w	r9, r9
 800637c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006380:	d820      	bhi.n	80063c4 <_printf_float+0x154>
 8006382:	3901      	subs	r1, #1
 8006384:	464a      	mov	r2, r9
 8006386:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800638a:	9107      	str	r1, [sp, #28]
 800638c:	f7ff ff32 	bl	80061f4 <__exponent>
 8006390:	9a08      	ldr	r2, [sp, #32]
 8006392:	9004      	str	r0, [sp, #16]
 8006394:	1813      	adds	r3, r2, r0
 8006396:	2a01      	cmp	r2, #1
 8006398:	6123      	str	r3, [r4, #16]
 800639a:	dc02      	bgt.n	80063a2 <_printf_float+0x132>
 800639c:	6822      	ldr	r2, [r4, #0]
 800639e:	07d2      	lsls	r2, r2, #31
 80063a0:	d501      	bpl.n	80063a6 <_printf_float+0x136>
 80063a2:	3301      	adds	r3, #1
 80063a4:	6123      	str	r3, [r4, #16]
 80063a6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0a2      	beq.n	80062f4 <_printf_float+0x84>
 80063ae:	232d      	movs	r3, #45	; 0x2d
 80063b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063b4:	e79e      	b.n	80062f4 <_printf_float+0x84>
 80063b6:	9904      	ldr	r1, [sp, #16]
 80063b8:	2947      	cmp	r1, #71	; 0x47
 80063ba:	d1c1      	bne.n	8006340 <_printf_float+0xd0>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1bf      	bne.n	8006340 <_printf_float+0xd0>
 80063c0:	2301      	movs	r3, #1
 80063c2:	e7bc      	b.n	800633e <_printf_float+0xce>
 80063c4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80063c8:	d118      	bne.n	80063fc <_printf_float+0x18c>
 80063ca:	2900      	cmp	r1, #0
 80063cc:	6863      	ldr	r3, [r4, #4]
 80063ce:	dd0b      	ble.n	80063e8 <_printf_float+0x178>
 80063d0:	6121      	str	r1, [r4, #16]
 80063d2:	b913      	cbnz	r3, 80063da <_printf_float+0x16a>
 80063d4:	6822      	ldr	r2, [r4, #0]
 80063d6:	07d0      	lsls	r0, r2, #31
 80063d8:	d502      	bpl.n	80063e0 <_printf_float+0x170>
 80063da:	3301      	adds	r3, #1
 80063dc:	440b      	add	r3, r1
 80063de:	6123      	str	r3, [r4, #16]
 80063e0:	2300      	movs	r3, #0
 80063e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80063e4:	9304      	str	r3, [sp, #16]
 80063e6:	e7de      	b.n	80063a6 <_printf_float+0x136>
 80063e8:	b913      	cbnz	r3, 80063f0 <_printf_float+0x180>
 80063ea:	6822      	ldr	r2, [r4, #0]
 80063ec:	07d2      	lsls	r2, r2, #31
 80063ee:	d501      	bpl.n	80063f4 <_printf_float+0x184>
 80063f0:	3302      	adds	r3, #2
 80063f2:	e7f4      	b.n	80063de <_printf_float+0x16e>
 80063f4:	2301      	movs	r3, #1
 80063f6:	e7f2      	b.n	80063de <_printf_float+0x16e>
 80063f8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80063fc:	9b08      	ldr	r3, [sp, #32]
 80063fe:	4299      	cmp	r1, r3
 8006400:	db05      	blt.n	800640e <_printf_float+0x19e>
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	6121      	str	r1, [r4, #16]
 8006406:	07d8      	lsls	r0, r3, #31
 8006408:	d5ea      	bpl.n	80063e0 <_printf_float+0x170>
 800640a:	1c4b      	adds	r3, r1, #1
 800640c:	e7e7      	b.n	80063de <_printf_float+0x16e>
 800640e:	2900      	cmp	r1, #0
 8006410:	bfd4      	ite	le
 8006412:	f1c1 0202 	rsble	r2, r1, #2
 8006416:	2201      	movgt	r2, #1
 8006418:	4413      	add	r3, r2
 800641a:	e7e0      	b.n	80063de <_printf_float+0x16e>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	055a      	lsls	r2, r3, #21
 8006420:	d407      	bmi.n	8006432 <_printf_float+0x1c2>
 8006422:	6923      	ldr	r3, [r4, #16]
 8006424:	4642      	mov	r2, r8
 8006426:	4631      	mov	r1, r6
 8006428:	4628      	mov	r0, r5
 800642a:	47b8      	blx	r7
 800642c:	3001      	adds	r0, #1
 800642e:	d12a      	bne.n	8006486 <_printf_float+0x216>
 8006430:	e76a      	b.n	8006308 <_printf_float+0x98>
 8006432:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006436:	f240 80e0 	bls.w	80065fa <_printf_float+0x38a>
 800643a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800643e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006446:	d133      	bne.n	80064b0 <_printf_float+0x240>
 8006448:	4a37      	ldr	r2, [pc, #220]	; (8006528 <_printf_float+0x2b8>)
 800644a:	2301      	movs	r3, #1
 800644c:	4631      	mov	r1, r6
 800644e:	4628      	mov	r0, r5
 8006450:	47b8      	blx	r7
 8006452:	3001      	adds	r0, #1
 8006454:	f43f af58 	beq.w	8006308 <_printf_float+0x98>
 8006458:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800645c:	429a      	cmp	r2, r3
 800645e:	db02      	blt.n	8006466 <_printf_float+0x1f6>
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	07d8      	lsls	r0, r3, #31
 8006464:	d50f      	bpl.n	8006486 <_printf_float+0x216>
 8006466:	4653      	mov	r3, sl
 8006468:	465a      	mov	r2, fp
 800646a:	4631      	mov	r1, r6
 800646c:	4628      	mov	r0, r5
 800646e:	47b8      	blx	r7
 8006470:	3001      	adds	r0, #1
 8006472:	f43f af49 	beq.w	8006308 <_printf_float+0x98>
 8006476:	f04f 0800 	mov.w	r8, #0
 800647a:	f104 091a 	add.w	r9, r4, #26
 800647e:	9b08      	ldr	r3, [sp, #32]
 8006480:	3b01      	subs	r3, #1
 8006482:	4543      	cmp	r3, r8
 8006484:	dc09      	bgt.n	800649a <_printf_float+0x22a>
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	079b      	lsls	r3, r3, #30
 800648a:	f100 8106 	bmi.w	800669a <_printf_float+0x42a>
 800648e:	68e0      	ldr	r0, [r4, #12]
 8006490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006492:	4298      	cmp	r0, r3
 8006494:	bfb8      	it	lt
 8006496:	4618      	movlt	r0, r3
 8006498:	e738      	b.n	800630c <_printf_float+0x9c>
 800649a:	2301      	movs	r3, #1
 800649c:	464a      	mov	r2, r9
 800649e:	4631      	mov	r1, r6
 80064a0:	4628      	mov	r0, r5
 80064a2:	47b8      	blx	r7
 80064a4:	3001      	adds	r0, #1
 80064a6:	f43f af2f 	beq.w	8006308 <_printf_float+0x98>
 80064aa:	f108 0801 	add.w	r8, r8, #1
 80064ae:	e7e6      	b.n	800647e <_printf_float+0x20e>
 80064b0:	9b07      	ldr	r3, [sp, #28]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	dc3a      	bgt.n	800652c <_printf_float+0x2bc>
 80064b6:	4a1c      	ldr	r2, [pc, #112]	; (8006528 <_printf_float+0x2b8>)
 80064b8:	2301      	movs	r3, #1
 80064ba:	4631      	mov	r1, r6
 80064bc:	4628      	mov	r0, r5
 80064be:	47b8      	blx	r7
 80064c0:	3001      	adds	r0, #1
 80064c2:	f43f af21 	beq.w	8006308 <_printf_float+0x98>
 80064c6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	d102      	bne.n	80064d4 <_printf_float+0x264>
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	07d9      	lsls	r1, r3, #31
 80064d2:	d5d8      	bpl.n	8006486 <_printf_float+0x216>
 80064d4:	4653      	mov	r3, sl
 80064d6:	465a      	mov	r2, fp
 80064d8:	4631      	mov	r1, r6
 80064da:	4628      	mov	r0, r5
 80064dc:	47b8      	blx	r7
 80064de:	3001      	adds	r0, #1
 80064e0:	f43f af12 	beq.w	8006308 <_printf_float+0x98>
 80064e4:	f04f 0900 	mov.w	r9, #0
 80064e8:	f104 0a1a 	add.w	sl, r4, #26
 80064ec:	9b07      	ldr	r3, [sp, #28]
 80064ee:	425b      	negs	r3, r3
 80064f0:	454b      	cmp	r3, r9
 80064f2:	dc01      	bgt.n	80064f8 <_printf_float+0x288>
 80064f4:	9b08      	ldr	r3, [sp, #32]
 80064f6:	e795      	b.n	8006424 <_printf_float+0x1b4>
 80064f8:	2301      	movs	r3, #1
 80064fa:	4652      	mov	r2, sl
 80064fc:	4631      	mov	r1, r6
 80064fe:	4628      	mov	r0, r5
 8006500:	47b8      	blx	r7
 8006502:	3001      	adds	r0, #1
 8006504:	f43f af00 	beq.w	8006308 <_printf_float+0x98>
 8006508:	f109 0901 	add.w	r9, r9, #1
 800650c:	e7ee      	b.n	80064ec <_printf_float+0x27c>
 800650e:	bf00      	nop
 8006510:	ffffffff 	.word	0xffffffff
 8006514:	7fefffff 	.word	0x7fefffff
 8006518:	08008ac4 	.word	0x08008ac4
 800651c:	08008ac8 	.word	0x08008ac8
 8006520:	08008acc 	.word	0x08008acc
 8006524:	08008ad0 	.word	0x08008ad0
 8006528:	08008ad4 	.word	0x08008ad4
 800652c:	9a08      	ldr	r2, [sp, #32]
 800652e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006530:	429a      	cmp	r2, r3
 8006532:	bfa8      	it	ge
 8006534:	461a      	movge	r2, r3
 8006536:	2a00      	cmp	r2, #0
 8006538:	4691      	mov	r9, r2
 800653a:	dc38      	bgt.n	80065ae <_printf_float+0x33e>
 800653c:	2300      	movs	r3, #0
 800653e:	9305      	str	r3, [sp, #20]
 8006540:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006544:	f104 021a 	add.w	r2, r4, #26
 8006548:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800654a:	9905      	ldr	r1, [sp, #20]
 800654c:	9304      	str	r3, [sp, #16]
 800654e:	eba3 0309 	sub.w	r3, r3, r9
 8006552:	428b      	cmp	r3, r1
 8006554:	dc33      	bgt.n	80065be <_printf_float+0x34e>
 8006556:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800655a:	429a      	cmp	r2, r3
 800655c:	db3c      	blt.n	80065d8 <_printf_float+0x368>
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	07da      	lsls	r2, r3, #31
 8006562:	d439      	bmi.n	80065d8 <_printf_float+0x368>
 8006564:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006568:	eba2 0903 	sub.w	r9, r2, r3
 800656c:	9b04      	ldr	r3, [sp, #16]
 800656e:	1ad2      	subs	r2, r2, r3
 8006570:	4591      	cmp	r9, r2
 8006572:	bfa8      	it	ge
 8006574:	4691      	movge	r9, r2
 8006576:	f1b9 0f00 	cmp.w	r9, #0
 800657a:	dc35      	bgt.n	80065e8 <_printf_float+0x378>
 800657c:	f04f 0800 	mov.w	r8, #0
 8006580:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006584:	f104 0a1a 	add.w	sl, r4, #26
 8006588:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800658c:	1a9b      	subs	r3, r3, r2
 800658e:	eba3 0309 	sub.w	r3, r3, r9
 8006592:	4543      	cmp	r3, r8
 8006594:	f77f af77 	ble.w	8006486 <_printf_float+0x216>
 8006598:	2301      	movs	r3, #1
 800659a:	4652      	mov	r2, sl
 800659c:	4631      	mov	r1, r6
 800659e:	4628      	mov	r0, r5
 80065a0:	47b8      	blx	r7
 80065a2:	3001      	adds	r0, #1
 80065a4:	f43f aeb0 	beq.w	8006308 <_printf_float+0x98>
 80065a8:	f108 0801 	add.w	r8, r8, #1
 80065ac:	e7ec      	b.n	8006588 <_printf_float+0x318>
 80065ae:	4613      	mov	r3, r2
 80065b0:	4631      	mov	r1, r6
 80065b2:	4642      	mov	r2, r8
 80065b4:	4628      	mov	r0, r5
 80065b6:	47b8      	blx	r7
 80065b8:	3001      	adds	r0, #1
 80065ba:	d1bf      	bne.n	800653c <_printf_float+0x2cc>
 80065bc:	e6a4      	b.n	8006308 <_printf_float+0x98>
 80065be:	2301      	movs	r3, #1
 80065c0:	4631      	mov	r1, r6
 80065c2:	4628      	mov	r0, r5
 80065c4:	9204      	str	r2, [sp, #16]
 80065c6:	47b8      	blx	r7
 80065c8:	3001      	adds	r0, #1
 80065ca:	f43f ae9d 	beq.w	8006308 <_printf_float+0x98>
 80065ce:	9b05      	ldr	r3, [sp, #20]
 80065d0:	9a04      	ldr	r2, [sp, #16]
 80065d2:	3301      	adds	r3, #1
 80065d4:	9305      	str	r3, [sp, #20]
 80065d6:	e7b7      	b.n	8006548 <_printf_float+0x2d8>
 80065d8:	4653      	mov	r3, sl
 80065da:	465a      	mov	r2, fp
 80065dc:	4631      	mov	r1, r6
 80065de:	4628      	mov	r0, r5
 80065e0:	47b8      	blx	r7
 80065e2:	3001      	adds	r0, #1
 80065e4:	d1be      	bne.n	8006564 <_printf_float+0x2f4>
 80065e6:	e68f      	b.n	8006308 <_printf_float+0x98>
 80065e8:	9a04      	ldr	r2, [sp, #16]
 80065ea:	464b      	mov	r3, r9
 80065ec:	4442      	add	r2, r8
 80065ee:	4631      	mov	r1, r6
 80065f0:	4628      	mov	r0, r5
 80065f2:	47b8      	blx	r7
 80065f4:	3001      	adds	r0, #1
 80065f6:	d1c1      	bne.n	800657c <_printf_float+0x30c>
 80065f8:	e686      	b.n	8006308 <_printf_float+0x98>
 80065fa:	9a08      	ldr	r2, [sp, #32]
 80065fc:	2a01      	cmp	r2, #1
 80065fe:	dc01      	bgt.n	8006604 <_printf_float+0x394>
 8006600:	07db      	lsls	r3, r3, #31
 8006602:	d537      	bpl.n	8006674 <_printf_float+0x404>
 8006604:	2301      	movs	r3, #1
 8006606:	4642      	mov	r2, r8
 8006608:	4631      	mov	r1, r6
 800660a:	4628      	mov	r0, r5
 800660c:	47b8      	blx	r7
 800660e:	3001      	adds	r0, #1
 8006610:	f43f ae7a 	beq.w	8006308 <_printf_float+0x98>
 8006614:	4653      	mov	r3, sl
 8006616:	465a      	mov	r2, fp
 8006618:	4631      	mov	r1, r6
 800661a:	4628      	mov	r0, r5
 800661c:	47b8      	blx	r7
 800661e:	3001      	adds	r0, #1
 8006620:	f43f ae72 	beq.w	8006308 <_printf_float+0x98>
 8006624:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006628:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800662c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006630:	9b08      	ldr	r3, [sp, #32]
 8006632:	d01a      	beq.n	800666a <_printf_float+0x3fa>
 8006634:	3b01      	subs	r3, #1
 8006636:	f108 0201 	add.w	r2, r8, #1
 800663a:	4631      	mov	r1, r6
 800663c:	4628      	mov	r0, r5
 800663e:	47b8      	blx	r7
 8006640:	3001      	adds	r0, #1
 8006642:	d10e      	bne.n	8006662 <_printf_float+0x3f2>
 8006644:	e660      	b.n	8006308 <_printf_float+0x98>
 8006646:	2301      	movs	r3, #1
 8006648:	464a      	mov	r2, r9
 800664a:	4631      	mov	r1, r6
 800664c:	4628      	mov	r0, r5
 800664e:	47b8      	blx	r7
 8006650:	3001      	adds	r0, #1
 8006652:	f43f ae59 	beq.w	8006308 <_printf_float+0x98>
 8006656:	f108 0801 	add.w	r8, r8, #1
 800665a:	9b08      	ldr	r3, [sp, #32]
 800665c:	3b01      	subs	r3, #1
 800665e:	4543      	cmp	r3, r8
 8006660:	dcf1      	bgt.n	8006646 <_printf_float+0x3d6>
 8006662:	9b04      	ldr	r3, [sp, #16]
 8006664:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006668:	e6dd      	b.n	8006426 <_printf_float+0x1b6>
 800666a:	f04f 0800 	mov.w	r8, #0
 800666e:	f104 091a 	add.w	r9, r4, #26
 8006672:	e7f2      	b.n	800665a <_printf_float+0x3ea>
 8006674:	2301      	movs	r3, #1
 8006676:	4642      	mov	r2, r8
 8006678:	e7df      	b.n	800663a <_printf_float+0x3ca>
 800667a:	2301      	movs	r3, #1
 800667c:	464a      	mov	r2, r9
 800667e:	4631      	mov	r1, r6
 8006680:	4628      	mov	r0, r5
 8006682:	47b8      	blx	r7
 8006684:	3001      	adds	r0, #1
 8006686:	f43f ae3f 	beq.w	8006308 <_printf_float+0x98>
 800668a:	f108 0801 	add.w	r8, r8, #1
 800668e:	68e3      	ldr	r3, [r4, #12]
 8006690:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006692:	1a5b      	subs	r3, r3, r1
 8006694:	4543      	cmp	r3, r8
 8006696:	dcf0      	bgt.n	800667a <_printf_float+0x40a>
 8006698:	e6f9      	b.n	800648e <_printf_float+0x21e>
 800669a:	f04f 0800 	mov.w	r8, #0
 800669e:	f104 0919 	add.w	r9, r4, #25
 80066a2:	e7f4      	b.n	800668e <_printf_float+0x41e>

080066a4 <_printf_common>:
 80066a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a8:	4616      	mov	r6, r2
 80066aa:	4699      	mov	r9, r3
 80066ac:	688a      	ldr	r2, [r1, #8]
 80066ae:	690b      	ldr	r3, [r1, #16]
 80066b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066b4:	4293      	cmp	r3, r2
 80066b6:	bfb8      	it	lt
 80066b8:	4613      	movlt	r3, r2
 80066ba:	6033      	str	r3, [r6, #0]
 80066bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066c0:	4607      	mov	r7, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	b10a      	cbz	r2, 80066ca <_printf_common+0x26>
 80066c6:	3301      	adds	r3, #1
 80066c8:	6033      	str	r3, [r6, #0]
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	0699      	lsls	r1, r3, #26
 80066ce:	bf42      	ittt	mi
 80066d0:	6833      	ldrmi	r3, [r6, #0]
 80066d2:	3302      	addmi	r3, #2
 80066d4:	6033      	strmi	r3, [r6, #0]
 80066d6:	6825      	ldr	r5, [r4, #0]
 80066d8:	f015 0506 	ands.w	r5, r5, #6
 80066dc:	d106      	bne.n	80066ec <_printf_common+0x48>
 80066de:	f104 0a19 	add.w	sl, r4, #25
 80066e2:	68e3      	ldr	r3, [r4, #12]
 80066e4:	6832      	ldr	r2, [r6, #0]
 80066e6:	1a9b      	subs	r3, r3, r2
 80066e8:	42ab      	cmp	r3, r5
 80066ea:	dc26      	bgt.n	800673a <_printf_common+0x96>
 80066ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066f0:	1e13      	subs	r3, r2, #0
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	bf18      	it	ne
 80066f6:	2301      	movne	r3, #1
 80066f8:	0692      	lsls	r2, r2, #26
 80066fa:	d42b      	bmi.n	8006754 <_printf_common+0xb0>
 80066fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006700:	4649      	mov	r1, r9
 8006702:	4638      	mov	r0, r7
 8006704:	47c0      	blx	r8
 8006706:	3001      	adds	r0, #1
 8006708:	d01e      	beq.n	8006748 <_printf_common+0xa4>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	6922      	ldr	r2, [r4, #16]
 800670e:	f003 0306 	and.w	r3, r3, #6
 8006712:	2b04      	cmp	r3, #4
 8006714:	bf02      	ittt	eq
 8006716:	68e5      	ldreq	r5, [r4, #12]
 8006718:	6833      	ldreq	r3, [r6, #0]
 800671a:	1aed      	subeq	r5, r5, r3
 800671c:	68a3      	ldr	r3, [r4, #8]
 800671e:	bf0c      	ite	eq
 8006720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006724:	2500      	movne	r5, #0
 8006726:	4293      	cmp	r3, r2
 8006728:	bfc4      	itt	gt
 800672a:	1a9b      	subgt	r3, r3, r2
 800672c:	18ed      	addgt	r5, r5, r3
 800672e:	2600      	movs	r6, #0
 8006730:	341a      	adds	r4, #26
 8006732:	42b5      	cmp	r5, r6
 8006734:	d11a      	bne.n	800676c <_printf_common+0xc8>
 8006736:	2000      	movs	r0, #0
 8006738:	e008      	b.n	800674c <_printf_common+0xa8>
 800673a:	2301      	movs	r3, #1
 800673c:	4652      	mov	r2, sl
 800673e:	4649      	mov	r1, r9
 8006740:	4638      	mov	r0, r7
 8006742:	47c0      	blx	r8
 8006744:	3001      	adds	r0, #1
 8006746:	d103      	bne.n	8006750 <_printf_common+0xac>
 8006748:	f04f 30ff 	mov.w	r0, #4294967295
 800674c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006750:	3501      	adds	r5, #1
 8006752:	e7c6      	b.n	80066e2 <_printf_common+0x3e>
 8006754:	18e1      	adds	r1, r4, r3
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	2030      	movs	r0, #48	; 0x30
 800675a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800675e:	4422      	add	r2, r4
 8006760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006764:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006768:	3302      	adds	r3, #2
 800676a:	e7c7      	b.n	80066fc <_printf_common+0x58>
 800676c:	2301      	movs	r3, #1
 800676e:	4622      	mov	r2, r4
 8006770:	4649      	mov	r1, r9
 8006772:	4638      	mov	r0, r7
 8006774:	47c0      	blx	r8
 8006776:	3001      	adds	r0, #1
 8006778:	d0e6      	beq.n	8006748 <_printf_common+0xa4>
 800677a:	3601      	adds	r6, #1
 800677c:	e7d9      	b.n	8006732 <_printf_common+0x8e>
	...

08006780 <_printf_i>:
 8006780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006784:	7e0f      	ldrb	r7, [r1, #24]
 8006786:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006788:	2f78      	cmp	r7, #120	; 0x78
 800678a:	4691      	mov	r9, r2
 800678c:	4680      	mov	r8, r0
 800678e:	460c      	mov	r4, r1
 8006790:	469a      	mov	sl, r3
 8006792:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006796:	d807      	bhi.n	80067a8 <_printf_i+0x28>
 8006798:	2f62      	cmp	r7, #98	; 0x62
 800679a:	d80a      	bhi.n	80067b2 <_printf_i+0x32>
 800679c:	2f00      	cmp	r7, #0
 800679e:	f000 80d4 	beq.w	800694a <_printf_i+0x1ca>
 80067a2:	2f58      	cmp	r7, #88	; 0x58
 80067a4:	f000 80c0 	beq.w	8006928 <_printf_i+0x1a8>
 80067a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067b0:	e03a      	b.n	8006828 <_printf_i+0xa8>
 80067b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067b6:	2b15      	cmp	r3, #21
 80067b8:	d8f6      	bhi.n	80067a8 <_printf_i+0x28>
 80067ba:	a101      	add	r1, pc, #4	; (adr r1, 80067c0 <_printf_i+0x40>)
 80067bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067c0:	08006819 	.word	0x08006819
 80067c4:	0800682d 	.word	0x0800682d
 80067c8:	080067a9 	.word	0x080067a9
 80067cc:	080067a9 	.word	0x080067a9
 80067d0:	080067a9 	.word	0x080067a9
 80067d4:	080067a9 	.word	0x080067a9
 80067d8:	0800682d 	.word	0x0800682d
 80067dc:	080067a9 	.word	0x080067a9
 80067e0:	080067a9 	.word	0x080067a9
 80067e4:	080067a9 	.word	0x080067a9
 80067e8:	080067a9 	.word	0x080067a9
 80067ec:	08006931 	.word	0x08006931
 80067f0:	08006859 	.word	0x08006859
 80067f4:	080068eb 	.word	0x080068eb
 80067f8:	080067a9 	.word	0x080067a9
 80067fc:	080067a9 	.word	0x080067a9
 8006800:	08006953 	.word	0x08006953
 8006804:	080067a9 	.word	0x080067a9
 8006808:	08006859 	.word	0x08006859
 800680c:	080067a9 	.word	0x080067a9
 8006810:	080067a9 	.word	0x080067a9
 8006814:	080068f3 	.word	0x080068f3
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	1d1a      	adds	r2, r3, #4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	602a      	str	r2, [r5, #0]
 8006820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006828:	2301      	movs	r3, #1
 800682a:	e09f      	b.n	800696c <_printf_i+0x1ec>
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	682b      	ldr	r3, [r5, #0]
 8006830:	0607      	lsls	r7, r0, #24
 8006832:	f103 0104 	add.w	r1, r3, #4
 8006836:	6029      	str	r1, [r5, #0]
 8006838:	d501      	bpl.n	800683e <_printf_i+0xbe>
 800683a:	681e      	ldr	r6, [r3, #0]
 800683c:	e003      	b.n	8006846 <_printf_i+0xc6>
 800683e:	0646      	lsls	r6, r0, #25
 8006840:	d5fb      	bpl.n	800683a <_printf_i+0xba>
 8006842:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006846:	2e00      	cmp	r6, #0
 8006848:	da03      	bge.n	8006852 <_printf_i+0xd2>
 800684a:	232d      	movs	r3, #45	; 0x2d
 800684c:	4276      	negs	r6, r6
 800684e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006852:	485a      	ldr	r0, [pc, #360]	; (80069bc <_printf_i+0x23c>)
 8006854:	230a      	movs	r3, #10
 8006856:	e012      	b.n	800687e <_printf_i+0xfe>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	6820      	ldr	r0, [r4, #0]
 800685c:	1d19      	adds	r1, r3, #4
 800685e:	6029      	str	r1, [r5, #0]
 8006860:	0605      	lsls	r5, r0, #24
 8006862:	d501      	bpl.n	8006868 <_printf_i+0xe8>
 8006864:	681e      	ldr	r6, [r3, #0]
 8006866:	e002      	b.n	800686e <_printf_i+0xee>
 8006868:	0641      	lsls	r1, r0, #25
 800686a:	d5fb      	bpl.n	8006864 <_printf_i+0xe4>
 800686c:	881e      	ldrh	r6, [r3, #0]
 800686e:	4853      	ldr	r0, [pc, #332]	; (80069bc <_printf_i+0x23c>)
 8006870:	2f6f      	cmp	r7, #111	; 0x6f
 8006872:	bf0c      	ite	eq
 8006874:	2308      	moveq	r3, #8
 8006876:	230a      	movne	r3, #10
 8006878:	2100      	movs	r1, #0
 800687a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800687e:	6865      	ldr	r5, [r4, #4]
 8006880:	60a5      	str	r5, [r4, #8]
 8006882:	2d00      	cmp	r5, #0
 8006884:	bfa2      	ittt	ge
 8006886:	6821      	ldrge	r1, [r4, #0]
 8006888:	f021 0104 	bicge.w	r1, r1, #4
 800688c:	6021      	strge	r1, [r4, #0]
 800688e:	b90e      	cbnz	r6, 8006894 <_printf_i+0x114>
 8006890:	2d00      	cmp	r5, #0
 8006892:	d04b      	beq.n	800692c <_printf_i+0x1ac>
 8006894:	4615      	mov	r5, r2
 8006896:	fbb6 f1f3 	udiv	r1, r6, r3
 800689a:	fb03 6711 	mls	r7, r3, r1, r6
 800689e:	5dc7      	ldrb	r7, [r0, r7]
 80068a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068a4:	4637      	mov	r7, r6
 80068a6:	42bb      	cmp	r3, r7
 80068a8:	460e      	mov	r6, r1
 80068aa:	d9f4      	bls.n	8006896 <_printf_i+0x116>
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d10b      	bne.n	80068c8 <_printf_i+0x148>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	07de      	lsls	r6, r3, #31
 80068b4:	d508      	bpl.n	80068c8 <_printf_i+0x148>
 80068b6:	6923      	ldr	r3, [r4, #16]
 80068b8:	6861      	ldr	r1, [r4, #4]
 80068ba:	4299      	cmp	r1, r3
 80068bc:	bfde      	ittt	le
 80068be:	2330      	movle	r3, #48	; 0x30
 80068c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068c8:	1b52      	subs	r2, r2, r5
 80068ca:	6122      	str	r2, [r4, #16]
 80068cc:	f8cd a000 	str.w	sl, [sp]
 80068d0:	464b      	mov	r3, r9
 80068d2:	aa03      	add	r2, sp, #12
 80068d4:	4621      	mov	r1, r4
 80068d6:	4640      	mov	r0, r8
 80068d8:	f7ff fee4 	bl	80066a4 <_printf_common>
 80068dc:	3001      	adds	r0, #1
 80068de:	d14a      	bne.n	8006976 <_printf_i+0x1f6>
 80068e0:	f04f 30ff 	mov.w	r0, #4294967295
 80068e4:	b004      	add	sp, #16
 80068e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	f043 0320 	orr.w	r3, r3, #32
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	4833      	ldr	r0, [pc, #204]	; (80069c0 <_printf_i+0x240>)
 80068f4:	2778      	movs	r7, #120	; 0x78
 80068f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	6829      	ldr	r1, [r5, #0]
 80068fe:	061f      	lsls	r7, r3, #24
 8006900:	f851 6b04 	ldr.w	r6, [r1], #4
 8006904:	d402      	bmi.n	800690c <_printf_i+0x18c>
 8006906:	065f      	lsls	r7, r3, #25
 8006908:	bf48      	it	mi
 800690a:	b2b6      	uxthmi	r6, r6
 800690c:	07df      	lsls	r7, r3, #31
 800690e:	bf48      	it	mi
 8006910:	f043 0320 	orrmi.w	r3, r3, #32
 8006914:	6029      	str	r1, [r5, #0]
 8006916:	bf48      	it	mi
 8006918:	6023      	strmi	r3, [r4, #0]
 800691a:	b91e      	cbnz	r6, 8006924 <_printf_i+0x1a4>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	f023 0320 	bic.w	r3, r3, #32
 8006922:	6023      	str	r3, [r4, #0]
 8006924:	2310      	movs	r3, #16
 8006926:	e7a7      	b.n	8006878 <_printf_i+0xf8>
 8006928:	4824      	ldr	r0, [pc, #144]	; (80069bc <_printf_i+0x23c>)
 800692a:	e7e4      	b.n	80068f6 <_printf_i+0x176>
 800692c:	4615      	mov	r5, r2
 800692e:	e7bd      	b.n	80068ac <_printf_i+0x12c>
 8006930:	682b      	ldr	r3, [r5, #0]
 8006932:	6826      	ldr	r6, [r4, #0]
 8006934:	6961      	ldr	r1, [r4, #20]
 8006936:	1d18      	adds	r0, r3, #4
 8006938:	6028      	str	r0, [r5, #0]
 800693a:	0635      	lsls	r5, r6, #24
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	d501      	bpl.n	8006944 <_printf_i+0x1c4>
 8006940:	6019      	str	r1, [r3, #0]
 8006942:	e002      	b.n	800694a <_printf_i+0x1ca>
 8006944:	0670      	lsls	r0, r6, #25
 8006946:	d5fb      	bpl.n	8006940 <_printf_i+0x1c0>
 8006948:	8019      	strh	r1, [r3, #0]
 800694a:	2300      	movs	r3, #0
 800694c:	6123      	str	r3, [r4, #16]
 800694e:	4615      	mov	r5, r2
 8006950:	e7bc      	b.n	80068cc <_printf_i+0x14c>
 8006952:	682b      	ldr	r3, [r5, #0]
 8006954:	1d1a      	adds	r2, r3, #4
 8006956:	602a      	str	r2, [r5, #0]
 8006958:	681d      	ldr	r5, [r3, #0]
 800695a:	6862      	ldr	r2, [r4, #4]
 800695c:	2100      	movs	r1, #0
 800695e:	4628      	mov	r0, r5
 8006960:	f7f9 fcbe 	bl	80002e0 <memchr>
 8006964:	b108      	cbz	r0, 800696a <_printf_i+0x1ea>
 8006966:	1b40      	subs	r0, r0, r5
 8006968:	6060      	str	r0, [r4, #4]
 800696a:	6863      	ldr	r3, [r4, #4]
 800696c:	6123      	str	r3, [r4, #16]
 800696e:	2300      	movs	r3, #0
 8006970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006974:	e7aa      	b.n	80068cc <_printf_i+0x14c>
 8006976:	6923      	ldr	r3, [r4, #16]
 8006978:	462a      	mov	r2, r5
 800697a:	4649      	mov	r1, r9
 800697c:	4640      	mov	r0, r8
 800697e:	47d0      	blx	sl
 8006980:	3001      	adds	r0, #1
 8006982:	d0ad      	beq.n	80068e0 <_printf_i+0x160>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	079b      	lsls	r3, r3, #30
 8006988:	d413      	bmi.n	80069b2 <_printf_i+0x232>
 800698a:	68e0      	ldr	r0, [r4, #12]
 800698c:	9b03      	ldr	r3, [sp, #12]
 800698e:	4298      	cmp	r0, r3
 8006990:	bfb8      	it	lt
 8006992:	4618      	movlt	r0, r3
 8006994:	e7a6      	b.n	80068e4 <_printf_i+0x164>
 8006996:	2301      	movs	r3, #1
 8006998:	4632      	mov	r2, r6
 800699a:	4649      	mov	r1, r9
 800699c:	4640      	mov	r0, r8
 800699e:	47d0      	blx	sl
 80069a0:	3001      	adds	r0, #1
 80069a2:	d09d      	beq.n	80068e0 <_printf_i+0x160>
 80069a4:	3501      	adds	r5, #1
 80069a6:	68e3      	ldr	r3, [r4, #12]
 80069a8:	9903      	ldr	r1, [sp, #12]
 80069aa:	1a5b      	subs	r3, r3, r1
 80069ac:	42ab      	cmp	r3, r5
 80069ae:	dcf2      	bgt.n	8006996 <_printf_i+0x216>
 80069b0:	e7eb      	b.n	800698a <_printf_i+0x20a>
 80069b2:	2500      	movs	r5, #0
 80069b4:	f104 0619 	add.w	r6, r4, #25
 80069b8:	e7f5      	b.n	80069a6 <_printf_i+0x226>
 80069ba:	bf00      	nop
 80069bc:	08008ad6 	.word	0x08008ad6
 80069c0:	08008ae7 	.word	0x08008ae7

080069c4 <std>:
 80069c4:	2300      	movs	r3, #0
 80069c6:	b510      	push	{r4, lr}
 80069c8:	4604      	mov	r4, r0
 80069ca:	e9c0 3300 	strd	r3, r3, [r0]
 80069ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069d2:	6083      	str	r3, [r0, #8]
 80069d4:	8181      	strh	r1, [r0, #12]
 80069d6:	6643      	str	r3, [r0, #100]	; 0x64
 80069d8:	81c2      	strh	r2, [r0, #14]
 80069da:	6183      	str	r3, [r0, #24]
 80069dc:	4619      	mov	r1, r3
 80069de:	2208      	movs	r2, #8
 80069e0:	305c      	adds	r0, #92	; 0x5c
 80069e2:	f000 f9f7 	bl	8006dd4 <memset>
 80069e6:	4b0d      	ldr	r3, [pc, #52]	; (8006a1c <std+0x58>)
 80069e8:	6263      	str	r3, [r4, #36]	; 0x24
 80069ea:	4b0d      	ldr	r3, [pc, #52]	; (8006a20 <std+0x5c>)
 80069ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80069ee:	4b0d      	ldr	r3, [pc, #52]	; (8006a24 <std+0x60>)
 80069f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069f2:	4b0d      	ldr	r3, [pc, #52]	; (8006a28 <std+0x64>)
 80069f4:	6323      	str	r3, [r4, #48]	; 0x30
 80069f6:	4b0d      	ldr	r3, [pc, #52]	; (8006a2c <std+0x68>)
 80069f8:	6224      	str	r4, [r4, #32]
 80069fa:	429c      	cmp	r4, r3
 80069fc:	d006      	beq.n	8006a0c <std+0x48>
 80069fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006a02:	4294      	cmp	r4, r2
 8006a04:	d002      	beq.n	8006a0c <std+0x48>
 8006a06:	33d0      	adds	r3, #208	; 0xd0
 8006a08:	429c      	cmp	r4, r3
 8006a0a:	d105      	bne.n	8006a18 <std+0x54>
 8006a0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a14:	f000 ba5a 	b.w	8006ecc <__retarget_lock_init_recursive>
 8006a18:	bd10      	pop	{r4, pc}
 8006a1a:	bf00      	nop
 8006a1c:	08006c25 	.word	0x08006c25
 8006a20:	08006c47 	.word	0x08006c47
 8006a24:	08006c7f 	.word	0x08006c7f
 8006a28:	08006ca3 	.word	0x08006ca3
 8006a2c:	24000314 	.word	0x24000314

08006a30 <stdio_exit_handler>:
 8006a30:	4a02      	ldr	r2, [pc, #8]	; (8006a3c <stdio_exit_handler+0xc>)
 8006a32:	4903      	ldr	r1, [pc, #12]	; (8006a40 <stdio_exit_handler+0x10>)
 8006a34:	4803      	ldr	r0, [pc, #12]	; (8006a44 <stdio_exit_handler+0x14>)
 8006a36:	f000 b869 	b.w	8006b0c <_fwalk_sglue>
 8006a3a:	bf00      	nop
 8006a3c:	24000010 	.word	0x24000010
 8006a40:	0800874d 	.word	0x0800874d
 8006a44:	2400001c 	.word	0x2400001c

08006a48 <cleanup_stdio>:
 8006a48:	6841      	ldr	r1, [r0, #4]
 8006a4a:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <cleanup_stdio+0x34>)
 8006a4c:	4299      	cmp	r1, r3
 8006a4e:	b510      	push	{r4, lr}
 8006a50:	4604      	mov	r4, r0
 8006a52:	d001      	beq.n	8006a58 <cleanup_stdio+0x10>
 8006a54:	f001 fe7a 	bl	800874c <_fflush_r>
 8006a58:	68a1      	ldr	r1, [r4, #8]
 8006a5a:	4b09      	ldr	r3, [pc, #36]	; (8006a80 <cleanup_stdio+0x38>)
 8006a5c:	4299      	cmp	r1, r3
 8006a5e:	d002      	beq.n	8006a66 <cleanup_stdio+0x1e>
 8006a60:	4620      	mov	r0, r4
 8006a62:	f001 fe73 	bl	800874c <_fflush_r>
 8006a66:	68e1      	ldr	r1, [r4, #12]
 8006a68:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <cleanup_stdio+0x3c>)
 8006a6a:	4299      	cmp	r1, r3
 8006a6c:	d004      	beq.n	8006a78 <cleanup_stdio+0x30>
 8006a6e:	4620      	mov	r0, r4
 8006a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a74:	f001 be6a 	b.w	800874c <_fflush_r>
 8006a78:	bd10      	pop	{r4, pc}
 8006a7a:	bf00      	nop
 8006a7c:	24000314 	.word	0x24000314
 8006a80:	2400037c 	.word	0x2400037c
 8006a84:	240003e4 	.word	0x240003e4

08006a88 <global_stdio_init.part.0>:
 8006a88:	b510      	push	{r4, lr}
 8006a8a:	4b0b      	ldr	r3, [pc, #44]	; (8006ab8 <global_stdio_init.part.0+0x30>)
 8006a8c:	4c0b      	ldr	r4, [pc, #44]	; (8006abc <global_stdio_init.part.0+0x34>)
 8006a8e:	4a0c      	ldr	r2, [pc, #48]	; (8006ac0 <global_stdio_init.part.0+0x38>)
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	4620      	mov	r0, r4
 8006a94:	2200      	movs	r2, #0
 8006a96:	2104      	movs	r1, #4
 8006a98:	f7ff ff94 	bl	80069c4 <std>
 8006a9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	2109      	movs	r1, #9
 8006aa4:	f7ff ff8e 	bl	80069c4 <std>
 8006aa8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006aac:	2202      	movs	r2, #2
 8006aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ab2:	2112      	movs	r1, #18
 8006ab4:	f7ff bf86 	b.w	80069c4 <std>
 8006ab8:	2400044c 	.word	0x2400044c
 8006abc:	24000314 	.word	0x24000314
 8006ac0:	08006a31 	.word	0x08006a31

08006ac4 <__sfp_lock_acquire>:
 8006ac4:	4801      	ldr	r0, [pc, #4]	; (8006acc <__sfp_lock_acquire+0x8>)
 8006ac6:	f000 ba02 	b.w	8006ece <__retarget_lock_acquire_recursive>
 8006aca:	bf00      	nop
 8006acc:	24000455 	.word	0x24000455

08006ad0 <__sfp_lock_release>:
 8006ad0:	4801      	ldr	r0, [pc, #4]	; (8006ad8 <__sfp_lock_release+0x8>)
 8006ad2:	f000 b9fd 	b.w	8006ed0 <__retarget_lock_release_recursive>
 8006ad6:	bf00      	nop
 8006ad8:	24000455 	.word	0x24000455

08006adc <__sinit>:
 8006adc:	b510      	push	{r4, lr}
 8006ade:	4604      	mov	r4, r0
 8006ae0:	f7ff fff0 	bl	8006ac4 <__sfp_lock_acquire>
 8006ae4:	6a23      	ldr	r3, [r4, #32]
 8006ae6:	b11b      	cbz	r3, 8006af0 <__sinit+0x14>
 8006ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aec:	f7ff bff0 	b.w	8006ad0 <__sfp_lock_release>
 8006af0:	4b04      	ldr	r3, [pc, #16]	; (8006b04 <__sinit+0x28>)
 8006af2:	6223      	str	r3, [r4, #32]
 8006af4:	4b04      	ldr	r3, [pc, #16]	; (8006b08 <__sinit+0x2c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1f5      	bne.n	8006ae8 <__sinit+0xc>
 8006afc:	f7ff ffc4 	bl	8006a88 <global_stdio_init.part.0>
 8006b00:	e7f2      	b.n	8006ae8 <__sinit+0xc>
 8006b02:	bf00      	nop
 8006b04:	08006a49 	.word	0x08006a49
 8006b08:	2400044c 	.word	0x2400044c

08006b0c <_fwalk_sglue>:
 8006b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b10:	4607      	mov	r7, r0
 8006b12:	4688      	mov	r8, r1
 8006b14:	4614      	mov	r4, r2
 8006b16:	2600      	movs	r6, #0
 8006b18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b1c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b20:	d505      	bpl.n	8006b2e <_fwalk_sglue+0x22>
 8006b22:	6824      	ldr	r4, [r4, #0]
 8006b24:	2c00      	cmp	r4, #0
 8006b26:	d1f7      	bne.n	8006b18 <_fwalk_sglue+0xc>
 8006b28:	4630      	mov	r0, r6
 8006b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b2e:	89ab      	ldrh	r3, [r5, #12]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d907      	bls.n	8006b44 <_fwalk_sglue+0x38>
 8006b34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	d003      	beq.n	8006b44 <_fwalk_sglue+0x38>
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	4638      	mov	r0, r7
 8006b40:	47c0      	blx	r8
 8006b42:	4306      	orrs	r6, r0
 8006b44:	3568      	adds	r5, #104	; 0x68
 8006b46:	e7e9      	b.n	8006b1c <_fwalk_sglue+0x10>

08006b48 <iprintf>:
 8006b48:	b40f      	push	{r0, r1, r2, r3}
 8006b4a:	b507      	push	{r0, r1, r2, lr}
 8006b4c:	4906      	ldr	r1, [pc, #24]	; (8006b68 <iprintf+0x20>)
 8006b4e:	ab04      	add	r3, sp, #16
 8006b50:	6808      	ldr	r0, [r1, #0]
 8006b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b56:	6881      	ldr	r1, [r0, #8]
 8006b58:	9301      	str	r3, [sp, #4]
 8006b5a:	f001 fc57 	bl	800840c <_vfiprintf_r>
 8006b5e:	b003      	add	sp, #12
 8006b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b64:	b004      	add	sp, #16
 8006b66:	4770      	bx	lr
 8006b68:	24000068 	.word	0x24000068

08006b6c <_puts_r>:
 8006b6c:	6a03      	ldr	r3, [r0, #32]
 8006b6e:	b570      	push	{r4, r5, r6, lr}
 8006b70:	6884      	ldr	r4, [r0, #8]
 8006b72:	4605      	mov	r5, r0
 8006b74:	460e      	mov	r6, r1
 8006b76:	b90b      	cbnz	r3, 8006b7c <_puts_r+0x10>
 8006b78:	f7ff ffb0 	bl	8006adc <__sinit>
 8006b7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b7e:	07db      	lsls	r3, r3, #31
 8006b80:	d405      	bmi.n	8006b8e <_puts_r+0x22>
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	0598      	lsls	r0, r3, #22
 8006b86:	d402      	bmi.n	8006b8e <_puts_r+0x22>
 8006b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b8a:	f000 f9a0 	bl	8006ece <__retarget_lock_acquire_recursive>
 8006b8e:	89a3      	ldrh	r3, [r4, #12]
 8006b90:	0719      	lsls	r1, r3, #28
 8006b92:	d513      	bpl.n	8006bbc <_puts_r+0x50>
 8006b94:	6923      	ldr	r3, [r4, #16]
 8006b96:	b18b      	cbz	r3, 8006bbc <_puts_r+0x50>
 8006b98:	3e01      	subs	r6, #1
 8006b9a:	68a3      	ldr	r3, [r4, #8]
 8006b9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	60a3      	str	r3, [r4, #8]
 8006ba4:	b9e9      	cbnz	r1, 8006be2 <_puts_r+0x76>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	da2e      	bge.n	8006c08 <_puts_r+0x9c>
 8006baa:	4622      	mov	r2, r4
 8006bac:	210a      	movs	r1, #10
 8006bae:	4628      	mov	r0, r5
 8006bb0:	f000 f87b 	bl	8006caa <__swbuf_r>
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d007      	beq.n	8006bc8 <_puts_r+0x5c>
 8006bb8:	250a      	movs	r5, #10
 8006bba:	e007      	b.n	8006bcc <_puts_r+0x60>
 8006bbc:	4621      	mov	r1, r4
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	f000 f8b0 	bl	8006d24 <__swsetup_r>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	d0e7      	beq.n	8006b98 <_puts_r+0x2c>
 8006bc8:	f04f 35ff 	mov.w	r5, #4294967295
 8006bcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bce:	07da      	lsls	r2, r3, #31
 8006bd0:	d405      	bmi.n	8006bde <_puts_r+0x72>
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	059b      	lsls	r3, r3, #22
 8006bd6:	d402      	bmi.n	8006bde <_puts_r+0x72>
 8006bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bda:	f000 f979 	bl	8006ed0 <__retarget_lock_release_recursive>
 8006bde:	4628      	mov	r0, r5
 8006be0:	bd70      	pop	{r4, r5, r6, pc}
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	da04      	bge.n	8006bf0 <_puts_r+0x84>
 8006be6:	69a2      	ldr	r2, [r4, #24]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	dc06      	bgt.n	8006bfa <_puts_r+0x8e>
 8006bec:	290a      	cmp	r1, #10
 8006bee:	d004      	beq.n	8006bfa <_puts_r+0x8e>
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	6022      	str	r2, [r4, #0]
 8006bf6:	7019      	strb	r1, [r3, #0]
 8006bf8:	e7cf      	b.n	8006b9a <_puts_r+0x2e>
 8006bfa:	4622      	mov	r2, r4
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f000 f854 	bl	8006caa <__swbuf_r>
 8006c02:	3001      	adds	r0, #1
 8006c04:	d1c9      	bne.n	8006b9a <_puts_r+0x2e>
 8006c06:	e7df      	b.n	8006bc8 <_puts_r+0x5c>
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	250a      	movs	r5, #10
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	6022      	str	r2, [r4, #0]
 8006c10:	701d      	strb	r5, [r3, #0]
 8006c12:	e7db      	b.n	8006bcc <_puts_r+0x60>

08006c14 <puts>:
 8006c14:	4b02      	ldr	r3, [pc, #8]	; (8006c20 <puts+0xc>)
 8006c16:	4601      	mov	r1, r0
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	f7ff bfa7 	b.w	8006b6c <_puts_r>
 8006c1e:	bf00      	nop
 8006c20:	24000068 	.word	0x24000068

08006c24 <__sread>:
 8006c24:	b510      	push	{r4, lr}
 8006c26:	460c      	mov	r4, r1
 8006c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c2c:	f000 f900 	bl	8006e30 <_read_r>
 8006c30:	2800      	cmp	r0, #0
 8006c32:	bfab      	itete	ge
 8006c34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c36:	89a3      	ldrhlt	r3, [r4, #12]
 8006c38:	181b      	addge	r3, r3, r0
 8006c3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c3e:	bfac      	ite	ge
 8006c40:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c42:	81a3      	strhlt	r3, [r4, #12]
 8006c44:	bd10      	pop	{r4, pc}

08006c46 <__swrite>:
 8006c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c4a:	461f      	mov	r7, r3
 8006c4c:	898b      	ldrh	r3, [r1, #12]
 8006c4e:	05db      	lsls	r3, r3, #23
 8006c50:	4605      	mov	r5, r0
 8006c52:	460c      	mov	r4, r1
 8006c54:	4616      	mov	r6, r2
 8006c56:	d505      	bpl.n	8006c64 <__swrite+0x1e>
 8006c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f000 f8d4 	bl	8006e0c <_lseek_r>
 8006c64:	89a3      	ldrh	r3, [r4, #12]
 8006c66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c6e:	81a3      	strh	r3, [r4, #12]
 8006c70:	4632      	mov	r2, r6
 8006c72:	463b      	mov	r3, r7
 8006c74:	4628      	mov	r0, r5
 8006c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7a:	f000 b8eb 	b.w	8006e54 <_write_r>

08006c7e <__sseek>:
 8006c7e:	b510      	push	{r4, lr}
 8006c80:	460c      	mov	r4, r1
 8006c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c86:	f000 f8c1 	bl	8006e0c <_lseek_r>
 8006c8a:	1c43      	adds	r3, r0, #1
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	bf15      	itete	ne
 8006c90:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c9a:	81a3      	strheq	r3, [r4, #12]
 8006c9c:	bf18      	it	ne
 8006c9e:	81a3      	strhne	r3, [r4, #12]
 8006ca0:	bd10      	pop	{r4, pc}

08006ca2 <__sclose>:
 8006ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca6:	f000 b8a1 	b.w	8006dec <_close_r>

08006caa <__swbuf_r>:
 8006caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cac:	460e      	mov	r6, r1
 8006cae:	4614      	mov	r4, r2
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	b118      	cbz	r0, 8006cbc <__swbuf_r+0x12>
 8006cb4:	6a03      	ldr	r3, [r0, #32]
 8006cb6:	b90b      	cbnz	r3, 8006cbc <__swbuf_r+0x12>
 8006cb8:	f7ff ff10 	bl	8006adc <__sinit>
 8006cbc:	69a3      	ldr	r3, [r4, #24]
 8006cbe:	60a3      	str	r3, [r4, #8]
 8006cc0:	89a3      	ldrh	r3, [r4, #12]
 8006cc2:	071a      	lsls	r2, r3, #28
 8006cc4:	d525      	bpl.n	8006d12 <__swbuf_r+0x68>
 8006cc6:	6923      	ldr	r3, [r4, #16]
 8006cc8:	b31b      	cbz	r3, 8006d12 <__swbuf_r+0x68>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	6922      	ldr	r2, [r4, #16]
 8006cce:	1a98      	subs	r0, r3, r2
 8006cd0:	6963      	ldr	r3, [r4, #20]
 8006cd2:	b2f6      	uxtb	r6, r6
 8006cd4:	4283      	cmp	r3, r0
 8006cd6:	4637      	mov	r7, r6
 8006cd8:	dc04      	bgt.n	8006ce4 <__swbuf_r+0x3a>
 8006cda:	4621      	mov	r1, r4
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f001 fd35 	bl	800874c <_fflush_r>
 8006ce2:	b9e0      	cbnz	r0, 8006d1e <__swbuf_r+0x74>
 8006ce4:	68a3      	ldr	r3, [r4, #8]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	60a3      	str	r3, [r4, #8]
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	6022      	str	r2, [r4, #0]
 8006cf0:	701e      	strb	r6, [r3, #0]
 8006cf2:	6962      	ldr	r2, [r4, #20]
 8006cf4:	1c43      	adds	r3, r0, #1
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d004      	beq.n	8006d04 <__swbuf_r+0x5a>
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	07db      	lsls	r3, r3, #31
 8006cfe:	d506      	bpl.n	8006d0e <__swbuf_r+0x64>
 8006d00:	2e0a      	cmp	r6, #10
 8006d02:	d104      	bne.n	8006d0e <__swbuf_r+0x64>
 8006d04:	4621      	mov	r1, r4
 8006d06:	4628      	mov	r0, r5
 8006d08:	f001 fd20 	bl	800874c <_fflush_r>
 8006d0c:	b938      	cbnz	r0, 8006d1e <__swbuf_r+0x74>
 8006d0e:	4638      	mov	r0, r7
 8006d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d12:	4621      	mov	r1, r4
 8006d14:	4628      	mov	r0, r5
 8006d16:	f000 f805 	bl	8006d24 <__swsetup_r>
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	d0d5      	beq.n	8006cca <__swbuf_r+0x20>
 8006d1e:	f04f 37ff 	mov.w	r7, #4294967295
 8006d22:	e7f4      	b.n	8006d0e <__swbuf_r+0x64>

08006d24 <__swsetup_r>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	4b2a      	ldr	r3, [pc, #168]	; (8006dd0 <__swsetup_r+0xac>)
 8006d28:	4605      	mov	r5, r0
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	b118      	cbz	r0, 8006d38 <__swsetup_r+0x14>
 8006d30:	6a03      	ldr	r3, [r0, #32]
 8006d32:	b90b      	cbnz	r3, 8006d38 <__swsetup_r+0x14>
 8006d34:	f7ff fed2 	bl	8006adc <__sinit>
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d3e:	0718      	lsls	r0, r3, #28
 8006d40:	d422      	bmi.n	8006d88 <__swsetup_r+0x64>
 8006d42:	06d9      	lsls	r1, r3, #27
 8006d44:	d407      	bmi.n	8006d56 <__swsetup_r+0x32>
 8006d46:	2309      	movs	r3, #9
 8006d48:	602b      	str	r3, [r5, #0]
 8006d4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d4e:	81a3      	strh	r3, [r4, #12]
 8006d50:	f04f 30ff 	mov.w	r0, #4294967295
 8006d54:	e034      	b.n	8006dc0 <__swsetup_r+0x9c>
 8006d56:	0758      	lsls	r0, r3, #29
 8006d58:	d512      	bpl.n	8006d80 <__swsetup_r+0x5c>
 8006d5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d5c:	b141      	cbz	r1, 8006d70 <__swsetup_r+0x4c>
 8006d5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d62:	4299      	cmp	r1, r3
 8006d64:	d002      	beq.n	8006d6c <__swsetup_r+0x48>
 8006d66:	4628      	mov	r0, r5
 8006d68:	f000 feaa 	bl	8007ac0 <_free_r>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	6363      	str	r3, [r4, #52]	; 0x34
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d76:	81a3      	strh	r3, [r4, #12]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	6063      	str	r3, [r4, #4]
 8006d7c:	6923      	ldr	r3, [r4, #16]
 8006d7e:	6023      	str	r3, [r4, #0]
 8006d80:	89a3      	ldrh	r3, [r4, #12]
 8006d82:	f043 0308 	orr.w	r3, r3, #8
 8006d86:	81a3      	strh	r3, [r4, #12]
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	b94b      	cbnz	r3, 8006da0 <__swsetup_r+0x7c>
 8006d8c:	89a3      	ldrh	r3, [r4, #12]
 8006d8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d96:	d003      	beq.n	8006da0 <__swsetup_r+0x7c>
 8006d98:	4621      	mov	r1, r4
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f001 fd24 	bl	80087e8 <__smakebuf_r>
 8006da0:	89a0      	ldrh	r0, [r4, #12]
 8006da2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006da6:	f010 0301 	ands.w	r3, r0, #1
 8006daa:	d00a      	beq.n	8006dc2 <__swsetup_r+0x9e>
 8006dac:	2300      	movs	r3, #0
 8006dae:	60a3      	str	r3, [r4, #8]
 8006db0:	6963      	ldr	r3, [r4, #20]
 8006db2:	425b      	negs	r3, r3
 8006db4:	61a3      	str	r3, [r4, #24]
 8006db6:	6923      	ldr	r3, [r4, #16]
 8006db8:	b943      	cbnz	r3, 8006dcc <__swsetup_r+0xa8>
 8006dba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dbe:	d1c4      	bne.n	8006d4a <__swsetup_r+0x26>
 8006dc0:	bd38      	pop	{r3, r4, r5, pc}
 8006dc2:	0781      	lsls	r1, r0, #30
 8006dc4:	bf58      	it	pl
 8006dc6:	6963      	ldrpl	r3, [r4, #20]
 8006dc8:	60a3      	str	r3, [r4, #8]
 8006dca:	e7f4      	b.n	8006db6 <__swsetup_r+0x92>
 8006dcc:	2000      	movs	r0, #0
 8006dce:	e7f7      	b.n	8006dc0 <__swsetup_r+0x9c>
 8006dd0:	24000068 	.word	0x24000068

08006dd4 <memset>:
 8006dd4:	4402      	add	r2, r0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d100      	bne.n	8006dde <memset+0xa>
 8006ddc:	4770      	bx	lr
 8006dde:	f803 1b01 	strb.w	r1, [r3], #1
 8006de2:	e7f9      	b.n	8006dd8 <memset+0x4>

08006de4 <_localeconv_r>:
 8006de4:	4800      	ldr	r0, [pc, #0]	; (8006de8 <_localeconv_r+0x4>)
 8006de6:	4770      	bx	lr
 8006de8:	2400015c 	.word	0x2400015c

08006dec <_close_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4d06      	ldr	r5, [pc, #24]	; (8006e08 <_close_r+0x1c>)
 8006df0:	2300      	movs	r3, #0
 8006df2:	4604      	mov	r4, r0
 8006df4:	4608      	mov	r0, r1
 8006df6:	602b      	str	r3, [r5, #0]
 8006df8:	f7fa f94f 	bl	800109a <_close>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	d102      	bne.n	8006e06 <_close_r+0x1a>
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	b103      	cbz	r3, 8006e06 <_close_r+0x1a>
 8006e04:	6023      	str	r3, [r4, #0]
 8006e06:	bd38      	pop	{r3, r4, r5, pc}
 8006e08:	24000450 	.word	0x24000450

08006e0c <_lseek_r>:
 8006e0c:	b538      	push	{r3, r4, r5, lr}
 8006e0e:	4d07      	ldr	r5, [pc, #28]	; (8006e2c <_lseek_r+0x20>)
 8006e10:	4604      	mov	r4, r0
 8006e12:	4608      	mov	r0, r1
 8006e14:	4611      	mov	r1, r2
 8006e16:	2200      	movs	r2, #0
 8006e18:	602a      	str	r2, [r5, #0]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f7fa f964 	bl	80010e8 <_lseek>
 8006e20:	1c43      	adds	r3, r0, #1
 8006e22:	d102      	bne.n	8006e2a <_lseek_r+0x1e>
 8006e24:	682b      	ldr	r3, [r5, #0]
 8006e26:	b103      	cbz	r3, 8006e2a <_lseek_r+0x1e>
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	bd38      	pop	{r3, r4, r5, pc}
 8006e2c:	24000450 	.word	0x24000450

08006e30 <_read_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4d07      	ldr	r5, [pc, #28]	; (8006e50 <_read_r+0x20>)
 8006e34:	4604      	mov	r4, r0
 8006e36:	4608      	mov	r0, r1
 8006e38:	4611      	mov	r1, r2
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	602a      	str	r2, [r5, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f7fa f8f2 	bl	8001028 <_read>
 8006e44:	1c43      	adds	r3, r0, #1
 8006e46:	d102      	bne.n	8006e4e <_read_r+0x1e>
 8006e48:	682b      	ldr	r3, [r5, #0]
 8006e4a:	b103      	cbz	r3, 8006e4e <_read_r+0x1e>
 8006e4c:	6023      	str	r3, [r4, #0]
 8006e4e:	bd38      	pop	{r3, r4, r5, pc}
 8006e50:	24000450 	.word	0x24000450

08006e54 <_write_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	4d07      	ldr	r5, [pc, #28]	; (8006e74 <_write_r+0x20>)
 8006e58:	4604      	mov	r4, r0
 8006e5a:	4608      	mov	r0, r1
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	2200      	movs	r2, #0
 8006e60:	602a      	str	r2, [r5, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	f7fa f8fd 	bl	8001062 <_write>
 8006e68:	1c43      	adds	r3, r0, #1
 8006e6a:	d102      	bne.n	8006e72 <_write_r+0x1e>
 8006e6c:	682b      	ldr	r3, [r5, #0]
 8006e6e:	b103      	cbz	r3, 8006e72 <_write_r+0x1e>
 8006e70:	6023      	str	r3, [r4, #0]
 8006e72:	bd38      	pop	{r3, r4, r5, pc}
 8006e74:	24000450 	.word	0x24000450

08006e78 <__errno>:
 8006e78:	4b01      	ldr	r3, [pc, #4]	; (8006e80 <__errno+0x8>)
 8006e7a:	6818      	ldr	r0, [r3, #0]
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	24000068 	.word	0x24000068

08006e84 <__libc_init_array>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	4d0d      	ldr	r5, [pc, #52]	; (8006ebc <__libc_init_array+0x38>)
 8006e88:	4c0d      	ldr	r4, [pc, #52]	; (8006ec0 <__libc_init_array+0x3c>)
 8006e8a:	1b64      	subs	r4, r4, r5
 8006e8c:	10a4      	asrs	r4, r4, #2
 8006e8e:	2600      	movs	r6, #0
 8006e90:	42a6      	cmp	r6, r4
 8006e92:	d109      	bne.n	8006ea8 <__libc_init_array+0x24>
 8006e94:	4d0b      	ldr	r5, [pc, #44]	; (8006ec4 <__libc_init_array+0x40>)
 8006e96:	4c0c      	ldr	r4, [pc, #48]	; (8006ec8 <__libc_init_array+0x44>)
 8006e98:	f001 fdd4 	bl	8008a44 <_init>
 8006e9c:	1b64      	subs	r4, r4, r5
 8006e9e:	10a4      	asrs	r4, r4, #2
 8006ea0:	2600      	movs	r6, #0
 8006ea2:	42a6      	cmp	r6, r4
 8006ea4:	d105      	bne.n	8006eb2 <__libc_init_array+0x2e>
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}
 8006ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eac:	4798      	blx	r3
 8006eae:	3601      	adds	r6, #1
 8006eb0:	e7ee      	b.n	8006e90 <__libc_init_array+0xc>
 8006eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb6:	4798      	blx	r3
 8006eb8:	3601      	adds	r6, #1
 8006eba:	e7f2      	b.n	8006ea2 <__libc_init_array+0x1e>
 8006ebc:	08008e3c 	.word	0x08008e3c
 8006ec0:	08008e3c 	.word	0x08008e3c
 8006ec4:	08008e3c 	.word	0x08008e3c
 8006ec8:	08008e40 	.word	0x08008e40

08006ecc <__retarget_lock_init_recursive>:
 8006ecc:	4770      	bx	lr

08006ece <__retarget_lock_acquire_recursive>:
 8006ece:	4770      	bx	lr

08006ed0 <__retarget_lock_release_recursive>:
 8006ed0:	4770      	bx	lr

08006ed2 <quorem>:
 8006ed2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed6:	6903      	ldr	r3, [r0, #16]
 8006ed8:	690c      	ldr	r4, [r1, #16]
 8006eda:	42a3      	cmp	r3, r4
 8006edc:	4607      	mov	r7, r0
 8006ede:	db7e      	blt.n	8006fde <quorem+0x10c>
 8006ee0:	3c01      	subs	r4, #1
 8006ee2:	f101 0814 	add.w	r8, r1, #20
 8006ee6:	f100 0514 	add.w	r5, r0, #20
 8006eea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006eee:	9301      	str	r3, [sp, #4]
 8006ef0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ef4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	429a      	cmp	r2, r3
 8006efc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f04:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f08:	d331      	bcc.n	8006f6e <quorem+0x9c>
 8006f0a:	f04f 0e00 	mov.w	lr, #0
 8006f0e:	4640      	mov	r0, r8
 8006f10:	46ac      	mov	ip, r5
 8006f12:	46f2      	mov	sl, lr
 8006f14:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f18:	b293      	uxth	r3, r2
 8006f1a:	fb06 e303 	mla	r3, r6, r3, lr
 8006f1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f22:	0c1a      	lsrs	r2, r3, #16
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	ebaa 0303 	sub.w	r3, sl, r3
 8006f2a:	f8dc a000 	ldr.w	sl, [ip]
 8006f2e:	fa13 f38a 	uxtah	r3, r3, sl
 8006f32:	fb06 220e 	mla	r2, r6, lr, r2
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	9b00      	ldr	r3, [sp, #0]
 8006f3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f3e:	b292      	uxth	r2, r2
 8006f40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f48:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f4c:	4581      	cmp	r9, r0
 8006f4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f52:	f84c 3b04 	str.w	r3, [ip], #4
 8006f56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f5a:	d2db      	bcs.n	8006f14 <quorem+0x42>
 8006f5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f60:	b92b      	cbnz	r3, 8006f6e <quorem+0x9c>
 8006f62:	9b01      	ldr	r3, [sp, #4]
 8006f64:	3b04      	subs	r3, #4
 8006f66:	429d      	cmp	r5, r3
 8006f68:	461a      	mov	r2, r3
 8006f6a:	d32c      	bcc.n	8006fc6 <quorem+0xf4>
 8006f6c:	613c      	str	r4, [r7, #16]
 8006f6e:	4638      	mov	r0, r7
 8006f70:	f001 f922 	bl	80081b8 <__mcmp>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	db22      	blt.n	8006fbe <quorem+0xec>
 8006f78:	3601      	adds	r6, #1
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f82:	f8d1 c000 	ldr.w	ip, [r1]
 8006f86:	b293      	uxth	r3, r2
 8006f88:	1ac3      	subs	r3, r0, r3
 8006f8a:	0c12      	lsrs	r2, r2, #16
 8006f8c:	fa13 f38c 	uxtah	r3, r3, ip
 8006f90:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006f94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f9e:	45c1      	cmp	r9, r8
 8006fa0:	f841 3b04 	str.w	r3, [r1], #4
 8006fa4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006fa8:	d2e9      	bcs.n	8006f7e <quorem+0xac>
 8006faa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fb2:	b922      	cbnz	r2, 8006fbe <quorem+0xec>
 8006fb4:	3b04      	subs	r3, #4
 8006fb6:	429d      	cmp	r5, r3
 8006fb8:	461a      	mov	r2, r3
 8006fba:	d30a      	bcc.n	8006fd2 <quorem+0x100>
 8006fbc:	613c      	str	r4, [r7, #16]
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	b003      	add	sp, #12
 8006fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	3b04      	subs	r3, #4
 8006fca:	2a00      	cmp	r2, #0
 8006fcc:	d1ce      	bne.n	8006f6c <quorem+0x9a>
 8006fce:	3c01      	subs	r4, #1
 8006fd0:	e7c9      	b.n	8006f66 <quorem+0x94>
 8006fd2:	6812      	ldr	r2, [r2, #0]
 8006fd4:	3b04      	subs	r3, #4
 8006fd6:	2a00      	cmp	r2, #0
 8006fd8:	d1f0      	bne.n	8006fbc <quorem+0xea>
 8006fda:	3c01      	subs	r4, #1
 8006fdc:	e7eb      	b.n	8006fb6 <quorem+0xe4>
 8006fde:	2000      	movs	r0, #0
 8006fe0:	e7ee      	b.n	8006fc0 <quorem+0xee>
 8006fe2:	0000      	movs	r0, r0
 8006fe4:	0000      	movs	r0, r0
	...

08006fe8 <_dtoa_r>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	ed2d 8b02 	vpush	{d8}
 8006ff0:	69c5      	ldr	r5, [r0, #28]
 8006ff2:	b091      	sub	sp, #68	; 0x44
 8006ff4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006ff8:	ec59 8b10 	vmov	r8, r9, d0
 8006ffc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8006ffe:	9106      	str	r1, [sp, #24]
 8007000:	4606      	mov	r6, r0
 8007002:	9208      	str	r2, [sp, #32]
 8007004:	930c      	str	r3, [sp, #48]	; 0x30
 8007006:	b975      	cbnz	r5, 8007026 <_dtoa_r+0x3e>
 8007008:	2010      	movs	r0, #16
 800700a:	f000 fda5 	bl	8007b58 <malloc>
 800700e:	4602      	mov	r2, r0
 8007010:	61f0      	str	r0, [r6, #28]
 8007012:	b920      	cbnz	r0, 800701e <_dtoa_r+0x36>
 8007014:	4ba6      	ldr	r3, [pc, #664]	; (80072b0 <_dtoa_r+0x2c8>)
 8007016:	21ef      	movs	r1, #239	; 0xef
 8007018:	48a6      	ldr	r0, [pc, #664]	; (80072b4 <_dtoa_r+0x2cc>)
 800701a:	f001 fc61 	bl	80088e0 <__assert_func>
 800701e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007022:	6005      	str	r5, [r0, #0]
 8007024:	60c5      	str	r5, [r0, #12]
 8007026:	69f3      	ldr	r3, [r6, #28]
 8007028:	6819      	ldr	r1, [r3, #0]
 800702a:	b151      	cbz	r1, 8007042 <_dtoa_r+0x5a>
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	604a      	str	r2, [r1, #4]
 8007030:	2301      	movs	r3, #1
 8007032:	4093      	lsls	r3, r2
 8007034:	608b      	str	r3, [r1, #8]
 8007036:	4630      	mov	r0, r6
 8007038:	f000 fe82 	bl	8007d40 <_Bfree>
 800703c:	69f3      	ldr	r3, [r6, #28]
 800703e:	2200      	movs	r2, #0
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	f1b9 0300 	subs.w	r3, r9, #0
 8007046:	bfbb      	ittet	lt
 8007048:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800704c:	9303      	strlt	r3, [sp, #12]
 800704e:	2300      	movge	r3, #0
 8007050:	2201      	movlt	r2, #1
 8007052:	bfac      	ite	ge
 8007054:	6023      	strge	r3, [r4, #0]
 8007056:	6022      	strlt	r2, [r4, #0]
 8007058:	4b97      	ldr	r3, [pc, #604]	; (80072b8 <_dtoa_r+0x2d0>)
 800705a:	9c03      	ldr	r4, [sp, #12]
 800705c:	43a3      	bics	r3, r4
 800705e:	d11c      	bne.n	800709a <_dtoa_r+0xb2>
 8007060:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007062:	f242 730f 	movw	r3, #9999	; 0x270f
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800706c:	ea53 0308 	orrs.w	r3, r3, r8
 8007070:	f000 84fb 	beq.w	8007a6a <_dtoa_r+0xa82>
 8007074:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007076:	b963      	cbnz	r3, 8007092 <_dtoa_r+0xaa>
 8007078:	4b90      	ldr	r3, [pc, #576]	; (80072bc <_dtoa_r+0x2d4>)
 800707a:	e020      	b.n	80070be <_dtoa_r+0xd6>
 800707c:	4b90      	ldr	r3, [pc, #576]	; (80072c0 <_dtoa_r+0x2d8>)
 800707e:	9301      	str	r3, [sp, #4]
 8007080:	3308      	adds	r3, #8
 8007082:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	9801      	ldr	r0, [sp, #4]
 8007088:	b011      	add	sp, #68	; 0x44
 800708a:	ecbd 8b02 	vpop	{d8}
 800708e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007092:	4b8a      	ldr	r3, [pc, #552]	; (80072bc <_dtoa_r+0x2d4>)
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	3303      	adds	r3, #3
 8007098:	e7f3      	b.n	8007082 <_dtoa_r+0x9a>
 800709a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800709e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80070a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a6:	d10c      	bne.n	80070c2 <_dtoa_r+0xda>
 80070a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070aa:	2301      	movs	r3, #1
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 84d7 	beq.w	8007a64 <_dtoa_r+0xa7c>
 80070b6:	4b83      	ldr	r3, [pc, #524]	; (80072c4 <_dtoa_r+0x2dc>)
 80070b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80070ba:	6013      	str	r3, [r2, #0]
 80070bc:	3b01      	subs	r3, #1
 80070be:	9301      	str	r3, [sp, #4]
 80070c0:	e7e1      	b.n	8007086 <_dtoa_r+0x9e>
 80070c2:	aa0e      	add	r2, sp, #56	; 0x38
 80070c4:	a90f      	add	r1, sp, #60	; 0x3c
 80070c6:	4630      	mov	r0, r6
 80070c8:	eeb0 0b48 	vmov.f64	d0, d8
 80070cc:	f001 f91a 	bl	8008304 <__d2b>
 80070d0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80070d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070d6:	4605      	mov	r5, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d046      	beq.n	800716a <_dtoa_r+0x182>
 80070dc:	eeb0 7b48 	vmov.f64	d7, d8
 80070e0:	ee18 1a90 	vmov	r1, s17
 80070e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80070e8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80070ec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80070f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80070f4:	2000      	movs	r0, #0
 80070f6:	ee07 1a90 	vmov	s15, r1
 80070fa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80070fe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007298 <_dtoa_r+0x2b0>
 8007102:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007106:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80072a0 <_dtoa_r+0x2b8>
 800710a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800710e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80072a8 <_dtoa_r+0x2c0>
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800711a:	eeb0 7b46 	vmov.f64	d7, d6
 800711e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007122:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007126:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800712a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800712e:	ee16 ba90 	vmov	fp, s13
 8007132:	9009      	str	r0, [sp, #36]	; 0x24
 8007134:	d508      	bpl.n	8007148 <_dtoa_r+0x160>
 8007136:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800713a:	eeb4 6b47 	vcmp.f64	d6, d7
 800713e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007142:	bf18      	it	ne
 8007144:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007148:	f1bb 0f16 	cmp.w	fp, #22
 800714c:	d82b      	bhi.n	80071a6 <_dtoa_r+0x1be>
 800714e:	495e      	ldr	r1, [pc, #376]	; (80072c8 <_dtoa_r+0x2e0>)
 8007150:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007154:	ed91 7b00 	vldr	d7, [r1]
 8007158:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800715c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007160:	d501      	bpl.n	8007166 <_dtoa_r+0x17e>
 8007162:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007166:	2100      	movs	r1, #0
 8007168:	e01e      	b.n	80071a8 <_dtoa_r+0x1c0>
 800716a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800716c:	4413      	add	r3, r2
 800716e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8007172:	2920      	cmp	r1, #32
 8007174:	bfc1      	itttt	gt
 8007176:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800717a:	408c      	lslgt	r4, r1
 800717c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8007180:	fa28 f101 	lsrgt.w	r1, r8, r1
 8007184:	bfd6      	itet	le
 8007186:	f1c1 0120 	rsble	r1, r1, #32
 800718a:	4321      	orrgt	r1, r4
 800718c:	fa08 f101 	lslle.w	r1, r8, r1
 8007190:	ee07 1a90 	vmov	s15, r1
 8007194:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007198:	3b01      	subs	r3, #1
 800719a:	ee17 1a90 	vmov	r1, s15
 800719e:	2001      	movs	r0, #1
 80071a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80071a4:	e7a7      	b.n	80070f6 <_dtoa_r+0x10e>
 80071a6:	2101      	movs	r1, #1
 80071a8:	1ad2      	subs	r2, r2, r3
 80071aa:	1e53      	subs	r3, r2, #1
 80071ac:	9305      	str	r3, [sp, #20]
 80071ae:	bf45      	ittet	mi
 80071b0:	f1c2 0301 	rsbmi	r3, r2, #1
 80071b4:	9304      	strmi	r3, [sp, #16]
 80071b6:	2300      	movpl	r3, #0
 80071b8:	2300      	movmi	r3, #0
 80071ba:	bf4c      	ite	mi
 80071bc:	9305      	strmi	r3, [sp, #20]
 80071be:	9304      	strpl	r3, [sp, #16]
 80071c0:	f1bb 0f00 	cmp.w	fp, #0
 80071c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80071c6:	db18      	blt.n	80071fa <_dtoa_r+0x212>
 80071c8:	9b05      	ldr	r3, [sp, #20]
 80071ca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80071ce:	445b      	add	r3, fp
 80071d0:	9305      	str	r3, [sp, #20]
 80071d2:	2300      	movs	r3, #0
 80071d4:	9a06      	ldr	r2, [sp, #24]
 80071d6:	2a09      	cmp	r2, #9
 80071d8:	d848      	bhi.n	800726c <_dtoa_r+0x284>
 80071da:	2a05      	cmp	r2, #5
 80071dc:	bfc4      	itt	gt
 80071de:	3a04      	subgt	r2, #4
 80071e0:	9206      	strgt	r2, [sp, #24]
 80071e2:	9a06      	ldr	r2, [sp, #24]
 80071e4:	f1a2 0202 	sub.w	r2, r2, #2
 80071e8:	bfcc      	ite	gt
 80071ea:	2400      	movgt	r4, #0
 80071ec:	2401      	movle	r4, #1
 80071ee:	2a03      	cmp	r2, #3
 80071f0:	d847      	bhi.n	8007282 <_dtoa_r+0x29a>
 80071f2:	e8df f002 	tbb	[pc, r2]
 80071f6:	2d0b      	.short	0x2d0b
 80071f8:	392b      	.short	0x392b
 80071fa:	9b04      	ldr	r3, [sp, #16]
 80071fc:	2200      	movs	r2, #0
 80071fe:	eba3 030b 	sub.w	r3, r3, fp
 8007202:	9304      	str	r3, [sp, #16]
 8007204:	920a      	str	r2, [sp, #40]	; 0x28
 8007206:	f1cb 0300 	rsb	r3, fp, #0
 800720a:	e7e3      	b.n	80071d4 <_dtoa_r+0x1ec>
 800720c:	2200      	movs	r2, #0
 800720e:	9207      	str	r2, [sp, #28]
 8007210:	9a08      	ldr	r2, [sp, #32]
 8007212:	2a00      	cmp	r2, #0
 8007214:	dc38      	bgt.n	8007288 <_dtoa_r+0x2a0>
 8007216:	f04f 0a01 	mov.w	sl, #1
 800721a:	46d1      	mov	r9, sl
 800721c:	4652      	mov	r2, sl
 800721e:	f8cd a020 	str.w	sl, [sp, #32]
 8007222:	69f7      	ldr	r7, [r6, #28]
 8007224:	2100      	movs	r1, #0
 8007226:	2004      	movs	r0, #4
 8007228:	f100 0c14 	add.w	ip, r0, #20
 800722c:	4594      	cmp	ip, r2
 800722e:	d930      	bls.n	8007292 <_dtoa_r+0x2aa>
 8007230:	6079      	str	r1, [r7, #4]
 8007232:	4630      	mov	r0, r6
 8007234:	930d      	str	r3, [sp, #52]	; 0x34
 8007236:	f000 fd43 	bl	8007cc0 <_Balloc>
 800723a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800723c:	9001      	str	r0, [sp, #4]
 800723e:	4602      	mov	r2, r0
 8007240:	2800      	cmp	r0, #0
 8007242:	d145      	bne.n	80072d0 <_dtoa_r+0x2e8>
 8007244:	4b21      	ldr	r3, [pc, #132]	; (80072cc <_dtoa_r+0x2e4>)
 8007246:	f240 11af 	movw	r1, #431	; 0x1af
 800724a:	e6e5      	b.n	8007018 <_dtoa_r+0x30>
 800724c:	2201      	movs	r2, #1
 800724e:	e7de      	b.n	800720e <_dtoa_r+0x226>
 8007250:	2200      	movs	r2, #0
 8007252:	9207      	str	r2, [sp, #28]
 8007254:	9a08      	ldr	r2, [sp, #32]
 8007256:	eb0b 0a02 	add.w	sl, fp, r2
 800725a:	f10a 0901 	add.w	r9, sl, #1
 800725e:	464a      	mov	r2, r9
 8007260:	2a01      	cmp	r2, #1
 8007262:	bfb8      	it	lt
 8007264:	2201      	movlt	r2, #1
 8007266:	e7dc      	b.n	8007222 <_dtoa_r+0x23a>
 8007268:	2201      	movs	r2, #1
 800726a:	e7f2      	b.n	8007252 <_dtoa_r+0x26a>
 800726c:	2401      	movs	r4, #1
 800726e:	2200      	movs	r2, #0
 8007270:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007274:	f04f 3aff 	mov.w	sl, #4294967295
 8007278:	2100      	movs	r1, #0
 800727a:	46d1      	mov	r9, sl
 800727c:	2212      	movs	r2, #18
 800727e:	9108      	str	r1, [sp, #32]
 8007280:	e7cf      	b.n	8007222 <_dtoa_r+0x23a>
 8007282:	2201      	movs	r2, #1
 8007284:	9207      	str	r2, [sp, #28]
 8007286:	e7f5      	b.n	8007274 <_dtoa_r+0x28c>
 8007288:	f8dd a020 	ldr.w	sl, [sp, #32]
 800728c:	46d1      	mov	r9, sl
 800728e:	4652      	mov	r2, sl
 8007290:	e7c7      	b.n	8007222 <_dtoa_r+0x23a>
 8007292:	3101      	adds	r1, #1
 8007294:	0040      	lsls	r0, r0, #1
 8007296:	e7c7      	b.n	8007228 <_dtoa_r+0x240>
 8007298:	636f4361 	.word	0x636f4361
 800729c:	3fd287a7 	.word	0x3fd287a7
 80072a0:	8b60c8b3 	.word	0x8b60c8b3
 80072a4:	3fc68a28 	.word	0x3fc68a28
 80072a8:	509f79fb 	.word	0x509f79fb
 80072ac:	3fd34413 	.word	0x3fd34413
 80072b0:	08008b05 	.word	0x08008b05
 80072b4:	08008b1c 	.word	0x08008b1c
 80072b8:	7ff00000 	.word	0x7ff00000
 80072bc:	08008b01 	.word	0x08008b01
 80072c0:	08008af8 	.word	0x08008af8
 80072c4:	08008ad5 	.word	0x08008ad5
 80072c8:	08008c08 	.word	0x08008c08
 80072cc:	08008b74 	.word	0x08008b74
 80072d0:	69f2      	ldr	r2, [r6, #28]
 80072d2:	9901      	ldr	r1, [sp, #4]
 80072d4:	6011      	str	r1, [r2, #0]
 80072d6:	f1b9 0f0e 	cmp.w	r9, #14
 80072da:	d86c      	bhi.n	80073b6 <_dtoa_r+0x3ce>
 80072dc:	2c00      	cmp	r4, #0
 80072de:	d06a      	beq.n	80073b6 <_dtoa_r+0x3ce>
 80072e0:	f1bb 0f00 	cmp.w	fp, #0
 80072e4:	f340 80a0 	ble.w	8007428 <_dtoa_r+0x440>
 80072e8:	4ac1      	ldr	r2, [pc, #772]	; (80075f0 <_dtoa_r+0x608>)
 80072ea:	f00b 010f 	and.w	r1, fp, #15
 80072ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80072f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80072f6:	ed92 7b00 	vldr	d7, [r2]
 80072fa:	ea4f 122b 	mov.w	r2, fp, asr #4
 80072fe:	f000 8087 	beq.w	8007410 <_dtoa_r+0x428>
 8007302:	49bc      	ldr	r1, [pc, #752]	; (80075f4 <_dtoa_r+0x60c>)
 8007304:	ed91 6b08 	vldr	d6, [r1, #32]
 8007308:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800730c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007310:	f002 020f 	and.w	r2, r2, #15
 8007314:	2103      	movs	r1, #3
 8007316:	48b7      	ldr	r0, [pc, #732]	; (80075f4 <_dtoa_r+0x60c>)
 8007318:	2a00      	cmp	r2, #0
 800731a:	d17b      	bne.n	8007414 <_dtoa_r+0x42c>
 800731c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007320:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007324:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800732a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800732e:	2a00      	cmp	r2, #0
 8007330:	f000 80a0 	beq.w	8007474 <_dtoa_r+0x48c>
 8007334:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007338:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800733c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007340:	f140 8098 	bpl.w	8007474 <_dtoa_r+0x48c>
 8007344:	f1b9 0f00 	cmp.w	r9, #0
 8007348:	f000 8094 	beq.w	8007474 <_dtoa_r+0x48c>
 800734c:	f1ba 0f00 	cmp.w	sl, #0
 8007350:	dd2f      	ble.n	80073b2 <_dtoa_r+0x3ca>
 8007352:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007356:	ee27 7b06 	vmul.f64	d7, d7, d6
 800735a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800735e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007362:	3101      	adds	r1, #1
 8007364:	4654      	mov	r4, sl
 8007366:	ed9d 6b02 	vldr	d6, [sp, #8]
 800736a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800736e:	ee07 1a90 	vmov	s15, r1
 8007372:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007376:	eea7 5b06 	vfma.f64	d5, d7, d6
 800737a:	ee15 7a90 	vmov	r7, s11
 800737e:	ec51 0b15 	vmov	r0, r1, d5
 8007382:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8007386:	2c00      	cmp	r4, #0
 8007388:	d177      	bne.n	800747a <_dtoa_r+0x492>
 800738a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800738e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007392:	ec41 0b17 	vmov	d7, r0, r1
 8007396:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800739a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739e:	f300 826a 	bgt.w	8007876 <_dtoa_r+0x88e>
 80073a2:	eeb1 7b47 	vneg.f64	d7, d7
 80073a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80073aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ae:	f100 8260 	bmi.w	8007872 <_dtoa_r+0x88a>
 80073b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80073b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073b8:	2a00      	cmp	r2, #0
 80073ba:	f2c0 811d 	blt.w	80075f8 <_dtoa_r+0x610>
 80073be:	f1bb 0f0e 	cmp.w	fp, #14
 80073c2:	f300 8119 	bgt.w	80075f8 <_dtoa_r+0x610>
 80073c6:	4b8a      	ldr	r3, [pc, #552]	; (80075f0 <_dtoa_r+0x608>)
 80073c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80073cc:	ed93 6b00 	vldr	d6, [r3]
 80073d0:	9b08      	ldr	r3, [sp, #32]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f280 80b7 	bge.w	8007546 <_dtoa_r+0x55e>
 80073d8:	f1b9 0f00 	cmp.w	r9, #0
 80073dc:	f300 80b3 	bgt.w	8007546 <_dtoa_r+0x55e>
 80073e0:	f040 8246 	bne.w	8007870 <_dtoa_r+0x888>
 80073e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80073e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80073ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80073f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f8:	464c      	mov	r4, r9
 80073fa:	464f      	mov	r7, r9
 80073fc:	f280 821c 	bge.w	8007838 <_dtoa_r+0x850>
 8007400:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007404:	2331      	movs	r3, #49	; 0x31
 8007406:	f808 3b01 	strb.w	r3, [r8], #1
 800740a:	f10b 0b01 	add.w	fp, fp, #1
 800740e:	e218      	b.n	8007842 <_dtoa_r+0x85a>
 8007410:	2102      	movs	r1, #2
 8007412:	e780      	b.n	8007316 <_dtoa_r+0x32e>
 8007414:	07d4      	lsls	r4, r2, #31
 8007416:	d504      	bpl.n	8007422 <_dtoa_r+0x43a>
 8007418:	ed90 6b00 	vldr	d6, [r0]
 800741c:	3101      	adds	r1, #1
 800741e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007422:	1052      	asrs	r2, r2, #1
 8007424:	3008      	adds	r0, #8
 8007426:	e777      	b.n	8007318 <_dtoa_r+0x330>
 8007428:	d022      	beq.n	8007470 <_dtoa_r+0x488>
 800742a:	f1cb 0200 	rsb	r2, fp, #0
 800742e:	4970      	ldr	r1, [pc, #448]	; (80075f0 <_dtoa_r+0x608>)
 8007430:	f002 000f 	and.w	r0, r2, #15
 8007434:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007438:	ed91 7b00 	vldr	d7, [r1]
 800743c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007440:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007444:	486b      	ldr	r0, [pc, #428]	; (80075f4 <_dtoa_r+0x60c>)
 8007446:	1112      	asrs	r2, r2, #4
 8007448:	2400      	movs	r4, #0
 800744a:	2102      	movs	r1, #2
 800744c:	b92a      	cbnz	r2, 800745a <_dtoa_r+0x472>
 800744e:	2c00      	cmp	r4, #0
 8007450:	f43f af6a 	beq.w	8007328 <_dtoa_r+0x340>
 8007454:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007458:	e766      	b.n	8007328 <_dtoa_r+0x340>
 800745a:	07d7      	lsls	r7, r2, #31
 800745c:	d505      	bpl.n	800746a <_dtoa_r+0x482>
 800745e:	ed90 6b00 	vldr	d6, [r0]
 8007462:	3101      	adds	r1, #1
 8007464:	2401      	movs	r4, #1
 8007466:	ee27 7b06 	vmul.f64	d7, d7, d6
 800746a:	1052      	asrs	r2, r2, #1
 800746c:	3008      	adds	r0, #8
 800746e:	e7ed      	b.n	800744c <_dtoa_r+0x464>
 8007470:	2102      	movs	r1, #2
 8007472:	e759      	b.n	8007328 <_dtoa_r+0x340>
 8007474:	465a      	mov	r2, fp
 8007476:	464c      	mov	r4, r9
 8007478:	e775      	b.n	8007366 <_dtoa_r+0x37e>
 800747a:	ec41 0b17 	vmov	d7, r0, r1
 800747e:	495c      	ldr	r1, [pc, #368]	; (80075f0 <_dtoa_r+0x608>)
 8007480:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007484:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007488:	9901      	ldr	r1, [sp, #4]
 800748a:	440c      	add	r4, r1
 800748c:	9907      	ldr	r1, [sp, #28]
 800748e:	b351      	cbz	r1, 80074e6 <_dtoa_r+0x4fe>
 8007490:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007494:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007498:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800749c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80074a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80074a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80074a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80074ac:	ee14 1a90 	vmov	r1, s9
 80074b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80074b4:	3130      	adds	r1, #48	; 0x30
 80074b6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80074ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80074be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c2:	f808 1b01 	strb.w	r1, [r8], #1
 80074c6:	d439      	bmi.n	800753c <_dtoa_r+0x554>
 80074c8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80074cc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80074d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d4:	d472      	bmi.n	80075bc <_dtoa_r+0x5d4>
 80074d6:	45a0      	cmp	r8, r4
 80074d8:	f43f af6b 	beq.w	80073b2 <_dtoa_r+0x3ca>
 80074dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80074e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80074e4:	e7e0      	b.n	80074a8 <_dtoa_r+0x4c0>
 80074e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80074ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 80074ee:	4620      	mov	r0, r4
 80074f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80074f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80074f8:	ee14 1a90 	vmov	r1, s9
 80074fc:	3130      	adds	r1, #48	; 0x30
 80074fe:	f808 1b01 	strb.w	r1, [r8], #1
 8007502:	45a0      	cmp	r8, r4
 8007504:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007508:	ee36 6b45 	vsub.f64	d6, d6, d5
 800750c:	d118      	bne.n	8007540 <_dtoa_r+0x558>
 800750e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007512:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007516:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800751a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751e:	dc4d      	bgt.n	80075bc <_dtoa_r+0x5d4>
 8007520:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007524:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800752c:	f57f af41 	bpl.w	80073b2 <_dtoa_r+0x3ca>
 8007530:	4680      	mov	r8, r0
 8007532:	3801      	subs	r0, #1
 8007534:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007538:	2b30      	cmp	r3, #48	; 0x30
 800753a:	d0f9      	beq.n	8007530 <_dtoa_r+0x548>
 800753c:	4693      	mov	fp, r2
 800753e:	e02a      	b.n	8007596 <_dtoa_r+0x5ae>
 8007540:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007544:	e7d6      	b.n	80074f4 <_dtoa_r+0x50c>
 8007546:	ed9d 7b02 	vldr	d7, [sp, #8]
 800754a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800754e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007552:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007556:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800755a:	ee15 3a10 	vmov	r3, s10
 800755e:	3330      	adds	r3, #48	; 0x30
 8007560:	f808 3b01 	strb.w	r3, [r8], #1
 8007564:	9b01      	ldr	r3, [sp, #4]
 8007566:	eba8 0303 	sub.w	r3, r8, r3
 800756a:	4599      	cmp	r9, r3
 800756c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007570:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007574:	d133      	bne.n	80075de <_dtoa_r+0x5f6>
 8007576:	ee37 7b07 	vadd.f64	d7, d7, d7
 800757a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800757e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007582:	dc1a      	bgt.n	80075ba <_dtoa_r+0x5d2>
 8007584:	eeb4 7b46 	vcmp.f64	d7, d6
 8007588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758c:	d103      	bne.n	8007596 <_dtoa_r+0x5ae>
 800758e:	ee15 3a10 	vmov	r3, s10
 8007592:	07d9      	lsls	r1, r3, #31
 8007594:	d411      	bmi.n	80075ba <_dtoa_r+0x5d2>
 8007596:	4629      	mov	r1, r5
 8007598:	4630      	mov	r0, r6
 800759a:	f000 fbd1 	bl	8007d40 <_Bfree>
 800759e:	2300      	movs	r3, #0
 80075a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075a2:	f888 3000 	strb.w	r3, [r8]
 80075a6:	f10b 0301 	add.w	r3, fp, #1
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f43f ad69 	beq.w	8007086 <_dtoa_r+0x9e>
 80075b4:	f8c3 8000 	str.w	r8, [r3]
 80075b8:	e565      	b.n	8007086 <_dtoa_r+0x9e>
 80075ba:	465a      	mov	r2, fp
 80075bc:	4643      	mov	r3, r8
 80075be:	4698      	mov	r8, r3
 80075c0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80075c4:	2939      	cmp	r1, #57	; 0x39
 80075c6:	d106      	bne.n	80075d6 <_dtoa_r+0x5ee>
 80075c8:	9901      	ldr	r1, [sp, #4]
 80075ca:	4299      	cmp	r1, r3
 80075cc:	d1f7      	bne.n	80075be <_dtoa_r+0x5d6>
 80075ce:	9801      	ldr	r0, [sp, #4]
 80075d0:	2130      	movs	r1, #48	; 0x30
 80075d2:	3201      	adds	r2, #1
 80075d4:	7001      	strb	r1, [r0, #0]
 80075d6:	7819      	ldrb	r1, [r3, #0]
 80075d8:	3101      	adds	r1, #1
 80075da:	7019      	strb	r1, [r3, #0]
 80075dc:	e7ae      	b.n	800753c <_dtoa_r+0x554>
 80075de:	ee27 7b04 	vmul.f64	d7, d7, d4
 80075e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80075e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ea:	d1b2      	bne.n	8007552 <_dtoa_r+0x56a>
 80075ec:	e7d3      	b.n	8007596 <_dtoa_r+0x5ae>
 80075ee:	bf00      	nop
 80075f0:	08008c08 	.word	0x08008c08
 80075f4:	08008be0 	.word	0x08008be0
 80075f8:	9907      	ldr	r1, [sp, #28]
 80075fa:	2900      	cmp	r1, #0
 80075fc:	f000 80d0 	beq.w	80077a0 <_dtoa_r+0x7b8>
 8007600:	9906      	ldr	r1, [sp, #24]
 8007602:	2901      	cmp	r1, #1
 8007604:	f300 80b4 	bgt.w	8007770 <_dtoa_r+0x788>
 8007608:	9909      	ldr	r1, [sp, #36]	; 0x24
 800760a:	2900      	cmp	r1, #0
 800760c:	f000 80ac 	beq.w	8007768 <_dtoa_r+0x780>
 8007610:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007614:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007618:	461c      	mov	r4, r3
 800761a:	9309      	str	r3, [sp, #36]	; 0x24
 800761c:	9b04      	ldr	r3, [sp, #16]
 800761e:	4413      	add	r3, r2
 8007620:	9304      	str	r3, [sp, #16]
 8007622:	9b05      	ldr	r3, [sp, #20]
 8007624:	2101      	movs	r1, #1
 8007626:	4413      	add	r3, r2
 8007628:	4630      	mov	r0, r6
 800762a:	9305      	str	r3, [sp, #20]
 800762c:	f000 fc3e 	bl	8007eac <__i2b>
 8007630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007632:	4607      	mov	r7, r0
 8007634:	f1b8 0f00 	cmp.w	r8, #0
 8007638:	d00d      	beq.n	8007656 <_dtoa_r+0x66e>
 800763a:	9a05      	ldr	r2, [sp, #20]
 800763c:	2a00      	cmp	r2, #0
 800763e:	dd0a      	ble.n	8007656 <_dtoa_r+0x66e>
 8007640:	4542      	cmp	r2, r8
 8007642:	9904      	ldr	r1, [sp, #16]
 8007644:	bfa8      	it	ge
 8007646:	4642      	movge	r2, r8
 8007648:	1a89      	subs	r1, r1, r2
 800764a:	9104      	str	r1, [sp, #16]
 800764c:	9905      	ldr	r1, [sp, #20]
 800764e:	eba8 0802 	sub.w	r8, r8, r2
 8007652:	1a8a      	subs	r2, r1, r2
 8007654:	9205      	str	r2, [sp, #20]
 8007656:	b303      	cbz	r3, 800769a <_dtoa_r+0x6b2>
 8007658:	9a07      	ldr	r2, [sp, #28]
 800765a:	2a00      	cmp	r2, #0
 800765c:	f000 80a5 	beq.w	80077aa <_dtoa_r+0x7c2>
 8007660:	2c00      	cmp	r4, #0
 8007662:	dd13      	ble.n	800768c <_dtoa_r+0x6a4>
 8007664:	4639      	mov	r1, r7
 8007666:	4622      	mov	r2, r4
 8007668:	4630      	mov	r0, r6
 800766a:	930d      	str	r3, [sp, #52]	; 0x34
 800766c:	f000 fcde 	bl	800802c <__pow5mult>
 8007670:	462a      	mov	r2, r5
 8007672:	4601      	mov	r1, r0
 8007674:	4607      	mov	r7, r0
 8007676:	4630      	mov	r0, r6
 8007678:	f000 fc2e 	bl	8007ed8 <__multiply>
 800767c:	4629      	mov	r1, r5
 800767e:	9009      	str	r0, [sp, #36]	; 0x24
 8007680:	4630      	mov	r0, r6
 8007682:	f000 fb5d 	bl	8007d40 <_Bfree>
 8007686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800768a:	4615      	mov	r5, r2
 800768c:	1b1a      	subs	r2, r3, r4
 800768e:	d004      	beq.n	800769a <_dtoa_r+0x6b2>
 8007690:	4629      	mov	r1, r5
 8007692:	4630      	mov	r0, r6
 8007694:	f000 fcca 	bl	800802c <__pow5mult>
 8007698:	4605      	mov	r5, r0
 800769a:	2101      	movs	r1, #1
 800769c:	4630      	mov	r0, r6
 800769e:	f000 fc05 	bl	8007eac <__i2b>
 80076a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	4604      	mov	r4, r0
 80076a8:	f340 8081 	ble.w	80077ae <_dtoa_r+0x7c6>
 80076ac:	461a      	mov	r2, r3
 80076ae:	4601      	mov	r1, r0
 80076b0:	4630      	mov	r0, r6
 80076b2:	f000 fcbb 	bl	800802c <__pow5mult>
 80076b6:	9b06      	ldr	r3, [sp, #24]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	4604      	mov	r4, r0
 80076bc:	dd7a      	ble.n	80077b4 <_dtoa_r+0x7cc>
 80076be:	2300      	movs	r3, #0
 80076c0:	9309      	str	r3, [sp, #36]	; 0x24
 80076c2:	6922      	ldr	r2, [r4, #16]
 80076c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80076c8:	6910      	ldr	r0, [r2, #16]
 80076ca:	f000 fba1 	bl	8007e10 <__hi0bits>
 80076ce:	f1c0 0020 	rsb	r0, r0, #32
 80076d2:	9b05      	ldr	r3, [sp, #20]
 80076d4:	4418      	add	r0, r3
 80076d6:	f010 001f 	ands.w	r0, r0, #31
 80076da:	f000 8093 	beq.w	8007804 <_dtoa_r+0x81c>
 80076de:	f1c0 0220 	rsb	r2, r0, #32
 80076e2:	2a04      	cmp	r2, #4
 80076e4:	f340 8085 	ble.w	80077f2 <_dtoa_r+0x80a>
 80076e8:	9b04      	ldr	r3, [sp, #16]
 80076ea:	f1c0 001c 	rsb	r0, r0, #28
 80076ee:	4403      	add	r3, r0
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	9b05      	ldr	r3, [sp, #20]
 80076f4:	4480      	add	r8, r0
 80076f6:	4403      	add	r3, r0
 80076f8:	9305      	str	r3, [sp, #20]
 80076fa:	9b04      	ldr	r3, [sp, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	dd05      	ble.n	800770c <_dtoa_r+0x724>
 8007700:	4629      	mov	r1, r5
 8007702:	461a      	mov	r2, r3
 8007704:	4630      	mov	r0, r6
 8007706:	f000 fceb 	bl	80080e0 <__lshift>
 800770a:	4605      	mov	r5, r0
 800770c:	9b05      	ldr	r3, [sp, #20]
 800770e:	2b00      	cmp	r3, #0
 8007710:	dd05      	ble.n	800771e <_dtoa_r+0x736>
 8007712:	4621      	mov	r1, r4
 8007714:	461a      	mov	r2, r3
 8007716:	4630      	mov	r0, r6
 8007718:	f000 fce2 	bl	80080e0 <__lshift>
 800771c:	4604      	mov	r4, r0
 800771e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007720:	2b00      	cmp	r3, #0
 8007722:	d071      	beq.n	8007808 <_dtoa_r+0x820>
 8007724:	4621      	mov	r1, r4
 8007726:	4628      	mov	r0, r5
 8007728:	f000 fd46 	bl	80081b8 <__mcmp>
 800772c:	2800      	cmp	r0, #0
 800772e:	da6b      	bge.n	8007808 <_dtoa_r+0x820>
 8007730:	2300      	movs	r3, #0
 8007732:	4629      	mov	r1, r5
 8007734:	220a      	movs	r2, #10
 8007736:	4630      	mov	r0, r6
 8007738:	f000 fb24 	bl	8007d84 <__multadd>
 800773c:	9b07      	ldr	r3, [sp, #28]
 800773e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007742:	4605      	mov	r5, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 8197 	beq.w	8007a78 <_dtoa_r+0xa90>
 800774a:	4639      	mov	r1, r7
 800774c:	2300      	movs	r3, #0
 800774e:	220a      	movs	r2, #10
 8007750:	4630      	mov	r0, r6
 8007752:	f000 fb17 	bl	8007d84 <__multadd>
 8007756:	f1ba 0f00 	cmp.w	sl, #0
 800775a:	4607      	mov	r7, r0
 800775c:	f300 8093 	bgt.w	8007886 <_dtoa_r+0x89e>
 8007760:	9b06      	ldr	r3, [sp, #24]
 8007762:	2b02      	cmp	r3, #2
 8007764:	dc57      	bgt.n	8007816 <_dtoa_r+0x82e>
 8007766:	e08e      	b.n	8007886 <_dtoa_r+0x89e>
 8007768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800776a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800776e:	e751      	b.n	8007614 <_dtoa_r+0x62c>
 8007770:	f109 34ff 	add.w	r4, r9, #4294967295
 8007774:	42a3      	cmp	r3, r4
 8007776:	bfbf      	itttt	lt
 8007778:	1ae2      	sublt	r2, r4, r3
 800777a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800777c:	189b      	addlt	r3, r3, r2
 800777e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007780:	bfae      	itee	ge
 8007782:	1b1c      	subge	r4, r3, r4
 8007784:	4623      	movlt	r3, r4
 8007786:	2400      	movlt	r4, #0
 8007788:	f1b9 0f00 	cmp.w	r9, #0
 800778c:	bfb5      	itete	lt
 800778e:	9a04      	ldrlt	r2, [sp, #16]
 8007790:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007794:	eba2 0809 	sublt.w	r8, r2, r9
 8007798:	464a      	movge	r2, r9
 800779a:	bfb8      	it	lt
 800779c:	2200      	movlt	r2, #0
 800779e:	e73c      	b.n	800761a <_dtoa_r+0x632>
 80077a0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80077a4:	9f07      	ldr	r7, [sp, #28]
 80077a6:	461c      	mov	r4, r3
 80077a8:	e744      	b.n	8007634 <_dtoa_r+0x64c>
 80077aa:	461a      	mov	r2, r3
 80077ac:	e770      	b.n	8007690 <_dtoa_r+0x6a8>
 80077ae:	9b06      	ldr	r3, [sp, #24]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	dc18      	bgt.n	80077e6 <_dtoa_r+0x7fe>
 80077b4:	9b02      	ldr	r3, [sp, #8]
 80077b6:	b9b3      	cbnz	r3, 80077e6 <_dtoa_r+0x7fe>
 80077b8:	9b03      	ldr	r3, [sp, #12]
 80077ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80077be:	b9a2      	cbnz	r2, 80077ea <_dtoa_r+0x802>
 80077c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80077c4:	0d12      	lsrs	r2, r2, #20
 80077c6:	0512      	lsls	r2, r2, #20
 80077c8:	b18a      	cbz	r2, 80077ee <_dtoa_r+0x806>
 80077ca:	9b04      	ldr	r3, [sp, #16]
 80077cc:	3301      	adds	r3, #1
 80077ce:	9304      	str	r3, [sp, #16]
 80077d0:	9b05      	ldr	r3, [sp, #20]
 80077d2:	3301      	adds	r3, #1
 80077d4:	9305      	str	r3, [sp, #20]
 80077d6:	2301      	movs	r3, #1
 80077d8:	9309      	str	r3, [sp, #36]	; 0x24
 80077da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f47f af70 	bne.w	80076c2 <_dtoa_r+0x6da>
 80077e2:	2001      	movs	r0, #1
 80077e4:	e775      	b.n	80076d2 <_dtoa_r+0x6ea>
 80077e6:	2300      	movs	r3, #0
 80077e8:	e7f6      	b.n	80077d8 <_dtoa_r+0x7f0>
 80077ea:	9b02      	ldr	r3, [sp, #8]
 80077ec:	e7f4      	b.n	80077d8 <_dtoa_r+0x7f0>
 80077ee:	9209      	str	r2, [sp, #36]	; 0x24
 80077f0:	e7f3      	b.n	80077da <_dtoa_r+0x7f2>
 80077f2:	d082      	beq.n	80076fa <_dtoa_r+0x712>
 80077f4:	9b04      	ldr	r3, [sp, #16]
 80077f6:	321c      	adds	r2, #28
 80077f8:	4413      	add	r3, r2
 80077fa:	9304      	str	r3, [sp, #16]
 80077fc:	9b05      	ldr	r3, [sp, #20]
 80077fe:	4490      	add	r8, r2
 8007800:	4413      	add	r3, r2
 8007802:	e779      	b.n	80076f8 <_dtoa_r+0x710>
 8007804:	4602      	mov	r2, r0
 8007806:	e7f5      	b.n	80077f4 <_dtoa_r+0x80c>
 8007808:	f1b9 0f00 	cmp.w	r9, #0
 800780c:	dc36      	bgt.n	800787c <_dtoa_r+0x894>
 800780e:	9b06      	ldr	r3, [sp, #24]
 8007810:	2b02      	cmp	r3, #2
 8007812:	dd33      	ble.n	800787c <_dtoa_r+0x894>
 8007814:	46ca      	mov	sl, r9
 8007816:	f1ba 0f00 	cmp.w	sl, #0
 800781a:	d10d      	bne.n	8007838 <_dtoa_r+0x850>
 800781c:	4621      	mov	r1, r4
 800781e:	4653      	mov	r3, sl
 8007820:	2205      	movs	r2, #5
 8007822:	4630      	mov	r0, r6
 8007824:	f000 faae 	bl	8007d84 <__multadd>
 8007828:	4601      	mov	r1, r0
 800782a:	4604      	mov	r4, r0
 800782c:	4628      	mov	r0, r5
 800782e:	f000 fcc3 	bl	80081b8 <__mcmp>
 8007832:	2800      	cmp	r0, #0
 8007834:	f73f ade4 	bgt.w	8007400 <_dtoa_r+0x418>
 8007838:	9b08      	ldr	r3, [sp, #32]
 800783a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800783e:	ea6f 0b03 	mvn.w	fp, r3
 8007842:	f04f 0900 	mov.w	r9, #0
 8007846:	4621      	mov	r1, r4
 8007848:	4630      	mov	r0, r6
 800784a:	f000 fa79 	bl	8007d40 <_Bfree>
 800784e:	2f00      	cmp	r7, #0
 8007850:	f43f aea1 	beq.w	8007596 <_dtoa_r+0x5ae>
 8007854:	f1b9 0f00 	cmp.w	r9, #0
 8007858:	d005      	beq.n	8007866 <_dtoa_r+0x87e>
 800785a:	45b9      	cmp	r9, r7
 800785c:	d003      	beq.n	8007866 <_dtoa_r+0x87e>
 800785e:	4649      	mov	r1, r9
 8007860:	4630      	mov	r0, r6
 8007862:	f000 fa6d 	bl	8007d40 <_Bfree>
 8007866:	4639      	mov	r1, r7
 8007868:	4630      	mov	r0, r6
 800786a:	f000 fa69 	bl	8007d40 <_Bfree>
 800786e:	e692      	b.n	8007596 <_dtoa_r+0x5ae>
 8007870:	2400      	movs	r4, #0
 8007872:	4627      	mov	r7, r4
 8007874:	e7e0      	b.n	8007838 <_dtoa_r+0x850>
 8007876:	4693      	mov	fp, r2
 8007878:	4627      	mov	r7, r4
 800787a:	e5c1      	b.n	8007400 <_dtoa_r+0x418>
 800787c:	9b07      	ldr	r3, [sp, #28]
 800787e:	46ca      	mov	sl, r9
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 8100 	beq.w	8007a86 <_dtoa_r+0xa9e>
 8007886:	f1b8 0f00 	cmp.w	r8, #0
 800788a:	dd05      	ble.n	8007898 <_dtoa_r+0x8b0>
 800788c:	4639      	mov	r1, r7
 800788e:	4642      	mov	r2, r8
 8007890:	4630      	mov	r0, r6
 8007892:	f000 fc25 	bl	80080e0 <__lshift>
 8007896:	4607      	mov	r7, r0
 8007898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800789a:	2b00      	cmp	r3, #0
 800789c:	d05d      	beq.n	800795a <_dtoa_r+0x972>
 800789e:	6879      	ldr	r1, [r7, #4]
 80078a0:	4630      	mov	r0, r6
 80078a2:	f000 fa0d 	bl	8007cc0 <_Balloc>
 80078a6:	4680      	mov	r8, r0
 80078a8:	b928      	cbnz	r0, 80078b6 <_dtoa_r+0x8ce>
 80078aa:	4b82      	ldr	r3, [pc, #520]	; (8007ab4 <_dtoa_r+0xacc>)
 80078ac:	4602      	mov	r2, r0
 80078ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80078b2:	f7ff bbb1 	b.w	8007018 <_dtoa_r+0x30>
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	3202      	adds	r2, #2
 80078ba:	0092      	lsls	r2, r2, #2
 80078bc:	f107 010c 	add.w	r1, r7, #12
 80078c0:	300c      	adds	r0, #12
 80078c2:	f000 ffff 	bl	80088c4 <memcpy>
 80078c6:	2201      	movs	r2, #1
 80078c8:	4641      	mov	r1, r8
 80078ca:	4630      	mov	r0, r6
 80078cc:	f000 fc08 	bl	80080e0 <__lshift>
 80078d0:	9b01      	ldr	r3, [sp, #4]
 80078d2:	3301      	adds	r3, #1
 80078d4:	9304      	str	r3, [sp, #16]
 80078d6:	9b01      	ldr	r3, [sp, #4]
 80078d8:	4453      	add	r3, sl
 80078da:	9308      	str	r3, [sp, #32]
 80078dc:	9b02      	ldr	r3, [sp, #8]
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	46b9      	mov	r9, r7
 80078e4:	9307      	str	r3, [sp, #28]
 80078e6:	4607      	mov	r7, r0
 80078e8:	9b04      	ldr	r3, [sp, #16]
 80078ea:	4621      	mov	r1, r4
 80078ec:	3b01      	subs	r3, #1
 80078ee:	4628      	mov	r0, r5
 80078f0:	9302      	str	r3, [sp, #8]
 80078f2:	f7ff faee 	bl	8006ed2 <quorem>
 80078f6:	4603      	mov	r3, r0
 80078f8:	3330      	adds	r3, #48	; 0x30
 80078fa:	9005      	str	r0, [sp, #20]
 80078fc:	4649      	mov	r1, r9
 80078fe:	4628      	mov	r0, r5
 8007900:	9309      	str	r3, [sp, #36]	; 0x24
 8007902:	f000 fc59 	bl	80081b8 <__mcmp>
 8007906:	463a      	mov	r2, r7
 8007908:	4682      	mov	sl, r0
 800790a:	4621      	mov	r1, r4
 800790c:	4630      	mov	r0, r6
 800790e:	f000 fc6f 	bl	80081f0 <__mdiff>
 8007912:	68c2      	ldr	r2, [r0, #12]
 8007914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007916:	4680      	mov	r8, r0
 8007918:	bb0a      	cbnz	r2, 800795e <_dtoa_r+0x976>
 800791a:	4601      	mov	r1, r0
 800791c:	4628      	mov	r0, r5
 800791e:	f000 fc4b 	bl	80081b8 <__mcmp>
 8007922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007924:	4602      	mov	r2, r0
 8007926:	4641      	mov	r1, r8
 8007928:	4630      	mov	r0, r6
 800792a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800792e:	f000 fa07 	bl	8007d40 <_Bfree>
 8007932:	9b06      	ldr	r3, [sp, #24]
 8007934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007936:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800793a:	ea43 0102 	orr.w	r1, r3, r2
 800793e:	9b07      	ldr	r3, [sp, #28]
 8007940:	4319      	orrs	r1, r3
 8007942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007944:	d10d      	bne.n	8007962 <_dtoa_r+0x97a>
 8007946:	2b39      	cmp	r3, #57	; 0x39
 8007948:	d029      	beq.n	800799e <_dtoa_r+0x9b6>
 800794a:	f1ba 0f00 	cmp.w	sl, #0
 800794e:	dd01      	ble.n	8007954 <_dtoa_r+0x96c>
 8007950:	9b05      	ldr	r3, [sp, #20]
 8007952:	3331      	adds	r3, #49	; 0x31
 8007954:	9a02      	ldr	r2, [sp, #8]
 8007956:	7013      	strb	r3, [r2, #0]
 8007958:	e775      	b.n	8007846 <_dtoa_r+0x85e>
 800795a:	4638      	mov	r0, r7
 800795c:	e7b8      	b.n	80078d0 <_dtoa_r+0x8e8>
 800795e:	2201      	movs	r2, #1
 8007960:	e7e1      	b.n	8007926 <_dtoa_r+0x93e>
 8007962:	f1ba 0f00 	cmp.w	sl, #0
 8007966:	db06      	blt.n	8007976 <_dtoa_r+0x98e>
 8007968:	9906      	ldr	r1, [sp, #24]
 800796a:	ea41 0a0a 	orr.w	sl, r1, sl
 800796e:	9907      	ldr	r1, [sp, #28]
 8007970:	ea5a 0a01 	orrs.w	sl, sl, r1
 8007974:	d120      	bne.n	80079b8 <_dtoa_r+0x9d0>
 8007976:	2a00      	cmp	r2, #0
 8007978:	ddec      	ble.n	8007954 <_dtoa_r+0x96c>
 800797a:	4629      	mov	r1, r5
 800797c:	2201      	movs	r2, #1
 800797e:	4630      	mov	r0, r6
 8007980:	9304      	str	r3, [sp, #16]
 8007982:	f000 fbad 	bl	80080e0 <__lshift>
 8007986:	4621      	mov	r1, r4
 8007988:	4605      	mov	r5, r0
 800798a:	f000 fc15 	bl	80081b8 <__mcmp>
 800798e:	2800      	cmp	r0, #0
 8007990:	9b04      	ldr	r3, [sp, #16]
 8007992:	dc02      	bgt.n	800799a <_dtoa_r+0x9b2>
 8007994:	d1de      	bne.n	8007954 <_dtoa_r+0x96c>
 8007996:	07da      	lsls	r2, r3, #31
 8007998:	d5dc      	bpl.n	8007954 <_dtoa_r+0x96c>
 800799a:	2b39      	cmp	r3, #57	; 0x39
 800799c:	d1d8      	bne.n	8007950 <_dtoa_r+0x968>
 800799e:	9a02      	ldr	r2, [sp, #8]
 80079a0:	2339      	movs	r3, #57	; 0x39
 80079a2:	7013      	strb	r3, [r2, #0]
 80079a4:	4643      	mov	r3, r8
 80079a6:	4698      	mov	r8, r3
 80079a8:	3b01      	subs	r3, #1
 80079aa:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80079ae:	2a39      	cmp	r2, #57	; 0x39
 80079b0:	d051      	beq.n	8007a56 <_dtoa_r+0xa6e>
 80079b2:	3201      	adds	r2, #1
 80079b4:	701a      	strb	r2, [r3, #0]
 80079b6:	e746      	b.n	8007846 <_dtoa_r+0x85e>
 80079b8:	2a00      	cmp	r2, #0
 80079ba:	dd03      	ble.n	80079c4 <_dtoa_r+0x9dc>
 80079bc:	2b39      	cmp	r3, #57	; 0x39
 80079be:	d0ee      	beq.n	800799e <_dtoa_r+0x9b6>
 80079c0:	3301      	adds	r3, #1
 80079c2:	e7c7      	b.n	8007954 <_dtoa_r+0x96c>
 80079c4:	9a04      	ldr	r2, [sp, #16]
 80079c6:	9908      	ldr	r1, [sp, #32]
 80079c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80079cc:	428a      	cmp	r2, r1
 80079ce:	d02b      	beq.n	8007a28 <_dtoa_r+0xa40>
 80079d0:	4629      	mov	r1, r5
 80079d2:	2300      	movs	r3, #0
 80079d4:	220a      	movs	r2, #10
 80079d6:	4630      	mov	r0, r6
 80079d8:	f000 f9d4 	bl	8007d84 <__multadd>
 80079dc:	45b9      	cmp	r9, r7
 80079de:	4605      	mov	r5, r0
 80079e0:	f04f 0300 	mov.w	r3, #0
 80079e4:	f04f 020a 	mov.w	r2, #10
 80079e8:	4649      	mov	r1, r9
 80079ea:	4630      	mov	r0, r6
 80079ec:	d107      	bne.n	80079fe <_dtoa_r+0xa16>
 80079ee:	f000 f9c9 	bl	8007d84 <__multadd>
 80079f2:	4681      	mov	r9, r0
 80079f4:	4607      	mov	r7, r0
 80079f6:	9b04      	ldr	r3, [sp, #16]
 80079f8:	3301      	adds	r3, #1
 80079fa:	9304      	str	r3, [sp, #16]
 80079fc:	e774      	b.n	80078e8 <_dtoa_r+0x900>
 80079fe:	f000 f9c1 	bl	8007d84 <__multadd>
 8007a02:	4639      	mov	r1, r7
 8007a04:	4681      	mov	r9, r0
 8007a06:	2300      	movs	r3, #0
 8007a08:	220a      	movs	r2, #10
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f000 f9ba 	bl	8007d84 <__multadd>
 8007a10:	4607      	mov	r7, r0
 8007a12:	e7f0      	b.n	80079f6 <_dtoa_r+0xa0e>
 8007a14:	f1ba 0f00 	cmp.w	sl, #0
 8007a18:	9a01      	ldr	r2, [sp, #4]
 8007a1a:	bfcc      	ite	gt
 8007a1c:	46d0      	movgt	r8, sl
 8007a1e:	f04f 0801 	movle.w	r8, #1
 8007a22:	4490      	add	r8, r2
 8007a24:	f04f 0900 	mov.w	r9, #0
 8007a28:	4629      	mov	r1, r5
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	9302      	str	r3, [sp, #8]
 8007a30:	f000 fb56 	bl	80080e0 <__lshift>
 8007a34:	4621      	mov	r1, r4
 8007a36:	4605      	mov	r5, r0
 8007a38:	f000 fbbe 	bl	80081b8 <__mcmp>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	dcb1      	bgt.n	80079a4 <_dtoa_r+0x9bc>
 8007a40:	d102      	bne.n	8007a48 <_dtoa_r+0xa60>
 8007a42:	9b02      	ldr	r3, [sp, #8]
 8007a44:	07db      	lsls	r3, r3, #31
 8007a46:	d4ad      	bmi.n	80079a4 <_dtoa_r+0x9bc>
 8007a48:	4643      	mov	r3, r8
 8007a4a:	4698      	mov	r8, r3
 8007a4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a50:	2a30      	cmp	r2, #48	; 0x30
 8007a52:	d0fa      	beq.n	8007a4a <_dtoa_r+0xa62>
 8007a54:	e6f7      	b.n	8007846 <_dtoa_r+0x85e>
 8007a56:	9a01      	ldr	r2, [sp, #4]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d1a4      	bne.n	80079a6 <_dtoa_r+0x9be>
 8007a5c:	f10b 0b01 	add.w	fp, fp, #1
 8007a60:	2331      	movs	r3, #49	; 0x31
 8007a62:	e778      	b.n	8007956 <_dtoa_r+0x96e>
 8007a64:	4b14      	ldr	r3, [pc, #80]	; (8007ab8 <_dtoa_r+0xad0>)
 8007a66:	f7ff bb2a 	b.w	80070be <_dtoa_r+0xd6>
 8007a6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f47f ab05 	bne.w	800707c <_dtoa_r+0x94>
 8007a72:	4b12      	ldr	r3, [pc, #72]	; (8007abc <_dtoa_r+0xad4>)
 8007a74:	f7ff bb23 	b.w	80070be <_dtoa_r+0xd6>
 8007a78:	f1ba 0f00 	cmp.w	sl, #0
 8007a7c:	dc03      	bgt.n	8007a86 <_dtoa_r+0xa9e>
 8007a7e:	9b06      	ldr	r3, [sp, #24]
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	f73f aec8 	bgt.w	8007816 <_dtoa_r+0x82e>
 8007a86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	f7ff fa20 	bl	8006ed2 <quorem>
 8007a92:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007a96:	f808 3b01 	strb.w	r3, [r8], #1
 8007a9a:	9a01      	ldr	r2, [sp, #4]
 8007a9c:	eba8 0202 	sub.w	r2, r8, r2
 8007aa0:	4592      	cmp	sl, r2
 8007aa2:	ddb7      	ble.n	8007a14 <_dtoa_r+0xa2c>
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	220a      	movs	r2, #10
 8007aaa:	4630      	mov	r0, r6
 8007aac:	f000 f96a 	bl	8007d84 <__multadd>
 8007ab0:	4605      	mov	r5, r0
 8007ab2:	e7ea      	b.n	8007a8a <_dtoa_r+0xaa2>
 8007ab4:	08008b74 	.word	0x08008b74
 8007ab8:	08008ad4 	.word	0x08008ad4
 8007abc:	08008af8 	.word	0x08008af8

08007ac0 <_free_r>:
 8007ac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ac2:	2900      	cmp	r1, #0
 8007ac4:	d044      	beq.n	8007b50 <_free_r+0x90>
 8007ac6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aca:	9001      	str	r0, [sp, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f1a1 0404 	sub.w	r4, r1, #4
 8007ad2:	bfb8      	it	lt
 8007ad4:	18e4      	addlt	r4, r4, r3
 8007ad6:	f000 f8e7 	bl	8007ca8 <__malloc_lock>
 8007ada:	4a1e      	ldr	r2, [pc, #120]	; (8007b54 <_free_r+0x94>)
 8007adc:	9801      	ldr	r0, [sp, #4]
 8007ade:	6813      	ldr	r3, [r2, #0]
 8007ae0:	b933      	cbnz	r3, 8007af0 <_free_r+0x30>
 8007ae2:	6063      	str	r3, [r4, #4]
 8007ae4:	6014      	str	r4, [r2, #0]
 8007ae6:	b003      	add	sp, #12
 8007ae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007aec:	f000 b8e2 	b.w	8007cb4 <__malloc_unlock>
 8007af0:	42a3      	cmp	r3, r4
 8007af2:	d908      	bls.n	8007b06 <_free_r+0x46>
 8007af4:	6825      	ldr	r5, [r4, #0]
 8007af6:	1961      	adds	r1, r4, r5
 8007af8:	428b      	cmp	r3, r1
 8007afa:	bf01      	itttt	eq
 8007afc:	6819      	ldreq	r1, [r3, #0]
 8007afe:	685b      	ldreq	r3, [r3, #4]
 8007b00:	1949      	addeq	r1, r1, r5
 8007b02:	6021      	streq	r1, [r4, #0]
 8007b04:	e7ed      	b.n	8007ae2 <_free_r+0x22>
 8007b06:	461a      	mov	r2, r3
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	b10b      	cbz	r3, 8007b10 <_free_r+0x50>
 8007b0c:	42a3      	cmp	r3, r4
 8007b0e:	d9fa      	bls.n	8007b06 <_free_r+0x46>
 8007b10:	6811      	ldr	r1, [r2, #0]
 8007b12:	1855      	adds	r5, r2, r1
 8007b14:	42a5      	cmp	r5, r4
 8007b16:	d10b      	bne.n	8007b30 <_free_r+0x70>
 8007b18:	6824      	ldr	r4, [r4, #0]
 8007b1a:	4421      	add	r1, r4
 8007b1c:	1854      	adds	r4, r2, r1
 8007b1e:	42a3      	cmp	r3, r4
 8007b20:	6011      	str	r1, [r2, #0]
 8007b22:	d1e0      	bne.n	8007ae6 <_free_r+0x26>
 8007b24:	681c      	ldr	r4, [r3, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	6053      	str	r3, [r2, #4]
 8007b2a:	440c      	add	r4, r1
 8007b2c:	6014      	str	r4, [r2, #0]
 8007b2e:	e7da      	b.n	8007ae6 <_free_r+0x26>
 8007b30:	d902      	bls.n	8007b38 <_free_r+0x78>
 8007b32:	230c      	movs	r3, #12
 8007b34:	6003      	str	r3, [r0, #0]
 8007b36:	e7d6      	b.n	8007ae6 <_free_r+0x26>
 8007b38:	6825      	ldr	r5, [r4, #0]
 8007b3a:	1961      	adds	r1, r4, r5
 8007b3c:	428b      	cmp	r3, r1
 8007b3e:	bf04      	itt	eq
 8007b40:	6819      	ldreq	r1, [r3, #0]
 8007b42:	685b      	ldreq	r3, [r3, #4]
 8007b44:	6063      	str	r3, [r4, #4]
 8007b46:	bf04      	itt	eq
 8007b48:	1949      	addeq	r1, r1, r5
 8007b4a:	6021      	streq	r1, [r4, #0]
 8007b4c:	6054      	str	r4, [r2, #4]
 8007b4e:	e7ca      	b.n	8007ae6 <_free_r+0x26>
 8007b50:	b003      	add	sp, #12
 8007b52:	bd30      	pop	{r4, r5, pc}
 8007b54:	24000458 	.word	0x24000458

08007b58 <malloc>:
 8007b58:	4b02      	ldr	r3, [pc, #8]	; (8007b64 <malloc+0xc>)
 8007b5a:	4601      	mov	r1, r0
 8007b5c:	6818      	ldr	r0, [r3, #0]
 8007b5e:	f000 b823 	b.w	8007ba8 <_malloc_r>
 8007b62:	bf00      	nop
 8007b64:	24000068 	.word	0x24000068

08007b68 <sbrk_aligned>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	4e0e      	ldr	r6, [pc, #56]	; (8007ba4 <sbrk_aligned+0x3c>)
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	6831      	ldr	r1, [r6, #0]
 8007b70:	4605      	mov	r5, r0
 8007b72:	b911      	cbnz	r1, 8007b7a <sbrk_aligned+0x12>
 8007b74:	f000 fe96 	bl	80088a4 <_sbrk_r>
 8007b78:	6030      	str	r0, [r6, #0]
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	f000 fe91 	bl	80088a4 <_sbrk_r>
 8007b82:	1c43      	adds	r3, r0, #1
 8007b84:	d00a      	beq.n	8007b9c <sbrk_aligned+0x34>
 8007b86:	1cc4      	adds	r4, r0, #3
 8007b88:	f024 0403 	bic.w	r4, r4, #3
 8007b8c:	42a0      	cmp	r0, r4
 8007b8e:	d007      	beq.n	8007ba0 <sbrk_aligned+0x38>
 8007b90:	1a21      	subs	r1, r4, r0
 8007b92:	4628      	mov	r0, r5
 8007b94:	f000 fe86 	bl	80088a4 <_sbrk_r>
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d101      	bne.n	8007ba0 <sbrk_aligned+0x38>
 8007b9c:	f04f 34ff 	mov.w	r4, #4294967295
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	bd70      	pop	{r4, r5, r6, pc}
 8007ba4:	2400045c 	.word	0x2400045c

08007ba8 <_malloc_r>:
 8007ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bac:	1ccd      	adds	r5, r1, #3
 8007bae:	f025 0503 	bic.w	r5, r5, #3
 8007bb2:	3508      	adds	r5, #8
 8007bb4:	2d0c      	cmp	r5, #12
 8007bb6:	bf38      	it	cc
 8007bb8:	250c      	movcc	r5, #12
 8007bba:	2d00      	cmp	r5, #0
 8007bbc:	4607      	mov	r7, r0
 8007bbe:	db01      	blt.n	8007bc4 <_malloc_r+0x1c>
 8007bc0:	42a9      	cmp	r1, r5
 8007bc2:	d905      	bls.n	8007bd0 <_malloc_r+0x28>
 8007bc4:	230c      	movs	r3, #12
 8007bc6:	603b      	str	r3, [r7, #0]
 8007bc8:	2600      	movs	r6, #0
 8007bca:	4630      	mov	r0, r6
 8007bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ca4 <_malloc_r+0xfc>
 8007bd4:	f000 f868 	bl	8007ca8 <__malloc_lock>
 8007bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8007bdc:	461c      	mov	r4, r3
 8007bde:	bb5c      	cbnz	r4, 8007c38 <_malloc_r+0x90>
 8007be0:	4629      	mov	r1, r5
 8007be2:	4638      	mov	r0, r7
 8007be4:	f7ff ffc0 	bl	8007b68 <sbrk_aligned>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	4604      	mov	r4, r0
 8007bec:	d155      	bne.n	8007c9a <_malloc_r+0xf2>
 8007bee:	f8d8 4000 	ldr.w	r4, [r8]
 8007bf2:	4626      	mov	r6, r4
 8007bf4:	2e00      	cmp	r6, #0
 8007bf6:	d145      	bne.n	8007c84 <_malloc_r+0xdc>
 8007bf8:	2c00      	cmp	r4, #0
 8007bfa:	d048      	beq.n	8007c8e <_malloc_r+0xe6>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4638      	mov	r0, r7
 8007c02:	eb04 0903 	add.w	r9, r4, r3
 8007c06:	f000 fe4d 	bl	80088a4 <_sbrk_r>
 8007c0a:	4581      	cmp	r9, r0
 8007c0c:	d13f      	bne.n	8007c8e <_malloc_r+0xe6>
 8007c0e:	6821      	ldr	r1, [r4, #0]
 8007c10:	1a6d      	subs	r5, r5, r1
 8007c12:	4629      	mov	r1, r5
 8007c14:	4638      	mov	r0, r7
 8007c16:	f7ff ffa7 	bl	8007b68 <sbrk_aligned>
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	d037      	beq.n	8007c8e <_malloc_r+0xe6>
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	442b      	add	r3, r5
 8007c22:	6023      	str	r3, [r4, #0]
 8007c24:	f8d8 3000 	ldr.w	r3, [r8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d038      	beq.n	8007c9e <_malloc_r+0xf6>
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	42a2      	cmp	r2, r4
 8007c30:	d12b      	bne.n	8007c8a <_malloc_r+0xe2>
 8007c32:	2200      	movs	r2, #0
 8007c34:	605a      	str	r2, [r3, #4]
 8007c36:	e00f      	b.n	8007c58 <_malloc_r+0xb0>
 8007c38:	6822      	ldr	r2, [r4, #0]
 8007c3a:	1b52      	subs	r2, r2, r5
 8007c3c:	d41f      	bmi.n	8007c7e <_malloc_r+0xd6>
 8007c3e:	2a0b      	cmp	r2, #11
 8007c40:	d917      	bls.n	8007c72 <_malloc_r+0xca>
 8007c42:	1961      	adds	r1, r4, r5
 8007c44:	42a3      	cmp	r3, r4
 8007c46:	6025      	str	r5, [r4, #0]
 8007c48:	bf18      	it	ne
 8007c4a:	6059      	strne	r1, [r3, #4]
 8007c4c:	6863      	ldr	r3, [r4, #4]
 8007c4e:	bf08      	it	eq
 8007c50:	f8c8 1000 	streq.w	r1, [r8]
 8007c54:	5162      	str	r2, [r4, r5]
 8007c56:	604b      	str	r3, [r1, #4]
 8007c58:	4638      	mov	r0, r7
 8007c5a:	f104 060b 	add.w	r6, r4, #11
 8007c5e:	f000 f829 	bl	8007cb4 <__malloc_unlock>
 8007c62:	f026 0607 	bic.w	r6, r6, #7
 8007c66:	1d23      	adds	r3, r4, #4
 8007c68:	1af2      	subs	r2, r6, r3
 8007c6a:	d0ae      	beq.n	8007bca <_malloc_r+0x22>
 8007c6c:	1b9b      	subs	r3, r3, r6
 8007c6e:	50a3      	str	r3, [r4, r2]
 8007c70:	e7ab      	b.n	8007bca <_malloc_r+0x22>
 8007c72:	42a3      	cmp	r3, r4
 8007c74:	6862      	ldr	r2, [r4, #4]
 8007c76:	d1dd      	bne.n	8007c34 <_malloc_r+0x8c>
 8007c78:	f8c8 2000 	str.w	r2, [r8]
 8007c7c:	e7ec      	b.n	8007c58 <_malloc_r+0xb0>
 8007c7e:	4623      	mov	r3, r4
 8007c80:	6864      	ldr	r4, [r4, #4]
 8007c82:	e7ac      	b.n	8007bde <_malloc_r+0x36>
 8007c84:	4634      	mov	r4, r6
 8007c86:	6876      	ldr	r6, [r6, #4]
 8007c88:	e7b4      	b.n	8007bf4 <_malloc_r+0x4c>
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	e7cc      	b.n	8007c28 <_malloc_r+0x80>
 8007c8e:	230c      	movs	r3, #12
 8007c90:	603b      	str	r3, [r7, #0]
 8007c92:	4638      	mov	r0, r7
 8007c94:	f000 f80e 	bl	8007cb4 <__malloc_unlock>
 8007c98:	e797      	b.n	8007bca <_malloc_r+0x22>
 8007c9a:	6025      	str	r5, [r4, #0]
 8007c9c:	e7dc      	b.n	8007c58 <_malloc_r+0xb0>
 8007c9e:	605b      	str	r3, [r3, #4]
 8007ca0:	deff      	udf	#255	; 0xff
 8007ca2:	bf00      	nop
 8007ca4:	24000458 	.word	0x24000458

08007ca8 <__malloc_lock>:
 8007ca8:	4801      	ldr	r0, [pc, #4]	; (8007cb0 <__malloc_lock+0x8>)
 8007caa:	f7ff b910 	b.w	8006ece <__retarget_lock_acquire_recursive>
 8007cae:	bf00      	nop
 8007cb0:	24000454 	.word	0x24000454

08007cb4 <__malloc_unlock>:
 8007cb4:	4801      	ldr	r0, [pc, #4]	; (8007cbc <__malloc_unlock+0x8>)
 8007cb6:	f7ff b90b 	b.w	8006ed0 <__retarget_lock_release_recursive>
 8007cba:	bf00      	nop
 8007cbc:	24000454 	.word	0x24000454

08007cc0 <_Balloc>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	69c6      	ldr	r6, [r0, #28]
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	460d      	mov	r5, r1
 8007cc8:	b976      	cbnz	r6, 8007ce8 <_Balloc+0x28>
 8007cca:	2010      	movs	r0, #16
 8007ccc:	f7ff ff44 	bl	8007b58 <malloc>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	61e0      	str	r0, [r4, #28]
 8007cd4:	b920      	cbnz	r0, 8007ce0 <_Balloc+0x20>
 8007cd6:	4b18      	ldr	r3, [pc, #96]	; (8007d38 <_Balloc+0x78>)
 8007cd8:	4818      	ldr	r0, [pc, #96]	; (8007d3c <_Balloc+0x7c>)
 8007cda:	216b      	movs	r1, #107	; 0x6b
 8007cdc:	f000 fe00 	bl	80088e0 <__assert_func>
 8007ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ce4:	6006      	str	r6, [r0, #0]
 8007ce6:	60c6      	str	r6, [r0, #12]
 8007ce8:	69e6      	ldr	r6, [r4, #28]
 8007cea:	68f3      	ldr	r3, [r6, #12]
 8007cec:	b183      	cbz	r3, 8007d10 <_Balloc+0x50>
 8007cee:	69e3      	ldr	r3, [r4, #28]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007cf6:	b9b8      	cbnz	r0, 8007d28 <_Balloc+0x68>
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	fa01 f605 	lsl.w	r6, r1, r5
 8007cfe:	1d72      	adds	r2, r6, #5
 8007d00:	0092      	lsls	r2, r2, #2
 8007d02:	4620      	mov	r0, r4
 8007d04:	f000 fe0a 	bl	800891c <_calloc_r>
 8007d08:	b160      	cbz	r0, 8007d24 <_Balloc+0x64>
 8007d0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d0e:	e00e      	b.n	8007d2e <_Balloc+0x6e>
 8007d10:	2221      	movs	r2, #33	; 0x21
 8007d12:	2104      	movs	r1, #4
 8007d14:	4620      	mov	r0, r4
 8007d16:	f000 fe01 	bl	800891c <_calloc_r>
 8007d1a:	69e3      	ldr	r3, [r4, #28]
 8007d1c:	60f0      	str	r0, [r6, #12]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1e4      	bne.n	8007cee <_Balloc+0x2e>
 8007d24:	2000      	movs	r0, #0
 8007d26:	bd70      	pop	{r4, r5, r6, pc}
 8007d28:	6802      	ldr	r2, [r0, #0]
 8007d2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d34:	e7f7      	b.n	8007d26 <_Balloc+0x66>
 8007d36:	bf00      	nop
 8007d38:	08008b05 	.word	0x08008b05
 8007d3c:	08008b85 	.word	0x08008b85

08007d40 <_Bfree>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	69c6      	ldr	r6, [r0, #28]
 8007d44:	4605      	mov	r5, r0
 8007d46:	460c      	mov	r4, r1
 8007d48:	b976      	cbnz	r6, 8007d68 <_Bfree+0x28>
 8007d4a:	2010      	movs	r0, #16
 8007d4c:	f7ff ff04 	bl	8007b58 <malloc>
 8007d50:	4602      	mov	r2, r0
 8007d52:	61e8      	str	r0, [r5, #28]
 8007d54:	b920      	cbnz	r0, 8007d60 <_Bfree+0x20>
 8007d56:	4b09      	ldr	r3, [pc, #36]	; (8007d7c <_Bfree+0x3c>)
 8007d58:	4809      	ldr	r0, [pc, #36]	; (8007d80 <_Bfree+0x40>)
 8007d5a:	218f      	movs	r1, #143	; 0x8f
 8007d5c:	f000 fdc0 	bl	80088e0 <__assert_func>
 8007d60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d64:	6006      	str	r6, [r0, #0]
 8007d66:	60c6      	str	r6, [r0, #12]
 8007d68:	b13c      	cbz	r4, 8007d7a <_Bfree+0x3a>
 8007d6a:	69eb      	ldr	r3, [r5, #28]
 8007d6c:	6862      	ldr	r2, [r4, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d74:	6021      	str	r1, [r4, #0]
 8007d76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d7a:	bd70      	pop	{r4, r5, r6, pc}
 8007d7c:	08008b05 	.word	0x08008b05
 8007d80:	08008b85 	.word	0x08008b85

08007d84 <__multadd>:
 8007d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d88:	690d      	ldr	r5, [r1, #16]
 8007d8a:	4607      	mov	r7, r0
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	461e      	mov	r6, r3
 8007d90:	f101 0c14 	add.w	ip, r1, #20
 8007d94:	2000      	movs	r0, #0
 8007d96:	f8dc 3000 	ldr.w	r3, [ip]
 8007d9a:	b299      	uxth	r1, r3
 8007d9c:	fb02 6101 	mla	r1, r2, r1, r6
 8007da0:	0c1e      	lsrs	r6, r3, #16
 8007da2:	0c0b      	lsrs	r3, r1, #16
 8007da4:	fb02 3306 	mla	r3, r2, r6, r3
 8007da8:	b289      	uxth	r1, r1
 8007daa:	3001      	adds	r0, #1
 8007dac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007db0:	4285      	cmp	r5, r0
 8007db2:	f84c 1b04 	str.w	r1, [ip], #4
 8007db6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007dba:	dcec      	bgt.n	8007d96 <__multadd+0x12>
 8007dbc:	b30e      	cbz	r6, 8007e02 <__multadd+0x7e>
 8007dbe:	68a3      	ldr	r3, [r4, #8]
 8007dc0:	42ab      	cmp	r3, r5
 8007dc2:	dc19      	bgt.n	8007df8 <__multadd+0x74>
 8007dc4:	6861      	ldr	r1, [r4, #4]
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	3101      	adds	r1, #1
 8007dca:	f7ff ff79 	bl	8007cc0 <_Balloc>
 8007dce:	4680      	mov	r8, r0
 8007dd0:	b928      	cbnz	r0, 8007dde <__multadd+0x5a>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	4b0c      	ldr	r3, [pc, #48]	; (8007e08 <__multadd+0x84>)
 8007dd6:	480d      	ldr	r0, [pc, #52]	; (8007e0c <__multadd+0x88>)
 8007dd8:	21ba      	movs	r1, #186	; 0xba
 8007dda:	f000 fd81 	bl	80088e0 <__assert_func>
 8007dde:	6922      	ldr	r2, [r4, #16]
 8007de0:	3202      	adds	r2, #2
 8007de2:	f104 010c 	add.w	r1, r4, #12
 8007de6:	0092      	lsls	r2, r2, #2
 8007de8:	300c      	adds	r0, #12
 8007dea:	f000 fd6b 	bl	80088c4 <memcpy>
 8007dee:	4621      	mov	r1, r4
 8007df0:	4638      	mov	r0, r7
 8007df2:	f7ff ffa5 	bl	8007d40 <_Bfree>
 8007df6:	4644      	mov	r4, r8
 8007df8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007dfc:	3501      	adds	r5, #1
 8007dfe:	615e      	str	r6, [r3, #20]
 8007e00:	6125      	str	r5, [r4, #16]
 8007e02:	4620      	mov	r0, r4
 8007e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e08:	08008b74 	.word	0x08008b74
 8007e0c:	08008b85 	.word	0x08008b85

08007e10 <__hi0bits>:
 8007e10:	0c03      	lsrs	r3, r0, #16
 8007e12:	041b      	lsls	r3, r3, #16
 8007e14:	b9d3      	cbnz	r3, 8007e4c <__hi0bits+0x3c>
 8007e16:	0400      	lsls	r0, r0, #16
 8007e18:	2310      	movs	r3, #16
 8007e1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007e1e:	bf04      	itt	eq
 8007e20:	0200      	lsleq	r0, r0, #8
 8007e22:	3308      	addeq	r3, #8
 8007e24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007e28:	bf04      	itt	eq
 8007e2a:	0100      	lsleq	r0, r0, #4
 8007e2c:	3304      	addeq	r3, #4
 8007e2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007e32:	bf04      	itt	eq
 8007e34:	0080      	lsleq	r0, r0, #2
 8007e36:	3302      	addeq	r3, #2
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	db05      	blt.n	8007e48 <__hi0bits+0x38>
 8007e3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007e40:	f103 0301 	add.w	r3, r3, #1
 8007e44:	bf08      	it	eq
 8007e46:	2320      	moveq	r3, #32
 8007e48:	4618      	mov	r0, r3
 8007e4a:	4770      	bx	lr
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	e7e4      	b.n	8007e1a <__hi0bits+0xa>

08007e50 <__lo0bits>:
 8007e50:	6803      	ldr	r3, [r0, #0]
 8007e52:	f013 0207 	ands.w	r2, r3, #7
 8007e56:	d00c      	beq.n	8007e72 <__lo0bits+0x22>
 8007e58:	07d9      	lsls	r1, r3, #31
 8007e5a:	d422      	bmi.n	8007ea2 <__lo0bits+0x52>
 8007e5c:	079a      	lsls	r2, r3, #30
 8007e5e:	bf49      	itett	mi
 8007e60:	085b      	lsrmi	r3, r3, #1
 8007e62:	089b      	lsrpl	r3, r3, #2
 8007e64:	6003      	strmi	r3, [r0, #0]
 8007e66:	2201      	movmi	r2, #1
 8007e68:	bf5c      	itt	pl
 8007e6a:	6003      	strpl	r3, [r0, #0]
 8007e6c:	2202      	movpl	r2, #2
 8007e6e:	4610      	mov	r0, r2
 8007e70:	4770      	bx	lr
 8007e72:	b299      	uxth	r1, r3
 8007e74:	b909      	cbnz	r1, 8007e7a <__lo0bits+0x2a>
 8007e76:	0c1b      	lsrs	r3, r3, #16
 8007e78:	2210      	movs	r2, #16
 8007e7a:	b2d9      	uxtb	r1, r3
 8007e7c:	b909      	cbnz	r1, 8007e82 <__lo0bits+0x32>
 8007e7e:	3208      	adds	r2, #8
 8007e80:	0a1b      	lsrs	r3, r3, #8
 8007e82:	0719      	lsls	r1, r3, #28
 8007e84:	bf04      	itt	eq
 8007e86:	091b      	lsreq	r3, r3, #4
 8007e88:	3204      	addeq	r2, #4
 8007e8a:	0799      	lsls	r1, r3, #30
 8007e8c:	bf04      	itt	eq
 8007e8e:	089b      	lsreq	r3, r3, #2
 8007e90:	3202      	addeq	r2, #2
 8007e92:	07d9      	lsls	r1, r3, #31
 8007e94:	d403      	bmi.n	8007e9e <__lo0bits+0x4e>
 8007e96:	085b      	lsrs	r3, r3, #1
 8007e98:	f102 0201 	add.w	r2, r2, #1
 8007e9c:	d003      	beq.n	8007ea6 <__lo0bits+0x56>
 8007e9e:	6003      	str	r3, [r0, #0]
 8007ea0:	e7e5      	b.n	8007e6e <__lo0bits+0x1e>
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	e7e3      	b.n	8007e6e <__lo0bits+0x1e>
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	e7e1      	b.n	8007e6e <__lo0bits+0x1e>
	...

08007eac <__i2b>:
 8007eac:	b510      	push	{r4, lr}
 8007eae:	460c      	mov	r4, r1
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	f7ff ff05 	bl	8007cc0 <_Balloc>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	b928      	cbnz	r0, 8007ec6 <__i2b+0x1a>
 8007eba:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <__i2b+0x24>)
 8007ebc:	4805      	ldr	r0, [pc, #20]	; (8007ed4 <__i2b+0x28>)
 8007ebe:	f240 1145 	movw	r1, #325	; 0x145
 8007ec2:	f000 fd0d 	bl	80088e0 <__assert_func>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	6144      	str	r4, [r0, #20]
 8007eca:	6103      	str	r3, [r0, #16]
 8007ecc:	bd10      	pop	{r4, pc}
 8007ece:	bf00      	nop
 8007ed0:	08008b74 	.word	0x08008b74
 8007ed4:	08008b85 	.word	0x08008b85

08007ed8 <__multiply>:
 8007ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007edc:	4691      	mov	r9, r2
 8007ede:	690a      	ldr	r2, [r1, #16]
 8007ee0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	bfb8      	it	lt
 8007ee8:	460b      	movlt	r3, r1
 8007eea:	460c      	mov	r4, r1
 8007eec:	bfbc      	itt	lt
 8007eee:	464c      	movlt	r4, r9
 8007ef0:	4699      	movlt	r9, r3
 8007ef2:	6927      	ldr	r7, [r4, #16]
 8007ef4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ef8:	68a3      	ldr	r3, [r4, #8]
 8007efa:	6861      	ldr	r1, [r4, #4]
 8007efc:	eb07 060a 	add.w	r6, r7, sl
 8007f00:	42b3      	cmp	r3, r6
 8007f02:	b085      	sub	sp, #20
 8007f04:	bfb8      	it	lt
 8007f06:	3101      	addlt	r1, #1
 8007f08:	f7ff feda 	bl	8007cc0 <_Balloc>
 8007f0c:	b930      	cbnz	r0, 8007f1c <__multiply+0x44>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	4b44      	ldr	r3, [pc, #272]	; (8008024 <__multiply+0x14c>)
 8007f12:	4845      	ldr	r0, [pc, #276]	; (8008028 <__multiply+0x150>)
 8007f14:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007f18:	f000 fce2 	bl	80088e0 <__assert_func>
 8007f1c:	f100 0514 	add.w	r5, r0, #20
 8007f20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f24:	462b      	mov	r3, r5
 8007f26:	2200      	movs	r2, #0
 8007f28:	4543      	cmp	r3, r8
 8007f2a:	d321      	bcc.n	8007f70 <__multiply+0x98>
 8007f2c:	f104 0314 	add.w	r3, r4, #20
 8007f30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007f34:	f109 0314 	add.w	r3, r9, #20
 8007f38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007f3c:	9202      	str	r2, [sp, #8]
 8007f3e:	1b3a      	subs	r2, r7, r4
 8007f40:	3a15      	subs	r2, #21
 8007f42:	f022 0203 	bic.w	r2, r2, #3
 8007f46:	3204      	adds	r2, #4
 8007f48:	f104 0115 	add.w	r1, r4, #21
 8007f4c:	428f      	cmp	r7, r1
 8007f4e:	bf38      	it	cc
 8007f50:	2204      	movcc	r2, #4
 8007f52:	9201      	str	r2, [sp, #4]
 8007f54:	9a02      	ldr	r2, [sp, #8]
 8007f56:	9303      	str	r3, [sp, #12]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d80c      	bhi.n	8007f76 <__multiply+0x9e>
 8007f5c:	2e00      	cmp	r6, #0
 8007f5e:	dd03      	ble.n	8007f68 <__multiply+0x90>
 8007f60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d05b      	beq.n	8008020 <__multiply+0x148>
 8007f68:	6106      	str	r6, [r0, #16]
 8007f6a:	b005      	add	sp, #20
 8007f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f70:	f843 2b04 	str.w	r2, [r3], #4
 8007f74:	e7d8      	b.n	8007f28 <__multiply+0x50>
 8007f76:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f7a:	f1ba 0f00 	cmp.w	sl, #0
 8007f7e:	d024      	beq.n	8007fca <__multiply+0xf2>
 8007f80:	f104 0e14 	add.w	lr, r4, #20
 8007f84:	46a9      	mov	r9, r5
 8007f86:	f04f 0c00 	mov.w	ip, #0
 8007f8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f8e:	f8d9 1000 	ldr.w	r1, [r9]
 8007f92:	fa1f fb82 	uxth.w	fp, r2
 8007f96:	b289      	uxth	r1, r1
 8007f98:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007fa0:	f8d9 2000 	ldr.w	r2, [r9]
 8007fa4:	4461      	add	r1, ip
 8007fa6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007faa:	fb0a c20b 	mla	r2, sl, fp, ip
 8007fae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007fb2:	b289      	uxth	r1, r1
 8007fb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007fb8:	4577      	cmp	r7, lr
 8007fba:	f849 1b04 	str.w	r1, [r9], #4
 8007fbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007fc2:	d8e2      	bhi.n	8007f8a <__multiply+0xb2>
 8007fc4:	9a01      	ldr	r2, [sp, #4]
 8007fc6:	f845 c002 	str.w	ip, [r5, r2]
 8007fca:	9a03      	ldr	r2, [sp, #12]
 8007fcc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	f1b9 0f00 	cmp.w	r9, #0
 8007fd6:	d021      	beq.n	800801c <__multiply+0x144>
 8007fd8:	6829      	ldr	r1, [r5, #0]
 8007fda:	f104 0c14 	add.w	ip, r4, #20
 8007fde:	46ae      	mov	lr, r5
 8007fe0:	f04f 0a00 	mov.w	sl, #0
 8007fe4:	f8bc b000 	ldrh.w	fp, [ip]
 8007fe8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007fec:	fb09 220b 	mla	r2, r9, fp, r2
 8007ff0:	4452      	add	r2, sl
 8007ff2:	b289      	uxth	r1, r1
 8007ff4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ff8:	f84e 1b04 	str.w	r1, [lr], #4
 8007ffc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008000:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008004:	f8be 1000 	ldrh.w	r1, [lr]
 8008008:	fb09 110a 	mla	r1, r9, sl, r1
 800800c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008010:	4567      	cmp	r7, ip
 8008012:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008016:	d8e5      	bhi.n	8007fe4 <__multiply+0x10c>
 8008018:	9a01      	ldr	r2, [sp, #4]
 800801a:	50a9      	str	r1, [r5, r2]
 800801c:	3504      	adds	r5, #4
 800801e:	e799      	b.n	8007f54 <__multiply+0x7c>
 8008020:	3e01      	subs	r6, #1
 8008022:	e79b      	b.n	8007f5c <__multiply+0x84>
 8008024:	08008b74 	.word	0x08008b74
 8008028:	08008b85 	.word	0x08008b85

0800802c <__pow5mult>:
 800802c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008030:	4615      	mov	r5, r2
 8008032:	f012 0203 	ands.w	r2, r2, #3
 8008036:	4606      	mov	r6, r0
 8008038:	460f      	mov	r7, r1
 800803a:	d007      	beq.n	800804c <__pow5mult+0x20>
 800803c:	4c25      	ldr	r4, [pc, #148]	; (80080d4 <__pow5mult+0xa8>)
 800803e:	3a01      	subs	r2, #1
 8008040:	2300      	movs	r3, #0
 8008042:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008046:	f7ff fe9d 	bl	8007d84 <__multadd>
 800804a:	4607      	mov	r7, r0
 800804c:	10ad      	asrs	r5, r5, #2
 800804e:	d03d      	beq.n	80080cc <__pow5mult+0xa0>
 8008050:	69f4      	ldr	r4, [r6, #28]
 8008052:	b97c      	cbnz	r4, 8008074 <__pow5mult+0x48>
 8008054:	2010      	movs	r0, #16
 8008056:	f7ff fd7f 	bl	8007b58 <malloc>
 800805a:	4602      	mov	r2, r0
 800805c:	61f0      	str	r0, [r6, #28]
 800805e:	b928      	cbnz	r0, 800806c <__pow5mult+0x40>
 8008060:	4b1d      	ldr	r3, [pc, #116]	; (80080d8 <__pow5mult+0xac>)
 8008062:	481e      	ldr	r0, [pc, #120]	; (80080dc <__pow5mult+0xb0>)
 8008064:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008068:	f000 fc3a 	bl	80088e0 <__assert_func>
 800806c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008070:	6004      	str	r4, [r0, #0]
 8008072:	60c4      	str	r4, [r0, #12]
 8008074:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008078:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800807c:	b94c      	cbnz	r4, 8008092 <__pow5mult+0x66>
 800807e:	f240 2171 	movw	r1, #625	; 0x271
 8008082:	4630      	mov	r0, r6
 8008084:	f7ff ff12 	bl	8007eac <__i2b>
 8008088:	2300      	movs	r3, #0
 800808a:	f8c8 0008 	str.w	r0, [r8, #8]
 800808e:	4604      	mov	r4, r0
 8008090:	6003      	str	r3, [r0, #0]
 8008092:	f04f 0900 	mov.w	r9, #0
 8008096:	07eb      	lsls	r3, r5, #31
 8008098:	d50a      	bpl.n	80080b0 <__pow5mult+0x84>
 800809a:	4639      	mov	r1, r7
 800809c:	4622      	mov	r2, r4
 800809e:	4630      	mov	r0, r6
 80080a0:	f7ff ff1a 	bl	8007ed8 <__multiply>
 80080a4:	4639      	mov	r1, r7
 80080a6:	4680      	mov	r8, r0
 80080a8:	4630      	mov	r0, r6
 80080aa:	f7ff fe49 	bl	8007d40 <_Bfree>
 80080ae:	4647      	mov	r7, r8
 80080b0:	106d      	asrs	r5, r5, #1
 80080b2:	d00b      	beq.n	80080cc <__pow5mult+0xa0>
 80080b4:	6820      	ldr	r0, [r4, #0]
 80080b6:	b938      	cbnz	r0, 80080c8 <__pow5mult+0x9c>
 80080b8:	4622      	mov	r2, r4
 80080ba:	4621      	mov	r1, r4
 80080bc:	4630      	mov	r0, r6
 80080be:	f7ff ff0b 	bl	8007ed8 <__multiply>
 80080c2:	6020      	str	r0, [r4, #0]
 80080c4:	f8c0 9000 	str.w	r9, [r0]
 80080c8:	4604      	mov	r4, r0
 80080ca:	e7e4      	b.n	8008096 <__pow5mult+0x6a>
 80080cc:	4638      	mov	r0, r7
 80080ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080d2:	bf00      	nop
 80080d4:	08008cd0 	.word	0x08008cd0
 80080d8:	08008b05 	.word	0x08008b05
 80080dc:	08008b85 	.word	0x08008b85

080080e0 <__lshift>:
 80080e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e4:	460c      	mov	r4, r1
 80080e6:	6849      	ldr	r1, [r1, #4]
 80080e8:	6923      	ldr	r3, [r4, #16]
 80080ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080ee:	68a3      	ldr	r3, [r4, #8]
 80080f0:	4607      	mov	r7, r0
 80080f2:	4691      	mov	r9, r2
 80080f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080f8:	f108 0601 	add.w	r6, r8, #1
 80080fc:	42b3      	cmp	r3, r6
 80080fe:	db0b      	blt.n	8008118 <__lshift+0x38>
 8008100:	4638      	mov	r0, r7
 8008102:	f7ff fddd 	bl	8007cc0 <_Balloc>
 8008106:	4605      	mov	r5, r0
 8008108:	b948      	cbnz	r0, 800811e <__lshift+0x3e>
 800810a:	4602      	mov	r2, r0
 800810c:	4b28      	ldr	r3, [pc, #160]	; (80081b0 <__lshift+0xd0>)
 800810e:	4829      	ldr	r0, [pc, #164]	; (80081b4 <__lshift+0xd4>)
 8008110:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008114:	f000 fbe4 	bl	80088e0 <__assert_func>
 8008118:	3101      	adds	r1, #1
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	e7ee      	b.n	80080fc <__lshift+0x1c>
 800811e:	2300      	movs	r3, #0
 8008120:	f100 0114 	add.w	r1, r0, #20
 8008124:	f100 0210 	add.w	r2, r0, #16
 8008128:	4618      	mov	r0, r3
 800812a:	4553      	cmp	r3, sl
 800812c:	db33      	blt.n	8008196 <__lshift+0xb6>
 800812e:	6920      	ldr	r0, [r4, #16]
 8008130:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008134:	f104 0314 	add.w	r3, r4, #20
 8008138:	f019 091f 	ands.w	r9, r9, #31
 800813c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008140:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008144:	d02b      	beq.n	800819e <__lshift+0xbe>
 8008146:	f1c9 0e20 	rsb	lr, r9, #32
 800814a:	468a      	mov	sl, r1
 800814c:	2200      	movs	r2, #0
 800814e:	6818      	ldr	r0, [r3, #0]
 8008150:	fa00 f009 	lsl.w	r0, r0, r9
 8008154:	4310      	orrs	r0, r2
 8008156:	f84a 0b04 	str.w	r0, [sl], #4
 800815a:	f853 2b04 	ldr.w	r2, [r3], #4
 800815e:	459c      	cmp	ip, r3
 8008160:	fa22 f20e 	lsr.w	r2, r2, lr
 8008164:	d8f3      	bhi.n	800814e <__lshift+0x6e>
 8008166:	ebac 0304 	sub.w	r3, ip, r4
 800816a:	3b15      	subs	r3, #21
 800816c:	f023 0303 	bic.w	r3, r3, #3
 8008170:	3304      	adds	r3, #4
 8008172:	f104 0015 	add.w	r0, r4, #21
 8008176:	4584      	cmp	ip, r0
 8008178:	bf38      	it	cc
 800817a:	2304      	movcc	r3, #4
 800817c:	50ca      	str	r2, [r1, r3]
 800817e:	b10a      	cbz	r2, 8008184 <__lshift+0xa4>
 8008180:	f108 0602 	add.w	r6, r8, #2
 8008184:	3e01      	subs	r6, #1
 8008186:	4638      	mov	r0, r7
 8008188:	612e      	str	r6, [r5, #16]
 800818a:	4621      	mov	r1, r4
 800818c:	f7ff fdd8 	bl	8007d40 <_Bfree>
 8008190:	4628      	mov	r0, r5
 8008192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008196:	f842 0f04 	str.w	r0, [r2, #4]!
 800819a:	3301      	adds	r3, #1
 800819c:	e7c5      	b.n	800812a <__lshift+0x4a>
 800819e:	3904      	subs	r1, #4
 80081a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80081a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80081a8:	459c      	cmp	ip, r3
 80081aa:	d8f9      	bhi.n	80081a0 <__lshift+0xc0>
 80081ac:	e7ea      	b.n	8008184 <__lshift+0xa4>
 80081ae:	bf00      	nop
 80081b0:	08008b74 	.word	0x08008b74
 80081b4:	08008b85 	.word	0x08008b85

080081b8 <__mcmp>:
 80081b8:	b530      	push	{r4, r5, lr}
 80081ba:	6902      	ldr	r2, [r0, #16]
 80081bc:	690c      	ldr	r4, [r1, #16]
 80081be:	1b12      	subs	r2, r2, r4
 80081c0:	d10e      	bne.n	80081e0 <__mcmp+0x28>
 80081c2:	f100 0314 	add.w	r3, r0, #20
 80081c6:	3114      	adds	r1, #20
 80081c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80081cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80081d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80081d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80081d8:	42a5      	cmp	r5, r4
 80081da:	d003      	beq.n	80081e4 <__mcmp+0x2c>
 80081dc:	d305      	bcc.n	80081ea <__mcmp+0x32>
 80081de:	2201      	movs	r2, #1
 80081e0:	4610      	mov	r0, r2
 80081e2:	bd30      	pop	{r4, r5, pc}
 80081e4:	4283      	cmp	r3, r0
 80081e6:	d3f3      	bcc.n	80081d0 <__mcmp+0x18>
 80081e8:	e7fa      	b.n	80081e0 <__mcmp+0x28>
 80081ea:	f04f 32ff 	mov.w	r2, #4294967295
 80081ee:	e7f7      	b.n	80081e0 <__mcmp+0x28>

080081f0 <__mdiff>:
 80081f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	460c      	mov	r4, r1
 80081f6:	4606      	mov	r6, r0
 80081f8:	4611      	mov	r1, r2
 80081fa:	4620      	mov	r0, r4
 80081fc:	4690      	mov	r8, r2
 80081fe:	f7ff ffdb 	bl	80081b8 <__mcmp>
 8008202:	1e05      	subs	r5, r0, #0
 8008204:	d110      	bne.n	8008228 <__mdiff+0x38>
 8008206:	4629      	mov	r1, r5
 8008208:	4630      	mov	r0, r6
 800820a:	f7ff fd59 	bl	8007cc0 <_Balloc>
 800820e:	b930      	cbnz	r0, 800821e <__mdiff+0x2e>
 8008210:	4b3a      	ldr	r3, [pc, #232]	; (80082fc <__mdiff+0x10c>)
 8008212:	4602      	mov	r2, r0
 8008214:	f240 2137 	movw	r1, #567	; 0x237
 8008218:	4839      	ldr	r0, [pc, #228]	; (8008300 <__mdiff+0x110>)
 800821a:	f000 fb61 	bl	80088e0 <__assert_func>
 800821e:	2301      	movs	r3, #1
 8008220:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008228:	bfa4      	itt	ge
 800822a:	4643      	movge	r3, r8
 800822c:	46a0      	movge	r8, r4
 800822e:	4630      	mov	r0, r6
 8008230:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008234:	bfa6      	itte	ge
 8008236:	461c      	movge	r4, r3
 8008238:	2500      	movge	r5, #0
 800823a:	2501      	movlt	r5, #1
 800823c:	f7ff fd40 	bl	8007cc0 <_Balloc>
 8008240:	b920      	cbnz	r0, 800824c <__mdiff+0x5c>
 8008242:	4b2e      	ldr	r3, [pc, #184]	; (80082fc <__mdiff+0x10c>)
 8008244:	4602      	mov	r2, r0
 8008246:	f240 2145 	movw	r1, #581	; 0x245
 800824a:	e7e5      	b.n	8008218 <__mdiff+0x28>
 800824c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008250:	6926      	ldr	r6, [r4, #16]
 8008252:	60c5      	str	r5, [r0, #12]
 8008254:	f104 0914 	add.w	r9, r4, #20
 8008258:	f108 0514 	add.w	r5, r8, #20
 800825c:	f100 0e14 	add.w	lr, r0, #20
 8008260:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008264:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008268:	f108 0210 	add.w	r2, r8, #16
 800826c:	46f2      	mov	sl, lr
 800826e:	2100      	movs	r1, #0
 8008270:	f859 3b04 	ldr.w	r3, [r9], #4
 8008274:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008278:	fa11 f88b 	uxtah	r8, r1, fp
 800827c:	b299      	uxth	r1, r3
 800827e:	0c1b      	lsrs	r3, r3, #16
 8008280:	eba8 0801 	sub.w	r8, r8, r1
 8008284:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008288:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800828c:	fa1f f888 	uxth.w	r8, r8
 8008290:	1419      	asrs	r1, r3, #16
 8008292:	454e      	cmp	r6, r9
 8008294:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008298:	f84a 3b04 	str.w	r3, [sl], #4
 800829c:	d8e8      	bhi.n	8008270 <__mdiff+0x80>
 800829e:	1b33      	subs	r3, r6, r4
 80082a0:	3b15      	subs	r3, #21
 80082a2:	f023 0303 	bic.w	r3, r3, #3
 80082a6:	3304      	adds	r3, #4
 80082a8:	3415      	adds	r4, #21
 80082aa:	42a6      	cmp	r6, r4
 80082ac:	bf38      	it	cc
 80082ae:	2304      	movcc	r3, #4
 80082b0:	441d      	add	r5, r3
 80082b2:	4473      	add	r3, lr
 80082b4:	469e      	mov	lr, r3
 80082b6:	462e      	mov	r6, r5
 80082b8:	4566      	cmp	r6, ip
 80082ba:	d30e      	bcc.n	80082da <__mdiff+0xea>
 80082bc:	f10c 0203 	add.w	r2, ip, #3
 80082c0:	1b52      	subs	r2, r2, r5
 80082c2:	f022 0203 	bic.w	r2, r2, #3
 80082c6:	3d03      	subs	r5, #3
 80082c8:	45ac      	cmp	ip, r5
 80082ca:	bf38      	it	cc
 80082cc:	2200      	movcc	r2, #0
 80082ce:	4413      	add	r3, r2
 80082d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80082d4:	b17a      	cbz	r2, 80082f6 <__mdiff+0x106>
 80082d6:	6107      	str	r7, [r0, #16]
 80082d8:	e7a4      	b.n	8008224 <__mdiff+0x34>
 80082da:	f856 8b04 	ldr.w	r8, [r6], #4
 80082de:	fa11 f288 	uxtah	r2, r1, r8
 80082e2:	1414      	asrs	r4, r2, #16
 80082e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80082e8:	b292      	uxth	r2, r2
 80082ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80082ee:	f84e 2b04 	str.w	r2, [lr], #4
 80082f2:	1421      	asrs	r1, r4, #16
 80082f4:	e7e0      	b.n	80082b8 <__mdiff+0xc8>
 80082f6:	3f01      	subs	r7, #1
 80082f8:	e7ea      	b.n	80082d0 <__mdiff+0xe0>
 80082fa:	bf00      	nop
 80082fc:	08008b74 	.word	0x08008b74
 8008300:	08008b85 	.word	0x08008b85

08008304 <__d2b>:
 8008304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008308:	460f      	mov	r7, r1
 800830a:	2101      	movs	r1, #1
 800830c:	ec59 8b10 	vmov	r8, r9, d0
 8008310:	4616      	mov	r6, r2
 8008312:	f7ff fcd5 	bl	8007cc0 <_Balloc>
 8008316:	4604      	mov	r4, r0
 8008318:	b930      	cbnz	r0, 8008328 <__d2b+0x24>
 800831a:	4602      	mov	r2, r0
 800831c:	4b24      	ldr	r3, [pc, #144]	; (80083b0 <__d2b+0xac>)
 800831e:	4825      	ldr	r0, [pc, #148]	; (80083b4 <__d2b+0xb0>)
 8008320:	f240 310f 	movw	r1, #783	; 0x30f
 8008324:	f000 fadc 	bl	80088e0 <__assert_func>
 8008328:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800832c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008330:	bb2d      	cbnz	r5, 800837e <__d2b+0x7a>
 8008332:	9301      	str	r3, [sp, #4]
 8008334:	f1b8 0300 	subs.w	r3, r8, #0
 8008338:	d026      	beq.n	8008388 <__d2b+0x84>
 800833a:	4668      	mov	r0, sp
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	f7ff fd87 	bl	8007e50 <__lo0bits>
 8008342:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008346:	b1e8      	cbz	r0, 8008384 <__d2b+0x80>
 8008348:	f1c0 0320 	rsb	r3, r0, #32
 800834c:	fa02 f303 	lsl.w	r3, r2, r3
 8008350:	430b      	orrs	r3, r1
 8008352:	40c2      	lsrs	r2, r0
 8008354:	6163      	str	r3, [r4, #20]
 8008356:	9201      	str	r2, [sp, #4]
 8008358:	9b01      	ldr	r3, [sp, #4]
 800835a:	61a3      	str	r3, [r4, #24]
 800835c:	2b00      	cmp	r3, #0
 800835e:	bf14      	ite	ne
 8008360:	2202      	movne	r2, #2
 8008362:	2201      	moveq	r2, #1
 8008364:	6122      	str	r2, [r4, #16]
 8008366:	b1bd      	cbz	r5, 8008398 <__d2b+0x94>
 8008368:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800836c:	4405      	add	r5, r0
 800836e:	603d      	str	r5, [r7, #0]
 8008370:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008374:	6030      	str	r0, [r6, #0]
 8008376:	4620      	mov	r0, r4
 8008378:	b003      	add	sp, #12
 800837a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800837e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008382:	e7d6      	b.n	8008332 <__d2b+0x2e>
 8008384:	6161      	str	r1, [r4, #20]
 8008386:	e7e7      	b.n	8008358 <__d2b+0x54>
 8008388:	a801      	add	r0, sp, #4
 800838a:	f7ff fd61 	bl	8007e50 <__lo0bits>
 800838e:	9b01      	ldr	r3, [sp, #4]
 8008390:	6163      	str	r3, [r4, #20]
 8008392:	3020      	adds	r0, #32
 8008394:	2201      	movs	r2, #1
 8008396:	e7e5      	b.n	8008364 <__d2b+0x60>
 8008398:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800839c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80083a0:	6038      	str	r0, [r7, #0]
 80083a2:	6918      	ldr	r0, [r3, #16]
 80083a4:	f7ff fd34 	bl	8007e10 <__hi0bits>
 80083a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80083ac:	e7e2      	b.n	8008374 <__d2b+0x70>
 80083ae:	bf00      	nop
 80083b0:	08008b74 	.word	0x08008b74
 80083b4:	08008b85 	.word	0x08008b85

080083b8 <__sfputc_r>:
 80083b8:	6893      	ldr	r3, [r2, #8]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	2b00      	cmp	r3, #0
 80083be:	b410      	push	{r4}
 80083c0:	6093      	str	r3, [r2, #8]
 80083c2:	da08      	bge.n	80083d6 <__sfputc_r+0x1e>
 80083c4:	6994      	ldr	r4, [r2, #24]
 80083c6:	42a3      	cmp	r3, r4
 80083c8:	db01      	blt.n	80083ce <__sfputc_r+0x16>
 80083ca:	290a      	cmp	r1, #10
 80083cc:	d103      	bne.n	80083d6 <__sfputc_r+0x1e>
 80083ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083d2:	f7fe bc6a 	b.w	8006caa <__swbuf_r>
 80083d6:	6813      	ldr	r3, [r2, #0]
 80083d8:	1c58      	adds	r0, r3, #1
 80083da:	6010      	str	r0, [r2, #0]
 80083dc:	7019      	strb	r1, [r3, #0]
 80083de:	4608      	mov	r0, r1
 80083e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <__sfputs_r>:
 80083e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e8:	4606      	mov	r6, r0
 80083ea:	460f      	mov	r7, r1
 80083ec:	4614      	mov	r4, r2
 80083ee:	18d5      	adds	r5, r2, r3
 80083f0:	42ac      	cmp	r4, r5
 80083f2:	d101      	bne.n	80083f8 <__sfputs_r+0x12>
 80083f4:	2000      	movs	r0, #0
 80083f6:	e007      	b.n	8008408 <__sfputs_r+0x22>
 80083f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083fc:	463a      	mov	r2, r7
 80083fe:	4630      	mov	r0, r6
 8008400:	f7ff ffda 	bl	80083b8 <__sfputc_r>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d1f3      	bne.n	80083f0 <__sfputs_r+0xa>
 8008408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800840c <_vfiprintf_r>:
 800840c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008410:	460d      	mov	r5, r1
 8008412:	b09d      	sub	sp, #116	; 0x74
 8008414:	4614      	mov	r4, r2
 8008416:	4698      	mov	r8, r3
 8008418:	4606      	mov	r6, r0
 800841a:	b118      	cbz	r0, 8008424 <_vfiprintf_r+0x18>
 800841c:	6a03      	ldr	r3, [r0, #32]
 800841e:	b90b      	cbnz	r3, 8008424 <_vfiprintf_r+0x18>
 8008420:	f7fe fb5c 	bl	8006adc <__sinit>
 8008424:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008426:	07d9      	lsls	r1, r3, #31
 8008428:	d405      	bmi.n	8008436 <_vfiprintf_r+0x2a>
 800842a:	89ab      	ldrh	r3, [r5, #12]
 800842c:	059a      	lsls	r2, r3, #22
 800842e:	d402      	bmi.n	8008436 <_vfiprintf_r+0x2a>
 8008430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008432:	f7fe fd4c 	bl	8006ece <__retarget_lock_acquire_recursive>
 8008436:	89ab      	ldrh	r3, [r5, #12]
 8008438:	071b      	lsls	r3, r3, #28
 800843a:	d501      	bpl.n	8008440 <_vfiprintf_r+0x34>
 800843c:	692b      	ldr	r3, [r5, #16]
 800843e:	b99b      	cbnz	r3, 8008468 <_vfiprintf_r+0x5c>
 8008440:	4629      	mov	r1, r5
 8008442:	4630      	mov	r0, r6
 8008444:	f7fe fc6e 	bl	8006d24 <__swsetup_r>
 8008448:	b170      	cbz	r0, 8008468 <_vfiprintf_r+0x5c>
 800844a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800844c:	07dc      	lsls	r4, r3, #31
 800844e:	d504      	bpl.n	800845a <_vfiprintf_r+0x4e>
 8008450:	f04f 30ff 	mov.w	r0, #4294967295
 8008454:	b01d      	add	sp, #116	; 0x74
 8008456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845a:	89ab      	ldrh	r3, [r5, #12]
 800845c:	0598      	lsls	r0, r3, #22
 800845e:	d4f7      	bmi.n	8008450 <_vfiprintf_r+0x44>
 8008460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008462:	f7fe fd35 	bl	8006ed0 <__retarget_lock_release_recursive>
 8008466:	e7f3      	b.n	8008450 <_vfiprintf_r+0x44>
 8008468:	2300      	movs	r3, #0
 800846a:	9309      	str	r3, [sp, #36]	; 0x24
 800846c:	2320      	movs	r3, #32
 800846e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008472:	f8cd 800c 	str.w	r8, [sp, #12]
 8008476:	2330      	movs	r3, #48	; 0x30
 8008478:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800862c <_vfiprintf_r+0x220>
 800847c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008480:	f04f 0901 	mov.w	r9, #1
 8008484:	4623      	mov	r3, r4
 8008486:	469a      	mov	sl, r3
 8008488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800848c:	b10a      	cbz	r2, 8008492 <_vfiprintf_r+0x86>
 800848e:	2a25      	cmp	r2, #37	; 0x25
 8008490:	d1f9      	bne.n	8008486 <_vfiprintf_r+0x7a>
 8008492:	ebba 0b04 	subs.w	fp, sl, r4
 8008496:	d00b      	beq.n	80084b0 <_vfiprintf_r+0xa4>
 8008498:	465b      	mov	r3, fp
 800849a:	4622      	mov	r2, r4
 800849c:	4629      	mov	r1, r5
 800849e:	4630      	mov	r0, r6
 80084a0:	f7ff ffa1 	bl	80083e6 <__sfputs_r>
 80084a4:	3001      	adds	r0, #1
 80084a6:	f000 80a9 	beq.w	80085fc <_vfiprintf_r+0x1f0>
 80084aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084ac:	445a      	add	r2, fp
 80084ae:	9209      	str	r2, [sp, #36]	; 0x24
 80084b0:	f89a 3000 	ldrb.w	r3, [sl]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 80a1 	beq.w	80085fc <_vfiprintf_r+0x1f0>
 80084ba:	2300      	movs	r3, #0
 80084bc:	f04f 32ff 	mov.w	r2, #4294967295
 80084c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084c4:	f10a 0a01 	add.w	sl, sl, #1
 80084c8:	9304      	str	r3, [sp, #16]
 80084ca:	9307      	str	r3, [sp, #28]
 80084cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084d0:	931a      	str	r3, [sp, #104]	; 0x68
 80084d2:	4654      	mov	r4, sl
 80084d4:	2205      	movs	r2, #5
 80084d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084da:	4854      	ldr	r0, [pc, #336]	; (800862c <_vfiprintf_r+0x220>)
 80084dc:	f7f7 ff00 	bl	80002e0 <memchr>
 80084e0:	9a04      	ldr	r2, [sp, #16]
 80084e2:	b9d8      	cbnz	r0, 800851c <_vfiprintf_r+0x110>
 80084e4:	06d1      	lsls	r1, r2, #27
 80084e6:	bf44      	itt	mi
 80084e8:	2320      	movmi	r3, #32
 80084ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084ee:	0713      	lsls	r3, r2, #28
 80084f0:	bf44      	itt	mi
 80084f2:	232b      	movmi	r3, #43	; 0x2b
 80084f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084f8:	f89a 3000 	ldrb.w	r3, [sl]
 80084fc:	2b2a      	cmp	r3, #42	; 0x2a
 80084fe:	d015      	beq.n	800852c <_vfiprintf_r+0x120>
 8008500:	9a07      	ldr	r2, [sp, #28]
 8008502:	4654      	mov	r4, sl
 8008504:	2000      	movs	r0, #0
 8008506:	f04f 0c0a 	mov.w	ip, #10
 800850a:	4621      	mov	r1, r4
 800850c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008510:	3b30      	subs	r3, #48	; 0x30
 8008512:	2b09      	cmp	r3, #9
 8008514:	d94d      	bls.n	80085b2 <_vfiprintf_r+0x1a6>
 8008516:	b1b0      	cbz	r0, 8008546 <_vfiprintf_r+0x13a>
 8008518:	9207      	str	r2, [sp, #28]
 800851a:	e014      	b.n	8008546 <_vfiprintf_r+0x13a>
 800851c:	eba0 0308 	sub.w	r3, r0, r8
 8008520:	fa09 f303 	lsl.w	r3, r9, r3
 8008524:	4313      	orrs	r3, r2
 8008526:	9304      	str	r3, [sp, #16]
 8008528:	46a2      	mov	sl, r4
 800852a:	e7d2      	b.n	80084d2 <_vfiprintf_r+0xc6>
 800852c:	9b03      	ldr	r3, [sp, #12]
 800852e:	1d19      	adds	r1, r3, #4
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	9103      	str	r1, [sp, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	bfbb      	ittet	lt
 8008538:	425b      	neglt	r3, r3
 800853a:	f042 0202 	orrlt.w	r2, r2, #2
 800853e:	9307      	strge	r3, [sp, #28]
 8008540:	9307      	strlt	r3, [sp, #28]
 8008542:	bfb8      	it	lt
 8008544:	9204      	strlt	r2, [sp, #16]
 8008546:	7823      	ldrb	r3, [r4, #0]
 8008548:	2b2e      	cmp	r3, #46	; 0x2e
 800854a:	d10c      	bne.n	8008566 <_vfiprintf_r+0x15a>
 800854c:	7863      	ldrb	r3, [r4, #1]
 800854e:	2b2a      	cmp	r3, #42	; 0x2a
 8008550:	d134      	bne.n	80085bc <_vfiprintf_r+0x1b0>
 8008552:	9b03      	ldr	r3, [sp, #12]
 8008554:	1d1a      	adds	r2, r3, #4
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	9203      	str	r2, [sp, #12]
 800855a:	2b00      	cmp	r3, #0
 800855c:	bfb8      	it	lt
 800855e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008562:	3402      	adds	r4, #2
 8008564:	9305      	str	r3, [sp, #20]
 8008566:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800863c <_vfiprintf_r+0x230>
 800856a:	7821      	ldrb	r1, [r4, #0]
 800856c:	2203      	movs	r2, #3
 800856e:	4650      	mov	r0, sl
 8008570:	f7f7 feb6 	bl	80002e0 <memchr>
 8008574:	b138      	cbz	r0, 8008586 <_vfiprintf_r+0x17a>
 8008576:	9b04      	ldr	r3, [sp, #16]
 8008578:	eba0 000a 	sub.w	r0, r0, sl
 800857c:	2240      	movs	r2, #64	; 0x40
 800857e:	4082      	lsls	r2, r0
 8008580:	4313      	orrs	r3, r2
 8008582:	3401      	adds	r4, #1
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800858a:	4829      	ldr	r0, [pc, #164]	; (8008630 <_vfiprintf_r+0x224>)
 800858c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008590:	2206      	movs	r2, #6
 8008592:	f7f7 fea5 	bl	80002e0 <memchr>
 8008596:	2800      	cmp	r0, #0
 8008598:	d03f      	beq.n	800861a <_vfiprintf_r+0x20e>
 800859a:	4b26      	ldr	r3, [pc, #152]	; (8008634 <_vfiprintf_r+0x228>)
 800859c:	bb1b      	cbnz	r3, 80085e6 <_vfiprintf_r+0x1da>
 800859e:	9b03      	ldr	r3, [sp, #12]
 80085a0:	3307      	adds	r3, #7
 80085a2:	f023 0307 	bic.w	r3, r3, #7
 80085a6:	3308      	adds	r3, #8
 80085a8:	9303      	str	r3, [sp, #12]
 80085aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ac:	443b      	add	r3, r7
 80085ae:	9309      	str	r3, [sp, #36]	; 0x24
 80085b0:	e768      	b.n	8008484 <_vfiprintf_r+0x78>
 80085b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80085b6:	460c      	mov	r4, r1
 80085b8:	2001      	movs	r0, #1
 80085ba:	e7a6      	b.n	800850a <_vfiprintf_r+0xfe>
 80085bc:	2300      	movs	r3, #0
 80085be:	3401      	adds	r4, #1
 80085c0:	9305      	str	r3, [sp, #20]
 80085c2:	4619      	mov	r1, r3
 80085c4:	f04f 0c0a 	mov.w	ip, #10
 80085c8:	4620      	mov	r0, r4
 80085ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085ce:	3a30      	subs	r2, #48	; 0x30
 80085d0:	2a09      	cmp	r2, #9
 80085d2:	d903      	bls.n	80085dc <_vfiprintf_r+0x1d0>
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d0c6      	beq.n	8008566 <_vfiprintf_r+0x15a>
 80085d8:	9105      	str	r1, [sp, #20]
 80085da:	e7c4      	b.n	8008566 <_vfiprintf_r+0x15a>
 80085dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80085e0:	4604      	mov	r4, r0
 80085e2:	2301      	movs	r3, #1
 80085e4:	e7f0      	b.n	80085c8 <_vfiprintf_r+0x1bc>
 80085e6:	ab03      	add	r3, sp, #12
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	462a      	mov	r2, r5
 80085ec:	4b12      	ldr	r3, [pc, #72]	; (8008638 <_vfiprintf_r+0x22c>)
 80085ee:	a904      	add	r1, sp, #16
 80085f0:	4630      	mov	r0, r6
 80085f2:	f7fd fe3d 	bl	8006270 <_printf_float>
 80085f6:	4607      	mov	r7, r0
 80085f8:	1c78      	adds	r0, r7, #1
 80085fa:	d1d6      	bne.n	80085aa <_vfiprintf_r+0x19e>
 80085fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085fe:	07d9      	lsls	r1, r3, #31
 8008600:	d405      	bmi.n	800860e <_vfiprintf_r+0x202>
 8008602:	89ab      	ldrh	r3, [r5, #12]
 8008604:	059a      	lsls	r2, r3, #22
 8008606:	d402      	bmi.n	800860e <_vfiprintf_r+0x202>
 8008608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800860a:	f7fe fc61 	bl	8006ed0 <__retarget_lock_release_recursive>
 800860e:	89ab      	ldrh	r3, [r5, #12]
 8008610:	065b      	lsls	r3, r3, #25
 8008612:	f53f af1d 	bmi.w	8008450 <_vfiprintf_r+0x44>
 8008616:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008618:	e71c      	b.n	8008454 <_vfiprintf_r+0x48>
 800861a:	ab03      	add	r3, sp, #12
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	462a      	mov	r2, r5
 8008620:	4b05      	ldr	r3, [pc, #20]	; (8008638 <_vfiprintf_r+0x22c>)
 8008622:	a904      	add	r1, sp, #16
 8008624:	4630      	mov	r0, r6
 8008626:	f7fe f8ab 	bl	8006780 <_printf_i>
 800862a:	e7e4      	b.n	80085f6 <_vfiprintf_r+0x1ea>
 800862c:	08008cdc 	.word	0x08008cdc
 8008630:	08008ce6 	.word	0x08008ce6
 8008634:	08006271 	.word	0x08006271
 8008638:	080083e7 	.word	0x080083e7
 800863c:	08008ce2 	.word	0x08008ce2

08008640 <__sflush_r>:
 8008640:	898a      	ldrh	r2, [r1, #12]
 8008642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008646:	4605      	mov	r5, r0
 8008648:	0710      	lsls	r0, r2, #28
 800864a:	460c      	mov	r4, r1
 800864c:	d458      	bmi.n	8008700 <__sflush_r+0xc0>
 800864e:	684b      	ldr	r3, [r1, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	dc05      	bgt.n	8008660 <__sflush_r+0x20>
 8008654:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008656:	2b00      	cmp	r3, #0
 8008658:	dc02      	bgt.n	8008660 <__sflush_r+0x20>
 800865a:	2000      	movs	r0, #0
 800865c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008662:	2e00      	cmp	r6, #0
 8008664:	d0f9      	beq.n	800865a <__sflush_r+0x1a>
 8008666:	2300      	movs	r3, #0
 8008668:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800866c:	682f      	ldr	r7, [r5, #0]
 800866e:	6a21      	ldr	r1, [r4, #32]
 8008670:	602b      	str	r3, [r5, #0]
 8008672:	d032      	beq.n	80086da <__sflush_r+0x9a>
 8008674:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008676:	89a3      	ldrh	r3, [r4, #12]
 8008678:	075a      	lsls	r2, r3, #29
 800867a:	d505      	bpl.n	8008688 <__sflush_r+0x48>
 800867c:	6863      	ldr	r3, [r4, #4]
 800867e:	1ac0      	subs	r0, r0, r3
 8008680:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008682:	b10b      	cbz	r3, 8008688 <__sflush_r+0x48>
 8008684:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008686:	1ac0      	subs	r0, r0, r3
 8008688:	2300      	movs	r3, #0
 800868a:	4602      	mov	r2, r0
 800868c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800868e:	6a21      	ldr	r1, [r4, #32]
 8008690:	4628      	mov	r0, r5
 8008692:	47b0      	blx	r6
 8008694:	1c43      	adds	r3, r0, #1
 8008696:	89a3      	ldrh	r3, [r4, #12]
 8008698:	d106      	bne.n	80086a8 <__sflush_r+0x68>
 800869a:	6829      	ldr	r1, [r5, #0]
 800869c:	291d      	cmp	r1, #29
 800869e:	d82b      	bhi.n	80086f8 <__sflush_r+0xb8>
 80086a0:	4a29      	ldr	r2, [pc, #164]	; (8008748 <__sflush_r+0x108>)
 80086a2:	410a      	asrs	r2, r1
 80086a4:	07d6      	lsls	r6, r2, #31
 80086a6:	d427      	bmi.n	80086f8 <__sflush_r+0xb8>
 80086a8:	2200      	movs	r2, #0
 80086aa:	6062      	str	r2, [r4, #4]
 80086ac:	04d9      	lsls	r1, r3, #19
 80086ae:	6922      	ldr	r2, [r4, #16]
 80086b0:	6022      	str	r2, [r4, #0]
 80086b2:	d504      	bpl.n	80086be <__sflush_r+0x7e>
 80086b4:	1c42      	adds	r2, r0, #1
 80086b6:	d101      	bne.n	80086bc <__sflush_r+0x7c>
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	b903      	cbnz	r3, 80086be <__sflush_r+0x7e>
 80086bc:	6560      	str	r0, [r4, #84]	; 0x54
 80086be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086c0:	602f      	str	r7, [r5, #0]
 80086c2:	2900      	cmp	r1, #0
 80086c4:	d0c9      	beq.n	800865a <__sflush_r+0x1a>
 80086c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086ca:	4299      	cmp	r1, r3
 80086cc:	d002      	beq.n	80086d4 <__sflush_r+0x94>
 80086ce:	4628      	mov	r0, r5
 80086d0:	f7ff f9f6 	bl	8007ac0 <_free_r>
 80086d4:	2000      	movs	r0, #0
 80086d6:	6360      	str	r0, [r4, #52]	; 0x34
 80086d8:	e7c0      	b.n	800865c <__sflush_r+0x1c>
 80086da:	2301      	movs	r3, #1
 80086dc:	4628      	mov	r0, r5
 80086de:	47b0      	blx	r6
 80086e0:	1c41      	adds	r1, r0, #1
 80086e2:	d1c8      	bne.n	8008676 <__sflush_r+0x36>
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0c5      	beq.n	8008676 <__sflush_r+0x36>
 80086ea:	2b1d      	cmp	r3, #29
 80086ec:	d001      	beq.n	80086f2 <__sflush_r+0xb2>
 80086ee:	2b16      	cmp	r3, #22
 80086f0:	d101      	bne.n	80086f6 <__sflush_r+0xb6>
 80086f2:	602f      	str	r7, [r5, #0]
 80086f4:	e7b1      	b.n	800865a <__sflush_r+0x1a>
 80086f6:	89a3      	ldrh	r3, [r4, #12]
 80086f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086fc:	81a3      	strh	r3, [r4, #12]
 80086fe:	e7ad      	b.n	800865c <__sflush_r+0x1c>
 8008700:	690f      	ldr	r7, [r1, #16]
 8008702:	2f00      	cmp	r7, #0
 8008704:	d0a9      	beq.n	800865a <__sflush_r+0x1a>
 8008706:	0793      	lsls	r3, r2, #30
 8008708:	680e      	ldr	r6, [r1, #0]
 800870a:	bf08      	it	eq
 800870c:	694b      	ldreq	r3, [r1, #20]
 800870e:	600f      	str	r7, [r1, #0]
 8008710:	bf18      	it	ne
 8008712:	2300      	movne	r3, #0
 8008714:	eba6 0807 	sub.w	r8, r6, r7
 8008718:	608b      	str	r3, [r1, #8]
 800871a:	f1b8 0f00 	cmp.w	r8, #0
 800871e:	dd9c      	ble.n	800865a <__sflush_r+0x1a>
 8008720:	6a21      	ldr	r1, [r4, #32]
 8008722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008724:	4643      	mov	r3, r8
 8008726:	463a      	mov	r2, r7
 8008728:	4628      	mov	r0, r5
 800872a:	47b0      	blx	r6
 800872c:	2800      	cmp	r0, #0
 800872e:	dc06      	bgt.n	800873e <__sflush_r+0xfe>
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008736:	81a3      	strh	r3, [r4, #12]
 8008738:	f04f 30ff 	mov.w	r0, #4294967295
 800873c:	e78e      	b.n	800865c <__sflush_r+0x1c>
 800873e:	4407      	add	r7, r0
 8008740:	eba8 0800 	sub.w	r8, r8, r0
 8008744:	e7e9      	b.n	800871a <__sflush_r+0xda>
 8008746:	bf00      	nop
 8008748:	dfbffffe 	.word	0xdfbffffe

0800874c <_fflush_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	690b      	ldr	r3, [r1, #16]
 8008750:	4605      	mov	r5, r0
 8008752:	460c      	mov	r4, r1
 8008754:	b913      	cbnz	r3, 800875c <_fflush_r+0x10>
 8008756:	2500      	movs	r5, #0
 8008758:	4628      	mov	r0, r5
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	b118      	cbz	r0, 8008766 <_fflush_r+0x1a>
 800875e:	6a03      	ldr	r3, [r0, #32]
 8008760:	b90b      	cbnz	r3, 8008766 <_fflush_r+0x1a>
 8008762:	f7fe f9bb 	bl	8006adc <__sinit>
 8008766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0f3      	beq.n	8008756 <_fflush_r+0xa>
 800876e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008770:	07d0      	lsls	r0, r2, #31
 8008772:	d404      	bmi.n	800877e <_fflush_r+0x32>
 8008774:	0599      	lsls	r1, r3, #22
 8008776:	d402      	bmi.n	800877e <_fflush_r+0x32>
 8008778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800877a:	f7fe fba8 	bl	8006ece <__retarget_lock_acquire_recursive>
 800877e:	4628      	mov	r0, r5
 8008780:	4621      	mov	r1, r4
 8008782:	f7ff ff5d 	bl	8008640 <__sflush_r>
 8008786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008788:	07da      	lsls	r2, r3, #31
 800878a:	4605      	mov	r5, r0
 800878c:	d4e4      	bmi.n	8008758 <_fflush_r+0xc>
 800878e:	89a3      	ldrh	r3, [r4, #12]
 8008790:	059b      	lsls	r3, r3, #22
 8008792:	d4e1      	bmi.n	8008758 <_fflush_r+0xc>
 8008794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008796:	f7fe fb9b 	bl	8006ed0 <__retarget_lock_release_recursive>
 800879a:	e7dd      	b.n	8008758 <_fflush_r+0xc>

0800879c <__swhatbuf_r>:
 800879c:	b570      	push	{r4, r5, r6, lr}
 800879e:	460c      	mov	r4, r1
 80087a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a4:	2900      	cmp	r1, #0
 80087a6:	b096      	sub	sp, #88	; 0x58
 80087a8:	4615      	mov	r5, r2
 80087aa:	461e      	mov	r6, r3
 80087ac:	da0d      	bge.n	80087ca <__swhatbuf_r+0x2e>
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80087b4:	f04f 0100 	mov.w	r1, #0
 80087b8:	bf0c      	ite	eq
 80087ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80087be:	2340      	movne	r3, #64	; 0x40
 80087c0:	2000      	movs	r0, #0
 80087c2:	6031      	str	r1, [r6, #0]
 80087c4:	602b      	str	r3, [r5, #0]
 80087c6:	b016      	add	sp, #88	; 0x58
 80087c8:	bd70      	pop	{r4, r5, r6, pc}
 80087ca:	466a      	mov	r2, sp
 80087cc:	f000 f848 	bl	8008860 <_fstat_r>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	dbec      	blt.n	80087ae <__swhatbuf_r+0x12>
 80087d4:	9901      	ldr	r1, [sp, #4]
 80087d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80087da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80087de:	4259      	negs	r1, r3
 80087e0:	4159      	adcs	r1, r3
 80087e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087e6:	e7eb      	b.n	80087c0 <__swhatbuf_r+0x24>

080087e8 <__smakebuf_r>:
 80087e8:	898b      	ldrh	r3, [r1, #12]
 80087ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087ec:	079d      	lsls	r5, r3, #30
 80087ee:	4606      	mov	r6, r0
 80087f0:	460c      	mov	r4, r1
 80087f2:	d507      	bpl.n	8008804 <__smakebuf_r+0x1c>
 80087f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087f8:	6023      	str	r3, [r4, #0]
 80087fa:	6123      	str	r3, [r4, #16]
 80087fc:	2301      	movs	r3, #1
 80087fe:	6163      	str	r3, [r4, #20]
 8008800:	b002      	add	sp, #8
 8008802:	bd70      	pop	{r4, r5, r6, pc}
 8008804:	ab01      	add	r3, sp, #4
 8008806:	466a      	mov	r2, sp
 8008808:	f7ff ffc8 	bl	800879c <__swhatbuf_r>
 800880c:	9900      	ldr	r1, [sp, #0]
 800880e:	4605      	mov	r5, r0
 8008810:	4630      	mov	r0, r6
 8008812:	f7ff f9c9 	bl	8007ba8 <_malloc_r>
 8008816:	b948      	cbnz	r0, 800882c <__smakebuf_r+0x44>
 8008818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800881c:	059a      	lsls	r2, r3, #22
 800881e:	d4ef      	bmi.n	8008800 <__smakebuf_r+0x18>
 8008820:	f023 0303 	bic.w	r3, r3, #3
 8008824:	f043 0302 	orr.w	r3, r3, #2
 8008828:	81a3      	strh	r3, [r4, #12]
 800882a:	e7e3      	b.n	80087f4 <__smakebuf_r+0xc>
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	6020      	str	r0, [r4, #0]
 8008830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008834:	81a3      	strh	r3, [r4, #12]
 8008836:	9b00      	ldr	r3, [sp, #0]
 8008838:	6163      	str	r3, [r4, #20]
 800883a:	9b01      	ldr	r3, [sp, #4]
 800883c:	6120      	str	r0, [r4, #16]
 800883e:	b15b      	cbz	r3, 8008858 <__smakebuf_r+0x70>
 8008840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008844:	4630      	mov	r0, r6
 8008846:	f000 f81d 	bl	8008884 <_isatty_r>
 800884a:	b128      	cbz	r0, 8008858 <__smakebuf_r+0x70>
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	f023 0303 	bic.w	r3, r3, #3
 8008852:	f043 0301 	orr.w	r3, r3, #1
 8008856:	81a3      	strh	r3, [r4, #12]
 8008858:	89a3      	ldrh	r3, [r4, #12]
 800885a:	431d      	orrs	r5, r3
 800885c:	81a5      	strh	r5, [r4, #12]
 800885e:	e7cf      	b.n	8008800 <__smakebuf_r+0x18>

08008860 <_fstat_r>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	4d07      	ldr	r5, [pc, #28]	; (8008880 <_fstat_r+0x20>)
 8008864:	2300      	movs	r3, #0
 8008866:	4604      	mov	r4, r0
 8008868:	4608      	mov	r0, r1
 800886a:	4611      	mov	r1, r2
 800886c:	602b      	str	r3, [r5, #0]
 800886e:	f7f8 fc20 	bl	80010b2 <_fstat>
 8008872:	1c43      	adds	r3, r0, #1
 8008874:	d102      	bne.n	800887c <_fstat_r+0x1c>
 8008876:	682b      	ldr	r3, [r5, #0]
 8008878:	b103      	cbz	r3, 800887c <_fstat_r+0x1c>
 800887a:	6023      	str	r3, [r4, #0]
 800887c:	bd38      	pop	{r3, r4, r5, pc}
 800887e:	bf00      	nop
 8008880:	24000450 	.word	0x24000450

08008884 <_isatty_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4d06      	ldr	r5, [pc, #24]	; (80088a0 <_isatty_r+0x1c>)
 8008888:	2300      	movs	r3, #0
 800888a:	4604      	mov	r4, r0
 800888c:	4608      	mov	r0, r1
 800888e:	602b      	str	r3, [r5, #0]
 8008890:	f7f8 fc1f 	bl	80010d2 <_isatty>
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	d102      	bne.n	800889e <_isatty_r+0x1a>
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	b103      	cbz	r3, 800889e <_isatty_r+0x1a>
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	24000450 	.word	0x24000450

080088a4 <_sbrk_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	4d06      	ldr	r5, [pc, #24]	; (80088c0 <_sbrk_r+0x1c>)
 80088a8:	2300      	movs	r3, #0
 80088aa:	4604      	mov	r4, r0
 80088ac:	4608      	mov	r0, r1
 80088ae:	602b      	str	r3, [r5, #0]
 80088b0:	f7f8 fc28 	bl	8001104 <_sbrk>
 80088b4:	1c43      	adds	r3, r0, #1
 80088b6:	d102      	bne.n	80088be <_sbrk_r+0x1a>
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	b103      	cbz	r3, 80088be <_sbrk_r+0x1a>
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	24000450 	.word	0x24000450

080088c4 <memcpy>:
 80088c4:	440a      	add	r2, r1
 80088c6:	4291      	cmp	r1, r2
 80088c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80088cc:	d100      	bne.n	80088d0 <memcpy+0xc>
 80088ce:	4770      	bx	lr
 80088d0:	b510      	push	{r4, lr}
 80088d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088da:	4291      	cmp	r1, r2
 80088dc:	d1f9      	bne.n	80088d2 <memcpy+0xe>
 80088de:	bd10      	pop	{r4, pc}

080088e0 <__assert_func>:
 80088e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088e2:	4614      	mov	r4, r2
 80088e4:	461a      	mov	r2, r3
 80088e6:	4b09      	ldr	r3, [pc, #36]	; (800890c <__assert_func+0x2c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4605      	mov	r5, r0
 80088ec:	68d8      	ldr	r0, [r3, #12]
 80088ee:	b14c      	cbz	r4, 8008904 <__assert_func+0x24>
 80088f0:	4b07      	ldr	r3, [pc, #28]	; (8008910 <__assert_func+0x30>)
 80088f2:	9100      	str	r1, [sp, #0]
 80088f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088f8:	4906      	ldr	r1, [pc, #24]	; (8008914 <__assert_func+0x34>)
 80088fa:	462b      	mov	r3, r5
 80088fc:	f000 f844 	bl	8008988 <fiprintf>
 8008900:	f000 f854 	bl	80089ac <abort>
 8008904:	4b04      	ldr	r3, [pc, #16]	; (8008918 <__assert_func+0x38>)
 8008906:	461c      	mov	r4, r3
 8008908:	e7f3      	b.n	80088f2 <__assert_func+0x12>
 800890a:	bf00      	nop
 800890c:	24000068 	.word	0x24000068
 8008910:	08008cf7 	.word	0x08008cf7
 8008914:	08008d04 	.word	0x08008d04
 8008918:	08008d32 	.word	0x08008d32

0800891c <_calloc_r>:
 800891c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800891e:	fba1 2402 	umull	r2, r4, r1, r2
 8008922:	b94c      	cbnz	r4, 8008938 <_calloc_r+0x1c>
 8008924:	4611      	mov	r1, r2
 8008926:	9201      	str	r2, [sp, #4]
 8008928:	f7ff f93e 	bl	8007ba8 <_malloc_r>
 800892c:	9a01      	ldr	r2, [sp, #4]
 800892e:	4605      	mov	r5, r0
 8008930:	b930      	cbnz	r0, 8008940 <_calloc_r+0x24>
 8008932:	4628      	mov	r0, r5
 8008934:	b003      	add	sp, #12
 8008936:	bd30      	pop	{r4, r5, pc}
 8008938:	220c      	movs	r2, #12
 800893a:	6002      	str	r2, [r0, #0]
 800893c:	2500      	movs	r5, #0
 800893e:	e7f8      	b.n	8008932 <_calloc_r+0x16>
 8008940:	4621      	mov	r1, r4
 8008942:	f7fe fa47 	bl	8006dd4 <memset>
 8008946:	e7f4      	b.n	8008932 <_calloc_r+0x16>

08008948 <__ascii_mbtowc>:
 8008948:	b082      	sub	sp, #8
 800894a:	b901      	cbnz	r1, 800894e <__ascii_mbtowc+0x6>
 800894c:	a901      	add	r1, sp, #4
 800894e:	b142      	cbz	r2, 8008962 <__ascii_mbtowc+0x1a>
 8008950:	b14b      	cbz	r3, 8008966 <__ascii_mbtowc+0x1e>
 8008952:	7813      	ldrb	r3, [r2, #0]
 8008954:	600b      	str	r3, [r1, #0]
 8008956:	7812      	ldrb	r2, [r2, #0]
 8008958:	1e10      	subs	r0, r2, #0
 800895a:	bf18      	it	ne
 800895c:	2001      	movne	r0, #1
 800895e:	b002      	add	sp, #8
 8008960:	4770      	bx	lr
 8008962:	4610      	mov	r0, r2
 8008964:	e7fb      	b.n	800895e <__ascii_mbtowc+0x16>
 8008966:	f06f 0001 	mvn.w	r0, #1
 800896a:	e7f8      	b.n	800895e <__ascii_mbtowc+0x16>

0800896c <__ascii_wctomb>:
 800896c:	b149      	cbz	r1, 8008982 <__ascii_wctomb+0x16>
 800896e:	2aff      	cmp	r2, #255	; 0xff
 8008970:	bf85      	ittet	hi
 8008972:	238a      	movhi	r3, #138	; 0x8a
 8008974:	6003      	strhi	r3, [r0, #0]
 8008976:	700a      	strbls	r2, [r1, #0]
 8008978:	f04f 30ff 	movhi.w	r0, #4294967295
 800897c:	bf98      	it	ls
 800897e:	2001      	movls	r0, #1
 8008980:	4770      	bx	lr
 8008982:	4608      	mov	r0, r1
 8008984:	4770      	bx	lr
	...

08008988 <fiprintf>:
 8008988:	b40e      	push	{r1, r2, r3}
 800898a:	b503      	push	{r0, r1, lr}
 800898c:	4601      	mov	r1, r0
 800898e:	ab03      	add	r3, sp, #12
 8008990:	4805      	ldr	r0, [pc, #20]	; (80089a8 <fiprintf+0x20>)
 8008992:	f853 2b04 	ldr.w	r2, [r3], #4
 8008996:	6800      	ldr	r0, [r0, #0]
 8008998:	9301      	str	r3, [sp, #4]
 800899a:	f7ff fd37 	bl	800840c <_vfiprintf_r>
 800899e:	b002      	add	sp, #8
 80089a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089a4:	b003      	add	sp, #12
 80089a6:	4770      	bx	lr
 80089a8:	24000068 	.word	0x24000068

080089ac <abort>:
 80089ac:	b508      	push	{r3, lr}
 80089ae:	2006      	movs	r0, #6
 80089b0:	f000 f82c 	bl	8008a0c <raise>
 80089b4:	2001      	movs	r0, #1
 80089b6:	f7f8 fb2d 	bl	8001014 <_exit>

080089ba <_raise_r>:
 80089ba:	291f      	cmp	r1, #31
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	4604      	mov	r4, r0
 80089c0:	460d      	mov	r5, r1
 80089c2:	d904      	bls.n	80089ce <_raise_r+0x14>
 80089c4:	2316      	movs	r3, #22
 80089c6:	6003      	str	r3, [r0, #0]
 80089c8:	f04f 30ff 	mov.w	r0, #4294967295
 80089cc:	bd38      	pop	{r3, r4, r5, pc}
 80089ce:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80089d0:	b112      	cbz	r2, 80089d8 <_raise_r+0x1e>
 80089d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089d6:	b94b      	cbnz	r3, 80089ec <_raise_r+0x32>
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 f831 	bl	8008a40 <_getpid_r>
 80089de:	462a      	mov	r2, r5
 80089e0:	4601      	mov	r1, r0
 80089e2:	4620      	mov	r0, r4
 80089e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089e8:	f000 b818 	b.w	8008a1c <_kill_r>
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d00a      	beq.n	8008a06 <_raise_r+0x4c>
 80089f0:	1c59      	adds	r1, r3, #1
 80089f2:	d103      	bne.n	80089fc <_raise_r+0x42>
 80089f4:	2316      	movs	r3, #22
 80089f6:	6003      	str	r3, [r0, #0]
 80089f8:	2001      	movs	r0, #1
 80089fa:	e7e7      	b.n	80089cc <_raise_r+0x12>
 80089fc:	2400      	movs	r4, #0
 80089fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a02:	4628      	mov	r0, r5
 8008a04:	4798      	blx	r3
 8008a06:	2000      	movs	r0, #0
 8008a08:	e7e0      	b.n	80089cc <_raise_r+0x12>
	...

08008a0c <raise>:
 8008a0c:	4b02      	ldr	r3, [pc, #8]	; (8008a18 <raise+0xc>)
 8008a0e:	4601      	mov	r1, r0
 8008a10:	6818      	ldr	r0, [r3, #0]
 8008a12:	f7ff bfd2 	b.w	80089ba <_raise_r>
 8008a16:	bf00      	nop
 8008a18:	24000068 	.word	0x24000068

08008a1c <_kill_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4d07      	ldr	r5, [pc, #28]	; (8008a3c <_kill_r+0x20>)
 8008a20:	2300      	movs	r3, #0
 8008a22:	4604      	mov	r4, r0
 8008a24:	4608      	mov	r0, r1
 8008a26:	4611      	mov	r1, r2
 8008a28:	602b      	str	r3, [r5, #0]
 8008a2a:	f7f8 fae3 	bl	8000ff4 <_kill>
 8008a2e:	1c43      	adds	r3, r0, #1
 8008a30:	d102      	bne.n	8008a38 <_kill_r+0x1c>
 8008a32:	682b      	ldr	r3, [r5, #0]
 8008a34:	b103      	cbz	r3, 8008a38 <_kill_r+0x1c>
 8008a36:	6023      	str	r3, [r4, #0]
 8008a38:	bd38      	pop	{r3, r4, r5, pc}
 8008a3a:	bf00      	nop
 8008a3c:	24000450 	.word	0x24000450

08008a40 <_getpid_r>:
 8008a40:	f7f8 bad0 	b.w	8000fe4 <_getpid>

08008a44 <_init>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	bf00      	nop
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr

08008a50 <_fini>:
 8008a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a52:	bf00      	nop
 8008a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a56:	bc08      	pop	{r3}
 8008a58:	469e      	mov	lr, r3
 8008a5a:	4770      	bx	lr
