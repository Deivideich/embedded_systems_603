
STM32H7_IMU_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008efc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  080091a0  080091a0  000191a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800964c  0800964c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800964c  0800964c  0001964c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009654  08009654  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009654  08009654  00019654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009658  08009658  00019658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  24000000  0800965c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  240001f0  0800984c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000354  0800984c  00020354  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133d3  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248f  00000000  00000000  000335f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00035a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00036830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003acb2  00000000  00000000  000374f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012496  00000000  00000000  000721aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00180549  00000000  00000000  00084640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00204b89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004704  00000000  00000000  00204bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f0 	.word	0x240001f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009184 	.word	0x08009184

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f4 	.word	0x240001f4
 80002dc:	08009184 	.word	0x08009184

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b09a      	sub	sp, #104	; 0x68
 80007c4:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ca:	657b      	str	r3, [r7, #84]	; 0x54
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007cc:	bf00      	nop
 80007ce:	4bbc      	ldr	r3, [pc, #752]	; (8000ac0 <main+0x300>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <main+0x24>
 80007da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	657a      	str	r2, [r7, #84]	; 0x54
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dcf4      	bgt.n	80007ce <main+0xe>
  if ( timeout < 0 )
 80007e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	da01      	bge.n	80007ee <main+0x2e>
  {
  Error_Handler();
 80007ea:	f000 fdc3 	bl	8001374 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 ffd7 	bl	80017a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f977 	bl	8000ae4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007f6:	4bb2      	ldr	r3, [pc, #712]	; (8000ac0 <main+0x300>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4ab0      	ldr	r2, [pc, #704]	; (8000ac0 <main+0x300>)
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4bae      	ldr	r3, [pc, #696]	; (8000ac0 <main+0x300>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000814:	2000      	movs	r0, #0
 8000816:	f001 fb33 	bl	8001e80 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800081a:	2100      	movs	r1, #0
 800081c:	2000      	movs	r0, #0
 800081e:	f001 fb49 	bl	8001eb4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000826:	657b      	str	r3, [r7, #84]	; 0x54
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000828:	bf00      	nop
 800082a:	4ba5      	ldr	r3, [pc, #660]	; (8000ac0 <main+0x300>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <main+0x80>
 8000836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	657a      	str	r2, [r7, #84]	; 0x54
 800083c:	2b00      	cmp	r3, #0
 800083e:	dcf4      	bgt.n	800082a <main+0x6a>
if ( timeout < 0 )
 8000840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000842:	2b00      	cmp	r3, #0
 8000844:	da01      	bge.n	800084a <main+0x8a>
{
Error_Handler();
 8000846:	f000 fd95 	bl	8001374 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 fa6b 	bl	8000d24 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800084e:	f000 fa1d 	bl	8000c8c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000852:	f000 f9c3 	bl	8000bdc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int16_t acc_x, acc_y, acc_z;
  int16_t gyro_x, gyro_y, gyro_z;
  //int16_t mag_x, mag_y, mag_z;
  uint8_t imu_data[14];
  int16_t mag_count[3] = {0, 0, 0};  // Stores the 16-bit signed magnetometer sensor output
 8000856:	2300      	movs	r3, #0
 8000858:	80bb      	strh	r3, [r7, #4]
 800085a:	2300      	movs	r3, #0
 800085c:	80fb      	strh	r3, [r7, #6]
 800085e:	2300      	movs	r3, #0
 8000860:	813b      	strh	r3, [r7, #8]
  mpu9250_write_reg(27, 0x00);
 8000862:	2100      	movs	r1, #0
 8000864:	201b      	movs	r0, #27
 8000866:	f000 faf5 	bl	8000e54 <mpu9250_write_reg>
  HAL_Delay(100);
 800086a:	2064      	movs	r0, #100	; 0x64
 800086c:	f001 f82a 	bl	80018c4 <HAL_Delay>
  mpu9250_write_reg(28, 0x08);
 8000870:	2108      	movs	r1, #8
 8000872:	201c      	movs	r0, #28
 8000874:	f000 faee 	bl	8000e54 <mpu9250_write_reg>
  HAL_Delay(100);
 8000878:	2064      	movs	r0, #100	; 0x64
 800087a:	f001 f823 	bl	80018c4 <HAL_Delay>
  float a_conv = 4.0 / 32768;
 800087e:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
 8000882:	647b      	str	r3, [r7, #68]	; 0x44
  float g_conv = 250.0 / 32768.0;
 8000884:	4b8f      	ldr	r3, [pc, #572]	; (8000ac4 <main+0x304>)
 8000886:	643b      	str	r3, [r7, #64]	; 0x40



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Starting !\r\n");
 8000888:	488f      	ldr	r0, [pc, #572]	; (8000ac8 <main+0x308>)
 800088a:	f006 fc49 	bl	8007120 <puts>
  calibrate_mag();
 800088e:	f000 fbfd 	bl	800108c <calibrate_mag>
  while (1)
  {
	  HAL_Delay(5);
 8000892:	2005      	movs	r0, #5
 8000894:	f001 f816 	bl	80018c4 <HAL_Delay>
	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	220e      	movs	r2, #14
 800089e:	4619      	mov	r1, r3
 80008a0:	203b      	movs	r0, #59	; 0x3b
 80008a2:	f000 fafd 	bl	8000ea0 <mpu9250_read_reg>
	  acc_x = ((int16_t)imu_data[0]<<8) + imu_data[1];
 80008a6:	7b3b      	ldrb	r3, [r7, #12]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	7b7b      	ldrb	r3, [r7, #13]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	4413      	add	r3, r2
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  acc_y = ((int16_t)imu_data[2]<<8) + imu_data[3];
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	b29a      	uxth	r2, r3
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	4413      	add	r3, r2
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  acc_z = ((int16_t)imu_data[4]<<8) + imu_data[5];
 80008ca:	7c3b      	ldrb	r3, [r7, #16]
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	7c7b      	ldrb	r3, [r7, #17]
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	4413      	add	r3, r2
 80008d8:	b29b      	uxth	r3, r3
 80008da:	877b      	strh	r3, [r7, #58]	; 0x3a

	  mpu9250_read_reg(67, imu_data, sizeof(imu_data));
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	220e      	movs	r2, #14
 80008e2:	4619      	mov	r1, r3
 80008e4:	2043      	movs	r0, #67	; 0x43
 80008e6:	f000 fadb 	bl	8000ea0 <mpu9250_read_reg>
	  gyro_x = ((int16_t)imu_data[0]<<8) + imu_data[1];
 80008ea:	7b3b      	ldrb	r3, [r7, #12]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	7b7b      	ldrb	r3, [r7, #13]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	4413      	add	r3, r2
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	873b      	strh	r3, [r7, #56]	; 0x38
	  gyro_y = ((int16_t)imu_data[2]<<8) + imu_data[3];
 80008fc:	7bbb      	ldrb	r3, [r7, #14]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	021b      	lsls	r3, r3, #8
 8000902:	b29a      	uxth	r2, r3
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	b29b      	uxth	r3, r3
 8000908:	4413      	add	r3, r2
 800090a:	b29b      	uxth	r3, r3
 800090c:	86fb      	strh	r3, [r7, #54]	; 0x36
	  gyro_z = ((int16_t)imu_data[4]<<8) + imu_data[5];
 800090e:	7c3b      	ldrb	r3, [r7, #16]
 8000910:	b29b      	uxth	r3, r3
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	b29a      	uxth	r2, r3
 8000916:	7c7b      	ldrb	r3, [r7, #17]
 8000918:	b29b      	uxth	r3, r3
 800091a:	4413      	add	r3, r2
 800091c:	b29b      	uxth	r3, r3
 800091e:	86bb      	strh	r3, [r7, #52]	; 0x34

	  if(read_mag(mag_count)){
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	4618      	mov	r0, r3
 8000924:	f000 faea 	bl	8000efc <read_mag>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d054      	beq.n	80009d8 <main+0x218>
		  m_x=(float)(mag_count[0]*mag_resolution*mag_bias_factory[0]-mag_bias[0])*mag_scale[0];  // get actual magnetometer value, this depends on scale being set
 800092e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000932:	ee07 3a90 	vmov	s15, r3
 8000936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800093a:	4b64      	ldr	r3, [pc, #400]	; (8000acc <main+0x30c>)
 800093c:	edd3 7a00 	vldr	s15, [r3]
 8000940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000944:	4b62      	ldr	r3, [pc, #392]	; (8000ad0 <main+0x310>)
 8000946:	edd3 7a00 	vldr	s15, [r3]
 800094a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800094e:	4b61      	ldr	r3, [pc, #388]	; (8000ad4 <main+0x314>)
 8000950:	edd3 7a00 	vldr	s15, [r3]
 8000954:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000958:	4b5f      	ldr	r3, [pc, #380]	; (8000ad8 <main+0x318>)
 800095a:	edd3 7a00 	vldr	s15, [r3]
 800095e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000962:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		  m_y=(float)(mag_count[1]*mag_resolution*mag_bias_factory[1]-mag_bias[1])*mag_scale[1];
 8000966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800096a:	ee07 3a90 	vmov	s15, r3
 800096e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000972:	4b56      	ldr	r3, [pc, #344]	; (8000acc <main+0x30c>)
 8000974:	edd3 7a00 	vldr	s15, [r3]
 8000978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800097c:	4b54      	ldr	r3, [pc, #336]	; (8000ad0 <main+0x310>)
 800097e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000982:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000986:	4b53      	ldr	r3, [pc, #332]	; (8000ad4 <main+0x314>)
 8000988:	edd3 7a01 	vldr	s15, [r3, #4]
 800098c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000990:	4b51      	ldr	r3, [pc, #324]	; (8000ad8 <main+0x318>)
 8000992:	edd3 7a01 	vldr	s15, [r3, #4]
 8000996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800099a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		  m_z=(float)(mag_count[2]*mag_resolution*mag_bias_factory[2]-mag_bias[2])*mag_scale[2];
 800099e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80009a2:	ee07 3a90 	vmov	s15, r3
 80009a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009aa:	4b48      	ldr	r3, [pc, #288]	; (8000acc <main+0x30c>)
 80009ac:	edd3 7a00 	vldr	s15, [r3]
 80009b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009b4:	4b46      	ldr	r3, [pc, #280]	; (8000ad0 <main+0x310>)
 80009b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80009ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009be:	4b45      	ldr	r3, [pc, #276]	; (8000ad4 <main+0x314>)
 80009c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80009c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009c8:	4b43      	ldr	r3, [pc, #268]	; (8000ad8 <main+0x318>)
 80009ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80009ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009d2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 80009d6:	e002      	b.n	80009de <main+0x21e>
	  } else {
		  printf("huh\r\n");
 80009d8:	4840      	ldr	r0, [pc, #256]	; (8000adc <main+0x31c>)
 80009da:	f006 fba1 	bl	8007120 <puts>
	  }

	  a_x = (float)(acc_x *  a_conv - 1);
 80009de:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80009e2:	ee07 3a90 	vmov	s15, r3
 80009e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80009ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009fa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	  a_y = (float)(acc_y *  a_conv + 0.27);
 80009fe:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000a02:	ee07 3a90 	vmov	s15, r3
 8000a06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a0a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a16:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8000ab8 <main+0x2f8>
 8000a1a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a22:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  a_z = (float)(acc_z *  a_conv);
 8000a26:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8000a2a:	ee07 3a90 	vmov	s15, r3
 8000a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a32:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a3a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	  g_x = (float)(gyro_x *  g_conv);
 8000a3e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000a42:	ee07 3a90 	vmov	s15, r3
 8000a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a4a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a52:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  g_y = (float)(gyro_y *  g_conv);
 8000a56:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000a5a:	ee07 3a90 	vmov	s15, r3
 8000a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a62:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a6a:	edc7 7a08 	vstr	s15, [r7, #32]
	  g_z = (float)(gyro_z *  g_conv);
 8000a6e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000a72:	ee07 3a90 	vmov	s15, r3
 8000a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a7a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a82:	edc7 7a07 	vstr	s15, [r7, #28]
//	  m_z = (float)(mag_z *  m_conv);

//  m[0] = (float)(mag_count[0] * mag_resolution * mag_bias_factory[0] - mag_bias[0] * bias_to_current_bits) * mag_scale[0];  // get actual magnetometer value, this depends on scale being set

//	  printf("Acc{x: %.3f, y: %.3f, z:%.3f}, Gyro{x: %.3f, y: %.3f, z:%.3f}\r\n",a_x, a_y, a_z,g_x, g_y, g_z);
	  printf("Mag{x: %.3f, y: %.3f, z:%.3f}\r\n",m_x, m_y, m_z);
 8000a86:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000a8a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a8e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000a92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a96:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8000a9a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000a9e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000aa2:	ed8d 7b00 	vstr	d7, [sp]
 8000aa6:	ec53 2b15 	vmov	r2, r3, d5
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <main+0x320>)
 8000aac:	f006 fab2 	bl	8007014 <iprintf>
	  HAL_Delay(5);
 8000ab0:	e6ef      	b.n	8000892 <main+0xd2>
 8000ab2:	bf00      	nop
 8000ab4:	f3af 8000 	nop.w
 8000ab8:	147ae148 	.word	0x147ae148
 8000abc:	3fd147ae 	.word	0x3fd147ae
 8000ac0:	58024400 	.word	0x58024400
 8000ac4:	3bfa0000 	.word	0x3bfa0000
 8000ac8:	080091a0 	.word	0x080091a0
 8000acc:	24000014 	.word	0x24000014
 8000ad0:	24000330 	.word	0x24000330
 8000ad4:	24000324 	.word	0x24000324
 8000ad8:	24000008 	.word	0x24000008
 8000adc:	080091ac 	.word	0x080091ac
 8000ae0:	080091b4 	.word	0x080091b4

08000ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b09c      	sub	sp, #112	; 0x70
 8000ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	224c      	movs	r2, #76	; 0x4c
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f005 fe44 	bl	8006780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2220      	movs	r2, #32
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f005 fe3e 	bl	8006780 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b04:	2004      	movs	r0, #4
 8000b06:	f001 f9e9 	bl	8001edc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <SystemClock_Config+0xf0>)
 8000b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b12:	4a30      	ldr	r2, [pc, #192]	; (8000bd4 <SystemClock_Config+0xf0>)
 8000b14:	f023 0301 	bic.w	r3, r3, #1
 8000b18:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b1a:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <SystemClock_Config+0xf0>)
 8000b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	4b2c      	ldr	r3, [pc, #176]	; (8000bd8 <SystemClock_Config+0xf4>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b2c:	4a2a      	ldr	r2, [pc, #168]	; (8000bd8 <SystemClock_Config+0xf4>)
 8000b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <SystemClock_Config+0xf4>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b40:	bf00      	nop
 8000b42:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <SystemClock_Config+0xf4>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b4e:	d1f8      	bne.n	8000b42 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b50:	2301      	movs	r3, #1
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b54:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b62:	2301      	movs	r3, #1
 8000b64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000b66:	2312      	movs	r3, #18
 8000b68:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b76:	230c      	movs	r3, #12
 8000b78:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000b7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b82:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 fa01 	bl	8001f90 <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b94:	f000 fbee 	bl	8001374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b98:	233f      	movs	r3, #63	; 0x3f
 8000b9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bac:	2340      	movs	r3, #64	; 0x40
 8000bae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f001 fe15 	bl	80027ec <HAL_RCC_ClockConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000bc8:	f000 fbd4 	bl	8001374 <Error_Handler>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3770      	adds	r7, #112	; 0x70
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58000400 	.word	0x58000400
 8000bd8:	58024800 	.word	0x58024800

08000bdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000be0:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000be2:	4a29      	ldr	r2, [pc, #164]	; (8000c88 <MX_SPI1_Init+0xac>)
 8000be4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000be6:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000be8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bee:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bf4:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000bf6:	2207      	movs	r2, #7
 8000bf8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bfa:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000bfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_07DATA;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c40:	22c0      	movs	r2, #192	; 0xc0
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_SPI1_Init+0xa8>)
 8000c70:	f003 fcb0 	bl	80045d4 <HAL_SPI_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000c7a:	f000 fb7b 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2400020c 	.word	0x2400020c
 8000c88:	40013000 	.word	0x40013000

08000c8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000c92:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <MX_USART3_UART_Init+0x94>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cd4:	4811      	ldr	r0, [pc, #68]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cd6:	f004 fc22 	bl	800551e <HAL_UART_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ce0:	f000 fb48 	bl	8001374 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000ce8:	f005 fc56 	bl	8006598 <HAL_UARTEx_SetTxFifoThreshold>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cf2:	f000 fb3f 	bl	8001374 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4808      	ldr	r0, [pc, #32]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cfa:	f005 fc8b 	bl	8006614 <HAL_UARTEx_SetRxFifoThreshold>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d04:	f000 fb36 	bl	8001374 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000d0a:	f005 fc0c 	bl	8006526 <HAL_UARTEx_DisableFifoMode>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d14:	f000 fb2e 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	24000294 	.word	0x24000294
 8000d20:	40004800 	.word	0x40004800

08000d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	4b42      	ldr	r3, [pc, #264]	; (8000e44 <MX_GPIO_Init+0x120>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	4a40      	ldr	r2, [pc, #256]	; (8000e44 <MX_GPIO_Init+0x120>)
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4a:	4b3e      	ldr	r3, [pc, #248]	; (8000e44 <MX_GPIO_Init+0x120>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d58:	4b3a      	ldr	r3, [pc, #232]	; (8000e44 <MX_GPIO_Init+0x120>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5e:	4a39      	ldr	r2, [pc, #228]	; (8000e44 <MX_GPIO_Init+0x120>)
 8000d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d68:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <MX_GPIO_Init+0x120>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b33      	ldr	r3, [pc, #204]	; (8000e44 <MX_GPIO_Init+0x120>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7c:	4a31      	ldr	r2, [pc, #196]	; (8000e44 <MX_GPIO_Init+0x120>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d86:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <MX_GPIO_Init+0x120>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d94:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <MX_GPIO_Init+0x120>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	4a2a      	ldr	r2, [pc, #168]	; (8000e44 <MX_GPIO_Init+0x120>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da4:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <MX_GPIO_Init+0x120>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <MX_GPIO_Init+0x120>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db8:	4a22      	ldr	r2, [pc, #136]	; (8000e44 <MX_GPIO_Init+0x120>)
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <MX_GPIO_Init+0x120>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	f003 0308 	and.w	r3, r3, #8
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	481c      	ldr	r0, [pc, #112]	; (8000e48 <MX_GPIO_Init+0x124>)
 8000dd6:	f001 f839 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f244 0101 	movw	r1, #16385	; 0x4001
 8000de0:	481a      	ldr	r0, [pc, #104]	; (8000e4c <MX_GPIO_Init+0x128>)
 8000de2:	f001 f833 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000de6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4815      	ldr	r0, [pc, #84]	; (8000e50 <MX_GPIO_Init+0x12c>)
 8000dfc:	f000 fe76 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000e00:	2310      	movs	r3, #16
 8000e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	480c      	ldr	r0, [pc, #48]	; (8000e48 <MX_GPIO_Init+0x124>)
 8000e18:	f000 fe68 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e1c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_GPIO_Init+0x128>)
 8000e36:	f000 fe59 	bl	8001aec <HAL_GPIO_Init>

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	58024400 	.word	0x58024400
 8000e48:	58020000 	.word	0x58020000
 8000e4c:	58020400 	.word	0x58020400
 8000e50:	58020800 	.word	0x58020800

08000e54 <mpu9250_write_reg>:

/* USER CODE BEGIN 4 */
void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	460a      	mov	r2, r1
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	4613      	mov	r3, r2
 8000e62:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2110      	movs	r1, #16
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <mpu9250_write_reg+0x44>)
 8000e6a:	f000 ffef 	bl	8001e4c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8000e6e:	1df9      	adds	r1, r7, #7
 8000e70:	2364      	movs	r3, #100	; 0x64
 8000e72:	2201      	movs	r2, #1
 8000e74:	4809      	ldr	r0, [pc, #36]	; (8000e9c <mpu9250_write_reg+0x48>)
 8000e76:	f003 fcb3 	bl	80047e0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8000e7a:	1db9      	adds	r1, r7, #6
 8000e7c:	2364      	movs	r3, #100	; 0x64
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4806      	ldr	r0, [pc, #24]	; (8000e9c <mpu9250_write_reg+0x48>)
 8000e82:	f003 fcad 	bl	80047e0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2110      	movs	r1, #16
 8000e8a:	4803      	ldr	r0, [pc, #12]	; (8000e98 <mpu9250_write_reg+0x44>)
 8000e8c:	f000 ffde 	bl	8001e4c <HAL_GPIO_WritePin>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	58020000 	.word	0x58020000
 8000e9c:	2400020c 	.word	0x2400020c

08000ea0 <mpu9250_read_reg>:
void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2110      	movs	r1, #16
 8000ebe:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <mpu9250_read_reg+0x54>)
 8000ec0:	f000 ffc4 	bl	8001e4c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 8000ec4:	f107 010f 	add.w	r1, r7, #15
 8000ec8:	2364      	movs	r3, #100	; 0x64
 8000eca:	2201      	movs	r2, #1
 8000ecc:	480a      	ldr	r0, [pc, #40]	; (8000ef8 <mpu9250_read_reg+0x58>)
 8000ece:	f003 fc87 	bl	80047e0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, len, 100);
 8000ed2:	79bb      	ldrb	r3, [r7, #6]
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	2364      	movs	r3, #100	; 0x64
 8000ed8:	6839      	ldr	r1, [r7, #0]
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <mpu9250_read_reg+0x58>)
 8000edc:	f003 fe72 	bl	8004bc4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <mpu9250_read_reg+0x54>)
 8000ee6:	f000 ffb1 	bl	8001e4c <HAL_GPIO_WritePin>
}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	58020000 	.word	0x58020000
 8000ef8:	2400020c 	.word	0x2400020c

08000efc <read_mag>:

bool read_mag(int16_t* destination) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	const uint8_t st1;
	mpu9250_read_reg(0x02, st1, sizeof(st1));
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	2201      	movs	r2, #1
 8000f08:	4619      	mov	r1, r3
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	f7ff ffc8 	bl	8000ea0 <mpu9250_read_reg>
	if (st1 & 0x01) {                                                    // wait for magnetometer data ready bit to be set
 8000f10:	7dfb      	ldrb	r3, [r7, #23]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d03a      	beq.n	8000f90 <read_mag+0x94>
		uint8_t raw_data[7];
		// x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
		mpu9250_read_reg(0x03, &raw_data[0], 7);
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	2207      	movs	r2, #7
 8000f20:	4619      	mov	r1, r3
 8000f22:	2003      	movs	r0, #3
 8000f24:	f7ff ffbc 	bl	8000ea0 <mpu9250_read_reg>
		if ((st1 & 0x02) != 0){                                      // check if data is not skipped
 8000f28:	7dfb      	ldrb	r3, [r7, #23]
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <read_mag+0x3a>
			return false;                                            // this should be after data reading to clear DRDY register
 8000f32:	2300      	movs	r3, #0
 8000f34:	e030      	b.n	8000f98 <read_mag+0x9c>
		} else {
			printf("!st1.2\r\n");
 8000f36:	481a      	ldr	r0, [pc, #104]	; (8000fa0 <read_mag+0xa4>)
 8000f38:	f006 f8f2 	bl	8007120 <puts>
		}
		uint16_t c = raw_data[6];                                         // End data read by reading ST2 register
 8000f3c:	7cbb      	ldrb	r3, [r7, #18]
 8000f3e:	82bb      	strh	r3, [r7, #20]
		if (!(c & 0x08)) {                                               // Check if magnetic sensor overflow set, if not then report data
 8000f40:	8abb      	ldrh	r3, [r7, #20]
 8000f42:	f003 0308 	and.w	r3, r3, #8
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d11e      	bne.n	8000f88 <read_mag+0x8c>
			destination[0] = ((int16_t)raw_data[1] << 8) | raw_data[0];  // Turn the MSB and LSB into a signed 16-bit value
 8000f4a:	7b7b      	ldrb	r3, [r7, #13]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	7b3b      	ldrb	r3, [r7, #12]
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	4313      	orrs	r3, r2
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	801a      	strh	r2, [r3, #0]
			destination[1] = ((int16_t)raw_data[3] << 8) | raw_data[2];  // Data stored as little Endian
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b219      	sxth	r1, r3
 8000f62:	7bbb      	ldrb	r3, [r7, #14]
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3302      	adds	r3, #2
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	b212      	sxth	r2, r2
 8000f6e:	801a      	strh	r2, [r3, #0]
			destination[2] = ((int16_t)raw_data[5] << 8) | raw_data[4];
 8000f70:	7c7b      	ldrb	r3, [r7, #17]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	b219      	sxth	r1, r3
 8000f76:	7c3b      	ldrb	r3, [r7, #16]
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	b212      	sxth	r2, r2
 8000f82:	801a      	strh	r2, [r3, #0]
			return true;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e007      	b.n	8000f98 <read_mag+0x9c>
		} else {
			printf("!c\r\n");
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <read_mag+0xa8>)
 8000f8a:	f006 f8c9 	bl	8007120 <puts>
 8000f8e:	e002      	b.n	8000f96 <read_mag+0x9a>
		}
	} else {
		printf("!st1.1\r\n");
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <read_mag+0xac>)
 8000f92:	f006 f8c5 	bl	8007120 <puts>
	}
	return false;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	080091d4 	.word	0x080091d4
 8000fa4:	080091dc 	.word	0x080091dc
 8000fa8:	080091e0 	.word	0x080091e0
 8000fac:	00000000 	.word	0x00000000

08000fb0 <init_mag>:

void init_mag(){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
	uint8_t raw_data[3];                            // x/y/z gyro calibration data stored here
	mpu9250_write_reg(11, 0x00);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	200b      	movs	r0, #11
 8000fba:	f7ff ff4b 	bl	8000e54 <mpu9250_write_reg>
	HAL_Delay(10);
 8000fbe:	200a      	movs	r0, #10
 8000fc0:	f000 fc80 	bl	80018c4 <HAL_Delay>
	mpu9250_write_reg(11, 0x0F);
 8000fc4:	210f      	movs	r1, #15
 8000fc6:	200b      	movs	r0, #11
 8000fc8:	f7ff ff44 	bl	8000e54 <mpu9250_write_reg>
	HAL_Delay(10);
 8000fcc:	200a      	movs	r0, #10
 8000fce:	f000 fc79 	bl	80018c4 <HAL_Delay>
	mpu9250_read_reg(16, raw_data[0], sizeof(raw_data));
 8000fd2:	793b      	ldrb	r3, [r7, #4]
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	2010      	movs	r0, #16
 8000fda:	f7ff ff61 	bl	8000ea0 <mpu9250_read_reg>
	mag_bias_factory[0] = (float)(raw_data[0] - 128) / 256. + 1.;
 8000fde:	793b      	ldrb	r3, [r7, #4]
 8000fe0:	3b80      	subs	r3, #128	; 0x80
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fea:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000fee:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8001080 <init_mag+0xd0>
 8000ff2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ff6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ffa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ffe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <init_mag+0xd8>)
 8001004:	edc3 7a00 	vstr	s15, [r3]
	mag_bias_factory[1] = (float)(raw_data[1] - 128) / 256. + 1.;
 8001008:	797b      	ldrb	r3, [r7, #5]
 800100a:	3b80      	subs	r3, #128	; 0x80
 800100c:	ee07 3a90 	vmov	s15, r3
 8001010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001014:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001018:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001080 <init_mag+0xd0>
 800101c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001020:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001024:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001028:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <init_mag+0xd8>)
 800102e:	edc3 7a01 	vstr	s15, [r3, #4]
	mag_bias_factory[2] = (float)(raw_data[2] - 128) / 256. + 1.;
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	3b80      	subs	r3, #128	; 0x80
 8001036:	ee07 3a90 	vmov	s15, r3
 800103a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001042:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8001080 <init_mag+0xd0>
 8001046:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800104a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800104e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001052:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <init_mag+0xd8>)
 8001058:	edc3 7a02 	vstr	s15, [r3, #8]
	mpu9250_write_reg(11, 0x00);
 800105c:	2100      	movs	r1, #0
 800105e:	200b      	movs	r0, #11
 8001060:	f7ff fef8 	bl	8000e54 <mpu9250_write_reg>
	HAL_Delay(10);
 8001064:	200a      	movs	r0, #10
 8001066:	f000 fc2d 	bl	80018c4 <HAL_Delay>
	mpu9250_write_reg(11,(uint8_t)0x06);
 800106a:	2106      	movs	r1, #6
 800106c:	200b      	movs	r0, #11
 800106e:	f7ff fef1 	bl	8000e54 <mpu9250_write_reg>
	HAL_Delay(10);
 8001072:	200a      	movs	r0, #10
 8001074:	f000 fc26 	bl	80018c4 <HAL_Delay>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	00000000 	.word	0x00000000
 8001084:	40700000 	.word	0x40700000
 8001088:	24000330 	.word	0x24000330

0800108c <calibrate_mag>:

void calibrate_mag() {
 800108c:	b580      	push	{r7, lr}
 800108e:	b092      	sub	sp, #72	; 0x48
 8001090:	af00      	add	r7, sp, #0
    printf("Magnetometer calibration started...\r\n\n");
 8001092:	48b0      	ldr	r0, [pc, #704]	; (8001354 <calibrate_mag+0x2c8>)
 8001094:	f006 f844 	bl	8007120 <puts>
    init_mag();
 8001098:	f7ff ff8a 	bl	8000fb0 <init_mag>
    HAL_Delay(4000);
 800109c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80010a0:	f000 fc10 	bl	80018c4 <HAL_Delay>
	// shoot for ~fifteen seconds of mag data
	uint16_t sample_count = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
	sample_count = 1500;    // at 100 Hz ODR, new mag data is available every 10 ms
 80010a8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80010ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
	int32_t bias[3] = {0, 0, 0}, scale[3] = {0, 0, 0};
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80010b2:	2300      	movs	r3, #0
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010b6:	2300      	movs	r3, #0
 80010b8:	633b      	str	r3, [r7, #48]	; 0x30
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
	int16_t mag_max[3] = {-32767, -32767, -32767};
 80010c6:	4aa4      	ldr	r2, [pc, #656]	; (8001358 <calibrate_mag+0x2cc>)
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d0:	6018      	str	r0, [r3, #0]
 80010d2:	3304      	adds	r3, #4
 80010d4:	8019      	strh	r1, [r3, #0]
	int16_t mag_min[3] = {32767, 32767, 32767};
 80010d6:	4aa1      	ldr	r2, [pc, #644]	; (800135c <calibrate_mag+0x2d0>)
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010e0:	6018      	str	r0, [r3, #0]
 80010e2:	3304      	adds	r3, #4
 80010e4:	8019      	strh	r1, [r3, #0]
	int16_t mag_temp[3] = {0, 0, 0};
 80010e6:	2300      	movs	r3, #0
 80010e8:	80bb      	strh	r3, [r7, #4]
 80010ea:	2300      	movs	r3, #0
 80010ec:	80fb      	strh	r3, [r7, #6]
 80010ee:	2300      	movs	r3, #0
 80010f0:	813b      	strh	r3, [r7, #8]
	for (uint16_t ii = 0; ii < sample_count; ii++) {
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010f8:	e048      	b.n	800118c <calibrate_mag+0x100>
		read_mag(mag_temp);  // Read the mag data
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fefd 	bl	8000efc <read_mag>
		for (int jj = 0; jj < 3; jj++) {
 8001102:	2300      	movs	r3, #0
 8001104:	643b      	str	r3, [r7, #64]	; 0x40
 8001106:	e036      	b.n	8001176 <calibrate_mag+0xea>
			if (mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 8001108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	3348      	adds	r3, #72	; 0x48
 800110e:	443b      	add	r3, r7
 8001110:	f933 2c44 	ldrsh.w	r2, [r3, #-68]
 8001114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	3348      	adds	r3, #72	; 0x48
 800111a:	443b      	add	r3, r7
 800111c:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8001120:	429a      	cmp	r2, r3
 8001122:	dd0b      	ble.n	800113c <calibrate_mag+0xb0>
 8001124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	3348      	adds	r3, #72	; 0x48
 800112a:	443b      	add	r3, r7
 800112c:	f933 2c44 	ldrsh.w	r2, [r3, #-68]
 8001130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	3348      	adds	r3, #72	; 0x48
 8001136:	443b      	add	r3, r7
 8001138:	f823 2c34 	strh.w	r2, [r3, #-52]
			if (mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 800113c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	3348      	adds	r3, #72	; 0x48
 8001142:	443b      	add	r3, r7
 8001144:	f933 2c44 	ldrsh.w	r2, [r3, #-68]
 8001148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	3348      	adds	r3, #72	; 0x48
 800114e:	443b      	add	r3, r7
 8001150:	f933 3c3c 	ldrsh.w	r3, [r3, #-60]
 8001154:	429a      	cmp	r2, r3
 8001156:	da0b      	bge.n	8001170 <calibrate_mag+0xe4>
 8001158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	3348      	adds	r3, #72	; 0x48
 800115e:	443b      	add	r3, r7
 8001160:	f933 2c44 	ldrsh.w	r2, [r3, #-68]
 8001164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	3348      	adds	r3, #72	; 0x48
 800116a:	443b      	add	r3, r7
 800116c:	f823 2c3c 	strh.w	r2, [r3, #-60]
		for (int jj = 0; jj < 3; jj++) {
 8001170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001172:	3301      	adds	r3, #1
 8001174:	643b      	str	r3, [r7, #64]	; 0x40
 8001176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001178:	2b02      	cmp	r3, #2
 800117a:	ddc5      	ble.n	8001108 <calibrate_mag+0x7c>
		}
		HAL_Delay(12);   // at 100 Hz ODR, new mag data is available every 10 ms
 800117c:	200c      	movs	r0, #12
 800117e:	f000 fba1 	bl	80018c4 <HAL_Delay>
	for (uint16_t ii = 0; ii < sample_count; ii++) {
 8001182:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001186:	3301      	adds	r3, #1
 8001188:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800118c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001190:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001192:	429a      	cmp	r2, r3
 8001194:	d3b1      	bcc.n	80010fa <calibrate_mag+0x6e>
	}

	// Get hard iron correction
	bias[0] = (mag_max[0] + mag_min[0]) / 2;  // get average x mag bias in counts
 8001196:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800119a:	461a      	mov	r2, r3
 800119c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	da00      	bge.n	80011a8 <calibrate_mag+0x11c>
 80011a6:	3301      	adds	r3, #1
 80011a8:	105b      	asrs	r3, r3, #1
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
	bias[1] = (mag_max[1] + mag_min[1]) / 2;  // get average y mag bias in counts
 80011ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011b0:	461a      	mov	r2, r3
 80011b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011b6:	4413      	add	r3, r2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	da00      	bge.n	80011be <calibrate_mag+0x132>
 80011bc:	3301      	adds	r3, #1
 80011be:	105b      	asrs	r3, r3, #1
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	bias[2] = (mag_max[2] + mag_min[2]) / 2;  // get average z mag bias in counts
 80011c2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80011c6:	461a      	mov	r2, r3
 80011c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011cc:	4413      	add	r3, r2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da00      	bge.n	80011d4 <calibrate_mag+0x148>
 80011d2:	3301      	adds	r3, #1
 80011d4:	105b      	asrs	r3, r3, #1
 80011d6:	633b      	str	r3, [r7, #48]	; 0x30

	float bias_resolution = 10. * 4912. / 32760.0;
 80011d8:	4b61      	ldr	r3, [pc, #388]	; (8001360 <calibrate_mag+0x2d4>)
 80011da:	63bb      	str	r3, [r7, #56]	; 0x38
	mag_bias[0] = (float)bias[0] * bias_resolution * mag_bias_factory[0];  // save mag biases in G for main program
 80011dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80011ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ee:	4b5d      	ldr	r3, [pc, #372]	; (8001364 <calibrate_mag+0x2d8>)
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f8:	4b5b      	ldr	r3, [pc, #364]	; (8001368 <calibrate_mag+0x2dc>)
 80011fa:	edc3 7a00 	vstr	s15, [r3]
	mag_bias[1] = (float)bias[1] * bias_resolution * mag_bias_factory[1];
 80011fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001208:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800120c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001210:	4b54      	ldr	r3, [pc, #336]	; (8001364 <calibrate_mag+0x2d8>)
 8001212:	edd3 7a01 	vldr	s15, [r3, #4]
 8001216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121a:	4b53      	ldr	r3, [pc, #332]	; (8001368 <calibrate_mag+0x2dc>)
 800121c:	edc3 7a01 	vstr	s15, [r3, #4]
	mag_bias[2] = (float)bias[2] * bias_resolution * mag_bias_factory[2];
 8001220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001222:	ee07 3a90 	vmov	s15, r3
 8001226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800122e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001232:	4b4c      	ldr	r3, [pc, #304]	; (8001364 <calibrate_mag+0x2d8>)
 8001234:	edd3 7a02 	vldr	s15, [r3, #8]
 8001238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123c:	4b4a      	ldr	r3, [pc, #296]	; (8001368 <calibrate_mag+0x2dc>)
 800123e:	edc3 7a02 	vstr	s15, [r3, #8]

	// Get soft iron correction estimate
	//*** multiplication by mag_bias_factory added in accordance with the following comment
	//*** https://github.com/kriswiner/MPU9250/issues/456#issue-836657973
	scale[0] = (float)(mag_max[0] - mag_min[0]) * mag_bias_factory[0] / 2;  // get average x axis max chord length in counts
 8001242:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001246:	461a      	mov	r2, r3
 8001248:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001256:	4b43      	ldr	r3, [pc, #268]	; (8001364 <calibrate_mag+0x2d8>)
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001260:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001264:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800126c:	ee17 3a90 	vmov	r3, s15
 8001270:	61fb      	str	r3, [r7, #28]
	scale[1] = (float)(mag_max[1] - mag_min[1]) * mag_bias_factory[1] / 2;  // get average y axis max chord length in counts
 8001272:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001276:	461a      	mov	r2, r3
 8001278:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001286:	4b37      	ldr	r3, [pc, #220]	; (8001364 <calibrate_mag+0x2d8>)
 8001288:	edd3 7a01 	vldr	s15, [r3, #4]
 800128c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001290:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001294:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800129c:	ee17 3a90 	vmov	r3, s15
 80012a0:	623b      	str	r3, [r7, #32]
	scale[2] = (float)(mag_max[2] - mag_min[2]) * mag_bias_factory[2] / 2;  // get average z axis max chord length in counts
 80012a2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012a6:	461a      	mov	r2, r3
 80012a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b6:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <calibrate_mag+0x2d8>)
 80012b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012cc:	ee17 3a90 	vmov	r3, s15
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24

	float avg_rad = scale[0] + scale[1] + scale[2];
 80012d2:	69fa      	ldr	r2, [r7, #28]
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	441a      	add	r2, r3
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	4413      	add	r3, r2
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	avg_rad /= 3.0;
 80012e8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80012ec:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80012f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	mag_scale[0] = avg_rad / ((float)scale[0]);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001302:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <calibrate_mag+0x2e0>)
 800130c:	edc3 7a00 	vstr	s15, [r3]
	mag_scale[1] = avg_rad / ((float)scale[1]);
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800131e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <calibrate_mag+0x2e0>)
 8001324:	edc3 7a01 	vstr	s15, [r3, #4]
	mag_scale[2] = avg_rad / ((float)scale[2]);
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001332:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <calibrate_mag+0x2e0>)
 800133c:	edc3 7a02 	vstr	s15, [r3, #8]
    init_mag();
 8001340:	f7ff fe36 	bl	8000fb0 <init_mag>
    printf("Magnetometer calibrated!\r\n");
 8001344:	480a      	ldr	r0, [pc, #40]	; (8001370 <calibrate_mag+0x2e4>)
 8001346:	f005 feeb 	bl	8007120 <puts>
}
 800134a:	bf00      	nop
 800134c:	3748      	adds	r7, #72	; 0x48
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	080091e8 	.word	0x080091e8
 8001358:	0800922c 	.word	0x0800922c
 800135c:	08009234 	.word	0x08009234
 8001360:	3fbfebff 	.word	0x3fbfebff
 8001364:	24000330 	.word	0x24000330
 8001368:	24000324 	.word	0x24000324
 800136c:	24000008 	.word	0x24000008
 8001370:	08009210 	.word	0x08009210

08001374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001378:	b672      	cpsid	i
}
 800137a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800137c:	e7fe      	b.n	800137c <Error_Handler+0x8>
	...

08001380 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001388:	1d39      	adds	r1, r7, #4
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	2201      	movs	r2, #1
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <__io_putchar+0x20>)
 8001392:	f004 f914 	bl	80055be <HAL_UART_Transmit>
  return ch;
 8001396:	687b      	ldr	r3, [r7, #4]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	24000294 	.word	0x24000294

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_MspInit+0x30>)
 80013ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013b0:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <HAL_MspInit+0x30>)
 80013b2:	f043 0302 	orr.w	r3, r3, #2
 80013b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_MspInit+0x30>)
 80013bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	58024400 	.word	0x58024400

080013d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0b8      	sub	sp, #224	; 0xe0
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	22bc      	movs	r2, #188	; 0xbc
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f005 f9c1 	bl	8006780 <memset>
  if(hspi->Instance==SPI1)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a24      	ldr	r2, [pc, #144]	; (8001494 <HAL_SPI_MspInit+0xbc>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d141      	bne.n	800148c <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800140e:	2300      	movs	r3, #0
 8001410:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4618      	mov	r0, r3
 8001418:	f001 fd74 	bl	8002f04 <HAL_RCCEx_PeriphCLKConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001422:	f7ff ffa7 	bl	8001374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <HAL_SPI_MspInit+0xc0>)
 8001428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800142c:	4a1a      	ldr	r2, [pc, #104]	; (8001498 <HAL_SPI_MspInit+0xc0>)
 800142e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001432:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_SPI_MspInit+0xc0>)
 8001438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800143c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_SPI_MspInit+0xc0>)
 8001446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144a:	4a13      	ldr	r2, [pc, #76]	; (8001498 <HAL_SPI_MspInit+0xc0>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_SPI_MspInit+0xc0>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001462:	23e0      	movs	r3, #224	; 0xe0
 8001464:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800147a:	2305      	movs	r3, #5
 800147c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001484:	4619      	mov	r1, r3
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <HAL_SPI_MspInit+0xc4>)
 8001488:	f000 fb30 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	37e0      	adds	r7, #224	; 0xe0
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40013000 	.word	0x40013000
 8001498:	58024400 	.word	0x58024400
 800149c:	58020000 	.word	0x58020000

080014a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0b8      	sub	sp, #224	; 0xe0
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	22bc      	movs	r2, #188	; 0xbc
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f005 f95d 	bl	8006780 <memset>
  if(huart->Instance==USART3)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a25      	ldr	r2, [pc, #148]	; (8001560 <HAL_UART_MspInit+0xc0>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d142      	bne.n	8001556 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014d0:	2302      	movs	r3, #2
 80014d2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 fd10 	bl	8002f04 <HAL_RCCEx_PeriphCLKConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014ea:	f7ff ff43 	bl	8001374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ee:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <HAL_UART_MspInit+0xc4>)
 80014f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014f4:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <HAL_UART_MspInit+0xc4>)
 80014f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <HAL_UART_MspInit+0xc4>)
 8001500:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_UART_MspInit+0xc4>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001512:	4a14      	ldr	r2, [pc, #80]	; (8001564 <HAL_UART_MspInit+0xc4>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_UART_MspInit+0xc4>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800152a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800152e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001544:	2307      	movs	r3, #7
 8001546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <HAL_UART_MspInit+0xc8>)
 8001552:	f000 facb 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001556:	bf00      	nop
 8001558:	37e0      	adds	r7, #224	; 0xe0
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40004800 	.word	0x40004800
 8001564:	58024400 	.word	0x58024400
 8001568:	58020c00 	.word	0x58020c00

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <NMI_Handler+0x4>

08001572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <HardFault_Handler+0x4>

08001578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <MemManage_Handler+0x4>

0800157e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <BusFault_Handler+0x4>

08001584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <UsageFault_Handler+0x4>

0800158a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b8:	f000 f964 	bl	8001884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
	return 1;
 80015c4:	2301      	movs	r3, #1
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_kill>:

int _kill(int pid, int sig)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015da:	f005 f8a7 	bl	800672c <__errno>
 80015de:	4603      	mov	r3, r0
 80015e0:	2216      	movs	r2, #22
 80015e2:	601a      	str	r2, [r3, #0]
	return -1;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_exit>:

void _exit (int status)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ffe7 	bl	80015d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001602:	e7fe      	b.n	8001602 <_exit+0x12>

08001604 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e00a      	b.n	800162c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001616:	f3af 8000 	nop.w
 800161a:	4601      	mov	r1, r0
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	60ba      	str	r2, [r7, #8]
 8001622:	b2ca      	uxtb	r2, r1
 8001624:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	dbf0      	blt.n	8001616 <_read+0x12>
	}

return len;
 8001634:	687b      	ldr	r3, [r7, #4]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e009      	b.n	8001664 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	60ba      	str	r2, [r7, #8]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fe91 	bl	8001380 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	dbf1      	blt.n	8001650 <_write+0x12>
	}
	return len;
 800166c:	687b      	ldr	r3, [r7, #4]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_close>:

int _close(int file)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
	return -1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800169e:	605a      	str	r2, [r3, #4]
	return 0;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_isatty>:

int _isatty(int file)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
	return 1;
 80016b6:	2301      	movs	r3, #1
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
	return 0;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <_sbrk+0x5c>)
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <_sbrk+0x60>)
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <_sbrk+0x64>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <_sbrk+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	429a      	cmp	r2, r3
 800170e:	d207      	bcs.n	8001720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001710:	f005 f80c 	bl	800672c <__errno>
 8001714:	4603      	mov	r3, r0
 8001716:	220c      	movs	r2, #12
 8001718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	e009      	b.n	8001734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <_sbrk+0x64>)
 8001730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	24080000 	.word	0x24080000
 8001740:	00000400 	.word	0x00000400
 8001744:	2400033c 	.word	0x2400033c
 8001748:	24000358 	.word	0x24000358

0800174c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001784 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001750:	f7fe ffa0 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001756:	490d      	ldr	r1, [pc, #52]	; (800178c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001758:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800176c:	4c0a      	ldr	r4, [pc, #40]	; (8001798 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800177a:	f004 ffdd 	bl	8006738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177e:	f7ff f81f 	bl	80007c0 <main>
  bx  lr
 8001782:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001784:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001788:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800178c:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8001790:	0800965c 	.word	0x0800965c
  ldr r2, =_sbss
 8001794:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 8001798:	24000354 	.word	0x24000354

0800179c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC3_IRQHandler>
	...

080017a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a6:	2003      	movs	r0, #3
 80017a8:	f000 f96e 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017ac:	f001 f9d4 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 80017b0:	4602      	mov	r2, r0
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_Init+0x68>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	4913      	ldr	r1, [pc, #76]	; (800180c <HAL_Init+0x6c>)
 80017be:	5ccb      	ldrb	r3, [r1, r3]
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	fa22 f303 	lsr.w	r3, r2, r3
 80017c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_Init+0x68>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	4a0e      	ldr	r2, [pc, #56]	; (800180c <HAL_Init+0x6c>)
 80017d4:	5cd3      	ldrb	r3, [r2, r3]
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <HAL_Init+0x70>)
 80017e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <HAL_Init+0x74>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ea:	200f      	movs	r0, #15
 80017ec:	f000 f814 	bl	8001818 <HAL_InitTick>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e002      	b.n	8001800 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017fa:	f7ff fdd3 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	58024400 	.word	0x58024400
 800180c:	0800923c 	.word	0x0800923c
 8001810:	24000004 	.word	0x24000004
 8001814:	24000000 	.word	0x24000000

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_InitTick+0x60>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e021      	b.n	8001870 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_InitTick+0x64>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_InitTick+0x60>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	fbb3 f3f1 	udiv	r3, r3, r1
 800183e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f945 	bl	8001ad2 <HAL_SYSTICK_Config>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e00e      	b.n	8001870 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d80a      	bhi.n	800186e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f000 f91d 	bl	8001a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001864:	4a06      	ldr	r2, [pc, #24]	; (8001880 <HAL_InitTick+0x68>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e000      	b.n	8001870 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2400001c 	.word	0x2400001c
 800187c:	24000000 	.word	0x24000000
 8001880:	24000018 	.word	0x24000018

08001884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_IncTick+0x20>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x24>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <HAL_IncTick+0x24>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	2400001c 	.word	0x2400001c
 80018a8:	24000340 	.word	0x24000340

080018ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <HAL_GetTick+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	24000340 	.word	0x24000340

080018c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff ffee 	bl	80018ac <HAL_GetTick>
 80018d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d005      	beq.n	80018ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_Delay+0x44>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ea:	bf00      	nop
 80018ec:	f7ff ffde 	bl	80018ac <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d8f7      	bhi.n	80018ec <HAL_Delay+0x28>
  {
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2400001c 	.word	0x2400001c

0800190c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_GetREVID+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	0c1b      	lsrs	r3, r3, #16
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	5c001000 	.word	0x5c001000

08001924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <__NVIC_SetPriorityGrouping+0x40>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001940:	4013      	ands	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	4313      	orrs	r3, r2
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x40>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00
 8001968:	05fa0000 	.word	0x05fa0000

0800196c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <__NVIC_GetPriorityGrouping+0x18>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	f003 0307 	and.w	r3, r3, #7
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	; (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	; (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
         );
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	; 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a54:	d301      	bcc.n	8001a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00f      	b.n	8001a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <SysTick_Config+0x40>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a62:	210f      	movs	r1, #15
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f7ff ff8e 	bl	8001988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <SysTick_Config+0x40>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <SysTick_Config+0x40>)
 8001a74:	2207      	movs	r2, #7
 8001a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	e000e010 	.word	0xe000e010

08001a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff47 	bl	8001924 <__NVIC_SetPriorityGrouping>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aac:	f7ff ff5e 	bl	800196c <__NVIC_GetPriorityGrouping>
 8001ab0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	6978      	ldr	r0, [r7, #20]
 8001ab8:	f7ff ff90 	bl	80019dc <NVIC_EncodePriority>
 8001abc:	4602      	mov	r2, r0
 8001abe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff5f 	bl	8001988 <__NVIC_SetPriority>
}
 8001aca:	bf00      	nop
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffb2 	bl	8001a44 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001afa:	4b89      	ldr	r3, [pc, #548]	; (8001d20 <HAL_GPIO_Init+0x234>)
 8001afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001afe:	e194      	b.n	8001e2a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2101      	movs	r1, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8186 	beq.w	8001e24 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d005      	beq.n	8001b30 <HAL_GPIO_Init+0x44>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d130      	bne.n	8001b92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b66:	2201      	movs	r2, #1
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	f003 0201 	and.w	r2, r3, #1
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d017      	beq.n	8001bce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d123      	bne.n	8001c22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	08da      	lsrs	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3208      	adds	r2, #8
 8001c1c:	69b9      	ldr	r1, [r7, #24]
 8001c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0203 	and.w	r2, r3, #3
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80e0 	beq.w	8001e24 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c64:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <HAL_GPIO_Init+0x238>)
 8001c66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c6a:	4a2e      	ldr	r2, [pc, #184]	; (8001d24 <HAL_GPIO_Init+0x238>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c74:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <HAL_GPIO_Init+0x238>)
 8001c76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c82:	4a29      	ldr	r2, [pc, #164]	; (8001d28 <HAL_GPIO_Init+0x23c>)
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	089b      	lsrs	r3, r3, #2
 8001c88:	3302      	adds	r3, #2
 8001c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	220f      	movs	r2, #15
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a20      	ldr	r2, [pc, #128]	; (8001d2c <HAL_GPIO_Init+0x240>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d052      	beq.n	8001d54 <HAL_GPIO_Init+0x268>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a1f      	ldr	r2, [pc, #124]	; (8001d30 <HAL_GPIO_Init+0x244>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d031      	beq.n	8001d1a <HAL_GPIO_Init+0x22e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a1e      	ldr	r2, [pc, #120]	; (8001d34 <HAL_GPIO_Init+0x248>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d02b      	beq.n	8001d16 <HAL_GPIO_Init+0x22a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <HAL_GPIO_Init+0x24c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d025      	beq.n	8001d12 <HAL_GPIO_Init+0x226>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a1c      	ldr	r2, [pc, #112]	; (8001d3c <HAL_GPIO_Init+0x250>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d01f      	beq.n	8001d0e <HAL_GPIO_Init+0x222>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a1b      	ldr	r2, [pc, #108]	; (8001d40 <HAL_GPIO_Init+0x254>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d019      	beq.n	8001d0a <HAL_GPIO_Init+0x21e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a1a      	ldr	r2, [pc, #104]	; (8001d44 <HAL_GPIO_Init+0x258>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_GPIO_Init+0x21a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <HAL_GPIO_Init+0x25c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00d      	beq.n	8001d02 <HAL_GPIO_Init+0x216>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <HAL_GPIO_Init+0x260>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d007      	beq.n	8001cfe <HAL_GPIO_Init+0x212>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <HAL_GPIO_Init+0x264>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <HAL_GPIO_Init+0x20e>
 8001cf6:	2309      	movs	r3, #9
 8001cf8:	e02d      	b.n	8001d56 <HAL_GPIO_Init+0x26a>
 8001cfa:	230a      	movs	r3, #10
 8001cfc:	e02b      	b.n	8001d56 <HAL_GPIO_Init+0x26a>
 8001cfe:	2308      	movs	r3, #8
 8001d00:	e029      	b.n	8001d56 <HAL_GPIO_Init+0x26a>
 8001d02:	2307      	movs	r3, #7
 8001d04:	e027      	b.n	8001d56 <HAL_GPIO_Init+0x26a>
 8001d06:	2306      	movs	r3, #6
 8001d08:	e025      	b.n	8001d56 <HAL_GPIO_Init+0x26a>
 8001d0a:	2305      	movs	r3, #5
 8001d0c:	e023      	b.n	8001d56 <HAL_GPIO_Init+0x26a>
 8001d0e:	2304      	movs	r3, #4
 8001d10:	e021      	b.n	8001d56 <HAL_GPIO_Init+0x26a>
 8001d12:	2303      	movs	r3, #3
 8001d14:	e01f      	b.n	8001d56 <HAL_GPIO_Init+0x26a>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e01d      	b.n	8001d56 <HAL_GPIO_Init+0x26a>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e01b      	b.n	8001d56 <HAL_GPIO_Init+0x26a>
 8001d1e:	bf00      	nop
 8001d20:	58000080 	.word	0x58000080
 8001d24:	58024400 	.word	0x58024400
 8001d28:	58000400 	.word	0x58000400
 8001d2c:	58020000 	.word	0x58020000
 8001d30:	58020400 	.word	0x58020400
 8001d34:	58020800 	.word	0x58020800
 8001d38:	58020c00 	.word	0x58020c00
 8001d3c:	58021000 	.word	0x58021000
 8001d40:	58021400 	.word	0x58021400
 8001d44:	58021800 	.word	0x58021800
 8001d48:	58021c00 	.word	0x58021c00
 8001d4c:	58022000 	.word	0x58022000
 8001d50:	58022400 	.word	0x58022400
 8001d54:	2300      	movs	r3, #0
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	f002 0203 	and.w	r2, r2, #3
 8001d5c:	0092      	lsls	r2, r2, #2
 8001d5e:	4093      	lsls	r3, r2
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d66:	4938      	ldr	r1, [pc, #224]	; (8001e48 <HAL_GPIO_Init+0x35c>)
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	3301      	adds	r3, #1
 8001e28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f47f ae63 	bne.w	8001b00 <HAL_GPIO_Init+0x14>
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	bf00      	nop
 8001e3e:	3724      	adds	r7, #36	; 0x24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	58000400 	.word	0x58000400

08001e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	807b      	strh	r3, [r7, #2]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e5c:	787b      	ldrb	r3, [r7, #1]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e62:	887a      	ldrh	r2, [r7, #2]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001e68:	e003      	b.n	8001e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	041a      	lsls	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	619a      	str	r2, [r3, #24]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001e88:	4a08      	ldr	r2, [pc, #32]	; (8001eac <HAL_HSEM_FastTake+0x2c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3320      	adds	r3, #32
 8001e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e92:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_HSEM_FastTake+0x30>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d101      	bne.n	8001e9c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e000      	b.n	8001e9e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	58026400 	.word	0x58026400
 8001eb0:	80000300 	.word	0x80000300

08001eb4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001ebe:	4906      	ldr	r1, [pc, #24]	; (8001ed8 <HAL_HSEM_Release+0x24>)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	58026400 	.word	0x58026400

08001edc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001ee4:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	2b06      	cmp	r3, #6
 8001eee:	d00a      	beq.n	8001f06 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ef0:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d001      	beq.n	8001f02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e040      	b.n	8001f84 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e03e      	b.n	8001f84 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f06:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001f0e:	491f      	ldr	r1, [pc, #124]	; (8001f8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001f16:	f7ff fcc9 	bl	80018ac <HAL_GetTick>
 8001f1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f1c:	e009      	b.n	8001f32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f1e:	f7ff fcc5 	bl	80018ac <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f2c:	d901      	bls.n	8001f32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e028      	b.n	8001f84 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f3e:	d1ee      	bne.n	8001f1e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b1e      	cmp	r3, #30
 8001f44:	d008      	beq.n	8001f58 <HAL_PWREx_ConfigSupply+0x7c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b2e      	cmp	r3, #46	; 0x2e
 8001f4a:	d005      	beq.n	8001f58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b1d      	cmp	r3, #29
 8001f50:	d002      	beq.n	8001f58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b2d      	cmp	r3, #45	; 0x2d
 8001f56:	d114      	bne.n	8001f82 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001f58:	f7ff fca8 	bl	80018ac <HAL_GetTick>
 8001f5c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001f5e:	e009      	b.n	8001f74 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f60:	f7ff fca4 	bl	80018ac <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f6e:	d901      	bls.n	8001f74 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e007      	b.n	8001f84 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f80:	d1ee      	bne.n	8001f60 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	58024800 	.word	0x58024800

08001f90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08c      	sub	sp, #48	; 0x30
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	f000 bc1d 	b.w	80027de <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 8087 	beq.w	80020c0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb2:	4b99      	ldr	r3, [pc, #612]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fbc:	4b96      	ldr	r3, [pc, #600]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc4:	2b10      	cmp	r3, #16
 8001fc6:	d007      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x48>
 8001fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fca:	2b18      	cmp	r3, #24
 8001fcc:	d110      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x60>
 8001fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d10b      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	4b8f      	ldr	r3, [pc, #572]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d06c      	beq.n	80020be <HAL_RCC_OscConfig+0x12e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d168      	bne.n	80020be <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e3f6      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff8:	d106      	bne.n	8002008 <HAL_RCC_OscConfig+0x78>
 8001ffa:	4b87      	ldr	r3, [pc, #540]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a86      	ldr	r2, [pc, #536]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8002000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e02e      	b.n	8002066 <HAL_RCC_OscConfig+0xd6>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10c      	bne.n	800202a <HAL_RCC_OscConfig+0x9a>
 8002010:	4b81      	ldr	r3, [pc, #516]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a80      	ldr	r2, [pc, #512]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8002016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b7e      	ldr	r3, [pc, #504]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a7d      	ldr	r2, [pc, #500]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8002022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	e01d      	b.n	8002066 <HAL_RCC_OscConfig+0xd6>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002032:	d10c      	bne.n	800204e <HAL_RCC_OscConfig+0xbe>
 8002034:	4b78      	ldr	r3, [pc, #480]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a77      	ldr	r2, [pc, #476]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 800203a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b75      	ldr	r3, [pc, #468]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a74      	ldr	r2, [pc, #464]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8002046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e00b      	b.n	8002066 <HAL_RCC_OscConfig+0xd6>
 800204e:	4b72      	ldr	r3, [pc, #456]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a71      	ldr	r2, [pc, #452]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8002054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	4b6f      	ldr	r3, [pc, #444]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a6e      	ldr	r2, [pc, #440]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8002060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002064:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d013      	beq.n	8002096 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206e:	f7ff fc1d 	bl	80018ac <HAL_GetTick>
 8002072:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002076:	f7ff fc19 	bl	80018ac <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b64      	cmp	r3, #100	; 0x64
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e3aa      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002088:	4b63      	ldr	r3, [pc, #396]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0xe6>
 8002094:	e014      	b.n	80020c0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002096:	f7ff fc09 	bl	80018ac <HAL_GetTick>
 800209a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800209e:	f7ff fc05 	bl	80018ac <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b64      	cmp	r3, #100	; 0x64
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e396      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020b0:	4b59      	ldr	r3, [pc, #356]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f0      	bne.n	800209e <HAL_RCC_OscConfig+0x10e>
 80020bc:	e000      	b.n	80020c0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80cb 	beq.w	8002264 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ce:	4b52      	ldr	r3, [pc, #328]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020d6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020d8:	4b4f      	ldr	r3, [pc, #316]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_RCC_OscConfig+0x164>
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	2b18      	cmp	r3, #24
 80020e8:	d156      	bne.n	8002198 <HAL_RCC_OscConfig+0x208>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d151      	bne.n	8002198 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f4:	4b48      	ldr	r3, [pc, #288]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_OscConfig+0x17c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e368      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800210c:	4b42      	ldr	r3, [pc, #264]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 0219 	bic.w	r2, r3, #25
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	493f      	ldr	r1, [pc, #252]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800211e:	f7ff fbc5 	bl	80018ac <HAL_GetTick>
 8002122:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002126:	f7ff fbc1 	bl	80018ac <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e352      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002138:	4b37      	ldr	r3, [pc, #220]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002144:	f7ff fbe2 	bl	800190c <HAL_GetREVID>
 8002148:	4603      	mov	r3, r0
 800214a:	f241 0203 	movw	r2, #4099	; 0x1003
 800214e:	4293      	cmp	r3, r2
 8002150:	d817      	bhi.n	8002182 <HAL_RCC_OscConfig+0x1f2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d108      	bne.n	800216c <HAL_RCC_OscConfig+0x1dc>
 800215a:	4b2f      	ldr	r3, [pc, #188]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002162:	4a2d      	ldr	r2, [pc, #180]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8002164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002168:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800216a:	e07b      	b.n	8002264 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216c:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	031b      	lsls	r3, r3, #12
 800217a:	4927      	ldr	r1, [pc, #156]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002180:	e070      	b.n	8002264 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002182:	4b25      	ldr	r3, [pc, #148]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	061b      	lsls	r3, r3, #24
 8002190:	4921      	ldr	r1, [pc, #132]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002196:	e065      	b.n	8002264 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d048      	beq.n	8002232 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021a0:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f023 0219 	bic.w	r2, r3, #25
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	491a      	ldr	r1, [pc, #104]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7ff fb7b 	bl	80018ac <HAL_GetTick>
 80021b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ba:	f7ff fb77 	bl	80018ac <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e308      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d8:	f7ff fb98 	bl	800190c <HAL_GetREVID>
 80021dc:	4603      	mov	r3, r0
 80021de:	f241 0203 	movw	r2, #4099	; 0x1003
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d81a      	bhi.n	800221c <HAL_RCC_OscConfig+0x28c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b40      	cmp	r3, #64	; 0x40
 80021ec:	d108      	bne.n	8002200 <HAL_RCC_OscConfig+0x270>
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80021f6:	4a08      	ldr	r2, [pc, #32]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 80021f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fc:	6053      	str	r3, [r2, #4]
 80021fe:	e031      	b.n	8002264 <HAL_RCC_OscConfig+0x2d4>
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	031b      	lsls	r3, r3, #12
 800220e:	4902      	ldr	r1, [pc, #8]	; (8002218 <HAL_RCC_OscConfig+0x288>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
 8002214:	e026      	b.n	8002264 <HAL_RCC_OscConfig+0x2d4>
 8002216:	bf00      	nop
 8002218:	58024400 	.word	0x58024400
 800221c:	4b9a      	ldr	r3, [pc, #616]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	061b      	lsls	r3, r3, #24
 800222a:	4997      	ldr	r1, [pc, #604]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
 8002230:	e018      	b.n	8002264 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002232:	4b95      	ldr	r3, [pc, #596]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a94      	ldr	r2, [pc, #592]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7ff fb35 	bl	80018ac <HAL_GetTick>
 8002242:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002246:	f7ff fb31 	bl	80018ac <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e2c2      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002258:	4b8b      	ldr	r3, [pc, #556]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f0      	bne.n	8002246 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80a9 	beq.w	80023c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002272:	4b85      	ldr	r3, [pc, #532]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800227a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800227c:	4b82      	ldr	r3, [pc, #520]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d007      	beq.n	8002298 <HAL_RCC_OscConfig+0x308>
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2b18      	cmp	r3, #24
 800228c:	d13a      	bne.n	8002304 <HAL_RCC_OscConfig+0x374>
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d135      	bne.n	8002304 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002298:	4b7b      	ldr	r3, [pc, #492]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_OscConfig+0x320>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	2b80      	cmp	r3, #128	; 0x80
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e296      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022b0:	f7ff fb2c 	bl	800190c <HAL_GetREVID>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d817      	bhi.n	80022ee <HAL_RCC_OscConfig+0x35e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d108      	bne.n	80022d8 <HAL_RCC_OscConfig+0x348>
 80022c6:	4b70      	ldr	r3, [pc, #448]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80022ce:	4a6e      	ldr	r2, [pc, #440]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 80022d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022d6:	e075      	b.n	80023c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022d8:	4b6b      	ldr	r3, [pc, #428]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	069b      	lsls	r3, r3, #26
 80022e6:	4968      	ldr	r1, [pc, #416]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022ec:	e06a      	b.n	80023c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022ee:	4b66      	ldr	r3, [pc, #408]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	061b      	lsls	r3, r3, #24
 80022fc:	4962      	ldr	r1, [pc, #392]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002302:	e05f      	b.n	80023c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d042      	beq.n	8002392 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800230c:	4b5e      	ldr	r3, [pc, #376]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a5d      	ldr	r2, [pc, #372]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7ff fac8 	bl	80018ac <HAL_GetTick>
 800231c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002320:	f7ff fac4 	bl	80018ac <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e255      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002332:	4b55      	ldr	r3, [pc, #340]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800233e:	f7ff fae5 	bl	800190c <HAL_GetREVID>
 8002342:	4603      	mov	r3, r0
 8002344:	f241 0203 	movw	r2, #4099	; 0x1003
 8002348:	4293      	cmp	r3, r2
 800234a:	d817      	bhi.n	800237c <HAL_RCC_OscConfig+0x3ec>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	2b20      	cmp	r3, #32
 8002352:	d108      	bne.n	8002366 <HAL_RCC_OscConfig+0x3d6>
 8002354:	4b4c      	ldr	r3, [pc, #304]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800235c:	4a4a      	ldr	r2, [pc, #296]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 800235e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002362:	6053      	str	r3, [r2, #4]
 8002364:	e02e      	b.n	80023c4 <HAL_RCC_OscConfig+0x434>
 8002366:	4b48      	ldr	r3, [pc, #288]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	069b      	lsls	r3, r3, #26
 8002374:	4944      	ldr	r1, [pc, #272]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002376:	4313      	orrs	r3, r2
 8002378:	604b      	str	r3, [r1, #4]
 800237a:	e023      	b.n	80023c4 <HAL_RCC_OscConfig+0x434>
 800237c:	4b42      	ldr	r3, [pc, #264]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	493f      	ldr	r1, [pc, #252]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 800238c:	4313      	orrs	r3, r2
 800238e:	60cb      	str	r3, [r1, #12]
 8002390:	e018      	b.n	80023c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002392:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a3c      	ldr	r2, [pc, #240]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800239c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7ff fa85 	bl	80018ac <HAL_GetTick>
 80023a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80023a6:	f7ff fa81 	bl	80018ac <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e212      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023b8:	4b33      	ldr	r3, [pc, #204]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f0      	bne.n	80023a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d036      	beq.n	800243e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d019      	beq.n	800240c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d8:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 80023da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023dc:	4a2a      	ldr	r2, [pc, #168]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7ff fa62 	bl	80018ac <HAL_GetTick>
 80023e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ec:	f7ff fa5e 	bl	80018ac <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e1ef      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x45c>
 800240a:	e018      	b.n	800243e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240c:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 800240e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002410:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7ff fa48 	bl	80018ac <HAL_GetTick>
 800241c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002420:	f7ff fa44 	bl	80018ac <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1d5      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b00      	cmp	r3, #0
 8002448:	d039      	beq.n	80024be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d01c      	beq.n	800248c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002458:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800245c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800245e:	f7ff fa25 	bl	80018ac <HAL_GetTick>
 8002462:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002466:	f7ff fa21 	bl	80018ac <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e1b2      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x4d6>
 8002484:	e01b      	b.n	80024be <HAL_RCC_OscConfig+0x52e>
 8002486:	bf00      	nop
 8002488:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800248c:	4b9b      	ldr	r3, [pc, #620]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a9a      	ldr	r2, [pc, #616]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 8002492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002496:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002498:	f7ff fa08 	bl	80018ac <HAL_GetTick>
 800249c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80024a0:	f7ff fa04 	bl	80018ac <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e195      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024b2:	4b92      	ldr	r3, [pc, #584]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8081 	beq.w	80025ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024cc:	4b8c      	ldr	r3, [pc, #560]	; (8002700 <HAL_RCC_OscConfig+0x770>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a8b      	ldr	r2, [pc, #556]	; (8002700 <HAL_RCC_OscConfig+0x770>)
 80024d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024d8:	f7ff f9e8 	bl	80018ac <HAL_GetTick>
 80024dc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80024e0:	f7ff f9e4 	bl	80018ac <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e175      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024f2:	4b83      	ldr	r3, [pc, #524]	; (8002700 <HAL_RCC_OscConfig+0x770>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d106      	bne.n	8002514 <HAL_RCC_OscConfig+0x584>
 8002506:	4b7d      	ldr	r3, [pc, #500]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	4a7c      	ldr	r2, [pc, #496]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6713      	str	r3, [r2, #112]	; 0x70
 8002512:	e02d      	b.n	8002570 <HAL_RCC_OscConfig+0x5e0>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10c      	bne.n	8002536 <HAL_RCC_OscConfig+0x5a6>
 800251c:	4b77      	ldr	r3, [pc, #476]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 800251e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002520:	4a76      	ldr	r2, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 8002522:	f023 0301 	bic.w	r3, r3, #1
 8002526:	6713      	str	r3, [r2, #112]	; 0x70
 8002528:	4b74      	ldr	r3, [pc, #464]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	4a73      	ldr	r2, [pc, #460]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 800252e:	f023 0304 	bic.w	r3, r3, #4
 8002532:	6713      	str	r3, [r2, #112]	; 0x70
 8002534:	e01c      	b.n	8002570 <HAL_RCC_OscConfig+0x5e0>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b05      	cmp	r3, #5
 800253c:	d10c      	bne.n	8002558 <HAL_RCC_OscConfig+0x5c8>
 800253e:	4b6f      	ldr	r3, [pc, #444]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002542:	4a6e      	ldr	r2, [pc, #440]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	6713      	str	r3, [r2, #112]	; 0x70
 800254a:	4b6c      	ldr	r3, [pc, #432]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	4a6b      	ldr	r2, [pc, #428]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6713      	str	r3, [r2, #112]	; 0x70
 8002556:	e00b      	b.n	8002570 <HAL_RCC_OscConfig+0x5e0>
 8002558:	4b68      	ldr	r3, [pc, #416]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	4a67      	ldr	r2, [pc, #412]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 800255e:	f023 0301 	bic.w	r3, r3, #1
 8002562:	6713      	str	r3, [r2, #112]	; 0x70
 8002564:	4b65      	ldr	r3, [pc, #404]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002568:	4a64      	ldr	r2, [pc, #400]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 800256a:	f023 0304 	bic.w	r3, r3, #4
 800256e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d015      	beq.n	80025a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002578:	f7ff f998 	bl	80018ac <HAL_GetTick>
 800257c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800257e:	e00a      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002580:	f7ff f994 	bl	80018ac <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	; 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e123      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002596:	4b59      	ldr	r3, [pc, #356]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0ee      	beq.n	8002580 <HAL_RCC_OscConfig+0x5f0>
 80025a2:	e014      	b.n	80025ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a4:	f7ff f982 	bl	80018ac <HAL_GetTick>
 80025a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ac:	f7ff f97e 	bl	80018ac <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e10d      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025c2:	4b4e      	ldr	r3, [pc, #312]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1ee      	bne.n	80025ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 8102 	beq.w	80027dc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80025d8:	4b48      	ldr	r3, [pc, #288]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025e0:	2b18      	cmp	r3, #24
 80025e2:	f000 80bd 	beq.w	8002760 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	f040 809e 	bne.w	800272c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f0:	4b42      	ldr	r3, [pc, #264]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a41      	ldr	r2, [pc, #260]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80025f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7ff f956 	bl	80018ac <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002604:	f7ff f952 	bl	80018ac <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e0e3      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002616:	4b39      	ldr	r3, [pc, #228]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002622:	4b36      	ldr	r3, [pc, #216]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 8002624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002626:	4b37      	ldr	r3, [pc, #220]	; (8002704 <HAL_RCC_OscConfig+0x774>)
 8002628:	4013      	ands	r3, r2
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	430a      	orrs	r2, r1
 8002636:	4931      	ldr	r1, [pc, #196]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 8002638:	4313      	orrs	r3, r2
 800263a:	628b      	str	r3, [r1, #40]	; 0x28
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	3b01      	subs	r3, #1
 8002642:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264a:	3b01      	subs	r3, #1
 800264c:	025b      	lsls	r3, r3, #9
 800264e:	b29b      	uxth	r3, r3
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	3b01      	subs	r3, #1
 8002658:	041b      	lsls	r3, r3, #16
 800265a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	3b01      	subs	r3, #1
 8002666:	061b      	lsls	r3, r3, #24
 8002668:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800266c:	4923      	ldr	r1, [pc, #140]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 800266e:	4313      	orrs	r3, r2
 8002670:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002672:	4b22      	ldr	r3, [pc, #136]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	4a21      	ldr	r2, [pc, #132]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800267e:	4b1f      	ldr	r3, [pc, #124]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 8002680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002682:	4b21      	ldr	r3, [pc, #132]	; (8002708 <HAL_RCC_OscConfig+0x778>)
 8002684:	4013      	ands	r3, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800268a:	00d2      	lsls	r2, r2, #3
 800268c:	491b      	ldr	r1, [pc, #108]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 800268e:	4313      	orrs	r3, r2
 8002690:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002692:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	f023 020c 	bic.w	r2, r3, #12
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4917      	ldr	r1, [pc, #92]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80026a4:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	f023 0202 	bic.w	r2, r3, #2
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	4912      	ldr	r1, [pc, #72]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	4a10      	ldr	r2, [pc, #64]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80026c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80026d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80026da:	4b08      	ldr	r3, [pc, #32]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	4a07      	ldr	r2, [pc, #28]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a04      	ldr	r2, [pc, #16]	; (80026fc <HAL_RCC_OscConfig+0x76c>)
 80026ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7ff f8db 	bl	80018ac <HAL_GetTick>
 80026f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026f8:	e011      	b.n	800271e <HAL_RCC_OscConfig+0x78e>
 80026fa:	bf00      	nop
 80026fc:	58024400 	.word	0x58024400
 8002700:	58024800 	.word	0x58024800
 8002704:	fffffc0c 	.word	0xfffffc0c
 8002708:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270c:	f7ff f8ce 	bl	80018ac <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e05f      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800271e:	4b32      	ldr	r3, [pc, #200]	; (80027e8 <HAL_RCC_OscConfig+0x858>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x77c>
 800272a:	e057      	b.n	80027dc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272c:	4b2e      	ldr	r3, [pc, #184]	; (80027e8 <HAL_RCC_OscConfig+0x858>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a2d      	ldr	r2, [pc, #180]	; (80027e8 <HAL_RCC_OscConfig+0x858>)
 8002732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7ff f8b8 	bl	80018ac <HAL_GetTick>
 800273c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002740:	f7ff f8b4 	bl	80018ac <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e045      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002752:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <HAL_RCC_OscConfig+0x858>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x7b0>
 800275e:	e03d      	b.n	80027dc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002760:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_RCC_OscConfig+0x858>)
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002766:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <HAL_RCC_OscConfig+0x858>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	2b01      	cmp	r3, #1
 8002772:	d031      	beq.n	80027d8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	f003 0203 	and.w	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d12a      	bne.n	80027d8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d122      	bne.n	80027d8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d11a      	bne.n	80027d8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	0a5b      	lsrs	r3, r3, #9
 80027a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d111      	bne.n	80027d8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	0c1b      	lsrs	r3, r3, #16
 80027b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d108      	bne.n	80027d8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	0e1b      	lsrs	r3, r3, #24
 80027ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3730      	adds	r7, #48	; 0x30
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	58024400 	.word	0x58024400

080027ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e19c      	b.n	8002b3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002800:	4b8a      	ldr	r3, [pc, #552]	; (8002a2c <HAL_RCC_ClockConfig+0x240>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d910      	bls.n	8002830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b87      	ldr	r3, [pc, #540]	; (8002a2c <HAL_RCC_ClockConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 020f 	bic.w	r2, r3, #15
 8002816:	4985      	ldr	r1, [pc, #532]	; (8002a2c <HAL_RCC_ClockConfig+0x240>)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	4b83      	ldr	r3, [pc, #524]	; (8002a2c <HAL_RCC_ClockConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d001      	beq.n	8002830 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e184      	b.n	8002b3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d010      	beq.n	800285e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	4b7b      	ldr	r3, [pc, #492]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002848:	429a      	cmp	r2, r3
 800284a:	d908      	bls.n	800285e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800284c:	4b78      	ldr	r3, [pc, #480]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	4975      	ldr	r1, [pc, #468]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 800285a:	4313      	orrs	r3, r2
 800285c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d010      	beq.n	800288c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	4b70      	ldr	r3, [pc, #448]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002876:	429a      	cmp	r2, r3
 8002878:	d908      	bls.n	800288c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800287a:	4b6d      	ldr	r3, [pc, #436]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	496a      	ldr	r1, [pc, #424]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 8002888:	4313      	orrs	r3, r2
 800288a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	d010      	beq.n	80028ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699a      	ldr	r2, [r3, #24]
 800289c:	4b64      	ldr	r3, [pc, #400]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d908      	bls.n	80028ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028a8:	4b61      	ldr	r3, [pc, #388]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	495e      	ldr	r1, [pc, #376]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0320 	and.w	r3, r3, #32
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d010      	beq.n	80028e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	4b59      	ldr	r3, [pc, #356]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d908      	bls.n	80028e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80028d6:	4b56      	ldr	r3, [pc, #344]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4953      	ldr	r1, [pc, #332]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d010      	beq.n	8002916 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	4b4d      	ldr	r3, [pc, #308]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	429a      	cmp	r2, r3
 8002902:	d908      	bls.n	8002916 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002904:	4b4a      	ldr	r3, [pc, #296]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f023 020f 	bic.w	r2, r3, #15
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4947      	ldr	r1, [pc, #284]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 8002912:	4313      	orrs	r3, r2
 8002914:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d055      	beq.n	80029ce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002922:	4b43      	ldr	r3, [pc, #268]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	4940      	ldr	r1, [pc, #256]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 8002930:	4313      	orrs	r3, r2
 8002932:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d107      	bne.n	800294c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800293c:	4b3c      	ldr	r3, [pc, #240]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d121      	bne.n	800298c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0f6      	b.n	8002b3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d107      	bne.n	8002964 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002954:	4b36      	ldr	r3, [pc, #216]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d115      	bne.n	800298c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0ea      	b.n	8002b3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d107      	bne.n	800297c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800296c:	4b30      	ldr	r3, [pc, #192]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d109      	bne.n	800298c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0de      	b.n	8002b3a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800297c:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0d6      	b.n	8002b3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800298c:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f023 0207 	bic.w	r2, r3, #7
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4925      	ldr	r1, [pc, #148]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 800299a:	4313      	orrs	r3, r2
 800299c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299e:	f7fe ff85 	bl	80018ac <HAL_GetTick>
 80029a2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a4:	e00a      	b.n	80029bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a6:	f7fe ff81 	bl	80018ac <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e0be      	b.n	8002b3a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029bc:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d1eb      	bne.n	80029a6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d010      	beq.n	80029fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d208      	bcs.n	80029fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f023 020f 	bic.w	r2, r3, #15
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	490e      	ldr	r1, [pc, #56]	; (8002a30 <HAL_RCC_ClockConfig+0x244>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_RCC_ClockConfig+0x240>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d214      	bcs.n	8002a34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <HAL_RCC_ClockConfig+0x240>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 020f 	bic.w	r2, r3, #15
 8002a12:	4906      	ldr	r1, [pc, #24]	; (8002a2c <HAL_RCC_ClockConfig+0x240>)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <HAL_RCC_ClockConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e086      	b.n	8002b3a <HAL_RCC_ClockConfig+0x34e>
 8002a2c:	52002000 	.word	0x52002000
 8002a30:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d010      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	4b3f      	ldr	r3, [pc, #252]	; (8002b44 <HAL_RCC_ClockConfig+0x358>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d208      	bcs.n	8002a62 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a50:	4b3c      	ldr	r3, [pc, #240]	; (8002b44 <HAL_RCC_ClockConfig+0x358>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	4939      	ldr	r1, [pc, #228]	; (8002b44 <HAL_RCC_ClockConfig+0x358>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d010      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	4b34      	ldr	r3, [pc, #208]	; (8002b44 <HAL_RCC_ClockConfig+0x358>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d208      	bcs.n	8002a90 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a7e:	4b31      	ldr	r3, [pc, #196]	; (8002b44 <HAL_RCC_ClockConfig+0x358>)
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	492e      	ldr	r1, [pc, #184]	; (8002b44 <HAL_RCC_ClockConfig+0x358>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d010      	beq.n	8002abe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	699a      	ldr	r2, [r3, #24]
 8002aa0:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <HAL_RCC_ClockConfig+0x358>)
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d208      	bcs.n	8002abe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <HAL_RCC_ClockConfig+0x358>)
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	4922      	ldr	r1, [pc, #136]	; (8002b44 <HAL_RCC_ClockConfig+0x358>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d010      	beq.n	8002aec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69da      	ldr	r2, [r3, #28]
 8002ace:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_RCC_ClockConfig+0x358>)
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d208      	bcs.n	8002aec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <HAL_RCC_ClockConfig+0x358>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	4917      	ldr	r1, [pc, #92]	; (8002b44 <HAL_RCC_ClockConfig+0x358>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002aec:	f000 f834 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <HAL_RCC_ClockConfig+0x358>)
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	0a1b      	lsrs	r3, r3, #8
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	4912      	ldr	r1, [pc, #72]	; (8002b48 <HAL_RCC_ClockConfig+0x35c>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
 8002b08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <HAL_RCC_ClockConfig+0x358>)
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	4a0d      	ldr	r2, [pc, #52]	; (8002b48 <HAL_RCC_ClockConfig+0x35c>)
 8002b14:	5cd3      	ldrb	r3, [r2, r3]
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b20:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <HAL_RCC_ClockConfig+0x360>)
 8002b22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b24:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <HAL_RCC_ClockConfig+0x364>)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_RCC_ClockConfig+0x368>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fe72 	bl	8001818 <HAL_InitTick>
 8002b34:	4603      	mov	r3, r0
 8002b36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	58024400 	.word	0x58024400
 8002b48:	0800923c 	.word	0x0800923c
 8002b4c:	24000004 	.word	0x24000004
 8002b50:	24000000 	.word	0x24000000
 8002b54:	24000018 	.word	0x24000018

08002b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b089      	sub	sp, #36	; 0x24
 8002b5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b5e:	4bb3      	ldr	r3, [pc, #716]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b66:	2b18      	cmp	r3, #24
 8002b68:	f200 8155 	bhi.w	8002e16 <HAL_RCC_GetSysClockFreq+0x2be>
 8002b6c:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b72:	bf00      	nop
 8002b74:	08002bd9 	.word	0x08002bd9
 8002b78:	08002e17 	.word	0x08002e17
 8002b7c:	08002e17 	.word	0x08002e17
 8002b80:	08002e17 	.word	0x08002e17
 8002b84:	08002e17 	.word	0x08002e17
 8002b88:	08002e17 	.word	0x08002e17
 8002b8c:	08002e17 	.word	0x08002e17
 8002b90:	08002e17 	.word	0x08002e17
 8002b94:	08002bff 	.word	0x08002bff
 8002b98:	08002e17 	.word	0x08002e17
 8002b9c:	08002e17 	.word	0x08002e17
 8002ba0:	08002e17 	.word	0x08002e17
 8002ba4:	08002e17 	.word	0x08002e17
 8002ba8:	08002e17 	.word	0x08002e17
 8002bac:	08002e17 	.word	0x08002e17
 8002bb0:	08002e17 	.word	0x08002e17
 8002bb4:	08002c05 	.word	0x08002c05
 8002bb8:	08002e17 	.word	0x08002e17
 8002bbc:	08002e17 	.word	0x08002e17
 8002bc0:	08002e17 	.word	0x08002e17
 8002bc4:	08002e17 	.word	0x08002e17
 8002bc8:	08002e17 	.word	0x08002e17
 8002bcc:	08002e17 	.word	0x08002e17
 8002bd0:	08002e17 	.word	0x08002e17
 8002bd4:	08002c0b 	.word	0x08002c0b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bd8:	4b94      	ldr	r3, [pc, #592]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0320 	and.w	r3, r3, #32
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d009      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002be4:	4b91      	ldr	r3, [pc, #580]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	08db      	lsrs	r3, r3, #3
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	4a90      	ldr	r2, [pc, #576]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002bf6:	e111      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002bf8:	4b8d      	ldr	r3, [pc, #564]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002bfa:	61bb      	str	r3, [r7, #24]
    break;
 8002bfc:	e10e      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002bfe:	4b8d      	ldr	r3, [pc, #564]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c00:	61bb      	str	r3, [r7, #24]
    break;
 8002c02:	e10b      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002c04:	4b8c      	ldr	r3, [pc, #560]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c06:	61bb      	str	r3, [r7, #24]
    break;
 8002c08:	e108      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c0a:	4b88      	ldr	r3, [pc, #544]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002c14:	4b85      	ldr	r3, [pc, #532]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c1e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c20:	4b82      	ldr	r3, [pc, #520]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002c2a:	4b80      	ldr	r3, [pc, #512]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2e:	08db      	lsrs	r3, r3, #3
 8002c30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	fb02 f303 	mul.w	r3, r2, r3
 8002c3a:	ee07 3a90 	vmov	s15, r3
 8002c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c42:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80e1 	beq.w	8002e10 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	f000 8083 	beq.w	8002d5c <HAL_RCC_GetSysClockFreq+0x204>
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	f200 80a1 	bhi.w	8002da0 <HAL_RCC_GetSysClockFreq+0x248>
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x114>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d056      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002c6a:	e099      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c6c:	4b6f      	ldr	r3, [pc, #444]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d02d      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c78:	4b6c      	ldr	r3, [pc, #432]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	08db      	lsrs	r3, r3, #3
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	4a6b      	ldr	r2, [pc, #428]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
 8002c88:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	ee07 3a90 	vmov	s15, r3
 8002c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ca2:	4b62      	ldr	r3, [pc, #392]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cb6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002cd2:	e087      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	ee07 3a90 	vmov	s15, r3
 8002cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cde:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002e40 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ce6:	4b51      	ldr	r3, [pc, #324]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cee:	ee07 3a90 	vmov	s15, r3
 8002cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cfa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d16:	e065      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	ee07 3a90 	vmov	s15, r3
 8002d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d22:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002e44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d2a:	4b40      	ldr	r3, [pc, #256]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d32:	ee07 3a90 	vmov	s15, r3
 8002d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d3e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d5a:	e043      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	ee07 3a90 	vmov	s15, r3
 8002d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d66:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002e48 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d6e:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d82:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d9e:	e021      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	ee07 3a90 	vmov	s15, r3
 8002da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002daa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002e44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002db2:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dc6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002de2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	0a5b      	lsrs	r3, r3, #9
 8002dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dee:	3301      	adds	r3, #1
 8002df0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e08:	ee17 3a90 	vmov	r3, s15
 8002e0c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002e0e:	e005      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	61bb      	str	r3, [r7, #24]
    break;
 8002e14:	e002      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e18:	61bb      	str	r3, [r7, #24]
    break;
 8002e1a:	bf00      	nop
  }

  return sysclockfreq;
 8002e1c:	69bb      	ldr	r3, [r7, #24]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3724      	adds	r7, #36	; 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	58024400 	.word	0x58024400
 8002e30:	03d09000 	.word	0x03d09000
 8002e34:	003d0900 	.word	0x003d0900
 8002e38:	007a1200 	.word	0x007a1200
 8002e3c:	46000000 	.word	0x46000000
 8002e40:	4c742400 	.word	0x4c742400
 8002e44:	4a742400 	.word	0x4a742400
 8002e48:	4af42400 	.word	0x4af42400

08002e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002e52:	f7ff fe81 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002e56:	4602      	mov	r2, r0
 8002e58:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <HAL_RCC_GetHCLKFreq+0x50>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	0a1b      	lsrs	r3, r3, #8
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	490f      	ldr	r1, [pc, #60]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002e64:	5ccb      	ldrb	r3, [r1, r3]
 8002e66:	f003 031f 	and.w	r3, r3, #31
 8002e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e70:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <HAL_RCC_GetHCLKFreq+0x50>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002e7a:	5cd3      	ldrb	r3, [r2, r3]
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	fa22 f303 	lsr.w	r3, r2, r3
 8002e86:	4a07      	ldr	r2, [pc, #28]	; (8002ea4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002e88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e8a:	4a07      	ldr	r2, [pc, #28]	; (8002ea8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	58024400 	.word	0x58024400
 8002ea0:	0800923c 	.word	0x0800923c
 8002ea4:	24000004 	.word	0x24000004
 8002ea8:	24000000 	.word	0x24000000

08002eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002eb0:	f7ff ffcc 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	4904      	ldr	r1, [pc, #16]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	58024400 	.word	0x58024400
 8002ed4:	0800923c 	.word	0x0800923c

08002ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002edc:	f7ff ffb6 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	0a1b      	lsrs	r3, r3, #8
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4904      	ldr	r1, [pc, #16]	; (8002f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	58024400 	.word	0x58024400
 8002f00:	0800923c 	.word	0x0800923c

08002f04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f10:	2300      	movs	r3, #0
 8002f12:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d03f      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f28:	d02a      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f2e:	d824      	bhi.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f34:	d018      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f3a:	d81e      	bhi.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f44:	d007      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f46:	e018      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f48:	4ba3      	ldr	r3, [pc, #652]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	4aa2      	ldr	r2, [pc, #648]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f54:	e015      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 f9d5 	bl	800430c <RCCEx_PLL2_Config>
 8002f62:	4603      	mov	r3, r0
 8002f64:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f66:	e00c      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3324      	adds	r3, #36	; 0x24
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f001 fa7e 	bl	8004470 <RCCEx_PLL3_Config>
 8002f74:	4603      	mov	r3, r0
 8002f76:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f78:	e003      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8002f7e:	e000      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d109      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002f88:	4b93      	ldr	r3, [pc, #588]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f94:	4990      	ldr	r1, [pc, #576]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	650b      	str	r3, [r1, #80]	; 0x50
 8002f9a:	e001      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
 8002f9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d03d      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d826      	bhi.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002fb4:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fba:	bf00      	nop
 8002fbc:	08002fd1 	.word	0x08002fd1
 8002fc0:	08002fdf 	.word	0x08002fdf
 8002fc4:	08002ff1 	.word	0x08002ff1
 8002fc8:	08003009 	.word	0x08003009
 8002fcc:	08003009 	.word	0x08003009
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd0:	4b81      	ldr	r3, [pc, #516]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	4a80      	ldr	r2, [pc, #512]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fdc:	e015      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f001 f991 	bl	800430c <RCCEx_PLL2_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fee:	e00c      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3324      	adds	r3, #36	; 0x24
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 fa3a 	bl	8004470 <RCCEx_PLL3_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003000:	e003      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	75fb      	strb	r3, [r7, #23]
      break;
 8003006:	e000      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003008:	bf00      	nop
    }

    if(ret == HAL_OK)
 800300a:	7dfb      	ldrb	r3, [r7, #23]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d109      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003010:	4b71      	ldr	r3, [pc, #452]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003014:	f023 0207 	bic.w	r2, r3, #7
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301c:	496e      	ldr	r1, [pc, #440]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800301e:	4313      	orrs	r3, r2
 8003020:	650b      	str	r3, [r1, #80]	; 0x50
 8003022:	e001      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003024:	7dfb      	ldrb	r3, [r7, #23]
 8003026:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003030:	2b00      	cmp	r3, #0
 8003032:	d042      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800303c:	d02b      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800303e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003042:	d825      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003044:	2bc0      	cmp	r3, #192	; 0xc0
 8003046:	d028      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003048:	2bc0      	cmp	r3, #192	; 0xc0
 800304a:	d821      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800304c:	2b80      	cmp	r3, #128	; 0x80
 800304e:	d016      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003050:	2b80      	cmp	r3, #128	; 0x80
 8003052:	d81d      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003058:	2b40      	cmp	r3, #64	; 0x40
 800305a:	d007      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800305c:	e018      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800305e:	4b5e      	ldr	r3, [pc, #376]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	4a5d      	ldr	r2, [pc, #372]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003068:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800306a:	e017      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3304      	adds	r3, #4
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f001 f94a 	bl	800430c <RCCEx_PLL2_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800307c:	e00e      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3324      	adds	r3, #36	; 0x24
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f001 f9f3 	bl	8004470 <RCCEx_PLL3_Config>
 800308a:	4603      	mov	r3, r0
 800308c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800308e:	e005      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	75fb      	strb	r3, [r7, #23]
      break;
 8003094:	e002      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003096:	bf00      	nop
 8003098:	e000      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800309a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80030a2:	4b4d      	ldr	r3, [pc, #308]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80030a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	494a      	ldr	r1, [pc, #296]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	650b      	str	r3, [r1, #80]	; 0x50
 80030b4:	e001      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d049      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030d0:	d030      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80030d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030d6:	d82a      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80030d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80030dc:	d02c      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80030de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80030e2:	d824      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80030e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e8:	d018      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80030ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ee:	d81e      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80030f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030f8:	d007      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80030fa:	e018      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030fc:	4b36      	ldr	r3, [pc, #216]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	4a35      	ldr	r2, [pc, #212]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003106:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003108:	e017      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3304      	adds	r3, #4
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f001 f8fb 	bl	800430c <RCCEx_PLL2_Config>
 8003116:	4603      	mov	r3, r0
 8003118:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800311a:	e00e      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3324      	adds	r3, #36	; 0x24
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f001 f9a4 	bl	8004470 <RCCEx_PLL3_Config>
 8003128:	4603      	mov	r3, r0
 800312a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800312c:	e005      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]
      break;
 8003132:	e002      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003134:	bf00      	nop
 8003136:	e000      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800313a:	7dfb      	ldrb	r3, [r7, #23]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003140:	4b25      	ldr	r3, [pc, #148]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800314e:	4922      	ldr	r1, [pc, #136]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003150:	4313      	orrs	r3, r2
 8003152:	658b      	str	r3, [r1, #88]	; 0x58
 8003154:	e001      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003156:	7dfb      	ldrb	r3, [r7, #23]
 8003158:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003162:	2b00      	cmp	r3, #0
 8003164:	d04b      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800316c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003170:	d030      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003172:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003176:	d82a      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003178:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800317c:	d02e      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800317e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003182:	d824      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003184:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003188:	d018      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800318a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800318e:	d81e      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003198:	d007      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800319a:	e018      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800319c:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	4a0d      	ldr	r2, [pc, #52]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031a8:	e019      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f001 f8ab 	bl	800430c <RCCEx_PLL2_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80031ba:	e010      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3324      	adds	r3, #36	; 0x24
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 f954 	bl	8004470 <RCCEx_PLL3_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031cc:	e007      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
      break;
 80031d2:	e004      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80031d4:	bf00      	nop
 80031d6:	e002      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80031d8:	58024400 	.word	0x58024400
      break;
 80031dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10a      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80031e4:	4b99      	ldr	r3, [pc, #612]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80031e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80031f2:	4996      	ldr	r1, [pc, #600]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	658b      	str	r3, [r1, #88]	; 0x58
 80031f8:	e001      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fa:	7dfb      	ldrb	r3, [r7, #23]
 80031fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d032      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320e:	2b30      	cmp	r3, #48	; 0x30
 8003210:	d01c      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003212:	2b30      	cmp	r3, #48	; 0x30
 8003214:	d817      	bhi.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003216:	2b20      	cmp	r3, #32
 8003218:	d00c      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800321a:	2b20      	cmp	r3, #32
 800321c:	d813      	bhi.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800321e:	2b00      	cmp	r3, #0
 8003220:	d016      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003222:	2b10      	cmp	r3, #16
 8003224:	d10f      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003226:	4b89      	ldr	r3, [pc, #548]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	4a88      	ldr	r2, [pc, #544]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800322c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003230:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003232:	e00e      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3304      	adds	r3, #4
 8003238:	2102      	movs	r1, #2
 800323a:	4618      	mov	r0, r3
 800323c:	f001 f866 	bl	800430c <RCCEx_PLL2_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003244:	e005      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
      break;
 800324a:	e002      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800324c:	bf00      	nop
 800324e:	e000      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003258:	4b7c      	ldr	r3, [pc, #496]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800325a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003264:	4979      	ldr	r1, [pc, #484]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003266:	4313      	orrs	r3, r2
 8003268:	64cb      	str	r3, [r1, #76]	; 0x4c
 800326a:	e001      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d047      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003284:	d030      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800328a:	d82a      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800328c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003290:	d02c      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003292:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003296:	d824      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800329c:	d018      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800329e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a2:	d81e      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80032a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ac:	d007      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80032ae:	e018      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032b0:	4b66      	ldr	r3, [pc, #408]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	4a65      	ldr	r2, [pc, #404]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80032bc:	e017      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3304      	adds	r3, #4
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f001 f821 	bl	800430c <RCCEx_PLL2_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80032ce:	e00e      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3324      	adds	r3, #36	; 0x24
 80032d4:	2100      	movs	r1, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 f8ca 	bl	8004470 <RCCEx_PLL3_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80032e0:	e005      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75fb      	strb	r3, [r7, #23]
      break;
 80032e6:	e002      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80032e8:	bf00      	nop
 80032ea:	e000      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80032ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d109      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80032f4:	4b55      	ldr	r3, [pc, #340]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	4952      	ldr	r1, [pc, #328]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003302:	4313      	orrs	r3, r2
 8003304:	650b      	str	r3, [r1, #80]	; 0x50
 8003306:	e001      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d049      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003320:	d02e      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003322:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003326:	d828      	bhi.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003328:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800332c:	d02a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800332e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003332:	d822      	bhi.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003334:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003338:	d026      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800333a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800333e:	d81c      	bhi.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003344:	d010      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003346:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800334a:	d816      	bhi.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01d      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003354:	d111      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	2101      	movs	r1, #1
 800335c:	4618      	mov	r0, r3
 800335e:	f000 ffd5 	bl	800430c <RCCEx_PLL2_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003366:	e012      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3324      	adds	r3, #36	; 0x24
 800336c:	2101      	movs	r1, #1
 800336e:	4618      	mov	r0, r3
 8003370:	f001 f87e 	bl	8004470 <RCCEx_PLL3_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003378:	e009      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	75fb      	strb	r3, [r7, #23]
      break;
 800337e:	e006      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003380:	bf00      	nop
 8003382:	e004      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003384:	bf00      	nop
 8003386:	e002      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003388:	bf00      	nop
 800338a:	e000      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800338c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d109      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003394:	4b2d      	ldr	r3, [pc, #180]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003398:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a0:	492a      	ldr	r1, [pc, #168]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	650b      	str	r3, [r1, #80]	; 0x50
 80033a6:	e001      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
 80033aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d04d      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033c2:	d02e      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80033c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033c8:	d828      	bhi.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ce:	d02a      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80033d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d4:	d822      	bhi.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80033d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033da:	d026      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80033dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033e0:	d81c      	bhi.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80033e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033e6:	d010      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80033e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ec:	d816      	bhi.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01d      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80033f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033f6:	d111      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	2101      	movs	r1, #1
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 ff84 	bl	800430c <RCCEx_PLL2_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003408:	e012      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3324      	adds	r3, #36	; 0x24
 800340e:	2101      	movs	r1, #1
 8003410:	4618      	mov	r0, r3
 8003412:	f001 f82d 	bl	8004470 <RCCEx_PLL3_Config>
 8003416:	4603      	mov	r3, r0
 8003418:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800341a:	e009      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	75fb      	strb	r3, [r7, #23]
      break;
 8003420:	e006      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003422:	bf00      	nop
 8003424:	e004      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003426:	bf00      	nop
 8003428:	e002      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800342a:	bf00      	nop
 800342c:	e000      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800342e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003430:	7dfb      	ldrb	r3, [r7, #23]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10c      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003436:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003444:	4901      	ldr	r1, [pc, #4]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003446:	4313      	orrs	r3, r2
 8003448:	658b      	str	r3, [r1, #88]	; 0x58
 800344a:	e003      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800344c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d02f      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003468:	d00e      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800346a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800346e:	d814      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003470:	2b00      	cmp	r3, #0
 8003472:	d015      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003478:	d10f      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800347a:	4baf      	ldr	r3, [pc, #700]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	4aae      	ldr	r2, [pc, #696]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003484:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003486:	e00c      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3304      	adds	r3, #4
 800348c:	2101      	movs	r1, #1
 800348e:	4618      	mov	r0, r3
 8003490:	f000 ff3c 	bl	800430c <RCCEx_PLL2_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003498:	e003      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	75fb      	strb	r3, [r7, #23]
      break;
 800349e:	e000      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80034a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d109      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80034a8:	4ba3      	ldr	r3, [pc, #652]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80034aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034b4:	49a0      	ldr	r1, [pc, #640]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	650b      	str	r3, [r1, #80]	; 0x50
 80034ba:	e001      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d032      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d81b      	bhi.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	08003513 	.word	0x08003513
 80034e0:	080034ed 	.word	0x080034ed
 80034e4:	080034fb 	.word	0x080034fb
 80034e8:	08003513 	.word	0x08003513
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ec:	4b92      	ldr	r3, [pc, #584]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	4a91      	ldr	r2, [pc, #580]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80034f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80034f8:	e00c      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3304      	adds	r3, #4
 80034fe:	2102      	movs	r1, #2
 8003500:	4618      	mov	r0, r3
 8003502:	f000 ff03 	bl	800430c <RCCEx_PLL2_Config>
 8003506:	4603      	mov	r3, r0
 8003508:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800350a:	e003      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	75fb      	strb	r3, [r7, #23]
      break;
 8003510:	e000      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003514:	7dfb      	ldrb	r3, [r7, #23]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800351a:	4b87      	ldr	r3, [pc, #540]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800351c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351e:	f023 0203 	bic.w	r2, r3, #3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	4984      	ldr	r1, [pc, #528]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003528:	4313      	orrs	r3, r2
 800352a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800352c:	e001      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352e:	7dfb      	ldrb	r3, [r7, #23]
 8003530:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 8086 	beq.w	800364c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003540:	4b7e      	ldr	r3, [pc, #504]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a7d      	ldr	r2, [pc, #500]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800354c:	f7fe f9ae 	bl	80018ac <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003552:	e009      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003554:	f7fe f9aa 	bl	80018ac <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	; 0x64
 8003560:	d902      	bls.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	75fb      	strb	r3, [r7, #23]
        break;
 8003566:	e005      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003568:	4b74      	ldr	r3, [pc, #464]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ef      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003574:	7dfb      	ldrb	r3, [r7, #23]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d166      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800357a:	4b6f      	ldr	r3, [pc, #444]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800357c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003584:	4053      	eors	r3, r2
 8003586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358a:	2b00      	cmp	r3, #0
 800358c:	d013      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800358e:	4b6a      	ldr	r3, [pc, #424]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003596:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003598:	4b67      	ldr	r3, [pc, #412]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	4a66      	ldr	r2, [pc, #408]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800359e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035a4:	4b64      	ldr	r3, [pc, #400]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	4a63      	ldr	r2, [pc, #396]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80035b0:	4a61      	ldr	r2, [pc, #388]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c0:	d115      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c2:	f7fe f973 	bl	80018ac <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035c8:	e00b      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ca:	f7fe f96f 	bl	80018ac <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d8:	4293      	cmp	r3, r2
 80035da:	d902      	bls.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	75fb      	strb	r3, [r7, #23]
            break;
 80035e0:	e005      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035e2:	4b55      	ldr	r3, [pc, #340]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0ed      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80035ee:	7dfb      	ldrb	r3, [r7, #23]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d126      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003602:	d10d      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003604:	4b4c      	ldr	r3, [pc, #304]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003612:	0919      	lsrs	r1, r3, #4
 8003614:	4b4a      	ldr	r3, [pc, #296]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003616:	400b      	ands	r3, r1
 8003618:	4947      	ldr	r1, [pc, #284]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800361a:	4313      	orrs	r3, r2
 800361c:	610b      	str	r3, [r1, #16]
 800361e:	e005      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003620:	4b45      	ldr	r3, [pc, #276]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	4a44      	ldr	r2, [pc, #272]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003626:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800362a:	6113      	str	r3, [r2, #16]
 800362c:	4b42      	ldr	r3, [pc, #264]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800362e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363a:	493f      	ldr	r1, [pc, #252]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800363c:	4313      	orrs	r3, r2
 800363e:	670b      	str	r3, [r1, #112]	; 0x70
 8003640:	e004      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003642:	7dfb      	ldrb	r3, [r7, #23]
 8003644:	75bb      	strb	r3, [r7, #22]
 8003646:	e001      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003648:	7dfb      	ldrb	r3, [r7, #23]
 800364a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8085 	beq.w	8003764 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800365e:	2b28      	cmp	r3, #40	; 0x28
 8003660:	d866      	bhi.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003662:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003668:	08003745 	.word	0x08003745
 800366c:	08003731 	.word	0x08003731
 8003670:	08003731 	.word	0x08003731
 8003674:	08003731 	.word	0x08003731
 8003678:	08003731 	.word	0x08003731
 800367c:	08003731 	.word	0x08003731
 8003680:	08003731 	.word	0x08003731
 8003684:	08003731 	.word	0x08003731
 8003688:	0800370d 	.word	0x0800370d
 800368c:	08003731 	.word	0x08003731
 8003690:	08003731 	.word	0x08003731
 8003694:	08003731 	.word	0x08003731
 8003698:	08003731 	.word	0x08003731
 800369c:	08003731 	.word	0x08003731
 80036a0:	08003731 	.word	0x08003731
 80036a4:	08003731 	.word	0x08003731
 80036a8:	0800371f 	.word	0x0800371f
 80036ac:	08003731 	.word	0x08003731
 80036b0:	08003731 	.word	0x08003731
 80036b4:	08003731 	.word	0x08003731
 80036b8:	08003731 	.word	0x08003731
 80036bc:	08003731 	.word	0x08003731
 80036c0:	08003731 	.word	0x08003731
 80036c4:	08003731 	.word	0x08003731
 80036c8:	08003745 	.word	0x08003745
 80036cc:	08003731 	.word	0x08003731
 80036d0:	08003731 	.word	0x08003731
 80036d4:	08003731 	.word	0x08003731
 80036d8:	08003731 	.word	0x08003731
 80036dc:	08003731 	.word	0x08003731
 80036e0:	08003731 	.word	0x08003731
 80036e4:	08003731 	.word	0x08003731
 80036e8:	08003745 	.word	0x08003745
 80036ec:	08003731 	.word	0x08003731
 80036f0:	08003731 	.word	0x08003731
 80036f4:	08003731 	.word	0x08003731
 80036f8:	08003731 	.word	0x08003731
 80036fc:	08003731 	.word	0x08003731
 8003700:	08003731 	.word	0x08003731
 8003704:	08003731 	.word	0x08003731
 8003708:	08003745 	.word	0x08003745
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	2101      	movs	r1, #1
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fdfa 	bl	800430c <RCCEx_PLL2_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800371c:	e013      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3324      	adds	r3, #36	; 0x24
 8003722:	2101      	movs	r1, #1
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fea3 	bl	8004470 <RCCEx_PLL3_Config>
 800372a:	4603      	mov	r3, r0
 800372c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800372e:	e00a      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	75fb      	strb	r3, [r7, #23]
      break;
 8003734:	e007      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003736:	bf00      	nop
 8003738:	58024400 	.word	0x58024400
 800373c:	58024800 	.word	0x58024800
 8003740:	00ffffcf 	.word	0x00ffffcf
      break;
 8003744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d109      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800374c:	4b96      	ldr	r3, [pc, #600]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800374e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003750:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003758:	4993      	ldr	r1, [pc, #588]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800375a:	4313      	orrs	r3, r2
 800375c:	654b      	str	r3, [r1, #84]	; 0x54
 800375e:	e001      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003760:	7dfb      	ldrb	r3, [r7, #23]
 8003762:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d038      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003774:	2b05      	cmp	r3, #5
 8003776:	d821      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003778:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800377a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377e:	bf00      	nop
 8003780:	080037c3 	.word	0x080037c3
 8003784:	08003799 	.word	0x08003799
 8003788:	080037ab 	.word	0x080037ab
 800378c:	080037c3 	.word	0x080037c3
 8003790:	080037c3 	.word	0x080037c3
 8003794:	080037c3 	.word	0x080037c3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3304      	adds	r3, #4
 800379c:	2101      	movs	r1, #1
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fdb4 	bl	800430c <RCCEx_PLL2_Config>
 80037a4:	4603      	mov	r3, r0
 80037a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80037a8:	e00c      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3324      	adds	r3, #36	; 0x24
 80037ae:	2101      	movs	r1, #1
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 fe5d 	bl	8004470 <RCCEx_PLL3_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80037ba:	e003      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	75fb      	strb	r3, [r7, #23]
      break;
 80037c0:	e000      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80037c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c4:	7dfb      	ldrb	r3, [r7, #23]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80037ca:	4b77      	ldr	r3, [pc, #476]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80037cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ce:	f023 0207 	bic.w	r2, r3, #7
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d6:	4974      	ldr	r1, [pc, #464]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	654b      	str	r3, [r1, #84]	; 0x54
 80037dc:	e001      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037de:	7dfb      	ldrb	r3, [r7, #23]
 80037e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d03a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f4:	2b05      	cmp	r3, #5
 80037f6:	d821      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x938>
 80037f8:	a201      	add	r2, pc, #4	; (adr r2, 8003800 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80037fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fe:	bf00      	nop
 8003800:	08003843 	.word	0x08003843
 8003804:	08003819 	.word	0x08003819
 8003808:	0800382b 	.word	0x0800382b
 800380c:	08003843 	.word	0x08003843
 8003810:	08003843 	.word	0x08003843
 8003814:	08003843 	.word	0x08003843
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3304      	adds	r3, #4
 800381c:	2101      	movs	r1, #1
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fd74 	bl	800430c <RCCEx_PLL2_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003828:	e00c      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3324      	adds	r3, #36	; 0x24
 800382e:	2101      	movs	r1, #1
 8003830:	4618      	mov	r0, r3
 8003832:	f000 fe1d 	bl	8004470 <RCCEx_PLL3_Config>
 8003836:	4603      	mov	r3, r0
 8003838:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800383a:	e003      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	75fb      	strb	r3, [r7, #23]
      break;
 8003840:	e000      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10a      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800384a:	4b57      	ldr	r3, [pc, #348]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800384c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384e:	f023 0207 	bic.w	r2, r3, #7
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003858:	4953      	ldr	r1, [pc, #332]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800385a:	4313      	orrs	r3, r2
 800385c:	658b      	str	r3, [r1, #88]	; 0x58
 800385e:	e001      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003860:	7dfb      	ldrb	r3, [r7, #23]
 8003862:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b00      	cmp	r3, #0
 800386e:	d04b      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800387a:	d02e      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800387c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003880:	d828      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003886:	d02a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388c:	d822      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800388e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003892:	d026      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003894:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003898:	d81c      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800389a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800389e:	d010      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80038a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038a4:	d816      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d01d      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80038aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ae:	d111      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fd28 	bl	800430c <RCCEx_PLL2_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80038c0:	e012      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3324      	adds	r3, #36	; 0x24
 80038c6:	2102      	movs	r1, #2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fdd1 	bl	8004470 <RCCEx_PLL3_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80038d2:	e009      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	75fb      	strb	r3, [r7, #23]
      break;
 80038d8:	e006      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80038da:	bf00      	nop
 80038dc:	e004      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80038de:	bf00      	nop
 80038e0:	e002      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80038e2:	bf00      	nop
 80038e4:	e000      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80038e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10a      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ee:	4b2e      	ldr	r3, [pc, #184]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80038f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038fc:	492a      	ldr	r1, [pc, #168]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	654b      	str	r3, [r1, #84]	; 0x54
 8003902:	e001      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d04d      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800391a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800391e:	d02e      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003920:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003924:	d828      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392a:	d02a      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800392c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003930:	d822      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003932:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003936:	d026      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003938:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800393c:	d81c      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800393e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003942:	d010      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003948:	d816      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d01d      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800394e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003952:	d111      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3304      	adds	r3, #4
 8003958:	2100      	movs	r1, #0
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fcd6 	bl	800430c <RCCEx_PLL2_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003964:	e012      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3324      	adds	r3, #36	; 0x24
 800396a:	2102      	movs	r1, #2
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fd7f 	bl	8004470 <RCCEx_PLL3_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003976:	e009      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	75fb      	strb	r3, [r7, #23]
      break;
 800397c:	e006      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800397e:	bf00      	nop
 8003980:	e004      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003982:	bf00      	nop
 8003984:	e002      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003986:	bf00      	nop
 8003988:	e000      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800398a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800398c:	7dfb      	ldrb	r3, [r7, #23]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10c      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039a0:	4901      	ldr	r1, [pc, #4]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	658b      	str	r3, [r1, #88]	; 0x58
 80039a6:	e003      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80039a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d04b      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80039c6:	d02e      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80039c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80039cc:	d828      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80039ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d2:	d02a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80039d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d8:	d822      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80039da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80039de:	d026      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80039e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80039e4:	d81c      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80039e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ea:	d010      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80039ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039f0:	d816      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01d      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80039f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039fa:	d111      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	2100      	movs	r1, #0
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fc82 	bl	800430c <RCCEx_PLL2_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003a0c:	e012      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3324      	adds	r3, #36	; 0x24
 8003a12:	2102      	movs	r1, #2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fd2b 	bl	8004470 <RCCEx_PLL3_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003a1e:	e009      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	75fb      	strb	r3, [r7, #23]
      break;
 8003a24:	e006      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003a26:	bf00      	nop
 8003a28:	e004      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e002      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003a2e:	bf00      	nop
 8003a30:	e000      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10a      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003a3a:	4b9d      	ldr	r3, [pc, #628]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a48:	4999      	ldr	r1, [pc, #612]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	658b      	str	r3, [r1, #88]	; 0x58
 8003a4e:	e001      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a50:	7dfb      	ldrb	r3, [r7, #23]
 8003a52:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6a:	d10a      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3324      	adds	r3, #36	; 0x24
 8003a70:	2102      	movs	r1, #2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fcfc 	bl	8004470 <RCCEx_PLL3_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003a82:	4b8b      	ldr	r3, [pc, #556]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a90:	4987      	ldr	r1, [pc, #540]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d01a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aac:	d10a      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3324      	adds	r3, #36	; 0x24
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fcdb 	bl	8004470 <RCCEx_PLL3_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ac4:	4b7a      	ldr	r3, [pc, #488]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad2:	4977      	ldr	r1, [pc, #476]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d034      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003aea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aee:	d01d      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003af4:	d817      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afe:	d009      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003b00:	e011      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3304      	adds	r3, #4
 8003b06:	2100      	movs	r1, #0
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fbff 	bl	800430c <RCCEx_PLL2_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003b12:	e00c      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3324      	adds	r3, #36	; 0x24
 8003b18:	2102      	movs	r1, #2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fca8 	bl	8004470 <RCCEx_PLL3_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003b24:	e003      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	75fb      	strb	r3, [r7, #23]
      break;
 8003b2a:	e000      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b34:	4b5e      	ldr	r3, [pc, #376]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b42:	495b      	ldr	r1, [pc, #364]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	658b      	str	r3, [r1, #88]	; 0x58
 8003b48:	e001      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
 8003b4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d033      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b64:	d01c      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003b66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b6a:	d816      	bhi.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b70:	d003      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003b72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b76:	d007      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003b78:	e00f      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b7a:	4b4d      	ldr	r3, [pc, #308]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	4a4c      	ldr	r2, [pc, #304]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003b86:	e00c      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3324      	adds	r3, #36	; 0x24
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fc6e 	bl	8004470 <RCCEx_PLL3_Config>
 8003b94:	4603      	mov	r3, r0
 8003b96:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003b98:	e003      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003ba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10a      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ba8:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb6:	493e      	ldr	r1, [pc, #248]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	654b      	str	r3, [r1, #84]	; 0x54
 8003bbc:	e001      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
 8003bc0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d029      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bda:	d007      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003bdc:	e00f      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bde:	4b34      	ldr	r3, [pc, #208]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	4a33      	ldr	r2, [pc, #204]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003bea:	e00b      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fb8a 	bl	800430c <RCCEx_PLL2_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003bfc:	e002      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
      break;
 8003c02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003c0a:	4b29      	ldr	r3, [pc, #164]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c16:	4926      	ldr	r1, [pc, #152]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c1c:	e001      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
 8003c20:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3324      	adds	r3, #36	; 0x24
 8003c32:	2102      	movs	r1, #2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fc1b 	bl	8004470 <RCCEx_PLL3_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d033      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c58:	d017      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c5e:	d811      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c64:	d013      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c6a:	d80b      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d010      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c74:	d106      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c76:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	4a0d      	ldr	r2, [pc, #52]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003c82:	e007      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	75fb      	strb	r3, [r7, #23]
      break;
 8003c88:	e004      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003c8a:	bf00      	nop
 8003c8c:	e002      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003c8e:	bf00      	nop
 8003c90:	e000      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003c92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca6:	4902      	ldr	r1, [pc, #8]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	654b      	str	r3, [r1, #84]	; 0x54
 8003cac:	e004      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003cae:	bf00      	nop
 8003cb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
 8003cb6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cc4:	4b31      	ldr	r3, [pc, #196]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd0:	492e      	ldr	r1, [pc, #184]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003ce2:	4b2a      	ldr	r3, [pc, #168]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cf0:	4926      	ldr	r1, [pc, #152]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d02:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d0e:	491f      	ldr	r1, [pc, #124]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00d      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d20:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	4a19      	ldr	r2, [pc, #100]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d2a:	6113      	str	r3, [r2, #16]
 8003d2c:	4b17      	ldr	r3, [pc, #92]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d36:	4915      	ldr	r1, [pc, #84]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	da08      	bge.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d48:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d50:	490e      	ldr	r1, [pc, #56]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d70:	4906      	ldr	r1, [pc, #24]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003d76:	7dbb      	ldrb	r3, [r7, #22]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e000      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	58024400 	.word	0x58024400

08003d90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003d94:	f7ff f85a 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	4904      	ldr	r1, [pc, #16]	; (8003db8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003da6:	5ccb      	ldrb	r3, [r1, r3]
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	58024400 	.word	0x58024400
 8003db8:	0800923c 	.word	0x0800923c

08003dbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b089      	sub	sp, #36	; 0x24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003dc4:	4ba1      	ldr	r3, [pc, #644]	; (800404c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003dce:	4b9f      	ldr	r3, [pc, #636]	; (800404c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd2:	0b1b      	lsrs	r3, r3, #12
 8003dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dd8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003dda:	4b9c      	ldr	r3, [pc, #624]	; (800404c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	091b      	lsrs	r3, r3, #4
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003de6:	4b99      	ldr	r3, [pc, #612]	; (800404c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	08db      	lsrs	r3, r3, #3
 8003dec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	fb02 f303 	mul.w	r3, r2, r3
 8003df6:	ee07 3a90 	vmov	s15, r3
 8003dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 8111 	beq.w	800402c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	f000 8083 	beq.w	8003f18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	f200 80a1 	bhi.w	8003f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d056      	beq.n	8003ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003e26:	e099      	b.n	8003f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e28:	4b88      	ldr	r3, [pc, #544]	; (800404c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d02d      	beq.n	8003e90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e34:	4b85      	ldr	r3, [pc, #532]	; (800404c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	08db      	lsrs	r3, r3, #3
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	4a84      	ldr	r2, [pc, #528]	; (8004050 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
 8003e44:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	ee07 3a90 	vmov	s15, r3
 8003e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e5e:	4b7b      	ldr	r3, [pc, #492]	; (800404c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e72:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e8a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003e8e:	e087      	b.n	8003fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	ee07 3a90 	vmov	s15, r3
 8003e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004058 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ea2:	4b6a      	ldr	r3, [pc, #424]	; (800404c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eaa:	ee07 3a90 	vmov	s15, r3
 8003eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ece:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ed2:	e065      	b.n	8003fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ede:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800405c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ee6:	4b59      	ldr	r3, [pc, #356]	; (800404c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003efa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f16:	e043      	b.n	8003fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004060 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f2a:	4b48      	ldr	r3, [pc, #288]	; (800404c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f5a:	e021      	b.n	8003fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800405c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f6e:	4b37      	ldr	r3, [pc, #220]	; (800404c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f76:	ee07 3a90 	vmov	s15, r3
 8003f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f82:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003fa0:	4b2a      	ldr	r3, [pc, #168]	; (800404c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	0a5b      	lsrs	r3, r3, #9
 8003fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fba:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fc6:	ee17 2a90 	vmov	r2, s15
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003fce:	4b1f      	ldr	r3, [pc, #124]	; (800404c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	0c1b      	lsrs	r3, r3, #16
 8003fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fd8:	ee07 3a90 	vmov	s15, r3
 8003fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fe8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ff4:	ee17 2a90 	vmov	r2, s15
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003ffc:	4b13      	ldr	r3, [pc, #76]	; (800404c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	0e1b      	lsrs	r3, r3, #24
 8004002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004012:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004016:	edd7 6a07 	vldr	s13, [r7, #28]
 800401a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800401e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004022:	ee17 2a90 	vmov	r2, s15
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800402a:	e008      	b.n	800403e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	609a      	str	r2, [r3, #8]
}
 800403e:	bf00      	nop
 8004040:	3724      	adds	r7, #36	; 0x24
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	58024400 	.word	0x58024400
 8004050:	03d09000 	.word	0x03d09000
 8004054:	46000000 	.word	0x46000000
 8004058:	4c742400 	.word	0x4c742400
 800405c:	4a742400 	.word	0x4a742400
 8004060:	4af42400 	.word	0x4af42400

08004064 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004064:	b480      	push	{r7}
 8004066:	b089      	sub	sp, #36	; 0x24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800406c:	4ba1      	ldr	r3, [pc, #644]	; (80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004076:	4b9f      	ldr	r3, [pc, #636]	; (80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	0d1b      	lsrs	r3, r3, #20
 800407c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004080:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004082:	4b9c      	ldr	r3, [pc, #624]	; (80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	0a1b      	lsrs	r3, r3, #8
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800408e:	4b99      	ldr	r3, [pc, #612]	; (80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	08db      	lsrs	r3, r3, #3
 8004094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8111 	beq.w	80042d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	f000 8083 	beq.w	80041c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	f200 80a1 	bhi.w	8004204 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d056      	beq.n	800417c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80040ce:	e099      	b.n	8004204 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040d0:	4b88      	ldr	r3, [pc, #544]	; (80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d02d      	beq.n	8004138 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80040dc:	4b85      	ldr	r3, [pc, #532]	; (80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	08db      	lsrs	r3, r3, #3
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	4a84      	ldr	r2, [pc, #528]	; (80042f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
 80040ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	ee07 3a90 	vmov	s15, r3
 80040f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004106:	4b7b      	ldr	r3, [pc, #492]	; (80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800410e:	ee07 3a90 	vmov	s15, r3
 8004112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004116:	ed97 6a03 	vldr	s12, [r7, #12]
 800411a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80042fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800411e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800412a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800412e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004132:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004136:	e087      	b.n	8004248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004142:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004300 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800414a:	4b6a      	ldr	r3, [pc, #424]	; (80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800415a:	ed97 6a03 	vldr	s12, [r7, #12]
 800415e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80042fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800416a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800416e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800417a:	e065      	b.n	8004248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004186:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800418a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800418e:	4b59      	ldr	r3, [pc, #356]	; (80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800419e:	ed97 6a03 	vldr	s12, [r7, #12]
 80041a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80042fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041be:	e043      	b.n	8004248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80041ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041d2:	4b48      	ldr	r3, [pc, #288]	; (80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80042fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004202:	e021      	b.n	8004248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004216:	4b37      	ldr	r3, [pc, #220]	; (80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004226:	ed97 6a03 	vldr	s12, [r7, #12]
 800422a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80042fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800422e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800423a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800423e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004242:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004246:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004248:	4b2a      	ldr	r3, [pc, #168]	; (80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	0a5b      	lsrs	r3, r3, #9
 800424e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800425e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004262:	edd7 6a07 	vldr	s13, [r7, #28]
 8004266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800426a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800426e:	ee17 2a90 	vmov	r2, s15
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004276:	4b1f      	ldr	r3, [pc, #124]	; (80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004288:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800428c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004290:	edd7 6a07 	vldr	s13, [r7, #28]
 8004294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800429c:	ee17 2a90 	vmov	r2, s15
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80042a4:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	0e1b      	lsrs	r3, r3, #24
 80042aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042be:	edd7 6a07 	vldr	s13, [r7, #28]
 80042c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ca:	ee17 2a90 	vmov	r2, s15
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80042d2:	e008      	b.n	80042e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	609a      	str	r2, [r3, #8]
}
 80042e6:	bf00      	nop
 80042e8:	3724      	adds	r7, #36	; 0x24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	58024400 	.word	0x58024400
 80042f8:	03d09000 	.word	0x03d09000
 80042fc:	46000000 	.word	0x46000000
 8004300:	4c742400 	.word	0x4c742400
 8004304:	4a742400 	.word	0x4a742400
 8004308:	4af42400 	.word	0x4af42400

0800430c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800431a:	4b53      	ldr	r3, [pc, #332]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 800431c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b03      	cmp	r3, #3
 8004324:	d101      	bne.n	800432a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e099      	b.n	800445e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800432a:	4b4f      	ldr	r3, [pc, #316]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a4e      	ldr	r2, [pc, #312]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 8004330:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004336:	f7fd fab9 	bl	80018ac <HAL_GetTick>
 800433a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800433c:	e008      	b.n	8004350 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800433e:	f7fd fab5 	bl	80018ac <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e086      	b.n	800445e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004350:	4b45      	ldr	r3, [pc, #276]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f0      	bne.n	800433e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800435c:	4b42      	ldr	r3, [pc, #264]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	031b      	lsls	r3, r3, #12
 800436a:	493f      	ldr	r1, [pc, #252]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 800436c:	4313      	orrs	r3, r2
 800436e:	628b      	str	r3, [r1, #40]	; 0x28
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	3b01      	subs	r3, #1
 8004376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	3b01      	subs	r3, #1
 8004380:	025b      	lsls	r3, r3, #9
 8004382:	b29b      	uxth	r3, r3
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	3b01      	subs	r3, #1
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	3b01      	subs	r3, #1
 800439a:	061b      	lsls	r3, r3, #24
 800439c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043a0:	4931      	ldr	r1, [pc, #196]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80043a6:	4b30      	ldr	r3, [pc, #192]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	492d      	ldr	r1, [pc, #180]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80043b8:	4b2b      	ldr	r3, [pc, #172]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	f023 0220 	bic.w	r2, r3, #32
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	4928      	ldr	r1, [pc, #160]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80043ca:	4b27      	ldr	r3, [pc, #156]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	4a26      	ldr	r2, [pc, #152]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 80043d0:	f023 0310 	bic.w	r3, r3, #16
 80043d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80043d6:	4b24      	ldr	r3, [pc, #144]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 80043d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043da:	4b24      	ldr	r3, [pc, #144]	; (800446c <RCCEx_PLL2_Config+0x160>)
 80043dc:	4013      	ands	r3, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	69d2      	ldr	r2, [r2, #28]
 80043e2:	00d2      	lsls	r2, r2, #3
 80043e4:	4920      	ldr	r1, [pc, #128]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80043ea:	4b1f      	ldr	r3, [pc, #124]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	4a1e      	ldr	r2, [pc, #120]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 80043f0:	f043 0310 	orr.w	r3, r3, #16
 80043f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d106      	bne.n	800440a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80043fc:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	4a19      	ldr	r2, [pc, #100]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 8004402:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004406:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004408:	e00f      	b.n	800442a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d106      	bne.n	800441e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004410:	4b15      	ldr	r3, [pc, #84]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	4a14      	ldr	r2, [pc, #80]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 8004416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800441a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800441c:	e005      	b.n	800442a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800441e:	4b12      	ldr	r3, [pc, #72]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	4a11      	ldr	r2, [pc, #68]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 8004424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004428:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800442a:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a0e      	ldr	r2, [pc, #56]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 8004430:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004436:	f7fd fa39 	bl	80018ac <HAL_GetTick>
 800443a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800443c:	e008      	b.n	8004450 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800443e:	f7fd fa35 	bl	80018ac <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e006      	b.n	800445e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <RCCEx_PLL2_Config+0x15c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	58024400 	.word	0x58024400
 800446c:	ffff0007 	.word	0xffff0007

08004470 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800447e:	4b53      	ldr	r3, [pc, #332]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b03      	cmp	r3, #3
 8004488:	d101      	bne.n	800448e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e099      	b.n	80045c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800448e:	4b4f      	ldr	r3, [pc, #316]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a4e      	ldr	r2, [pc, #312]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 8004494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800449a:	f7fd fa07 	bl	80018ac <HAL_GetTick>
 800449e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044a0:	e008      	b.n	80044b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80044a2:	f7fd fa03 	bl	80018ac <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e086      	b.n	80045c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044b4:	4b45      	ldr	r3, [pc, #276]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f0      	bne.n	80044a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80044c0:	4b42      	ldr	r3, [pc, #264]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	051b      	lsls	r3, r3, #20
 80044ce:	493f      	ldr	r1, [pc, #252]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	628b      	str	r3, [r1, #40]	; 0x28
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	3b01      	subs	r3, #1
 80044da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	025b      	lsls	r3, r3, #9
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	041b      	lsls	r3, r3, #16
 80044f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	061b      	lsls	r3, r3, #24
 8004500:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004504:	4931      	ldr	r1, [pc, #196]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 8004506:	4313      	orrs	r3, r2
 8004508:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800450a:	4b30      	ldr	r3, [pc, #192]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	492d      	ldr	r1, [pc, #180]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 8004518:	4313      	orrs	r3, r2
 800451a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800451c:	4b2b      	ldr	r3, [pc, #172]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	4928      	ldr	r1, [pc, #160]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 800452a:	4313      	orrs	r3, r2
 800452c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800452e:	4b27      	ldr	r3, [pc, #156]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	4a26      	ldr	r2, [pc, #152]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 8004534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004538:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800453a:	4b24      	ldr	r3, [pc, #144]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 800453c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800453e:	4b24      	ldr	r3, [pc, #144]	; (80045d0 <RCCEx_PLL3_Config+0x160>)
 8004540:	4013      	ands	r3, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	69d2      	ldr	r2, [r2, #28]
 8004546:	00d2      	lsls	r2, r2, #3
 8004548:	4920      	ldr	r1, [pc, #128]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 800454a:	4313      	orrs	r3, r2
 800454c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800454e:	4b1f      	ldr	r3, [pc, #124]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	4a1e      	ldr	r2, [pc, #120]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 8004554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004558:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004560:	4b1a      	ldr	r3, [pc, #104]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	4a19      	ldr	r2, [pc, #100]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 8004566:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800456a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800456c:	e00f      	b.n	800458e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d106      	bne.n	8004582 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004574:	4b15      	ldr	r3, [pc, #84]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	4a14      	ldr	r2, [pc, #80]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 800457a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800457e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004580:	e005      	b.n	800458e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 8004584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004586:	4a11      	ldr	r2, [pc, #68]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 8004588:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800458c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800458e:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a0e      	ldr	r2, [pc, #56]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 8004594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800459a:	f7fd f987 	bl	80018ac <HAL_GetTick>
 800459e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045a0:	e008      	b.n	80045b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80045a2:	f7fd f983 	bl	80018ac <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e006      	b.n	80045c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <RCCEx_PLL3_Config+0x15c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f0      	beq.n	80045a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	58024400 	.word	0x58024400
 80045d0:	ffff0007 	.word	0xffff0007

080045d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e0f1      	b.n	80047ca <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a78      	ldr	r2, [pc, #480]	; (80047d4 <HAL_SPI_Init+0x200>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00f      	beq.n	8004616 <HAL_SPI_Init+0x42>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a77      	ldr	r2, [pc, #476]	; (80047d8 <HAL_SPI_Init+0x204>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00a      	beq.n	8004616 <HAL_SPI_Init+0x42>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a75      	ldr	r2, [pc, #468]	; (80047dc <HAL_SPI_Init+0x208>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d005      	beq.n	8004616 <HAL_SPI_Init+0x42>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2b0f      	cmp	r3, #15
 8004610:	d901      	bls.n	8004616 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e0d9      	b.n	80047ca <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 ff66 	bl	80054e8 <SPI_GetPacketSize>
 800461c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a6c      	ldr	r2, [pc, #432]	; (80047d4 <HAL_SPI_Init+0x200>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00c      	beq.n	8004642 <HAL_SPI_Init+0x6e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a6a      	ldr	r2, [pc, #424]	; (80047d8 <HAL_SPI_Init+0x204>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d007      	beq.n	8004642 <HAL_SPI_Init+0x6e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a69      	ldr	r2, [pc, #420]	; (80047dc <HAL_SPI_Init+0x208>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d002      	beq.n	8004642 <HAL_SPI_Init+0x6e>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b08      	cmp	r3, #8
 8004640:	d811      	bhi.n	8004666 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004646:	4a63      	ldr	r2, [pc, #396]	; (80047d4 <HAL_SPI_Init+0x200>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d009      	beq.n	8004660 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a61      	ldr	r2, [pc, #388]	; (80047d8 <HAL_SPI_Init+0x204>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d004      	beq.n	8004660 <HAL_SPI_Init+0x8c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a60      	ldr	r2, [pc, #384]	; (80047dc <HAL_SPI_Init+0x208>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d104      	bne.n	800466a <HAL_SPI_Init+0x96>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b10      	cmp	r3, #16
 8004664:	d901      	bls.n	800466a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e0af      	b.n	80047ca <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fc feaa 	bl	80013d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0201 	bic.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80046a6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046b0:	d119      	bne.n	80046e6 <HAL_SPI_Init+0x112>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ba:	d103      	bne.n	80046c4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10c      	bne.n	80046e6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80046d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046d4:	d107      	bne.n	80046e6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69da      	ldr	r2, [r3, #28]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	431a      	orrs	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f8:	ea42 0103 	orr.w	r1, r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004746:	ea42 0103 	orr.w	r1, r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d113      	bne.n	8004786 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004770:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004784:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0201 	bic.w	r2, r2, #1
 8004794:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40013000 	.word	0x40013000
 80047d8:	40003800 	.word	0x40003800
 80047dc:	40003c00 	.word	0x40003c00

080047e0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08a      	sub	sp, #40	; 0x28
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	4613      	mov	r3, r2
 80047ee:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3320      	adds	r3, #32
 80047f6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_SPI_Transmit+0x2a>
 8004806:	2302      	movs	r3, #2
 8004808:	e1d7      	b.n	8004bba <HAL_SPI_Transmit+0x3da>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004812:	f7fd f84b 	bl	80018ac <HAL_GetTick>
 8004816:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b01      	cmp	r3, #1
 8004822:	d007      	beq.n	8004834 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004824:	2302      	movs	r3, #2
 8004826:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004830:	7efb      	ldrb	r3, [r7, #27]
 8004832:	e1c2      	b.n	8004bba <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <HAL_SPI_Transmit+0x60>
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d107      	bne.n	8004850 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800484c:	7efb      	ldrb	r3, [r7, #27]
 800484e:	e1b4      	b.n	8004bba <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2203      	movs	r2, #3
 8004854:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	88fa      	ldrh	r2, [r7, #6]
 800486a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	88fa      	ldrh	r2, [r7, #6]
 8004872:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80048a0:	d107      	bne.n	80048b2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	4b96      	ldr	r3, [pc, #600]	; (8004b14 <HAL_SPI_Transmit+0x334>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	88f9      	ldrh	r1, [r7, #6]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	6812      	ldr	r2, [r2, #0]
 80048c2:	430b      	orrs	r3, r1
 80048c4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0201 	orr.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048de:	d107      	bne.n	80048f0 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2b0f      	cmp	r3, #15
 80048f6:	d947      	bls.n	8004988 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80048f8:	e03f      	b.n	800497a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b02      	cmp	r3, #2
 8004906:	d114      	bne.n	8004932 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6812      	ldr	r2, [r2, #0]
 8004912:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004918:	1d1a      	adds	r2, r3, #4
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004930:	e023      	b.n	800497a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004932:	f7fc ffbb 	bl	80018ac <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d803      	bhi.n	800494a <HAL_SPI_Transmit+0x16a>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004948:	d102      	bne.n	8004950 <HAL_SPI_Transmit+0x170>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d114      	bne.n	800497a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 fcfb 	bl	800534c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004964:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e11f      	b.n	8004bba <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1b9      	bne.n	80048fa <HAL_SPI_Transmit+0x11a>
 8004986:	e0f2      	b.n	8004b6e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	2b07      	cmp	r3, #7
 800498e:	f240 80e7 	bls.w	8004b60 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004992:	e05d      	b.n	8004a50 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d132      	bne.n	8004a08 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d918      	bls.n	80049e0 <HAL_SPI_Transmit+0x200>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d014      	beq.n	80049e0 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6812      	ldr	r2, [r2, #0]
 80049c0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c6:	1d1a      	adds	r2, r3, #4
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b02      	subs	r3, #2
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80049de:	e037      	b.n	8004a50 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e4:	881a      	ldrh	r2, [r3, #0]
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ee:	1c9a      	adds	r2, r3, #2
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004a06:	e023      	b.n	8004a50 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a08:	f7fc ff50 	bl	80018ac <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d803      	bhi.n	8004a20 <HAL_SPI_Transmit+0x240>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1e:	d102      	bne.n	8004a26 <HAL_SPI_Transmit+0x246>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d114      	bne.n	8004a50 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fc90 	bl	800534c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e0b4      	b.n	8004bba <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d19b      	bne.n	8004994 <HAL_SPI_Transmit+0x1b4>
 8004a5c:	e087      	b.n	8004b6e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d155      	bne.n	8004b18 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d918      	bls.n	8004aaa <HAL_SPI_Transmit+0x2ca>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7c:	2b40      	cmp	r3, #64	; 0x40
 8004a7e:	d914      	bls.n	8004aaa <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a90:	1d1a      	adds	r2, r3, #4
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	3b04      	subs	r3, #4
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004aa8:	e05a      	b.n	8004b60 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d917      	bls.n	8004ae6 <HAL_SPI_Transmit+0x306>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d013      	beq.n	8004ae6 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac2:	881a      	ldrh	r2, [r3, #0]
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004acc:	1c9a      	adds	r2, r3, #2
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b02      	subs	r3, #2
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004ae4:	e03c      	b.n	8004b60 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3320      	adds	r3, #32
 8004af0:	7812      	ldrb	r2, [r2, #0]
 8004af2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004b10:	e026      	b.n	8004b60 <HAL_SPI_Transmit+0x380>
 8004b12:	bf00      	nop
 8004b14:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b18:	f7fc fec8 	bl	80018ac <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d803      	bhi.n	8004b30 <HAL_SPI_Transmit+0x350>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2e:	d102      	bne.n	8004b36 <HAL_SPI_Transmit+0x356>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d114      	bne.n	8004b60 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fc08 	bl	800534c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e02c      	b.n	8004bba <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f47f af78 	bne.w	8004a5e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2200      	movs	r2, #0
 8004b76:	2108      	movs	r1, #8
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 fc87 	bl	800548c <SPI_WaitOnFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d007      	beq.n	8004b94 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b8a:	f043 0220 	orr.w	r2, r3, #32
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fbd9 	bl	800534c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8004bb8:	7efb      	ldrb	r3, [r7, #27]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3720      	adds	r7, #32
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop

08004bc4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08a      	sub	sp, #40	; 0x28
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3330      	adds	r3, #48	; 0x30
 8004bde:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be8:	d112      	bne.n	8004c10 <HAL_SPI_Receive+0x4c>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10e      	bne.n	8004c10 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2204      	movs	r2, #4
 8004bf6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f978 	bl	8004efc <HAL_SPI_TransmitReceive>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	e16f      	b.n	8004ef0 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_SPI_Receive+0x5a>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e168      	b.n	8004ef0 <HAL_SPI_Receive+0x32c>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c26:	f7fc fe41 	bl	80018ac <HAL_GetTick>
 8004c2a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d007      	beq.n	8004c48 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8004c38:	2302      	movs	r3, #2
 8004c3a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004c44:	7ffb      	ldrb	r3, [r7, #31]
 8004c46:	e153      	b.n	8004ef0 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <HAL_SPI_Receive+0x90>
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d107      	bne.n	8004c64 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004c60:	7ffb      	ldrb	r3, [r7, #31]
 8004c62:	e145      	b.n	8004ef0 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2204      	movs	r2, #4
 8004c68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	88fa      	ldrh	r2, [r7, #6]
 8004c7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	88fa      	ldrh	r2, [r7, #6]
 8004c86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004cb4:	d107      	bne.n	8004cc6 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	4b8a      	ldr	r3, [pc, #552]	; (8004ef8 <HAL_SPI_Receive+0x334>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	88f9      	ldrh	r1, [r7, #6]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0201 	orr.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf2:	d107      	bne.n	8004d04 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d02:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	2b0f      	cmp	r3, #15
 8004d0a:	d948      	bls.n	8004d9e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004d0c:	e040      	b.n	8004d90 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695a      	ldr	r2, [r3, #20]
 8004d14:	f248 0308 	movw	r3, #32776	; 0x8008
 8004d18:	4013      	ands	r3, r2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d014      	beq.n	8004d48 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d28:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d2e:	1d1a      	adds	r2, r3, #4
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004d46:	e023      	b.n	8004d90 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d48:	f7fc fdb0 	bl	80018ac <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d803      	bhi.n	8004d60 <HAL_SPI_Receive+0x19c>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	d102      	bne.n	8004d66 <HAL_SPI_Receive+0x1a2>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d114      	bne.n	8004d90 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 faf0 	bl	800534c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e0af      	b.n	8004ef0 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1b8      	bne.n	8004d0e <HAL_SPI_Receive+0x14a>
 8004d9c:	e095      	b.n	8004eca <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	2b07      	cmp	r3, #7
 8004da4:	f240 808b 	bls.w	8004ebe <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004da8:	e03f      	b.n	8004e2a <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d114      	bne.n	8004de2 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	8812      	ldrh	r2, [r2, #0]
 8004dc0:	b292      	uxth	r2, r2
 8004dc2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc8:	1c9a      	adds	r2, r3, #2
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004de0:	e023      	b.n	8004e2a <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004de2:	f7fc fd63 	bl	80018ac <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d803      	bhi.n	8004dfa <HAL_SPI_Receive+0x236>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d102      	bne.n	8004e00 <HAL_SPI_Receive+0x23c>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d114      	bne.n	8004e2a <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 faa3 	bl	800534c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e062      	b.n	8004ef0 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1b9      	bne.n	8004daa <HAL_SPI_Receive+0x1e6>
 8004e36:	e048      	b.n	8004eca <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d117      	bne.n	8004e76 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e52:	7812      	ldrb	r2, [r2, #0]
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004e74:	e023      	b.n	8004ebe <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e76:	f7fc fd19 	bl	80018ac <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d803      	bhi.n	8004e8e <HAL_SPI_Receive+0x2ca>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8c:	d102      	bne.n	8004e94 <HAL_SPI_Receive+0x2d0>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d114      	bne.n	8004ebe <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 fa59 	bl	800534c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ea8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e018      	b.n	8004ef0 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1b6      	bne.n	8004e38 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 fa3e 	bl	800534c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8004eee:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3720      	adds	r7, #32
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	ffff0000 	.word	0xffff0000

08004efc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08e      	sub	sp, #56	; 0x38
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3320      	adds	r3, #32
 8004f16:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3330      	adds	r3, #48	; 0x30
 8004f1e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d101      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x32>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e209      	b.n	8005342 <HAL_SPI_TransmitReceive+0x446>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f36:	f7fc fcb9 	bl	80018ac <HAL_GetTick>
 8004f3a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8004f3c:	887b      	ldrh	r3, [r7, #2]
 8004f3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8004f40:	887b      	ldrh	r3, [r7, #2]
 8004f42:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004f4a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f52:	7efb      	ldrb	r3, [r7, #27]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d014      	beq.n	8004f82 <HAL_SPI_TransmitReceive+0x86>
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f5e:	d106      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d102      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8004f68:	7efb      	ldrb	r3, [r7, #27]
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d009      	beq.n	8004f82 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8004f6e:	2302      	movs	r3, #2
 8004f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004f7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f80:	e1df      	b.n	8005342 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <HAL_SPI_TransmitReceive+0x98>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <HAL_SPI_TransmitReceive+0x98>
 8004f8e:	887b      	ldrh	r3, [r7, #2]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d109      	bne.n	8004fa8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004fa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fa6:	e1cc      	b.n	8005342 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d003      	beq.n	8004fbc <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2205      	movs	r2, #5
 8004fb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	887a      	ldrh	r2, [r7, #2]
 8004fce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	887a      	ldrh	r2, [r7, #2]
 8004fd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	887a      	ldrh	r2, [r7, #2]
 8004fe4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	887a      	ldrh	r2, [r7, #2]
 8004fec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	4b82      	ldr	r3, [pc, #520]	; (800520c <HAL_SPI_TransmitReceive+0x310>)
 8005004:	4013      	ands	r3, r2
 8005006:	8879      	ldrh	r1, [r7, #2]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	430b      	orrs	r3, r1
 800500e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005028:	d107      	bne.n	800503a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005038:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	2b0f      	cmp	r3, #15
 8005040:	d970      	bls.n	8005124 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005042:	e068      	b.n	8005116 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b02      	cmp	r3, #2
 8005050:	d11a      	bne.n	8005088 <HAL_SPI_TransmitReceive+0x18c>
 8005052:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005054:	2b00      	cmp	r3, #0
 8005056:	d017      	beq.n	8005088 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6812      	ldr	r2, [r2, #0]
 8005062:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005068:	1d1a      	adds	r2, r3, #4
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005086:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695a      	ldr	r2, [r3, #20]
 800508e:	f248 0308 	movw	r3, #32776	; 0x8008
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01a      	beq.n	80050ce <HAL_SPI_TransmitReceive+0x1d2>
 8005098:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d017      	beq.n	80050ce <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80050a8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ae:	1d1a      	adds	r2, r3, #4
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80050cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ce:	f7fc fbed 	bl	80018ac <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050da:	429a      	cmp	r2, r3
 80050dc:	d803      	bhi.n	80050e6 <HAL_SPI_TransmitReceive+0x1ea>
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d102      	bne.n	80050ec <HAL_SPI_TransmitReceive+0x1f0>
 80050e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d114      	bne.n	8005116 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f92d 	bl	800534c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005100:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e115      	b.n	8005342 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005116:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005118:	2b00      	cmp	r3, #0
 800511a:	d193      	bne.n	8005044 <HAL_SPI_TransmitReceive+0x148>
 800511c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d190      	bne.n	8005044 <HAL_SPI_TransmitReceive+0x148>
 8005122:	e0e7      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	2b07      	cmp	r3, #7
 800512a:	f240 80dd 	bls.w	80052e8 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800512e:	e066      	b.n	80051fe <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b02      	cmp	r3, #2
 800513c:	d119      	bne.n	8005172 <HAL_SPI_TransmitReceive+0x276>
 800513e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005140:	2b00      	cmp	r3, #0
 8005142:	d016      	beq.n	8005172 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005148:	881a      	ldrh	r2, [r3, #0]
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005152:	1c9a      	adds	r2, r3, #2
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005170:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b01      	cmp	r3, #1
 800517e:	d11a      	bne.n	80051b6 <HAL_SPI_TransmitReceive+0x2ba>
 8005180:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d017      	beq.n	80051b6 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800518a:	6a3a      	ldr	r2, [r7, #32]
 800518c:	8812      	ldrh	r2, [r2, #0]
 800518e:	b292      	uxth	r2, r2
 8005190:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005196:	1c9a      	adds	r2, r3, #2
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80051b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051b6:	f7fc fb79 	bl	80018ac <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d803      	bhi.n	80051ce <HAL_SPI_TransmitReceive+0x2d2>
 80051c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d102      	bne.n	80051d4 <HAL_SPI_TransmitReceive+0x2d8>
 80051ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d114      	bne.n	80051fe <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f8b9 	bl	800534c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e0a1      	b.n	8005342 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80051fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005200:	2b00      	cmp	r3, #0
 8005202:	d195      	bne.n	8005130 <HAL_SPI_TransmitReceive+0x234>
 8005204:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005206:	2b00      	cmp	r3, #0
 8005208:	d192      	bne.n	8005130 <HAL_SPI_TransmitReceive+0x234>
 800520a:	e073      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x3f8>
 800520c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b02      	cmp	r3, #2
 800521c:	d11b      	bne.n	8005256 <HAL_SPI_TransmitReceive+0x35a>
 800521e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005220:	2b00      	cmp	r3, #0
 8005222:	d018      	beq.n	8005256 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3320      	adds	r3, #32
 800522e:	7812      	ldrb	r2, [r2, #0]
 8005230:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005254:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b01      	cmp	r3, #1
 8005262:	d11d      	bne.n	80052a0 <HAL_SPI_TransmitReceive+0x3a4>
 8005264:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01a      	beq.n	80052a0 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005276:	7812      	ldrb	r2, [r2, #0]
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800528c:	b29b      	uxth	r3, r3
 800528e:	3b01      	subs	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800529e:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052a0:	f7fc fb04 	bl	80018ac <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d803      	bhi.n	80052b8 <HAL_SPI_TransmitReceive+0x3bc>
 80052b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	d102      	bne.n	80052be <HAL_SPI_TransmitReceive+0x3c2>
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d114      	bne.n	80052e8 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f844 	bl	800534c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e02c      	b.n	8005342 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80052e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d190      	bne.n	8005210 <HAL_SPI_TransmitReceive+0x314>
 80052ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d18d      	bne.n	8005210 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	2200      	movs	r2, #0
 80052fc:	2108      	movs	r1, #8
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f8c4 	bl	800548c <SPI_WaitOnFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d007      	beq.n	800531a <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005310:	f043 0220 	orr.w	r2, r3, #32
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 f816 	bl	800534c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e001      	b.n	8005342 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800533e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005342:	4618      	mov	r0, r3
 8005344:	3730      	adds	r7, #48	; 0x30
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop

0800534c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699a      	ldr	r2, [r3, #24]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0208 	orr.w	r2, r2, #8
 800536a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0210 	orr.w	r2, r2, #16
 800537a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0201 	bic.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6919      	ldr	r1, [r3, #16]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4b3c      	ldr	r3, [pc, #240]	; (8005488 <SPI_CloseTransfer+0x13c>)
 8005398:	400b      	ands	r3, r1
 800539a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80053aa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d014      	beq.n	80053e2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00f      	beq.n	80053e2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699a      	ldr	r2, [r3, #24]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 0220 	orr.w	r2, r2, #32
 80053e0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d014      	beq.n	8005418 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00f      	beq.n	8005418 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053fe:	f043 0204 	orr.w	r2, r3, #4
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005416:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00f      	beq.n	8005442 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005428:	f043 0201 	orr.w	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699a      	ldr	r2, [r3, #24]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005440:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00f      	beq.n	800546c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005452:	f043 0208 	orr.w	r2, r3, #8
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800546a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800547c:	bf00      	nop
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	fffffc90 	.word	0xfffffc90

0800548c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800549c:	e010      	b.n	80054c0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800549e:	f7fc fa05 	bl	80018ac <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d803      	bhi.n	80054b6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	d102      	bne.n	80054bc <SPI_WaitOnFlagUntilTimeout+0x30>
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e00f      	b.n	80054e0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695a      	ldr	r2, [r3, #20]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	4013      	ands	r3, r2
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	bf0c      	ite	eq
 80054d0:	2301      	moveq	r3, #1
 80054d2:	2300      	movne	r3, #0
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	461a      	mov	r2, r3
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d0df      	beq.n	800549e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f4:	095b      	lsrs	r3, r3, #5
 80054f6:	3301      	adds	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	3301      	adds	r3, #1
 8005500:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	3307      	adds	r3, #7
 8005506:	08db      	lsrs	r3, r3, #3
 8005508:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e042      	b.n	80055b6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fb ffac 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2224      	movs	r2, #36	; 0x24
 800554c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0201 	bic.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f8c3 	bl	80056ec <UART_SetConfig>
 8005566:	4603      	mov	r3, r0
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e022      	b.n	80055b6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fe1f 	bl	80061bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800558c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800559c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fea6 	bl	8006300 <UART_CheckIdleState>
 80055b4:	4603      	mov	r3, r0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b08a      	sub	sp, #40	; 0x28
 80055c2:	af02      	add	r7, sp, #8
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	603b      	str	r3, [r7, #0]
 80055ca:	4613      	mov	r3, r2
 80055cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	f040 8083 	bne.w	80056e0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <HAL_UART_Transmit+0x28>
 80055e0:	88fb      	ldrh	r3, [r7, #6]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e07b      	b.n	80056e2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_UART_Transmit+0x3a>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e074      	b.n	80056e2 <HAL_UART_Transmit+0x124>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2221      	movs	r2, #33	; 0x21
 800560c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005610:	f7fc f94c 	bl	80018ac <HAL_GetTick>
 8005614:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	88fa      	ldrh	r2, [r7, #6]
 800561a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	88fa      	ldrh	r2, [r7, #6]
 8005622:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562e:	d108      	bne.n	8005642 <HAL_UART_Transmit+0x84>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d104      	bne.n	8005642 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005638:	2300      	movs	r3, #0
 800563a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	61bb      	str	r3, [r7, #24]
 8005640:	e003      	b.n	800564a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005652:	e02c      	b.n	80056ae <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2200      	movs	r2, #0
 800565c:	2180      	movs	r1, #128	; 0x80
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fe99 	bl	8006396 <UART_WaitOnFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e039      	b.n	80056e2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10b      	bne.n	800568c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005682:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	3302      	adds	r3, #2
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	e007      	b.n	800569c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	781a      	ldrb	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	3301      	adds	r3, #1
 800569a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1cc      	bne.n	8005654 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2200      	movs	r2, #0
 80056c2:	2140      	movs	r1, #64	; 0x40
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 fe66 	bl	8006396 <UART_WaitOnFlagUntilTimeout>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e006      	b.n	80056e2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80056dc:	2300      	movs	r3, #0
 80056de:	e000      	b.n	80056e2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80056e0:	2302      	movs	r3, #2
  }
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3720      	adds	r7, #32
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056f0:	b092      	sub	sp, #72	; 0x48
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	431a      	orrs	r2, r3
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	431a      	orrs	r2, r3
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	4313      	orrs	r3, r2
 8005712:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4bbe      	ldr	r3, [pc, #760]	; (8005a14 <UART_SetConfig+0x328>)
 800571c:	4013      	ands	r3, r2
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	6812      	ldr	r2, [r2, #0]
 8005722:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005724:	430b      	orrs	r3, r1
 8005726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4ab3      	ldr	r2, [pc, #716]	; (8005a18 <UART_SetConfig+0x32c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d004      	beq.n	8005758 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005754:	4313      	orrs	r3, r2
 8005756:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	4baf      	ldr	r3, [pc, #700]	; (8005a1c <UART_SetConfig+0x330>)
 8005760:	4013      	ands	r3, r2
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	6812      	ldr	r2, [r2, #0]
 8005766:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005768:	430b      	orrs	r3, r1
 800576a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005772:	f023 010f 	bic.w	r1, r3, #15
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4aa6      	ldr	r2, [pc, #664]	; (8005a20 <UART_SetConfig+0x334>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d177      	bne.n	800587c <UART_SetConfig+0x190>
 800578c:	4ba5      	ldr	r3, [pc, #660]	; (8005a24 <UART_SetConfig+0x338>)
 800578e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005790:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005794:	2b28      	cmp	r3, #40	; 0x28
 8005796:	d86d      	bhi.n	8005874 <UART_SetConfig+0x188>
 8005798:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <UART_SetConfig+0xb4>)
 800579a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579e:	bf00      	nop
 80057a0:	08005845 	.word	0x08005845
 80057a4:	08005875 	.word	0x08005875
 80057a8:	08005875 	.word	0x08005875
 80057ac:	08005875 	.word	0x08005875
 80057b0:	08005875 	.word	0x08005875
 80057b4:	08005875 	.word	0x08005875
 80057b8:	08005875 	.word	0x08005875
 80057bc:	08005875 	.word	0x08005875
 80057c0:	0800584d 	.word	0x0800584d
 80057c4:	08005875 	.word	0x08005875
 80057c8:	08005875 	.word	0x08005875
 80057cc:	08005875 	.word	0x08005875
 80057d0:	08005875 	.word	0x08005875
 80057d4:	08005875 	.word	0x08005875
 80057d8:	08005875 	.word	0x08005875
 80057dc:	08005875 	.word	0x08005875
 80057e0:	08005855 	.word	0x08005855
 80057e4:	08005875 	.word	0x08005875
 80057e8:	08005875 	.word	0x08005875
 80057ec:	08005875 	.word	0x08005875
 80057f0:	08005875 	.word	0x08005875
 80057f4:	08005875 	.word	0x08005875
 80057f8:	08005875 	.word	0x08005875
 80057fc:	08005875 	.word	0x08005875
 8005800:	0800585d 	.word	0x0800585d
 8005804:	08005875 	.word	0x08005875
 8005808:	08005875 	.word	0x08005875
 800580c:	08005875 	.word	0x08005875
 8005810:	08005875 	.word	0x08005875
 8005814:	08005875 	.word	0x08005875
 8005818:	08005875 	.word	0x08005875
 800581c:	08005875 	.word	0x08005875
 8005820:	08005865 	.word	0x08005865
 8005824:	08005875 	.word	0x08005875
 8005828:	08005875 	.word	0x08005875
 800582c:	08005875 	.word	0x08005875
 8005830:	08005875 	.word	0x08005875
 8005834:	08005875 	.word	0x08005875
 8005838:	08005875 	.word	0x08005875
 800583c:	08005875 	.word	0x08005875
 8005840:	0800586d 	.word	0x0800586d
 8005844:	2301      	movs	r3, #1
 8005846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800584a:	e222      	b.n	8005c92 <UART_SetConfig+0x5a6>
 800584c:	2304      	movs	r3, #4
 800584e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005852:	e21e      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005854:	2308      	movs	r3, #8
 8005856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585a:	e21a      	b.n	8005c92 <UART_SetConfig+0x5a6>
 800585c:	2310      	movs	r3, #16
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005862:	e216      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005864:	2320      	movs	r3, #32
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586a:	e212      	b.n	8005c92 <UART_SetConfig+0x5a6>
 800586c:	2340      	movs	r3, #64	; 0x40
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005872:	e20e      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005874:	2380      	movs	r3, #128	; 0x80
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587a:	e20a      	b.n	8005c92 <UART_SetConfig+0x5a6>
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a69      	ldr	r2, [pc, #420]	; (8005a28 <UART_SetConfig+0x33c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d130      	bne.n	80058e8 <UART_SetConfig+0x1fc>
 8005886:	4b67      	ldr	r3, [pc, #412]	; (8005a24 <UART_SetConfig+0x338>)
 8005888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	2b05      	cmp	r3, #5
 8005890:	d826      	bhi.n	80058e0 <UART_SetConfig+0x1f4>
 8005892:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <UART_SetConfig+0x1ac>)
 8005894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005898:	080058b1 	.word	0x080058b1
 800589c:	080058b9 	.word	0x080058b9
 80058a0:	080058c1 	.word	0x080058c1
 80058a4:	080058c9 	.word	0x080058c9
 80058a8:	080058d1 	.word	0x080058d1
 80058ac:	080058d9 	.word	0x080058d9
 80058b0:	2300      	movs	r3, #0
 80058b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058b6:	e1ec      	b.n	8005c92 <UART_SetConfig+0x5a6>
 80058b8:	2304      	movs	r3, #4
 80058ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058be:	e1e8      	b.n	8005c92 <UART_SetConfig+0x5a6>
 80058c0:	2308      	movs	r3, #8
 80058c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c6:	e1e4      	b.n	8005c92 <UART_SetConfig+0x5a6>
 80058c8:	2310      	movs	r3, #16
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ce:	e1e0      	b.n	8005c92 <UART_SetConfig+0x5a6>
 80058d0:	2320      	movs	r3, #32
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d6:	e1dc      	b.n	8005c92 <UART_SetConfig+0x5a6>
 80058d8:	2340      	movs	r3, #64	; 0x40
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058de:	e1d8      	b.n	8005c92 <UART_SetConfig+0x5a6>
 80058e0:	2380      	movs	r3, #128	; 0x80
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e6:	e1d4      	b.n	8005c92 <UART_SetConfig+0x5a6>
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a4f      	ldr	r2, [pc, #316]	; (8005a2c <UART_SetConfig+0x340>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d130      	bne.n	8005954 <UART_SetConfig+0x268>
 80058f2:	4b4c      	ldr	r3, [pc, #304]	; (8005a24 <UART_SetConfig+0x338>)
 80058f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	2b05      	cmp	r3, #5
 80058fc:	d826      	bhi.n	800594c <UART_SetConfig+0x260>
 80058fe:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <UART_SetConfig+0x218>)
 8005900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005904:	0800591d 	.word	0x0800591d
 8005908:	08005925 	.word	0x08005925
 800590c:	0800592d 	.word	0x0800592d
 8005910:	08005935 	.word	0x08005935
 8005914:	0800593d 	.word	0x0800593d
 8005918:	08005945 	.word	0x08005945
 800591c:	2300      	movs	r3, #0
 800591e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005922:	e1b6      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005924:	2304      	movs	r3, #4
 8005926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592a:	e1b2      	b.n	8005c92 <UART_SetConfig+0x5a6>
 800592c:	2308      	movs	r3, #8
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005932:	e1ae      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005934:	2310      	movs	r3, #16
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593a:	e1aa      	b.n	8005c92 <UART_SetConfig+0x5a6>
 800593c:	2320      	movs	r3, #32
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005942:	e1a6      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005944:	2340      	movs	r3, #64	; 0x40
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594a:	e1a2      	b.n	8005c92 <UART_SetConfig+0x5a6>
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005952:	e19e      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a35      	ldr	r2, [pc, #212]	; (8005a30 <UART_SetConfig+0x344>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d130      	bne.n	80059c0 <UART_SetConfig+0x2d4>
 800595e:	4b31      	ldr	r3, [pc, #196]	; (8005a24 <UART_SetConfig+0x338>)
 8005960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	2b05      	cmp	r3, #5
 8005968:	d826      	bhi.n	80059b8 <UART_SetConfig+0x2cc>
 800596a:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <UART_SetConfig+0x284>)
 800596c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005970:	08005989 	.word	0x08005989
 8005974:	08005991 	.word	0x08005991
 8005978:	08005999 	.word	0x08005999
 800597c:	080059a1 	.word	0x080059a1
 8005980:	080059a9 	.word	0x080059a9
 8005984:	080059b1 	.word	0x080059b1
 8005988:	2300      	movs	r3, #0
 800598a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800598e:	e180      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005990:	2304      	movs	r3, #4
 8005992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005996:	e17c      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005998:	2308      	movs	r3, #8
 800599a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800599e:	e178      	b.n	8005c92 <UART_SetConfig+0x5a6>
 80059a0:	2310      	movs	r3, #16
 80059a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a6:	e174      	b.n	8005c92 <UART_SetConfig+0x5a6>
 80059a8:	2320      	movs	r3, #32
 80059aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ae:	e170      	b.n	8005c92 <UART_SetConfig+0x5a6>
 80059b0:	2340      	movs	r3, #64	; 0x40
 80059b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059b6:	e16c      	b.n	8005c92 <UART_SetConfig+0x5a6>
 80059b8:	2380      	movs	r3, #128	; 0x80
 80059ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059be:	e168      	b.n	8005c92 <UART_SetConfig+0x5a6>
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1b      	ldr	r2, [pc, #108]	; (8005a34 <UART_SetConfig+0x348>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d142      	bne.n	8005a50 <UART_SetConfig+0x364>
 80059ca:	4b16      	ldr	r3, [pc, #88]	; (8005a24 <UART_SetConfig+0x338>)
 80059cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	2b05      	cmp	r3, #5
 80059d4:	d838      	bhi.n	8005a48 <UART_SetConfig+0x35c>
 80059d6:	a201      	add	r2, pc, #4	; (adr r2, 80059dc <UART_SetConfig+0x2f0>)
 80059d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059dc:	080059f5 	.word	0x080059f5
 80059e0:	080059fd 	.word	0x080059fd
 80059e4:	08005a05 	.word	0x08005a05
 80059e8:	08005a0d 	.word	0x08005a0d
 80059ec:	08005a39 	.word	0x08005a39
 80059f0:	08005a41 	.word	0x08005a41
 80059f4:	2300      	movs	r3, #0
 80059f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059fa:	e14a      	b.n	8005c92 <UART_SetConfig+0x5a6>
 80059fc:	2304      	movs	r3, #4
 80059fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a02:	e146      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005a04:	2308      	movs	r3, #8
 8005a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a0a:	e142      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a12:	e13e      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005a14:	cfff69f3 	.word	0xcfff69f3
 8005a18:	58000c00 	.word	0x58000c00
 8005a1c:	11fff4ff 	.word	0x11fff4ff
 8005a20:	40011000 	.word	0x40011000
 8005a24:	58024400 	.word	0x58024400
 8005a28:	40004400 	.word	0x40004400
 8005a2c:	40004800 	.word	0x40004800
 8005a30:	40004c00 	.word	0x40004c00
 8005a34:	40005000 	.word	0x40005000
 8005a38:	2320      	movs	r3, #32
 8005a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a3e:	e128      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005a40:	2340      	movs	r3, #64	; 0x40
 8005a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a46:	e124      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005a48:	2380      	movs	r3, #128	; 0x80
 8005a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a4e:	e120      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4acb      	ldr	r2, [pc, #812]	; (8005d84 <UART_SetConfig+0x698>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d176      	bne.n	8005b48 <UART_SetConfig+0x45c>
 8005a5a:	4bcb      	ldr	r3, [pc, #812]	; (8005d88 <UART_SetConfig+0x69c>)
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a62:	2b28      	cmp	r3, #40	; 0x28
 8005a64:	d86c      	bhi.n	8005b40 <UART_SetConfig+0x454>
 8005a66:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <UART_SetConfig+0x380>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005b11 	.word	0x08005b11
 8005a70:	08005b41 	.word	0x08005b41
 8005a74:	08005b41 	.word	0x08005b41
 8005a78:	08005b41 	.word	0x08005b41
 8005a7c:	08005b41 	.word	0x08005b41
 8005a80:	08005b41 	.word	0x08005b41
 8005a84:	08005b41 	.word	0x08005b41
 8005a88:	08005b41 	.word	0x08005b41
 8005a8c:	08005b19 	.word	0x08005b19
 8005a90:	08005b41 	.word	0x08005b41
 8005a94:	08005b41 	.word	0x08005b41
 8005a98:	08005b41 	.word	0x08005b41
 8005a9c:	08005b41 	.word	0x08005b41
 8005aa0:	08005b41 	.word	0x08005b41
 8005aa4:	08005b41 	.word	0x08005b41
 8005aa8:	08005b41 	.word	0x08005b41
 8005aac:	08005b21 	.word	0x08005b21
 8005ab0:	08005b41 	.word	0x08005b41
 8005ab4:	08005b41 	.word	0x08005b41
 8005ab8:	08005b41 	.word	0x08005b41
 8005abc:	08005b41 	.word	0x08005b41
 8005ac0:	08005b41 	.word	0x08005b41
 8005ac4:	08005b41 	.word	0x08005b41
 8005ac8:	08005b41 	.word	0x08005b41
 8005acc:	08005b29 	.word	0x08005b29
 8005ad0:	08005b41 	.word	0x08005b41
 8005ad4:	08005b41 	.word	0x08005b41
 8005ad8:	08005b41 	.word	0x08005b41
 8005adc:	08005b41 	.word	0x08005b41
 8005ae0:	08005b41 	.word	0x08005b41
 8005ae4:	08005b41 	.word	0x08005b41
 8005ae8:	08005b41 	.word	0x08005b41
 8005aec:	08005b31 	.word	0x08005b31
 8005af0:	08005b41 	.word	0x08005b41
 8005af4:	08005b41 	.word	0x08005b41
 8005af8:	08005b41 	.word	0x08005b41
 8005afc:	08005b41 	.word	0x08005b41
 8005b00:	08005b41 	.word	0x08005b41
 8005b04:	08005b41 	.word	0x08005b41
 8005b08:	08005b41 	.word	0x08005b41
 8005b0c:	08005b39 	.word	0x08005b39
 8005b10:	2301      	movs	r3, #1
 8005b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b16:	e0bc      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005b18:	2304      	movs	r3, #4
 8005b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1e:	e0b8      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005b20:	2308      	movs	r3, #8
 8005b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b26:	e0b4      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005b28:	2310      	movs	r3, #16
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2e:	e0b0      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005b30:	2320      	movs	r3, #32
 8005b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b36:	e0ac      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005b38:	2340      	movs	r3, #64	; 0x40
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b3e:	e0a8      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005b40:	2380      	movs	r3, #128	; 0x80
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b46:	e0a4      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a8f      	ldr	r2, [pc, #572]	; (8005d8c <UART_SetConfig+0x6a0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d130      	bne.n	8005bb4 <UART_SetConfig+0x4c8>
 8005b52:	4b8d      	ldr	r3, [pc, #564]	; (8005d88 <UART_SetConfig+0x69c>)
 8005b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	2b05      	cmp	r3, #5
 8005b5c:	d826      	bhi.n	8005bac <UART_SetConfig+0x4c0>
 8005b5e:	a201      	add	r2, pc, #4	; (adr r2, 8005b64 <UART_SetConfig+0x478>)
 8005b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b64:	08005b7d 	.word	0x08005b7d
 8005b68:	08005b85 	.word	0x08005b85
 8005b6c:	08005b8d 	.word	0x08005b8d
 8005b70:	08005b95 	.word	0x08005b95
 8005b74:	08005b9d 	.word	0x08005b9d
 8005b78:	08005ba5 	.word	0x08005ba5
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b82:	e086      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005b84:	2304      	movs	r3, #4
 8005b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8a:	e082      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005b8c:	2308      	movs	r3, #8
 8005b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b92:	e07e      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005b94:	2310      	movs	r3, #16
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9a:	e07a      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005b9c:	2320      	movs	r3, #32
 8005b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba2:	e076      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005ba4:	2340      	movs	r3, #64	; 0x40
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005baa:	e072      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005bac:	2380      	movs	r3, #128	; 0x80
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb2:	e06e      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a75      	ldr	r2, [pc, #468]	; (8005d90 <UART_SetConfig+0x6a4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d130      	bne.n	8005c20 <UART_SetConfig+0x534>
 8005bbe:	4b72      	ldr	r3, [pc, #456]	; (8005d88 <UART_SetConfig+0x69c>)
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	2b05      	cmp	r3, #5
 8005bc8:	d826      	bhi.n	8005c18 <UART_SetConfig+0x52c>
 8005bca:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <UART_SetConfig+0x4e4>)
 8005bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd0:	08005be9 	.word	0x08005be9
 8005bd4:	08005bf1 	.word	0x08005bf1
 8005bd8:	08005bf9 	.word	0x08005bf9
 8005bdc:	08005c01 	.word	0x08005c01
 8005be0:	08005c09 	.word	0x08005c09
 8005be4:	08005c11 	.word	0x08005c11
 8005be8:	2300      	movs	r3, #0
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bee:	e050      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf6:	e04c      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005bf8:	2308      	movs	r3, #8
 8005bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfe:	e048      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005c00:	2310      	movs	r3, #16
 8005c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c06:	e044      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005c08:	2320      	movs	r3, #32
 8005c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0e:	e040      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005c10:	2340      	movs	r3, #64	; 0x40
 8005c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c16:	e03c      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005c18:	2380      	movs	r3, #128	; 0x80
 8005c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1e:	e038      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a5b      	ldr	r2, [pc, #364]	; (8005d94 <UART_SetConfig+0x6a8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d130      	bne.n	8005c8c <UART_SetConfig+0x5a0>
 8005c2a:	4b57      	ldr	r3, [pc, #348]	; (8005d88 <UART_SetConfig+0x69c>)
 8005c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	2b05      	cmp	r3, #5
 8005c34:	d826      	bhi.n	8005c84 <UART_SetConfig+0x598>
 8005c36:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <UART_SetConfig+0x550>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c55 	.word	0x08005c55
 8005c40:	08005c5d 	.word	0x08005c5d
 8005c44:	08005c65 	.word	0x08005c65
 8005c48:	08005c6d 	.word	0x08005c6d
 8005c4c:	08005c75 	.word	0x08005c75
 8005c50:	08005c7d 	.word	0x08005c7d
 8005c54:	2302      	movs	r3, #2
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5a:	e01a      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005c5c:	2304      	movs	r3, #4
 8005c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c62:	e016      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005c64:	2308      	movs	r3, #8
 8005c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6a:	e012      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c72:	e00e      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005c74:	2320      	movs	r3, #32
 8005c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7a:	e00a      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005c7c:	2340      	movs	r3, #64	; 0x40
 8005c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c82:	e006      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005c84:	2380      	movs	r3, #128	; 0x80
 8005c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c8a:	e002      	b.n	8005c92 <UART_SetConfig+0x5a6>
 8005c8c:	2380      	movs	r3, #128	; 0x80
 8005c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a3f      	ldr	r2, [pc, #252]	; (8005d94 <UART_SetConfig+0x6a8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	f040 80f8 	bne.w	8005e8e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	dc46      	bgt.n	8005d34 <UART_SetConfig+0x648>
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	f2c0 8082 	blt.w	8005db0 <UART_SetConfig+0x6c4>
 8005cac:	3b02      	subs	r3, #2
 8005cae:	2b1e      	cmp	r3, #30
 8005cb0:	d87e      	bhi.n	8005db0 <UART_SetConfig+0x6c4>
 8005cb2:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <UART_SetConfig+0x5cc>)
 8005cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb8:	08005d3b 	.word	0x08005d3b
 8005cbc:	08005db1 	.word	0x08005db1
 8005cc0:	08005d43 	.word	0x08005d43
 8005cc4:	08005db1 	.word	0x08005db1
 8005cc8:	08005db1 	.word	0x08005db1
 8005ccc:	08005db1 	.word	0x08005db1
 8005cd0:	08005d53 	.word	0x08005d53
 8005cd4:	08005db1 	.word	0x08005db1
 8005cd8:	08005db1 	.word	0x08005db1
 8005cdc:	08005db1 	.word	0x08005db1
 8005ce0:	08005db1 	.word	0x08005db1
 8005ce4:	08005db1 	.word	0x08005db1
 8005ce8:	08005db1 	.word	0x08005db1
 8005cec:	08005db1 	.word	0x08005db1
 8005cf0:	08005d63 	.word	0x08005d63
 8005cf4:	08005db1 	.word	0x08005db1
 8005cf8:	08005db1 	.word	0x08005db1
 8005cfc:	08005db1 	.word	0x08005db1
 8005d00:	08005db1 	.word	0x08005db1
 8005d04:	08005db1 	.word	0x08005db1
 8005d08:	08005db1 	.word	0x08005db1
 8005d0c:	08005db1 	.word	0x08005db1
 8005d10:	08005db1 	.word	0x08005db1
 8005d14:	08005db1 	.word	0x08005db1
 8005d18:	08005db1 	.word	0x08005db1
 8005d1c:	08005db1 	.word	0x08005db1
 8005d20:	08005db1 	.word	0x08005db1
 8005d24:	08005db1 	.word	0x08005db1
 8005d28:	08005db1 	.word	0x08005db1
 8005d2c:	08005db1 	.word	0x08005db1
 8005d30:	08005da3 	.word	0x08005da3
 8005d34:	2b40      	cmp	r3, #64	; 0x40
 8005d36:	d037      	beq.n	8005da8 <UART_SetConfig+0x6bc>
 8005d38:	e03a      	b.n	8005db0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005d3a:	f7fe f829 	bl	8003d90 <HAL_RCCEx_GetD3PCLK1Freq>
 8005d3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d40:	e03c      	b.n	8005dbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe f838 	bl	8003dbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d50:	e034      	b.n	8005dbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d52:	f107 0318 	add.w	r3, r7, #24
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe f984 	bl	8004064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d60:	e02c      	b.n	8005dbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d62:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <UART_SetConfig+0x69c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0320 	and.w	r3, r3, #32
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d016      	beq.n	8005d9c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d6e:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <UART_SetConfig+0x69c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	08db      	lsrs	r3, r3, #3
 8005d74:	f003 0303 	and.w	r3, r3, #3
 8005d78:	4a07      	ldr	r2, [pc, #28]	; (8005d98 <UART_SetConfig+0x6ac>)
 8005d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d80:	e01c      	b.n	8005dbc <UART_SetConfig+0x6d0>
 8005d82:	bf00      	nop
 8005d84:	40011400 	.word	0x40011400
 8005d88:	58024400 	.word	0x58024400
 8005d8c:	40007800 	.word	0x40007800
 8005d90:	40007c00 	.word	0x40007c00
 8005d94:	58000c00 	.word	0x58000c00
 8005d98:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005d9c:	4b9d      	ldr	r3, [pc, #628]	; (8006014 <UART_SetConfig+0x928>)
 8005d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005da0:	e00c      	b.n	8005dbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005da2:	4b9d      	ldr	r3, [pc, #628]	; (8006018 <UART_SetConfig+0x92c>)
 8005da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005da6:	e009      	b.n	8005dbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005da8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dae:	e005      	b.n	8005dbc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005dba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 81de 	beq.w	8006180 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	4a94      	ldr	r2, [pc, #592]	; (800601c <UART_SetConfig+0x930>)
 8005dca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dd6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	4413      	add	r3, r2
 8005de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d305      	bcc.n	8005df4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d903      	bls.n	8005dfc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005dfa:	e1c1      	b.n	8006180 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dfe:	2200      	movs	r2, #0
 8005e00:	60bb      	str	r3, [r7, #8]
 8005e02:	60fa      	str	r2, [r7, #12]
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	4a84      	ldr	r2, [pc, #528]	; (800601c <UART_SetConfig+0x930>)
 8005e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2200      	movs	r2, #0
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	607a      	str	r2, [r7, #4]
 8005e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e1e:	f7fa fab7 	bl	8000390 <__aeabi_uldivmod>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4610      	mov	r0, r2
 8005e28:	4619      	mov	r1, r3
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	f04f 0300 	mov.w	r3, #0
 8005e32:	020b      	lsls	r3, r1, #8
 8005e34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e38:	0202      	lsls	r2, r0, #8
 8005e3a:	6979      	ldr	r1, [r7, #20]
 8005e3c:	6849      	ldr	r1, [r1, #4]
 8005e3e:	0849      	lsrs	r1, r1, #1
 8005e40:	2000      	movs	r0, #0
 8005e42:	460c      	mov	r4, r1
 8005e44:	4605      	mov	r5, r0
 8005e46:	eb12 0804 	adds.w	r8, r2, r4
 8005e4a:	eb43 0905 	adc.w	r9, r3, r5
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	469a      	mov	sl, r3
 8005e56:	4693      	mov	fp, r2
 8005e58:	4652      	mov	r2, sl
 8005e5a:	465b      	mov	r3, fp
 8005e5c:	4640      	mov	r0, r8
 8005e5e:	4649      	mov	r1, r9
 8005e60:	f7fa fa96 	bl	8000390 <__aeabi_uldivmod>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4613      	mov	r3, r2
 8005e6a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e72:	d308      	bcc.n	8005e86 <UART_SetConfig+0x79a>
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e7a:	d204      	bcs.n	8005e86 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e82:	60da      	str	r2, [r3, #12]
 8005e84:	e17c      	b.n	8006180 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005e8c:	e178      	b.n	8006180 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e96:	f040 80c5 	bne.w	8006024 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005e9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	dc48      	bgt.n	8005f34 <UART_SetConfig+0x848>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	db7b      	blt.n	8005f9e <UART_SetConfig+0x8b2>
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d879      	bhi.n	8005f9e <UART_SetConfig+0x8b2>
 8005eaa:	a201      	add	r2, pc, #4	; (adr r2, 8005eb0 <UART_SetConfig+0x7c4>)
 8005eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb0:	08005f3b 	.word	0x08005f3b
 8005eb4:	08005f43 	.word	0x08005f43
 8005eb8:	08005f9f 	.word	0x08005f9f
 8005ebc:	08005f9f 	.word	0x08005f9f
 8005ec0:	08005f4b 	.word	0x08005f4b
 8005ec4:	08005f9f 	.word	0x08005f9f
 8005ec8:	08005f9f 	.word	0x08005f9f
 8005ecc:	08005f9f 	.word	0x08005f9f
 8005ed0:	08005f5b 	.word	0x08005f5b
 8005ed4:	08005f9f 	.word	0x08005f9f
 8005ed8:	08005f9f 	.word	0x08005f9f
 8005edc:	08005f9f 	.word	0x08005f9f
 8005ee0:	08005f9f 	.word	0x08005f9f
 8005ee4:	08005f9f 	.word	0x08005f9f
 8005ee8:	08005f9f 	.word	0x08005f9f
 8005eec:	08005f9f 	.word	0x08005f9f
 8005ef0:	08005f6b 	.word	0x08005f6b
 8005ef4:	08005f9f 	.word	0x08005f9f
 8005ef8:	08005f9f 	.word	0x08005f9f
 8005efc:	08005f9f 	.word	0x08005f9f
 8005f00:	08005f9f 	.word	0x08005f9f
 8005f04:	08005f9f 	.word	0x08005f9f
 8005f08:	08005f9f 	.word	0x08005f9f
 8005f0c:	08005f9f 	.word	0x08005f9f
 8005f10:	08005f9f 	.word	0x08005f9f
 8005f14:	08005f9f 	.word	0x08005f9f
 8005f18:	08005f9f 	.word	0x08005f9f
 8005f1c:	08005f9f 	.word	0x08005f9f
 8005f20:	08005f9f 	.word	0x08005f9f
 8005f24:	08005f9f 	.word	0x08005f9f
 8005f28:	08005f9f 	.word	0x08005f9f
 8005f2c:	08005f9f 	.word	0x08005f9f
 8005f30:	08005f91 	.word	0x08005f91
 8005f34:	2b40      	cmp	r3, #64	; 0x40
 8005f36:	d02e      	beq.n	8005f96 <UART_SetConfig+0x8aa>
 8005f38:	e031      	b.n	8005f9e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f3a:	f7fc ffb7 	bl	8002eac <HAL_RCC_GetPCLK1Freq>
 8005f3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f40:	e033      	b.n	8005faa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f42:	f7fc ffc9 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 8005f46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f48:	e02f      	b.n	8005faa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fd ff34 	bl	8003dbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f58:	e027      	b.n	8005faa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f5a:	f107 0318 	add.w	r3, r7, #24
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fe f880 	bl	8004064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f68:	e01f      	b.n	8005faa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f6a:	4b2d      	ldr	r3, [pc, #180]	; (8006020 <UART_SetConfig+0x934>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f76:	4b2a      	ldr	r3, [pc, #168]	; (8006020 <UART_SetConfig+0x934>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	08db      	lsrs	r3, r3, #3
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	4a24      	ldr	r2, [pc, #144]	; (8006014 <UART_SetConfig+0x928>)
 8005f82:	fa22 f303 	lsr.w	r3, r2, r3
 8005f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f88:	e00f      	b.n	8005faa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005f8a:	4b22      	ldr	r3, [pc, #136]	; (8006014 <UART_SetConfig+0x928>)
 8005f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f8e:	e00c      	b.n	8005faa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f90:	4b21      	ldr	r3, [pc, #132]	; (8006018 <UART_SetConfig+0x92c>)
 8005f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f94:	e009      	b.n	8005faa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f9c:	e005      	b.n	8005faa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005fa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 80e7 	beq.w	8006180 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	4a19      	ldr	r2, [pc, #100]	; (800601c <UART_SetConfig+0x930>)
 8005fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fc4:	005a      	lsls	r2, r3, #1
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	085b      	lsrs	r3, r3, #1
 8005fcc:	441a      	add	r2, r3
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fda:	2b0f      	cmp	r3, #15
 8005fdc:	d916      	bls.n	800600c <UART_SetConfig+0x920>
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe4:	d212      	bcs.n	800600c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	f023 030f 	bic.w	r3, r3, #15
 8005fee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff2:	085b      	lsrs	r3, r3, #1
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f003 0307 	and.w	r3, r3, #7
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ffe:	4313      	orrs	r3, r2
 8006000:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006008:	60da      	str	r2, [r3, #12]
 800600a:	e0b9      	b.n	8006180 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006012:	e0b5      	b.n	8006180 <UART_SetConfig+0xa94>
 8006014:	03d09000 	.word	0x03d09000
 8006018:	003d0900 	.word	0x003d0900
 800601c:	0800924c 	.word	0x0800924c
 8006020:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006024:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006028:	2b20      	cmp	r3, #32
 800602a:	dc49      	bgt.n	80060c0 <UART_SetConfig+0x9d4>
 800602c:	2b00      	cmp	r3, #0
 800602e:	db7c      	blt.n	800612a <UART_SetConfig+0xa3e>
 8006030:	2b20      	cmp	r3, #32
 8006032:	d87a      	bhi.n	800612a <UART_SetConfig+0xa3e>
 8006034:	a201      	add	r2, pc, #4	; (adr r2, 800603c <UART_SetConfig+0x950>)
 8006036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603a:	bf00      	nop
 800603c:	080060c7 	.word	0x080060c7
 8006040:	080060cf 	.word	0x080060cf
 8006044:	0800612b 	.word	0x0800612b
 8006048:	0800612b 	.word	0x0800612b
 800604c:	080060d7 	.word	0x080060d7
 8006050:	0800612b 	.word	0x0800612b
 8006054:	0800612b 	.word	0x0800612b
 8006058:	0800612b 	.word	0x0800612b
 800605c:	080060e7 	.word	0x080060e7
 8006060:	0800612b 	.word	0x0800612b
 8006064:	0800612b 	.word	0x0800612b
 8006068:	0800612b 	.word	0x0800612b
 800606c:	0800612b 	.word	0x0800612b
 8006070:	0800612b 	.word	0x0800612b
 8006074:	0800612b 	.word	0x0800612b
 8006078:	0800612b 	.word	0x0800612b
 800607c:	080060f7 	.word	0x080060f7
 8006080:	0800612b 	.word	0x0800612b
 8006084:	0800612b 	.word	0x0800612b
 8006088:	0800612b 	.word	0x0800612b
 800608c:	0800612b 	.word	0x0800612b
 8006090:	0800612b 	.word	0x0800612b
 8006094:	0800612b 	.word	0x0800612b
 8006098:	0800612b 	.word	0x0800612b
 800609c:	0800612b 	.word	0x0800612b
 80060a0:	0800612b 	.word	0x0800612b
 80060a4:	0800612b 	.word	0x0800612b
 80060a8:	0800612b 	.word	0x0800612b
 80060ac:	0800612b 	.word	0x0800612b
 80060b0:	0800612b 	.word	0x0800612b
 80060b4:	0800612b 	.word	0x0800612b
 80060b8:	0800612b 	.word	0x0800612b
 80060bc:	0800611d 	.word	0x0800611d
 80060c0:	2b40      	cmp	r3, #64	; 0x40
 80060c2:	d02e      	beq.n	8006122 <UART_SetConfig+0xa36>
 80060c4:	e031      	b.n	800612a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c6:	f7fc fef1 	bl	8002eac <HAL_RCC_GetPCLK1Freq>
 80060ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80060cc:	e033      	b.n	8006136 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060ce:	f7fc ff03 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 80060d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80060d4:	e02f      	b.n	8006136 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fd fe6e 	bl	8003dbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060e4:	e027      	b.n	8006136 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060e6:	f107 0318 	add.w	r3, r7, #24
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fd ffba 	bl	8004064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060f4:	e01f      	b.n	8006136 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060f6:	4b2d      	ldr	r3, [pc, #180]	; (80061ac <UART_SetConfig+0xac0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006102:	4b2a      	ldr	r3, [pc, #168]	; (80061ac <UART_SetConfig+0xac0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	08db      	lsrs	r3, r3, #3
 8006108:	f003 0303 	and.w	r3, r3, #3
 800610c:	4a28      	ldr	r2, [pc, #160]	; (80061b0 <UART_SetConfig+0xac4>)
 800610e:	fa22 f303 	lsr.w	r3, r2, r3
 8006112:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006114:	e00f      	b.n	8006136 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006116:	4b26      	ldr	r3, [pc, #152]	; (80061b0 <UART_SetConfig+0xac4>)
 8006118:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800611a:	e00c      	b.n	8006136 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800611c:	4b25      	ldr	r3, [pc, #148]	; (80061b4 <UART_SetConfig+0xac8>)
 800611e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006120:	e009      	b.n	8006136 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006128:	e005      	b.n	8006136 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006134:	bf00      	nop
    }

    if (pclk != 0U)
 8006136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d021      	beq.n	8006180 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	4a1d      	ldr	r2, [pc, #116]	; (80061b8 <UART_SetConfig+0xacc>)
 8006142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006146:	461a      	mov	r2, r3
 8006148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614a:	fbb3 f2f2 	udiv	r2, r3, r2
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	085b      	lsrs	r3, r3, #1
 8006154:	441a      	add	r2, r3
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	fbb2 f3f3 	udiv	r3, r2, r3
 800615e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006162:	2b0f      	cmp	r3, #15
 8006164:	d909      	bls.n	800617a <UART_SetConfig+0xa8e>
 8006166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800616c:	d205      	bcs.n	800617a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006170:	b29a      	uxth	r2, r3
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	60da      	str	r2, [r3, #12]
 8006178:	e002      	b.n	8006180 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2201      	movs	r2, #1
 8006184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2201      	movs	r2, #1
 800618c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2200      	movs	r2, #0
 8006194:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2200      	movs	r2, #0
 800619a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800619c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3748      	adds	r7, #72	; 0x48
 80061a4:	46bd      	mov	sp, r7
 80061a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061aa:	bf00      	nop
 80061ac:	58024400 	.word	0x58024400
 80061b0:	03d09000 	.word	0x03d09000
 80061b4:	003d0900 	.word	0x003d0900
 80061b8:	0800924c 	.word	0x0800924c

080061bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	f003 0308 	and.w	r3, r3, #8
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00a      	beq.n	800626e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006298:	2b00      	cmp	r3, #0
 800629a:	d01a      	beq.n	80062d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ba:	d10a      	bne.n	80062d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	605a      	str	r2, [r3, #4]
  }
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af02      	add	r7, sp, #8
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006310:	f7fb facc 	bl	80018ac <HAL_GetTick>
 8006314:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b08      	cmp	r3, #8
 8006322:	d10e      	bne.n	8006342 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006324:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f82f 	bl	8006396 <UART_WaitOnFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e025      	b.n	800638e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b04      	cmp	r3, #4
 800634e:	d10e      	bne.n	800636e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006350:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f819 	bl	8006396 <UART_WaitOnFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e00f      	b.n	800638e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2220      	movs	r2, #32
 8006372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2220      	movs	r2, #32
 800637a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b09c      	sub	sp, #112	; 0x70
 800639a:	af00      	add	r7, sp, #0
 800639c:	60f8      	str	r0, [r7, #12]
 800639e:	60b9      	str	r1, [r7, #8]
 80063a0:	603b      	str	r3, [r7, #0]
 80063a2:	4613      	mov	r3, r2
 80063a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a6:	e0a9      	b.n	80064fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	f000 80a5 	beq.w	80064fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b2:	f7fb fa7b 	bl	80018ac <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80063be:	429a      	cmp	r2, r3
 80063c0:	d302      	bcc.n	80063c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80063c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d140      	bne.n	800644a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80063d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063dc:	667b      	str	r3, [r7, #100]	; 0x64
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80063f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e6      	bne.n	80063c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3308      	adds	r3, #8
 8006400:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006404:	e853 3f00 	ldrex	r3, [r3]
 8006408:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800640a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640c:	f023 0301 	bic.w	r3, r3, #1
 8006410:	663b      	str	r3, [r7, #96]	; 0x60
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3308      	adds	r3, #8
 8006418:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800641a:	64ba      	str	r2, [r7, #72]	; 0x48
 800641c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006422:	e841 2300 	strex	r3, r2, [r1]
 8006426:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1e5      	bne.n	80063fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2220      	movs	r2, #32
 8006432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2220      	movs	r2, #32
 800643a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e069      	b.n	800651e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d051      	beq.n	80064fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006466:	d149      	bne.n	80064fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006470:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006486:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
 8006492:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800649e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e6      	bne.n	8006472 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3308      	adds	r3, #8
 80064aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	613b      	str	r3, [r7, #16]
   return(result);
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f023 0301 	bic.w	r3, r3, #1
 80064ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3308      	adds	r3, #8
 80064c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064c4:	623a      	str	r2, [r7, #32]
 80064c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	69f9      	ldr	r1, [r7, #28]
 80064ca:	6a3a      	ldr	r2, [r7, #32]
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e5      	bne.n	80064a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2220      	movs	r2, #32
 80064dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e010      	b.n	800651e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	69da      	ldr	r2, [r3, #28]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	4013      	ands	r3, r2
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	429a      	cmp	r2, r3
 800650a:	bf0c      	ite	eq
 800650c:	2301      	moveq	r3, #1
 800650e:	2300      	movne	r3, #0
 8006510:	b2db      	uxtb	r3, r3
 8006512:	461a      	mov	r2, r3
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	429a      	cmp	r2, r3
 8006518:	f43f af46 	beq.w	80063a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3770      	adds	r7, #112	; 0x70
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006526:	b480      	push	{r7}
 8006528:	b085      	sub	sp, #20
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006534:	2b01      	cmp	r3, #1
 8006536:	d101      	bne.n	800653c <HAL_UARTEx_DisableFifoMode+0x16>
 8006538:	2302      	movs	r3, #2
 800653a:	e027      	b.n	800658c <HAL_UARTEx_DisableFifoMode+0x66>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2224      	movs	r2, #36	; 0x24
 8006548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 0201 	bic.w	r2, r2, #1
 8006562:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800656a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d101      	bne.n	80065b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065ac:	2302      	movs	r3, #2
 80065ae:	e02d      	b.n	800660c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2224      	movs	r2, #36	; 0x24
 80065bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0201 	bic.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f84f 	bl	8006690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006628:	2302      	movs	r3, #2
 800662a:	e02d      	b.n	8006688 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2224      	movs	r2, #36	; 0x24
 8006638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0201 	bic.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f811 	bl	8006690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2220      	movs	r2, #32
 800667a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800669c:	2b00      	cmp	r3, #0
 800669e:	d108      	bne.n	80066b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066b0:	e031      	b.n	8006716 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066b2:	2310      	movs	r3, #16
 80066b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066b6:	2310      	movs	r3, #16
 80066b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	0e5b      	lsrs	r3, r3, #25
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	0f5b      	lsrs	r3, r3, #29
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	7b3a      	ldrb	r2, [r7, #12]
 80066de:	4911      	ldr	r1, [pc, #68]	; (8006724 <UARTEx_SetNbDataToProcess+0x94>)
 80066e0:	5c8a      	ldrb	r2, [r1, r2]
 80066e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066e6:	7b3a      	ldrb	r2, [r7, #12]
 80066e8:	490f      	ldr	r1, [pc, #60]	; (8006728 <UARTEx_SetNbDataToProcess+0x98>)
 80066ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
 80066fa:	7b7a      	ldrb	r2, [r7, #13]
 80066fc:	4909      	ldr	r1, [pc, #36]	; (8006724 <UARTEx_SetNbDataToProcess+0x94>)
 80066fe:	5c8a      	ldrb	r2, [r1, r2]
 8006700:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006704:	7b7a      	ldrb	r2, [r7, #13]
 8006706:	4908      	ldr	r1, [pc, #32]	; (8006728 <UARTEx_SetNbDataToProcess+0x98>)
 8006708:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800670a:	fb93 f3f2 	sdiv	r3, r3, r2
 800670e:	b29a      	uxth	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006716:	bf00      	nop
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	08009264 	.word	0x08009264
 8006728:	0800926c 	.word	0x0800926c

0800672c <__errno>:
 800672c:	4b01      	ldr	r3, [pc, #4]	; (8006734 <__errno+0x8>)
 800672e:	6818      	ldr	r0, [r3, #0]
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	24000020 	.word	0x24000020

08006738 <__libc_init_array>:
 8006738:	b570      	push	{r4, r5, r6, lr}
 800673a:	4d0d      	ldr	r5, [pc, #52]	; (8006770 <__libc_init_array+0x38>)
 800673c:	4c0d      	ldr	r4, [pc, #52]	; (8006774 <__libc_init_array+0x3c>)
 800673e:	1b64      	subs	r4, r4, r5
 8006740:	10a4      	asrs	r4, r4, #2
 8006742:	2600      	movs	r6, #0
 8006744:	42a6      	cmp	r6, r4
 8006746:	d109      	bne.n	800675c <__libc_init_array+0x24>
 8006748:	4d0b      	ldr	r5, [pc, #44]	; (8006778 <__libc_init_array+0x40>)
 800674a:	4c0c      	ldr	r4, [pc, #48]	; (800677c <__libc_init_array+0x44>)
 800674c:	f002 fd1a 	bl	8009184 <_init>
 8006750:	1b64      	subs	r4, r4, r5
 8006752:	10a4      	asrs	r4, r4, #2
 8006754:	2600      	movs	r6, #0
 8006756:	42a6      	cmp	r6, r4
 8006758:	d105      	bne.n	8006766 <__libc_init_array+0x2e>
 800675a:	bd70      	pop	{r4, r5, r6, pc}
 800675c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006760:	4798      	blx	r3
 8006762:	3601      	adds	r6, #1
 8006764:	e7ee      	b.n	8006744 <__libc_init_array+0xc>
 8006766:	f855 3b04 	ldr.w	r3, [r5], #4
 800676a:	4798      	blx	r3
 800676c:	3601      	adds	r6, #1
 800676e:	e7f2      	b.n	8006756 <__libc_init_array+0x1e>
 8006770:	08009654 	.word	0x08009654
 8006774:	08009654 	.word	0x08009654
 8006778:	08009654 	.word	0x08009654
 800677c:	08009658 	.word	0x08009658

08006780 <memset>:
 8006780:	4402      	add	r2, r0
 8006782:	4603      	mov	r3, r0
 8006784:	4293      	cmp	r3, r2
 8006786:	d100      	bne.n	800678a <memset+0xa>
 8006788:	4770      	bx	lr
 800678a:	f803 1b01 	strb.w	r1, [r3], #1
 800678e:	e7f9      	b.n	8006784 <memset+0x4>

08006790 <__cvt>:
 8006790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006792:	ed2d 8b02 	vpush	{d8}
 8006796:	eeb0 8b40 	vmov.f64	d8, d0
 800679a:	b085      	sub	sp, #20
 800679c:	4617      	mov	r7, r2
 800679e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80067a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80067a2:	ee18 2a90 	vmov	r2, s17
 80067a6:	f025 0520 	bic.w	r5, r5, #32
 80067aa:	2a00      	cmp	r2, #0
 80067ac:	bfb6      	itet	lt
 80067ae:	222d      	movlt	r2, #45	; 0x2d
 80067b0:	2200      	movge	r2, #0
 80067b2:	eeb1 8b40 	vneglt.f64	d8, d0
 80067b6:	2d46      	cmp	r5, #70	; 0x46
 80067b8:	460c      	mov	r4, r1
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	d004      	beq.n	80067c8 <__cvt+0x38>
 80067be:	2d45      	cmp	r5, #69	; 0x45
 80067c0:	d100      	bne.n	80067c4 <__cvt+0x34>
 80067c2:	3401      	adds	r4, #1
 80067c4:	2102      	movs	r1, #2
 80067c6:	e000      	b.n	80067ca <__cvt+0x3a>
 80067c8:	2103      	movs	r1, #3
 80067ca:	ab03      	add	r3, sp, #12
 80067cc:	9301      	str	r3, [sp, #4]
 80067ce:	ab02      	add	r3, sp, #8
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	4622      	mov	r2, r4
 80067d4:	4633      	mov	r3, r6
 80067d6:	eeb0 0b48 	vmov.f64	d0, d8
 80067da:	f000 fdf5 	bl	80073c8 <_dtoa_r>
 80067de:	2d47      	cmp	r5, #71	; 0x47
 80067e0:	d101      	bne.n	80067e6 <__cvt+0x56>
 80067e2:	07fb      	lsls	r3, r7, #31
 80067e4:	d51a      	bpl.n	800681c <__cvt+0x8c>
 80067e6:	2d46      	cmp	r5, #70	; 0x46
 80067e8:	eb00 0204 	add.w	r2, r0, r4
 80067ec:	d10c      	bne.n	8006808 <__cvt+0x78>
 80067ee:	7803      	ldrb	r3, [r0, #0]
 80067f0:	2b30      	cmp	r3, #48	; 0x30
 80067f2:	d107      	bne.n	8006804 <__cvt+0x74>
 80067f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80067f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067fc:	bf1c      	itt	ne
 80067fe:	f1c4 0401 	rsbne	r4, r4, #1
 8006802:	6034      	strne	r4, [r6, #0]
 8006804:	6833      	ldr	r3, [r6, #0]
 8006806:	441a      	add	r2, r3
 8006808:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800680c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006810:	bf08      	it	eq
 8006812:	9203      	streq	r2, [sp, #12]
 8006814:	2130      	movs	r1, #48	; 0x30
 8006816:	9b03      	ldr	r3, [sp, #12]
 8006818:	4293      	cmp	r3, r2
 800681a:	d307      	bcc.n	800682c <__cvt+0x9c>
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006820:	1a1b      	subs	r3, r3, r0
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	b005      	add	sp, #20
 8006826:	ecbd 8b02 	vpop	{d8}
 800682a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800682c:	1c5c      	adds	r4, r3, #1
 800682e:	9403      	str	r4, [sp, #12]
 8006830:	7019      	strb	r1, [r3, #0]
 8006832:	e7f0      	b.n	8006816 <__cvt+0x86>

08006834 <__exponent>:
 8006834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006836:	4603      	mov	r3, r0
 8006838:	2900      	cmp	r1, #0
 800683a:	bfb8      	it	lt
 800683c:	4249      	neglt	r1, r1
 800683e:	f803 2b02 	strb.w	r2, [r3], #2
 8006842:	bfb4      	ite	lt
 8006844:	222d      	movlt	r2, #45	; 0x2d
 8006846:	222b      	movge	r2, #43	; 0x2b
 8006848:	2909      	cmp	r1, #9
 800684a:	7042      	strb	r2, [r0, #1]
 800684c:	dd2a      	ble.n	80068a4 <__exponent+0x70>
 800684e:	f10d 0407 	add.w	r4, sp, #7
 8006852:	46a4      	mov	ip, r4
 8006854:	270a      	movs	r7, #10
 8006856:	46a6      	mov	lr, r4
 8006858:	460a      	mov	r2, r1
 800685a:	fb91 f6f7 	sdiv	r6, r1, r7
 800685e:	fb07 1516 	mls	r5, r7, r6, r1
 8006862:	3530      	adds	r5, #48	; 0x30
 8006864:	2a63      	cmp	r2, #99	; 0x63
 8006866:	f104 34ff 	add.w	r4, r4, #4294967295
 800686a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800686e:	4631      	mov	r1, r6
 8006870:	dcf1      	bgt.n	8006856 <__exponent+0x22>
 8006872:	3130      	adds	r1, #48	; 0x30
 8006874:	f1ae 0502 	sub.w	r5, lr, #2
 8006878:	f804 1c01 	strb.w	r1, [r4, #-1]
 800687c:	1c44      	adds	r4, r0, #1
 800687e:	4629      	mov	r1, r5
 8006880:	4561      	cmp	r1, ip
 8006882:	d30a      	bcc.n	800689a <__exponent+0x66>
 8006884:	f10d 0209 	add.w	r2, sp, #9
 8006888:	eba2 020e 	sub.w	r2, r2, lr
 800688c:	4565      	cmp	r5, ip
 800688e:	bf88      	it	hi
 8006890:	2200      	movhi	r2, #0
 8006892:	4413      	add	r3, r2
 8006894:	1a18      	subs	r0, r3, r0
 8006896:	b003      	add	sp, #12
 8006898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800689a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800689e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80068a2:	e7ed      	b.n	8006880 <__exponent+0x4c>
 80068a4:	2330      	movs	r3, #48	; 0x30
 80068a6:	3130      	adds	r1, #48	; 0x30
 80068a8:	7083      	strb	r3, [r0, #2]
 80068aa:	70c1      	strb	r1, [r0, #3]
 80068ac:	1d03      	adds	r3, r0, #4
 80068ae:	e7f1      	b.n	8006894 <__exponent+0x60>

080068b0 <_printf_float>:
 80068b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	b08b      	sub	sp, #44	; 0x2c
 80068b6:	460c      	mov	r4, r1
 80068b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80068bc:	4616      	mov	r6, r2
 80068be:	461f      	mov	r7, r3
 80068c0:	4605      	mov	r5, r0
 80068c2:	f001 fca7 	bl	8008214 <_localeconv_r>
 80068c6:	f8d0 b000 	ldr.w	fp, [r0]
 80068ca:	4658      	mov	r0, fp
 80068cc:	f7f9 fd08 	bl	80002e0 <strlen>
 80068d0:	2300      	movs	r3, #0
 80068d2:	9308      	str	r3, [sp, #32]
 80068d4:	f8d8 3000 	ldr.w	r3, [r8]
 80068d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80068dc:	6822      	ldr	r2, [r4, #0]
 80068de:	3307      	adds	r3, #7
 80068e0:	f023 0307 	bic.w	r3, r3, #7
 80068e4:	f103 0108 	add.w	r1, r3, #8
 80068e8:	f8c8 1000 	str.w	r1, [r8]
 80068ec:	4682      	mov	sl, r0
 80068ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068f2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80068f6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006b58 <_printf_float+0x2a8>
 80068fa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80068fe:	eeb0 6bc0 	vabs.f64	d6, d0
 8006902:	eeb4 6b47 	vcmp.f64	d6, d7
 8006906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800690a:	dd24      	ble.n	8006956 <_printf_float+0xa6>
 800690c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006914:	d502      	bpl.n	800691c <_printf_float+0x6c>
 8006916:	232d      	movs	r3, #45	; 0x2d
 8006918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800691c:	4b90      	ldr	r3, [pc, #576]	; (8006b60 <_printf_float+0x2b0>)
 800691e:	4891      	ldr	r0, [pc, #580]	; (8006b64 <_printf_float+0x2b4>)
 8006920:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006924:	bf94      	ite	ls
 8006926:	4698      	movls	r8, r3
 8006928:	4680      	movhi	r8, r0
 800692a:	2303      	movs	r3, #3
 800692c:	6123      	str	r3, [r4, #16]
 800692e:	f022 0204 	bic.w	r2, r2, #4
 8006932:	2300      	movs	r3, #0
 8006934:	6022      	str	r2, [r4, #0]
 8006936:	9304      	str	r3, [sp, #16]
 8006938:	9700      	str	r7, [sp, #0]
 800693a:	4633      	mov	r3, r6
 800693c:	aa09      	add	r2, sp, #36	; 0x24
 800693e:	4621      	mov	r1, r4
 8006940:	4628      	mov	r0, r5
 8006942:	f000 f9d3 	bl	8006cec <_printf_common>
 8006946:	3001      	adds	r0, #1
 8006948:	f040 808a 	bne.w	8006a60 <_printf_float+0x1b0>
 800694c:	f04f 30ff 	mov.w	r0, #4294967295
 8006950:	b00b      	add	sp, #44	; 0x2c
 8006952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006956:	eeb4 0b40 	vcmp.f64	d0, d0
 800695a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800695e:	d709      	bvc.n	8006974 <_printf_float+0xc4>
 8006960:	ee10 3a90 	vmov	r3, s1
 8006964:	2b00      	cmp	r3, #0
 8006966:	bfbc      	itt	lt
 8006968:	232d      	movlt	r3, #45	; 0x2d
 800696a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800696e:	487e      	ldr	r0, [pc, #504]	; (8006b68 <_printf_float+0x2b8>)
 8006970:	4b7e      	ldr	r3, [pc, #504]	; (8006b6c <_printf_float+0x2bc>)
 8006972:	e7d5      	b.n	8006920 <_printf_float+0x70>
 8006974:	6863      	ldr	r3, [r4, #4]
 8006976:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800697a:	9104      	str	r1, [sp, #16]
 800697c:	1c59      	adds	r1, r3, #1
 800697e:	d13c      	bne.n	80069fa <_printf_float+0x14a>
 8006980:	2306      	movs	r3, #6
 8006982:	6063      	str	r3, [r4, #4]
 8006984:	2300      	movs	r3, #0
 8006986:	9303      	str	r3, [sp, #12]
 8006988:	ab08      	add	r3, sp, #32
 800698a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800698e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006992:	ab07      	add	r3, sp, #28
 8006994:	6861      	ldr	r1, [r4, #4]
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	6022      	str	r2, [r4, #0]
 800699a:	f10d 031b 	add.w	r3, sp, #27
 800699e:	4628      	mov	r0, r5
 80069a0:	f7ff fef6 	bl	8006790 <__cvt>
 80069a4:	9b04      	ldr	r3, [sp, #16]
 80069a6:	9907      	ldr	r1, [sp, #28]
 80069a8:	2b47      	cmp	r3, #71	; 0x47
 80069aa:	4680      	mov	r8, r0
 80069ac:	d108      	bne.n	80069c0 <_printf_float+0x110>
 80069ae:	1cc8      	adds	r0, r1, #3
 80069b0:	db02      	blt.n	80069b8 <_printf_float+0x108>
 80069b2:	6863      	ldr	r3, [r4, #4]
 80069b4:	4299      	cmp	r1, r3
 80069b6:	dd41      	ble.n	8006a3c <_printf_float+0x18c>
 80069b8:	f1a9 0902 	sub.w	r9, r9, #2
 80069bc:	fa5f f989 	uxtb.w	r9, r9
 80069c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80069c4:	d820      	bhi.n	8006a08 <_printf_float+0x158>
 80069c6:	3901      	subs	r1, #1
 80069c8:	464a      	mov	r2, r9
 80069ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069ce:	9107      	str	r1, [sp, #28]
 80069d0:	f7ff ff30 	bl	8006834 <__exponent>
 80069d4:	9a08      	ldr	r2, [sp, #32]
 80069d6:	9004      	str	r0, [sp, #16]
 80069d8:	1813      	adds	r3, r2, r0
 80069da:	2a01      	cmp	r2, #1
 80069dc:	6123      	str	r3, [r4, #16]
 80069de:	dc02      	bgt.n	80069e6 <_printf_float+0x136>
 80069e0:	6822      	ldr	r2, [r4, #0]
 80069e2:	07d2      	lsls	r2, r2, #31
 80069e4:	d501      	bpl.n	80069ea <_printf_float+0x13a>
 80069e6:	3301      	adds	r3, #1
 80069e8:	6123      	str	r3, [r4, #16]
 80069ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0a2      	beq.n	8006938 <_printf_float+0x88>
 80069f2:	232d      	movs	r3, #45	; 0x2d
 80069f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069f8:	e79e      	b.n	8006938 <_printf_float+0x88>
 80069fa:	9904      	ldr	r1, [sp, #16]
 80069fc:	2947      	cmp	r1, #71	; 0x47
 80069fe:	d1c1      	bne.n	8006984 <_printf_float+0xd4>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1bf      	bne.n	8006984 <_printf_float+0xd4>
 8006a04:	2301      	movs	r3, #1
 8006a06:	e7bc      	b.n	8006982 <_printf_float+0xd2>
 8006a08:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006a0c:	d118      	bne.n	8006a40 <_printf_float+0x190>
 8006a0e:	2900      	cmp	r1, #0
 8006a10:	6863      	ldr	r3, [r4, #4]
 8006a12:	dd0b      	ble.n	8006a2c <_printf_float+0x17c>
 8006a14:	6121      	str	r1, [r4, #16]
 8006a16:	b913      	cbnz	r3, 8006a1e <_printf_float+0x16e>
 8006a18:	6822      	ldr	r2, [r4, #0]
 8006a1a:	07d0      	lsls	r0, r2, #31
 8006a1c:	d502      	bpl.n	8006a24 <_printf_float+0x174>
 8006a1e:	3301      	adds	r3, #1
 8006a20:	440b      	add	r3, r1
 8006a22:	6123      	str	r3, [r4, #16]
 8006a24:	2300      	movs	r3, #0
 8006a26:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a28:	9304      	str	r3, [sp, #16]
 8006a2a:	e7de      	b.n	80069ea <_printf_float+0x13a>
 8006a2c:	b913      	cbnz	r3, 8006a34 <_printf_float+0x184>
 8006a2e:	6822      	ldr	r2, [r4, #0]
 8006a30:	07d2      	lsls	r2, r2, #31
 8006a32:	d501      	bpl.n	8006a38 <_printf_float+0x188>
 8006a34:	3302      	adds	r3, #2
 8006a36:	e7f4      	b.n	8006a22 <_printf_float+0x172>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e7f2      	b.n	8006a22 <_printf_float+0x172>
 8006a3c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006a40:	9b08      	ldr	r3, [sp, #32]
 8006a42:	4299      	cmp	r1, r3
 8006a44:	db05      	blt.n	8006a52 <_printf_float+0x1a2>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	6121      	str	r1, [r4, #16]
 8006a4a:	07d8      	lsls	r0, r3, #31
 8006a4c:	d5ea      	bpl.n	8006a24 <_printf_float+0x174>
 8006a4e:	1c4b      	adds	r3, r1, #1
 8006a50:	e7e7      	b.n	8006a22 <_printf_float+0x172>
 8006a52:	2900      	cmp	r1, #0
 8006a54:	bfd4      	ite	le
 8006a56:	f1c1 0202 	rsble	r2, r1, #2
 8006a5a:	2201      	movgt	r2, #1
 8006a5c:	4413      	add	r3, r2
 8006a5e:	e7e0      	b.n	8006a22 <_printf_float+0x172>
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	055a      	lsls	r2, r3, #21
 8006a64:	d407      	bmi.n	8006a76 <_printf_float+0x1c6>
 8006a66:	6923      	ldr	r3, [r4, #16]
 8006a68:	4642      	mov	r2, r8
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	47b8      	blx	r7
 8006a70:	3001      	adds	r0, #1
 8006a72:	d12a      	bne.n	8006aca <_printf_float+0x21a>
 8006a74:	e76a      	b.n	800694c <_printf_float+0x9c>
 8006a76:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006a7a:	f240 80e2 	bls.w	8006c42 <_printf_float+0x392>
 8006a7e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006a82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a8a:	d133      	bne.n	8006af4 <_printf_float+0x244>
 8006a8c:	4a38      	ldr	r2, [pc, #224]	; (8006b70 <_printf_float+0x2c0>)
 8006a8e:	2301      	movs	r3, #1
 8006a90:	4631      	mov	r1, r6
 8006a92:	4628      	mov	r0, r5
 8006a94:	47b8      	blx	r7
 8006a96:	3001      	adds	r0, #1
 8006a98:	f43f af58 	beq.w	800694c <_printf_float+0x9c>
 8006a9c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	db02      	blt.n	8006aaa <_printf_float+0x1fa>
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	07d8      	lsls	r0, r3, #31
 8006aa8:	d50f      	bpl.n	8006aca <_printf_float+0x21a>
 8006aaa:	4653      	mov	r3, sl
 8006aac:	465a      	mov	r2, fp
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	47b8      	blx	r7
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	f43f af49 	beq.w	800694c <_printf_float+0x9c>
 8006aba:	f04f 0800 	mov.w	r8, #0
 8006abe:	f104 091a 	add.w	r9, r4, #26
 8006ac2:	9b08      	ldr	r3, [sp, #32]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	4543      	cmp	r3, r8
 8006ac8:	dc09      	bgt.n	8006ade <_printf_float+0x22e>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	079b      	lsls	r3, r3, #30
 8006ace:	f100 8108 	bmi.w	8006ce2 <_printf_float+0x432>
 8006ad2:	68e0      	ldr	r0, [r4, #12]
 8006ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad6:	4298      	cmp	r0, r3
 8006ad8:	bfb8      	it	lt
 8006ada:	4618      	movlt	r0, r3
 8006adc:	e738      	b.n	8006950 <_printf_float+0xa0>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	464a      	mov	r2, r9
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	47b8      	blx	r7
 8006ae8:	3001      	adds	r0, #1
 8006aea:	f43f af2f 	beq.w	800694c <_printf_float+0x9c>
 8006aee:	f108 0801 	add.w	r8, r8, #1
 8006af2:	e7e6      	b.n	8006ac2 <_printf_float+0x212>
 8006af4:	9b07      	ldr	r3, [sp, #28]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	dc3c      	bgt.n	8006b74 <_printf_float+0x2c4>
 8006afa:	4a1d      	ldr	r2, [pc, #116]	; (8006b70 <_printf_float+0x2c0>)
 8006afc:	2301      	movs	r3, #1
 8006afe:	4631      	mov	r1, r6
 8006b00:	4628      	mov	r0, r5
 8006b02:	47b8      	blx	r7
 8006b04:	3001      	adds	r0, #1
 8006b06:	f43f af21 	beq.w	800694c <_printf_float+0x9c>
 8006b0a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	d102      	bne.n	8006b18 <_printf_float+0x268>
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	07d9      	lsls	r1, r3, #31
 8006b16:	d5d8      	bpl.n	8006aca <_printf_float+0x21a>
 8006b18:	4653      	mov	r3, sl
 8006b1a:	465a      	mov	r2, fp
 8006b1c:	4631      	mov	r1, r6
 8006b1e:	4628      	mov	r0, r5
 8006b20:	47b8      	blx	r7
 8006b22:	3001      	adds	r0, #1
 8006b24:	f43f af12 	beq.w	800694c <_printf_float+0x9c>
 8006b28:	f04f 0900 	mov.w	r9, #0
 8006b2c:	f104 0a1a 	add.w	sl, r4, #26
 8006b30:	9b07      	ldr	r3, [sp, #28]
 8006b32:	425b      	negs	r3, r3
 8006b34:	454b      	cmp	r3, r9
 8006b36:	dc01      	bgt.n	8006b3c <_printf_float+0x28c>
 8006b38:	9b08      	ldr	r3, [sp, #32]
 8006b3a:	e795      	b.n	8006a68 <_printf_float+0x1b8>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	4652      	mov	r2, sl
 8006b40:	4631      	mov	r1, r6
 8006b42:	4628      	mov	r0, r5
 8006b44:	47b8      	blx	r7
 8006b46:	3001      	adds	r0, #1
 8006b48:	f43f af00 	beq.w	800694c <_printf_float+0x9c>
 8006b4c:	f109 0901 	add.w	r9, r9, #1
 8006b50:	e7ee      	b.n	8006b30 <_printf_float+0x280>
 8006b52:	bf00      	nop
 8006b54:	f3af 8000 	nop.w
 8006b58:	ffffffff 	.word	0xffffffff
 8006b5c:	7fefffff 	.word	0x7fefffff
 8006b60:	08009278 	.word	0x08009278
 8006b64:	0800927c 	.word	0x0800927c
 8006b68:	08009284 	.word	0x08009284
 8006b6c:	08009280 	.word	0x08009280
 8006b70:	08009288 	.word	0x08009288
 8006b74:	9a08      	ldr	r2, [sp, #32]
 8006b76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	bfa8      	it	ge
 8006b7c:	461a      	movge	r2, r3
 8006b7e:	2a00      	cmp	r2, #0
 8006b80:	4691      	mov	r9, r2
 8006b82:	dc38      	bgt.n	8006bf6 <_printf_float+0x346>
 8006b84:	2300      	movs	r3, #0
 8006b86:	9305      	str	r3, [sp, #20]
 8006b88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b8c:	f104 021a 	add.w	r2, r4, #26
 8006b90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b92:	9905      	ldr	r1, [sp, #20]
 8006b94:	9304      	str	r3, [sp, #16]
 8006b96:	eba3 0309 	sub.w	r3, r3, r9
 8006b9a:	428b      	cmp	r3, r1
 8006b9c:	dc33      	bgt.n	8006c06 <_printf_float+0x356>
 8006b9e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	db3c      	blt.n	8006c20 <_printf_float+0x370>
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	07da      	lsls	r2, r3, #31
 8006baa:	d439      	bmi.n	8006c20 <_printf_float+0x370>
 8006bac:	9b08      	ldr	r3, [sp, #32]
 8006bae:	9a04      	ldr	r2, [sp, #16]
 8006bb0:	9907      	ldr	r1, [sp, #28]
 8006bb2:	1a9a      	subs	r2, r3, r2
 8006bb4:	eba3 0901 	sub.w	r9, r3, r1
 8006bb8:	4591      	cmp	r9, r2
 8006bba:	bfa8      	it	ge
 8006bbc:	4691      	movge	r9, r2
 8006bbe:	f1b9 0f00 	cmp.w	r9, #0
 8006bc2:	dc35      	bgt.n	8006c30 <_printf_float+0x380>
 8006bc4:	f04f 0800 	mov.w	r8, #0
 8006bc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bcc:	f104 0a1a 	add.w	sl, r4, #26
 8006bd0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006bd4:	1a9b      	subs	r3, r3, r2
 8006bd6:	eba3 0309 	sub.w	r3, r3, r9
 8006bda:	4543      	cmp	r3, r8
 8006bdc:	f77f af75 	ble.w	8006aca <_printf_float+0x21a>
 8006be0:	2301      	movs	r3, #1
 8006be2:	4652      	mov	r2, sl
 8006be4:	4631      	mov	r1, r6
 8006be6:	4628      	mov	r0, r5
 8006be8:	47b8      	blx	r7
 8006bea:	3001      	adds	r0, #1
 8006bec:	f43f aeae 	beq.w	800694c <_printf_float+0x9c>
 8006bf0:	f108 0801 	add.w	r8, r8, #1
 8006bf4:	e7ec      	b.n	8006bd0 <_printf_float+0x320>
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	4631      	mov	r1, r6
 8006bfa:	4642      	mov	r2, r8
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	47b8      	blx	r7
 8006c00:	3001      	adds	r0, #1
 8006c02:	d1bf      	bne.n	8006b84 <_printf_float+0x2d4>
 8006c04:	e6a2      	b.n	800694c <_printf_float+0x9c>
 8006c06:	2301      	movs	r3, #1
 8006c08:	4631      	mov	r1, r6
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	9204      	str	r2, [sp, #16]
 8006c0e:	47b8      	blx	r7
 8006c10:	3001      	adds	r0, #1
 8006c12:	f43f ae9b 	beq.w	800694c <_printf_float+0x9c>
 8006c16:	9b05      	ldr	r3, [sp, #20]
 8006c18:	9a04      	ldr	r2, [sp, #16]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	9305      	str	r3, [sp, #20]
 8006c1e:	e7b7      	b.n	8006b90 <_printf_float+0x2e0>
 8006c20:	4653      	mov	r3, sl
 8006c22:	465a      	mov	r2, fp
 8006c24:	4631      	mov	r1, r6
 8006c26:	4628      	mov	r0, r5
 8006c28:	47b8      	blx	r7
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	d1be      	bne.n	8006bac <_printf_float+0x2fc>
 8006c2e:	e68d      	b.n	800694c <_printf_float+0x9c>
 8006c30:	9a04      	ldr	r2, [sp, #16]
 8006c32:	464b      	mov	r3, r9
 8006c34:	4442      	add	r2, r8
 8006c36:	4631      	mov	r1, r6
 8006c38:	4628      	mov	r0, r5
 8006c3a:	47b8      	blx	r7
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	d1c1      	bne.n	8006bc4 <_printf_float+0x314>
 8006c40:	e684      	b.n	800694c <_printf_float+0x9c>
 8006c42:	9a08      	ldr	r2, [sp, #32]
 8006c44:	2a01      	cmp	r2, #1
 8006c46:	dc01      	bgt.n	8006c4c <_printf_float+0x39c>
 8006c48:	07db      	lsls	r3, r3, #31
 8006c4a:	d537      	bpl.n	8006cbc <_printf_float+0x40c>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	4642      	mov	r2, r8
 8006c50:	4631      	mov	r1, r6
 8006c52:	4628      	mov	r0, r5
 8006c54:	47b8      	blx	r7
 8006c56:	3001      	adds	r0, #1
 8006c58:	f43f ae78 	beq.w	800694c <_printf_float+0x9c>
 8006c5c:	4653      	mov	r3, sl
 8006c5e:	465a      	mov	r2, fp
 8006c60:	4631      	mov	r1, r6
 8006c62:	4628      	mov	r0, r5
 8006c64:	47b8      	blx	r7
 8006c66:	3001      	adds	r0, #1
 8006c68:	f43f ae70 	beq.w	800694c <_printf_float+0x9c>
 8006c6c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006c70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c78:	d01b      	beq.n	8006cb2 <_printf_float+0x402>
 8006c7a:	9b08      	ldr	r3, [sp, #32]
 8006c7c:	f108 0201 	add.w	r2, r8, #1
 8006c80:	3b01      	subs	r3, #1
 8006c82:	4631      	mov	r1, r6
 8006c84:	4628      	mov	r0, r5
 8006c86:	47b8      	blx	r7
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d10e      	bne.n	8006caa <_printf_float+0x3fa>
 8006c8c:	e65e      	b.n	800694c <_printf_float+0x9c>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	464a      	mov	r2, r9
 8006c92:	4631      	mov	r1, r6
 8006c94:	4628      	mov	r0, r5
 8006c96:	47b8      	blx	r7
 8006c98:	3001      	adds	r0, #1
 8006c9a:	f43f ae57 	beq.w	800694c <_printf_float+0x9c>
 8006c9e:	f108 0801 	add.w	r8, r8, #1
 8006ca2:	9b08      	ldr	r3, [sp, #32]
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	4543      	cmp	r3, r8
 8006ca8:	dcf1      	bgt.n	8006c8e <_printf_float+0x3de>
 8006caa:	9b04      	ldr	r3, [sp, #16]
 8006cac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006cb0:	e6db      	b.n	8006a6a <_printf_float+0x1ba>
 8006cb2:	f04f 0800 	mov.w	r8, #0
 8006cb6:	f104 091a 	add.w	r9, r4, #26
 8006cba:	e7f2      	b.n	8006ca2 <_printf_float+0x3f2>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	4642      	mov	r2, r8
 8006cc0:	e7df      	b.n	8006c82 <_printf_float+0x3d2>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	464a      	mov	r2, r9
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b8      	blx	r7
 8006ccc:	3001      	adds	r0, #1
 8006cce:	f43f ae3d 	beq.w	800694c <_printf_float+0x9c>
 8006cd2:	f108 0801 	add.w	r8, r8, #1
 8006cd6:	68e3      	ldr	r3, [r4, #12]
 8006cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cda:	1a5b      	subs	r3, r3, r1
 8006cdc:	4543      	cmp	r3, r8
 8006cde:	dcf0      	bgt.n	8006cc2 <_printf_float+0x412>
 8006ce0:	e6f7      	b.n	8006ad2 <_printf_float+0x222>
 8006ce2:	f04f 0800 	mov.w	r8, #0
 8006ce6:	f104 0919 	add.w	r9, r4, #25
 8006cea:	e7f4      	b.n	8006cd6 <_printf_float+0x426>

08006cec <_printf_common>:
 8006cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf0:	4616      	mov	r6, r2
 8006cf2:	4699      	mov	r9, r3
 8006cf4:	688a      	ldr	r2, [r1, #8]
 8006cf6:	690b      	ldr	r3, [r1, #16]
 8006cf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	bfb8      	it	lt
 8006d00:	4613      	movlt	r3, r2
 8006d02:	6033      	str	r3, [r6, #0]
 8006d04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d08:	4607      	mov	r7, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	b10a      	cbz	r2, 8006d12 <_printf_common+0x26>
 8006d0e:	3301      	adds	r3, #1
 8006d10:	6033      	str	r3, [r6, #0]
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	0699      	lsls	r1, r3, #26
 8006d16:	bf42      	ittt	mi
 8006d18:	6833      	ldrmi	r3, [r6, #0]
 8006d1a:	3302      	addmi	r3, #2
 8006d1c:	6033      	strmi	r3, [r6, #0]
 8006d1e:	6825      	ldr	r5, [r4, #0]
 8006d20:	f015 0506 	ands.w	r5, r5, #6
 8006d24:	d106      	bne.n	8006d34 <_printf_common+0x48>
 8006d26:	f104 0a19 	add.w	sl, r4, #25
 8006d2a:	68e3      	ldr	r3, [r4, #12]
 8006d2c:	6832      	ldr	r2, [r6, #0]
 8006d2e:	1a9b      	subs	r3, r3, r2
 8006d30:	42ab      	cmp	r3, r5
 8006d32:	dc26      	bgt.n	8006d82 <_printf_common+0x96>
 8006d34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d38:	1e13      	subs	r3, r2, #0
 8006d3a:	6822      	ldr	r2, [r4, #0]
 8006d3c:	bf18      	it	ne
 8006d3e:	2301      	movne	r3, #1
 8006d40:	0692      	lsls	r2, r2, #26
 8006d42:	d42b      	bmi.n	8006d9c <_printf_common+0xb0>
 8006d44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d48:	4649      	mov	r1, r9
 8006d4a:	4638      	mov	r0, r7
 8006d4c:	47c0      	blx	r8
 8006d4e:	3001      	adds	r0, #1
 8006d50:	d01e      	beq.n	8006d90 <_printf_common+0xa4>
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	68e5      	ldr	r5, [r4, #12]
 8006d56:	6832      	ldr	r2, [r6, #0]
 8006d58:	f003 0306 	and.w	r3, r3, #6
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	bf08      	it	eq
 8006d60:	1aad      	subeq	r5, r5, r2
 8006d62:	68a3      	ldr	r3, [r4, #8]
 8006d64:	6922      	ldr	r2, [r4, #16]
 8006d66:	bf0c      	ite	eq
 8006d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d6c:	2500      	movne	r5, #0
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	bfc4      	itt	gt
 8006d72:	1a9b      	subgt	r3, r3, r2
 8006d74:	18ed      	addgt	r5, r5, r3
 8006d76:	2600      	movs	r6, #0
 8006d78:	341a      	adds	r4, #26
 8006d7a:	42b5      	cmp	r5, r6
 8006d7c:	d11a      	bne.n	8006db4 <_printf_common+0xc8>
 8006d7e:	2000      	movs	r0, #0
 8006d80:	e008      	b.n	8006d94 <_printf_common+0xa8>
 8006d82:	2301      	movs	r3, #1
 8006d84:	4652      	mov	r2, sl
 8006d86:	4649      	mov	r1, r9
 8006d88:	4638      	mov	r0, r7
 8006d8a:	47c0      	blx	r8
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	d103      	bne.n	8006d98 <_printf_common+0xac>
 8006d90:	f04f 30ff 	mov.w	r0, #4294967295
 8006d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d98:	3501      	adds	r5, #1
 8006d9a:	e7c6      	b.n	8006d2a <_printf_common+0x3e>
 8006d9c:	18e1      	adds	r1, r4, r3
 8006d9e:	1c5a      	adds	r2, r3, #1
 8006da0:	2030      	movs	r0, #48	; 0x30
 8006da2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006da6:	4422      	add	r2, r4
 8006da8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006db0:	3302      	adds	r3, #2
 8006db2:	e7c7      	b.n	8006d44 <_printf_common+0x58>
 8006db4:	2301      	movs	r3, #1
 8006db6:	4622      	mov	r2, r4
 8006db8:	4649      	mov	r1, r9
 8006dba:	4638      	mov	r0, r7
 8006dbc:	47c0      	blx	r8
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	d0e6      	beq.n	8006d90 <_printf_common+0xa4>
 8006dc2:	3601      	adds	r6, #1
 8006dc4:	e7d9      	b.n	8006d7a <_printf_common+0x8e>
	...

08006dc8 <_printf_i>:
 8006dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dcc:	7e0f      	ldrb	r7, [r1, #24]
 8006dce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006dd0:	2f78      	cmp	r7, #120	; 0x78
 8006dd2:	4691      	mov	r9, r2
 8006dd4:	4680      	mov	r8, r0
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	469a      	mov	sl, r3
 8006dda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dde:	d807      	bhi.n	8006df0 <_printf_i+0x28>
 8006de0:	2f62      	cmp	r7, #98	; 0x62
 8006de2:	d80a      	bhi.n	8006dfa <_printf_i+0x32>
 8006de4:	2f00      	cmp	r7, #0
 8006de6:	f000 80d8 	beq.w	8006f9a <_printf_i+0x1d2>
 8006dea:	2f58      	cmp	r7, #88	; 0x58
 8006dec:	f000 80a3 	beq.w	8006f36 <_printf_i+0x16e>
 8006df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006df4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006df8:	e03a      	b.n	8006e70 <_printf_i+0xa8>
 8006dfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dfe:	2b15      	cmp	r3, #21
 8006e00:	d8f6      	bhi.n	8006df0 <_printf_i+0x28>
 8006e02:	a101      	add	r1, pc, #4	; (adr r1, 8006e08 <_printf_i+0x40>)
 8006e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e08:	08006e61 	.word	0x08006e61
 8006e0c:	08006e75 	.word	0x08006e75
 8006e10:	08006df1 	.word	0x08006df1
 8006e14:	08006df1 	.word	0x08006df1
 8006e18:	08006df1 	.word	0x08006df1
 8006e1c:	08006df1 	.word	0x08006df1
 8006e20:	08006e75 	.word	0x08006e75
 8006e24:	08006df1 	.word	0x08006df1
 8006e28:	08006df1 	.word	0x08006df1
 8006e2c:	08006df1 	.word	0x08006df1
 8006e30:	08006df1 	.word	0x08006df1
 8006e34:	08006f81 	.word	0x08006f81
 8006e38:	08006ea5 	.word	0x08006ea5
 8006e3c:	08006f63 	.word	0x08006f63
 8006e40:	08006df1 	.word	0x08006df1
 8006e44:	08006df1 	.word	0x08006df1
 8006e48:	08006fa3 	.word	0x08006fa3
 8006e4c:	08006df1 	.word	0x08006df1
 8006e50:	08006ea5 	.word	0x08006ea5
 8006e54:	08006df1 	.word	0x08006df1
 8006e58:	08006df1 	.word	0x08006df1
 8006e5c:	08006f6b 	.word	0x08006f6b
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	1d1a      	adds	r2, r3, #4
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	602a      	str	r2, [r5, #0]
 8006e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e70:	2301      	movs	r3, #1
 8006e72:	e0a3      	b.n	8006fbc <_printf_i+0x1f4>
 8006e74:	6820      	ldr	r0, [r4, #0]
 8006e76:	6829      	ldr	r1, [r5, #0]
 8006e78:	0606      	lsls	r6, r0, #24
 8006e7a:	f101 0304 	add.w	r3, r1, #4
 8006e7e:	d50a      	bpl.n	8006e96 <_printf_i+0xce>
 8006e80:	680e      	ldr	r6, [r1, #0]
 8006e82:	602b      	str	r3, [r5, #0]
 8006e84:	2e00      	cmp	r6, #0
 8006e86:	da03      	bge.n	8006e90 <_printf_i+0xc8>
 8006e88:	232d      	movs	r3, #45	; 0x2d
 8006e8a:	4276      	negs	r6, r6
 8006e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e90:	485e      	ldr	r0, [pc, #376]	; (800700c <_printf_i+0x244>)
 8006e92:	230a      	movs	r3, #10
 8006e94:	e019      	b.n	8006eca <_printf_i+0x102>
 8006e96:	680e      	ldr	r6, [r1, #0]
 8006e98:	602b      	str	r3, [r5, #0]
 8006e9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e9e:	bf18      	it	ne
 8006ea0:	b236      	sxthne	r6, r6
 8006ea2:	e7ef      	b.n	8006e84 <_printf_i+0xbc>
 8006ea4:	682b      	ldr	r3, [r5, #0]
 8006ea6:	6820      	ldr	r0, [r4, #0]
 8006ea8:	1d19      	adds	r1, r3, #4
 8006eaa:	6029      	str	r1, [r5, #0]
 8006eac:	0601      	lsls	r1, r0, #24
 8006eae:	d501      	bpl.n	8006eb4 <_printf_i+0xec>
 8006eb0:	681e      	ldr	r6, [r3, #0]
 8006eb2:	e002      	b.n	8006eba <_printf_i+0xf2>
 8006eb4:	0646      	lsls	r6, r0, #25
 8006eb6:	d5fb      	bpl.n	8006eb0 <_printf_i+0xe8>
 8006eb8:	881e      	ldrh	r6, [r3, #0]
 8006eba:	4854      	ldr	r0, [pc, #336]	; (800700c <_printf_i+0x244>)
 8006ebc:	2f6f      	cmp	r7, #111	; 0x6f
 8006ebe:	bf0c      	ite	eq
 8006ec0:	2308      	moveq	r3, #8
 8006ec2:	230a      	movne	r3, #10
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eca:	6865      	ldr	r5, [r4, #4]
 8006ecc:	60a5      	str	r5, [r4, #8]
 8006ece:	2d00      	cmp	r5, #0
 8006ed0:	bfa2      	ittt	ge
 8006ed2:	6821      	ldrge	r1, [r4, #0]
 8006ed4:	f021 0104 	bicge.w	r1, r1, #4
 8006ed8:	6021      	strge	r1, [r4, #0]
 8006eda:	b90e      	cbnz	r6, 8006ee0 <_printf_i+0x118>
 8006edc:	2d00      	cmp	r5, #0
 8006ede:	d04d      	beq.n	8006f7c <_printf_i+0x1b4>
 8006ee0:	4615      	mov	r5, r2
 8006ee2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ee6:	fb03 6711 	mls	r7, r3, r1, r6
 8006eea:	5dc7      	ldrb	r7, [r0, r7]
 8006eec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ef0:	4637      	mov	r7, r6
 8006ef2:	42bb      	cmp	r3, r7
 8006ef4:	460e      	mov	r6, r1
 8006ef6:	d9f4      	bls.n	8006ee2 <_printf_i+0x11a>
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	d10b      	bne.n	8006f14 <_printf_i+0x14c>
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	07de      	lsls	r6, r3, #31
 8006f00:	d508      	bpl.n	8006f14 <_printf_i+0x14c>
 8006f02:	6923      	ldr	r3, [r4, #16]
 8006f04:	6861      	ldr	r1, [r4, #4]
 8006f06:	4299      	cmp	r1, r3
 8006f08:	bfde      	ittt	le
 8006f0a:	2330      	movle	r3, #48	; 0x30
 8006f0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f14:	1b52      	subs	r2, r2, r5
 8006f16:	6122      	str	r2, [r4, #16]
 8006f18:	f8cd a000 	str.w	sl, [sp]
 8006f1c:	464b      	mov	r3, r9
 8006f1e:	aa03      	add	r2, sp, #12
 8006f20:	4621      	mov	r1, r4
 8006f22:	4640      	mov	r0, r8
 8006f24:	f7ff fee2 	bl	8006cec <_printf_common>
 8006f28:	3001      	adds	r0, #1
 8006f2a:	d14c      	bne.n	8006fc6 <_printf_i+0x1fe>
 8006f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f30:	b004      	add	sp, #16
 8006f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f36:	4835      	ldr	r0, [pc, #212]	; (800700c <_printf_i+0x244>)
 8006f38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f3c:	6829      	ldr	r1, [r5, #0]
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f44:	6029      	str	r1, [r5, #0]
 8006f46:	061d      	lsls	r5, r3, #24
 8006f48:	d514      	bpl.n	8006f74 <_printf_i+0x1ac>
 8006f4a:	07df      	lsls	r7, r3, #31
 8006f4c:	bf44      	itt	mi
 8006f4e:	f043 0320 	orrmi.w	r3, r3, #32
 8006f52:	6023      	strmi	r3, [r4, #0]
 8006f54:	b91e      	cbnz	r6, 8006f5e <_printf_i+0x196>
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	f023 0320 	bic.w	r3, r3, #32
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	2310      	movs	r3, #16
 8006f60:	e7b0      	b.n	8006ec4 <_printf_i+0xfc>
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	f043 0320 	orr.w	r3, r3, #32
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	2378      	movs	r3, #120	; 0x78
 8006f6c:	4828      	ldr	r0, [pc, #160]	; (8007010 <_printf_i+0x248>)
 8006f6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f72:	e7e3      	b.n	8006f3c <_printf_i+0x174>
 8006f74:	0659      	lsls	r1, r3, #25
 8006f76:	bf48      	it	mi
 8006f78:	b2b6      	uxthmi	r6, r6
 8006f7a:	e7e6      	b.n	8006f4a <_printf_i+0x182>
 8006f7c:	4615      	mov	r5, r2
 8006f7e:	e7bb      	b.n	8006ef8 <_printf_i+0x130>
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	6826      	ldr	r6, [r4, #0]
 8006f84:	6961      	ldr	r1, [r4, #20]
 8006f86:	1d18      	adds	r0, r3, #4
 8006f88:	6028      	str	r0, [r5, #0]
 8006f8a:	0635      	lsls	r5, r6, #24
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	d501      	bpl.n	8006f94 <_printf_i+0x1cc>
 8006f90:	6019      	str	r1, [r3, #0]
 8006f92:	e002      	b.n	8006f9a <_printf_i+0x1d2>
 8006f94:	0670      	lsls	r0, r6, #25
 8006f96:	d5fb      	bpl.n	8006f90 <_printf_i+0x1c8>
 8006f98:	8019      	strh	r1, [r3, #0]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	6123      	str	r3, [r4, #16]
 8006f9e:	4615      	mov	r5, r2
 8006fa0:	e7ba      	b.n	8006f18 <_printf_i+0x150>
 8006fa2:	682b      	ldr	r3, [r5, #0]
 8006fa4:	1d1a      	adds	r2, r3, #4
 8006fa6:	602a      	str	r2, [r5, #0]
 8006fa8:	681d      	ldr	r5, [r3, #0]
 8006faa:	6862      	ldr	r2, [r4, #4]
 8006fac:	2100      	movs	r1, #0
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f7f9 f99e 	bl	80002f0 <memchr>
 8006fb4:	b108      	cbz	r0, 8006fba <_printf_i+0x1f2>
 8006fb6:	1b40      	subs	r0, r0, r5
 8006fb8:	6060      	str	r0, [r4, #4]
 8006fba:	6863      	ldr	r3, [r4, #4]
 8006fbc:	6123      	str	r3, [r4, #16]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fc4:	e7a8      	b.n	8006f18 <_printf_i+0x150>
 8006fc6:	6923      	ldr	r3, [r4, #16]
 8006fc8:	462a      	mov	r2, r5
 8006fca:	4649      	mov	r1, r9
 8006fcc:	4640      	mov	r0, r8
 8006fce:	47d0      	blx	sl
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	d0ab      	beq.n	8006f2c <_printf_i+0x164>
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	079b      	lsls	r3, r3, #30
 8006fd8:	d413      	bmi.n	8007002 <_printf_i+0x23a>
 8006fda:	68e0      	ldr	r0, [r4, #12]
 8006fdc:	9b03      	ldr	r3, [sp, #12]
 8006fde:	4298      	cmp	r0, r3
 8006fe0:	bfb8      	it	lt
 8006fe2:	4618      	movlt	r0, r3
 8006fe4:	e7a4      	b.n	8006f30 <_printf_i+0x168>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	4632      	mov	r2, r6
 8006fea:	4649      	mov	r1, r9
 8006fec:	4640      	mov	r0, r8
 8006fee:	47d0      	blx	sl
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d09b      	beq.n	8006f2c <_printf_i+0x164>
 8006ff4:	3501      	adds	r5, #1
 8006ff6:	68e3      	ldr	r3, [r4, #12]
 8006ff8:	9903      	ldr	r1, [sp, #12]
 8006ffa:	1a5b      	subs	r3, r3, r1
 8006ffc:	42ab      	cmp	r3, r5
 8006ffe:	dcf2      	bgt.n	8006fe6 <_printf_i+0x21e>
 8007000:	e7eb      	b.n	8006fda <_printf_i+0x212>
 8007002:	2500      	movs	r5, #0
 8007004:	f104 0619 	add.w	r6, r4, #25
 8007008:	e7f5      	b.n	8006ff6 <_printf_i+0x22e>
 800700a:	bf00      	nop
 800700c:	0800928a 	.word	0x0800928a
 8007010:	0800929b 	.word	0x0800929b

08007014 <iprintf>:
 8007014:	b40f      	push	{r0, r1, r2, r3}
 8007016:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <iprintf+0x2c>)
 8007018:	b513      	push	{r0, r1, r4, lr}
 800701a:	681c      	ldr	r4, [r3, #0]
 800701c:	b124      	cbz	r4, 8007028 <iprintf+0x14>
 800701e:	69a3      	ldr	r3, [r4, #24]
 8007020:	b913      	cbnz	r3, 8007028 <iprintf+0x14>
 8007022:	4620      	mov	r0, r4
 8007024:	f001 f858 	bl	80080d8 <__sinit>
 8007028:	ab05      	add	r3, sp, #20
 800702a:	9a04      	ldr	r2, [sp, #16]
 800702c:	68a1      	ldr	r1, [r4, #8]
 800702e:	9301      	str	r3, [sp, #4]
 8007030:	4620      	mov	r0, r4
 8007032:	f001 fe15 	bl	8008c60 <_vfiprintf_r>
 8007036:	b002      	add	sp, #8
 8007038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800703c:	b004      	add	sp, #16
 800703e:	4770      	bx	lr
 8007040:	24000020 	.word	0x24000020

08007044 <_puts_r>:
 8007044:	b570      	push	{r4, r5, r6, lr}
 8007046:	460e      	mov	r6, r1
 8007048:	4605      	mov	r5, r0
 800704a:	b118      	cbz	r0, 8007054 <_puts_r+0x10>
 800704c:	6983      	ldr	r3, [r0, #24]
 800704e:	b90b      	cbnz	r3, 8007054 <_puts_r+0x10>
 8007050:	f001 f842 	bl	80080d8 <__sinit>
 8007054:	69ab      	ldr	r3, [r5, #24]
 8007056:	68ac      	ldr	r4, [r5, #8]
 8007058:	b913      	cbnz	r3, 8007060 <_puts_r+0x1c>
 800705a:	4628      	mov	r0, r5
 800705c:	f001 f83c 	bl	80080d8 <__sinit>
 8007060:	4b2c      	ldr	r3, [pc, #176]	; (8007114 <_puts_r+0xd0>)
 8007062:	429c      	cmp	r4, r3
 8007064:	d120      	bne.n	80070a8 <_puts_r+0x64>
 8007066:	686c      	ldr	r4, [r5, #4]
 8007068:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800706a:	07db      	lsls	r3, r3, #31
 800706c:	d405      	bmi.n	800707a <_puts_r+0x36>
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	0598      	lsls	r0, r3, #22
 8007072:	d402      	bmi.n	800707a <_puts_r+0x36>
 8007074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007076:	f001 f8d2 	bl	800821e <__retarget_lock_acquire_recursive>
 800707a:	89a3      	ldrh	r3, [r4, #12]
 800707c:	0719      	lsls	r1, r3, #28
 800707e:	d51d      	bpl.n	80070bc <_puts_r+0x78>
 8007080:	6923      	ldr	r3, [r4, #16]
 8007082:	b1db      	cbz	r3, 80070bc <_puts_r+0x78>
 8007084:	3e01      	subs	r6, #1
 8007086:	68a3      	ldr	r3, [r4, #8]
 8007088:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800708c:	3b01      	subs	r3, #1
 800708e:	60a3      	str	r3, [r4, #8]
 8007090:	bb39      	cbnz	r1, 80070e2 <_puts_r+0x9e>
 8007092:	2b00      	cmp	r3, #0
 8007094:	da38      	bge.n	8007108 <_puts_r+0xc4>
 8007096:	4622      	mov	r2, r4
 8007098:	210a      	movs	r1, #10
 800709a:	4628      	mov	r0, r5
 800709c:	f000 f848 	bl	8007130 <__swbuf_r>
 80070a0:	3001      	adds	r0, #1
 80070a2:	d011      	beq.n	80070c8 <_puts_r+0x84>
 80070a4:	250a      	movs	r5, #10
 80070a6:	e011      	b.n	80070cc <_puts_r+0x88>
 80070a8:	4b1b      	ldr	r3, [pc, #108]	; (8007118 <_puts_r+0xd4>)
 80070aa:	429c      	cmp	r4, r3
 80070ac:	d101      	bne.n	80070b2 <_puts_r+0x6e>
 80070ae:	68ac      	ldr	r4, [r5, #8]
 80070b0:	e7da      	b.n	8007068 <_puts_r+0x24>
 80070b2:	4b1a      	ldr	r3, [pc, #104]	; (800711c <_puts_r+0xd8>)
 80070b4:	429c      	cmp	r4, r3
 80070b6:	bf08      	it	eq
 80070b8:	68ec      	ldreq	r4, [r5, #12]
 80070ba:	e7d5      	b.n	8007068 <_puts_r+0x24>
 80070bc:	4621      	mov	r1, r4
 80070be:	4628      	mov	r0, r5
 80070c0:	f000 f888 	bl	80071d4 <__swsetup_r>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d0dd      	beq.n	8007084 <_puts_r+0x40>
 80070c8:	f04f 35ff 	mov.w	r5, #4294967295
 80070cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070ce:	07da      	lsls	r2, r3, #31
 80070d0:	d405      	bmi.n	80070de <_puts_r+0x9a>
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	059b      	lsls	r3, r3, #22
 80070d6:	d402      	bmi.n	80070de <_puts_r+0x9a>
 80070d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070da:	f001 f8a1 	bl	8008220 <__retarget_lock_release_recursive>
 80070de:	4628      	mov	r0, r5
 80070e0:	bd70      	pop	{r4, r5, r6, pc}
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	da04      	bge.n	80070f0 <_puts_r+0xac>
 80070e6:	69a2      	ldr	r2, [r4, #24]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	dc06      	bgt.n	80070fa <_puts_r+0xb6>
 80070ec:	290a      	cmp	r1, #10
 80070ee:	d004      	beq.n	80070fa <_puts_r+0xb6>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	6022      	str	r2, [r4, #0]
 80070f6:	7019      	strb	r1, [r3, #0]
 80070f8:	e7c5      	b.n	8007086 <_puts_r+0x42>
 80070fa:	4622      	mov	r2, r4
 80070fc:	4628      	mov	r0, r5
 80070fe:	f000 f817 	bl	8007130 <__swbuf_r>
 8007102:	3001      	adds	r0, #1
 8007104:	d1bf      	bne.n	8007086 <_puts_r+0x42>
 8007106:	e7df      	b.n	80070c8 <_puts_r+0x84>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	250a      	movs	r5, #10
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	6022      	str	r2, [r4, #0]
 8007110:	701d      	strb	r5, [r3, #0]
 8007112:	e7db      	b.n	80070cc <_puts_r+0x88>
 8007114:	0800935c 	.word	0x0800935c
 8007118:	0800937c 	.word	0x0800937c
 800711c:	0800933c 	.word	0x0800933c

08007120 <puts>:
 8007120:	4b02      	ldr	r3, [pc, #8]	; (800712c <puts+0xc>)
 8007122:	4601      	mov	r1, r0
 8007124:	6818      	ldr	r0, [r3, #0]
 8007126:	f7ff bf8d 	b.w	8007044 <_puts_r>
 800712a:	bf00      	nop
 800712c:	24000020 	.word	0x24000020

08007130 <__swbuf_r>:
 8007130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007132:	460e      	mov	r6, r1
 8007134:	4614      	mov	r4, r2
 8007136:	4605      	mov	r5, r0
 8007138:	b118      	cbz	r0, 8007142 <__swbuf_r+0x12>
 800713a:	6983      	ldr	r3, [r0, #24]
 800713c:	b90b      	cbnz	r3, 8007142 <__swbuf_r+0x12>
 800713e:	f000 ffcb 	bl	80080d8 <__sinit>
 8007142:	4b21      	ldr	r3, [pc, #132]	; (80071c8 <__swbuf_r+0x98>)
 8007144:	429c      	cmp	r4, r3
 8007146:	d12b      	bne.n	80071a0 <__swbuf_r+0x70>
 8007148:	686c      	ldr	r4, [r5, #4]
 800714a:	69a3      	ldr	r3, [r4, #24]
 800714c:	60a3      	str	r3, [r4, #8]
 800714e:	89a3      	ldrh	r3, [r4, #12]
 8007150:	071a      	lsls	r2, r3, #28
 8007152:	d52f      	bpl.n	80071b4 <__swbuf_r+0x84>
 8007154:	6923      	ldr	r3, [r4, #16]
 8007156:	b36b      	cbz	r3, 80071b4 <__swbuf_r+0x84>
 8007158:	6923      	ldr	r3, [r4, #16]
 800715a:	6820      	ldr	r0, [r4, #0]
 800715c:	1ac0      	subs	r0, r0, r3
 800715e:	6963      	ldr	r3, [r4, #20]
 8007160:	b2f6      	uxtb	r6, r6
 8007162:	4283      	cmp	r3, r0
 8007164:	4637      	mov	r7, r6
 8007166:	dc04      	bgt.n	8007172 <__swbuf_r+0x42>
 8007168:	4621      	mov	r1, r4
 800716a:	4628      	mov	r0, r5
 800716c:	f000 ff20 	bl	8007fb0 <_fflush_r>
 8007170:	bb30      	cbnz	r0, 80071c0 <__swbuf_r+0x90>
 8007172:	68a3      	ldr	r3, [r4, #8]
 8007174:	3b01      	subs	r3, #1
 8007176:	60a3      	str	r3, [r4, #8]
 8007178:	6823      	ldr	r3, [r4, #0]
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	6022      	str	r2, [r4, #0]
 800717e:	701e      	strb	r6, [r3, #0]
 8007180:	6963      	ldr	r3, [r4, #20]
 8007182:	3001      	adds	r0, #1
 8007184:	4283      	cmp	r3, r0
 8007186:	d004      	beq.n	8007192 <__swbuf_r+0x62>
 8007188:	89a3      	ldrh	r3, [r4, #12]
 800718a:	07db      	lsls	r3, r3, #31
 800718c:	d506      	bpl.n	800719c <__swbuf_r+0x6c>
 800718e:	2e0a      	cmp	r6, #10
 8007190:	d104      	bne.n	800719c <__swbuf_r+0x6c>
 8007192:	4621      	mov	r1, r4
 8007194:	4628      	mov	r0, r5
 8007196:	f000 ff0b 	bl	8007fb0 <_fflush_r>
 800719a:	b988      	cbnz	r0, 80071c0 <__swbuf_r+0x90>
 800719c:	4638      	mov	r0, r7
 800719e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a0:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <__swbuf_r+0x9c>)
 80071a2:	429c      	cmp	r4, r3
 80071a4:	d101      	bne.n	80071aa <__swbuf_r+0x7a>
 80071a6:	68ac      	ldr	r4, [r5, #8]
 80071a8:	e7cf      	b.n	800714a <__swbuf_r+0x1a>
 80071aa:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <__swbuf_r+0xa0>)
 80071ac:	429c      	cmp	r4, r3
 80071ae:	bf08      	it	eq
 80071b0:	68ec      	ldreq	r4, [r5, #12]
 80071b2:	e7ca      	b.n	800714a <__swbuf_r+0x1a>
 80071b4:	4621      	mov	r1, r4
 80071b6:	4628      	mov	r0, r5
 80071b8:	f000 f80c 	bl	80071d4 <__swsetup_r>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d0cb      	beq.n	8007158 <__swbuf_r+0x28>
 80071c0:	f04f 37ff 	mov.w	r7, #4294967295
 80071c4:	e7ea      	b.n	800719c <__swbuf_r+0x6c>
 80071c6:	bf00      	nop
 80071c8:	0800935c 	.word	0x0800935c
 80071cc:	0800937c 	.word	0x0800937c
 80071d0:	0800933c 	.word	0x0800933c

080071d4 <__swsetup_r>:
 80071d4:	4b32      	ldr	r3, [pc, #200]	; (80072a0 <__swsetup_r+0xcc>)
 80071d6:	b570      	push	{r4, r5, r6, lr}
 80071d8:	681d      	ldr	r5, [r3, #0]
 80071da:	4606      	mov	r6, r0
 80071dc:	460c      	mov	r4, r1
 80071de:	b125      	cbz	r5, 80071ea <__swsetup_r+0x16>
 80071e0:	69ab      	ldr	r3, [r5, #24]
 80071e2:	b913      	cbnz	r3, 80071ea <__swsetup_r+0x16>
 80071e4:	4628      	mov	r0, r5
 80071e6:	f000 ff77 	bl	80080d8 <__sinit>
 80071ea:	4b2e      	ldr	r3, [pc, #184]	; (80072a4 <__swsetup_r+0xd0>)
 80071ec:	429c      	cmp	r4, r3
 80071ee:	d10f      	bne.n	8007210 <__swsetup_r+0x3c>
 80071f0:	686c      	ldr	r4, [r5, #4]
 80071f2:	89a3      	ldrh	r3, [r4, #12]
 80071f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071f8:	0719      	lsls	r1, r3, #28
 80071fa:	d42c      	bmi.n	8007256 <__swsetup_r+0x82>
 80071fc:	06dd      	lsls	r5, r3, #27
 80071fe:	d411      	bmi.n	8007224 <__swsetup_r+0x50>
 8007200:	2309      	movs	r3, #9
 8007202:	6033      	str	r3, [r6, #0]
 8007204:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007208:	81a3      	strh	r3, [r4, #12]
 800720a:	f04f 30ff 	mov.w	r0, #4294967295
 800720e:	e03e      	b.n	800728e <__swsetup_r+0xba>
 8007210:	4b25      	ldr	r3, [pc, #148]	; (80072a8 <__swsetup_r+0xd4>)
 8007212:	429c      	cmp	r4, r3
 8007214:	d101      	bne.n	800721a <__swsetup_r+0x46>
 8007216:	68ac      	ldr	r4, [r5, #8]
 8007218:	e7eb      	b.n	80071f2 <__swsetup_r+0x1e>
 800721a:	4b24      	ldr	r3, [pc, #144]	; (80072ac <__swsetup_r+0xd8>)
 800721c:	429c      	cmp	r4, r3
 800721e:	bf08      	it	eq
 8007220:	68ec      	ldreq	r4, [r5, #12]
 8007222:	e7e6      	b.n	80071f2 <__swsetup_r+0x1e>
 8007224:	0758      	lsls	r0, r3, #29
 8007226:	d512      	bpl.n	800724e <__swsetup_r+0x7a>
 8007228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800722a:	b141      	cbz	r1, 800723e <__swsetup_r+0x6a>
 800722c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007230:	4299      	cmp	r1, r3
 8007232:	d002      	beq.n	800723a <__swsetup_r+0x66>
 8007234:	4630      	mov	r0, r6
 8007236:	f001 fc09 	bl	8008a4c <_free_r>
 800723a:	2300      	movs	r3, #0
 800723c:	6363      	str	r3, [r4, #52]	; 0x34
 800723e:	89a3      	ldrh	r3, [r4, #12]
 8007240:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007244:	81a3      	strh	r3, [r4, #12]
 8007246:	2300      	movs	r3, #0
 8007248:	6063      	str	r3, [r4, #4]
 800724a:	6923      	ldr	r3, [r4, #16]
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	f043 0308 	orr.w	r3, r3, #8
 8007254:	81a3      	strh	r3, [r4, #12]
 8007256:	6923      	ldr	r3, [r4, #16]
 8007258:	b94b      	cbnz	r3, 800726e <__swsetup_r+0x9a>
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007264:	d003      	beq.n	800726e <__swsetup_r+0x9a>
 8007266:	4621      	mov	r1, r4
 8007268:	4630      	mov	r0, r6
 800726a:	f000 ffff 	bl	800826c <__smakebuf_r>
 800726e:	89a0      	ldrh	r0, [r4, #12]
 8007270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007274:	f010 0301 	ands.w	r3, r0, #1
 8007278:	d00a      	beq.n	8007290 <__swsetup_r+0xbc>
 800727a:	2300      	movs	r3, #0
 800727c:	60a3      	str	r3, [r4, #8]
 800727e:	6963      	ldr	r3, [r4, #20]
 8007280:	425b      	negs	r3, r3
 8007282:	61a3      	str	r3, [r4, #24]
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	b943      	cbnz	r3, 800729a <__swsetup_r+0xc6>
 8007288:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800728c:	d1ba      	bne.n	8007204 <__swsetup_r+0x30>
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	0781      	lsls	r1, r0, #30
 8007292:	bf58      	it	pl
 8007294:	6963      	ldrpl	r3, [r4, #20]
 8007296:	60a3      	str	r3, [r4, #8]
 8007298:	e7f4      	b.n	8007284 <__swsetup_r+0xb0>
 800729a:	2000      	movs	r0, #0
 800729c:	e7f7      	b.n	800728e <__swsetup_r+0xba>
 800729e:	bf00      	nop
 80072a0:	24000020 	.word	0x24000020
 80072a4:	0800935c 	.word	0x0800935c
 80072a8:	0800937c 	.word	0x0800937c
 80072ac:	0800933c 	.word	0x0800933c

080072b0 <quorem>:
 80072b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b4:	6903      	ldr	r3, [r0, #16]
 80072b6:	690c      	ldr	r4, [r1, #16]
 80072b8:	42a3      	cmp	r3, r4
 80072ba:	4607      	mov	r7, r0
 80072bc:	f2c0 8081 	blt.w	80073c2 <quorem+0x112>
 80072c0:	3c01      	subs	r4, #1
 80072c2:	f101 0814 	add.w	r8, r1, #20
 80072c6:	f100 0514 	add.w	r5, r0, #20
 80072ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072ce:	9301      	str	r3, [sp, #4]
 80072d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072d8:	3301      	adds	r3, #1
 80072da:	429a      	cmp	r2, r3
 80072dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80072e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80072e8:	d331      	bcc.n	800734e <quorem+0x9e>
 80072ea:	f04f 0e00 	mov.w	lr, #0
 80072ee:	4640      	mov	r0, r8
 80072f0:	46ac      	mov	ip, r5
 80072f2:	46f2      	mov	sl, lr
 80072f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80072f8:	b293      	uxth	r3, r2
 80072fa:	fb06 e303 	mla	r3, r6, r3, lr
 80072fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007302:	b29b      	uxth	r3, r3
 8007304:	ebaa 0303 	sub.w	r3, sl, r3
 8007308:	f8dc a000 	ldr.w	sl, [ip]
 800730c:	0c12      	lsrs	r2, r2, #16
 800730e:	fa13 f38a 	uxtah	r3, r3, sl
 8007312:	fb06 e202 	mla	r2, r6, r2, lr
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	9b00      	ldr	r3, [sp, #0]
 800731a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800731e:	b292      	uxth	r2, r2
 8007320:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007324:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007328:	f8bd 3000 	ldrh.w	r3, [sp]
 800732c:	4581      	cmp	r9, r0
 800732e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007332:	f84c 3b04 	str.w	r3, [ip], #4
 8007336:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800733a:	d2db      	bcs.n	80072f4 <quorem+0x44>
 800733c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007340:	b92b      	cbnz	r3, 800734e <quorem+0x9e>
 8007342:	9b01      	ldr	r3, [sp, #4]
 8007344:	3b04      	subs	r3, #4
 8007346:	429d      	cmp	r5, r3
 8007348:	461a      	mov	r2, r3
 800734a:	d32e      	bcc.n	80073aa <quorem+0xfa>
 800734c:	613c      	str	r4, [r7, #16]
 800734e:	4638      	mov	r0, r7
 8007350:	f001 fa64 	bl	800881c <__mcmp>
 8007354:	2800      	cmp	r0, #0
 8007356:	db24      	blt.n	80073a2 <quorem+0xf2>
 8007358:	3601      	adds	r6, #1
 800735a:	4628      	mov	r0, r5
 800735c:	f04f 0c00 	mov.w	ip, #0
 8007360:	f858 2b04 	ldr.w	r2, [r8], #4
 8007364:	f8d0 e000 	ldr.w	lr, [r0]
 8007368:	b293      	uxth	r3, r2
 800736a:	ebac 0303 	sub.w	r3, ip, r3
 800736e:	0c12      	lsrs	r2, r2, #16
 8007370:	fa13 f38e 	uxtah	r3, r3, lr
 8007374:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007378:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800737c:	b29b      	uxth	r3, r3
 800737e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007382:	45c1      	cmp	r9, r8
 8007384:	f840 3b04 	str.w	r3, [r0], #4
 8007388:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800738c:	d2e8      	bcs.n	8007360 <quorem+0xb0>
 800738e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007392:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007396:	b922      	cbnz	r2, 80073a2 <quorem+0xf2>
 8007398:	3b04      	subs	r3, #4
 800739a:	429d      	cmp	r5, r3
 800739c:	461a      	mov	r2, r3
 800739e:	d30a      	bcc.n	80073b6 <quorem+0x106>
 80073a0:	613c      	str	r4, [r7, #16]
 80073a2:	4630      	mov	r0, r6
 80073a4:	b003      	add	sp, #12
 80073a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	3b04      	subs	r3, #4
 80073ae:	2a00      	cmp	r2, #0
 80073b0:	d1cc      	bne.n	800734c <quorem+0x9c>
 80073b2:	3c01      	subs	r4, #1
 80073b4:	e7c7      	b.n	8007346 <quorem+0x96>
 80073b6:	6812      	ldr	r2, [r2, #0]
 80073b8:	3b04      	subs	r3, #4
 80073ba:	2a00      	cmp	r2, #0
 80073bc:	d1f0      	bne.n	80073a0 <quorem+0xf0>
 80073be:	3c01      	subs	r4, #1
 80073c0:	e7eb      	b.n	800739a <quorem+0xea>
 80073c2:	2000      	movs	r0, #0
 80073c4:	e7ee      	b.n	80073a4 <quorem+0xf4>
	...

080073c8 <_dtoa_r>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	ed2d 8b02 	vpush	{d8}
 80073d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80073d2:	b091      	sub	sp, #68	; 0x44
 80073d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80073d8:	ec59 8b10 	vmov	r8, r9, d0
 80073dc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80073de:	9106      	str	r1, [sp, #24]
 80073e0:	4606      	mov	r6, r0
 80073e2:	9208      	str	r2, [sp, #32]
 80073e4:	930c      	str	r3, [sp, #48]	; 0x30
 80073e6:	b975      	cbnz	r5, 8007406 <_dtoa_r+0x3e>
 80073e8:	2010      	movs	r0, #16
 80073ea:	f000 ff7f 	bl	80082ec <malloc>
 80073ee:	4602      	mov	r2, r0
 80073f0:	6270      	str	r0, [r6, #36]	; 0x24
 80073f2:	b920      	cbnz	r0, 80073fe <_dtoa_r+0x36>
 80073f4:	4baa      	ldr	r3, [pc, #680]	; (80076a0 <_dtoa_r+0x2d8>)
 80073f6:	21ea      	movs	r1, #234	; 0xea
 80073f8:	48aa      	ldr	r0, [pc, #680]	; (80076a4 <_dtoa_r+0x2dc>)
 80073fa:	f001 fdc7 	bl	8008f8c <__assert_func>
 80073fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007402:	6005      	str	r5, [r0, #0]
 8007404:	60c5      	str	r5, [r0, #12]
 8007406:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007408:	6819      	ldr	r1, [r3, #0]
 800740a:	b151      	cbz	r1, 8007422 <_dtoa_r+0x5a>
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	604a      	str	r2, [r1, #4]
 8007410:	2301      	movs	r3, #1
 8007412:	4093      	lsls	r3, r2
 8007414:	608b      	str	r3, [r1, #8]
 8007416:	4630      	mov	r0, r6
 8007418:	f000 ffbe 	bl	8008398 <_Bfree>
 800741c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800741e:	2200      	movs	r2, #0
 8007420:	601a      	str	r2, [r3, #0]
 8007422:	f1b9 0300 	subs.w	r3, r9, #0
 8007426:	bfbb      	ittet	lt
 8007428:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800742c:	9303      	strlt	r3, [sp, #12]
 800742e:	2300      	movge	r3, #0
 8007430:	2201      	movlt	r2, #1
 8007432:	bfac      	ite	ge
 8007434:	6023      	strge	r3, [r4, #0]
 8007436:	6022      	strlt	r2, [r4, #0]
 8007438:	4b9b      	ldr	r3, [pc, #620]	; (80076a8 <_dtoa_r+0x2e0>)
 800743a:	9c03      	ldr	r4, [sp, #12]
 800743c:	43a3      	bics	r3, r4
 800743e:	d11c      	bne.n	800747a <_dtoa_r+0xb2>
 8007440:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007442:	f242 730f 	movw	r3, #9999	; 0x270f
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800744c:	ea53 0308 	orrs.w	r3, r3, r8
 8007450:	f000 84fd 	beq.w	8007e4e <_dtoa_r+0xa86>
 8007454:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007456:	b963      	cbnz	r3, 8007472 <_dtoa_r+0xaa>
 8007458:	4b94      	ldr	r3, [pc, #592]	; (80076ac <_dtoa_r+0x2e4>)
 800745a:	e01f      	b.n	800749c <_dtoa_r+0xd4>
 800745c:	4b94      	ldr	r3, [pc, #592]	; (80076b0 <_dtoa_r+0x2e8>)
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	3308      	adds	r3, #8
 8007462:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007464:	6013      	str	r3, [r2, #0]
 8007466:	9801      	ldr	r0, [sp, #4]
 8007468:	b011      	add	sp, #68	; 0x44
 800746a:	ecbd 8b02 	vpop	{d8}
 800746e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007472:	4b8e      	ldr	r3, [pc, #568]	; (80076ac <_dtoa_r+0x2e4>)
 8007474:	9301      	str	r3, [sp, #4]
 8007476:	3303      	adds	r3, #3
 8007478:	e7f3      	b.n	8007462 <_dtoa_r+0x9a>
 800747a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800747e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007486:	d10b      	bne.n	80074a0 <_dtoa_r+0xd8>
 8007488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800748a:	2301      	movs	r3, #1
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 84d9 	beq.w	8007e48 <_dtoa_r+0xa80>
 8007496:	4887      	ldr	r0, [pc, #540]	; (80076b4 <_dtoa_r+0x2ec>)
 8007498:	6018      	str	r0, [r3, #0]
 800749a:	1e43      	subs	r3, r0, #1
 800749c:	9301      	str	r3, [sp, #4]
 800749e:	e7e2      	b.n	8007466 <_dtoa_r+0x9e>
 80074a0:	a90f      	add	r1, sp, #60	; 0x3c
 80074a2:	aa0e      	add	r2, sp, #56	; 0x38
 80074a4:	4630      	mov	r0, r6
 80074a6:	eeb0 0b48 	vmov.f64	d0, d8
 80074aa:	f001 fa5d 	bl	8008968 <__d2b>
 80074ae:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80074b2:	4605      	mov	r5, r0
 80074b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80074b6:	2900      	cmp	r1, #0
 80074b8:	d046      	beq.n	8007548 <_dtoa_r+0x180>
 80074ba:	ee18 4a90 	vmov	r4, s17
 80074be:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80074c2:	ec53 2b18 	vmov	r2, r3, d8
 80074c6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80074ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80074ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80074d2:	2400      	movs	r4, #0
 80074d4:	ec43 2b16 	vmov	d6, r2, r3
 80074d8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80074dc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007688 <_dtoa_r+0x2c0>
 80074e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80074e4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007690 <_dtoa_r+0x2c8>
 80074e8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80074ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007698 <_dtoa_r+0x2d0>
 80074f0:	ee07 1a90 	vmov	s15, r1
 80074f4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80074f8:	eeb0 7b46 	vmov.f64	d7, d6
 80074fc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007500:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007504:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800750c:	ee16 ba90 	vmov	fp, s13
 8007510:	940a      	str	r4, [sp, #40]	; 0x28
 8007512:	d508      	bpl.n	8007526 <_dtoa_r+0x15e>
 8007514:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007518:	eeb4 6b47 	vcmp.f64	d6, d7
 800751c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007520:	bf18      	it	ne
 8007522:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007526:	f1bb 0f16 	cmp.w	fp, #22
 800752a:	d82f      	bhi.n	800758c <_dtoa_r+0x1c4>
 800752c:	4b62      	ldr	r3, [pc, #392]	; (80076b8 <_dtoa_r+0x2f0>)
 800752e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007532:	ed93 7b00 	vldr	d7, [r3]
 8007536:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800753a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800753e:	d501      	bpl.n	8007544 <_dtoa_r+0x17c>
 8007540:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007544:	2300      	movs	r3, #0
 8007546:	e022      	b.n	800758e <_dtoa_r+0x1c6>
 8007548:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800754a:	4401      	add	r1, r0
 800754c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007550:	2b20      	cmp	r3, #32
 8007552:	bfc1      	itttt	gt
 8007554:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007558:	fa04 f303 	lslgt.w	r3, r4, r3
 800755c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007560:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007564:	bfd6      	itet	le
 8007566:	f1c3 0320 	rsble	r3, r3, #32
 800756a:	ea43 0808 	orrgt.w	r8, r3, r8
 800756e:	fa08 f803 	lslle.w	r8, r8, r3
 8007572:	ee07 8a90 	vmov	s15, r8
 8007576:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800757a:	3901      	subs	r1, #1
 800757c:	ee17 4a90 	vmov	r4, s15
 8007580:	ec53 2b17 	vmov	r2, r3, d7
 8007584:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007588:	2401      	movs	r4, #1
 800758a:	e7a3      	b.n	80074d4 <_dtoa_r+0x10c>
 800758c:	2301      	movs	r3, #1
 800758e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007590:	1a43      	subs	r3, r0, r1
 8007592:	1e5a      	subs	r2, r3, #1
 8007594:	bf45      	ittet	mi
 8007596:	f1c3 0301 	rsbmi	r3, r3, #1
 800759a:	9304      	strmi	r3, [sp, #16]
 800759c:	2300      	movpl	r3, #0
 800759e:	2300      	movmi	r3, #0
 80075a0:	9205      	str	r2, [sp, #20]
 80075a2:	bf54      	ite	pl
 80075a4:	9304      	strpl	r3, [sp, #16]
 80075a6:	9305      	strmi	r3, [sp, #20]
 80075a8:	f1bb 0f00 	cmp.w	fp, #0
 80075ac:	db18      	blt.n	80075e0 <_dtoa_r+0x218>
 80075ae:	9b05      	ldr	r3, [sp, #20]
 80075b0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80075b4:	445b      	add	r3, fp
 80075b6:	9305      	str	r3, [sp, #20]
 80075b8:	2300      	movs	r3, #0
 80075ba:	9a06      	ldr	r2, [sp, #24]
 80075bc:	2a09      	cmp	r2, #9
 80075be:	d849      	bhi.n	8007654 <_dtoa_r+0x28c>
 80075c0:	2a05      	cmp	r2, #5
 80075c2:	bfc4      	itt	gt
 80075c4:	3a04      	subgt	r2, #4
 80075c6:	9206      	strgt	r2, [sp, #24]
 80075c8:	9a06      	ldr	r2, [sp, #24]
 80075ca:	f1a2 0202 	sub.w	r2, r2, #2
 80075ce:	bfcc      	ite	gt
 80075d0:	2400      	movgt	r4, #0
 80075d2:	2401      	movle	r4, #1
 80075d4:	2a03      	cmp	r2, #3
 80075d6:	d848      	bhi.n	800766a <_dtoa_r+0x2a2>
 80075d8:	e8df f002 	tbb	[pc, r2]
 80075dc:	3a2c2e0b 	.word	0x3a2c2e0b
 80075e0:	9b04      	ldr	r3, [sp, #16]
 80075e2:	2200      	movs	r2, #0
 80075e4:	eba3 030b 	sub.w	r3, r3, fp
 80075e8:	9304      	str	r3, [sp, #16]
 80075ea:	9209      	str	r2, [sp, #36]	; 0x24
 80075ec:	f1cb 0300 	rsb	r3, fp, #0
 80075f0:	e7e3      	b.n	80075ba <_dtoa_r+0x1f2>
 80075f2:	2200      	movs	r2, #0
 80075f4:	9207      	str	r2, [sp, #28]
 80075f6:	9a08      	ldr	r2, [sp, #32]
 80075f8:	2a00      	cmp	r2, #0
 80075fa:	dc39      	bgt.n	8007670 <_dtoa_r+0x2a8>
 80075fc:	f04f 0a01 	mov.w	sl, #1
 8007600:	46d1      	mov	r9, sl
 8007602:	4652      	mov	r2, sl
 8007604:	f8cd a020 	str.w	sl, [sp, #32]
 8007608:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800760a:	2100      	movs	r1, #0
 800760c:	6079      	str	r1, [r7, #4]
 800760e:	2004      	movs	r0, #4
 8007610:	f100 0c14 	add.w	ip, r0, #20
 8007614:	4594      	cmp	ip, r2
 8007616:	6879      	ldr	r1, [r7, #4]
 8007618:	d92f      	bls.n	800767a <_dtoa_r+0x2b2>
 800761a:	4630      	mov	r0, r6
 800761c:	930d      	str	r3, [sp, #52]	; 0x34
 800761e:	f000 fe7b 	bl	8008318 <_Balloc>
 8007622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007624:	9001      	str	r0, [sp, #4]
 8007626:	4602      	mov	r2, r0
 8007628:	2800      	cmp	r0, #0
 800762a:	d149      	bne.n	80076c0 <_dtoa_r+0x2f8>
 800762c:	4b23      	ldr	r3, [pc, #140]	; (80076bc <_dtoa_r+0x2f4>)
 800762e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007632:	e6e1      	b.n	80073f8 <_dtoa_r+0x30>
 8007634:	2201      	movs	r2, #1
 8007636:	e7dd      	b.n	80075f4 <_dtoa_r+0x22c>
 8007638:	2200      	movs	r2, #0
 800763a:	9207      	str	r2, [sp, #28]
 800763c:	9a08      	ldr	r2, [sp, #32]
 800763e:	eb0b 0a02 	add.w	sl, fp, r2
 8007642:	f10a 0901 	add.w	r9, sl, #1
 8007646:	464a      	mov	r2, r9
 8007648:	2a01      	cmp	r2, #1
 800764a:	bfb8      	it	lt
 800764c:	2201      	movlt	r2, #1
 800764e:	e7db      	b.n	8007608 <_dtoa_r+0x240>
 8007650:	2201      	movs	r2, #1
 8007652:	e7f2      	b.n	800763a <_dtoa_r+0x272>
 8007654:	2401      	movs	r4, #1
 8007656:	2200      	movs	r2, #0
 8007658:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800765c:	f04f 3aff 	mov.w	sl, #4294967295
 8007660:	2100      	movs	r1, #0
 8007662:	46d1      	mov	r9, sl
 8007664:	2212      	movs	r2, #18
 8007666:	9108      	str	r1, [sp, #32]
 8007668:	e7ce      	b.n	8007608 <_dtoa_r+0x240>
 800766a:	2201      	movs	r2, #1
 800766c:	9207      	str	r2, [sp, #28]
 800766e:	e7f5      	b.n	800765c <_dtoa_r+0x294>
 8007670:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007674:	46d1      	mov	r9, sl
 8007676:	4652      	mov	r2, sl
 8007678:	e7c6      	b.n	8007608 <_dtoa_r+0x240>
 800767a:	3101      	adds	r1, #1
 800767c:	6079      	str	r1, [r7, #4]
 800767e:	0040      	lsls	r0, r0, #1
 8007680:	e7c6      	b.n	8007610 <_dtoa_r+0x248>
 8007682:	bf00      	nop
 8007684:	f3af 8000 	nop.w
 8007688:	636f4361 	.word	0x636f4361
 800768c:	3fd287a7 	.word	0x3fd287a7
 8007690:	8b60c8b3 	.word	0x8b60c8b3
 8007694:	3fc68a28 	.word	0x3fc68a28
 8007698:	509f79fb 	.word	0x509f79fb
 800769c:	3fd34413 	.word	0x3fd34413
 80076a0:	080092b9 	.word	0x080092b9
 80076a4:	080092d0 	.word	0x080092d0
 80076a8:	7ff00000 	.word	0x7ff00000
 80076ac:	080092b5 	.word	0x080092b5
 80076b0:	080092ac 	.word	0x080092ac
 80076b4:	08009289 	.word	0x08009289
 80076b8:	08009420 	.word	0x08009420
 80076bc:	0800932b 	.word	0x0800932b
 80076c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80076c2:	9901      	ldr	r1, [sp, #4]
 80076c4:	6011      	str	r1, [r2, #0]
 80076c6:	f1b9 0f0e 	cmp.w	r9, #14
 80076ca:	d86c      	bhi.n	80077a6 <_dtoa_r+0x3de>
 80076cc:	2c00      	cmp	r4, #0
 80076ce:	d06a      	beq.n	80077a6 <_dtoa_r+0x3de>
 80076d0:	f1bb 0f00 	cmp.w	fp, #0
 80076d4:	f340 80a0 	ble.w	8007818 <_dtoa_r+0x450>
 80076d8:	49c1      	ldr	r1, [pc, #772]	; (80079e0 <_dtoa_r+0x618>)
 80076da:	f00b 020f 	and.w	r2, fp, #15
 80076de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80076e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80076e6:	ed92 7b00 	vldr	d7, [r2]
 80076ea:	ea4f 112b 	mov.w	r1, fp, asr #4
 80076ee:	f000 8087 	beq.w	8007800 <_dtoa_r+0x438>
 80076f2:	4abc      	ldr	r2, [pc, #752]	; (80079e4 <_dtoa_r+0x61c>)
 80076f4:	ed92 6b08 	vldr	d6, [r2, #32]
 80076f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80076fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007700:	f001 010f 	and.w	r1, r1, #15
 8007704:	2203      	movs	r2, #3
 8007706:	48b7      	ldr	r0, [pc, #732]	; (80079e4 <_dtoa_r+0x61c>)
 8007708:	2900      	cmp	r1, #0
 800770a:	d17b      	bne.n	8007804 <_dtoa_r+0x43c>
 800770c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007710:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007714:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007718:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800771a:	2900      	cmp	r1, #0
 800771c:	f000 80a2 	beq.w	8007864 <_dtoa_r+0x49c>
 8007720:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007724:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007728:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800772c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007730:	f140 8098 	bpl.w	8007864 <_dtoa_r+0x49c>
 8007734:	f1b9 0f00 	cmp.w	r9, #0
 8007738:	f000 8094 	beq.w	8007864 <_dtoa_r+0x49c>
 800773c:	f1ba 0f00 	cmp.w	sl, #0
 8007740:	dd2f      	ble.n	80077a2 <_dtoa_r+0x3da>
 8007742:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007746:	ee27 7b06 	vmul.f64	d7, d7, d6
 800774a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800774e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007752:	3201      	adds	r2, #1
 8007754:	4650      	mov	r0, sl
 8007756:	ed9d 6b02 	vldr	d6, [sp, #8]
 800775a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800775e:	ee07 2a90 	vmov	s15, r2
 8007762:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007766:	eea7 5b06 	vfma.f64	d5, d7, d6
 800776a:	ee15 4a90 	vmov	r4, s11
 800776e:	ec52 1b15 	vmov	r1, r2, d5
 8007772:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8007776:	2800      	cmp	r0, #0
 8007778:	d177      	bne.n	800786a <_dtoa_r+0x4a2>
 800777a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800777e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007782:	ec42 1b17 	vmov	d7, r1, r2
 8007786:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800778a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800778e:	f300 8263 	bgt.w	8007c58 <_dtoa_r+0x890>
 8007792:	eeb1 7b47 	vneg.f64	d7, d7
 8007796:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800779a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800779e:	f100 8258 	bmi.w	8007c52 <_dtoa_r+0x88a>
 80077a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80077a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077a8:	2a00      	cmp	r2, #0
 80077aa:	f2c0 811d 	blt.w	80079e8 <_dtoa_r+0x620>
 80077ae:	f1bb 0f0e 	cmp.w	fp, #14
 80077b2:	f300 8119 	bgt.w	80079e8 <_dtoa_r+0x620>
 80077b6:	4b8a      	ldr	r3, [pc, #552]	; (80079e0 <_dtoa_r+0x618>)
 80077b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80077bc:	ed93 6b00 	vldr	d6, [r3]
 80077c0:	9b08      	ldr	r3, [sp, #32]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f280 80b7 	bge.w	8007936 <_dtoa_r+0x56e>
 80077c8:	f1b9 0f00 	cmp.w	r9, #0
 80077cc:	f300 80b3 	bgt.w	8007936 <_dtoa_r+0x56e>
 80077d0:	f040 823f 	bne.w	8007c52 <_dtoa_r+0x88a>
 80077d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80077d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80077dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80077e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e8:	464c      	mov	r4, r9
 80077ea:	464f      	mov	r7, r9
 80077ec:	f280 8215 	bge.w	8007c1a <_dtoa_r+0x852>
 80077f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80077f4:	2331      	movs	r3, #49	; 0x31
 80077f6:	f808 3b01 	strb.w	r3, [r8], #1
 80077fa:	f10b 0b01 	add.w	fp, fp, #1
 80077fe:	e211      	b.n	8007c24 <_dtoa_r+0x85c>
 8007800:	2202      	movs	r2, #2
 8007802:	e780      	b.n	8007706 <_dtoa_r+0x33e>
 8007804:	07cc      	lsls	r4, r1, #31
 8007806:	d504      	bpl.n	8007812 <_dtoa_r+0x44a>
 8007808:	ed90 6b00 	vldr	d6, [r0]
 800780c:	3201      	adds	r2, #1
 800780e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007812:	1049      	asrs	r1, r1, #1
 8007814:	3008      	adds	r0, #8
 8007816:	e777      	b.n	8007708 <_dtoa_r+0x340>
 8007818:	d022      	beq.n	8007860 <_dtoa_r+0x498>
 800781a:	f1cb 0100 	rsb	r1, fp, #0
 800781e:	4a70      	ldr	r2, [pc, #448]	; (80079e0 <_dtoa_r+0x618>)
 8007820:	f001 000f 	and.w	r0, r1, #15
 8007824:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007828:	ed92 7b00 	vldr	d7, [r2]
 800782c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007830:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007834:	486b      	ldr	r0, [pc, #428]	; (80079e4 <_dtoa_r+0x61c>)
 8007836:	1109      	asrs	r1, r1, #4
 8007838:	2400      	movs	r4, #0
 800783a:	2202      	movs	r2, #2
 800783c:	b929      	cbnz	r1, 800784a <_dtoa_r+0x482>
 800783e:	2c00      	cmp	r4, #0
 8007840:	f43f af6a 	beq.w	8007718 <_dtoa_r+0x350>
 8007844:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007848:	e766      	b.n	8007718 <_dtoa_r+0x350>
 800784a:	07cf      	lsls	r7, r1, #31
 800784c:	d505      	bpl.n	800785a <_dtoa_r+0x492>
 800784e:	ed90 6b00 	vldr	d6, [r0]
 8007852:	3201      	adds	r2, #1
 8007854:	2401      	movs	r4, #1
 8007856:	ee27 7b06 	vmul.f64	d7, d7, d6
 800785a:	1049      	asrs	r1, r1, #1
 800785c:	3008      	adds	r0, #8
 800785e:	e7ed      	b.n	800783c <_dtoa_r+0x474>
 8007860:	2202      	movs	r2, #2
 8007862:	e759      	b.n	8007718 <_dtoa_r+0x350>
 8007864:	465f      	mov	r7, fp
 8007866:	4648      	mov	r0, r9
 8007868:	e775      	b.n	8007756 <_dtoa_r+0x38e>
 800786a:	ec42 1b17 	vmov	d7, r1, r2
 800786e:	4a5c      	ldr	r2, [pc, #368]	; (80079e0 <_dtoa_r+0x618>)
 8007870:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007874:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007878:	9a01      	ldr	r2, [sp, #4]
 800787a:	1814      	adds	r4, r2, r0
 800787c:	9a07      	ldr	r2, [sp, #28]
 800787e:	b352      	cbz	r2, 80078d6 <_dtoa_r+0x50e>
 8007880:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007884:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007888:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800788c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007890:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007894:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007898:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800789c:	ee14 2a90 	vmov	r2, s9
 80078a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80078a4:	3230      	adds	r2, #48	; 0x30
 80078a6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80078aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80078ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b2:	f808 2b01 	strb.w	r2, [r8], #1
 80078b6:	d439      	bmi.n	800792c <_dtoa_r+0x564>
 80078b8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80078bc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80078c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078c4:	d472      	bmi.n	80079ac <_dtoa_r+0x5e4>
 80078c6:	45a0      	cmp	r8, r4
 80078c8:	f43f af6b 	beq.w	80077a2 <_dtoa_r+0x3da>
 80078cc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80078d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80078d4:	e7e0      	b.n	8007898 <_dtoa_r+0x4d0>
 80078d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80078da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80078de:	4621      	mov	r1, r4
 80078e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80078e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80078e8:	ee14 2a90 	vmov	r2, s9
 80078ec:	3230      	adds	r2, #48	; 0x30
 80078ee:	f808 2b01 	strb.w	r2, [r8], #1
 80078f2:	45a0      	cmp	r8, r4
 80078f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80078f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80078fc:	d118      	bne.n	8007930 <_dtoa_r+0x568>
 80078fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007902:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007906:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800790a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800790e:	dc4d      	bgt.n	80079ac <_dtoa_r+0x5e4>
 8007910:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007914:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791c:	f57f af41 	bpl.w	80077a2 <_dtoa_r+0x3da>
 8007920:	4688      	mov	r8, r1
 8007922:	3901      	subs	r1, #1
 8007924:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007928:	2b30      	cmp	r3, #48	; 0x30
 800792a:	d0f9      	beq.n	8007920 <_dtoa_r+0x558>
 800792c:	46bb      	mov	fp, r7
 800792e:	e02a      	b.n	8007986 <_dtoa_r+0x5be>
 8007930:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007934:	e7d6      	b.n	80078e4 <_dtoa_r+0x51c>
 8007936:	ed9d 7b02 	vldr	d7, [sp, #8]
 800793a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800793e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007942:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007946:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800794a:	ee15 3a10 	vmov	r3, s10
 800794e:	3330      	adds	r3, #48	; 0x30
 8007950:	f808 3b01 	strb.w	r3, [r8], #1
 8007954:	9b01      	ldr	r3, [sp, #4]
 8007956:	eba8 0303 	sub.w	r3, r8, r3
 800795a:	4599      	cmp	r9, r3
 800795c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007960:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007964:	d133      	bne.n	80079ce <_dtoa_r+0x606>
 8007966:	ee37 7b07 	vadd.f64	d7, d7, d7
 800796a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800796e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007972:	dc1a      	bgt.n	80079aa <_dtoa_r+0x5e2>
 8007974:	eeb4 7b46 	vcmp.f64	d7, d6
 8007978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800797c:	d103      	bne.n	8007986 <_dtoa_r+0x5be>
 800797e:	ee15 3a10 	vmov	r3, s10
 8007982:	07d9      	lsls	r1, r3, #31
 8007984:	d411      	bmi.n	80079aa <_dtoa_r+0x5e2>
 8007986:	4629      	mov	r1, r5
 8007988:	4630      	mov	r0, r6
 800798a:	f000 fd05 	bl	8008398 <_Bfree>
 800798e:	2300      	movs	r3, #0
 8007990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007992:	f888 3000 	strb.w	r3, [r8]
 8007996:	f10b 0301 	add.w	r3, fp, #1
 800799a:	6013      	str	r3, [r2, #0]
 800799c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f43f ad61 	beq.w	8007466 <_dtoa_r+0x9e>
 80079a4:	f8c3 8000 	str.w	r8, [r3]
 80079a8:	e55d      	b.n	8007466 <_dtoa_r+0x9e>
 80079aa:	465f      	mov	r7, fp
 80079ac:	4643      	mov	r3, r8
 80079ae:	4698      	mov	r8, r3
 80079b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079b4:	2a39      	cmp	r2, #57	; 0x39
 80079b6:	d106      	bne.n	80079c6 <_dtoa_r+0x5fe>
 80079b8:	9a01      	ldr	r2, [sp, #4]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d1f7      	bne.n	80079ae <_dtoa_r+0x5e6>
 80079be:	9901      	ldr	r1, [sp, #4]
 80079c0:	2230      	movs	r2, #48	; 0x30
 80079c2:	3701      	adds	r7, #1
 80079c4:	700a      	strb	r2, [r1, #0]
 80079c6:	781a      	ldrb	r2, [r3, #0]
 80079c8:	3201      	adds	r2, #1
 80079ca:	701a      	strb	r2, [r3, #0]
 80079cc:	e7ae      	b.n	800792c <_dtoa_r+0x564>
 80079ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 80079d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80079d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079da:	d1b2      	bne.n	8007942 <_dtoa_r+0x57a>
 80079dc:	e7d3      	b.n	8007986 <_dtoa_r+0x5be>
 80079de:	bf00      	nop
 80079e0:	08009420 	.word	0x08009420
 80079e4:	080093f8 	.word	0x080093f8
 80079e8:	9907      	ldr	r1, [sp, #28]
 80079ea:	2900      	cmp	r1, #0
 80079ec:	f000 80d0 	beq.w	8007b90 <_dtoa_r+0x7c8>
 80079f0:	9906      	ldr	r1, [sp, #24]
 80079f2:	2901      	cmp	r1, #1
 80079f4:	f300 80b4 	bgt.w	8007b60 <_dtoa_r+0x798>
 80079f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80079fa:	2900      	cmp	r1, #0
 80079fc:	f000 80ac 	beq.w	8007b58 <_dtoa_r+0x790>
 8007a00:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007a04:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007a08:	461c      	mov	r4, r3
 8007a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a0c:	9b04      	ldr	r3, [sp, #16]
 8007a0e:	4413      	add	r3, r2
 8007a10:	9304      	str	r3, [sp, #16]
 8007a12:	9b05      	ldr	r3, [sp, #20]
 8007a14:	2101      	movs	r1, #1
 8007a16:	4413      	add	r3, r2
 8007a18:	4630      	mov	r0, r6
 8007a1a:	9305      	str	r3, [sp, #20]
 8007a1c:	f000 fd74 	bl	8008508 <__i2b>
 8007a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a22:	4607      	mov	r7, r0
 8007a24:	f1b8 0f00 	cmp.w	r8, #0
 8007a28:	dd0d      	ble.n	8007a46 <_dtoa_r+0x67e>
 8007a2a:	9a05      	ldr	r2, [sp, #20]
 8007a2c:	2a00      	cmp	r2, #0
 8007a2e:	dd0a      	ble.n	8007a46 <_dtoa_r+0x67e>
 8007a30:	4542      	cmp	r2, r8
 8007a32:	9904      	ldr	r1, [sp, #16]
 8007a34:	bfa8      	it	ge
 8007a36:	4642      	movge	r2, r8
 8007a38:	1a89      	subs	r1, r1, r2
 8007a3a:	9104      	str	r1, [sp, #16]
 8007a3c:	9905      	ldr	r1, [sp, #20]
 8007a3e:	eba8 0802 	sub.w	r8, r8, r2
 8007a42:	1a8a      	subs	r2, r1, r2
 8007a44:	9205      	str	r2, [sp, #20]
 8007a46:	b303      	cbz	r3, 8007a8a <_dtoa_r+0x6c2>
 8007a48:	9a07      	ldr	r2, [sp, #28]
 8007a4a:	2a00      	cmp	r2, #0
 8007a4c:	f000 80a5 	beq.w	8007b9a <_dtoa_r+0x7d2>
 8007a50:	2c00      	cmp	r4, #0
 8007a52:	dd13      	ble.n	8007a7c <_dtoa_r+0x6b4>
 8007a54:	4639      	mov	r1, r7
 8007a56:	4622      	mov	r2, r4
 8007a58:	4630      	mov	r0, r6
 8007a5a:	930d      	str	r3, [sp, #52]	; 0x34
 8007a5c:	f000 fe14 	bl	8008688 <__pow5mult>
 8007a60:	462a      	mov	r2, r5
 8007a62:	4601      	mov	r1, r0
 8007a64:	4607      	mov	r7, r0
 8007a66:	4630      	mov	r0, r6
 8007a68:	f000 fd64 	bl	8008534 <__multiply>
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	900a      	str	r0, [sp, #40]	; 0x28
 8007a70:	4630      	mov	r0, r6
 8007a72:	f000 fc91 	bl	8008398 <_Bfree>
 8007a76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a7a:	4615      	mov	r5, r2
 8007a7c:	1b1a      	subs	r2, r3, r4
 8007a7e:	d004      	beq.n	8007a8a <_dtoa_r+0x6c2>
 8007a80:	4629      	mov	r1, r5
 8007a82:	4630      	mov	r0, r6
 8007a84:	f000 fe00 	bl	8008688 <__pow5mult>
 8007a88:	4605      	mov	r5, r0
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	f000 fd3b 	bl	8008508 <__i2b>
 8007a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	4604      	mov	r4, r0
 8007a98:	f340 8081 	ble.w	8007b9e <_dtoa_r+0x7d6>
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	4601      	mov	r1, r0
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f000 fdf1 	bl	8008688 <__pow5mult>
 8007aa6:	9b06      	ldr	r3, [sp, #24]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	4604      	mov	r4, r0
 8007aac:	dd7a      	ble.n	8007ba4 <_dtoa_r+0x7dc>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ab2:	6922      	ldr	r2, [r4, #16]
 8007ab4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007ab8:	6910      	ldr	r0, [r2, #16]
 8007aba:	f000 fcd5 	bl	8008468 <__hi0bits>
 8007abe:	f1c0 0020 	rsb	r0, r0, #32
 8007ac2:	9b05      	ldr	r3, [sp, #20]
 8007ac4:	4418      	add	r0, r3
 8007ac6:	f010 001f 	ands.w	r0, r0, #31
 8007aca:	f000 808c 	beq.w	8007be6 <_dtoa_r+0x81e>
 8007ace:	f1c0 0220 	rsb	r2, r0, #32
 8007ad2:	2a04      	cmp	r2, #4
 8007ad4:	f340 8085 	ble.w	8007be2 <_dtoa_r+0x81a>
 8007ad8:	f1c0 001c 	rsb	r0, r0, #28
 8007adc:	9b04      	ldr	r3, [sp, #16]
 8007ade:	4403      	add	r3, r0
 8007ae0:	9304      	str	r3, [sp, #16]
 8007ae2:	9b05      	ldr	r3, [sp, #20]
 8007ae4:	4403      	add	r3, r0
 8007ae6:	4480      	add	r8, r0
 8007ae8:	9305      	str	r3, [sp, #20]
 8007aea:	9b04      	ldr	r3, [sp, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	dd05      	ble.n	8007afc <_dtoa_r+0x734>
 8007af0:	4629      	mov	r1, r5
 8007af2:	461a      	mov	r2, r3
 8007af4:	4630      	mov	r0, r6
 8007af6:	f000 fe21 	bl	800873c <__lshift>
 8007afa:	4605      	mov	r5, r0
 8007afc:	9b05      	ldr	r3, [sp, #20]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	dd05      	ble.n	8007b0e <_dtoa_r+0x746>
 8007b02:	4621      	mov	r1, r4
 8007b04:	461a      	mov	r2, r3
 8007b06:	4630      	mov	r0, r6
 8007b08:	f000 fe18 	bl	800873c <__lshift>
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d06a      	beq.n	8007bea <_dtoa_r+0x822>
 8007b14:	4621      	mov	r1, r4
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 fe80 	bl	800881c <__mcmp>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	da64      	bge.n	8007bea <_dtoa_r+0x822>
 8007b20:	2300      	movs	r3, #0
 8007b22:	4629      	mov	r1, r5
 8007b24:	220a      	movs	r2, #10
 8007b26:	4630      	mov	r0, r6
 8007b28:	f000 fc58 	bl	80083dc <__multadd>
 8007b2c:	9b07      	ldr	r3, [sp, #28]
 8007b2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b32:	4605      	mov	r5, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 8191 	beq.w	8007e5c <_dtoa_r+0xa94>
 8007b3a:	4639      	mov	r1, r7
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	220a      	movs	r2, #10
 8007b40:	4630      	mov	r0, r6
 8007b42:	f000 fc4b 	bl	80083dc <__multadd>
 8007b46:	f1ba 0f00 	cmp.w	sl, #0
 8007b4a:	4607      	mov	r7, r0
 8007b4c:	f300 808d 	bgt.w	8007c6a <_dtoa_r+0x8a2>
 8007b50:	9b06      	ldr	r3, [sp, #24]
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	dc50      	bgt.n	8007bf8 <_dtoa_r+0x830>
 8007b56:	e088      	b.n	8007c6a <_dtoa_r+0x8a2>
 8007b58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b5e:	e751      	b.n	8007a04 <_dtoa_r+0x63c>
 8007b60:	f109 34ff 	add.w	r4, r9, #4294967295
 8007b64:	42a3      	cmp	r3, r4
 8007b66:	bfbf      	itttt	lt
 8007b68:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007b6a:	1ae3      	sublt	r3, r4, r3
 8007b6c:	18d2      	addlt	r2, r2, r3
 8007b6e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007b70:	bfb6      	itet	lt
 8007b72:	4623      	movlt	r3, r4
 8007b74:	1b1c      	subge	r4, r3, r4
 8007b76:	2400      	movlt	r4, #0
 8007b78:	f1b9 0f00 	cmp.w	r9, #0
 8007b7c:	bfb5      	itete	lt
 8007b7e:	9a04      	ldrlt	r2, [sp, #16]
 8007b80:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007b84:	eba2 0809 	sublt.w	r8, r2, r9
 8007b88:	464a      	movge	r2, r9
 8007b8a:	bfb8      	it	lt
 8007b8c:	2200      	movlt	r2, #0
 8007b8e:	e73c      	b.n	8007a0a <_dtoa_r+0x642>
 8007b90:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007b94:	9f07      	ldr	r7, [sp, #28]
 8007b96:	461c      	mov	r4, r3
 8007b98:	e744      	b.n	8007a24 <_dtoa_r+0x65c>
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	e770      	b.n	8007a80 <_dtoa_r+0x6b8>
 8007b9e:	9b06      	ldr	r3, [sp, #24]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	dc18      	bgt.n	8007bd6 <_dtoa_r+0x80e>
 8007ba4:	9b02      	ldr	r3, [sp, #8]
 8007ba6:	b9b3      	cbnz	r3, 8007bd6 <_dtoa_r+0x80e>
 8007ba8:	9b03      	ldr	r3, [sp, #12]
 8007baa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007bae:	b9a2      	cbnz	r2, 8007bda <_dtoa_r+0x812>
 8007bb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007bb4:	0d12      	lsrs	r2, r2, #20
 8007bb6:	0512      	lsls	r2, r2, #20
 8007bb8:	b18a      	cbz	r2, 8007bde <_dtoa_r+0x816>
 8007bba:	9b04      	ldr	r3, [sp, #16]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	9304      	str	r3, [sp, #16]
 8007bc0:	9b05      	ldr	r3, [sp, #20]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	9305      	str	r3, [sp, #20]
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	930a      	str	r3, [sp, #40]	; 0x28
 8007bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f47f af70 	bne.w	8007ab2 <_dtoa_r+0x6ea>
 8007bd2:	2001      	movs	r0, #1
 8007bd4:	e775      	b.n	8007ac2 <_dtoa_r+0x6fa>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	e7f6      	b.n	8007bc8 <_dtoa_r+0x800>
 8007bda:	9b02      	ldr	r3, [sp, #8]
 8007bdc:	e7f4      	b.n	8007bc8 <_dtoa_r+0x800>
 8007bde:	920a      	str	r2, [sp, #40]	; 0x28
 8007be0:	e7f3      	b.n	8007bca <_dtoa_r+0x802>
 8007be2:	d082      	beq.n	8007aea <_dtoa_r+0x722>
 8007be4:	4610      	mov	r0, r2
 8007be6:	301c      	adds	r0, #28
 8007be8:	e778      	b.n	8007adc <_dtoa_r+0x714>
 8007bea:	f1b9 0f00 	cmp.w	r9, #0
 8007bee:	dc37      	bgt.n	8007c60 <_dtoa_r+0x898>
 8007bf0:	9b06      	ldr	r3, [sp, #24]
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	dd34      	ble.n	8007c60 <_dtoa_r+0x898>
 8007bf6:	46ca      	mov	sl, r9
 8007bf8:	f1ba 0f00 	cmp.w	sl, #0
 8007bfc:	d10d      	bne.n	8007c1a <_dtoa_r+0x852>
 8007bfe:	4621      	mov	r1, r4
 8007c00:	4653      	mov	r3, sl
 8007c02:	2205      	movs	r2, #5
 8007c04:	4630      	mov	r0, r6
 8007c06:	f000 fbe9 	bl	80083dc <__multadd>
 8007c0a:	4601      	mov	r1, r0
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f000 fe04 	bl	800881c <__mcmp>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	f73f adeb 	bgt.w	80077f0 <_dtoa_r+0x428>
 8007c1a:	9b08      	ldr	r3, [sp, #32]
 8007c1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007c20:	ea6f 0b03 	mvn.w	fp, r3
 8007c24:	f04f 0900 	mov.w	r9, #0
 8007c28:	4621      	mov	r1, r4
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	f000 fbb4 	bl	8008398 <_Bfree>
 8007c30:	2f00      	cmp	r7, #0
 8007c32:	f43f aea8 	beq.w	8007986 <_dtoa_r+0x5be>
 8007c36:	f1b9 0f00 	cmp.w	r9, #0
 8007c3a:	d005      	beq.n	8007c48 <_dtoa_r+0x880>
 8007c3c:	45b9      	cmp	r9, r7
 8007c3e:	d003      	beq.n	8007c48 <_dtoa_r+0x880>
 8007c40:	4649      	mov	r1, r9
 8007c42:	4630      	mov	r0, r6
 8007c44:	f000 fba8 	bl	8008398 <_Bfree>
 8007c48:	4639      	mov	r1, r7
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f000 fba4 	bl	8008398 <_Bfree>
 8007c50:	e699      	b.n	8007986 <_dtoa_r+0x5be>
 8007c52:	2400      	movs	r4, #0
 8007c54:	4627      	mov	r7, r4
 8007c56:	e7e0      	b.n	8007c1a <_dtoa_r+0x852>
 8007c58:	46bb      	mov	fp, r7
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	e5c7      	b.n	80077f0 <_dtoa_r+0x428>
 8007c60:	9b07      	ldr	r3, [sp, #28]
 8007c62:	46ca      	mov	sl, r9
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 8100 	beq.w	8007e6a <_dtoa_r+0xaa2>
 8007c6a:	f1b8 0f00 	cmp.w	r8, #0
 8007c6e:	dd05      	ble.n	8007c7c <_dtoa_r+0x8b4>
 8007c70:	4639      	mov	r1, r7
 8007c72:	4642      	mov	r2, r8
 8007c74:	4630      	mov	r0, r6
 8007c76:	f000 fd61 	bl	800873c <__lshift>
 8007c7a:	4607      	mov	r7, r0
 8007c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d05d      	beq.n	8007d3e <_dtoa_r+0x976>
 8007c82:	6879      	ldr	r1, [r7, #4]
 8007c84:	4630      	mov	r0, r6
 8007c86:	f000 fb47 	bl	8008318 <_Balloc>
 8007c8a:	4680      	mov	r8, r0
 8007c8c:	b928      	cbnz	r0, 8007c9a <_dtoa_r+0x8d2>
 8007c8e:	4b82      	ldr	r3, [pc, #520]	; (8007e98 <_dtoa_r+0xad0>)
 8007c90:	4602      	mov	r2, r0
 8007c92:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007c96:	f7ff bbaf 	b.w	80073f8 <_dtoa_r+0x30>
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	3202      	adds	r2, #2
 8007c9e:	0092      	lsls	r2, r2, #2
 8007ca0:	f107 010c 	add.w	r1, r7, #12
 8007ca4:	300c      	adds	r0, #12
 8007ca6:	f000 fb29 	bl	80082fc <memcpy>
 8007caa:	2201      	movs	r2, #1
 8007cac:	4641      	mov	r1, r8
 8007cae:	4630      	mov	r0, r6
 8007cb0:	f000 fd44 	bl	800873c <__lshift>
 8007cb4:	9b01      	ldr	r3, [sp, #4]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	9304      	str	r3, [sp, #16]
 8007cba:	9b01      	ldr	r3, [sp, #4]
 8007cbc:	4453      	add	r3, sl
 8007cbe:	9308      	str	r3, [sp, #32]
 8007cc0:	9b02      	ldr	r3, [sp, #8]
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	46b9      	mov	r9, r7
 8007cc8:	9307      	str	r3, [sp, #28]
 8007cca:	4607      	mov	r7, r0
 8007ccc:	9b04      	ldr	r3, [sp, #16]
 8007cce:	4621      	mov	r1, r4
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	9302      	str	r3, [sp, #8]
 8007cd6:	f7ff faeb 	bl	80072b0 <quorem>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	3330      	adds	r3, #48	; 0x30
 8007cde:	9005      	str	r0, [sp, #20]
 8007ce0:	4649      	mov	r1, r9
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce6:	f000 fd99 	bl	800881c <__mcmp>
 8007cea:	463a      	mov	r2, r7
 8007cec:	4682      	mov	sl, r0
 8007cee:	4621      	mov	r1, r4
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f000 fdaf 	bl	8008854 <__mdiff>
 8007cf6:	68c2      	ldr	r2, [r0, #12]
 8007cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cfa:	4680      	mov	r8, r0
 8007cfc:	bb0a      	cbnz	r2, 8007d42 <_dtoa_r+0x97a>
 8007cfe:	4601      	mov	r1, r0
 8007d00:	4628      	mov	r0, r5
 8007d02:	f000 fd8b 	bl	800881c <__mcmp>
 8007d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d08:	4602      	mov	r2, r0
 8007d0a:	4641      	mov	r1, r8
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007d12:	f000 fb41 	bl	8008398 <_Bfree>
 8007d16:	9b06      	ldr	r3, [sp, #24]
 8007d18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d1a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007d1e:	ea43 0102 	orr.w	r1, r3, r2
 8007d22:	9b07      	ldr	r3, [sp, #28]
 8007d24:	430b      	orrs	r3, r1
 8007d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d28:	d10d      	bne.n	8007d46 <_dtoa_r+0x97e>
 8007d2a:	2b39      	cmp	r3, #57	; 0x39
 8007d2c:	d029      	beq.n	8007d82 <_dtoa_r+0x9ba>
 8007d2e:	f1ba 0f00 	cmp.w	sl, #0
 8007d32:	dd01      	ble.n	8007d38 <_dtoa_r+0x970>
 8007d34:	9b05      	ldr	r3, [sp, #20]
 8007d36:	3331      	adds	r3, #49	; 0x31
 8007d38:	9a02      	ldr	r2, [sp, #8]
 8007d3a:	7013      	strb	r3, [r2, #0]
 8007d3c:	e774      	b.n	8007c28 <_dtoa_r+0x860>
 8007d3e:	4638      	mov	r0, r7
 8007d40:	e7b8      	b.n	8007cb4 <_dtoa_r+0x8ec>
 8007d42:	2201      	movs	r2, #1
 8007d44:	e7e1      	b.n	8007d0a <_dtoa_r+0x942>
 8007d46:	f1ba 0f00 	cmp.w	sl, #0
 8007d4a:	db06      	blt.n	8007d5a <_dtoa_r+0x992>
 8007d4c:	9906      	ldr	r1, [sp, #24]
 8007d4e:	ea41 0a0a 	orr.w	sl, r1, sl
 8007d52:	9907      	ldr	r1, [sp, #28]
 8007d54:	ea5a 0101 	orrs.w	r1, sl, r1
 8007d58:	d120      	bne.n	8007d9c <_dtoa_r+0x9d4>
 8007d5a:	2a00      	cmp	r2, #0
 8007d5c:	ddec      	ble.n	8007d38 <_dtoa_r+0x970>
 8007d5e:	4629      	mov	r1, r5
 8007d60:	2201      	movs	r2, #1
 8007d62:	4630      	mov	r0, r6
 8007d64:	9304      	str	r3, [sp, #16]
 8007d66:	f000 fce9 	bl	800873c <__lshift>
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	4605      	mov	r5, r0
 8007d6e:	f000 fd55 	bl	800881c <__mcmp>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	9b04      	ldr	r3, [sp, #16]
 8007d76:	dc02      	bgt.n	8007d7e <_dtoa_r+0x9b6>
 8007d78:	d1de      	bne.n	8007d38 <_dtoa_r+0x970>
 8007d7a:	07da      	lsls	r2, r3, #31
 8007d7c:	d5dc      	bpl.n	8007d38 <_dtoa_r+0x970>
 8007d7e:	2b39      	cmp	r3, #57	; 0x39
 8007d80:	d1d8      	bne.n	8007d34 <_dtoa_r+0x96c>
 8007d82:	9a02      	ldr	r2, [sp, #8]
 8007d84:	2339      	movs	r3, #57	; 0x39
 8007d86:	7013      	strb	r3, [r2, #0]
 8007d88:	4643      	mov	r3, r8
 8007d8a:	4698      	mov	r8, r3
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007d92:	2a39      	cmp	r2, #57	; 0x39
 8007d94:	d051      	beq.n	8007e3a <_dtoa_r+0xa72>
 8007d96:	3201      	adds	r2, #1
 8007d98:	701a      	strb	r2, [r3, #0]
 8007d9a:	e745      	b.n	8007c28 <_dtoa_r+0x860>
 8007d9c:	2a00      	cmp	r2, #0
 8007d9e:	dd03      	ble.n	8007da8 <_dtoa_r+0x9e0>
 8007da0:	2b39      	cmp	r3, #57	; 0x39
 8007da2:	d0ee      	beq.n	8007d82 <_dtoa_r+0x9ba>
 8007da4:	3301      	adds	r3, #1
 8007da6:	e7c7      	b.n	8007d38 <_dtoa_r+0x970>
 8007da8:	9a04      	ldr	r2, [sp, #16]
 8007daa:	9908      	ldr	r1, [sp, #32]
 8007dac:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007db0:	428a      	cmp	r2, r1
 8007db2:	d02b      	beq.n	8007e0c <_dtoa_r+0xa44>
 8007db4:	4629      	mov	r1, r5
 8007db6:	2300      	movs	r3, #0
 8007db8:	220a      	movs	r2, #10
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f000 fb0e 	bl	80083dc <__multadd>
 8007dc0:	45b9      	cmp	r9, r7
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	f04f 0300 	mov.w	r3, #0
 8007dc8:	f04f 020a 	mov.w	r2, #10
 8007dcc:	4649      	mov	r1, r9
 8007dce:	4630      	mov	r0, r6
 8007dd0:	d107      	bne.n	8007de2 <_dtoa_r+0xa1a>
 8007dd2:	f000 fb03 	bl	80083dc <__multadd>
 8007dd6:	4681      	mov	r9, r0
 8007dd8:	4607      	mov	r7, r0
 8007dda:	9b04      	ldr	r3, [sp, #16]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	9304      	str	r3, [sp, #16]
 8007de0:	e774      	b.n	8007ccc <_dtoa_r+0x904>
 8007de2:	f000 fafb 	bl	80083dc <__multadd>
 8007de6:	4639      	mov	r1, r7
 8007de8:	4681      	mov	r9, r0
 8007dea:	2300      	movs	r3, #0
 8007dec:	220a      	movs	r2, #10
 8007dee:	4630      	mov	r0, r6
 8007df0:	f000 faf4 	bl	80083dc <__multadd>
 8007df4:	4607      	mov	r7, r0
 8007df6:	e7f0      	b.n	8007dda <_dtoa_r+0xa12>
 8007df8:	f1ba 0f00 	cmp.w	sl, #0
 8007dfc:	9a01      	ldr	r2, [sp, #4]
 8007dfe:	bfcc      	ite	gt
 8007e00:	46d0      	movgt	r8, sl
 8007e02:	f04f 0801 	movle.w	r8, #1
 8007e06:	4490      	add	r8, r2
 8007e08:	f04f 0900 	mov.w	r9, #0
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	2201      	movs	r2, #1
 8007e10:	4630      	mov	r0, r6
 8007e12:	9302      	str	r3, [sp, #8]
 8007e14:	f000 fc92 	bl	800873c <__lshift>
 8007e18:	4621      	mov	r1, r4
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	f000 fcfe 	bl	800881c <__mcmp>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	dcb1      	bgt.n	8007d88 <_dtoa_r+0x9c0>
 8007e24:	d102      	bne.n	8007e2c <_dtoa_r+0xa64>
 8007e26:	9b02      	ldr	r3, [sp, #8]
 8007e28:	07db      	lsls	r3, r3, #31
 8007e2a:	d4ad      	bmi.n	8007d88 <_dtoa_r+0x9c0>
 8007e2c:	4643      	mov	r3, r8
 8007e2e:	4698      	mov	r8, r3
 8007e30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e34:	2a30      	cmp	r2, #48	; 0x30
 8007e36:	d0fa      	beq.n	8007e2e <_dtoa_r+0xa66>
 8007e38:	e6f6      	b.n	8007c28 <_dtoa_r+0x860>
 8007e3a:	9a01      	ldr	r2, [sp, #4]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d1a4      	bne.n	8007d8a <_dtoa_r+0x9c2>
 8007e40:	f10b 0b01 	add.w	fp, fp, #1
 8007e44:	2331      	movs	r3, #49	; 0x31
 8007e46:	e778      	b.n	8007d3a <_dtoa_r+0x972>
 8007e48:	4b14      	ldr	r3, [pc, #80]	; (8007e9c <_dtoa_r+0xad4>)
 8007e4a:	f7ff bb27 	b.w	800749c <_dtoa_r+0xd4>
 8007e4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f47f ab03 	bne.w	800745c <_dtoa_r+0x94>
 8007e56:	4b12      	ldr	r3, [pc, #72]	; (8007ea0 <_dtoa_r+0xad8>)
 8007e58:	f7ff bb20 	b.w	800749c <_dtoa_r+0xd4>
 8007e5c:	f1ba 0f00 	cmp.w	sl, #0
 8007e60:	dc03      	bgt.n	8007e6a <_dtoa_r+0xaa2>
 8007e62:	9b06      	ldr	r3, [sp, #24]
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	f73f aec7 	bgt.w	8007bf8 <_dtoa_r+0x830>
 8007e6a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e6e:	4621      	mov	r1, r4
 8007e70:	4628      	mov	r0, r5
 8007e72:	f7ff fa1d 	bl	80072b0 <quorem>
 8007e76:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007e7a:	f808 3b01 	strb.w	r3, [r8], #1
 8007e7e:	9a01      	ldr	r2, [sp, #4]
 8007e80:	eba8 0202 	sub.w	r2, r8, r2
 8007e84:	4592      	cmp	sl, r2
 8007e86:	ddb7      	ble.n	8007df8 <_dtoa_r+0xa30>
 8007e88:	4629      	mov	r1, r5
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	220a      	movs	r2, #10
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f000 faa4 	bl	80083dc <__multadd>
 8007e94:	4605      	mov	r5, r0
 8007e96:	e7ea      	b.n	8007e6e <_dtoa_r+0xaa6>
 8007e98:	0800932b 	.word	0x0800932b
 8007e9c:	08009288 	.word	0x08009288
 8007ea0:	080092ac 	.word	0x080092ac

08007ea4 <__sflush_r>:
 8007ea4:	898a      	ldrh	r2, [r1, #12]
 8007ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eaa:	4605      	mov	r5, r0
 8007eac:	0710      	lsls	r0, r2, #28
 8007eae:	460c      	mov	r4, r1
 8007eb0:	d458      	bmi.n	8007f64 <__sflush_r+0xc0>
 8007eb2:	684b      	ldr	r3, [r1, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	dc05      	bgt.n	8007ec4 <__sflush_r+0x20>
 8007eb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	dc02      	bgt.n	8007ec4 <__sflush_r+0x20>
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ec6:	2e00      	cmp	r6, #0
 8007ec8:	d0f9      	beq.n	8007ebe <__sflush_r+0x1a>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ed0:	682f      	ldr	r7, [r5, #0]
 8007ed2:	602b      	str	r3, [r5, #0]
 8007ed4:	d032      	beq.n	8007f3c <__sflush_r+0x98>
 8007ed6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	075a      	lsls	r2, r3, #29
 8007edc:	d505      	bpl.n	8007eea <__sflush_r+0x46>
 8007ede:	6863      	ldr	r3, [r4, #4]
 8007ee0:	1ac0      	subs	r0, r0, r3
 8007ee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ee4:	b10b      	cbz	r3, 8007eea <__sflush_r+0x46>
 8007ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ee8:	1ac0      	subs	r0, r0, r3
 8007eea:	2300      	movs	r3, #0
 8007eec:	4602      	mov	r2, r0
 8007eee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ef0:	6a21      	ldr	r1, [r4, #32]
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	47b0      	blx	r6
 8007ef6:	1c43      	adds	r3, r0, #1
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	d106      	bne.n	8007f0a <__sflush_r+0x66>
 8007efc:	6829      	ldr	r1, [r5, #0]
 8007efe:	291d      	cmp	r1, #29
 8007f00:	d82c      	bhi.n	8007f5c <__sflush_r+0xb8>
 8007f02:	4a2a      	ldr	r2, [pc, #168]	; (8007fac <__sflush_r+0x108>)
 8007f04:	40ca      	lsrs	r2, r1
 8007f06:	07d6      	lsls	r6, r2, #31
 8007f08:	d528      	bpl.n	8007f5c <__sflush_r+0xb8>
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	6062      	str	r2, [r4, #4]
 8007f0e:	04d9      	lsls	r1, r3, #19
 8007f10:	6922      	ldr	r2, [r4, #16]
 8007f12:	6022      	str	r2, [r4, #0]
 8007f14:	d504      	bpl.n	8007f20 <__sflush_r+0x7c>
 8007f16:	1c42      	adds	r2, r0, #1
 8007f18:	d101      	bne.n	8007f1e <__sflush_r+0x7a>
 8007f1a:	682b      	ldr	r3, [r5, #0]
 8007f1c:	b903      	cbnz	r3, 8007f20 <__sflush_r+0x7c>
 8007f1e:	6560      	str	r0, [r4, #84]	; 0x54
 8007f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f22:	602f      	str	r7, [r5, #0]
 8007f24:	2900      	cmp	r1, #0
 8007f26:	d0ca      	beq.n	8007ebe <__sflush_r+0x1a>
 8007f28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f2c:	4299      	cmp	r1, r3
 8007f2e:	d002      	beq.n	8007f36 <__sflush_r+0x92>
 8007f30:	4628      	mov	r0, r5
 8007f32:	f000 fd8b 	bl	8008a4c <_free_r>
 8007f36:	2000      	movs	r0, #0
 8007f38:	6360      	str	r0, [r4, #52]	; 0x34
 8007f3a:	e7c1      	b.n	8007ec0 <__sflush_r+0x1c>
 8007f3c:	6a21      	ldr	r1, [r4, #32]
 8007f3e:	2301      	movs	r3, #1
 8007f40:	4628      	mov	r0, r5
 8007f42:	47b0      	blx	r6
 8007f44:	1c41      	adds	r1, r0, #1
 8007f46:	d1c7      	bne.n	8007ed8 <__sflush_r+0x34>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d0c4      	beq.n	8007ed8 <__sflush_r+0x34>
 8007f4e:	2b1d      	cmp	r3, #29
 8007f50:	d001      	beq.n	8007f56 <__sflush_r+0xb2>
 8007f52:	2b16      	cmp	r3, #22
 8007f54:	d101      	bne.n	8007f5a <__sflush_r+0xb6>
 8007f56:	602f      	str	r7, [r5, #0]
 8007f58:	e7b1      	b.n	8007ebe <__sflush_r+0x1a>
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f60:	81a3      	strh	r3, [r4, #12]
 8007f62:	e7ad      	b.n	8007ec0 <__sflush_r+0x1c>
 8007f64:	690f      	ldr	r7, [r1, #16]
 8007f66:	2f00      	cmp	r7, #0
 8007f68:	d0a9      	beq.n	8007ebe <__sflush_r+0x1a>
 8007f6a:	0793      	lsls	r3, r2, #30
 8007f6c:	680e      	ldr	r6, [r1, #0]
 8007f6e:	bf08      	it	eq
 8007f70:	694b      	ldreq	r3, [r1, #20]
 8007f72:	600f      	str	r7, [r1, #0]
 8007f74:	bf18      	it	ne
 8007f76:	2300      	movne	r3, #0
 8007f78:	eba6 0807 	sub.w	r8, r6, r7
 8007f7c:	608b      	str	r3, [r1, #8]
 8007f7e:	f1b8 0f00 	cmp.w	r8, #0
 8007f82:	dd9c      	ble.n	8007ebe <__sflush_r+0x1a>
 8007f84:	6a21      	ldr	r1, [r4, #32]
 8007f86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f88:	4643      	mov	r3, r8
 8007f8a:	463a      	mov	r2, r7
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	47b0      	blx	r6
 8007f90:	2800      	cmp	r0, #0
 8007f92:	dc06      	bgt.n	8007fa2 <__sflush_r+0xfe>
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f9a:	81a3      	strh	r3, [r4, #12]
 8007f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa0:	e78e      	b.n	8007ec0 <__sflush_r+0x1c>
 8007fa2:	4407      	add	r7, r0
 8007fa4:	eba8 0800 	sub.w	r8, r8, r0
 8007fa8:	e7e9      	b.n	8007f7e <__sflush_r+0xda>
 8007faa:	bf00      	nop
 8007fac:	20400001 	.word	0x20400001

08007fb0 <_fflush_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	690b      	ldr	r3, [r1, #16]
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	b913      	cbnz	r3, 8007fc0 <_fflush_r+0x10>
 8007fba:	2500      	movs	r5, #0
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	bd38      	pop	{r3, r4, r5, pc}
 8007fc0:	b118      	cbz	r0, 8007fca <_fflush_r+0x1a>
 8007fc2:	6983      	ldr	r3, [r0, #24]
 8007fc4:	b90b      	cbnz	r3, 8007fca <_fflush_r+0x1a>
 8007fc6:	f000 f887 	bl	80080d8 <__sinit>
 8007fca:	4b14      	ldr	r3, [pc, #80]	; (800801c <_fflush_r+0x6c>)
 8007fcc:	429c      	cmp	r4, r3
 8007fce:	d11b      	bne.n	8008008 <_fflush_r+0x58>
 8007fd0:	686c      	ldr	r4, [r5, #4]
 8007fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0ef      	beq.n	8007fba <_fflush_r+0xa>
 8007fda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fdc:	07d0      	lsls	r0, r2, #31
 8007fde:	d404      	bmi.n	8007fea <_fflush_r+0x3a>
 8007fe0:	0599      	lsls	r1, r3, #22
 8007fe2:	d402      	bmi.n	8007fea <_fflush_r+0x3a>
 8007fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fe6:	f000 f91a 	bl	800821e <__retarget_lock_acquire_recursive>
 8007fea:	4628      	mov	r0, r5
 8007fec:	4621      	mov	r1, r4
 8007fee:	f7ff ff59 	bl	8007ea4 <__sflush_r>
 8007ff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ff4:	07da      	lsls	r2, r3, #31
 8007ff6:	4605      	mov	r5, r0
 8007ff8:	d4e0      	bmi.n	8007fbc <_fflush_r+0xc>
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	059b      	lsls	r3, r3, #22
 8007ffe:	d4dd      	bmi.n	8007fbc <_fflush_r+0xc>
 8008000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008002:	f000 f90d 	bl	8008220 <__retarget_lock_release_recursive>
 8008006:	e7d9      	b.n	8007fbc <_fflush_r+0xc>
 8008008:	4b05      	ldr	r3, [pc, #20]	; (8008020 <_fflush_r+0x70>)
 800800a:	429c      	cmp	r4, r3
 800800c:	d101      	bne.n	8008012 <_fflush_r+0x62>
 800800e:	68ac      	ldr	r4, [r5, #8]
 8008010:	e7df      	b.n	8007fd2 <_fflush_r+0x22>
 8008012:	4b04      	ldr	r3, [pc, #16]	; (8008024 <_fflush_r+0x74>)
 8008014:	429c      	cmp	r4, r3
 8008016:	bf08      	it	eq
 8008018:	68ec      	ldreq	r4, [r5, #12]
 800801a:	e7da      	b.n	8007fd2 <_fflush_r+0x22>
 800801c:	0800935c 	.word	0x0800935c
 8008020:	0800937c 	.word	0x0800937c
 8008024:	0800933c 	.word	0x0800933c

08008028 <std>:
 8008028:	2300      	movs	r3, #0
 800802a:	b510      	push	{r4, lr}
 800802c:	4604      	mov	r4, r0
 800802e:	e9c0 3300 	strd	r3, r3, [r0]
 8008032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008036:	6083      	str	r3, [r0, #8]
 8008038:	8181      	strh	r1, [r0, #12]
 800803a:	6643      	str	r3, [r0, #100]	; 0x64
 800803c:	81c2      	strh	r2, [r0, #14]
 800803e:	6183      	str	r3, [r0, #24]
 8008040:	4619      	mov	r1, r3
 8008042:	2208      	movs	r2, #8
 8008044:	305c      	adds	r0, #92	; 0x5c
 8008046:	f7fe fb9b 	bl	8006780 <memset>
 800804a:	4b05      	ldr	r3, [pc, #20]	; (8008060 <std+0x38>)
 800804c:	6263      	str	r3, [r4, #36]	; 0x24
 800804e:	4b05      	ldr	r3, [pc, #20]	; (8008064 <std+0x3c>)
 8008050:	62a3      	str	r3, [r4, #40]	; 0x28
 8008052:	4b05      	ldr	r3, [pc, #20]	; (8008068 <std+0x40>)
 8008054:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008056:	4b05      	ldr	r3, [pc, #20]	; (800806c <std+0x44>)
 8008058:	6224      	str	r4, [r4, #32]
 800805a:	6323      	str	r3, [r4, #48]	; 0x30
 800805c:	bd10      	pop	{r4, pc}
 800805e:	bf00      	nop
 8008060:	08008ee1 	.word	0x08008ee1
 8008064:	08008f03 	.word	0x08008f03
 8008068:	08008f3b 	.word	0x08008f3b
 800806c:	08008f5f 	.word	0x08008f5f

08008070 <_cleanup_r>:
 8008070:	4901      	ldr	r1, [pc, #4]	; (8008078 <_cleanup_r+0x8>)
 8008072:	f000 b8af 	b.w	80081d4 <_fwalk_reent>
 8008076:	bf00      	nop
 8008078:	08007fb1 	.word	0x08007fb1

0800807c <__sfmoreglue>:
 800807c:	b570      	push	{r4, r5, r6, lr}
 800807e:	2268      	movs	r2, #104	; 0x68
 8008080:	1e4d      	subs	r5, r1, #1
 8008082:	4355      	muls	r5, r2
 8008084:	460e      	mov	r6, r1
 8008086:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800808a:	f000 fd4b 	bl	8008b24 <_malloc_r>
 800808e:	4604      	mov	r4, r0
 8008090:	b140      	cbz	r0, 80080a4 <__sfmoreglue+0x28>
 8008092:	2100      	movs	r1, #0
 8008094:	e9c0 1600 	strd	r1, r6, [r0]
 8008098:	300c      	adds	r0, #12
 800809a:	60a0      	str	r0, [r4, #8]
 800809c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80080a0:	f7fe fb6e 	bl	8006780 <memset>
 80080a4:	4620      	mov	r0, r4
 80080a6:	bd70      	pop	{r4, r5, r6, pc}

080080a8 <__sfp_lock_acquire>:
 80080a8:	4801      	ldr	r0, [pc, #4]	; (80080b0 <__sfp_lock_acquire+0x8>)
 80080aa:	f000 b8b8 	b.w	800821e <__retarget_lock_acquire_recursive>
 80080ae:	bf00      	nop
 80080b0:	24000345 	.word	0x24000345

080080b4 <__sfp_lock_release>:
 80080b4:	4801      	ldr	r0, [pc, #4]	; (80080bc <__sfp_lock_release+0x8>)
 80080b6:	f000 b8b3 	b.w	8008220 <__retarget_lock_release_recursive>
 80080ba:	bf00      	nop
 80080bc:	24000345 	.word	0x24000345

080080c0 <__sinit_lock_acquire>:
 80080c0:	4801      	ldr	r0, [pc, #4]	; (80080c8 <__sinit_lock_acquire+0x8>)
 80080c2:	f000 b8ac 	b.w	800821e <__retarget_lock_acquire_recursive>
 80080c6:	bf00      	nop
 80080c8:	24000346 	.word	0x24000346

080080cc <__sinit_lock_release>:
 80080cc:	4801      	ldr	r0, [pc, #4]	; (80080d4 <__sinit_lock_release+0x8>)
 80080ce:	f000 b8a7 	b.w	8008220 <__retarget_lock_release_recursive>
 80080d2:	bf00      	nop
 80080d4:	24000346 	.word	0x24000346

080080d8 <__sinit>:
 80080d8:	b510      	push	{r4, lr}
 80080da:	4604      	mov	r4, r0
 80080dc:	f7ff fff0 	bl	80080c0 <__sinit_lock_acquire>
 80080e0:	69a3      	ldr	r3, [r4, #24]
 80080e2:	b11b      	cbz	r3, 80080ec <__sinit+0x14>
 80080e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e8:	f7ff bff0 	b.w	80080cc <__sinit_lock_release>
 80080ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080f0:	6523      	str	r3, [r4, #80]	; 0x50
 80080f2:	4b13      	ldr	r3, [pc, #76]	; (8008140 <__sinit+0x68>)
 80080f4:	4a13      	ldr	r2, [pc, #76]	; (8008144 <__sinit+0x6c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80080fa:	42a3      	cmp	r3, r4
 80080fc:	bf04      	itt	eq
 80080fe:	2301      	moveq	r3, #1
 8008100:	61a3      	streq	r3, [r4, #24]
 8008102:	4620      	mov	r0, r4
 8008104:	f000 f820 	bl	8008148 <__sfp>
 8008108:	6060      	str	r0, [r4, #4]
 800810a:	4620      	mov	r0, r4
 800810c:	f000 f81c 	bl	8008148 <__sfp>
 8008110:	60a0      	str	r0, [r4, #8]
 8008112:	4620      	mov	r0, r4
 8008114:	f000 f818 	bl	8008148 <__sfp>
 8008118:	2200      	movs	r2, #0
 800811a:	60e0      	str	r0, [r4, #12]
 800811c:	2104      	movs	r1, #4
 800811e:	6860      	ldr	r0, [r4, #4]
 8008120:	f7ff ff82 	bl	8008028 <std>
 8008124:	68a0      	ldr	r0, [r4, #8]
 8008126:	2201      	movs	r2, #1
 8008128:	2109      	movs	r1, #9
 800812a:	f7ff ff7d 	bl	8008028 <std>
 800812e:	68e0      	ldr	r0, [r4, #12]
 8008130:	2202      	movs	r2, #2
 8008132:	2112      	movs	r1, #18
 8008134:	f7ff ff78 	bl	8008028 <std>
 8008138:	2301      	movs	r3, #1
 800813a:	61a3      	str	r3, [r4, #24]
 800813c:	e7d2      	b.n	80080e4 <__sinit+0xc>
 800813e:	bf00      	nop
 8008140:	08009274 	.word	0x08009274
 8008144:	08008071 	.word	0x08008071

08008148 <__sfp>:
 8008148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814a:	4607      	mov	r7, r0
 800814c:	f7ff ffac 	bl	80080a8 <__sfp_lock_acquire>
 8008150:	4b1e      	ldr	r3, [pc, #120]	; (80081cc <__sfp+0x84>)
 8008152:	681e      	ldr	r6, [r3, #0]
 8008154:	69b3      	ldr	r3, [r6, #24]
 8008156:	b913      	cbnz	r3, 800815e <__sfp+0x16>
 8008158:	4630      	mov	r0, r6
 800815a:	f7ff ffbd 	bl	80080d8 <__sinit>
 800815e:	3648      	adds	r6, #72	; 0x48
 8008160:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008164:	3b01      	subs	r3, #1
 8008166:	d503      	bpl.n	8008170 <__sfp+0x28>
 8008168:	6833      	ldr	r3, [r6, #0]
 800816a:	b30b      	cbz	r3, 80081b0 <__sfp+0x68>
 800816c:	6836      	ldr	r6, [r6, #0]
 800816e:	e7f7      	b.n	8008160 <__sfp+0x18>
 8008170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008174:	b9d5      	cbnz	r5, 80081ac <__sfp+0x64>
 8008176:	4b16      	ldr	r3, [pc, #88]	; (80081d0 <__sfp+0x88>)
 8008178:	60e3      	str	r3, [r4, #12]
 800817a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800817e:	6665      	str	r5, [r4, #100]	; 0x64
 8008180:	f000 f84c 	bl	800821c <__retarget_lock_init_recursive>
 8008184:	f7ff ff96 	bl	80080b4 <__sfp_lock_release>
 8008188:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800818c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008190:	6025      	str	r5, [r4, #0]
 8008192:	61a5      	str	r5, [r4, #24]
 8008194:	2208      	movs	r2, #8
 8008196:	4629      	mov	r1, r5
 8008198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800819c:	f7fe faf0 	bl	8006780 <memset>
 80081a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081a8:	4620      	mov	r0, r4
 80081aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ac:	3468      	adds	r4, #104	; 0x68
 80081ae:	e7d9      	b.n	8008164 <__sfp+0x1c>
 80081b0:	2104      	movs	r1, #4
 80081b2:	4638      	mov	r0, r7
 80081b4:	f7ff ff62 	bl	800807c <__sfmoreglue>
 80081b8:	4604      	mov	r4, r0
 80081ba:	6030      	str	r0, [r6, #0]
 80081bc:	2800      	cmp	r0, #0
 80081be:	d1d5      	bne.n	800816c <__sfp+0x24>
 80081c0:	f7ff ff78 	bl	80080b4 <__sfp_lock_release>
 80081c4:	230c      	movs	r3, #12
 80081c6:	603b      	str	r3, [r7, #0]
 80081c8:	e7ee      	b.n	80081a8 <__sfp+0x60>
 80081ca:	bf00      	nop
 80081cc:	08009274 	.word	0x08009274
 80081d0:	ffff0001 	.word	0xffff0001

080081d4 <_fwalk_reent>:
 80081d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d8:	4606      	mov	r6, r0
 80081da:	4688      	mov	r8, r1
 80081dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081e0:	2700      	movs	r7, #0
 80081e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081e6:	f1b9 0901 	subs.w	r9, r9, #1
 80081ea:	d505      	bpl.n	80081f8 <_fwalk_reent+0x24>
 80081ec:	6824      	ldr	r4, [r4, #0]
 80081ee:	2c00      	cmp	r4, #0
 80081f0:	d1f7      	bne.n	80081e2 <_fwalk_reent+0xe>
 80081f2:	4638      	mov	r0, r7
 80081f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f8:	89ab      	ldrh	r3, [r5, #12]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d907      	bls.n	800820e <_fwalk_reent+0x3a>
 80081fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008202:	3301      	adds	r3, #1
 8008204:	d003      	beq.n	800820e <_fwalk_reent+0x3a>
 8008206:	4629      	mov	r1, r5
 8008208:	4630      	mov	r0, r6
 800820a:	47c0      	blx	r8
 800820c:	4307      	orrs	r7, r0
 800820e:	3568      	adds	r5, #104	; 0x68
 8008210:	e7e9      	b.n	80081e6 <_fwalk_reent+0x12>
	...

08008214 <_localeconv_r>:
 8008214:	4800      	ldr	r0, [pc, #0]	; (8008218 <_localeconv_r+0x4>)
 8008216:	4770      	bx	lr
 8008218:	24000174 	.word	0x24000174

0800821c <__retarget_lock_init_recursive>:
 800821c:	4770      	bx	lr

0800821e <__retarget_lock_acquire_recursive>:
 800821e:	4770      	bx	lr

08008220 <__retarget_lock_release_recursive>:
 8008220:	4770      	bx	lr

08008222 <__swhatbuf_r>:
 8008222:	b570      	push	{r4, r5, r6, lr}
 8008224:	460e      	mov	r6, r1
 8008226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800822a:	2900      	cmp	r1, #0
 800822c:	b096      	sub	sp, #88	; 0x58
 800822e:	4614      	mov	r4, r2
 8008230:	461d      	mov	r5, r3
 8008232:	da08      	bge.n	8008246 <__swhatbuf_r+0x24>
 8008234:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	602a      	str	r2, [r5, #0]
 800823c:	061a      	lsls	r2, r3, #24
 800823e:	d410      	bmi.n	8008262 <__swhatbuf_r+0x40>
 8008240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008244:	e00e      	b.n	8008264 <__swhatbuf_r+0x42>
 8008246:	466a      	mov	r2, sp
 8008248:	f000 fee0 	bl	800900c <_fstat_r>
 800824c:	2800      	cmp	r0, #0
 800824e:	dbf1      	blt.n	8008234 <__swhatbuf_r+0x12>
 8008250:	9a01      	ldr	r2, [sp, #4]
 8008252:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008256:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800825a:	425a      	negs	r2, r3
 800825c:	415a      	adcs	r2, r3
 800825e:	602a      	str	r2, [r5, #0]
 8008260:	e7ee      	b.n	8008240 <__swhatbuf_r+0x1e>
 8008262:	2340      	movs	r3, #64	; 0x40
 8008264:	2000      	movs	r0, #0
 8008266:	6023      	str	r3, [r4, #0]
 8008268:	b016      	add	sp, #88	; 0x58
 800826a:	bd70      	pop	{r4, r5, r6, pc}

0800826c <__smakebuf_r>:
 800826c:	898b      	ldrh	r3, [r1, #12]
 800826e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008270:	079d      	lsls	r5, r3, #30
 8008272:	4606      	mov	r6, r0
 8008274:	460c      	mov	r4, r1
 8008276:	d507      	bpl.n	8008288 <__smakebuf_r+0x1c>
 8008278:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	6123      	str	r3, [r4, #16]
 8008280:	2301      	movs	r3, #1
 8008282:	6163      	str	r3, [r4, #20]
 8008284:	b002      	add	sp, #8
 8008286:	bd70      	pop	{r4, r5, r6, pc}
 8008288:	ab01      	add	r3, sp, #4
 800828a:	466a      	mov	r2, sp
 800828c:	f7ff ffc9 	bl	8008222 <__swhatbuf_r>
 8008290:	9900      	ldr	r1, [sp, #0]
 8008292:	4605      	mov	r5, r0
 8008294:	4630      	mov	r0, r6
 8008296:	f000 fc45 	bl	8008b24 <_malloc_r>
 800829a:	b948      	cbnz	r0, 80082b0 <__smakebuf_r+0x44>
 800829c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082a0:	059a      	lsls	r2, r3, #22
 80082a2:	d4ef      	bmi.n	8008284 <__smakebuf_r+0x18>
 80082a4:	f023 0303 	bic.w	r3, r3, #3
 80082a8:	f043 0302 	orr.w	r3, r3, #2
 80082ac:	81a3      	strh	r3, [r4, #12]
 80082ae:	e7e3      	b.n	8008278 <__smakebuf_r+0xc>
 80082b0:	4b0d      	ldr	r3, [pc, #52]	; (80082e8 <__smakebuf_r+0x7c>)
 80082b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	6020      	str	r0, [r4, #0]
 80082b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082bc:	81a3      	strh	r3, [r4, #12]
 80082be:	9b00      	ldr	r3, [sp, #0]
 80082c0:	6163      	str	r3, [r4, #20]
 80082c2:	9b01      	ldr	r3, [sp, #4]
 80082c4:	6120      	str	r0, [r4, #16]
 80082c6:	b15b      	cbz	r3, 80082e0 <__smakebuf_r+0x74>
 80082c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082cc:	4630      	mov	r0, r6
 80082ce:	f000 feaf 	bl	8009030 <_isatty_r>
 80082d2:	b128      	cbz	r0, 80082e0 <__smakebuf_r+0x74>
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	f023 0303 	bic.w	r3, r3, #3
 80082da:	f043 0301 	orr.w	r3, r3, #1
 80082de:	81a3      	strh	r3, [r4, #12]
 80082e0:	89a0      	ldrh	r0, [r4, #12]
 80082e2:	4305      	orrs	r5, r0
 80082e4:	81a5      	strh	r5, [r4, #12]
 80082e6:	e7cd      	b.n	8008284 <__smakebuf_r+0x18>
 80082e8:	08008071 	.word	0x08008071

080082ec <malloc>:
 80082ec:	4b02      	ldr	r3, [pc, #8]	; (80082f8 <malloc+0xc>)
 80082ee:	4601      	mov	r1, r0
 80082f0:	6818      	ldr	r0, [r3, #0]
 80082f2:	f000 bc17 	b.w	8008b24 <_malloc_r>
 80082f6:	bf00      	nop
 80082f8:	24000020 	.word	0x24000020

080082fc <memcpy>:
 80082fc:	440a      	add	r2, r1
 80082fe:	4291      	cmp	r1, r2
 8008300:	f100 33ff 	add.w	r3, r0, #4294967295
 8008304:	d100      	bne.n	8008308 <memcpy+0xc>
 8008306:	4770      	bx	lr
 8008308:	b510      	push	{r4, lr}
 800830a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800830e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008312:	4291      	cmp	r1, r2
 8008314:	d1f9      	bne.n	800830a <memcpy+0xe>
 8008316:	bd10      	pop	{r4, pc}

08008318 <_Balloc>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800831c:	4604      	mov	r4, r0
 800831e:	460d      	mov	r5, r1
 8008320:	b976      	cbnz	r6, 8008340 <_Balloc+0x28>
 8008322:	2010      	movs	r0, #16
 8008324:	f7ff ffe2 	bl	80082ec <malloc>
 8008328:	4602      	mov	r2, r0
 800832a:	6260      	str	r0, [r4, #36]	; 0x24
 800832c:	b920      	cbnz	r0, 8008338 <_Balloc+0x20>
 800832e:	4b18      	ldr	r3, [pc, #96]	; (8008390 <_Balloc+0x78>)
 8008330:	4818      	ldr	r0, [pc, #96]	; (8008394 <_Balloc+0x7c>)
 8008332:	2166      	movs	r1, #102	; 0x66
 8008334:	f000 fe2a 	bl	8008f8c <__assert_func>
 8008338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800833c:	6006      	str	r6, [r0, #0]
 800833e:	60c6      	str	r6, [r0, #12]
 8008340:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008342:	68f3      	ldr	r3, [r6, #12]
 8008344:	b183      	cbz	r3, 8008368 <_Balloc+0x50>
 8008346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800834e:	b9b8      	cbnz	r0, 8008380 <_Balloc+0x68>
 8008350:	2101      	movs	r1, #1
 8008352:	fa01 f605 	lsl.w	r6, r1, r5
 8008356:	1d72      	adds	r2, r6, #5
 8008358:	0092      	lsls	r2, r2, #2
 800835a:	4620      	mov	r0, r4
 800835c:	f000 fb60 	bl	8008a20 <_calloc_r>
 8008360:	b160      	cbz	r0, 800837c <_Balloc+0x64>
 8008362:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008366:	e00e      	b.n	8008386 <_Balloc+0x6e>
 8008368:	2221      	movs	r2, #33	; 0x21
 800836a:	2104      	movs	r1, #4
 800836c:	4620      	mov	r0, r4
 800836e:	f000 fb57 	bl	8008a20 <_calloc_r>
 8008372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008374:	60f0      	str	r0, [r6, #12]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1e4      	bne.n	8008346 <_Balloc+0x2e>
 800837c:	2000      	movs	r0, #0
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	6802      	ldr	r2, [r0, #0]
 8008382:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008386:	2300      	movs	r3, #0
 8008388:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800838c:	e7f7      	b.n	800837e <_Balloc+0x66>
 800838e:	bf00      	nop
 8008390:	080092b9 	.word	0x080092b9
 8008394:	0800939c 	.word	0x0800939c

08008398 <_Bfree>:
 8008398:	b570      	push	{r4, r5, r6, lr}
 800839a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800839c:	4605      	mov	r5, r0
 800839e:	460c      	mov	r4, r1
 80083a0:	b976      	cbnz	r6, 80083c0 <_Bfree+0x28>
 80083a2:	2010      	movs	r0, #16
 80083a4:	f7ff ffa2 	bl	80082ec <malloc>
 80083a8:	4602      	mov	r2, r0
 80083aa:	6268      	str	r0, [r5, #36]	; 0x24
 80083ac:	b920      	cbnz	r0, 80083b8 <_Bfree+0x20>
 80083ae:	4b09      	ldr	r3, [pc, #36]	; (80083d4 <_Bfree+0x3c>)
 80083b0:	4809      	ldr	r0, [pc, #36]	; (80083d8 <_Bfree+0x40>)
 80083b2:	218a      	movs	r1, #138	; 0x8a
 80083b4:	f000 fdea 	bl	8008f8c <__assert_func>
 80083b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083bc:	6006      	str	r6, [r0, #0]
 80083be:	60c6      	str	r6, [r0, #12]
 80083c0:	b13c      	cbz	r4, 80083d2 <_Bfree+0x3a>
 80083c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083c4:	6862      	ldr	r2, [r4, #4]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083cc:	6021      	str	r1, [r4, #0]
 80083ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
 80083d4:	080092b9 	.word	0x080092b9
 80083d8:	0800939c 	.word	0x0800939c

080083dc <__multadd>:
 80083dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e0:	690d      	ldr	r5, [r1, #16]
 80083e2:	4607      	mov	r7, r0
 80083e4:	460c      	mov	r4, r1
 80083e6:	461e      	mov	r6, r3
 80083e8:	f101 0c14 	add.w	ip, r1, #20
 80083ec:	2000      	movs	r0, #0
 80083ee:	f8dc 3000 	ldr.w	r3, [ip]
 80083f2:	b299      	uxth	r1, r3
 80083f4:	fb02 6101 	mla	r1, r2, r1, r6
 80083f8:	0c1e      	lsrs	r6, r3, #16
 80083fa:	0c0b      	lsrs	r3, r1, #16
 80083fc:	fb02 3306 	mla	r3, r2, r6, r3
 8008400:	b289      	uxth	r1, r1
 8008402:	3001      	adds	r0, #1
 8008404:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008408:	4285      	cmp	r5, r0
 800840a:	f84c 1b04 	str.w	r1, [ip], #4
 800840e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008412:	dcec      	bgt.n	80083ee <__multadd+0x12>
 8008414:	b30e      	cbz	r6, 800845a <__multadd+0x7e>
 8008416:	68a3      	ldr	r3, [r4, #8]
 8008418:	42ab      	cmp	r3, r5
 800841a:	dc19      	bgt.n	8008450 <__multadd+0x74>
 800841c:	6861      	ldr	r1, [r4, #4]
 800841e:	4638      	mov	r0, r7
 8008420:	3101      	adds	r1, #1
 8008422:	f7ff ff79 	bl	8008318 <_Balloc>
 8008426:	4680      	mov	r8, r0
 8008428:	b928      	cbnz	r0, 8008436 <__multadd+0x5a>
 800842a:	4602      	mov	r2, r0
 800842c:	4b0c      	ldr	r3, [pc, #48]	; (8008460 <__multadd+0x84>)
 800842e:	480d      	ldr	r0, [pc, #52]	; (8008464 <__multadd+0x88>)
 8008430:	21b5      	movs	r1, #181	; 0xb5
 8008432:	f000 fdab 	bl	8008f8c <__assert_func>
 8008436:	6922      	ldr	r2, [r4, #16]
 8008438:	3202      	adds	r2, #2
 800843a:	f104 010c 	add.w	r1, r4, #12
 800843e:	0092      	lsls	r2, r2, #2
 8008440:	300c      	adds	r0, #12
 8008442:	f7ff ff5b 	bl	80082fc <memcpy>
 8008446:	4621      	mov	r1, r4
 8008448:	4638      	mov	r0, r7
 800844a:	f7ff ffa5 	bl	8008398 <_Bfree>
 800844e:	4644      	mov	r4, r8
 8008450:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008454:	3501      	adds	r5, #1
 8008456:	615e      	str	r6, [r3, #20]
 8008458:	6125      	str	r5, [r4, #16]
 800845a:	4620      	mov	r0, r4
 800845c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008460:	0800932b 	.word	0x0800932b
 8008464:	0800939c 	.word	0x0800939c

08008468 <__hi0bits>:
 8008468:	0c03      	lsrs	r3, r0, #16
 800846a:	041b      	lsls	r3, r3, #16
 800846c:	b9d3      	cbnz	r3, 80084a4 <__hi0bits+0x3c>
 800846e:	0400      	lsls	r0, r0, #16
 8008470:	2310      	movs	r3, #16
 8008472:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008476:	bf04      	itt	eq
 8008478:	0200      	lsleq	r0, r0, #8
 800847a:	3308      	addeq	r3, #8
 800847c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008480:	bf04      	itt	eq
 8008482:	0100      	lsleq	r0, r0, #4
 8008484:	3304      	addeq	r3, #4
 8008486:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800848a:	bf04      	itt	eq
 800848c:	0080      	lsleq	r0, r0, #2
 800848e:	3302      	addeq	r3, #2
 8008490:	2800      	cmp	r0, #0
 8008492:	db05      	blt.n	80084a0 <__hi0bits+0x38>
 8008494:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008498:	f103 0301 	add.w	r3, r3, #1
 800849c:	bf08      	it	eq
 800849e:	2320      	moveq	r3, #32
 80084a0:	4618      	mov	r0, r3
 80084a2:	4770      	bx	lr
 80084a4:	2300      	movs	r3, #0
 80084a6:	e7e4      	b.n	8008472 <__hi0bits+0xa>

080084a8 <__lo0bits>:
 80084a8:	6803      	ldr	r3, [r0, #0]
 80084aa:	f013 0207 	ands.w	r2, r3, #7
 80084ae:	4601      	mov	r1, r0
 80084b0:	d00b      	beq.n	80084ca <__lo0bits+0x22>
 80084b2:	07da      	lsls	r2, r3, #31
 80084b4:	d423      	bmi.n	80084fe <__lo0bits+0x56>
 80084b6:	0798      	lsls	r0, r3, #30
 80084b8:	bf49      	itett	mi
 80084ba:	085b      	lsrmi	r3, r3, #1
 80084bc:	089b      	lsrpl	r3, r3, #2
 80084be:	2001      	movmi	r0, #1
 80084c0:	600b      	strmi	r3, [r1, #0]
 80084c2:	bf5c      	itt	pl
 80084c4:	600b      	strpl	r3, [r1, #0]
 80084c6:	2002      	movpl	r0, #2
 80084c8:	4770      	bx	lr
 80084ca:	b298      	uxth	r0, r3
 80084cc:	b9a8      	cbnz	r0, 80084fa <__lo0bits+0x52>
 80084ce:	0c1b      	lsrs	r3, r3, #16
 80084d0:	2010      	movs	r0, #16
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	b90a      	cbnz	r2, 80084da <__lo0bits+0x32>
 80084d6:	3008      	adds	r0, #8
 80084d8:	0a1b      	lsrs	r3, r3, #8
 80084da:	071a      	lsls	r2, r3, #28
 80084dc:	bf04      	itt	eq
 80084de:	091b      	lsreq	r3, r3, #4
 80084e0:	3004      	addeq	r0, #4
 80084e2:	079a      	lsls	r2, r3, #30
 80084e4:	bf04      	itt	eq
 80084e6:	089b      	lsreq	r3, r3, #2
 80084e8:	3002      	addeq	r0, #2
 80084ea:	07da      	lsls	r2, r3, #31
 80084ec:	d403      	bmi.n	80084f6 <__lo0bits+0x4e>
 80084ee:	085b      	lsrs	r3, r3, #1
 80084f0:	f100 0001 	add.w	r0, r0, #1
 80084f4:	d005      	beq.n	8008502 <__lo0bits+0x5a>
 80084f6:	600b      	str	r3, [r1, #0]
 80084f8:	4770      	bx	lr
 80084fa:	4610      	mov	r0, r2
 80084fc:	e7e9      	b.n	80084d2 <__lo0bits+0x2a>
 80084fe:	2000      	movs	r0, #0
 8008500:	4770      	bx	lr
 8008502:	2020      	movs	r0, #32
 8008504:	4770      	bx	lr
	...

08008508 <__i2b>:
 8008508:	b510      	push	{r4, lr}
 800850a:	460c      	mov	r4, r1
 800850c:	2101      	movs	r1, #1
 800850e:	f7ff ff03 	bl	8008318 <_Balloc>
 8008512:	4602      	mov	r2, r0
 8008514:	b928      	cbnz	r0, 8008522 <__i2b+0x1a>
 8008516:	4b05      	ldr	r3, [pc, #20]	; (800852c <__i2b+0x24>)
 8008518:	4805      	ldr	r0, [pc, #20]	; (8008530 <__i2b+0x28>)
 800851a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800851e:	f000 fd35 	bl	8008f8c <__assert_func>
 8008522:	2301      	movs	r3, #1
 8008524:	6144      	str	r4, [r0, #20]
 8008526:	6103      	str	r3, [r0, #16]
 8008528:	bd10      	pop	{r4, pc}
 800852a:	bf00      	nop
 800852c:	0800932b 	.word	0x0800932b
 8008530:	0800939c 	.word	0x0800939c

08008534 <__multiply>:
 8008534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008538:	4691      	mov	r9, r2
 800853a:	690a      	ldr	r2, [r1, #16]
 800853c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008540:	429a      	cmp	r2, r3
 8008542:	bfb8      	it	lt
 8008544:	460b      	movlt	r3, r1
 8008546:	460c      	mov	r4, r1
 8008548:	bfbc      	itt	lt
 800854a:	464c      	movlt	r4, r9
 800854c:	4699      	movlt	r9, r3
 800854e:	6927      	ldr	r7, [r4, #16]
 8008550:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008554:	68a3      	ldr	r3, [r4, #8]
 8008556:	6861      	ldr	r1, [r4, #4]
 8008558:	eb07 060a 	add.w	r6, r7, sl
 800855c:	42b3      	cmp	r3, r6
 800855e:	b085      	sub	sp, #20
 8008560:	bfb8      	it	lt
 8008562:	3101      	addlt	r1, #1
 8008564:	f7ff fed8 	bl	8008318 <_Balloc>
 8008568:	b930      	cbnz	r0, 8008578 <__multiply+0x44>
 800856a:	4602      	mov	r2, r0
 800856c:	4b44      	ldr	r3, [pc, #272]	; (8008680 <__multiply+0x14c>)
 800856e:	4845      	ldr	r0, [pc, #276]	; (8008684 <__multiply+0x150>)
 8008570:	f240 115d 	movw	r1, #349	; 0x15d
 8008574:	f000 fd0a 	bl	8008f8c <__assert_func>
 8008578:	f100 0514 	add.w	r5, r0, #20
 800857c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008580:	462b      	mov	r3, r5
 8008582:	2200      	movs	r2, #0
 8008584:	4543      	cmp	r3, r8
 8008586:	d321      	bcc.n	80085cc <__multiply+0x98>
 8008588:	f104 0314 	add.w	r3, r4, #20
 800858c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008590:	f109 0314 	add.w	r3, r9, #20
 8008594:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008598:	9202      	str	r2, [sp, #8]
 800859a:	1b3a      	subs	r2, r7, r4
 800859c:	3a15      	subs	r2, #21
 800859e:	f022 0203 	bic.w	r2, r2, #3
 80085a2:	3204      	adds	r2, #4
 80085a4:	f104 0115 	add.w	r1, r4, #21
 80085a8:	428f      	cmp	r7, r1
 80085aa:	bf38      	it	cc
 80085ac:	2204      	movcc	r2, #4
 80085ae:	9201      	str	r2, [sp, #4]
 80085b0:	9a02      	ldr	r2, [sp, #8]
 80085b2:	9303      	str	r3, [sp, #12]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d80c      	bhi.n	80085d2 <__multiply+0x9e>
 80085b8:	2e00      	cmp	r6, #0
 80085ba:	dd03      	ble.n	80085c4 <__multiply+0x90>
 80085bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d05a      	beq.n	800867a <__multiply+0x146>
 80085c4:	6106      	str	r6, [r0, #16]
 80085c6:	b005      	add	sp, #20
 80085c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085cc:	f843 2b04 	str.w	r2, [r3], #4
 80085d0:	e7d8      	b.n	8008584 <__multiply+0x50>
 80085d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80085d6:	f1ba 0f00 	cmp.w	sl, #0
 80085da:	d024      	beq.n	8008626 <__multiply+0xf2>
 80085dc:	f104 0e14 	add.w	lr, r4, #20
 80085e0:	46a9      	mov	r9, r5
 80085e2:	f04f 0c00 	mov.w	ip, #0
 80085e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085ea:	f8d9 1000 	ldr.w	r1, [r9]
 80085ee:	fa1f fb82 	uxth.w	fp, r2
 80085f2:	b289      	uxth	r1, r1
 80085f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80085f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80085fc:	f8d9 2000 	ldr.w	r2, [r9]
 8008600:	4461      	add	r1, ip
 8008602:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008606:	fb0a c20b 	mla	r2, sl, fp, ip
 800860a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800860e:	b289      	uxth	r1, r1
 8008610:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008614:	4577      	cmp	r7, lr
 8008616:	f849 1b04 	str.w	r1, [r9], #4
 800861a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800861e:	d8e2      	bhi.n	80085e6 <__multiply+0xb2>
 8008620:	9a01      	ldr	r2, [sp, #4]
 8008622:	f845 c002 	str.w	ip, [r5, r2]
 8008626:	9a03      	ldr	r2, [sp, #12]
 8008628:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800862c:	3304      	adds	r3, #4
 800862e:	f1b9 0f00 	cmp.w	r9, #0
 8008632:	d020      	beq.n	8008676 <__multiply+0x142>
 8008634:	6829      	ldr	r1, [r5, #0]
 8008636:	f104 0c14 	add.w	ip, r4, #20
 800863a:	46ae      	mov	lr, r5
 800863c:	f04f 0a00 	mov.w	sl, #0
 8008640:	f8bc b000 	ldrh.w	fp, [ip]
 8008644:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008648:	fb09 220b 	mla	r2, r9, fp, r2
 800864c:	4492      	add	sl, r2
 800864e:	b289      	uxth	r1, r1
 8008650:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008654:	f84e 1b04 	str.w	r1, [lr], #4
 8008658:	f85c 2b04 	ldr.w	r2, [ip], #4
 800865c:	f8be 1000 	ldrh.w	r1, [lr]
 8008660:	0c12      	lsrs	r2, r2, #16
 8008662:	fb09 1102 	mla	r1, r9, r2, r1
 8008666:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800866a:	4567      	cmp	r7, ip
 800866c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008670:	d8e6      	bhi.n	8008640 <__multiply+0x10c>
 8008672:	9a01      	ldr	r2, [sp, #4]
 8008674:	50a9      	str	r1, [r5, r2]
 8008676:	3504      	adds	r5, #4
 8008678:	e79a      	b.n	80085b0 <__multiply+0x7c>
 800867a:	3e01      	subs	r6, #1
 800867c:	e79c      	b.n	80085b8 <__multiply+0x84>
 800867e:	bf00      	nop
 8008680:	0800932b 	.word	0x0800932b
 8008684:	0800939c 	.word	0x0800939c

08008688 <__pow5mult>:
 8008688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800868c:	4615      	mov	r5, r2
 800868e:	f012 0203 	ands.w	r2, r2, #3
 8008692:	4606      	mov	r6, r0
 8008694:	460f      	mov	r7, r1
 8008696:	d007      	beq.n	80086a8 <__pow5mult+0x20>
 8008698:	4c25      	ldr	r4, [pc, #148]	; (8008730 <__pow5mult+0xa8>)
 800869a:	3a01      	subs	r2, #1
 800869c:	2300      	movs	r3, #0
 800869e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086a2:	f7ff fe9b 	bl	80083dc <__multadd>
 80086a6:	4607      	mov	r7, r0
 80086a8:	10ad      	asrs	r5, r5, #2
 80086aa:	d03d      	beq.n	8008728 <__pow5mult+0xa0>
 80086ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80086ae:	b97c      	cbnz	r4, 80086d0 <__pow5mult+0x48>
 80086b0:	2010      	movs	r0, #16
 80086b2:	f7ff fe1b 	bl	80082ec <malloc>
 80086b6:	4602      	mov	r2, r0
 80086b8:	6270      	str	r0, [r6, #36]	; 0x24
 80086ba:	b928      	cbnz	r0, 80086c8 <__pow5mult+0x40>
 80086bc:	4b1d      	ldr	r3, [pc, #116]	; (8008734 <__pow5mult+0xac>)
 80086be:	481e      	ldr	r0, [pc, #120]	; (8008738 <__pow5mult+0xb0>)
 80086c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80086c4:	f000 fc62 	bl	8008f8c <__assert_func>
 80086c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086cc:	6004      	str	r4, [r0, #0]
 80086ce:	60c4      	str	r4, [r0, #12]
 80086d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80086d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086d8:	b94c      	cbnz	r4, 80086ee <__pow5mult+0x66>
 80086da:	f240 2171 	movw	r1, #625	; 0x271
 80086de:	4630      	mov	r0, r6
 80086e0:	f7ff ff12 	bl	8008508 <__i2b>
 80086e4:	2300      	movs	r3, #0
 80086e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80086ea:	4604      	mov	r4, r0
 80086ec:	6003      	str	r3, [r0, #0]
 80086ee:	f04f 0900 	mov.w	r9, #0
 80086f2:	07eb      	lsls	r3, r5, #31
 80086f4:	d50a      	bpl.n	800870c <__pow5mult+0x84>
 80086f6:	4639      	mov	r1, r7
 80086f8:	4622      	mov	r2, r4
 80086fa:	4630      	mov	r0, r6
 80086fc:	f7ff ff1a 	bl	8008534 <__multiply>
 8008700:	4639      	mov	r1, r7
 8008702:	4680      	mov	r8, r0
 8008704:	4630      	mov	r0, r6
 8008706:	f7ff fe47 	bl	8008398 <_Bfree>
 800870a:	4647      	mov	r7, r8
 800870c:	106d      	asrs	r5, r5, #1
 800870e:	d00b      	beq.n	8008728 <__pow5mult+0xa0>
 8008710:	6820      	ldr	r0, [r4, #0]
 8008712:	b938      	cbnz	r0, 8008724 <__pow5mult+0x9c>
 8008714:	4622      	mov	r2, r4
 8008716:	4621      	mov	r1, r4
 8008718:	4630      	mov	r0, r6
 800871a:	f7ff ff0b 	bl	8008534 <__multiply>
 800871e:	6020      	str	r0, [r4, #0]
 8008720:	f8c0 9000 	str.w	r9, [r0]
 8008724:	4604      	mov	r4, r0
 8008726:	e7e4      	b.n	80086f2 <__pow5mult+0x6a>
 8008728:	4638      	mov	r0, r7
 800872a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800872e:	bf00      	nop
 8008730:	080094e8 	.word	0x080094e8
 8008734:	080092b9 	.word	0x080092b9
 8008738:	0800939c 	.word	0x0800939c

0800873c <__lshift>:
 800873c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008740:	460c      	mov	r4, r1
 8008742:	6849      	ldr	r1, [r1, #4]
 8008744:	6923      	ldr	r3, [r4, #16]
 8008746:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800874a:	68a3      	ldr	r3, [r4, #8]
 800874c:	4607      	mov	r7, r0
 800874e:	4691      	mov	r9, r2
 8008750:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008754:	f108 0601 	add.w	r6, r8, #1
 8008758:	42b3      	cmp	r3, r6
 800875a:	db0b      	blt.n	8008774 <__lshift+0x38>
 800875c:	4638      	mov	r0, r7
 800875e:	f7ff fddb 	bl	8008318 <_Balloc>
 8008762:	4605      	mov	r5, r0
 8008764:	b948      	cbnz	r0, 800877a <__lshift+0x3e>
 8008766:	4602      	mov	r2, r0
 8008768:	4b2a      	ldr	r3, [pc, #168]	; (8008814 <__lshift+0xd8>)
 800876a:	482b      	ldr	r0, [pc, #172]	; (8008818 <__lshift+0xdc>)
 800876c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008770:	f000 fc0c 	bl	8008f8c <__assert_func>
 8008774:	3101      	adds	r1, #1
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	e7ee      	b.n	8008758 <__lshift+0x1c>
 800877a:	2300      	movs	r3, #0
 800877c:	f100 0114 	add.w	r1, r0, #20
 8008780:	f100 0210 	add.w	r2, r0, #16
 8008784:	4618      	mov	r0, r3
 8008786:	4553      	cmp	r3, sl
 8008788:	db37      	blt.n	80087fa <__lshift+0xbe>
 800878a:	6920      	ldr	r0, [r4, #16]
 800878c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008790:	f104 0314 	add.w	r3, r4, #20
 8008794:	f019 091f 	ands.w	r9, r9, #31
 8008798:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800879c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80087a0:	d02f      	beq.n	8008802 <__lshift+0xc6>
 80087a2:	f1c9 0e20 	rsb	lr, r9, #32
 80087a6:	468a      	mov	sl, r1
 80087a8:	f04f 0c00 	mov.w	ip, #0
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	fa02 f209 	lsl.w	r2, r2, r9
 80087b2:	ea42 020c 	orr.w	r2, r2, ip
 80087b6:	f84a 2b04 	str.w	r2, [sl], #4
 80087ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80087be:	4298      	cmp	r0, r3
 80087c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80087c4:	d8f2      	bhi.n	80087ac <__lshift+0x70>
 80087c6:	1b03      	subs	r3, r0, r4
 80087c8:	3b15      	subs	r3, #21
 80087ca:	f023 0303 	bic.w	r3, r3, #3
 80087ce:	3304      	adds	r3, #4
 80087d0:	f104 0215 	add.w	r2, r4, #21
 80087d4:	4290      	cmp	r0, r2
 80087d6:	bf38      	it	cc
 80087d8:	2304      	movcc	r3, #4
 80087da:	f841 c003 	str.w	ip, [r1, r3]
 80087de:	f1bc 0f00 	cmp.w	ip, #0
 80087e2:	d001      	beq.n	80087e8 <__lshift+0xac>
 80087e4:	f108 0602 	add.w	r6, r8, #2
 80087e8:	3e01      	subs	r6, #1
 80087ea:	4638      	mov	r0, r7
 80087ec:	612e      	str	r6, [r5, #16]
 80087ee:	4621      	mov	r1, r4
 80087f0:	f7ff fdd2 	bl	8008398 <_Bfree>
 80087f4:	4628      	mov	r0, r5
 80087f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80087fe:	3301      	adds	r3, #1
 8008800:	e7c1      	b.n	8008786 <__lshift+0x4a>
 8008802:	3904      	subs	r1, #4
 8008804:	f853 2b04 	ldr.w	r2, [r3], #4
 8008808:	f841 2f04 	str.w	r2, [r1, #4]!
 800880c:	4298      	cmp	r0, r3
 800880e:	d8f9      	bhi.n	8008804 <__lshift+0xc8>
 8008810:	e7ea      	b.n	80087e8 <__lshift+0xac>
 8008812:	bf00      	nop
 8008814:	0800932b 	.word	0x0800932b
 8008818:	0800939c 	.word	0x0800939c

0800881c <__mcmp>:
 800881c:	b530      	push	{r4, r5, lr}
 800881e:	6902      	ldr	r2, [r0, #16]
 8008820:	690c      	ldr	r4, [r1, #16]
 8008822:	1b12      	subs	r2, r2, r4
 8008824:	d10e      	bne.n	8008844 <__mcmp+0x28>
 8008826:	f100 0314 	add.w	r3, r0, #20
 800882a:	3114      	adds	r1, #20
 800882c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008830:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008834:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008838:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800883c:	42a5      	cmp	r5, r4
 800883e:	d003      	beq.n	8008848 <__mcmp+0x2c>
 8008840:	d305      	bcc.n	800884e <__mcmp+0x32>
 8008842:	2201      	movs	r2, #1
 8008844:	4610      	mov	r0, r2
 8008846:	bd30      	pop	{r4, r5, pc}
 8008848:	4283      	cmp	r3, r0
 800884a:	d3f3      	bcc.n	8008834 <__mcmp+0x18>
 800884c:	e7fa      	b.n	8008844 <__mcmp+0x28>
 800884e:	f04f 32ff 	mov.w	r2, #4294967295
 8008852:	e7f7      	b.n	8008844 <__mcmp+0x28>

08008854 <__mdiff>:
 8008854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008858:	460c      	mov	r4, r1
 800885a:	4606      	mov	r6, r0
 800885c:	4611      	mov	r1, r2
 800885e:	4620      	mov	r0, r4
 8008860:	4690      	mov	r8, r2
 8008862:	f7ff ffdb 	bl	800881c <__mcmp>
 8008866:	1e05      	subs	r5, r0, #0
 8008868:	d110      	bne.n	800888c <__mdiff+0x38>
 800886a:	4629      	mov	r1, r5
 800886c:	4630      	mov	r0, r6
 800886e:	f7ff fd53 	bl	8008318 <_Balloc>
 8008872:	b930      	cbnz	r0, 8008882 <__mdiff+0x2e>
 8008874:	4b3a      	ldr	r3, [pc, #232]	; (8008960 <__mdiff+0x10c>)
 8008876:	4602      	mov	r2, r0
 8008878:	f240 2132 	movw	r1, #562	; 0x232
 800887c:	4839      	ldr	r0, [pc, #228]	; (8008964 <__mdiff+0x110>)
 800887e:	f000 fb85 	bl	8008f8c <__assert_func>
 8008882:	2301      	movs	r3, #1
 8008884:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888c:	bfa4      	itt	ge
 800888e:	4643      	movge	r3, r8
 8008890:	46a0      	movge	r8, r4
 8008892:	4630      	mov	r0, r6
 8008894:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008898:	bfa6      	itte	ge
 800889a:	461c      	movge	r4, r3
 800889c:	2500      	movge	r5, #0
 800889e:	2501      	movlt	r5, #1
 80088a0:	f7ff fd3a 	bl	8008318 <_Balloc>
 80088a4:	b920      	cbnz	r0, 80088b0 <__mdiff+0x5c>
 80088a6:	4b2e      	ldr	r3, [pc, #184]	; (8008960 <__mdiff+0x10c>)
 80088a8:	4602      	mov	r2, r0
 80088aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80088ae:	e7e5      	b.n	800887c <__mdiff+0x28>
 80088b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80088b4:	6926      	ldr	r6, [r4, #16]
 80088b6:	60c5      	str	r5, [r0, #12]
 80088b8:	f104 0914 	add.w	r9, r4, #20
 80088bc:	f108 0514 	add.w	r5, r8, #20
 80088c0:	f100 0e14 	add.w	lr, r0, #20
 80088c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80088c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80088cc:	f108 0210 	add.w	r2, r8, #16
 80088d0:	46f2      	mov	sl, lr
 80088d2:	2100      	movs	r1, #0
 80088d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80088d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80088dc:	fa1f f883 	uxth.w	r8, r3
 80088e0:	fa11 f18b 	uxtah	r1, r1, fp
 80088e4:	0c1b      	lsrs	r3, r3, #16
 80088e6:	eba1 0808 	sub.w	r8, r1, r8
 80088ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80088f2:	fa1f f888 	uxth.w	r8, r8
 80088f6:	1419      	asrs	r1, r3, #16
 80088f8:	454e      	cmp	r6, r9
 80088fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80088fe:	f84a 3b04 	str.w	r3, [sl], #4
 8008902:	d8e7      	bhi.n	80088d4 <__mdiff+0x80>
 8008904:	1b33      	subs	r3, r6, r4
 8008906:	3b15      	subs	r3, #21
 8008908:	f023 0303 	bic.w	r3, r3, #3
 800890c:	3304      	adds	r3, #4
 800890e:	3415      	adds	r4, #21
 8008910:	42a6      	cmp	r6, r4
 8008912:	bf38      	it	cc
 8008914:	2304      	movcc	r3, #4
 8008916:	441d      	add	r5, r3
 8008918:	4473      	add	r3, lr
 800891a:	469e      	mov	lr, r3
 800891c:	462e      	mov	r6, r5
 800891e:	4566      	cmp	r6, ip
 8008920:	d30e      	bcc.n	8008940 <__mdiff+0xec>
 8008922:	f10c 0203 	add.w	r2, ip, #3
 8008926:	1b52      	subs	r2, r2, r5
 8008928:	f022 0203 	bic.w	r2, r2, #3
 800892c:	3d03      	subs	r5, #3
 800892e:	45ac      	cmp	ip, r5
 8008930:	bf38      	it	cc
 8008932:	2200      	movcc	r2, #0
 8008934:	441a      	add	r2, r3
 8008936:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800893a:	b17b      	cbz	r3, 800895c <__mdiff+0x108>
 800893c:	6107      	str	r7, [r0, #16]
 800893e:	e7a3      	b.n	8008888 <__mdiff+0x34>
 8008940:	f856 8b04 	ldr.w	r8, [r6], #4
 8008944:	fa11 f288 	uxtah	r2, r1, r8
 8008948:	1414      	asrs	r4, r2, #16
 800894a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800894e:	b292      	uxth	r2, r2
 8008950:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008954:	f84e 2b04 	str.w	r2, [lr], #4
 8008958:	1421      	asrs	r1, r4, #16
 800895a:	e7e0      	b.n	800891e <__mdiff+0xca>
 800895c:	3f01      	subs	r7, #1
 800895e:	e7ea      	b.n	8008936 <__mdiff+0xe2>
 8008960:	0800932b 	.word	0x0800932b
 8008964:	0800939c 	.word	0x0800939c

08008968 <__d2b>:
 8008968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800896c:	4689      	mov	r9, r1
 800896e:	2101      	movs	r1, #1
 8008970:	ec57 6b10 	vmov	r6, r7, d0
 8008974:	4690      	mov	r8, r2
 8008976:	f7ff fccf 	bl	8008318 <_Balloc>
 800897a:	4604      	mov	r4, r0
 800897c:	b930      	cbnz	r0, 800898c <__d2b+0x24>
 800897e:	4602      	mov	r2, r0
 8008980:	4b25      	ldr	r3, [pc, #148]	; (8008a18 <__d2b+0xb0>)
 8008982:	4826      	ldr	r0, [pc, #152]	; (8008a1c <__d2b+0xb4>)
 8008984:	f240 310a 	movw	r1, #778	; 0x30a
 8008988:	f000 fb00 	bl	8008f8c <__assert_func>
 800898c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008990:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008994:	bb35      	cbnz	r5, 80089e4 <__d2b+0x7c>
 8008996:	2e00      	cmp	r6, #0
 8008998:	9301      	str	r3, [sp, #4]
 800899a:	d028      	beq.n	80089ee <__d2b+0x86>
 800899c:	4668      	mov	r0, sp
 800899e:	9600      	str	r6, [sp, #0]
 80089a0:	f7ff fd82 	bl	80084a8 <__lo0bits>
 80089a4:	9900      	ldr	r1, [sp, #0]
 80089a6:	b300      	cbz	r0, 80089ea <__d2b+0x82>
 80089a8:	9a01      	ldr	r2, [sp, #4]
 80089aa:	f1c0 0320 	rsb	r3, r0, #32
 80089ae:	fa02 f303 	lsl.w	r3, r2, r3
 80089b2:	430b      	orrs	r3, r1
 80089b4:	40c2      	lsrs	r2, r0
 80089b6:	6163      	str	r3, [r4, #20]
 80089b8:	9201      	str	r2, [sp, #4]
 80089ba:	9b01      	ldr	r3, [sp, #4]
 80089bc:	61a3      	str	r3, [r4, #24]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	bf14      	ite	ne
 80089c2:	2202      	movne	r2, #2
 80089c4:	2201      	moveq	r2, #1
 80089c6:	6122      	str	r2, [r4, #16]
 80089c8:	b1d5      	cbz	r5, 8008a00 <__d2b+0x98>
 80089ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80089ce:	4405      	add	r5, r0
 80089d0:	f8c9 5000 	str.w	r5, [r9]
 80089d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80089d8:	f8c8 0000 	str.w	r0, [r8]
 80089dc:	4620      	mov	r0, r4
 80089de:	b003      	add	sp, #12
 80089e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089e8:	e7d5      	b.n	8008996 <__d2b+0x2e>
 80089ea:	6161      	str	r1, [r4, #20]
 80089ec:	e7e5      	b.n	80089ba <__d2b+0x52>
 80089ee:	a801      	add	r0, sp, #4
 80089f0:	f7ff fd5a 	bl	80084a8 <__lo0bits>
 80089f4:	9b01      	ldr	r3, [sp, #4]
 80089f6:	6163      	str	r3, [r4, #20]
 80089f8:	2201      	movs	r2, #1
 80089fa:	6122      	str	r2, [r4, #16]
 80089fc:	3020      	adds	r0, #32
 80089fe:	e7e3      	b.n	80089c8 <__d2b+0x60>
 8008a00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a08:	f8c9 0000 	str.w	r0, [r9]
 8008a0c:	6918      	ldr	r0, [r3, #16]
 8008a0e:	f7ff fd2b 	bl	8008468 <__hi0bits>
 8008a12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a16:	e7df      	b.n	80089d8 <__d2b+0x70>
 8008a18:	0800932b 	.word	0x0800932b
 8008a1c:	0800939c 	.word	0x0800939c

08008a20 <_calloc_r>:
 8008a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a22:	fba1 2402 	umull	r2, r4, r1, r2
 8008a26:	b94c      	cbnz	r4, 8008a3c <_calloc_r+0x1c>
 8008a28:	4611      	mov	r1, r2
 8008a2a:	9201      	str	r2, [sp, #4]
 8008a2c:	f000 f87a 	bl	8008b24 <_malloc_r>
 8008a30:	9a01      	ldr	r2, [sp, #4]
 8008a32:	4605      	mov	r5, r0
 8008a34:	b930      	cbnz	r0, 8008a44 <_calloc_r+0x24>
 8008a36:	4628      	mov	r0, r5
 8008a38:	b003      	add	sp, #12
 8008a3a:	bd30      	pop	{r4, r5, pc}
 8008a3c:	220c      	movs	r2, #12
 8008a3e:	6002      	str	r2, [r0, #0]
 8008a40:	2500      	movs	r5, #0
 8008a42:	e7f8      	b.n	8008a36 <_calloc_r+0x16>
 8008a44:	4621      	mov	r1, r4
 8008a46:	f7fd fe9b 	bl	8006780 <memset>
 8008a4a:	e7f4      	b.n	8008a36 <_calloc_r+0x16>

08008a4c <_free_r>:
 8008a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a4e:	2900      	cmp	r1, #0
 8008a50:	d044      	beq.n	8008adc <_free_r+0x90>
 8008a52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a56:	9001      	str	r0, [sp, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a5e:	bfb8      	it	lt
 8008a60:	18e4      	addlt	r4, r4, r3
 8008a62:	f000 fb19 	bl	8009098 <__malloc_lock>
 8008a66:	4a1e      	ldr	r2, [pc, #120]	; (8008ae0 <_free_r+0x94>)
 8008a68:	9801      	ldr	r0, [sp, #4]
 8008a6a:	6813      	ldr	r3, [r2, #0]
 8008a6c:	b933      	cbnz	r3, 8008a7c <_free_r+0x30>
 8008a6e:	6063      	str	r3, [r4, #4]
 8008a70:	6014      	str	r4, [r2, #0]
 8008a72:	b003      	add	sp, #12
 8008a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a78:	f000 bb14 	b.w	80090a4 <__malloc_unlock>
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	d908      	bls.n	8008a92 <_free_r+0x46>
 8008a80:	6825      	ldr	r5, [r4, #0]
 8008a82:	1961      	adds	r1, r4, r5
 8008a84:	428b      	cmp	r3, r1
 8008a86:	bf01      	itttt	eq
 8008a88:	6819      	ldreq	r1, [r3, #0]
 8008a8a:	685b      	ldreq	r3, [r3, #4]
 8008a8c:	1949      	addeq	r1, r1, r5
 8008a8e:	6021      	streq	r1, [r4, #0]
 8008a90:	e7ed      	b.n	8008a6e <_free_r+0x22>
 8008a92:	461a      	mov	r2, r3
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	b10b      	cbz	r3, 8008a9c <_free_r+0x50>
 8008a98:	42a3      	cmp	r3, r4
 8008a9a:	d9fa      	bls.n	8008a92 <_free_r+0x46>
 8008a9c:	6811      	ldr	r1, [r2, #0]
 8008a9e:	1855      	adds	r5, r2, r1
 8008aa0:	42a5      	cmp	r5, r4
 8008aa2:	d10b      	bne.n	8008abc <_free_r+0x70>
 8008aa4:	6824      	ldr	r4, [r4, #0]
 8008aa6:	4421      	add	r1, r4
 8008aa8:	1854      	adds	r4, r2, r1
 8008aaa:	42a3      	cmp	r3, r4
 8008aac:	6011      	str	r1, [r2, #0]
 8008aae:	d1e0      	bne.n	8008a72 <_free_r+0x26>
 8008ab0:	681c      	ldr	r4, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	6053      	str	r3, [r2, #4]
 8008ab6:	4421      	add	r1, r4
 8008ab8:	6011      	str	r1, [r2, #0]
 8008aba:	e7da      	b.n	8008a72 <_free_r+0x26>
 8008abc:	d902      	bls.n	8008ac4 <_free_r+0x78>
 8008abe:	230c      	movs	r3, #12
 8008ac0:	6003      	str	r3, [r0, #0]
 8008ac2:	e7d6      	b.n	8008a72 <_free_r+0x26>
 8008ac4:	6825      	ldr	r5, [r4, #0]
 8008ac6:	1961      	adds	r1, r4, r5
 8008ac8:	428b      	cmp	r3, r1
 8008aca:	bf04      	itt	eq
 8008acc:	6819      	ldreq	r1, [r3, #0]
 8008ace:	685b      	ldreq	r3, [r3, #4]
 8008ad0:	6063      	str	r3, [r4, #4]
 8008ad2:	bf04      	itt	eq
 8008ad4:	1949      	addeq	r1, r1, r5
 8008ad6:	6021      	streq	r1, [r4, #0]
 8008ad8:	6054      	str	r4, [r2, #4]
 8008ada:	e7ca      	b.n	8008a72 <_free_r+0x26>
 8008adc:	b003      	add	sp, #12
 8008ade:	bd30      	pop	{r4, r5, pc}
 8008ae0:	24000348 	.word	0x24000348

08008ae4 <sbrk_aligned>:
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	4e0e      	ldr	r6, [pc, #56]	; (8008b20 <sbrk_aligned+0x3c>)
 8008ae8:	460c      	mov	r4, r1
 8008aea:	6831      	ldr	r1, [r6, #0]
 8008aec:	4605      	mov	r5, r0
 8008aee:	b911      	cbnz	r1, 8008af6 <sbrk_aligned+0x12>
 8008af0:	f000 f9e6 	bl	8008ec0 <_sbrk_r>
 8008af4:	6030      	str	r0, [r6, #0]
 8008af6:	4621      	mov	r1, r4
 8008af8:	4628      	mov	r0, r5
 8008afa:	f000 f9e1 	bl	8008ec0 <_sbrk_r>
 8008afe:	1c43      	adds	r3, r0, #1
 8008b00:	d00a      	beq.n	8008b18 <sbrk_aligned+0x34>
 8008b02:	1cc4      	adds	r4, r0, #3
 8008b04:	f024 0403 	bic.w	r4, r4, #3
 8008b08:	42a0      	cmp	r0, r4
 8008b0a:	d007      	beq.n	8008b1c <sbrk_aligned+0x38>
 8008b0c:	1a21      	subs	r1, r4, r0
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f000 f9d6 	bl	8008ec0 <_sbrk_r>
 8008b14:	3001      	adds	r0, #1
 8008b16:	d101      	bne.n	8008b1c <sbrk_aligned+0x38>
 8008b18:	f04f 34ff 	mov.w	r4, #4294967295
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
 8008b20:	2400034c 	.word	0x2400034c

08008b24 <_malloc_r>:
 8008b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b28:	1ccd      	adds	r5, r1, #3
 8008b2a:	f025 0503 	bic.w	r5, r5, #3
 8008b2e:	3508      	adds	r5, #8
 8008b30:	2d0c      	cmp	r5, #12
 8008b32:	bf38      	it	cc
 8008b34:	250c      	movcc	r5, #12
 8008b36:	2d00      	cmp	r5, #0
 8008b38:	4607      	mov	r7, r0
 8008b3a:	db01      	blt.n	8008b40 <_malloc_r+0x1c>
 8008b3c:	42a9      	cmp	r1, r5
 8008b3e:	d905      	bls.n	8008b4c <_malloc_r+0x28>
 8008b40:	230c      	movs	r3, #12
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	2600      	movs	r6, #0
 8008b46:	4630      	mov	r0, r6
 8008b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b4c:	4e2e      	ldr	r6, [pc, #184]	; (8008c08 <_malloc_r+0xe4>)
 8008b4e:	f000 faa3 	bl	8009098 <__malloc_lock>
 8008b52:	6833      	ldr	r3, [r6, #0]
 8008b54:	461c      	mov	r4, r3
 8008b56:	bb34      	cbnz	r4, 8008ba6 <_malloc_r+0x82>
 8008b58:	4629      	mov	r1, r5
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	f7ff ffc2 	bl	8008ae4 <sbrk_aligned>
 8008b60:	1c43      	adds	r3, r0, #1
 8008b62:	4604      	mov	r4, r0
 8008b64:	d14d      	bne.n	8008c02 <_malloc_r+0xde>
 8008b66:	6834      	ldr	r4, [r6, #0]
 8008b68:	4626      	mov	r6, r4
 8008b6a:	2e00      	cmp	r6, #0
 8008b6c:	d140      	bne.n	8008bf0 <_malloc_r+0xcc>
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	4631      	mov	r1, r6
 8008b72:	4638      	mov	r0, r7
 8008b74:	eb04 0803 	add.w	r8, r4, r3
 8008b78:	f000 f9a2 	bl	8008ec0 <_sbrk_r>
 8008b7c:	4580      	cmp	r8, r0
 8008b7e:	d13a      	bne.n	8008bf6 <_malloc_r+0xd2>
 8008b80:	6821      	ldr	r1, [r4, #0]
 8008b82:	3503      	adds	r5, #3
 8008b84:	1a6d      	subs	r5, r5, r1
 8008b86:	f025 0503 	bic.w	r5, r5, #3
 8008b8a:	3508      	adds	r5, #8
 8008b8c:	2d0c      	cmp	r5, #12
 8008b8e:	bf38      	it	cc
 8008b90:	250c      	movcc	r5, #12
 8008b92:	4629      	mov	r1, r5
 8008b94:	4638      	mov	r0, r7
 8008b96:	f7ff ffa5 	bl	8008ae4 <sbrk_aligned>
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d02b      	beq.n	8008bf6 <_malloc_r+0xd2>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	442b      	add	r3, r5
 8008ba2:	6023      	str	r3, [r4, #0]
 8008ba4:	e00e      	b.n	8008bc4 <_malloc_r+0xa0>
 8008ba6:	6822      	ldr	r2, [r4, #0]
 8008ba8:	1b52      	subs	r2, r2, r5
 8008baa:	d41e      	bmi.n	8008bea <_malloc_r+0xc6>
 8008bac:	2a0b      	cmp	r2, #11
 8008bae:	d916      	bls.n	8008bde <_malloc_r+0xba>
 8008bb0:	1961      	adds	r1, r4, r5
 8008bb2:	42a3      	cmp	r3, r4
 8008bb4:	6025      	str	r5, [r4, #0]
 8008bb6:	bf18      	it	ne
 8008bb8:	6059      	strne	r1, [r3, #4]
 8008bba:	6863      	ldr	r3, [r4, #4]
 8008bbc:	bf08      	it	eq
 8008bbe:	6031      	streq	r1, [r6, #0]
 8008bc0:	5162      	str	r2, [r4, r5]
 8008bc2:	604b      	str	r3, [r1, #4]
 8008bc4:	4638      	mov	r0, r7
 8008bc6:	f104 060b 	add.w	r6, r4, #11
 8008bca:	f000 fa6b 	bl	80090a4 <__malloc_unlock>
 8008bce:	f026 0607 	bic.w	r6, r6, #7
 8008bd2:	1d23      	adds	r3, r4, #4
 8008bd4:	1af2      	subs	r2, r6, r3
 8008bd6:	d0b6      	beq.n	8008b46 <_malloc_r+0x22>
 8008bd8:	1b9b      	subs	r3, r3, r6
 8008bda:	50a3      	str	r3, [r4, r2]
 8008bdc:	e7b3      	b.n	8008b46 <_malloc_r+0x22>
 8008bde:	6862      	ldr	r2, [r4, #4]
 8008be0:	42a3      	cmp	r3, r4
 8008be2:	bf0c      	ite	eq
 8008be4:	6032      	streq	r2, [r6, #0]
 8008be6:	605a      	strne	r2, [r3, #4]
 8008be8:	e7ec      	b.n	8008bc4 <_malloc_r+0xa0>
 8008bea:	4623      	mov	r3, r4
 8008bec:	6864      	ldr	r4, [r4, #4]
 8008bee:	e7b2      	b.n	8008b56 <_malloc_r+0x32>
 8008bf0:	4634      	mov	r4, r6
 8008bf2:	6876      	ldr	r6, [r6, #4]
 8008bf4:	e7b9      	b.n	8008b6a <_malloc_r+0x46>
 8008bf6:	230c      	movs	r3, #12
 8008bf8:	603b      	str	r3, [r7, #0]
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	f000 fa52 	bl	80090a4 <__malloc_unlock>
 8008c00:	e7a1      	b.n	8008b46 <_malloc_r+0x22>
 8008c02:	6025      	str	r5, [r4, #0]
 8008c04:	e7de      	b.n	8008bc4 <_malloc_r+0xa0>
 8008c06:	bf00      	nop
 8008c08:	24000348 	.word	0x24000348

08008c0c <__sfputc_r>:
 8008c0c:	6893      	ldr	r3, [r2, #8]
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	b410      	push	{r4}
 8008c14:	6093      	str	r3, [r2, #8]
 8008c16:	da08      	bge.n	8008c2a <__sfputc_r+0x1e>
 8008c18:	6994      	ldr	r4, [r2, #24]
 8008c1a:	42a3      	cmp	r3, r4
 8008c1c:	db01      	blt.n	8008c22 <__sfputc_r+0x16>
 8008c1e:	290a      	cmp	r1, #10
 8008c20:	d103      	bne.n	8008c2a <__sfputc_r+0x1e>
 8008c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c26:	f7fe ba83 	b.w	8007130 <__swbuf_r>
 8008c2a:	6813      	ldr	r3, [r2, #0]
 8008c2c:	1c58      	adds	r0, r3, #1
 8008c2e:	6010      	str	r0, [r2, #0]
 8008c30:	7019      	strb	r1, [r3, #0]
 8008c32:	4608      	mov	r0, r1
 8008c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <__sfputs_r>:
 8008c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3c:	4606      	mov	r6, r0
 8008c3e:	460f      	mov	r7, r1
 8008c40:	4614      	mov	r4, r2
 8008c42:	18d5      	adds	r5, r2, r3
 8008c44:	42ac      	cmp	r4, r5
 8008c46:	d101      	bne.n	8008c4c <__sfputs_r+0x12>
 8008c48:	2000      	movs	r0, #0
 8008c4a:	e007      	b.n	8008c5c <__sfputs_r+0x22>
 8008c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c50:	463a      	mov	r2, r7
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7ff ffda 	bl	8008c0c <__sfputc_r>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d1f3      	bne.n	8008c44 <__sfputs_r+0xa>
 8008c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c60 <_vfiprintf_r>:
 8008c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	460d      	mov	r5, r1
 8008c66:	b09d      	sub	sp, #116	; 0x74
 8008c68:	4614      	mov	r4, r2
 8008c6a:	4698      	mov	r8, r3
 8008c6c:	4606      	mov	r6, r0
 8008c6e:	b118      	cbz	r0, 8008c78 <_vfiprintf_r+0x18>
 8008c70:	6983      	ldr	r3, [r0, #24]
 8008c72:	b90b      	cbnz	r3, 8008c78 <_vfiprintf_r+0x18>
 8008c74:	f7ff fa30 	bl	80080d8 <__sinit>
 8008c78:	4b89      	ldr	r3, [pc, #548]	; (8008ea0 <_vfiprintf_r+0x240>)
 8008c7a:	429d      	cmp	r5, r3
 8008c7c:	d11b      	bne.n	8008cb6 <_vfiprintf_r+0x56>
 8008c7e:	6875      	ldr	r5, [r6, #4]
 8008c80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c82:	07d9      	lsls	r1, r3, #31
 8008c84:	d405      	bmi.n	8008c92 <_vfiprintf_r+0x32>
 8008c86:	89ab      	ldrh	r3, [r5, #12]
 8008c88:	059a      	lsls	r2, r3, #22
 8008c8a:	d402      	bmi.n	8008c92 <_vfiprintf_r+0x32>
 8008c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c8e:	f7ff fac6 	bl	800821e <__retarget_lock_acquire_recursive>
 8008c92:	89ab      	ldrh	r3, [r5, #12]
 8008c94:	071b      	lsls	r3, r3, #28
 8008c96:	d501      	bpl.n	8008c9c <_vfiprintf_r+0x3c>
 8008c98:	692b      	ldr	r3, [r5, #16]
 8008c9a:	b9eb      	cbnz	r3, 8008cd8 <_vfiprintf_r+0x78>
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f7fe fa98 	bl	80071d4 <__swsetup_r>
 8008ca4:	b1c0      	cbz	r0, 8008cd8 <_vfiprintf_r+0x78>
 8008ca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ca8:	07dc      	lsls	r4, r3, #31
 8008caa:	d50e      	bpl.n	8008cca <_vfiprintf_r+0x6a>
 8008cac:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb0:	b01d      	add	sp, #116	; 0x74
 8008cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb6:	4b7b      	ldr	r3, [pc, #492]	; (8008ea4 <_vfiprintf_r+0x244>)
 8008cb8:	429d      	cmp	r5, r3
 8008cba:	d101      	bne.n	8008cc0 <_vfiprintf_r+0x60>
 8008cbc:	68b5      	ldr	r5, [r6, #8]
 8008cbe:	e7df      	b.n	8008c80 <_vfiprintf_r+0x20>
 8008cc0:	4b79      	ldr	r3, [pc, #484]	; (8008ea8 <_vfiprintf_r+0x248>)
 8008cc2:	429d      	cmp	r5, r3
 8008cc4:	bf08      	it	eq
 8008cc6:	68f5      	ldreq	r5, [r6, #12]
 8008cc8:	e7da      	b.n	8008c80 <_vfiprintf_r+0x20>
 8008cca:	89ab      	ldrh	r3, [r5, #12]
 8008ccc:	0598      	lsls	r0, r3, #22
 8008cce:	d4ed      	bmi.n	8008cac <_vfiprintf_r+0x4c>
 8008cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cd2:	f7ff faa5 	bl	8008220 <__retarget_lock_release_recursive>
 8008cd6:	e7e9      	b.n	8008cac <_vfiprintf_r+0x4c>
 8008cd8:	2300      	movs	r3, #0
 8008cda:	9309      	str	r3, [sp, #36]	; 0x24
 8008cdc:	2320      	movs	r3, #32
 8008cde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ce2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ce6:	2330      	movs	r3, #48	; 0x30
 8008ce8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008eac <_vfiprintf_r+0x24c>
 8008cec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cf0:	f04f 0901 	mov.w	r9, #1
 8008cf4:	4623      	mov	r3, r4
 8008cf6:	469a      	mov	sl, r3
 8008cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cfc:	b10a      	cbz	r2, 8008d02 <_vfiprintf_r+0xa2>
 8008cfe:	2a25      	cmp	r2, #37	; 0x25
 8008d00:	d1f9      	bne.n	8008cf6 <_vfiprintf_r+0x96>
 8008d02:	ebba 0b04 	subs.w	fp, sl, r4
 8008d06:	d00b      	beq.n	8008d20 <_vfiprintf_r+0xc0>
 8008d08:	465b      	mov	r3, fp
 8008d0a:	4622      	mov	r2, r4
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	4630      	mov	r0, r6
 8008d10:	f7ff ff93 	bl	8008c3a <__sfputs_r>
 8008d14:	3001      	adds	r0, #1
 8008d16:	f000 80aa 	beq.w	8008e6e <_vfiprintf_r+0x20e>
 8008d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d1c:	445a      	add	r2, fp
 8008d1e:	9209      	str	r2, [sp, #36]	; 0x24
 8008d20:	f89a 3000 	ldrb.w	r3, [sl]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 80a2 	beq.w	8008e6e <_vfiprintf_r+0x20e>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d34:	f10a 0a01 	add.w	sl, sl, #1
 8008d38:	9304      	str	r3, [sp, #16]
 8008d3a:	9307      	str	r3, [sp, #28]
 8008d3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d40:	931a      	str	r3, [sp, #104]	; 0x68
 8008d42:	4654      	mov	r4, sl
 8008d44:	2205      	movs	r2, #5
 8008d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d4a:	4858      	ldr	r0, [pc, #352]	; (8008eac <_vfiprintf_r+0x24c>)
 8008d4c:	f7f7 fad0 	bl	80002f0 <memchr>
 8008d50:	9a04      	ldr	r2, [sp, #16]
 8008d52:	b9d8      	cbnz	r0, 8008d8c <_vfiprintf_r+0x12c>
 8008d54:	06d1      	lsls	r1, r2, #27
 8008d56:	bf44      	itt	mi
 8008d58:	2320      	movmi	r3, #32
 8008d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d5e:	0713      	lsls	r3, r2, #28
 8008d60:	bf44      	itt	mi
 8008d62:	232b      	movmi	r3, #43	; 0x2b
 8008d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d68:	f89a 3000 	ldrb.w	r3, [sl]
 8008d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d6e:	d015      	beq.n	8008d9c <_vfiprintf_r+0x13c>
 8008d70:	9a07      	ldr	r2, [sp, #28]
 8008d72:	4654      	mov	r4, sl
 8008d74:	2000      	movs	r0, #0
 8008d76:	f04f 0c0a 	mov.w	ip, #10
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d80:	3b30      	subs	r3, #48	; 0x30
 8008d82:	2b09      	cmp	r3, #9
 8008d84:	d94e      	bls.n	8008e24 <_vfiprintf_r+0x1c4>
 8008d86:	b1b0      	cbz	r0, 8008db6 <_vfiprintf_r+0x156>
 8008d88:	9207      	str	r2, [sp, #28]
 8008d8a:	e014      	b.n	8008db6 <_vfiprintf_r+0x156>
 8008d8c:	eba0 0308 	sub.w	r3, r0, r8
 8008d90:	fa09 f303 	lsl.w	r3, r9, r3
 8008d94:	4313      	orrs	r3, r2
 8008d96:	9304      	str	r3, [sp, #16]
 8008d98:	46a2      	mov	sl, r4
 8008d9a:	e7d2      	b.n	8008d42 <_vfiprintf_r+0xe2>
 8008d9c:	9b03      	ldr	r3, [sp, #12]
 8008d9e:	1d19      	adds	r1, r3, #4
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	9103      	str	r1, [sp, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	bfbb      	ittet	lt
 8008da8:	425b      	neglt	r3, r3
 8008daa:	f042 0202 	orrlt.w	r2, r2, #2
 8008dae:	9307      	strge	r3, [sp, #28]
 8008db0:	9307      	strlt	r3, [sp, #28]
 8008db2:	bfb8      	it	lt
 8008db4:	9204      	strlt	r2, [sp, #16]
 8008db6:	7823      	ldrb	r3, [r4, #0]
 8008db8:	2b2e      	cmp	r3, #46	; 0x2e
 8008dba:	d10c      	bne.n	8008dd6 <_vfiprintf_r+0x176>
 8008dbc:	7863      	ldrb	r3, [r4, #1]
 8008dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8008dc0:	d135      	bne.n	8008e2e <_vfiprintf_r+0x1ce>
 8008dc2:	9b03      	ldr	r3, [sp, #12]
 8008dc4:	1d1a      	adds	r2, r3, #4
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	9203      	str	r2, [sp, #12]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	bfb8      	it	lt
 8008dce:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dd2:	3402      	adds	r4, #2
 8008dd4:	9305      	str	r3, [sp, #20]
 8008dd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ebc <_vfiprintf_r+0x25c>
 8008dda:	7821      	ldrb	r1, [r4, #0]
 8008ddc:	2203      	movs	r2, #3
 8008dde:	4650      	mov	r0, sl
 8008de0:	f7f7 fa86 	bl	80002f0 <memchr>
 8008de4:	b140      	cbz	r0, 8008df8 <_vfiprintf_r+0x198>
 8008de6:	2340      	movs	r3, #64	; 0x40
 8008de8:	eba0 000a 	sub.w	r0, r0, sl
 8008dec:	fa03 f000 	lsl.w	r0, r3, r0
 8008df0:	9b04      	ldr	r3, [sp, #16]
 8008df2:	4303      	orrs	r3, r0
 8008df4:	3401      	adds	r4, #1
 8008df6:	9304      	str	r3, [sp, #16]
 8008df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dfc:	482c      	ldr	r0, [pc, #176]	; (8008eb0 <_vfiprintf_r+0x250>)
 8008dfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e02:	2206      	movs	r2, #6
 8008e04:	f7f7 fa74 	bl	80002f0 <memchr>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d03f      	beq.n	8008e8c <_vfiprintf_r+0x22c>
 8008e0c:	4b29      	ldr	r3, [pc, #164]	; (8008eb4 <_vfiprintf_r+0x254>)
 8008e0e:	bb1b      	cbnz	r3, 8008e58 <_vfiprintf_r+0x1f8>
 8008e10:	9b03      	ldr	r3, [sp, #12]
 8008e12:	3307      	adds	r3, #7
 8008e14:	f023 0307 	bic.w	r3, r3, #7
 8008e18:	3308      	adds	r3, #8
 8008e1a:	9303      	str	r3, [sp, #12]
 8008e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e1e:	443b      	add	r3, r7
 8008e20:	9309      	str	r3, [sp, #36]	; 0x24
 8008e22:	e767      	b.n	8008cf4 <_vfiprintf_r+0x94>
 8008e24:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e28:	460c      	mov	r4, r1
 8008e2a:	2001      	movs	r0, #1
 8008e2c:	e7a5      	b.n	8008d7a <_vfiprintf_r+0x11a>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	3401      	adds	r4, #1
 8008e32:	9305      	str	r3, [sp, #20]
 8008e34:	4619      	mov	r1, r3
 8008e36:	f04f 0c0a 	mov.w	ip, #10
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e40:	3a30      	subs	r2, #48	; 0x30
 8008e42:	2a09      	cmp	r2, #9
 8008e44:	d903      	bls.n	8008e4e <_vfiprintf_r+0x1ee>
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d0c5      	beq.n	8008dd6 <_vfiprintf_r+0x176>
 8008e4a:	9105      	str	r1, [sp, #20]
 8008e4c:	e7c3      	b.n	8008dd6 <_vfiprintf_r+0x176>
 8008e4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e52:	4604      	mov	r4, r0
 8008e54:	2301      	movs	r3, #1
 8008e56:	e7f0      	b.n	8008e3a <_vfiprintf_r+0x1da>
 8008e58:	ab03      	add	r3, sp, #12
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	462a      	mov	r2, r5
 8008e5e:	4b16      	ldr	r3, [pc, #88]	; (8008eb8 <_vfiprintf_r+0x258>)
 8008e60:	a904      	add	r1, sp, #16
 8008e62:	4630      	mov	r0, r6
 8008e64:	f7fd fd24 	bl	80068b0 <_printf_float>
 8008e68:	4607      	mov	r7, r0
 8008e6a:	1c78      	adds	r0, r7, #1
 8008e6c:	d1d6      	bne.n	8008e1c <_vfiprintf_r+0x1bc>
 8008e6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e70:	07d9      	lsls	r1, r3, #31
 8008e72:	d405      	bmi.n	8008e80 <_vfiprintf_r+0x220>
 8008e74:	89ab      	ldrh	r3, [r5, #12]
 8008e76:	059a      	lsls	r2, r3, #22
 8008e78:	d402      	bmi.n	8008e80 <_vfiprintf_r+0x220>
 8008e7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e7c:	f7ff f9d0 	bl	8008220 <__retarget_lock_release_recursive>
 8008e80:	89ab      	ldrh	r3, [r5, #12]
 8008e82:	065b      	lsls	r3, r3, #25
 8008e84:	f53f af12 	bmi.w	8008cac <_vfiprintf_r+0x4c>
 8008e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e8a:	e711      	b.n	8008cb0 <_vfiprintf_r+0x50>
 8008e8c:	ab03      	add	r3, sp, #12
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	462a      	mov	r2, r5
 8008e92:	4b09      	ldr	r3, [pc, #36]	; (8008eb8 <_vfiprintf_r+0x258>)
 8008e94:	a904      	add	r1, sp, #16
 8008e96:	4630      	mov	r0, r6
 8008e98:	f7fd ff96 	bl	8006dc8 <_printf_i>
 8008e9c:	e7e4      	b.n	8008e68 <_vfiprintf_r+0x208>
 8008e9e:	bf00      	nop
 8008ea0:	0800935c 	.word	0x0800935c
 8008ea4:	0800937c 	.word	0x0800937c
 8008ea8:	0800933c 	.word	0x0800933c
 8008eac:	080094f4 	.word	0x080094f4
 8008eb0:	080094fe 	.word	0x080094fe
 8008eb4:	080068b1 	.word	0x080068b1
 8008eb8:	08008c3b 	.word	0x08008c3b
 8008ebc:	080094fa 	.word	0x080094fa

08008ec0 <_sbrk_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4d06      	ldr	r5, [pc, #24]	; (8008edc <_sbrk_r+0x1c>)
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4608      	mov	r0, r1
 8008eca:	602b      	str	r3, [r5, #0]
 8008ecc:	f7f8 fc08 	bl	80016e0 <_sbrk>
 8008ed0:	1c43      	adds	r3, r0, #1
 8008ed2:	d102      	bne.n	8008eda <_sbrk_r+0x1a>
 8008ed4:	682b      	ldr	r3, [r5, #0]
 8008ed6:	b103      	cbz	r3, 8008eda <_sbrk_r+0x1a>
 8008ed8:	6023      	str	r3, [r4, #0]
 8008eda:	bd38      	pop	{r3, r4, r5, pc}
 8008edc:	24000350 	.word	0x24000350

08008ee0 <__sread>:
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee8:	f000 f8e2 	bl	80090b0 <_read_r>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	bfab      	itete	ge
 8008ef0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ef4:	181b      	addge	r3, r3, r0
 8008ef6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008efa:	bfac      	ite	ge
 8008efc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008efe:	81a3      	strhlt	r3, [r4, #12]
 8008f00:	bd10      	pop	{r4, pc}

08008f02 <__swrite>:
 8008f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f06:	461f      	mov	r7, r3
 8008f08:	898b      	ldrh	r3, [r1, #12]
 8008f0a:	05db      	lsls	r3, r3, #23
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	4616      	mov	r6, r2
 8008f12:	d505      	bpl.n	8008f20 <__swrite+0x1e>
 8008f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f18:	2302      	movs	r3, #2
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f000 f898 	bl	8009050 <_lseek_r>
 8008f20:	89a3      	ldrh	r3, [r4, #12]
 8008f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f2a:	81a3      	strh	r3, [r4, #12]
 8008f2c:	4632      	mov	r2, r6
 8008f2e:	463b      	mov	r3, r7
 8008f30:	4628      	mov	r0, r5
 8008f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f36:	f000 b817 	b.w	8008f68 <_write_r>

08008f3a <__sseek>:
 8008f3a:	b510      	push	{r4, lr}
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f42:	f000 f885 	bl	8009050 <_lseek_r>
 8008f46:	1c43      	adds	r3, r0, #1
 8008f48:	89a3      	ldrh	r3, [r4, #12]
 8008f4a:	bf15      	itete	ne
 8008f4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f56:	81a3      	strheq	r3, [r4, #12]
 8008f58:	bf18      	it	ne
 8008f5a:	81a3      	strhne	r3, [r4, #12]
 8008f5c:	bd10      	pop	{r4, pc}

08008f5e <__sclose>:
 8008f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f62:	f000 b831 	b.w	8008fc8 <_close_r>
	...

08008f68 <_write_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	4d07      	ldr	r5, [pc, #28]	; (8008f88 <_write_r+0x20>)
 8008f6c:	4604      	mov	r4, r0
 8008f6e:	4608      	mov	r0, r1
 8008f70:	4611      	mov	r1, r2
 8008f72:	2200      	movs	r2, #0
 8008f74:	602a      	str	r2, [r5, #0]
 8008f76:	461a      	mov	r2, r3
 8008f78:	f7f8 fb61 	bl	800163e <_write>
 8008f7c:	1c43      	adds	r3, r0, #1
 8008f7e:	d102      	bne.n	8008f86 <_write_r+0x1e>
 8008f80:	682b      	ldr	r3, [r5, #0]
 8008f82:	b103      	cbz	r3, 8008f86 <_write_r+0x1e>
 8008f84:	6023      	str	r3, [r4, #0]
 8008f86:	bd38      	pop	{r3, r4, r5, pc}
 8008f88:	24000350 	.word	0x24000350

08008f8c <__assert_func>:
 8008f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f8e:	4614      	mov	r4, r2
 8008f90:	461a      	mov	r2, r3
 8008f92:	4b09      	ldr	r3, [pc, #36]	; (8008fb8 <__assert_func+0x2c>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4605      	mov	r5, r0
 8008f98:	68d8      	ldr	r0, [r3, #12]
 8008f9a:	b14c      	cbz	r4, 8008fb0 <__assert_func+0x24>
 8008f9c:	4b07      	ldr	r3, [pc, #28]	; (8008fbc <__assert_func+0x30>)
 8008f9e:	9100      	str	r1, [sp, #0]
 8008fa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fa4:	4906      	ldr	r1, [pc, #24]	; (8008fc0 <__assert_func+0x34>)
 8008fa6:	462b      	mov	r3, r5
 8008fa8:	f000 f81e 	bl	8008fe8 <fiprintf>
 8008fac:	f000 f89f 	bl	80090ee <abort>
 8008fb0:	4b04      	ldr	r3, [pc, #16]	; (8008fc4 <__assert_func+0x38>)
 8008fb2:	461c      	mov	r4, r3
 8008fb4:	e7f3      	b.n	8008f9e <__assert_func+0x12>
 8008fb6:	bf00      	nop
 8008fb8:	24000020 	.word	0x24000020
 8008fbc:	08009505 	.word	0x08009505
 8008fc0:	08009512 	.word	0x08009512
 8008fc4:	08009540 	.word	0x08009540

08008fc8 <_close_r>:
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	4d06      	ldr	r5, [pc, #24]	; (8008fe4 <_close_r+0x1c>)
 8008fcc:	2300      	movs	r3, #0
 8008fce:	4604      	mov	r4, r0
 8008fd0:	4608      	mov	r0, r1
 8008fd2:	602b      	str	r3, [r5, #0]
 8008fd4:	f7f8 fb4f 	bl	8001676 <_close>
 8008fd8:	1c43      	adds	r3, r0, #1
 8008fda:	d102      	bne.n	8008fe2 <_close_r+0x1a>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	b103      	cbz	r3, 8008fe2 <_close_r+0x1a>
 8008fe0:	6023      	str	r3, [r4, #0]
 8008fe2:	bd38      	pop	{r3, r4, r5, pc}
 8008fe4:	24000350 	.word	0x24000350

08008fe8 <fiprintf>:
 8008fe8:	b40e      	push	{r1, r2, r3}
 8008fea:	b503      	push	{r0, r1, lr}
 8008fec:	4601      	mov	r1, r0
 8008fee:	ab03      	add	r3, sp, #12
 8008ff0:	4805      	ldr	r0, [pc, #20]	; (8009008 <fiprintf+0x20>)
 8008ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ff6:	6800      	ldr	r0, [r0, #0]
 8008ff8:	9301      	str	r3, [sp, #4]
 8008ffa:	f7ff fe31 	bl	8008c60 <_vfiprintf_r>
 8008ffe:	b002      	add	sp, #8
 8009000:	f85d eb04 	ldr.w	lr, [sp], #4
 8009004:	b003      	add	sp, #12
 8009006:	4770      	bx	lr
 8009008:	24000020 	.word	0x24000020

0800900c <_fstat_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4d07      	ldr	r5, [pc, #28]	; (800902c <_fstat_r+0x20>)
 8009010:	2300      	movs	r3, #0
 8009012:	4604      	mov	r4, r0
 8009014:	4608      	mov	r0, r1
 8009016:	4611      	mov	r1, r2
 8009018:	602b      	str	r3, [r5, #0]
 800901a:	f7f8 fb38 	bl	800168e <_fstat>
 800901e:	1c43      	adds	r3, r0, #1
 8009020:	d102      	bne.n	8009028 <_fstat_r+0x1c>
 8009022:	682b      	ldr	r3, [r5, #0]
 8009024:	b103      	cbz	r3, 8009028 <_fstat_r+0x1c>
 8009026:	6023      	str	r3, [r4, #0]
 8009028:	bd38      	pop	{r3, r4, r5, pc}
 800902a:	bf00      	nop
 800902c:	24000350 	.word	0x24000350

08009030 <_isatty_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	4d06      	ldr	r5, [pc, #24]	; (800904c <_isatty_r+0x1c>)
 8009034:	2300      	movs	r3, #0
 8009036:	4604      	mov	r4, r0
 8009038:	4608      	mov	r0, r1
 800903a:	602b      	str	r3, [r5, #0]
 800903c:	f7f8 fb37 	bl	80016ae <_isatty>
 8009040:	1c43      	adds	r3, r0, #1
 8009042:	d102      	bne.n	800904a <_isatty_r+0x1a>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	b103      	cbz	r3, 800904a <_isatty_r+0x1a>
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	bd38      	pop	{r3, r4, r5, pc}
 800904c:	24000350 	.word	0x24000350

08009050 <_lseek_r>:
 8009050:	b538      	push	{r3, r4, r5, lr}
 8009052:	4d07      	ldr	r5, [pc, #28]	; (8009070 <_lseek_r+0x20>)
 8009054:	4604      	mov	r4, r0
 8009056:	4608      	mov	r0, r1
 8009058:	4611      	mov	r1, r2
 800905a:	2200      	movs	r2, #0
 800905c:	602a      	str	r2, [r5, #0]
 800905e:	461a      	mov	r2, r3
 8009060:	f7f8 fb30 	bl	80016c4 <_lseek>
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	d102      	bne.n	800906e <_lseek_r+0x1e>
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	b103      	cbz	r3, 800906e <_lseek_r+0x1e>
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	24000350 	.word	0x24000350

08009074 <__ascii_mbtowc>:
 8009074:	b082      	sub	sp, #8
 8009076:	b901      	cbnz	r1, 800907a <__ascii_mbtowc+0x6>
 8009078:	a901      	add	r1, sp, #4
 800907a:	b142      	cbz	r2, 800908e <__ascii_mbtowc+0x1a>
 800907c:	b14b      	cbz	r3, 8009092 <__ascii_mbtowc+0x1e>
 800907e:	7813      	ldrb	r3, [r2, #0]
 8009080:	600b      	str	r3, [r1, #0]
 8009082:	7812      	ldrb	r2, [r2, #0]
 8009084:	1e10      	subs	r0, r2, #0
 8009086:	bf18      	it	ne
 8009088:	2001      	movne	r0, #1
 800908a:	b002      	add	sp, #8
 800908c:	4770      	bx	lr
 800908e:	4610      	mov	r0, r2
 8009090:	e7fb      	b.n	800908a <__ascii_mbtowc+0x16>
 8009092:	f06f 0001 	mvn.w	r0, #1
 8009096:	e7f8      	b.n	800908a <__ascii_mbtowc+0x16>

08009098 <__malloc_lock>:
 8009098:	4801      	ldr	r0, [pc, #4]	; (80090a0 <__malloc_lock+0x8>)
 800909a:	f7ff b8c0 	b.w	800821e <__retarget_lock_acquire_recursive>
 800909e:	bf00      	nop
 80090a0:	24000344 	.word	0x24000344

080090a4 <__malloc_unlock>:
 80090a4:	4801      	ldr	r0, [pc, #4]	; (80090ac <__malloc_unlock+0x8>)
 80090a6:	f7ff b8bb 	b.w	8008220 <__retarget_lock_release_recursive>
 80090aa:	bf00      	nop
 80090ac:	24000344 	.word	0x24000344

080090b0 <_read_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4d07      	ldr	r5, [pc, #28]	; (80090d0 <_read_r+0x20>)
 80090b4:	4604      	mov	r4, r0
 80090b6:	4608      	mov	r0, r1
 80090b8:	4611      	mov	r1, r2
 80090ba:	2200      	movs	r2, #0
 80090bc:	602a      	str	r2, [r5, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	f7f8 faa0 	bl	8001604 <_read>
 80090c4:	1c43      	adds	r3, r0, #1
 80090c6:	d102      	bne.n	80090ce <_read_r+0x1e>
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	b103      	cbz	r3, 80090ce <_read_r+0x1e>
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	bd38      	pop	{r3, r4, r5, pc}
 80090d0:	24000350 	.word	0x24000350

080090d4 <__ascii_wctomb>:
 80090d4:	b149      	cbz	r1, 80090ea <__ascii_wctomb+0x16>
 80090d6:	2aff      	cmp	r2, #255	; 0xff
 80090d8:	bf85      	ittet	hi
 80090da:	238a      	movhi	r3, #138	; 0x8a
 80090dc:	6003      	strhi	r3, [r0, #0]
 80090de:	700a      	strbls	r2, [r1, #0]
 80090e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80090e4:	bf98      	it	ls
 80090e6:	2001      	movls	r0, #1
 80090e8:	4770      	bx	lr
 80090ea:	4608      	mov	r0, r1
 80090ec:	4770      	bx	lr

080090ee <abort>:
 80090ee:	b508      	push	{r3, lr}
 80090f0:	2006      	movs	r0, #6
 80090f2:	f000 f82b 	bl	800914c <raise>
 80090f6:	2001      	movs	r0, #1
 80090f8:	f7f8 fa7a 	bl	80015f0 <_exit>

080090fc <_raise_r>:
 80090fc:	291f      	cmp	r1, #31
 80090fe:	b538      	push	{r3, r4, r5, lr}
 8009100:	4604      	mov	r4, r0
 8009102:	460d      	mov	r5, r1
 8009104:	d904      	bls.n	8009110 <_raise_r+0x14>
 8009106:	2316      	movs	r3, #22
 8009108:	6003      	str	r3, [r0, #0]
 800910a:	f04f 30ff 	mov.w	r0, #4294967295
 800910e:	bd38      	pop	{r3, r4, r5, pc}
 8009110:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009112:	b112      	cbz	r2, 800911a <_raise_r+0x1e>
 8009114:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009118:	b94b      	cbnz	r3, 800912e <_raise_r+0x32>
 800911a:	4620      	mov	r0, r4
 800911c:	f000 f830 	bl	8009180 <_getpid_r>
 8009120:	462a      	mov	r2, r5
 8009122:	4601      	mov	r1, r0
 8009124:	4620      	mov	r0, r4
 8009126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800912a:	f000 b817 	b.w	800915c <_kill_r>
 800912e:	2b01      	cmp	r3, #1
 8009130:	d00a      	beq.n	8009148 <_raise_r+0x4c>
 8009132:	1c59      	adds	r1, r3, #1
 8009134:	d103      	bne.n	800913e <_raise_r+0x42>
 8009136:	2316      	movs	r3, #22
 8009138:	6003      	str	r3, [r0, #0]
 800913a:	2001      	movs	r0, #1
 800913c:	e7e7      	b.n	800910e <_raise_r+0x12>
 800913e:	2400      	movs	r4, #0
 8009140:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009144:	4628      	mov	r0, r5
 8009146:	4798      	blx	r3
 8009148:	2000      	movs	r0, #0
 800914a:	e7e0      	b.n	800910e <_raise_r+0x12>

0800914c <raise>:
 800914c:	4b02      	ldr	r3, [pc, #8]	; (8009158 <raise+0xc>)
 800914e:	4601      	mov	r1, r0
 8009150:	6818      	ldr	r0, [r3, #0]
 8009152:	f7ff bfd3 	b.w	80090fc <_raise_r>
 8009156:	bf00      	nop
 8009158:	24000020 	.word	0x24000020

0800915c <_kill_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	4d07      	ldr	r5, [pc, #28]	; (800917c <_kill_r+0x20>)
 8009160:	2300      	movs	r3, #0
 8009162:	4604      	mov	r4, r0
 8009164:	4608      	mov	r0, r1
 8009166:	4611      	mov	r1, r2
 8009168:	602b      	str	r3, [r5, #0]
 800916a:	f7f8 fa31 	bl	80015d0 <_kill>
 800916e:	1c43      	adds	r3, r0, #1
 8009170:	d102      	bne.n	8009178 <_kill_r+0x1c>
 8009172:	682b      	ldr	r3, [r5, #0]
 8009174:	b103      	cbz	r3, 8009178 <_kill_r+0x1c>
 8009176:	6023      	str	r3, [r4, #0]
 8009178:	bd38      	pop	{r3, r4, r5, pc}
 800917a:	bf00      	nop
 800917c:	24000350 	.word	0x24000350

08009180 <_getpid_r>:
 8009180:	f7f8 ba1e 	b.w	80015c0 <_getpid>

08009184 <_init>:
 8009184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009186:	bf00      	nop
 8009188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800918a:	bc08      	pop	{r3}
 800918c:	469e      	mov	lr, r3
 800918e:	4770      	bx	lr

08009190 <_fini>:
 8009190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009192:	bf00      	nop
 8009194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009196:	bc08      	pop	{r3}
 8009198:	469e      	mov	lr, r3
 800919a:	4770      	bx	lr
