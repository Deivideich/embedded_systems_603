
STM32H7_IMU_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089c4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008c68  08008c68  00018c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090c4  080090c4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080090c4  080090c4  000190c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090cc  080090cc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090cc  080090cc  000190cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090d0  080090d0  000190d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  080090d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  240001e0  080092b4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400032c  080092b4  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131dc  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000247c  00000000  00000000  000333ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00035868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00036600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ac87  00000000  00000000  000372b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001229e  00000000  00000000  00071f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00180457  00000000  00000000  000841d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020462c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004694  00000000  00000000  0020467c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008c4c 	.word	0x08008c4c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	08008c4c 	.word	0x08008c4c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b09c      	sub	sp, #112	; 0x70
 80007c4:	af0a      	add	r7, sp, #40	; 0x28
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ca:	647b      	str	r3, [r7, #68]	; 0x44
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007cc:	bf00      	nop
 80007ce:	4b90      	ldr	r3, [pc, #576]	; (8000a10 <main+0x250>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <main+0x24>
 80007da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	647a      	str	r2, [r7, #68]	; 0x44
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dcf4      	bgt.n	80007ce <main+0xe>
  if ( timeout < 0 )
 80007e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	da01      	bge.n	80007ee <main+0x2e>
  {
  Error_Handler();
 80007ea:	f000 fb27 	bl	8000e3c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 fd3b 	bl	8001268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f917 	bl	8000a24 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007f6:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <main+0x250>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4a84      	ldr	r2, [pc, #528]	; (8000a10 <main+0x250>)
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4b82      	ldr	r3, [pc, #520]	; (8000a10 <main+0x250>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000814:	2000      	movs	r0, #0
 8000816:	f001 f897 	bl	8001948 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800081a:	2100      	movs	r1, #0
 800081c:	2000      	movs	r0, #0
 800081e:	f001 f8ad 	bl	800197c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000826:	647b      	str	r3, [r7, #68]	; 0x44
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000828:	bf00      	nop
 800082a:	4b79      	ldr	r3, [pc, #484]	; (8000a10 <main+0x250>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <main+0x80>
 8000836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	647a      	str	r2, [r7, #68]	; 0x44
 800083c:	2b00      	cmp	r3, #0
 800083e:	dcf4      	bgt.n	800082a <main+0x6a>
if ( timeout < 0 )
 8000840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000842:	2b00      	cmp	r3, #0
 8000844:	da01      	bge.n	800084a <main+0x8a>
{
Error_Handler();
 8000846:	f000 faf9 	bl	8000e3c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 fa0b 	bl	8000c64 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800084e:	f000 f9bd 	bl	8000bcc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000852:	f000 f963 	bl	8000b1c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int16_t acc_x, acc_y, acc_z;
  int16_t gyro_x, gyro_y, gyro_z;
  int16_t mag_x, mag_y, mag_z;
  uint8_t imu_data[14];
  mpu9250_write_reg(27, 0x00);
 8000856:	2100      	movs	r1, #0
 8000858:	201b      	movs	r0, #27
 800085a:	f000 fa9b 	bl	8000d94 <mpu9250_write_reg>
  HAL_Delay(100);
 800085e:	2064      	movs	r0, #100	; 0x64
 8000860:	f000 fd94 	bl	800138c <HAL_Delay>
  mpu9250_write_reg(28, 0x08);
 8000864:	2108      	movs	r1, #8
 8000866:	201c      	movs	r0, #28
 8000868:	f000 fa94 	bl	8000d94 <mpu9250_write_reg>
  HAL_Delay(100);
 800086c:	2064      	movs	r0, #100	; 0x64
 800086e:	f000 fd8d 	bl	800138c <HAL_Delay>
  float a_conv = 4.0 / 32768;
 8000872:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
 8000876:	643b      	str	r3, [r7, #64]	; 0x40
  float g_conv = 250.0 / 32768.0;
 8000878:	4b66      	ldr	r3, [pc, #408]	; (8000a14 <main+0x254>)
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
  float m_conv = 10.0 * 4912.0 / 8190.0;
 800087c:	4b66      	ldr	r3, [pc, #408]	; (8000a18 <main+0x258>)
 800087e:	63bb      	str	r3, [r7, #56]	; 0x38



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Starting !\r\n");
 8000880:	4866      	ldr	r0, [pc, #408]	; (8000a1c <main+0x25c>)
 8000882:	f006 f9b1 	bl	8006be8 <puts>
  while (1)
  {
	  HAL_Delay(5);
 8000886:	2005      	movs	r0, #5
 8000888:	f000 fd80 	bl	800138c <HAL_Delay>
	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	220e      	movs	r2, #14
 8000890:	4619      	mov	r1, r3
 8000892:	203b      	movs	r0, #59	; 0x3b
 8000894:	f000 faa4 	bl	8000de0 <mpu9250_read_reg>
	  acc_x = ((int16_t)imu_data[0]<<8) + imu_data[1];
 8000898:	793b      	ldrb	r3, [r7, #4]
 800089a:	b29b      	uxth	r3, r3
 800089c:	021b      	lsls	r3, r3, #8
 800089e:	b29a      	uxth	r2, r3
 80008a0:	797b      	ldrb	r3, [r7, #5]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	4413      	add	r3, r2
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	86fb      	strh	r3, [r7, #54]	; 0x36
	  acc_y = ((int16_t)imu_data[2]<<8) + imu_data[3];
 80008aa:	79bb      	ldrb	r3, [r7, #6]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	021b      	lsls	r3, r3, #8
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	4413      	add	r3, r2
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	86bb      	strh	r3, [r7, #52]	; 0x34
	  acc_z = ((int16_t)imu_data[4]<<8) + imu_data[5];
 80008bc:	7a3b      	ldrb	r3, [r7, #8]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	7a7b      	ldrb	r3, [r7, #9]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	867b      	strh	r3, [r7, #50]	; 0x32

	  mpu9250_read_reg(67, imu_data, sizeof(imu_data));
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	220e      	movs	r2, #14
 80008d2:	4619      	mov	r1, r3
 80008d4:	2043      	movs	r0, #67	; 0x43
 80008d6:	f000 fa83 	bl	8000de0 <mpu9250_read_reg>
	  gyro_x = ((int16_t)imu_data[0]<<8) + imu_data[1];
 80008da:	793b      	ldrb	r3, [r7, #4]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	797b      	ldrb	r3, [r7, #5]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	4413      	add	r3, r2
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	863b      	strh	r3, [r7, #48]	; 0x30
	  gyro_y = ((int16_t)imu_data[2]<<8) + imu_data[3];
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	021b      	lsls	r3, r3, #8
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	4413      	add	r3, r2
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  gyro_z = ((int16_t)imu_data[4]<<8) + imu_data[5];
 80008fe:	7a3b      	ldrb	r3, [r7, #8]
 8000900:	b29b      	uxth	r3, r3
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	b29a      	uxth	r2, r3
 8000906:	7a7b      	ldrb	r3, [r7, #9]
 8000908:	b29b      	uxth	r3, r3
 800090a:	4413      	add	r3, r2
 800090c:	b29b      	uxth	r3, r3
 800090e:	85bb      	strh	r3, [r7, #44]	; 0x2c

	  a_x = (float)(acc_x *  a_conv - 1);
 8000910:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000914:	ee07 3a90 	vmov	s15, r3
 8000918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800091c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000928:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800092c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	  a_y = (float)(acc_y *  a_conv + 0.27);
 8000930:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000934:	ee07 3a90 	vmov	s15, r3
 8000938:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800093c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000944:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000948:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8000a08 <main+0x248>
 800094c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000950:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000954:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  a_z = (float)(acc_z *  a_conv);
 8000958:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800095c:	ee07 3a90 	vmov	s15, r3
 8000960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000964:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800096c:	edc7 7a08 	vstr	s15, [r7, #32]
	  g_x = (float)(gyro_x *  g_conv);
 8000970:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8000974:	ee07 3a90 	vmov	s15, r3
 8000978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800097c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000984:	edc7 7a07 	vstr	s15, [r7, #28]
	  g_y = (float)(gyro_y *  g_conv);
 8000988:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800098c:	ee07 3a90 	vmov	s15, r3
 8000990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000994:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800099c:	edc7 7a06 	vstr	s15, [r7, #24]
	  g_z = (float)(gyro_z *  g_conv);
 80009a0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80009a4:	ee07 3a90 	vmov	s15, r3
 80009a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80009b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009b4:	edc7 7a05 	vstr	s15, [r7, #20]
//	  m_y = (float)(mag_y *  m_conv);
//	  m_z = (float)(mag_z *  m_conv);

//  m[0] = (float)(mag_count[0] * mag_resolution * mag_bias_factory[0] - mag_bias[0] * bias_to_current_bits) * mag_scale[0];  // get actual magnetometer value, this depends on scale being set

	  printf("Acc{x: %.3f, y: %.3f, z:%.3f}, Gyro{x: %.3f, y: %.3f, z:%.3f}\r\n",a_x, a_y, a_z,g_x, g_y, g_z);
 80009b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80009bc:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 80009c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80009c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009c8:	edd7 6a08 	vldr	s13, [r7, #32]
 80009cc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80009d0:	edd7 5a07 	vldr	s11, [r7, #28]
 80009d4:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80009d8:	edd7 4a06 	vldr	s9, [r7, #24]
 80009dc:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 80009e0:	edd7 3a05 	vldr	s7, [r7, #20]
 80009e4:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80009e8:	ed8d 3b08 	vstr	d3, [sp, #32]
 80009ec:	ed8d 4b06 	vstr	d4, [sp, #24]
 80009f0:	ed8d 5b04 	vstr	d5, [sp, #16]
 80009f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80009f8:	ed8d 7b00 	vstr	d7, [sp]
 80009fc:	ec53 2b12 	vmov	r2, r3, d2
 8000a00:	4807      	ldr	r0, [pc, #28]	; (8000a20 <main+0x260>)
 8000a02:	f006 f86b 	bl	8006adc <iprintf>
	  HAL_Delay(5);
 8000a06:	e73e      	b.n	8000886 <main+0xc6>
 8000a08:	147ae148 	.word	0x147ae148
 8000a0c:	3fd147ae 	.word	0x3fd147ae
 8000a10:	58024400 	.word	0x58024400
 8000a14:	3bfa0000 	.word	0x3bfa0000
 8000a18:	40bfebff 	.word	0x40bfebff
 8000a1c:	08008c68 	.word	0x08008c68
 8000a20:	08008c74 	.word	0x08008c74

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b09c      	sub	sp, #112	; 0x70
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	224c      	movs	r2, #76	; 0x4c
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f005 fc08 	bl	8006248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2220      	movs	r2, #32
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f005 fc02 	bl	8006248 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a44:	2004      	movs	r0, #4
 8000a46:	f000 ffad 	bl	80019a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b31      	ldr	r3, [pc, #196]	; (8000b14 <SystemClock_Config+0xf0>)
 8000a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a52:	4a30      	ldr	r2, [pc, #192]	; (8000b14 <SystemClock_Config+0xf0>)
 8000a54:	f023 0301 	bic.w	r3, r3, #1
 8000a58:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a5a:	4b2e      	ldr	r3, [pc, #184]	; (8000b14 <SystemClock_Config+0xf0>)
 8000a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <SystemClock_Config+0xf4>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a6c:	4a2a      	ldr	r2, [pc, #168]	; (8000b18 <SystemClock_Config+0xf4>)
 8000a6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <SystemClock_Config+0xf4>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a80:	bf00      	nop
 8000a82:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <SystemClock_Config+0xf4>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a8e:	d1f8      	bne.n	8000a82 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a90:	2301      	movs	r3, #1
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a94:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000aa6:	2312      	movs	r3, #18
 8000aa8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000aba:	2302      	movs	r3, #2
 8000abc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000abe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ac2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 ffc5 	bl	8001a58 <HAL_RCC_OscConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ad4:	f000 f9b2 	bl	8000e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad8:	233f      	movs	r3, #63	; 0x3f
 8000ada:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000adc:	2303      	movs	r3, #3
 8000ade:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000aec:	2340      	movs	r3, #64	; 0x40
 8000aee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2101      	movs	r1, #1
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fbd9 	bl	80022b4 <HAL_RCC_ClockConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000b08:	f000 f998 	bl	8000e3c <Error_Handler>
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3770      	adds	r7, #112	; 0x70
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	58000400 	.word	0x58000400
 8000b18:	58024800 	.word	0x58024800

08000b1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b20:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b22:	4a29      	ldr	r2, [pc, #164]	; (8000bc8 <MX_SPI1_Init+0xac>)
 8000b24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b26:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b2e:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b34:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b36:	2207      	movs	r2, #7
 8000b38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b3a:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b4c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_07DATA;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b80:	22c0      	movs	r2, #192	; 0xc0
 8000b82:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_SPI1_Init+0xa8>)
 8000bb0:	f003 fa74 	bl	800409c <HAL_SPI_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000bba:	f000 f93f 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	240001fc 	.word	0x240001fc
 8000bc8:	40013000 	.word	0x40013000

08000bcc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bd2:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <MX_USART3_UART_Init+0x94>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c14:	4811      	ldr	r0, [pc, #68]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c16:	f004 f9e6 	bl	8004fe6 <HAL_UART_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c20:	f000 f90c 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	480d      	ldr	r0, [pc, #52]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c28:	f005 fa1a 	bl	8006060 <HAL_UARTEx_SetTxFifoThreshold>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c32:	f000 f903 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c3a:	f005 fa4f 	bl	80060dc <HAL_UARTEx_SetRxFifoThreshold>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c44:	f000 f8fa 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c4a:	f005 f9d0 	bl	8005fee <HAL_UARTEx_DisableFifoMode>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c54:	f000 f8f2 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	24000284 	.word	0x24000284
 8000c60:	40004800 	.word	0x40004800

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <MX_GPIO_Init+0x120>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	4a40      	ldr	r2, [pc, #256]	; (8000d84 <MX_GPIO_Init+0x120>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8a:	4b3e      	ldr	r3, [pc, #248]	; (8000d84 <MX_GPIO_Init+0x120>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c98:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <MX_GPIO_Init+0x120>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	4a39      	ldr	r2, [pc, #228]	; (8000d84 <MX_GPIO_Init+0x120>)
 8000ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca8:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <MX_GPIO_Init+0x120>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <MX_GPIO_Init+0x120>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	4a31      	ldr	r2, [pc, #196]	; (8000d84 <MX_GPIO_Init+0x120>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <MX_GPIO_Init+0x120>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <MX_GPIO_Init+0x120>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	4a2a      	ldr	r2, [pc, #168]	; (8000d84 <MX_GPIO_Init+0x120>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce4:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <MX_GPIO_Init+0x120>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf2:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <MX_GPIO_Init+0x120>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <MX_GPIO_Init+0x120>)
 8000cfa:	f043 0308 	orr.w	r3, r3, #8
 8000cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d02:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <MX_GPIO_Init+0x120>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d08:	f003 0308 	and.w	r3, r3, #8
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2110      	movs	r1, #16
 8000d14:	481c      	ldr	r0, [pc, #112]	; (8000d88 <MX_GPIO_Init+0x124>)
 8000d16:	f000 fdfd 	bl	8001914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d20:	481a      	ldr	r0, [pc, #104]	; (8000d8c <MX_GPIO_Init+0x128>)
 8000d22:	f000 fdf7 	bl	8001914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4815      	ldr	r0, [pc, #84]	; (8000d90 <MX_GPIO_Init+0x12c>)
 8000d3c:	f000 fc3a 	bl	80015b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000d40:	2310      	movs	r3, #16
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	480c      	ldr	r0, [pc, #48]	; (8000d88 <MX_GPIO_Init+0x124>)
 8000d58:	f000 fc2c 	bl	80015b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d5c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_GPIO_Init+0x128>)
 8000d76:	f000 fc1d 	bl	80015b4 <HAL_GPIO_Init>

}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	; 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	58024400 	.word	0x58024400
 8000d88:	58020000 	.word	0x58020000
 8000d8c:	58020400 	.word	0x58020400
 8000d90:	58020800 	.word	0x58020800

08000d94 <mpu9250_write_reg>:

/* USER CODE BEGIN 4 */
void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2110      	movs	r1, #16
 8000da8:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <mpu9250_write_reg+0x44>)
 8000daa:	f000 fdb3 	bl	8001914 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8000dae:	1df9      	adds	r1, r7, #7
 8000db0:	2364      	movs	r3, #100	; 0x64
 8000db2:	2201      	movs	r2, #1
 8000db4:	4809      	ldr	r0, [pc, #36]	; (8000ddc <mpu9250_write_reg+0x48>)
 8000db6:	f003 fa77 	bl	80042a8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8000dba:	1db9      	adds	r1, r7, #6
 8000dbc:	2364      	movs	r3, #100	; 0x64
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4806      	ldr	r0, [pc, #24]	; (8000ddc <mpu9250_write_reg+0x48>)
 8000dc2:	f003 fa71 	bl	80042a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2110      	movs	r1, #16
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <mpu9250_write_reg+0x44>)
 8000dcc:	f000 fda2 	bl	8001914 <HAL_GPIO_WritePin>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	58020000 	.word	0x58020000
 8000ddc:	240001fc 	.word	0x240001fc

08000de0 <mpu9250_read_reg>:
void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	4613      	mov	r3, r2
 8000dee:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2110      	movs	r1, #16
 8000dfe:	480d      	ldr	r0, [pc, #52]	; (8000e34 <mpu9250_read_reg+0x54>)
 8000e00:	f000 fd88 	bl	8001914 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 8000e04:	f107 010f 	add.w	r1, r7, #15
 8000e08:	2364      	movs	r3, #100	; 0x64
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	480a      	ldr	r0, [pc, #40]	; (8000e38 <mpu9250_read_reg+0x58>)
 8000e0e:	f003 fa4b 	bl	80042a8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, len, 100);
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	2364      	movs	r3, #100	; 0x64
 8000e18:	6839      	ldr	r1, [r7, #0]
 8000e1a:	4807      	ldr	r0, [pc, #28]	; (8000e38 <mpu9250_read_reg+0x58>)
 8000e1c:	f003 fc36 	bl	800468c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2110      	movs	r1, #16
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <mpu9250_read_reg+0x54>)
 8000e26:	f000 fd75 	bl	8001914 <HAL_GPIO_WritePin>
}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	58020000 	.word	0x58020000
 8000e38:	240001fc 	.word	0x240001fc

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <Error_Handler+0x8>
	...

08000e48 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e50:	1d39      	adds	r1, r7, #4
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	2201      	movs	r2, #1
 8000e58:	4803      	ldr	r0, [pc, #12]	; (8000e68 <__io_putchar+0x20>)
 8000e5a:	f004 f914 	bl	8005086 <HAL_UART_Transmit>
  return ch;
 8000e5e:	687b      	ldr	r3, [r7, #4]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	24000284 	.word	0x24000284

08000e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_MspInit+0x30>)
 8000e74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e78:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_MspInit+0x30>)
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_MspInit+0x30>)
 8000e84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	58024400 	.word	0x58024400

08000ea0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0b8      	sub	sp, #224	; 0xe0
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	22bc      	movs	r2, #188	; 0xbc
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f005 f9c1 	bl	8006248 <memset>
  if(hspi->Instance==SPI1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a24      	ldr	r2, [pc, #144]	; (8000f5c <HAL_SPI_MspInit+0xbc>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d141      	bne.n	8000f54 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 fd74 	bl	80029cc <HAL_RCCEx_PeriphCLKConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000eea:	f7ff ffa7 	bl	8000e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <HAL_SPI_MspInit+0xc0>)
 8000ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ef4:	4a1a      	ldr	r2, [pc, #104]	; (8000f60 <HAL_SPI_MspInit+0xc0>)
 8000ef6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000efa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_SPI_MspInit+0xc0>)
 8000f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_SPI_MspInit+0xc0>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f12:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <HAL_SPI_MspInit+0xc0>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_SPI_MspInit+0xc0>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f2a:	23e0      	movs	r3, #224	; 0xe0
 8000f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f42:	2305      	movs	r3, #5
 8000f44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_SPI_MspInit+0xc4>)
 8000f50:	f000 fb30 	bl	80015b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	37e0      	adds	r7, #224	; 0xe0
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40013000 	.word	0x40013000
 8000f60:	58024400 	.word	0x58024400
 8000f64:	58020000 	.word	0x58020000

08000f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b0b8      	sub	sp, #224	; 0xe0
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	22bc      	movs	r2, #188	; 0xbc
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f005 f95d 	bl	8006248 <memset>
  if(huart->Instance==USART3)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a25      	ldr	r2, [pc, #148]	; (8001028 <HAL_UART_MspInit+0xc0>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d142      	bne.n	800101e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa2:	f107 0310 	add.w	r3, r7, #16
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f001 fd10 	bl	80029cc <HAL_RCCEx_PeriphCLKConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fb2:	f7ff ff43 	bl	8000e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <HAL_UART_MspInit+0xc4>)
 8000fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fbc:	4a1b      	ldr	r2, [pc, #108]	; (800102c <HAL_UART_MspInit+0xc4>)
 8000fbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <HAL_UART_MspInit+0xc4>)
 8000fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_UART_MspInit+0xc4>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <HAL_UART_MspInit+0xc4>)
 8000fdc:	f043 0308 	orr.w	r3, r3, #8
 8000fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_UART_MspInit+0xc4>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fea:	f003 0308 	and.w	r3, r3, #8
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ff2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ff6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800100c:	2307      	movs	r3, #7
 800100e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001012:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <HAL_UART_MspInit+0xc8>)
 800101a:	f000 facb 	bl	80015b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	37e0      	adds	r7, #224	; 0xe0
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40004800 	.word	0x40004800
 800102c:	58024400 	.word	0x58024400
 8001030:	58020c00 	.word	0x58020c00

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <NMI_Handler+0x4>

0800103a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <MemManage_Handler+0x4>

08001046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler+0x4>

08001052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001080:	f000 f964 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
	return 1;
 800108c:	2301      	movs	r3, #1
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <_kill>:

int _kill(int pid, int sig)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010a2:	f005 f8a7 	bl	80061f4 <__errno>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2216      	movs	r2, #22
 80010aa:	601a      	str	r2, [r3, #0]
	return -1;
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_exit>:

void _exit (int status)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ffe7 	bl	8001098 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010ca:	e7fe      	b.n	80010ca <_exit+0x12>

080010cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	e00a      	b.n	80010f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010de:	f3af 8000 	nop.w
 80010e2:	4601      	mov	r1, r0
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	60ba      	str	r2, [r7, #8]
 80010ea:	b2ca      	uxtb	r2, r1
 80010ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbf0      	blt.n	80010de <_read+0x12>
	}

return len;
 80010fc:	687b      	ldr	r3, [r7, #4]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	e009      	b.n	800112c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	60ba      	str	r2, [r7, #8]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fe91 	bl	8000e48 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	dbf1      	blt.n	8001118 <_write+0x12>
	}
	return len;
 8001134:	687b      	ldr	r3, [r7, #4]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <_close>:

int _close(int file)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
	return -1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001166:	605a      	str	r2, [r3, #4]
	return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <_isatty>:

int _isatty(int file)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
	return 1;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
	return 0;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b0:	4a14      	ldr	r2, [pc, #80]	; (8001204 <_sbrk+0x5c>)
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <_sbrk+0x60>)
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <_sbrk+0x64>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <_sbrk+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d207      	bcs.n	80011e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d8:	f005 f80c 	bl	80061f4 <__errno>
 80011dc:	4603      	mov	r3, r0
 80011de:	220c      	movs	r2, #12
 80011e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	e009      	b.n	80011fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <_sbrk+0x64>)
 80011f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	24080000 	.word	0x24080000
 8001208:	00000400 	.word	0x00000400
 800120c:	24000314 	.word	0x24000314
 8001210:	24000330 	.word	0x24000330

08001214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800124c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001218:	f7ff fa3c 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800121e:	490d      	ldr	r1, [pc, #52]	; (8001254 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001220:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001224:	e002      	b.n	800122c <LoopCopyDataInit>

08001226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122a:	3304      	adds	r3, #4

0800122c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800122c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001230:	d3f9      	bcc.n	8001226 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001234:	4c0a      	ldr	r4, [pc, #40]	; (8001260 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001238:	e001      	b.n	800123e <LoopFillZerobss>

0800123a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800123c:	3204      	adds	r2, #4

0800123e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001240:	d3fb      	bcc.n	800123a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001242:	f004 ffdd 	bl	8006200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001246:	f7ff fabb 	bl	80007c0 <main>
  bx  lr
 800124a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800124c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001250:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001254:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001258:	080090d4 	.word	0x080090d4
  ldr r2, =_sbss
 800125c:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001260:	2400032c 	.word	0x2400032c

08001264 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <ADC3_IRQHandler>
	...

08001268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126e:	2003      	movs	r0, #3
 8001270:	f000 f96e 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001274:	f001 f9d4 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8001278:	4602      	mov	r2, r0
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_Init+0x68>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	0a1b      	lsrs	r3, r3, #8
 8001280:	f003 030f 	and.w	r3, r3, #15
 8001284:	4913      	ldr	r1, [pc, #76]	; (80012d4 <HAL_Init+0x6c>)
 8001286:	5ccb      	ldrb	r3, [r1, r3]
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	fa22 f303 	lsr.w	r3, r2, r3
 8001290:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_Init+0x68>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <HAL_Init+0x6c>)
 800129c:	5cd3      	ldrb	r3, [r2, r3]
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	fa22 f303 	lsr.w	r3, r2, r3
 80012a8:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <HAL_Init+0x70>)
 80012aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012ac:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <HAL_Init+0x74>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b2:	200f      	movs	r0, #15
 80012b4:	f000 f814 	bl	80012e0 <HAL_InitTick>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e002      	b.n	80012c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012c2:	f7ff fdd3 	bl	8000e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	58024400 	.word	0x58024400
 80012d4:	08008cb4 	.word	0x08008cb4
 80012d8:	24000004 	.word	0x24000004
 80012dc:	24000000 	.word	0x24000000

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_InitTick+0x60>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e021      	b.n	8001338 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_InitTick+0x64>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_InitTick+0x60>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f945 	bl	800159a <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00e      	b.n	8001338 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d80a      	bhi.n	8001336 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f000 f91d 	bl	8001566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <HAL_InitTick+0x68>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2400000c 	.word	0x2400000c
 8001344:	24000000 	.word	0x24000000
 8001348:	24000008 	.word	0x24000008

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	2400000c 	.word	0x2400000c
 8001370:	24000318 	.word	0x24000318

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	24000318 	.word	0x24000318

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff ffee 	bl	8001374 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_Delay+0x44>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b2:	bf00      	nop
 80013b4:	f7ff ffde 	bl	8001374 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2400000c 	.word	0x2400000c

080013d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_GetREVID+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	0c1b      	lsrs	r3, r3, #16
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	5c001000 	.word	0x5c001000

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <__NVIC_SetPriorityGrouping+0x40>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	4313      	orrs	r3, r2
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <__NVIC_SetPriorityGrouping+0x40>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00
 8001430:	05fa0000 	.word	0x05fa0000

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f7ff ff8e 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff47 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001574:	f7ff ff5e 	bl	8001434 <__NVIC_GetPriorityGrouping>
 8001578:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff ff90 	bl	80014a4 <NVIC_EncodePriority>
 8001584:	4602      	mov	r2, r0
 8001586:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff5f 	bl	8001450 <__NVIC_SetPriority>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffb2 	bl	800150c <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80015c2:	4b89      	ldr	r3, [pc, #548]	; (80017e8 <HAL_GPIO_Init+0x234>)
 80015c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015c6:	e194      	b.n	80018f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2101      	movs	r1, #1
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	fa01 f303 	lsl.w	r3, r1, r3
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8186 	beq.w	80018ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d005      	beq.n	80015f8 <HAL_GPIO_Init+0x44>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d130      	bne.n	800165a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800162e:	2201      	movs	r2, #1
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	f003 0201 	and.w	r2, r3, #1
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	2b03      	cmp	r3, #3
 8001664:	d017      	beq.n	8001696 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	2203      	movs	r2, #3
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d123      	bne.n	80016ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	08da      	lsrs	r2, r3, #3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3208      	adds	r2, #8
 80016aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	220f      	movs	r2, #15
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	691a      	ldr	r2, [r3, #16]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	08da      	lsrs	r2, r3, #3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3208      	adds	r2, #8
 80016e4:	69b9      	ldr	r1, [r7, #24]
 80016e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	2203      	movs	r2, #3
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 0203 	and.w	r2, r3, #3
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 80e0 	beq.w	80018ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172c:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <HAL_GPIO_Init+0x238>)
 800172e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001732:	4a2e      	ldr	r2, [pc, #184]	; (80017ec <HAL_GPIO_Init+0x238>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800173c:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_GPIO_Init+0x238>)
 800173e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800174a:	4a29      	ldr	r2, [pc, #164]	; (80017f0 <HAL_GPIO_Init+0x23c>)
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a20      	ldr	r2, [pc, #128]	; (80017f4 <HAL_GPIO_Init+0x240>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d052      	beq.n	800181c <HAL_GPIO_Init+0x268>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a1f      	ldr	r2, [pc, #124]	; (80017f8 <HAL_GPIO_Init+0x244>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d031      	beq.n	80017e2 <HAL_GPIO_Init+0x22e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a1e      	ldr	r2, [pc, #120]	; (80017fc <HAL_GPIO_Init+0x248>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d02b      	beq.n	80017de <HAL_GPIO_Init+0x22a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a1d      	ldr	r2, [pc, #116]	; (8001800 <HAL_GPIO_Init+0x24c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d025      	beq.n	80017da <HAL_GPIO_Init+0x226>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <HAL_GPIO_Init+0x250>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d01f      	beq.n	80017d6 <HAL_GPIO_Init+0x222>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <HAL_GPIO_Init+0x254>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d019      	beq.n	80017d2 <HAL_GPIO_Init+0x21e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a1a      	ldr	r2, [pc, #104]	; (800180c <HAL_GPIO_Init+0x258>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0x21a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a19      	ldr	r2, [pc, #100]	; (8001810 <HAL_GPIO_Init+0x25c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00d      	beq.n	80017ca <HAL_GPIO_Init+0x216>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a18      	ldr	r2, [pc, #96]	; (8001814 <HAL_GPIO_Init+0x260>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d007      	beq.n	80017c6 <HAL_GPIO_Init+0x212>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a17      	ldr	r2, [pc, #92]	; (8001818 <HAL_GPIO_Init+0x264>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_GPIO_Init+0x20e>
 80017be:	2309      	movs	r3, #9
 80017c0:	e02d      	b.n	800181e <HAL_GPIO_Init+0x26a>
 80017c2:	230a      	movs	r3, #10
 80017c4:	e02b      	b.n	800181e <HAL_GPIO_Init+0x26a>
 80017c6:	2308      	movs	r3, #8
 80017c8:	e029      	b.n	800181e <HAL_GPIO_Init+0x26a>
 80017ca:	2307      	movs	r3, #7
 80017cc:	e027      	b.n	800181e <HAL_GPIO_Init+0x26a>
 80017ce:	2306      	movs	r3, #6
 80017d0:	e025      	b.n	800181e <HAL_GPIO_Init+0x26a>
 80017d2:	2305      	movs	r3, #5
 80017d4:	e023      	b.n	800181e <HAL_GPIO_Init+0x26a>
 80017d6:	2304      	movs	r3, #4
 80017d8:	e021      	b.n	800181e <HAL_GPIO_Init+0x26a>
 80017da:	2303      	movs	r3, #3
 80017dc:	e01f      	b.n	800181e <HAL_GPIO_Init+0x26a>
 80017de:	2302      	movs	r3, #2
 80017e0:	e01d      	b.n	800181e <HAL_GPIO_Init+0x26a>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e01b      	b.n	800181e <HAL_GPIO_Init+0x26a>
 80017e6:	bf00      	nop
 80017e8:	58000080 	.word	0x58000080
 80017ec:	58024400 	.word	0x58024400
 80017f0:	58000400 	.word	0x58000400
 80017f4:	58020000 	.word	0x58020000
 80017f8:	58020400 	.word	0x58020400
 80017fc:	58020800 	.word	0x58020800
 8001800:	58020c00 	.word	0x58020c00
 8001804:	58021000 	.word	0x58021000
 8001808:	58021400 	.word	0x58021400
 800180c:	58021800 	.word	0x58021800
 8001810:	58021c00 	.word	0x58021c00
 8001814:	58022000 	.word	0x58022000
 8001818:	58022400 	.word	0x58022400
 800181c:	2300      	movs	r3, #0
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	f002 0203 	and.w	r2, r2, #3
 8001824:	0092      	lsls	r2, r2, #2
 8001826:	4093      	lsls	r3, r2
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800182e:	4938      	ldr	r1, [pc, #224]	; (8001910 <HAL_GPIO_Init+0x35c>)
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3302      	adds	r3, #2
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800183c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001862:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800186a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	3301      	adds	r3, #1
 80018f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa22 f303 	lsr.w	r3, r2, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f47f ae63 	bne.w	80015c8 <HAL_GPIO_Init+0x14>
  }
}
 8001902:	bf00      	nop
 8001904:	bf00      	nop
 8001906:	3724      	adds	r7, #36	; 0x24
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	58000400 	.word	0x58000400

08001914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
 8001920:	4613      	mov	r3, r2
 8001922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001924:	787b      	ldrb	r3, [r7, #1]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001930:	e003      	b.n	800193a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	041a      	lsls	r2, r3, #16
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	619a      	str	r2, [r3, #24]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001950:	4a08      	ldr	r2, [pc, #32]	; (8001974 <HAL_HSEM_FastTake+0x2c>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3320      	adds	r3, #32
 8001956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_HSEM_FastTake+0x30>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d101      	bne.n	8001964 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	e000      	b.n	8001966 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	58026400 	.word	0x58026400
 8001978:	80000300 	.word	0x80000300

0800197c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001986:	4906      	ldr	r1, [pc, #24]	; (80019a0 <HAL_HSEM_Release+0x24>)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	58026400 	.word	0x58026400

080019a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80019ac:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <HAL_PWREx_ConfigSupply+0xb0>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	2b06      	cmp	r3, #6
 80019b6:	d00a      	beq.n	80019ce <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019b8:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <HAL_PWREx_ConfigSupply+0xb0>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d001      	beq.n	80019ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e040      	b.n	8001a4c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e03e      	b.n	8001a4c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019ce:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <HAL_PWREx_ConfigSupply+0xb0>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80019d6:	491f      	ldr	r1, [pc, #124]	; (8001a54 <HAL_PWREx_ConfigSupply+0xb0>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4313      	orrs	r3, r2
 80019dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019de:	f7ff fcc9 	bl	8001374 <HAL_GetTick>
 80019e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019e4:	e009      	b.n	80019fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019e6:	f7ff fcc5 	bl	8001374 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019f4:	d901      	bls.n	80019fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e028      	b.n	8001a4c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <HAL_PWREx_ConfigSupply+0xb0>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a06:	d1ee      	bne.n	80019e6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b1e      	cmp	r3, #30
 8001a0c:	d008      	beq.n	8001a20 <HAL_PWREx_ConfigSupply+0x7c>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b2e      	cmp	r3, #46	; 0x2e
 8001a12:	d005      	beq.n	8001a20 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b1d      	cmp	r3, #29
 8001a18:	d002      	beq.n	8001a20 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b2d      	cmp	r3, #45	; 0x2d
 8001a1e:	d114      	bne.n	8001a4a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001a20:	f7ff fca8 	bl	8001374 <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a26:	e009      	b.n	8001a3c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a28:	f7ff fca4 	bl	8001374 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a36:	d901      	bls.n	8001a3c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e007      	b.n	8001a4c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a48:	d1ee      	bne.n	8001a28 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	58024800 	.word	0x58024800

08001a58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08c      	sub	sp, #48	; 0x30
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d102      	bne.n	8001a6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	f000 bc1d 	b.w	80022a6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8087 	beq.w	8001b88 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a7a:	4b99      	ldr	r3, [pc, #612]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a84:	4b96      	ldr	r3, [pc, #600]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	2b10      	cmp	r3, #16
 8001a8e:	d007      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x48>
 8001a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a92:	2b18      	cmp	r3, #24
 8001a94:	d110      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x60>
 8001a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d10b      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	4b8f      	ldr	r3, [pc, #572]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d06c      	beq.n	8001b86 <HAL_RCC_OscConfig+0x12e>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d168      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e3f6      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac0:	d106      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x78>
 8001ac2:	4b87      	ldr	r3, [pc, #540]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a86      	ldr	r2, [pc, #536]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e02e      	b.n	8001b2e <HAL_RCC_OscConfig+0xd6>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10c      	bne.n	8001af2 <HAL_RCC_OscConfig+0x9a>
 8001ad8:	4b81      	ldr	r3, [pc, #516]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a80      	ldr	r2, [pc, #512]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b7e      	ldr	r3, [pc, #504]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a7d      	ldr	r2, [pc, #500]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	e01d      	b.n	8001b2e <HAL_RCC_OscConfig+0xd6>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001afa:	d10c      	bne.n	8001b16 <HAL_RCC_OscConfig+0xbe>
 8001afc:	4b78      	ldr	r3, [pc, #480]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a77      	ldr	r2, [pc, #476]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001b02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	4b75      	ldr	r3, [pc, #468]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a74      	ldr	r2, [pc, #464]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	e00b      	b.n	8001b2e <HAL_RCC_OscConfig+0xd6>
 8001b16:	4b72      	ldr	r3, [pc, #456]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a71      	ldr	r2, [pc, #452]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	4b6f      	ldr	r3, [pc, #444]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a6e      	ldr	r2, [pc, #440]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d013      	beq.n	8001b5e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff fc1d 	bl	8001374 <HAL_GetTick>
 8001b3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b3e:	f7ff fc19 	bl	8001374 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b64      	cmp	r3, #100	; 0x64
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e3aa      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b50:	4b63      	ldr	r3, [pc, #396]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0xe6>
 8001b5c:	e014      	b.n	8001b88 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fc09 	bl	8001374 <HAL_GetTick>
 8001b62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b66:	f7ff fc05 	bl	8001374 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b64      	cmp	r3, #100	; 0x64
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e396      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b78:	4b59      	ldr	r3, [pc, #356]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f0      	bne.n	8001b66 <HAL_RCC_OscConfig+0x10e>
 8001b84:	e000      	b.n	8001b88 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b86:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80cb 	beq.w	8001d2c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b96:	4b52      	ldr	r3, [pc, #328]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b9e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ba0:	4b4f      	ldr	r3, [pc, #316]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <HAL_RCC_OscConfig+0x164>
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	2b18      	cmp	r3, #24
 8001bb0:	d156      	bne.n	8001c60 <HAL_RCC_OscConfig+0x208>
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d151      	bne.n	8001c60 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bbc:	4b48      	ldr	r3, [pc, #288]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x17c>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e368      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bd4:	4b42      	ldr	r3, [pc, #264]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 0219 	bic.w	r2, r3, #25
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	493f      	ldr	r1, [pc, #252]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001be6:	f7ff fbc5 	bl	8001374 <HAL_GetTick>
 8001bea:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bee:	f7ff fbc1 	bl	8001374 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e352      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c00:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0c:	f7ff fbe2 	bl	80013d4 <HAL_GetREVID>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d817      	bhi.n	8001c4a <HAL_RCC_OscConfig+0x1f2>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b40      	cmp	r3, #64	; 0x40
 8001c20:	d108      	bne.n	8001c34 <HAL_RCC_OscConfig+0x1dc>
 8001c22:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c2a:	4a2d      	ldr	r2, [pc, #180]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c30:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c32:	e07b      	b.n	8001d2c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c34:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	031b      	lsls	r3, r3, #12
 8001c42:	4927      	ldr	r1, [pc, #156]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c48:	e070      	b.n	8001d2c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4a:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	061b      	lsls	r3, r3, #24
 8001c58:	4921      	ldr	r1, [pc, #132]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c5e:	e065      	b.n	8001d2c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d048      	beq.n	8001cfa <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f023 0219 	bic.w	r2, r3, #25
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	491a      	ldr	r1, [pc, #104]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fb7b 	bl	8001374 <HAL_GetTick>
 8001c7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c82:	f7ff fb77 	bl	8001374 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e308      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca0:	f7ff fb98 	bl	80013d4 <HAL_GetREVID>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f241 0203 	movw	r2, #4099	; 0x1003
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d81a      	bhi.n	8001ce4 <HAL_RCC_OscConfig+0x28c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	2b40      	cmp	r3, #64	; 0x40
 8001cb4:	d108      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x270>
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001cbe:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	6053      	str	r3, [r2, #4]
 8001cc6:	e031      	b.n	8001d2c <HAL_RCC_OscConfig+0x2d4>
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	031b      	lsls	r3, r3, #12
 8001cd6:	4902      	ldr	r1, [pc, #8]	; (8001ce0 <HAL_RCC_OscConfig+0x288>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
 8001cdc:	e026      	b.n	8001d2c <HAL_RCC_OscConfig+0x2d4>
 8001cde:	bf00      	nop
 8001ce0:	58024400 	.word	0x58024400
 8001ce4:	4b9a      	ldr	r3, [pc, #616]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	4997      	ldr	r1, [pc, #604]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
 8001cf8:	e018      	b.n	8001d2c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfa:	4b95      	ldr	r3, [pc, #596]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a94      	ldr	r2, [pc, #592]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d06:	f7ff fb35 	bl	8001374 <HAL_GetTick>
 8001d0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0e:	f7ff fb31 	bl	8001374 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e2c2      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d20:	4b8b      	ldr	r3, [pc, #556]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80a9 	beq.w	8001e8c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3a:	4b85      	ldr	r3, [pc, #532]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d42:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d44:	4b82      	ldr	r3, [pc, #520]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d48:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d007      	beq.n	8001d60 <HAL_RCC_OscConfig+0x308>
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	2b18      	cmp	r3, #24
 8001d54:	d13a      	bne.n	8001dcc <HAL_RCC_OscConfig+0x374>
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d135      	bne.n	8001dcc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d60:	4b7b      	ldr	r3, [pc, #492]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_OscConfig+0x320>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	2b80      	cmp	r3, #128	; 0x80
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e296      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d78:	f7ff fb2c 	bl	80013d4 <HAL_GetREVID>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d817      	bhi.n	8001db6 <HAL_RCC_OscConfig+0x35e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	2b20      	cmp	r3, #32
 8001d8c:	d108      	bne.n	8001da0 <HAL_RCC_OscConfig+0x348>
 8001d8e:	4b70      	ldr	r3, [pc, #448]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d96:	4a6e      	ldr	r2, [pc, #440]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001d98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d9c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d9e:	e075      	b.n	8001e8c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001da0:	4b6b      	ldr	r3, [pc, #428]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	069b      	lsls	r3, r3, #26
 8001dae:	4968      	ldr	r1, [pc, #416]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001db4:	e06a      	b.n	8001e8c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001db6:	4b66      	ldr	r3, [pc, #408]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	061b      	lsls	r3, r3, #24
 8001dc4:	4962      	ldr	r1, [pc, #392]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dca:	e05f      	b.n	8001e8c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d042      	beq.n	8001e5a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001dd4:	4b5e      	ldr	r3, [pc, #376]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a5d      	ldr	r2, [pc, #372]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff fac8 	bl	8001374 <HAL_GetTick>
 8001de4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001de8:	f7ff fac4 	bl	8001374 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e255      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dfa:	4b55      	ldr	r3, [pc, #340]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e06:	f7ff fae5 	bl	80013d4 <HAL_GetREVID>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d817      	bhi.n	8001e44 <HAL_RCC_OscConfig+0x3ec>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d108      	bne.n	8001e2e <HAL_RCC_OscConfig+0x3d6>
 8001e1c:	4b4c      	ldr	r3, [pc, #304]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001e24:	4a4a      	ldr	r2, [pc, #296]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001e26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e2a:	6053      	str	r3, [r2, #4]
 8001e2c:	e02e      	b.n	8001e8c <HAL_RCC_OscConfig+0x434>
 8001e2e:	4b48      	ldr	r3, [pc, #288]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	069b      	lsls	r3, r3, #26
 8001e3c:	4944      	ldr	r1, [pc, #272]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	604b      	str	r3, [r1, #4]
 8001e42:	e023      	b.n	8001e8c <HAL_RCC_OscConfig+0x434>
 8001e44:	4b42      	ldr	r3, [pc, #264]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	061b      	lsls	r3, r3, #24
 8001e52:	493f      	ldr	r1, [pc, #252]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60cb      	str	r3, [r1, #12]
 8001e58:	e018      	b.n	8001e8c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a3c      	ldr	r2, [pc, #240]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e66:	f7ff fa85 	bl	8001374 <HAL_GetTick>
 8001e6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e6e:	f7ff fa81 	bl	8001374 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e212      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e80:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d036      	beq.n	8001f06 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d019      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea4:	4a2a      	ldr	r2, [pc, #168]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eac:	f7ff fa62 	bl	8001374 <HAL_GetTick>
 8001eb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb4:	f7ff fa5e 	bl	8001374 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e1ef      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ec6:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x45c>
 8001ed2:	e018      	b.n	8001f06 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed8:	4a1d      	ldr	r2, [pc, #116]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7ff fa48 	bl	8001374 <HAL_GetTick>
 8001ee4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee8:	f7ff fa44 	bl	8001374 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e1d5      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d039      	beq.n	8001f86 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d01c      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a0c      	ldr	r2, [pc, #48]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001f20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f26:	f7ff fa25 	bl	8001374 <HAL_GetTick>
 8001f2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f2e:	f7ff fa21 	bl	8001374 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e1b2      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x4d6>
 8001f4c:	e01b      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
 8001f4e:	bf00      	nop
 8001f50:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f54:	4b9b      	ldr	r3, [pc, #620]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a9a      	ldr	r2, [pc, #616]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8001f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f60:	f7ff fa08 	bl	8001374 <HAL_GetTick>
 8001f64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f68:	f7ff fa04 	bl	8001374 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e195      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f7a:	4b92      	ldr	r3, [pc, #584]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8081 	beq.w	8002096 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f94:	4b8c      	ldr	r3, [pc, #560]	; (80021c8 <HAL_RCC_OscConfig+0x770>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a8b      	ldr	r2, [pc, #556]	; (80021c8 <HAL_RCC_OscConfig+0x770>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fa0:	f7ff f9e8 	bl	8001374 <HAL_GetTick>
 8001fa4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001fa8:	f7ff f9e4 	bl	8001374 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e175      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fba:	4b83      	ldr	r3, [pc, #524]	; (80021c8 <HAL_RCC_OscConfig+0x770>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d106      	bne.n	8001fdc <HAL_RCC_OscConfig+0x584>
 8001fce:	4b7d      	ldr	r3, [pc, #500]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	4a7c      	ldr	r2, [pc, #496]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fda:	e02d      	b.n	8002038 <HAL_RCC_OscConfig+0x5e0>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10c      	bne.n	8001ffe <HAL_RCC_OscConfig+0x5a6>
 8001fe4:	4b77      	ldr	r3, [pc, #476]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe8:	4a76      	ldr	r2, [pc, #472]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff0:	4b74      	ldr	r3, [pc, #464]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	4a73      	ldr	r2, [pc, #460]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8001ff6:	f023 0304 	bic.w	r3, r3, #4
 8001ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffc:	e01c      	b.n	8002038 <HAL_RCC_OscConfig+0x5e0>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b05      	cmp	r3, #5
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x5c8>
 8002006:	4b6f      	ldr	r3, [pc, #444]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200a:	4a6e      	ldr	r2, [pc, #440]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	6713      	str	r3, [r2, #112]	; 0x70
 8002012:	4b6c      	ldr	r3, [pc, #432]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002016:	4a6b      	ldr	r2, [pc, #428]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6713      	str	r3, [r2, #112]	; 0x70
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0x5e0>
 8002020:	4b68      	ldr	r3, [pc, #416]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002024:	4a67      	ldr	r2, [pc, #412]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8002026:	f023 0301 	bic.w	r3, r3, #1
 800202a:	6713      	str	r3, [r2, #112]	; 0x70
 800202c:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002030:	4a64      	ldr	r2, [pc, #400]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8002032:	f023 0304 	bic.w	r3, r3, #4
 8002036:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d015      	beq.n	800206c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002040:	f7ff f998 	bl	8001374 <HAL_GetTick>
 8002044:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002046:	e00a      	b.n	800205e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002048:	f7ff f994 	bl	8001374 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	; 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e123      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800205e:	4b59      	ldr	r3, [pc, #356]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0ee      	beq.n	8002048 <HAL_RCC_OscConfig+0x5f0>
 800206a:	e014      	b.n	8002096 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7ff f982 	bl	8001374 <HAL_GetTick>
 8002070:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002072:	e00a      	b.n	800208a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002074:	f7ff f97e 	bl	8001374 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e10d      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800208a:	4b4e      	ldr	r3, [pc, #312]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1ee      	bne.n	8002074 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 8102 	beq.w	80022a4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80020a0:	4b48      	ldr	r3, [pc, #288]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020a8:	2b18      	cmp	r3, #24
 80020aa:	f000 80bd 	beq.w	8002228 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	f040 809e 	bne.w	80021f4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b8:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a41      	ldr	r2, [pc, #260]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 80020be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7ff f956 	bl	8001374 <HAL_GetTick>
 80020c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020cc:	f7ff f952 	bl	8001374 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e0e3      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020de:	4b39      	ldr	r3, [pc, #228]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ea:	4b36      	ldr	r3, [pc, #216]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 80020ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ee:	4b37      	ldr	r3, [pc, #220]	; (80021cc <HAL_RCC_OscConfig+0x774>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020fa:	0112      	lsls	r2, r2, #4
 80020fc:	430a      	orrs	r2, r1
 80020fe:	4931      	ldr	r1, [pc, #196]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8002100:	4313      	orrs	r3, r2
 8002102:	628b      	str	r3, [r1, #40]	; 0x28
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	3b01      	subs	r3, #1
 800210a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002112:	3b01      	subs	r3, #1
 8002114:	025b      	lsls	r3, r3, #9
 8002116:	b29b      	uxth	r3, r3
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211e:	3b01      	subs	r3, #1
 8002120:	041b      	lsls	r3, r3, #16
 8002122:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212c:	3b01      	subs	r3, #1
 800212e:	061b      	lsls	r3, r3, #24
 8002130:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002134:	4923      	ldr	r1, [pc, #140]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8002136:	4313      	orrs	r3, r2
 8002138:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800213a:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	4a21      	ldr	r2, [pc, #132]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002146:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8002148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800214a:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <HAL_RCC_OscConfig+0x778>)
 800214c:	4013      	ands	r3, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002152:	00d2      	lsls	r2, r2, #3
 8002154:	491b      	ldr	r1, [pc, #108]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8002156:	4313      	orrs	r3, r2
 8002158:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	f023 020c 	bic.w	r2, r3, #12
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	4917      	ldr	r1, [pc, #92]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8002168:	4313      	orrs	r3, r2
 800216a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800216c:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	f023 0202 	bic.w	r2, r3, #2
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	4912      	ldr	r1, [pc, #72]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 800217a:	4313      	orrs	r3, r2
 800217c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 800218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218e:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8002190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002194:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 800219c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 80021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a6:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <HAL_RCC_OscConfig+0x76c>)
 80021b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ba:	f7ff f8db 	bl	8001374 <HAL_GetTick>
 80021be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021c0:	e011      	b.n	80021e6 <HAL_RCC_OscConfig+0x78e>
 80021c2:	bf00      	nop
 80021c4:	58024400 	.word	0x58024400
 80021c8:	58024800 	.word	0x58024800
 80021cc:	fffffc0c 	.word	0xfffffc0c
 80021d0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d4:	f7ff f8ce 	bl	8001374 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e05f      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021e6:	4b32      	ldr	r3, [pc, #200]	; (80022b0 <HAL_RCC_OscConfig+0x858>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x77c>
 80021f2:	e057      	b.n	80022a4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f4:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <HAL_RCC_OscConfig+0x858>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a2d      	ldr	r2, [pc, #180]	; (80022b0 <HAL_RCC_OscConfig+0x858>)
 80021fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7ff f8b8 	bl	8001374 <HAL_GetTick>
 8002204:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002208:	f7ff f8b4 	bl	8001374 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e045      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800221a:	4b25      	ldr	r3, [pc, #148]	; (80022b0 <HAL_RCC_OscConfig+0x858>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x7b0>
 8002226:	e03d      	b.n	80022a4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002228:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <HAL_RCC_OscConfig+0x858>)
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_RCC_OscConfig+0x858>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	2b01      	cmp	r3, #1
 800223a:	d031      	beq.n	80022a0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	f003 0203 	and.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d12a      	bne.n	80022a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d122      	bne.n	80022a0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d11a      	bne.n	80022a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	0a5b      	lsrs	r3, r3, #9
 800226e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002276:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d111      	bne.n	80022a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	0c1b      	lsrs	r3, r3, #16
 8002280:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d108      	bne.n	80022a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	0e1b      	lsrs	r3, r3, #24
 8002292:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3730      	adds	r7, #48	; 0x30
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	58024400 	.word	0x58024400

080022b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e19c      	b.n	8002602 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c8:	4b8a      	ldr	r3, [pc, #552]	; (80024f4 <HAL_RCC_ClockConfig+0x240>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d910      	bls.n	80022f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b87      	ldr	r3, [pc, #540]	; (80024f4 <HAL_RCC_ClockConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 020f 	bic.w	r2, r3, #15
 80022de:	4985      	ldr	r1, [pc, #532]	; (80024f4 <HAL_RCC_ClockConfig+0x240>)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b83      	ldr	r3, [pc, #524]	; (80024f4 <HAL_RCC_ClockConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e184      	b.n	8002602 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d010      	beq.n	8002326 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	4b7b      	ldr	r3, [pc, #492]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002310:	429a      	cmp	r2, r3
 8002312:	d908      	bls.n	8002326 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002314:	4b78      	ldr	r3, [pc, #480]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	4975      	ldr	r1, [pc, #468]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002322:	4313      	orrs	r3, r2
 8002324:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d010      	beq.n	8002354 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	4b70      	ldr	r3, [pc, #448]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800233e:	429a      	cmp	r2, r3
 8002340:	d908      	bls.n	8002354 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002342:	4b6d      	ldr	r3, [pc, #436]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	496a      	ldr	r1, [pc, #424]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002350:	4313      	orrs	r3, r2
 8002352:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	d010      	beq.n	8002382 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699a      	ldr	r2, [r3, #24]
 8002364:	4b64      	ldr	r3, [pc, #400]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800236c:	429a      	cmp	r2, r3
 800236e:	d908      	bls.n	8002382 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002370:	4b61      	ldr	r3, [pc, #388]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	495e      	ldr	r1, [pc, #376]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 800237e:	4313      	orrs	r3, r2
 8002380:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	2b00      	cmp	r3, #0
 800238c:	d010      	beq.n	80023b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69da      	ldr	r2, [r3, #28]
 8002392:	4b59      	ldr	r3, [pc, #356]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800239a:	429a      	cmp	r2, r3
 800239c:	d908      	bls.n	80023b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800239e:	4b56      	ldr	r3, [pc, #344]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	4953      	ldr	r1, [pc, #332]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d010      	beq.n	80023de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	4b4d      	ldr	r3, [pc, #308]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d908      	bls.n	80023de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023cc:	4b4a      	ldr	r3, [pc, #296]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f023 020f 	bic.w	r2, r3, #15
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4947      	ldr	r1, [pc, #284]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d055      	beq.n	8002496 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023ea:	4b43      	ldr	r3, [pc, #268]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	4940      	ldr	r1, [pc, #256]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d107      	bne.n	8002414 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002404:	4b3c      	ldr	r3, [pc, #240]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d121      	bne.n	8002454 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0f6      	b.n	8002602 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d107      	bne.n	800242c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800241c:	4b36      	ldr	r3, [pc, #216]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d115      	bne.n	8002454 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0ea      	b.n	8002602 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d107      	bne.n	8002444 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002434:	4b30      	ldr	r3, [pc, #192]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d109      	bne.n	8002454 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0de      	b.n	8002602 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002444:	4b2c      	ldr	r3, [pc, #176]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0d6      	b.n	8002602 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002454:	4b28      	ldr	r3, [pc, #160]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f023 0207 	bic.w	r2, r3, #7
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4925      	ldr	r1, [pc, #148]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002462:	4313      	orrs	r3, r2
 8002464:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002466:	f7fe ff85 	bl	8001374 <HAL_GetTick>
 800246a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246c:	e00a      	b.n	8002484 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246e:	f7fe ff81 	bl	8001374 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f241 3288 	movw	r2, #5000	; 0x1388
 800247c:	4293      	cmp	r3, r2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e0be      	b.n	8002602 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002484:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	429a      	cmp	r2, r3
 8002494:	d1eb      	bne.n	800246e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d010      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d208      	bcs.n	80024c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f023 020f 	bic.w	r2, r3, #15
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	490e      	ldr	r1, [pc, #56]	; (80024f8 <HAL_RCC_ClockConfig+0x244>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_RCC_ClockConfig+0x240>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 030f 	and.w	r3, r3, #15
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d214      	bcs.n	80024fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <HAL_RCC_ClockConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 020f 	bic.w	r2, r3, #15
 80024da:	4906      	ldr	r1, [pc, #24]	; (80024f4 <HAL_RCC_ClockConfig+0x240>)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <HAL_RCC_ClockConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e086      	b.n	8002602 <HAL_RCC_ClockConfig+0x34e>
 80024f4:	52002000 	.word	0x52002000
 80024f8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d010      	beq.n	800252a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	4b3f      	ldr	r3, [pc, #252]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002514:	429a      	cmp	r2, r3
 8002516:	d208      	bcs.n	800252a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002518:	4b3c      	ldr	r3, [pc, #240]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	4939      	ldr	r1, [pc, #228]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 8002526:	4313      	orrs	r3, r2
 8002528:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d010      	beq.n	8002558 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	4b34      	ldr	r3, [pc, #208]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002542:	429a      	cmp	r2, r3
 8002544:	d208      	bcs.n	8002558 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002546:	4b31      	ldr	r3, [pc, #196]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	492e      	ldr	r1, [pc, #184]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 8002554:	4313      	orrs	r3, r2
 8002556:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	d010      	beq.n	8002586 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	4b28      	ldr	r3, [pc, #160]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002570:	429a      	cmp	r2, r3
 8002572:	d208      	bcs.n	8002586 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002574:	4b25      	ldr	r3, [pc, #148]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	4922      	ldr	r1, [pc, #136]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 8002582:	4313      	orrs	r3, r2
 8002584:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	2b00      	cmp	r3, #0
 8002590:	d010      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69da      	ldr	r2, [r3, #28]
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800259e:	429a      	cmp	r2, r3
 80025a0:	d208      	bcs.n	80025b4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80025a2:	4b1a      	ldr	r3, [pc, #104]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4917      	ldr	r1, [pc, #92]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025b4:	f000 f834 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b14      	ldr	r3, [pc, #80]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	4912      	ldr	r1, [pc, #72]	; (8002610 <HAL_RCC_ClockConfig+0x35c>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <HAL_RCC_ClockConfig+0x358>)
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	4a0d      	ldr	r2, [pc, #52]	; (8002610 <HAL_RCC_ClockConfig+0x35c>)
 80025dc:	5cd3      	ldrb	r3, [r2, r3]
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
 80025e8:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <HAL_RCC_ClockConfig+0x360>)
 80025ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025ec:	4a0a      	ldr	r2, [pc, #40]	; (8002618 <HAL_RCC_ClockConfig+0x364>)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <HAL_RCC_ClockConfig+0x368>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fe72 	bl	80012e0 <HAL_InitTick>
 80025fc:	4603      	mov	r3, r0
 80025fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	58024400 	.word	0x58024400
 8002610:	08008cb4 	.word	0x08008cb4
 8002614:	24000004 	.word	0x24000004
 8002618:	24000000 	.word	0x24000000
 800261c:	24000008 	.word	0x24000008

08002620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002626:	4bb3      	ldr	r3, [pc, #716]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800262e:	2b18      	cmp	r3, #24
 8002630:	f200 8155 	bhi.w	80028de <HAL_RCC_GetSysClockFreq+0x2be>
 8002634:	a201      	add	r2, pc, #4	; (adr r2, 800263c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263a:	bf00      	nop
 800263c:	080026a1 	.word	0x080026a1
 8002640:	080028df 	.word	0x080028df
 8002644:	080028df 	.word	0x080028df
 8002648:	080028df 	.word	0x080028df
 800264c:	080028df 	.word	0x080028df
 8002650:	080028df 	.word	0x080028df
 8002654:	080028df 	.word	0x080028df
 8002658:	080028df 	.word	0x080028df
 800265c:	080026c7 	.word	0x080026c7
 8002660:	080028df 	.word	0x080028df
 8002664:	080028df 	.word	0x080028df
 8002668:	080028df 	.word	0x080028df
 800266c:	080028df 	.word	0x080028df
 8002670:	080028df 	.word	0x080028df
 8002674:	080028df 	.word	0x080028df
 8002678:	080028df 	.word	0x080028df
 800267c:	080026cd 	.word	0x080026cd
 8002680:	080028df 	.word	0x080028df
 8002684:	080028df 	.word	0x080028df
 8002688:	080028df 	.word	0x080028df
 800268c:	080028df 	.word	0x080028df
 8002690:	080028df 	.word	0x080028df
 8002694:	080028df 	.word	0x080028df
 8002698:	080028df 	.word	0x080028df
 800269c:	080026d3 	.word	0x080026d3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026a0:	4b94      	ldr	r3, [pc, #592]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d009      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80026ac:	4b91      	ldr	r3, [pc, #580]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	08db      	lsrs	r3, r3, #3
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	4a90      	ldr	r2, [pc, #576]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026b8:	fa22 f303 	lsr.w	r3, r2, r3
 80026bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80026be:	e111      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026c0:	4b8d      	ldr	r3, [pc, #564]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026c2:	61bb      	str	r3, [r7, #24]
    break;
 80026c4:	e10e      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80026c6:	4b8d      	ldr	r3, [pc, #564]	; (80028fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026c8:	61bb      	str	r3, [r7, #24]
    break;
 80026ca:	e10b      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80026cc:	4b8c      	ldr	r3, [pc, #560]	; (8002900 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80026ce:	61bb      	str	r3, [r7, #24]
    break;
 80026d0:	e108      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026d2:	4b88      	ldr	r3, [pc, #544]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80026dc:	4b85      	ldr	r3, [pc, #532]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026e6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026e8:	4b82      	ldr	r3, [pc, #520]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80026f2:	4b80      	ldr	r3, [pc, #512]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f6:	08db      	lsrs	r3, r3, #3
 80026f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	fb02 f303 	mul.w	r3, r2, r3
 8002702:	ee07 3a90 	vmov	s15, r3
 8002706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800270a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80e1 	beq.w	80028d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b02      	cmp	r3, #2
 800271a:	f000 8083 	beq.w	8002824 <HAL_RCC_GetSysClockFreq+0x204>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b02      	cmp	r3, #2
 8002722:	f200 80a1 	bhi.w	8002868 <HAL_RCC_GetSysClockFreq+0x248>
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x114>
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d056      	beq.n	80027e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002732:	e099      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002734:	4b6f      	ldr	r3, [pc, #444]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b00      	cmp	r3, #0
 800273e:	d02d      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002740:	4b6c      	ldr	r3, [pc, #432]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	08db      	lsrs	r3, r3, #3
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	4a6b      	ldr	r2, [pc, #428]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
 8002750:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	ee07 3a90 	vmov	s15, r3
 8002758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	ee07 3a90 	vmov	s15, r3
 8002762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800276a:	4b62      	ldr	r3, [pc, #392]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800277a:	ed97 6a02 	vldr	s12, [r7, #8]
 800277e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002904 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800278a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800278e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002796:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800279a:	e087      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	ee07 3a90 	vmov	s15, r3
 80027a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002908 <HAL_RCC_GetSysClockFreq+0x2e8>
 80027aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ae:	4b51      	ldr	r3, [pc, #324]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b6:	ee07 3a90 	vmov	s15, r3
 80027ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027be:	ed97 6a02 	vldr	s12, [r7, #8]
 80027c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002904 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027de:	e065      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800290c <HAL_RCC_GetSysClockFreq+0x2ec>
 80027ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027f2:	4b40      	ldr	r3, [pc, #256]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fa:	ee07 3a90 	vmov	s15, r3
 80027fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002802:	ed97 6a02 	vldr	s12, [r7, #8]
 8002806:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002904 <HAL_RCC_GetSysClockFreq+0x2e4>
 800280a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800280e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800281a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002822:	e043      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002910 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002836:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800283e:	ee07 3a90 	vmov	s15, r3
 8002842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002846:	ed97 6a02 	vldr	s12, [r7, #8]
 800284a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002904 <HAL_RCC_GetSysClockFreq+0x2e4>
 800284e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800285a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800285e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002866:	e021      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	ee07 3a90 	vmov	s15, r3
 800286e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002872:	eddf 6a26 	vldr	s13, [pc, #152]	; 800290c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800287a:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800288a:	ed97 6a02 	vldr	s12, [r7, #8]
 800288e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002904 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800289a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800289e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028aa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	0a5b      	lsrs	r3, r3, #9
 80028b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028b6:	3301      	adds	r3, #1
 80028b8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	ee07 3a90 	vmov	s15, r3
 80028c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80028c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028d0:	ee17 3a90 	vmov	r3, s15
 80028d4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80028d6:	e005      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	61bb      	str	r3, [r7, #24]
    break;
 80028dc:	e002      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80028de:	4b07      	ldr	r3, [pc, #28]	; (80028fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028e0:	61bb      	str	r3, [r7, #24]
    break;
 80028e2:	bf00      	nop
  }

  return sysclockfreq;
 80028e4:	69bb      	ldr	r3, [r7, #24]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3724      	adds	r7, #36	; 0x24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	58024400 	.word	0x58024400
 80028f8:	03d09000 	.word	0x03d09000
 80028fc:	003d0900 	.word	0x003d0900
 8002900:	007a1200 	.word	0x007a1200
 8002904:	46000000 	.word	0x46000000
 8002908:	4c742400 	.word	0x4c742400
 800290c:	4a742400 	.word	0x4a742400
 8002910:	4af42400 	.word	0x4af42400

08002914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800291a:	f7ff fe81 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 800291e:	4602      	mov	r2, r0
 8002920:	4b10      	ldr	r3, [pc, #64]	; (8002964 <HAL_RCC_GetHCLKFreq+0x50>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	490f      	ldr	r1, [pc, #60]	; (8002968 <HAL_RCC_GetHCLKFreq+0x54>)
 800292c:	5ccb      	ldrb	r3, [r1, r3]
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	fa22 f303 	lsr.w	r3, r2, r3
 8002936:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_RCC_GetHCLKFreq+0x50>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	4a09      	ldr	r2, [pc, #36]	; (8002968 <HAL_RCC_GetHCLKFreq+0x54>)
 8002942:	5cd3      	ldrb	r3, [r2, r3]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	fa22 f303 	lsr.w	r3, r2, r3
 800294e:	4a07      	ldr	r2, [pc, #28]	; (800296c <HAL_RCC_GetHCLKFreq+0x58>)
 8002950:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002952:	4a07      	ldr	r2, [pc, #28]	; (8002970 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <HAL_RCC_GetHCLKFreq+0x58>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	58024400 	.word	0x58024400
 8002968:	08008cb4 	.word	0x08008cb4
 800296c:	24000004 	.word	0x24000004
 8002970:	24000000 	.word	0x24000000

08002974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002978:	f7ff ffcc 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 800297c:	4602      	mov	r2, r0
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	4904      	ldr	r1, [pc, #16]	; (800299c <HAL_RCC_GetPCLK1Freq+0x28>)
 800298a:	5ccb      	ldrb	r3, [r1, r3]
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	58024400 	.word	0x58024400
 800299c:	08008cb4 	.word	0x08008cb4

080029a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80029a4:	f7ff ffb6 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4904      	ldr	r1, [pc, #16]	; (80029c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	58024400 	.word	0x58024400
 80029c8:	08008cb4 	.word	0x08008cb4

080029cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029d4:	2300      	movs	r3, #0
 80029d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029d8:	2300      	movs	r3, #0
 80029da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d03f      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029f0:	d02a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029f6:	d824      	bhi.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029fc:	d018      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a02:	d81e      	bhi.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0c:	d007      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a0e:	e018      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a10:	4ba3      	ldr	r3, [pc, #652]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	4aa2      	ldr	r2, [pc, #648]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a1c:	e015      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3304      	adds	r3, #4
 8002a22:	2102      	movs	r1, #2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 f9d5 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a2e:	e00c      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3324      	adds	r3, #36	; 0x24
 8002a34:	2102      	movs	r1, #2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f001 fa7e 	bl	8003f38 <RCCEx_PLL3_Config>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a40:	e003      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	75fb      	strb	r3, [r7, #23]
      break;
 8002a46:	e000      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d109      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a50:	4b93      	ldr	r3, [pc, #588]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a5c:	4990      	ldr	r1, [pc, #576]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	650b      	str	r3, [r1, #80]	; 0x50
 8002a62:	e001      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a64:	7dfb      	ldrb	r3, [r7, #23]
 8002a66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d03d      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d826      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a7c:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a82:	bf00      	nop
 8002a84:	08002a99 	.word	0x08002a99
 8002a88:	08002aa7 	.word	0x08002aa7
 8002a8c:	08002ab9 	.word	0x08002ab9
 8002a90:	08002ad1 	.word	0x08002ad1
 8002a94:	08002ad1 	.word	0x08002ad1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a98:	4b81      	ldr	r3, [pc, #516]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	4a80      	ldr	r2, [pc, #512]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002aa4:	e015      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f001 f991 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ab6:	e00c      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3324      	adds	r3, #36	; 0x24
 8002abc:	2100      	movs	r1, #0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f001 fa3a 	bl	8003f38 <RCCEx_PLL3_Config>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ac8:	e003      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	75fb      	strb	r3, [r7, #23]
      break;
 8002ace:	e000      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ad2:	7dfb      	ldrb	r3, [r7, #23]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d109      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ad8:	4b71      	ldr	r3, [pc, #452]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002adc:	f023 0207 	bic.w	r2, r3, #7
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae4:	496e      	ldr	r1, [pc, #440]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	650b      	str	r3, [r1, #80]	; 0x50
 8002aea:	e001      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d042      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b04:	d02b      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0a:	d825      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002b0c:	2bc0      	cmp	r3, #192	; 0xc0
 8002b0e:	d028      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002b10:	2bc0      	cmp	r3, #192	; 0xc0
 8002b12:	d821      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002b14:	2b80      	cmp	r3, #128	; 0x80
 8002b16:	d016      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002b18:	2b80      	cmp	r3, #128	; 0x80
 8002b1a:	d81d      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002b20:	2b40      	cmp	r3, #64	; 0x40
 8002b22:	d007      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002b24:	e018      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b26:	4b5e      	ldr	r3, [pc, #376]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	4a5d      	ldr	r2, [pc, #372]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b32:	e017      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3304      	adds	r3, #4
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 f94a 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002b40:	4603      	mov	r3, r0
 8002b42:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b44:	e00e      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3324      	adds	r3, #36	; 0x24
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 f9f3 	bl	8003f38 <RCCEx_PLL3_Config>
 8002b52:	4603      	mov	r3, r0
 8002b54:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b56:	e005      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b5c:	e002      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e000      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002b6a:	4b4d      	ldr	r3, [pc, #308]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b76:	494a      	ldr	r1, [pc, #296]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	650b      	str	r3, [r1, #80]	; 0x50
 8002b7c:	e001      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
 8002b80:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d049      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b98:	d030      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002b9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b9e:	d82a      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ba0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ba4:	d02c      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002ba6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002baa:	d824      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb0:	d018      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb6:	d81e      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002bbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bc0:	d007      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002bc2:	e018      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc4:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	4a35      	ldr	r2, [pc, #212]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bd0:	e017      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f001 f8fb 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002bde:	4603      	mov	r3, r0
 8002be0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002be2:	e00e      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3324      	adds	r3, #36	; 0x24
 8002be8:	2100      	movs	r1, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	f001 f9a4 	bl	8003f38 <RCCEx_PLL3_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bf4:	e005      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bfa:	e002      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002bfc:	bf00      	nop
 8002bfe:	e000      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10a      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c16:	4922      	ldr	r1, [pc, #136]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	658b      	str	r3, [r1, #88]	; 0x58
 8002c1c:	e001      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
 8002c20:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d04b      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c38:	d030      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002c3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c3e:	d82a      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c44:	d02e      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002c46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c4a:	d824      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c50:	d018      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002c52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c56:	d81e      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c60:	d007      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002c62:	e018      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c64:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c70:	e019      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3304      	adds	r3, #4
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f001 f8ab 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002c82:	e010      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3324      	adds	r3, #36	; 0x24
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 f954 	bl	8003f38 <RCCEx_PLL3_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c94:	e007      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]
      break;
 8002c9a:	e004      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002c9c:	bf00      	nop
 8002c9e:	e002      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002ca0:	58024400 	.word	0x58024400
      break;
 8002ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002cac:	4b99      	ldr	r3, [pc, #612]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002cba:	4996      	ldr	r1, [pc, #600]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	658b      	str	r3, [r1, #88]	; 0x58
 8002cc0:	e001      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d032      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd6:	2b30      	cmp	r3, #48	; 0x30
 8002cd8:	d01c      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002cda:	2b30      	cmp	r3, #48	; 0x30
 8002cdc:	d817      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	d00c      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002ce2:	2b20      	cmp	r3, #32
 8002ce4:	d813      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002cea:	2b10      	cmp	r3, #16
 8002cec:	d10f      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cee:	4b89      	ldr	r3, [pc, #548]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	4a88      	ldr	r2, [pc, #544]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002cfa:	e00e      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3304      	adds	r3, #4
 8002d00:	2102      	movs	r1, #2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f001 f866 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002d0c:	e005      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	75fb      	strb	r3, [r7, #23]
      break;
 8002d12:	e002      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002d14:	bf00      	nop
 8002d16:	e000      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d20:	4b7c      	ldr	r3, [pc, #496]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2c:	4979      	ldr	r1, [pc, #484]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d32:	e001      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
 8002d36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d047      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d4c:	d030      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002d4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d52:	d82a      	bhi.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d58:	d02c      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002d5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d5e:	d824      	bhi.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d64:	d018      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d6a:	d81e      	bhi.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d74:	d007      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002d76:	e018      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d78:	4b66      	ldr	r3, [pc, #408]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	4a65      	ldr	r2, [pc, #404]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d84:	e017      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 f821 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002d92:	4603      	mov	r3, r0
 8002d94:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d96:	e00e      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3324      	adds	r3, #36	; 0x24
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f001 f8ca 	bl	8003f38 <RCCEx_PLL3_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002da8:	e005      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	75fb      	strb	r3, [r7, #23]
      break;
 8002dae:	e002      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002db0:	bf00      	nop
 8002db2:	e000      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002db6:	7dfb      	ldrb	r3, [r7, #23]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d109      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002dbc:	4b55      	ldr	r3, [pc, #340]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	4952      	ldr	r1, [pc, #328]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	650b      	str	r3, [r1, #80]	; 0x50
 8002dce:	e001      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d049      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de8:	d02e      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002dea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dee:	d828      	bhi.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002df0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002df4:	d02a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002df6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dfa:	d822      	bhi.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002dfc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e00:	d026      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002e02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e06:	d81c      	bhi.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002e08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e0c:	d010      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002e0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e12:	d816      	bhi.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01d      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1c:	d111      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2101      	movs	r1, #1
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 ffd5 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002e2e:	e012      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3324      	adds	r3, #36	; 0x24
 8002e34:	2101      	movs	r1, #1
 8002e36:	4618      	mov	r0, r3
 8002e38:	f001 f87e 	bl	8003f38 <RCCEx_PLL3_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002e40:	e009      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
      break;
 8002e46:	e006      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e48:	bf00      	nop
 8002e4a:	e004      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e4c:	bf00      	nop
 8002e4e:	e002      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e50:	bf00      	nop
 8002e52:	e000      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d109      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002e5c:	4b2d      	ldr	r3, [pc, #180]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e60:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e68:	492a      	ldr	r1, [pc, #168]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	650b      	str	r3, [r1, #80]	; 0x50
 8002e6e:	e001      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e70:	7dfb      	ldrb	r3, [r7, #23]
 8002e72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d04d      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e8a:	d02e      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e90:	d828      	bhi.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e96:	d02a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9c:	d822      	bhi.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ea2:	d026      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002ea4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ea8:	d81c      	bhi.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eae:	d010      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb4:	d816      	bhi.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d01d      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ebe:	d111      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 ff84 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ed0:	e012      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3324      	adds	r3, #36	; 0x24
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f001 f82d 	bl	8003f38 <RCCEx_PLL3_Config>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ee2:	e009      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee8:	e006      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002eea:	bf00      	nop
 8002eec:	e004      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002eee:	bf00      	nop
 8002ef0:	e002      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ef2:	bf00      	nop
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ef6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f0c:	4901      	ldr	r1, [pc, #4]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	658b      	str	r3, [r1, #88]	; 0x58
 8002f12:	e003      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002f14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d02f      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f30:	d00e      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f36:	d814      	bhi.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d015      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002f3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f40:	d10f      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f42:	4baf      	ldr	r3, [pc, #700]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	4aae      	ldr	r2, [pc, #696]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002f4e:	e00c      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3304      	adds	r3, #4
 8002f54:	2101      	movs	r1, #1
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 ff3c 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002f60:	e003      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]
      break;
 8002f66:	e000      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002f68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d109      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f70:	4ba3      	ldr	r3, [pc, #652]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f7c:	49a0      	ldr	r1, [pc, #640]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	650b      	str	r3, [r1, #80]	; 0x50
 8002f82:	e001      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f84:	7dfb      	ldrb	r3, [r7, #23]
 8002f86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d032      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d81b      	bhi.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002f9c:	a201      	add	r2, pc, #4	; (adr r2, 8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa2:	bf00      	nop
 8002fa4:	08002fdb 	.word	0x08002fdb
 8002fa8:	08002fb5 	.word	0x08002fb5
 8002fac:	08002fc3 	.word	0x08002fc3
 8002fb0:	08002fdb 	.word	0x08002fdb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb4:	4b92      	ldr	r3, [pc, #584]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	4a91      	ldr	r2, [pc, #580]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002fc0:	e00c      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 ff03 	bl	8003dd4 <RCCEx_PLL2_Config>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002fd2:	e003      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fd8:	e000      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fdc:	7dfb      	ldrb	r3, [r7, #23]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002fe2:	4b87      	ldr	r3, [pc, #540]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe6:	f023 0203 	bic.w	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	4984      	ldr	r1, [pc, #528]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002ff4:	e001      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff6:	7dfb      	ldrb	r3, [r7, #23]
 8002ff8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 8086 	beq.w	8003114 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003008:	4b7e      	ldr	r3, [pc, #504]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a7d      	ldr	r2, [pc, #500]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800300e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003012:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003014:	f7fe f9ae 	bl	8001374 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800301a:	e009      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301c:	f7fe f9aa 	bl	8001374 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d902      	bls.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	75fb      	strb	r3, [r7, #23]
        break;
 800302e:	e005      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003030:	4b74      	ldr	r3, [pc, #464]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0ef      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800303c:	7dfb      	ldrb	r3, [r7, #23]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d166      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003042:	4b6f      	ldr	r3, [pc, #444]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003044:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800304c:	4053      	eors	r3, r2
 800304e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003052:	2b00      	cmp	r3, #0
 8003054:	d013      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003056:	4b6a      	ldr	r3, [pc, #424]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003060:	4b67      	ldr	r3, [pc, #412]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003064:	4a66      	ldr	r2, [pc, #408]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800306c:	4b64      	ldr	r3, [pc, #400]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003070:	4a63      	ldr	r2, [pc, #396]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003076:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003078:	4a61      	ldr	r2, [pc, #388]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003088:	d115      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7fe f973 	bl	8001374 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003090:	e00b      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fe f96f 	bl	8001374 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d902      	bls.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	75fb      	strb	r3, [r7, #23]
            break;
 80030a8:	e005      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030aa:	4b55      	ldr	r3, [pc, #340]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0ed      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d126      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ca:	d10d      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80030cc:	4b4c      	ldr	r3, [pc, #304]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030da:	0919      	lsrs	r1, r3, #4
 80030dc:	4b4a      	ldr	r3, [pc, #296]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80030de:	400b      	ands	r3, r1
 80030e0:	4947      	ldr	r1, [pc, #284]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	610b      	str	r3, [r1, #16]
 80030e6:	e005      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80030e8:	4b45      	ldr	r3, [pc, #276]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	4a44      	ldr	r2, [pc, #272]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030f2:	6113      	str	r3, [r2, #16]
 80030f4:	4b42      	ldr	r3, [pc, #264]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003102:	493f      	ldr	r1, [pc, #252]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003104:	4313      	orrs	r3, r2
 8003106:	670b      	str	r3, [r1, #112]	; 0x70
 8003108:	e004      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800310a:	7dfb      	ldrb	r3, [r7, #23]
 800310c:	75bb      	strb	r3, [r7, #22]
 800310e:	e001      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8085 	beq.w	800322c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003126:	2b28      	cmp	r3, #40	; 0x28
 8003128:	d866      	bhi.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800312a:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800312c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003130:	0800320d 	.word	0x0800320d
 8003134:	080031f9 	.word	0x080031f9
 8003138:	080031f9 	.word	0x080031f9
 800313c:	080031f9 	.word	0x080031f9
 8003140:	080031f9 	.word	0x080031f9
 8003144:	080031f9 	.word	0x080031f9
 8003148:	080031f9 	.word	0x080031f9
 800314c:	080031f9 	.word	0x080031f9
 8003150:	080031d5 	.word	0x080031d5
 8003154:	080031f9 	.word	0x080031f9
 8003158:	080031f9 	.word	0x080031f9
 800315c:	080031f9 	.word	0x080031f9
 8003160:	080031f9 	.word	0x080031f9
 8003164:	080031f9 	.word	0x080031f9
 8003168:	080031f9 	.word	0x080031f9
 800316c:	080031f9 	.word	0x080031f9
 8003170:	080031e7 	.word	0x080031e7
 8003174:	080031f9 	.word	0x080031f9
 8003178:	080031f9 	.word	0x080031f9
 800317c:	080031f9 	.word	0x080031f9
 8003180:	080031f9 	.word	0x080031f9
 8003184:	080031f9 	.word	0x080031f9
 8003188:	080031f9 	.word	0x080031f9
 800318c:	080031f9 	.word	0x080031f9
 8003190:	0800320d 	.word	0x0800320d
 8003194:	080031f9 	.word	0x080031f9
 8003198:	080031f9 	.word	0x080031f9
 800319c:	080031f9 	.word	0x080031f9
 80031a0:	080031f9 	.word	0x080031f9
 80031a4:	080031f9 	.word	0x080031f9
 80031a8:	080031f9 	.word	0x080031f9
 80031ac:	080031f9 	.word	0x080031f9
 80031b0:	0800320d 	.word	0x0800320d
 80031b4:	080031f9 	.word	0x080031f9
 80031b8:	080031f9 	.word	0x080031f9
 80031bc:	080031f9 	.word	0x080031f9
 80031c0:	080031f9 	.word	0x080031f9
 80031c4:	080031f9 	.word	0x080031f9
 80031c8:	080031f9 	.word	0x080031f9
 80031cc:	080031f9 	.word	0x080031f9
 80031d0:	0800320d 	.word	0x0800320d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3304      	adds	r3, #4
 80031d8:	2101      	movs	r1, #1
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fdfa 	bl	8003dd4 <RCCEx_PLL2_Config>
 80031e0:	4603      	mov	r3, r0
 80031e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80031e4:	e013      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3324      	adds	r3, #36	; 0x24
 80031ea:	2101      	movs	r1, #1
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fea3 	bl	8003f38 <RCCEx_PLL3_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80031f6:	e00a      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	75fb      	strb	r3, [r7, #23]
      break;
 80031fc:	e007      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031fe:	bf00      	nop
 8003200:	58024400 	.word	0x58024400
 8003204:	58024800 	.word	0x58024800
 8003208:	00ffffcf 	.word	0x00ffffcf
      break;
 800320c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800320e:	7dfb      	ldrb	r3, [r7, #23]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d109      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003214:	4b96      	ldr	r3, [pc, #600]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003218:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003220:	4993      	ldr	r1, [pc, #588]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	654b      	str	r3, [r1, #84]	; 0x54
 8003226:	e001      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003228:	7dfb      	ldrb	r3, [r7, #23]
 800322a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d038      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323c:	2b05      	cmp	r3, #5
 800323e:	d821      	bhi.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003240:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	0800328b 	.word	0x0800328b
 800324c:	08003261 	.word	0x08003261
 8003250:	08003273 	.word	0x08003273
 8003254:	0800328b 	.word	0x0800328b
 8003258:	0800328b 	.word	0x0800328b
 800325c:	0800328b 	.word	0x0800328b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3304      	adds	r3, #4
 8003264:	2101      	movs	r1, #1
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fdb4 	bl	8003dd4 <RCCEx_PLL2_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003270:	e00c      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3324      	adds	r3, #36	; 0x24
 8003276:	2101      	movs	r1, #1
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fe5d 	bl	8003f38 <RCCEx_PLL3_Config>
 800327e:	4603      	mov	r3, r0
 8003280:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003282:	e003      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	75fb      	strb	r3, [r7, #23]
      break;
 8003288:	e000      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800328a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003292:	4b77      	ldr	r3, [pc, #476]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003296:	f023 0207 	bic.w	r2, r3, #7
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329e:	4974      	ldr	r1, [pc, #464]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	654b      	str	r3, [r1, #84]	; 0x54
 80032a4:	e001      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
 80032a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d03a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032bc:	2b05      	cmp	r3, #5
 80032be:	d821      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80032c0:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	0800330b 	.word	0x0800330b
 80032cc:	080032e1 	.word	0x080032e1
 80032d0:	080032f3 	.word	0x080032f3
 80032d4:	0800330b 	.word	0x0800330b
 80032d8:	0800330b 	.word	0x0800330b
 80032dc:	0800330b 	.word	0x0800330b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	2101      	movs	r1, #1
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fd74 	bl	8003dd4 <RCCEx_PLL2_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80032f0:	e00c      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3324      	adds	r3, #36	; 0x24
 80032f6:	2101      	movs	r1, #1
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 fe1d 	bl	8003f38 <RCCEx_PLL3_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003302:	e003      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	75fb      	strb	r3, [r7, #23]
      break;
 8003308:	e000      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800330a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800330c:	7dfb      	ldrb	r3, [r7, #23]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10a      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003312:	4b57      	ldr	r3, [pc, #348]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003316:	f023 0207 	bic.w	r2, r3, #7
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003320:	4953      	ldr	r1, [pc, #332]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003322:	4313      	orrs	r3, r2
 8003324:	658b      	str	r3, [r1, #88]	; 0x58
 8003326:	e001      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d04b      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800333e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003342:	d02e      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003344:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003348:	d828      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800334a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334e:	d02a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003354:	d822      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003356:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800335a:	d026      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800335c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003360:	d81c      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003366:	d010      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800336c:	d816      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01d      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003376:	d111      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fd28 	bl	8003dd4 <RCCEx_PLL2_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003388:	e012      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3324      	adds	r3, #36	; 0x24
 800338e:	2102      	movs	r1, #2
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fdd1 	bl	8003f38 <RCCEx_PLL3_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800339a:	e009      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	75fb      	strb	r3, [r7, #23]
      break;
 80033a0:	e006      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80033a2:	bf00      	nop
 80033a4:	e004      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80033a6:	bf00      	nop
 80033a8:	e002      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80033aa:	bf00      	nop
 80033ac:	e000      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80033ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10a      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033b6:	4b2e      	ldr	r3, [pc, #184]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c4:	492a      	ldr	r1, [pc, #168]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	654b      	str	r3, [r1, #84]	; 0x54
 80033ca:	e001      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d04d      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033e6:	d02e      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80033e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033ec:	d828      	bhi.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f2:	d02a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80033f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f8:	d822      	bhi.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033fe:	d026      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003400:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003404:	d81c      	bhi.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800340a:	d010      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800340c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003410:	d816      	bhi.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d01d      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341a:	d111      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3304      	adds	r3, #4
 8003420:	2100      	movs	r1, #0
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fcd6 	bl	8003dd4 <RCCEx_PLL2_Config>
 8003428:	4603      	mov	r3, r0
 800342a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800342c:	e012      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3324      	adds	r3, #36	; 0x24
 8003432:	2102      	movs	r1, #2
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fd7f 	bl	8003f38 <RCCEx_PLL3_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800343e:	e009      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	75fb      	strb	r3, [r7, #23]
      break;
 8003444:	e006      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003446:	bf00      	nop
 8003448:	e004      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800344a:	bf00      	nop
 800344c:	e002      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800344e:	bf00      	nop
 8003450:	e000      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003454:	7dfb      	ldrb	r3, [r7, #23]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10c      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800345a:	4b05      	ldr	r3, [pc, #20]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003468:	4901      	ldr	r1, [pc, #4]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800346a:	4313      	orrs	r3, r2
 800346c:	658b      	str	r3, [r1, #88]	; 0x58
 800346e:	e003      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003470:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003474:	7dfb      	ldrb	r3, [r7, #23]
 8003476:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	2b00      	cmp	r3, #0
 8003482:	d04b      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800348a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800348e:	d02e      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003490:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003494:	d828      	bhi.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349a:	d02a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800349c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a0:	d822      	bhi.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80034a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80034a6:	d026      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80034a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80034ac:	d81c      	bhi.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80034ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b2:	d010      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80034b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b8:	d816      	bhi.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d01d      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80034be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c2:	d111      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3304      	adds	r3, #4
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fc82 	bl	8003dd4 <RCCEx_PLL2_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80034d4:	e012      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3324      	adds	r3, #36	; 0x24
 80034da:	2102      	movs	r1, #2
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fd2b 	bl	8003f38 <RCCEx_PLL3_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80034e6:	e009      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	75fb      	strb	r3, [r7, #23]
      break;
 80034ec:	e006      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034ee:	bf00      	nop
 80034f0:	e004      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034f2:	bf00      	nop
 80034f4:	e002      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034f6:	bf00      	nop
 80034f8:	e000      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003502:	4b9d      	ldr	r3, [pc, #628]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003510:	4999      	ldr	r1, [pc, #612]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003512:	4313      	orrs	r3, r2
 8003514:	658b      	str	r3, [r1, #88]	; 0x58
 8003516:	e001      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003518:	7dfb      	ldrb	r3, [r7, #23]
 800351a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01a      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800352e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003532:	d10a      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3324      	adds	r3, #36	; 0x24
 8003538:	2102      	movs	r1, #2
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fcfc 	bl	8003f38 <RCCEx_PLL3_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800354a:	4b8b      	ldr	r3, [pc, #556]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800354c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003558:	4987      	ldr	r1, [pc, #540]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800355a:	4313      	orrs	r3, r2
 800355c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0310 	and.w	r3, r3, #16
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003574:	d10a      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3324      	adds	r3, #36	; 0x24
 800357a:	2102      	movs	r1, #2
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fcdb 	bl	8003f38 <RCCEx_PLL3_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800358c:	4b7a      	ldr	r3, [pc, #488]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359a:	4977      	ldr	r1, [pc, #476]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800359c:	4313      	orrs	r3, r2
 800359e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d034      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035b6:	d01d      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80035b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035bc:	d817      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80035c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c6:	d009      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80035c8:	e011      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3304      	adds	r3, #4
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fbff 	bl	8003dd4 <RCCEx_PLL2_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80035da:	e00c      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3324      	adds	r3, #36	; 0x24
 80035e0:	2102      	movs	r1, #2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fca8 	bl	8003f38 <RCCEx_PLL3_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80035ec:	e003      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	75fb      	strb	r3, [r7, #23]
      break;
 80035f2:	e000      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80035f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10a      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035fc:	4b5e      	ldr	r3, [pc, #376]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003600:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800360a:	495b      	ldr	r1, [pc, #364]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800360c:	4313      	orrs	r3, r2
 800360e:	658b      	str	r3, [r1, #88]	; 0x58
 8003610:	e001      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003612:	7dfb      	ldrb	r3, [r7, #23]
 8003614:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d033      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003628:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800362c:	d01c      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800362e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003632:	d816      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003638:	d003      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800363a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800363e:	d007      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003640:	e00f      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003642:	4b4d      	ldr	r3, [pc, #308]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	4a4c      	ldr	r2, [pc, #304]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800364e:	e00c      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3324      	adds	r3, #36	; 0x24
 8003654:	2101      	movs	r1, #1
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fc6e 	bl	8003f38 <RCCEx_PLL3_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003660:	e003      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	75fb      	strb	r3, [r7, #23]
      break;
 8003666:	e000      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003668:	bf00      	nop
    }

    if(ret == HAL_OK)
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003670:	4b41      	ldr	r3, [pc, #260]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800367e:	493e      	ldr	r1, [pc, #248]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003680:	4313      	orrs	r3, r2
 8003682:	654b      	str	r3, [r1, #84]	; 0x54
 8003684:	e001      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003686:	7dfb      	ldrb	r3, [r7, #23]
 8003688:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d029      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800369e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a2:	d007      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80036a4:	e00f      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a6:	4b34      	ldr	r3, [pc, #208]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	4a33      	ldr	r2, [pc, #204]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80036b2:	e00b      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3304      	adds	r3, #4
 80036b8:	2102      	movs	r1, #2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fb8a 	bl	8003dd4 <RCCEx_PLL2_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80036c4:	e002      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	75fb      	strb	r3, [r7, #23]
      break;
 80036ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80036d2:	4b29      	ldr	r3, [pc, #164]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036de:	4926      	ldr	r1, [pc, #152]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036e4:	e001      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3324      	adds	r3, #36	; 0x24
 80036fa:	2102      	movs	r1, #2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fc1b 	bl	8003f38 <RCCEx_PLL3_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d033      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800371c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003720:	d017      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003726:	d811      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800372c:	d013      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800372e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003732:	d80b      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003734:	2b00      	cmp	r3, #0
 8003736:	d010      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800373c:	d106      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800373e:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	4a0d      	ldr	r2, [pc, #52]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003748:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800374a:	e007      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	75fb      	strb	r3, [r7, #23]
      break;
 8003750:	e004      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003752:	bf00      	nop
 8003754:	e002      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003756:	bf00      	nop
 8003758:	e000      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800375a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10c      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800376e:	4902      	ldr	r1, [pc, #8]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003770:	4313      	orrs	r3, r2
 8003772:	654b      	str	r3, [r1, #84]	; 0x54
 8003774:	e004      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003776:	bf00      	nop
 8003778:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800378c:	4b31      	ldr	r3, [pc, #196]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800378e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003790:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	492e      	ldr	r1, [pc, #184]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800379a:	4313      	orrs	r3, r2
 800379c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80037aa:	4b2a      	ldr	r3, [pc, #168]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037b8:	4926      	ldr	r1, [pc, #152]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037ca:	4b22      	ldr	r3, [pc, #136]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037d6:	491f      	ldr	r1, [pc, #124]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00d      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037e8:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	4a19      	ldr	r2, [pc, #100]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037f2:	6113      	str	r3, [r2, #16]
 80037f4:	4b17      	ldr	r3, [pc, #92]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80037fe:	4915      	ldr	r1, [pc, #84]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003800:	4313      	orrs	r3, r2
 8003802:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	da08      	bge.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800380e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003810:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003818:	490e      	ldr	r1, [pc, #56]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800381a:	4313      	orrs	r3, r2
 800381c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800382a:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800382c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003838:	4906      	ldr	r1, [pc, #24]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800383a:	4313      	orrs	r3, r2
 800383c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800383e:	7dbb      	ldrb	r3, [r7, #22]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	e000      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	58024400 	.word	0x58024400

08003858 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800385c:	f7ff f85a 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8003860:	4602      	mov	r2, r0
 8003862:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	4904      	ldr	r1, [pc, #16]	; (8003880 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800386e:	5ccb      	ldrb	r3, [r1, r3]
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003878:	4618      	mov	r0, r3
 800387a:	bd80      	pop	{r7, pc}
 800387c:	58024400 	.word	0x58024400
 8003880:	08008cb4 	.word	0x08008cb4

08003884 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003884:	b480      	push	{r7}
 8003886:	b089      	sub	sp, #36	; 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800388c:	4ba1      	ldr	r3, [pc, #644]	; (8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	f003 0303 	and.w	r3, r3, #3
 8003894:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003896:	4b9f      	ldr	r3, [pc, #636]	; (8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389a:	0b1b      	lsrs	r3, r3, #12
 800389c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80038a2:	4b9c      	ldr	r3, [pc, #624]	; (8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	091b      	lsrs	r3, r3, #4
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80038ae:	4b99      	ldr	r3, [pc, #612]	; (8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b2:	08db      	lsrs	r3, r3, #3
 80038b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	fb02 f303 	mul.w	r3, r2, r3
 80038be:	ee07 3a90 	vmov	s15, r3
 80038c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 8111 	beq.w	8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	f000 8083 	beq.w	80039e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	f200 80a1 	bhi.w	8003a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d056      	beq.n	800399c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80038ee:	e099      	b.n	8003a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038f0:	4b88      	ldr	r3, [pc, #544]	; (8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d02d      	beq.n	8003958 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038fc:	4b85      	ldr	r3, [pc, #532]	; (8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	08db      	lsrs	r3, r3, #3
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	4a84      	ldr	r2, [pc, #528]	; (8003b18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
 800390c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	ee07 3a90 	vmov	s15, r3
 8003914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003926:	4b7b      	ldr	r3, [pc, #492]	; (8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003936:	ed97 6a03 	vldr	s12, [r7, #12]
 800393a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800393e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800394a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800394e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003952:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003956:	e087      	b.n	8003a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003962:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800396a:	4b6a      	ldr	r3, [pc, #424]	; (8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800397a:	ed97 6a03 	vldr	s12, [r7, #12]
 800397e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800398a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800398e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003996:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800399a:	e065      	b.n	8003a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ae:	4b59      	ldr	r3, [pc, #356]	; (8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039be:	ed97 6a03 	vldr	s12, [r7, #12]
 80039c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039de:	e043      	b.n	8003a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80039ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f2:	4b48      	ldr	r3, [pc, #288]	; (8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a06:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a22:	e021      	b.n	8003a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	ee07 3a90 	vmov	s15, r3
 8003a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a36:	4b37      	ldr	r3, [pc, #220]	; (8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003a68:	4b2a      	ldr	r3, [pc, #168]	; (8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	0a5b      	lsrs	r3, r3, #9
 8003a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a8e:	ee17 2a90 	vmov	r2, s15
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003a96:	4b1f      	ldr	r3, [pc, #124]	; (8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9a:	0c1b      	lsrs	r3, r3, #16
 8003a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aa0:	ee07 3a90 	vmov	s15, r3
 8003aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ab0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003abc:	ee17 2a90 	vmov	r2, s15
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	0e1b      	lsrs	r3, r3, #24
 8003aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ada:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ade:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aea:	ee17 2a90 	vmov	r2, s15
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003af2:	e008      	b.n	8003b06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	609a      	str	r2, [r3, #8]
}
 8003b06:	bf00      	nop
 8003b08:	3724      	adds	r7, #36	; 0x24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	58024400 	.word	0x58024400
 8003b18:	03d09000 	.word	0x03d09000
 8003b1c:	46000000 	.word	0x46000000
 8003b20:	4c742400 	.word	0x4c742400
 8003b24:	4a742400 	.word	0x4a742400
 8003b28:	4af42400 	.word	0x4af42400

08003b2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b089      	sub	sp, #36	; 0x24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b34:	4ba1      	ldr	r3, [pc, #644]	; (8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003b3e:	4b9f      	ldr	r3, [pc, #636]	; (8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	0d1b      	lsrs	r3, r3, #20
 8003b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003b4a:	4b9c      	ldr	r3, [pc, #624]	; (8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	0a1b      	lsrs	r3, r3, #8
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003b56:	4b99      	ldr	r3, [pc, #612]	; (8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	08db      	lsrs	r3, r3, #3
 8003b5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8111 	beq.w	8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	f000 8083 	beq.w	8003c88 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	f200 80a1 	bhi.w	8003ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d056      	beq.n	8003c44 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003b96:	e099      	b.n	8003ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b98:	4b88      	ldr	r3, [pc, #544]	; (8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d02d      	beq.n	8003c00 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ba4:	4b85      	ldr	r3, [pc, #532]	; (8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	08db      	lsrs	r3, r3, #3
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	4a84      	ldr	r2, [pc, #528]	; (8003dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	ee07 3a90 	vmov	s15, r3
 8003bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bce:	4b7b      	ldr	r3, [pc, #492]	; (8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8003be2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003bfe:	e087      	b.n	8003d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c12:	4b6a      	ldr	r3, [pc, #424]	; (8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c26:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c42:	e065      	b.n	8003d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003dcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c56:	4b59      	ldr	r3, [pc, #356]	; (8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c86:	e043      	b.n	8003d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c9a:	4b48      	ldr	r3, [pc, #288]	; (8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca2:	ee07 3a90 	vmov	s15, r3
 8003ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003cca:	e021      	b.n	8003d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	ee07 3a90 	vmov	s15, r3
 8003cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003dcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cde:	4b37      	ldr	r3, [pc, #220]	; (8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cf2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d0e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003d10:	4b2a      	ldr	r3, [pc, #168]	; (8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	0a5b      	lsrs	r3, r3, #9
 8003d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d36:	ee17 2a90 	vmov	r2, s15
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003d3e:	4b1f      	ldr	r3, [pc, #124]	; (8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	0c1b      	lsrs	r3, r3, #16
 8003d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d48:	ee07 3a90 	vmov	s15, r3
 8003d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d58:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d64:	ee17 2a90 	vmov	r2, s15
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003d6c:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	0e1b      	lsrs	r3, r3, #24
 8003d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d92:	ee17 2a90 	vmov	r2, s15
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003d9a:	e008      	b.n	8003dae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	609a      	str	r2, [r3, #8]
}
 8003dae:	bf00      	nop
 8003db0:	3724      	adds	r7, #36	; 0x24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	58024400 	.word	0x58024400
 8003dc0:	03d09000 	.word	0x03d09000
 8003dc4:	46000000 	.word	0x46000000
 8003dc8:	4c742400 	.word	0x4c742400
 8003dcc:	4a742400 	.word	0x4a742400
 8003dd0:	4af42400 	.word	0x4af42400

08003dd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003de2:	4b53      	ldr	r3, [pc, #332]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d101      	bne.n	8003df2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e099      	b.n	8003f26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003df2:	4b4f      	ldr	r3, [pc, #316]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a4e      	ldr	r2, [pc, #312]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003df8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfe:	f7fd fab9 	bl	8001374 <HAL_GetTick>
 8003e02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e04:	e008      	b.n	8003e18 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e06:	f7fd fab5 	bl	8001374 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e086      	b.n	8003f26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e18:	4b45      	ldr	r3, [pc, #276]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1f0      	bne.n	8003e06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e24:	4b42      	ldr	r3, [pc, #264]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	031b      	lsls	r3, r3, #12
 8003e32:	493f      	ldr	r1, [pc, #252]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	628b      	str	r3, [r1, #40]	; 0x28
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	025b      	lsls	r3, r3, #9
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	041b      	lsls	r3, r3, #16
 8003e56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	061b      	lsls	r3, r3, #24
 8003e64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e68:	4931      	ldr	r1, [pc, #196]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003e6e:	4b30      	ldr	r3, [pc, #192]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	492d      	ldr	r1, [pc, #180]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e80:	4b2b      	ldr	r3, [pc, #172]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	f023 0220 	bic.w	r2, r3, #32
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	4928      	ldr	r1, [pc, #160]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e92:	4b27      	ldr	r3, [pc, #156]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	4a26      	ldr	r2, [pc, #152]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003e98:	f023 0310 	bic.w	r3, r3, #16
 8003e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e9e:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003ea0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ea2:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <RCCEx_PLL2_Config+0x160>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	69d2      	ldr	r2, [r2, #28]
 8003eaa:	00d2      	lsls	r2, r2, #3
 8003eac:	4920      	ldr	r1, [pc, #128]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003eb2:	4b1f      	ldr	r3, [pc, #124]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003eb8:	f043 0310 	orr.w	r3, r3, #16
 8003ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d106      	bne.n	8003ed2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ec4:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	4a19      	ldr	r2, [pc, #100]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003eca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ece:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ed0:	e00f      	b.n	8003ef2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d106      	bne.n	8003ee6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ed8:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	4a14      	ldr	r2, [pc, #80]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ee2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ee4:	e005      	b.n	8003ef2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ee6:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	4a11      	ldr	r2, [pc, #68]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003eec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ef0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a0e      	ldr	r2, [pc, #56]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003ef8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efe:	f7fd fa39 	bl	8001374 <HAL_GetTick>
 8003f02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f04:	e008      	b.n	8003f18 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003f06:	f7fd fa35 	bl	8001374 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e006      	b.n	8003f26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <RCCEx_PLL2_Config+0x15c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	58024400 	.word	0x58024400
 8003f34:	ffff0007 	.word	0xffff0007

08003f38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f46:	4b53      	ldr	r3, [pc, #332]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d101      	bne.n	8003f56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e099      	b.n	800408a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f56:	4b4f      	ldr	r3, [pc, #316]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a4e      	ldr	r2, [pc, #312]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f62:	f7fd fa07 	bl	8001374 <HAL_GetTick>
 8003f66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f68:	e008      	b.n	8003f7c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003f6a:	f7fd fa03 	bl	8001374 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e086      	b.n	800408a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f7c:	4b45      	ldr	r3, [pc, #276]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f0      	bne.n	8003f6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f88:	4b42      	ldr	r3, [pc, #264]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	051b      	lsls	r3, r3, #20
 8003f96:	493f      	ldr	r1, [pc, #252]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	628b      	str	r3, [r1, #40]	; 0x28
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	025b      	lsls	r3, r3, #9
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	041b      	lsls	r3, r3, #16
 8003fba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	061b      	lsls	r3, r3, #24
 8003fc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fcc:	4931      	ldr	r1, [pc, #196]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003fd2:	4b30      	ldr	r3, [pc, #192]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	492d      	ldr	r1, [pc, #180]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003fe4:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	4928      	ldr	r1, [pc, #160]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ff6:	4b27      	ldr	r3, [pc, #156]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	4a26      	ldr	r2, [pc, #152]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8003ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004000:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004002:	4b24      	ldr	r3, [pc, #144]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8004004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004006:	4b24      	ldr	r3, [pc, #144]	; (8004098 <RCCEx_PLL3_Config+0x160>)
 8004008:	4013      	ands	r3, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	69d2      	ldr	r2, [r2, #28]
 800400e:	00d2      	lsls	r2, r2, #3
 8004010:	4920      	ldr	r1, [pc, #128]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8004012:	4313      	orrs	r3, r2
 8004014:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004016:	4b1f      	ldr	r3, [pc, #124]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	4a1e      	ldr	r2, [pc, #120]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 800401c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004020:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d106      	bne.n	8004036 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004028:	4b1a      	ldr	r3, [pc, #104]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	4a19      	ldr	r2, [pc, #100]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 800402e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004032:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004034:	e00f      	b.n	8004056 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d106      	bne.n	800404a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800403c:	4b15      	ldr	r3, [pc, #84]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	4a14      	ldr	r2, [pc, #80]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8004042:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004046:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004048:	e005      	b.n	8004056 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	4a11      	ldr	r2, [pc, #68]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8004050:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004054:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004056:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a0e      	ldr	r2, [pc, #56]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 800405c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004062:	f7fd f987 	bl	8001374 <HAL_GetTick>
 8004066:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004068:	e008      	b.n	800407c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800406a:	f7fd f983 	bl	8001374 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e006      	b.n	800408a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800407c:	4b05      	ldr	r3, [pc, #20]	; (8004094 <RCCEx_PLL3_Config+0x15c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004088:	7bfb      	ldrb	r3, [r7, #15]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	58024400 	.word	0x58024400
 8004098:	ffff0007 	.word	0xffff0007

0800409c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e0f1      	b.n	8004292 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a78      	ldr	r2, [pc, #480]	; (800429c <HAL_SPI_Init+0x200>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00f      	beq.n	80040de <HAL_SPI_Init+0x42>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a77      	ldr	r2, [pc, #476]	; (80042a0 <HAL_SPI_Init+0x204>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00a      	beq.n	80040de <HAL_SPI_Init+0x42>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a75      	ldr	r2, [pc, #468]	; (80042a4 <HAL_SPI_Init+0x208>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d005      	beq.n	80040de <HAL_SPI_Init+0x42>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b0f      	cmp	r3, #15
 80040d8:	d901      	bls.n	80040de <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e0d9      	b.n	8004292 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 ff66 	bl	8004fb0 <SPI_GetPacketSize>
 80040e4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a6c      	ldr	r2, [pc, #432]	; (800429c <HAL_SPI_Init+0x200>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00c      	beq.n	800410a <HAL_SPI_Init+0x6e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a6a      	ldr	r2, [pc, #424]	; (80042a0 <HAL_SPI_Init+0x204>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d007      	beq.n	800410a <HAL_SPI_Init+0x6e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a69      	ldr	r2, [pc, #420]	; (80042a4 <HAL_SPI_Init+0x208>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d002      	beq.n	800410a <HAL_SPI_Init+0x6e>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b08      	cmp	r3, #8
 8004108:	d811      	bhi.n	800412e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800410e:	4a63      	ldr	r2, [pc, #396]	; (800429c <HAL_SPI_Init+0x200>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d009      	beq.n	8004128 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a61      	ldr	r2, [pc, #388]	; (80042a0 <HAL_SPI_Init+0x204>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <HAL_SPI_Init+0x8c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a60      	ldr	r2, [pc, #384]	; (80042a4 <HAL_SPI_Init+0x208>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d104      	bne.n	8004132 <HAL_SPI_Init+0x96>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b10      	cmp	r3, #16
 800412c:	d901      	bls.n	8004132 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e0af      	b.n	8004292 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fc feaa 	bl	8000ea0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0201 	bic.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800416e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004178:	d119      	bne.n	80041ae <HAL_SPI_Init+0x112>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004182:	d103      	bne.n	800418c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10c      	bne.n	80041ae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800419c:	d107      	bne.n	80041ae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69da      	ldr	r2, [r3, #28]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	431a      	orrs	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c0:	ea42 0103 	orr.w	r1, r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420e:	ea42 0103 	orr.w	r1, r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d113      	bne.n	800424e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004238:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800424c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0201 	bic.w	r2, r2, #1
 800425c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40013000 	.word	0x40013000
 80042a0:	40003800 	.word	0x40003800
 80042a4:	40003c00 	.word	0x40003c00

080042a8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	; 0x28
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3320      	adds	r3, #32
 80042be:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_SPI_Transmit+0x2a>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e1d7      	b.n	8004682 <HAL_SPI_Transmit+0x3da>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042da:	f7fd f84b 	bl	8001374 <HAL_GetTick>
 80042de:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d007      	beq.n	80042fc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80042ec:	2302      	movs	r3, #2
 80042ee:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80042f8:	7efb      	ldrb	r3, [r7, #27]
 80042fa:	e1c2      	b.n	8004682 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_SPI_Transmit+0x60>
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d107      	bne.n	8004318 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004314:	7efb      	ldrb	r3, [r7, #27]
 8004316:	e1b4      	b.n	8004682 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2203      	movs	r2, #3
 800431c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	88fa      	ldrh	r2, [r7, #6]
 8004332:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004368:	d107      	bne.n	800437a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004378:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	4b96      	ldr	r3, [pc, #600]	; (80045dc <HAL_SPI_Transmit+0x334>)
 8004382:	4013      	ands	r3, r2
 8004384:	88f9      	ldrh	r1, [r7, #6]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	430b      	orrs	r3, r1
 800438c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0201 	orr.w	r2, r2, #1
 800439c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a6:	d107      	bne.n	80043b8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	2b0f      	cmp	r3, #15
 80043be:	d947      	bls.n	8004450 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80043c0:	e03f      	b.n	8004442 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d114      	bne.n	80043fa <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6812      	ldr	r2, [r2, #0]
 80043da:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e0:	1d1a      	adds	r2, r3, #4
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	3b01      	subs	r3, #1
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80043f8:	e023      	b.n	8004442 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043fa:	f7fc ffbb 	bl	8001374 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	429a      	cmp	r2, r3
 8004408:	d803      	bhi.n	8004412 <HAL_SPI_Transmit+0x16a>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004410:	d102      	bne.n	8004418 <HAL_SPI_Transmit+0x170>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d114      	bne.n	8004442 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 fcfb 	bl	8004e14 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e11f      	b.n	8004682 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1b9      	bne.n	80043c2 <HAL_SPI_Transmit+0x11a>
 800444e:	e0f2      	b.n	8004636 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	2b07      	cmp	r3, #7
 8004456:	f240 80e7 	bls.w	8004628 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800445a:	e05d      	b.n	8004518 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b02      	cmp	r3, #2
 8004468:	d132      	bne.n	80044d0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b01      	cmp	r3, #1
 8004474:	d918      	bls.n	80044a8 <HAL_SPI_Transmit+0x200>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d014      	beq.n	80044a8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448e:	1d1a      	adds	r2, r3, #4
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b02      	subs	r3, #2
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80044a6:	e037      	b.n	8004518 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ac:	881a      	ldrh	r2, [r3, #0]
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b6:	1c9a      	adds	r2, r3, #2
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80044ce:	e023      	b.n	8004518 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044d0:	f7fc ff50 	bl	8001374 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d803      	bhi.n	80044e8 <HAL_SPI_Transmit+0x240>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e6:	d102      	bne.n	80044ee <HAL_SPI_Transmit+0x246>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d114      	bne.n	8004518 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fc90 	bl	8004e14 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004502:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e0b4      	b.n	8004682 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d19b      	bne.n	800445c <HAL_SPI_Transmit+0x1b4>
 8004524:	e087      	b.n	8004636 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b02      	cmp	r3, #2
 8004532:	d155      	bne.n	80045e0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b03      	cmp	r3, #3
 800453e:	d918      	bls.n	8004572 <HAL_SPI_Transmit+0x2ca>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004544:	2b40      	cmp	r3, #64	; 0x40
 8004546:	d914      	bls.n	8004572 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6812      	ldr	r2, [r2, #0]
 8004552:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004558:	1d1a      	adds	r2, r3, #4
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b04      	subs	r3, #4
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004570:	e05a      	b.n	8004628 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b01      	cmp	r3, #1
 800457c:	d917      	bls.n	80045ae <HAL_SPI_Transmit+0x306>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d013      	beq.n	80045ae <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458a:	881a      	ldrh	r2, [r3, #0]
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004594:	1c9a      	adds	r2, r3, #2
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b02      	subs	r3, #2
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80045ac:	e03c      	b.n	8004628 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3320      	adds	r3, #32
 80045b8:	7812      	ldrb	r2, [r2, #0]
 80045ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80045d8:	e026      	b.n	8004628 <HAL_SPI_Transmit+0x380>
 80045da:	bf00      	nop
 80045dc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045e0:	f7fc fec8 	bl	8001374 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d803      	bhi.n	80045f8 <HAL_SPI_Transmit+0x350>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f6:	d102      	bne.n	80045fe <HAL_SPI_Transmit+0x356>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d114      	bne.n	8004628 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fc08 	bl	8004e14 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004612:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e02c      	b.n	8004682 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	f47f af78 	bne.w	8004526 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2200      	movs	r2, #0
 800463e:	2108      	movs	r1, #8
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 fc87 	bl	8004f54 <SPI_WaitOnFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d007      	beq.n	800465c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004652:	f043 0220 	orr.w	r2, r3, #32
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 fbd9 	bl	8004e14 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8004680:	7efb      	ldrb	r3, [r7, #27]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3720      	adds	r7, #32
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop

0800468c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08a      	sub	sp, #40	; 0x28
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3330      	adds	r3, #48	; 0x30
 80046a6:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b0:	d112      	bne.n	80046d8 <HAL_SPI_Receive+0x4c>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10e      	bne.n	80046d8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2204      	movs	r2, #4
 80046be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80046c2:	88fa      	ldrh	r2, [r7, #6]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	4613      	mov	r3, r2
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f978 	bl	80049c4 <HAL_SPI_TransmitReceive>
 80046d4:	4603      	mov	r3, r0
 80046d6:	e16f      	b.n	80049b8 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_SPI_Receive+0x5a>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e168      	b.n	80049b8 <HAL_SPI_Receive+0x32c>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046ee:	f7fc fe41 	bl	8001374 <HAL_GetTick>
 80046f2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d007      	beq.n	8004710 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8004700:	2302      	movs	r3, #2
 8004702:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800470c:	7ffb      	ldrb	r3, [r7, #31]
 800470e:	e153      	b.n	80049b8 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <HAL_SPI_Receive+0x90>
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d107      	bne.n	800472c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004728:	7ffb      	ldrb	r3, [r7, #31]
 800472a:	e145      	b.n	80049b8 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2204      	movs	r2, #4
 8004730:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	88fa      	ldrh	r2, [r7, #6]
 8004746:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	88fa      	ldrh	r2, [r7, #6]
 800474e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800477c:	d107      	bne.n	800478e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800478c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	4b8a      	ldr	r3, [pc, #552]	; (80049c0 <HAL_SPI_Receive+0x334>)
 8004796:	4013      	ands	r3, r2
 8004798:	88f9      	ldrh	r1, [r7, #6]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	430b      	orrs	r3, r1
 80047a0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0201 	orr.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ba:	d107      	bne.n	80047cc <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	2b0f      	cmp	r3, #15
 80047d2:	d948      	bls.n	8004866 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80047d4:	e040      	b.n	8004858 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695a      	ldr	r2, [r3, #20]
 80047dc:	f248 0308 	movw	r3, #32776	; 0x8008
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d014      	beq.n	8004810 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047f0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047f6:	1d1a      	adds	r2, r3, #4
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800480e:	e023      	b.n	8004858 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004810:	f7fc fdb0 	bl	8001374 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d803      	bhi.n	8004828 <HAL_SPI_Receive+0x19c>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004826:	d102      	bne.n	800482e <HAL_SPI_Receive+0x1a2>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d114      	bne.n	8004858 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 faf0 	bl	8004e14 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004842:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e0af      	b.n	80049b8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1b8      	bne.n	80047d6 <HAL_SPI_Receive+0x14a>
 8004864:	e095      	b.n	8004992 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	2b07      	cmp	r3, #7
 800486c:	f240 808b 	bls.w	8004986 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004870:	e03f      	b.n	80048f2 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b01      	cmp	r3, #1
 800487e:	d114      	bne.n	80048aa <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	8812      	ldrh	r2, [r2, #0]
 8004888:	b292      	uxth	r2, r2
 800488a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004890:	1c9a      	adds	r2, r3, #2
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80048a8:	e023      	b.n	80048f2 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048aa:	f7fc fd63 	bl	8001374 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d803      	bhi.n	80048c2 <HAL_SPI_Receive+0x236>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d102      	bne.n	80048c8 <HAL_SPI_Receive+0x23c>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d114      	bne.n	80048f2 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 faa3 	bl	8004e14 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e062      	b.n	80049b8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1b9      	bne.n	8004872 <HAL_SPI_Receive+0x1e6>
 80048fe:	e048      	b.n	8004992 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b01      	cmp	r3, #1
 800490c:	d117      	bne.n	800493e <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800491a:	7812      	ldrb	r2, [r2, #0]
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004930:	b29b      	uxth	r3, r3
 8004932:	3b01      	subs	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800493c:	e023      	b.n	8004986 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800493e:	f7fc fd19 	bl	8001374 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d803      	bhi.n	8004956 <HAL_SPI_Receive+0x2ca>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004954:	d102      	bne.n	800495c <HAL_SPI_Receive+0x2d0>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d114      	bne.n	8004986 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 fa59 	bl	8004e14 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004970:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e018      	b.n	80049b8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1b6      	bne.n	8004900 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 fa3e 	bl	8004e14 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 80049b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3720      	adds	r7, #32
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	ffff0000 	.word	0xffff0000

080049c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08e      	sub	sp, #56	; 0x38
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3320      	adds	r3, #32
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3330      	adds	r3, #48	; 0x30
 80049e6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_SPI_TransmitReceive+0x32>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e209      	b.n	8004e0a <HAL_SPI_TransmitReceive+0x446>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049fe:	f7fc fcb9 	bl	8001374 <HAL_GetTick>
 8004a02:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8004a04:	887b      	ldrh	r3, [r7, #2]
 8004a06:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8004a08:	887b      	ldrh	r3, [r7, #2]
 8004a0a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004a12:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a1a:	7efb      	ldrb	r3, [r7, #27]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d014      	beq.n	8004a4a <HAL_SPI_TransmitReceive+0x86>
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a26:	d106      	bne.n	8004a36 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d102      	bne.n	8004a36 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8004a30:	7efb      	ldrb	r3, [r7, #27]
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d009      	beq.n	8004a4a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8004a36:	2302      	movs	r3, #2
 8004a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004a44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a48:	e1df      	b.n	8004e0a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <HAL_SPI_TransmitReceive+0x98>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_SPI_TransmitReceive+0x98>
 8004a56:	887b      	ldrh	r3, [r7, #2]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d109      	bne.n	8004a70 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004a6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a6e:	e1cc      	b.n	8004e0a <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d003      	beq.n	8004a84 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2205      	movs	r2, #5
 8004a80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	887a      	ldrh	r2, [r7, #2]
 8004a96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	887a      	ldrh	r2, [r7, #2]
 8004a9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	887a      	ldrh	r2, [r7, #2]
 8004aac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	887a      	ldrh	r2, [r7, #2]
 8004ab4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	4b82      	ldr	r3, [pc, #520]	; (8004cd4 <HAL_SPI_TransmitReceive+0x310>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	8879      	ldrh	r1, [r7, #2]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0201 	orr.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004af0:	d107      	bne.n	8004b02 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	2b0f      	cmp	r3, #15
 8004b08:	d970      	bls.n	8004bec <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004b0a:	e068      	b.n	8004bde <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d11a      	bne.n	8004b50 <HAL_SPI_TransmitReceive+0x18c>
 8004b1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d017      	beq.n	8004b50 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b30:	1d1a      	adds	r2, r3, #4
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b4e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	f248 0308 	movw	r3, #32776	; 0x8008
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01a      	beq.n	8004b96 <HAL_SPI_TransmitReceive+0x1d2>
 8004b60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d017      	beq.n	8004b96 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b70:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b76:	1d1a      	adds	r2, r3, #4
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004b94:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b96:	f7fc fbed 	bl	8001374 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d803      	bhi.n	8004bae <HAL_SPI_TransmitReceive+0x1ea>
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bac:	d102      	bne.n	8004bb4 <HAL_SPI_TransmitReceive+0x1f0>
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d114      	bne.n	8004bde <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f92d 	bl	8004e14 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e115      	b.n	8004e0a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004bde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d193      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x148>
 8004be4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d190      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x148>
 8004bea:	e0e7      	b.n	8004dbc <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	2b07      	cmp	r3, #7
 8004bf2:	f240 80dd 	bls.w	8004db0 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004bf6:	e066      	b.n	8004cc6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d119      	bne.n	8004c3a <HAL_SPI_TransmitReceive+0x276>
 8004c06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d016      	beq.n	8004c3a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c10:	881a      	ldrh	r2, [r3, #0]
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1a:	1c9a      	adds	r2, r3, #2
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004c38:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d11a      	bne.n	8004c7e <HAL_SPI_TransmitReceive+0x2ba>
 8004c48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d017      	beq.n	8004c7e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c52:	6a3a      	ldr	r2, [r7, #32]
 8004c54:	8812      	ldrh	r2, [r2, #0]
 8004c56:	b292      	uxth	r2, r2
 8004c58:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c5e:	1c9a      	adds	r2, r3, #2
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004c7c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c7e:	f7fc fb79 	bl	8001374 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d803      	bhi.n	8004c96 <HAL_SPI_TransmitReceive+0x2d2>
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d102      	bne.n	8004c9c <HAL_SPI_TransmitReceive+0x2d8>
 8004c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d114      	bne.n	8004cc6 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 f8b9 	bl	8004e14 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e0a1      	b.n	8004e0a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004cc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d195      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x234>
 8004ccc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d192      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x234>
 8004cd2:	e073      	b.n	8004dbc <HAL_SPI_TransmitReceive+0x3f8>
 8004cd4:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d11b      	bne.n	8004d1e <HAL_SPI_TransmitReceive+0x35a>
 8004ce6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d018      	beq.n	8004d1e <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3320      	adds	r3, #32
 8004cf6:	7812      	ldrb	r2, [r2, #0]
 8004cf8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004d1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d11d      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x3a4>
 8004d2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d01a      	beq.n	8004d68 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d3e:	7812      	ldrb	r2, [r2, #0]
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004d66:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d68:	f7fc fb04 	bl	8001374 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d803      	bhi.n	8004d80 <HAL_SPI_TransmitReceive+0x3bc>
 8004d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7e:	d102      	bne.n	8004d86 <HAL_SPI_TransmitReceive+0x3c2>
 8004d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d114      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 f844 	bl	8004e14 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e02c      	b.n	8004e0a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004db0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d190      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x314>
 8004db6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d18d      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	2108      	movs	r1, #8
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 f8c4 	bl	8004f54 <SPI_WaitOnFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd8:	f043 0220 	orr.w	r2, r3, #32
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 f816 	bl	8004e14 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e001      	b.n	8004e0a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8004e06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3730      	adds	r7, #48	; 0x30
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop

08004e14 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0208 	orr.w	r2, r2, #8
 8004e32:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0210 	orr.w	r2, r2, #16
 8004e42:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0201 	bic.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6919      	ldr	r1, [r3, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4b3c      	ldr	r3, [pc, #240]	; (8004f50 <SPI_CloseTransfer+0x13c>)
 8004e60:	400b      	ands	r3, r1
 8004e62:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004e72:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	d014      	beq.n	8004eaa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00f      	beq.n	8004eaa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699a      	ldr	r2, [r3, #24]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0220 	orr.w	r2, r2, #32
 8004ea8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d014      	beq.n	8004ee0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00f      	beq.n	8004ee0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec6:	f043 0204 	orr.w	r2, r3, #4
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ede:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00f      	beq.n	8004f0a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef0:	f043 0201 	orr.w	r2, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699a      	ldr	r2, [r3, #24]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f08:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00f      	beq.n	8004f34 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f1a:	f043 0208 	orr.w	r2, r3, #8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f32:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8004f44:	bf00      	nop
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	fffffc90 	.word	0xfffffc90

08004f54 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	4613      	mov	r3, r2
 8004f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004f64:	e010      	b.n	8004f88 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f66:	f7fc fa05 	bl	8001374 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d803      	bhi.n	8004f7e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7c:	d102      	bne.n	8004f84 <SPI_WaitOnFlagUntilTimeout+0x30>
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e00f      	b.n	8004fa8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695a      	ldr	r2, [r3, #20]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4013      	ands	r3, r2
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	bf0c      	ite	eq
 8004f98:	2301      	moveq	r3, #1
 8004f9a:	2300      	movne	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	79fb      	ldrb	r3, [r7, #7]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d0df      	beq.n	8004f66 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbc:	095b      	lsrs	r3, r3, #5
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	3307      	adds	r3, #7
 8004fce:	08db      	lsrs	r3, r3, #3
 8004fd0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	fb02 f303 	mul.w	r3, r2, r3
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e042      	b.n	800507e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fb ffac 	bl	8000f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2224      	movs	r2, #36	; 0x24
 8005014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0201 	bic.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f8c3 	bl	80051b4 <UART_SetConfig>
 800502e:	4603      	mov	r3, r0
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e022      	b.n	800507e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fe1f 	bl	8005c84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005054:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005064:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 0201 	orr.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fea6 	bl	8005dc8 <UART_CheckIdleState>
 800507c:	4603      	mov	r3, r0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b08a      	sub	sp, #40	; 0x28
 800508a:	af02      	add	r7, sp, #8
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	603b      	str	r3, [r7, #0]
 8005092:	4613      	mov	r3, r2
 8005094:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800509c:	2b20      	cmp	r3, #32
 800509e:	f040 8083 	bne.w	80051a8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <HAL_UART_Transmit+0x28>
 80050a8:	88fb      	ldrh	r3, [r7, #6]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e07b      	b.n	80051aa <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_UART_Transmit+0x3a>
 80050bc:	2302      	movs	r3, #2
 80050be:	e074      	b.n	80051aa <HAL_UART_Transmit+0x124>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2221      	movs	r2, #33	; 0x21
 80050d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050d8:	f7fc f94c 	bl	8001374 <HAL_GetTick>
 80050dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	88fa      	ldrh	r2, [r7, #6]
 80050e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	88fa      	ldrh	r2, [r7, #6]
 80050ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f6:	d108      	bne.n	800510a <HAL_UART_Transmit+0x84>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005100:	2300      	movs	r3, #0
 8005102:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	e003      	b.n	8005112 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800511a:	e02c      	b.n	8005176 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2200      	movs	r2, #0
 8005124:	2180      	movs	r1, #128	; 0x80
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 fe99 	bl	8005e5e <UART_WaitOnFlagUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e039      	b.n	80051aa <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10b      	bne.n	8005154 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800514a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	3302      	adds	r3, #2
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	e007      	b.n	8005164 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	781a      	ldrb	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	3301      	adds	r3, #1
 8005162:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1cc      	bne.n	800511c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2200      	movs	r2, #0
 800518a:	2140      	movs	r1, #64	; 0x40
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fe66 	bl	8005e5e <UART_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e006      	b.n	80051aa <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2220      	movs	r2, #32
 80051a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	e000      	b.n	80051aa <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80051a8:	2302      	movs	r3, #2
  }
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3720      	adds	r7, #32
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051b8:	b092      	sub	sp, #72	; 0x48
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	4313      	orrs	r3, r2
 80051da:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	4bbe      	ldr	r3, [pc, #760]	; (80054dc <UART_SetConfig+0x328>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051ec:	430b      	orrs	r3, r1
 80051ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4ab3      	ldr	r2, [pc, #716]	; (80054e0 <UART_SetConfig+0x32c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800521c:	4313      	orrs	r3, r2
 800521e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	4baf      	ldr	r3, [pc, #700]	; (80054e4 <UART_SetConfig+0x330>)
 8005228:	4013      	ands	r3, r2
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005230:	430b      	orrs	r3, r1
 8005232:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	f023 010f 	bic.w	r1, r3, #15
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4aa6      	ldr	r2, [pc, #664]	; (80054e8 <UART_SetConfig+0x334>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d177      	bne.n	8005344 <UART_SetConfig+0x190>
 8005254:	4ba5      	ldr	r3, [pc, #660]	; (80054ec <UART_SetConfig+0x338>)
 8005256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005258:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800525c:	2b28      	cmp	r3, #40	; 0x28
 800525e:	d86d      	bhi.n	800533c <UART_SetConfig+0x188>
 8005260:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <UART_SetConfig+0xb4>)
 8005262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005266:	bf00      	nop
 8005268:	0800530d 	.word	0x0800530d
 800526c:	0800533d 	.word	0x0800533d
 8005270:	0800533d 	.word	0x0800533d
 8005274:	0800533d 	.word	0x0800533d
 8005278:	0800533d 	.word	0x0800533d
 800527c:	0800533d 	.word	0x0800533d
 8005280:	0800533d 	.word	0x0800533d
 8005284:	0800533d 	.word	0x0800533d
 8005288:	08005315 	.word	0x08005315
 800528c:	0800533d 	.word	0x0800533d
 8005290:	0800533d 	.word	0x0800533d
 8005294:	0800533d 	.word	0x0800533d
 8005298:	0800533d 	.word	0x0800533d
 800529c:	0800533d 	.word	0x0800533d
 80052a0:	0800533d 	.word	0x0800533d
 80052a4:	0800533d 	.word	0x0800533d
 80052a8:	0800531d 	.word	0x0800531d
 80052ac:	0800533d 	.word	0x0800533d
 80052b0:	0800533d 	.word	0x0800533d
 80052b4:	0800533d 	.word	0x0800533d
 80052b8:	0800533d 	.word	0x0800533d
 80052bc:	0800533d 	.word	0x0800533d
 80052c0:	0800533d 	.word	0x0800533d
 80052c4:	0800533d 	.word	0x0800533d
 80052c8:	08005325 	.word	0x08005325
 80052cc:	0800533d 	.word	0x0800533d
 80052d0:	0800533d 	.word	0x0800533d
 80052d4:	0800533d 	.word	0x0800533d
 80052d8:	0800533d 	.word	0x0800533d
 80052dc:	0800533d 	.word	0x0800533d
 80052e0:	0800533d 	.word	0x0800533d
 80052e4:	0800533d 	.word	0x0800533d
 80052e8:	0800532d 	.word	0x0800532d
 80052ec:	0800533d 	.word	0x0800533d
 80052f0:	0800533d 	.word	0x0800533d
 80052f4:	0800533d 	.word	0x0800533d
 80052f8:	0800533d 	.word	0x0800533d
 80052fc:	0800533d 	.word	0x0800533d
 8005300:	0800533d 	.word	0x0800533d
 8005304:	0800533d 	.word	0x0800533d
 8005308:	08005335 	.word	0x08005335
 800530c:	2301      	movs	r3, #1
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005312:	e222      	b.n	800575a <UART_SetConfig+0x5a6>
 8005314:	2304      	movs	r3, #4
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531a:	e21e      	b.n	800575a <UART_SetConfig+0x5a6>
 800531c:	2308      	movs	r3, #8
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005322:	e21a      	b.n	800575a <UART_SetConfig+0x5a6>
 8005324:	2310      	movs	r3, #16
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800532a:	e216      	b.n	800575a <UART_SetConfig+0x5a6>
 800532c:	2320      	movs	r3, #32
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005332:	e212      	b.n	800575a <UART_SetConfig+0x5a6>
 8005334:	2340      	movs	r3, #64	; 0x40
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800533a:	e20e      	b.n	800575a <UART_SetConfig+0x5a6>
 800533c:	2380      	movs	r3, #128	; 0x80
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005342:	e20a      	b.n	800575a <UART_SetConfig+0x5a6>
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a69      	ldr	r2, [pc, #420]	; (80054f0 <UART_SetConfig+0x33c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d130      	bne.n	80053b0 <UART_SetConfig+0x1fc>
 800534e:	4b67      	ldr	r3, [pc, #412]	; (80054ec <UART_SetConfig+0x338>)
 8005350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	2b05      	cmp	r3, #5
 8005358:	d826      	bhi.n	80053a8 <UART_SetConfig+0x1f4>
 800535a:	a201      	add	r2, pc, #4	; (adr r2, 8005360 <UART_SetConfig+0x1ac>)
 800535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005360:	08005379 	.word	0x08005379
 8005364:	08005381 	.word	0x08005381
 8005368:	08005389 	.word	0x08005389
 800536c:	08005391 	.word	0x08005391
 8005370:	08005399 	.word	0x08005399
 8005374:	080053a1 	.word	0x080053a1
 8005378:	2300      	movs	r3, #0
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537e:	e1ec      	b.n	800575a <UART_SetConfig+0x5a6>
 8005380:	2304      	movs	r3, #4
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005386:	e1e8      	b.n	800575a <UART_SetConfig+0x5a6>
 8005388:	2308      	movs	r3, #8
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538e:	e1e4      	b.n	800575a <UART_SetConfig+0x5a6>
 8005390:	2310      	movs	r3, #16
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005396:	e1e0      	b.n	800575a <UART_SetConfig+0x5a6>
 8005398:	2320      	movs	r3, #32
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800539e:	e1dc      	b.n	800575a <UART_SetConfig+0x5a6>
 80053a0:	2340      	movs	r3, #64	; 0x40
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053a6:	e1d8      	b.n	800575a <UART_SetConfig+0x5a6>
 80053a8:	2380      	movs	r3, #128	; 0x80
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ae:	e1d4      	b.n	800575a <UART_SetConfig+0x5a6>
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a4f      	ldr	r2, [pc, #316]	; (80054f4 <UART_SetConfig+0x340>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d130      	bne.n	800541c <UART_SetConfig+0x268>
 80053ba:	4b4c      	ldr	r3, [pc, #304]	; (80054ec <UART_SetConfig+0x338>)
 80053bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	2b05      	cmp	r3, #5
 80053c4:	d826      	bhi.n	8005414 <UART_SetConfig+0x260>
 80053c6:	a201      	add	r2, pc, #4	; (adr r2, 80053cc <UART_SetConfig+0x218>)
 80053c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053cc:	080053e5 	.word	0x080053e5
 80053d0:	080053ed 	.word	0x080053ed
 80053d4:	080053f5 	.word	0x080053f5
 80053d8:	080053fd 	.word	0x080053fd
 80053dc:	08005405 	.word	0x08005405
 80053e0:	0800540d 	.word	0x0800540d
 80053e4:	2300      	movs	r3, #0
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ea:	e1b6      	b.n	800575a <UART_SetConfig+0x5a6>
 80053ec:	2304      	movs	r3, #4
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f2:	e1b2      	b.n	800575a <UART_SetConfig+0x5a6>
 80053f4:	2308      	movs	r3, #8
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053fa:	e1ae      	b.n	800575a <UART_SetConfig+0x5a6>
 80053fc:	2310      	movs	r3, #16
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005402:	e1aa      	b.n	800575a <UART_SetConfig+0x5a6>
 8005404:	2320      	movs	r3, #32
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800540a:	e1a6      	b.n	800575a <UART_SetConfig+0x5a6>
 800540c:	2340      	movs	r3, #64	; 0x40
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005412:	e1a2      	b.n	800575a <UART_SetConfig+0x5a6>
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541a:	e19e      	b.n	800575a <UART_SetConfig+0x5a6>
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a35      	ldr	r2, [pc, #212]	; (80054f8 <UART_SetConfig+0x344>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d130      	bne.n	8005488 <UART_SetConfig+0x2d4>
 8005426:	4b31      	ldr	r3, [pc, #196]	; (80054ec <UART_SetConfig+0x338>)
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	2b05      	cmp	r3, #5
 8005430:	d826      	bhi.n	8005480 <UART_SetConfig+0x2cc>
 8005432:	a201      	add	r2, pc, #4	; (adr r2, 8005438 <UART_SetConfig+0x284>)
 8005434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005438:	08005451 	.word	0x08005451
 800543c:	08005459 	.word	0x08005459
 8005440:	08005461 	.word	0x08005461
 8005444:	08005469 	.word	0x08005469
 8005448:	08005471 	.word	0x08005471
 800544c:	08005479 	.word	0x08005479
 8005450:	2300      	movs	r3, #0
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005456:	e180      	b.n	800575a <UART_SetConfig+0x5a6>
 8005458:	2304      	movs	r3, #4
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545e:	e17c      	b.n	800575a <UART_SetConfig+0x5a6>
 8005460:	2308      	movs	r3, #8
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005466:	e178      	b.n	800575a <UART_SetConfig+0x5a6>
 8005468:	2310      	movs	r3, #16
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546e:	e174      	b.n	800575a <UART_SetConfig+0x5a6>
 8005470:	2320      	movs	r3, #32
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005476:	e170      	b.n	800575a <UART_SetConfig+0x5a6>
 8005478:	2340      	movs	r3, #64	; 0x40
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800547e:	e16c      	b.n	800575a <UART_SetConfig+0x5a6>
 8005480:	2380      	movs	r3, #128	; 0x80
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005486:	e168      	b.n	800575a <UART_SetConfig+0x5a6>
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1b      	ldr	r2, [pc, #108]	; (80054fc <UART_SetConfig+0x348>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d142      	bne.n	8005518 <UART_SetConfig+0x364>
 8005492:	4b16      	ldr	r3, [pc, #88]	; (80054ec <UART_SetConfig+0x338>)
 8005494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	2b05      	cmp	r3, #5
 800549c:	d838      	bhi.n	8005510 <UART_SetConfig+0x35c>
 800549e:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <UART_SetConfig+0x2f0>)
 80054a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a4:	080054bd 	.word	0x080054bd
 80054a8:	080054c5 	.word	0x080054c5
 80054ac:	080054cd 	.word	0x080054cd
 80054b0:	080054d5 	.word	0x080054d5
 80054b4:	08005501 	.word	0x08005501
 80054b8:	08005509 	.word	0x08005509
 80054bc:	2300      	movs	r3, #0
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c2:	e14a      	b.n	800575a <UART_SetConfig+0x5a6>
 80054c4:	2304      	movs	r3, #4
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ca:	e146      	b.n	800575a <UART_SetConfig+0x5a6>
 80054cc:	2308      	movs	r3, #8
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d2:	e142      	b.n	800575a <UART_SetConfig+0x5a6>
 80054d4:	2310      	movs	r3, #16
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054da:	e13e      	b.n	800575a <UART_SetConfig+0x5a6>
 80054dc:	cfff69f3 	.word	0xcfff69f3
 80054e0:	58000c00 	.word	0x58000c00
 80054e4:	11fff4ff 	.word	0x11fff4ff
 80054e8:	40011000 	.word	0x40011000
 80054ec:	58024400 	.word	0x58024400
 80054f0:	40004400 	.word	0x40004400
 80054f4:	40004800 	.word	0x40004800
 80054f8:	40004c00 	.word	0x40004c00
 80054fc:	40005000 	.word	0x40005000
 8005500:	2320      	movs	r3, #32
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005506:	e128      	b.n	800575a <UART_SetConfig+0x5a6>
 8005508:	2340      	movs	r3, #64	; 0x40
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550e:	e124      	b.n	800575a <UART_SetConfig+0x5a6>
 8005510:	2380      	movs	r3, #128	; 0x80
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005516:	e120      	b.n	800575a <UART_SetConfig+0x5a6>
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4acb      	ldr	r2, [pc, #812]	; (800584c <UART_SetConfig+0x698>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d176      	bne.n	8005610 <UART_SetConfig+0x45c>
 8005522:	4bcb      	ldr	r3, [pc, #812]	; (8005850 <UART_SetConfig+0x69c>)
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800552a:	2b28      	cmp	r3, #40	; 0x28
 800552c:	d86c      	bhi.n	8005608 <UART_SetConfig+0x454>
 800552e:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <UART_SetConfig+0x380>)
 8005530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005534:	080055d9 	.word	0x080055d9
 8005538:	08005609 	.word	0x08005609
 800553c:	08005609 	.word	0x08005609
 8005540:	08005609 	.word	0x08005609
 8005544:	08005609 	.word	0x08005609
 8005548:	08005609 	.word	0x08005609
 800554c:	08005609 	.word	0x08005609
 8005550:	08005609 	.word	0x08005609
 8005554:	080055e1 	.word	0x080055e1
 8005558:	08005609 	.word	0x08005609
 800555c:	08005609 	.word	0x08005609
 8005560:	08005609 	.word	0x08005609
 8005564:	08005609 	.word	0x08005609
 8005568:	08005609 	.word	0x08005609
 800556c:	08005609 	.word	0x08005609
 8005570:	08005609 	.word	0x08005609
 8005574:	080055e9 	.word	0x080055e9
 8005578:	08005609 	.word	0x08005609
 800557c:	08005609 	.word	0x08005609
 8005580:	08005609 	.word	0x08005609
 8005584:	08005609 	.word	0x08005609
 8005588:	08005609 	.word	0x08005609
 800558c:	08005609 	.word	0x08005609
 8005590:	08005609 	.word	0x08005609
 8005594:	080055f1 	.word	0x080055f1
 8005598:	08005609 	.word	0x08005609
 800559c:	08005609 	.word	0x08005609
 80055a0:	08005609 	.word	0x08005609
 80055a4:	08005609 	.word	0x08005609
 80055a8:	08005609 	.word	0x08005609
 80055ac:	08005609 	.word	0x08005609
 80055b0:	08005609 	.word	0x08005609
 80055b4:	080055f9 	.word	0x080055f9
 80055b8:	08005609 	.word	0x08005609
 80055bc:	08005609 	.word	0x08005609
 80055c0:	08005609 	.word	0x08005609
 80055c4:	08005609 	.word	0x08005609
 80055c8:	08005609 	.word	0x08005609
 80055cc:	08005609 	.word	0x08005609
 80055d0:	08005609 	.word	0x08005609
 80055d4:	08005601 	.word	0x08005601
 80055d8:	2301      	movs	r3, #1
 80055da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055de:	e0bc      	b.n	800575a <UART_SetConfig+0x5a6>
 80055e0:	2304      	movs	r3, #4
 80055e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055e6:	e0b8      	b.n	800575a <UART_SetConfig+0x5a6>
 80055e8:	2308      	movs	r3, #8
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ee:	e0b4      	b.n	800575a <UART_SetConfig+0x5a6>
 80055f0:	2310      	movs	r3, #16
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f6:	e0b0      	b.n	800575a <UART_SetConfig+0x5a6>
 80055f8:	2320      	movs	r3, #32
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fe:	e0ac      	b.n	800575a <UART_SetConfig+0x5a6>
 8005600:	2340      	movs	r3, #64	; 0x40
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005606:	e0a8      	b.n	800575a <UART_SetConfig+0x5a6>
 8005608:	2380      	movs	r3, #128	; 0x80
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560e:	e0a4      	b.n	800575a <UART_SetConfig+0x5a6>
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a8f      	ldr	r2, [pc, #572]	; (8005854 <UART_SetConfig+0x6a0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d130      	bne.n	800567c <UART_SetConfig+0x4c8>
 800561a:	4b8d      	ldr	r3, [pc, #564]	; (8005850 <UART_SetConfig+0x69c>)
 800561c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	2b05      	cmp	r3, #5
 8005624:	d826      	bhi.n	8005674 <UART_SetConfig+0x4c0>
 8005626:	a201      	add	r2, pc, #4	; (adr r2, 800562c <UART_SetConfig+0x478>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	08005645 	.word	0x08005645
 8005630:	0800564d 	.word	0x0800564d
 8005634:	08005655 	.word	0x08005655
 8005638:	0800565d 	.word	0x0800565d
 800563c:	08005665 	.word	0x08005665
 8005640:	0800566d 	.word	0x0800566d
 8005644:	2300      	movs	r3, #0
 8005646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800564a:	e086      	b.n	800575a <UART_SetConfig+0x5a6>
 800564c:	2304      	movs	r3, #4
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005652:	e082      	b.n	800575a <UART_SetConfig+0x5a6>
 8005654:	2308      	movs	r3, #8
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565a:	e07e      	b.n	800575a <UART_SetConfig+0x5a6>
 800565c:	2310      	movs	r3, #16
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005662:	e07a      	b.n	800575a <UART_SetConfig+0x5a6>
 8005664:	2320      	movs	r3, #32
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566a:	e076      	b.n	800575a <UART_SetConfig+0x5a6>
 800566c:	2340      	movs	r3, #64	; 0x40
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005672:	e072      	b.n	800575a <UART_SetConfig+0x5a6>
 8005674:	2380      	movs	r3, #128	; 0x80
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567a:	e06e      	b.n	800575a <UART_SetConfig+0x5a6>
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a75      	ldr	r2, [pc, #468]	; (8005858 <UART_SetConfig+0x6a4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d130      	bne.n	80056e8 <UART_SetConfig+0x534>
 8005686:	4b72      	ldr	r3, [pc, #456]	; (8005850 <UART_SetConfig+0x69c>)
 8005688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	2b05      	cmp	r3, #5
 8005690:	d826      	bhi.n	80056e0 <UART_SetConfig+0x52c>
 8005692:	a201      	add	r2, pc, #4	; (adr r2, 8005698 <UART_SetConfig+0x4e4>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	080056b1 	.word	0x080056b1
 800569c:	080056b9 	.word	0x080056b9
 80056a0:	080056c1 	.word	0x080056c1
 80056a4:	080056c9 	.word	0x080056c9
 80056a8:	080056d1 	.word	0x080056d1
 80056ac:	080056d9 	.word	0x080056d9
 80056b0:	2300      	movs	r3, #0
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056b6:	e050      	b.n	800575a <UART_SetConfig+0x5a6>
 80056b8:	2304      	movs	r3, #4
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056be:	e04c      	b.n	800575a <UART_SetConfig+0x5a6>
 80056c0:	2308      	movs	r3, #8
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c6:	e048      	b.n	800575a <UART_SetConfig+0x5a6>
 80056c8:	2310      	movs	r3, #16
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ce:	e044      	b.n	800575a <UART_SetConfig+0x5a6>
 80056d0:	2320      	movs	r3, #32
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d6:	e040      	b.n	800575a <UART_SetConfig+0x5a6>
 80056d8:	2340      	movs	r3, #64	; 0x40
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056de:	e03c      	b.n	800575a <UART_SetConfig+0x5a6>
 80056e0:	2380      	movs	r3, #128	; 0x80
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e6:	e038      	b.n	800575a <UART_SetConfig+0x5a6>
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a5b      	ldr	r2, [pc, #364]	; (800585c <UART_SetConfig+0x6a8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d130      	bne.n	8005754 <UART_SetConfig+0x5a0>
 80056f2:	4b57      	ldr	r3, [pc, #348]	; (8005850 <UART_SetConfig+0x69c>)
 80056f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	2b05      	cmp	r3, #5
 80056fc:	d826      	bhi.n	800574c <UART_SetConfig+0x598>
 80056fe:	a201      	add	r2, pc, #4	; (adr r2, 8005704 <UART_SetConfig+0x550>)
 8005700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005704:	0800571d 	.word	0x0800571d
 8005708:	08005725 	.word	0x08005725
 800570c:	0800572d 	.word	0x0800572d
 8005710:	08005735 	.word	0x08005735
 8005714:	0800573d 	.word	0x0800573d
 8005718:	08005745 	.word	0x08005745
 800571c:	2302      	movs	r3, #2
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005722:	e01a      	b.n	800575a <UART_SetConfig+0x5a6>
 8005724:	2304      	movs	r3, #4
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572a:	e016      	b.n	800575a <UART_SetConfig+0x5a6>
 800572c:	2308      	movs	r3, #8
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005732:	e012      	b.n	800575a <UART_SetConfig+0x5a6>
 8005734:	2310      	movs	r3, #16
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573a:	e00e      	b.n	800575a <UART_SetConfig+0x5a6>
 800573c:	2320      	movs	r3, #32
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005742:	e00a      	b.n	800575a <UART_SetConfig+0x5a6>
 8005744:	2340      	movs	r3, #64	; 0x40
 8005746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574a:	e006      	b.n	800575a <UART_SetConfig+0x5a6>
 800574c:	2380      	movs	r3, #128	; 0x80
 800574e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005752:	e002      	b.n	800575a <UART_SetConfig+0x5a6>
 8005754:	2380      	movs	r3, #128	; 0x80
 8005756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a3f      	ldr	r2, [pc, #252]	; (800585c <UART_SetConfig+0x6a8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	f040 80f8 	bne.w	8005956 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005766:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800576a:	2b20      	cmp	r3, #32
 800576c:	dc46      	bgt.n	80057fc <UART_SetConfig+0x648>
 800576e:	2b02      	cmp	r3, #2
 8005770:	f2c0 8082 	blt.w	8005878 <UART_SetConfig+0x6c4>
 8005774:	3b02      	subs	r3, #2
 8005776:	2b1e      	cmp	r3, #30
 8005778:	d87e      	bhi.n	8005878 <UART_SetConfig+0x6c4>
 800577a:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <UART_SetConfig+0x5cc>)
 800577c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005780:	08005803 	.word	0x08005803
 8005784:	08005879 	.word	0x08005879
 8005788:	0800580b 	.word	0x0800580b
 800578c:	08005879 	.word	0x08005879
 8005790:	08005879 	.word	0x08005879
 8005794:	08005879 	.word	0x08005879
 8005798:	0800581b 	.word	0x0800581b
 800579c:	08005879 	.word	0x08005879
 80057a0:	08005879 	.word	0x08005879
 80057a4:	08005879 	.word	0x08005879
 80057a8:	08005879 	.word	0x08005879
 80057ac:	08005879 	.word	0x08005879
 80057b0:	08005879 	.word	0x08005879
 80057b4:	08005879 	.word	0x08005879
 80057b8:	0800582b 	.word	0x0800582b
 80057bc:	08005879 	.word	0x08005879
 80057c0:	08005879 	.word	0x08005879
 80057c4:	08005879 	.word	0x08005879
 80057c8:	08005879 	.word	0x08005879
 80057cc:	08005879 	.word	0x08005879
 80057d0:	08005879 	.word	0x08005879
 80057d4:	08005879 	.word	0x08005879
 80057d8:	08005879 	.word	0x08005879
 80057dc:	08005879 	.word	0x08005879
 80057e0:	08005879 	.word	0x08005879
 80057e4:	08005879 	.word	0x08005879
 80057e8:	08005879 	.word	0x08005879
 80057ec:	08005879 	.word	0x08005879
 80057f0:	08005879 	.word	0x08005879
 80057f4:	08005879 	.word	0x08005879
 80057f8:	0800586b 	.word	0x0800586b
 80057fc:	2b40      	cmp	r3, #64	; 0x40
 80057fe:	d037      	beq.n	8005870 <UART_SetConfig+0x6bc>
 8005800:	e03a      	b.n	8005878 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005802:	f7fe f829 	bl	8003858 <HAL_RCCEx_GetD3PCLK1Freq>
 8005806:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005808:	e03c      	b.n	8005884 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800580a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800580e:	4618      	mov	r0, r3
 8005810:	f7fe f838 	bl	8003884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005818:	e034      	b.n	8005884 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800581a:	f107 0318 	add.w	r3, r7, #24
 800581e:	4618      	mov	r0, r3
 8005820:	f7fe f984 	bl	8003b2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005828:	e02c      	b.n	8005884 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800582a:	4b09      	ldr	r3, [pc, #36]	; (8005850 <UART_SetConfig+0x69c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b00      	cmp	r3, #0
 8005834:	d016      	beq.n	8005864 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005836:	4b06      	ldr	r3, [pc, #24]	; (8005850 <UART_SetConfig+0x69c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	08db      	lsrs	r3, r3, #3
 800583c:	f003 0303 	and.w	r3, r3, #3
 8005840:	4a07      	ldr	r2, [pc, #28]	; (8005860 <UART_SetConfig+0x6ac>)
 8005842:	fa22 f303 	lsr.w	r3, r2, r3
 8005846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005848:	e01c      	b.n	8005884 <UART_SetConfig+0x6d0>
 800584a:	bf00      	nop
 800584c:	40011400 	.word	0x40011400
 8005850:	58024400 	.word	0x58024400
 8005854:	40007800 	.word	0x40007800
 8005858:	40007c00 	.word	0x40007c00
 800585c:	58000c00 	.word	0x58000c00
 8005860:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005864:	4b9d      	ldr	r3, [pc, #628]	; (8005adc <UART_SetConfig+0x928>)
 8005866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005868:	e00c      	b.n	8005884 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800586a:	4b9d      	ldr	r3, [pc, #628]	; (8005ae0 <UART_SetConfig+0x92c>)
 800586c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800586e:	e009      	b.n	8005884 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005870:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005874:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005876:	e005      	b.n	8005884 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005882:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 81de 	beq.w	8005c48 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	4a94      	ldr	r2, [pc, #592]	; (8005ae4 <UART_SetConfig+0x930>)
 8005892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005896:	461a      	mov	r2, r3
 8005898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800589a:	fbb3 f3f2 	udiv	r3, r3, r2
 800589e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	4613      	mov	r3, r2
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	4413      	add	r3, r2
 80058aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d305      	bcc.n	80058bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d903      	bls.n	80058c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80058c2:	e1c1      	b.n	8005c48 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c6:	2200      	movs	r2, #0
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	60fa      	str	r2, [r7, #12]
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	4a84      	ldr	r2, [pc, #528]	; (8005ae4 <UART_SetConfig+0x930>)
 80058d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2200      	movs	r2, #0
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	607a      	str	r2, [r7, #4]
 80058de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058e6:	f7fa fd53 	bl	8000390 <__aeabi_uldivmod>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4610      	mov	r0, r2
 80058f0:	4619      	mov	r1, r3
 80058f2:	f04f 0200 	mov.w	r2, #0
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	020b      	lsls	r3, r1, #8
 80058fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005900:	0202      	lsls	r2, r0, #8
 8005902:	6979      	ldr	r1, [r7, #20]
 8005904:	6849      	ldr	r1, [r1, #4]
 8005906:	0849      	lsrs	r1, r1, #1
 8005908:	2000      	movs	r0, #0
 800590a:	460c      	mov	r4, r1
 800590c:	4605      	mov	r5, r0
 800590e:	eb12 0804 	adds.w	r8, r2, r4
 8005912:	eb43 0905 	adc.w	r9, r3, r5
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	469a      	mov	sl, r3
 800591e:	4693      	mov	fp, r2
 8005920:	4652      	mov	r2, sl
 8005922:	465b      	mov	r3, fp
 8005924:	4640      	mov	r0, r8
 8005926:	4649      	mov	r1, r9
 8005928:	f7fa fd32 	bl	8000390 <__aeabi_uldivmod>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4613      	mov	r3, r2
 8005932:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800593a:	d308      	bcc.n	800594e <UART_SetConfig+0x79a>
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005942:	d204      	bcs.n	800594e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800594a:	60da      	str	r2, [r3, #12]
 800594c:	e17c      	b.n	8005c48 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005954:	e178      	b.n	8005c48 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800595e:	f040 80c5 	bne.w	8005aec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005962:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005966:	2b20      	cmp	r3, #32
 8005968:	dc48      	bgt.n	80059fc <UART_SetConfig+0x848>
 800596a:	2b00      	cmp	r3, #0
 800596c:	db7b      	blt.n	8005a66 <UART_SetConfig+0x8b2>
 800596e:	2b20      	cmp	r3, #32
 8005970:	d879      	bhi.n	8005a66 <UART_SetConfig+0x8b2>
 8005972:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <UART_SetConfig+0x7c4>)
 8005974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005978:	08005a03 	.word	0x08005a03
 800597c:	08005a0b 	.word	0x08005a0b
 8005980:	08005a67 	.word	0x08005a67
 8005984:	08005a67 	.word	0x08005a67
 8005988:	08005a13 	.word	0x08005a13
 800598c:	08005a67 	.word	0x08005a67
 8005990:	08005a67 	.word	0x08005a67
 8005994:	08005a67 	.word	0x08005a67
 8005998:	08005a23 	.word	0x08005a23
 800599c:	08005a67 	.word	0x08005a67
 80059a0:	08005a67 	.word	0x08005a67
 80059a4:	08005a67 	.word	0x08005a67
 80059a8:	08005a67 	.word	0x08005a67
 80059ac:	08005a67 	.word	0x08005a67
 80059b0:	08005a67 	.word	0x08005a67
 80059b4:	08005a67 	.word	0x08005a67
 80059b8:	08005a33 	.word	0x08005a33
 80059bc:	08005a67 	.word	0x08005a67
 80059c0:	08005a67 	.word	0x08005a67
 80059c4:	08005a67 	.word	0x08005a67
 80059c8:	08005a67 	.word	0x08005a67
 80059cc:	08005a67 	.word	0x08005a67
 80059d0:	08005a67 	.word	0x08005a67
 80059d4:	08005a67 	.word	0x08005a67
 80059d8:	08005a67 	.word	0x08005a67
 80059dc:	08005a67 	.word	0x08005a67
 80059e0:	08005a67 	.word	0x08005a67
 80059e4:	08005a67 	.word	0x08005a67
 80059e8:	08005a67 	.word	0x08005a67
 80059ec:	08005a67 	.word	0x08005a67
 80059f0:	08005a67 	.word	0x08005a67
 80059f4:	08005a67 	.word	0x08005a67
 80059f8:	08005a59 	.word	0x08005a59
 80059fc:	2b40      	cmp	r3, #64	; 0x40
 80059fe:	d02e      	beq.n	8005a5e <UART_SetConfig+0x8aa>
 8005a00:	e031      	b.n	8005a66 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a02:	f7fc ffb7 	bl	8002974 <HAL_RCC_GetPCLK1Freq>
 8005a06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a08:	e033      	b.n	8005a72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a0a:	f7fc ffc9 	bl	80029a0 <HAL_RCC_GetPCLK2Freq>
 8005a0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a10:	e02f      	b.n	8005a72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fd ff34 	bl	8003884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a20:	e027      	b.n	8005a72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a22:	f107 0318 	add.w	r3, r7, #24
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe f880 	bl	8003b2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a30:	e01f      	b.n	8005a72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a32:	4b2d      	ldr	r3, [pc, #180]	; (8005ae8 <UART_SetConfig+0x934>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d009      	beq.n	8005a52 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a3e:	4b2a      	ldr	r3, [pc, #168]	; (8005ae8 <UART_SetConfig+0x934>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	08db      	lsrs	r3, r3, #3
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	4a24      	ldr	r2, [pc, #144]	; (8005adc <UART_SetConfig+0x928>)
 8005a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a50:	e00f      	b.n	8005a72 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005a52:	4b22      	ldr	r3, [pc, #136]	; (8005adc <UART_SetConfig+0x928>)
 8005a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a56:	e00c      	b.n	8005a72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a58:	4b21      	ldr	r3, [pc, #132]	; (8005ae0 <UART_SetConfig+0x92c>)
 8005a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a5c:	e009      	b.n	8005a72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a64:	e005      	b.n	8005a72 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005a70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 80e7 	beq.w	8005c48 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	4a19      	ldr	r2, [pc, #100]	; (8005ae4 <UART_SetConfig+0x930>)
 8005a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a84:	461a      	mov	r2, r3
 8005a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a88:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a8c:	005a      	lsls	r2, r3, #1
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	085b      	lsrs	r3, r3, #1
 8005a94:	441a      	add	r2, r3
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	2b0f      	cmp	r3, #15
 8005aa4:	d916      	bls.n	8005ad4 <UART_SetConfig+0x920>
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aac:	d212      	bcs.n	8005ad4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f023 030f 	bic.w	r3, r3, #15
 8005ab6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	085b      	lsrs	r3, r3, #1
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005ad0:	60da      	str	r2, [r3, #12]
 8005ad2:	e0b9      	b.n	8005c48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005ada:	e0b5      	b.n	8005c48 <UART_SetConfig+0xa94>
 8005adc:	03d09000 	.word	0x03d09000
 8005ae0:	003d0900 	.word	0x003d0900
 8005ae4:	08008cc4 	.word	0x08008cc4
 8005ae8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	dc49      	bgt.n	8005b88 <UART_SetConfig+0x9d4>
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	db7c      	blt.n	8005bf2 <UART_SetConfig+0xa3e>
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d87a      	bhi.n	8005bf2 <UART_SetConfig+0xa3e>
 8005afc:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <UART_SetConfig+0x950>)
 8005afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b02:	bf00      	nop
 8005b04:	08005b8f 	.word	0x08005b8f
 8005b08:	08005b97 	.word	0x08005b97
 8005b0c:	08005bf3 	.word	0x08005bf3
 8005b10:	08005bf3 	.word	0x08005bf3
 8005b14:	08005b9f 	.word	0x08005b9f
 8005b18:	08005bf3 	.word	0x08005bf3
 8005b1c:	08005bf3 	.word	0x08005bf3
 8005b20:	08005bf3 	.word	0x08005bf3
 8005b24:	08005baf 	.word	0x08005baf
 8005b28:	08005bf3 	.word	0x08005bf3
 8005b2c:	08005bf3 	.word	0x08005bf3
 8005b30:	08005bf3 	.word	0x08005bf3
 8005b34:	08005bf3 	.word	0x08005bf3
 8005b38:	08005bf3 	.word	0x08005bf3
 8005b3c:	08005bf3 	.word	0x08005bf3
 8005b40:	08005bf3 	.word	0x08005bf3
 8005b44:	08005bbf 	.word	0x08005bbf
 8005b48:	08005bf3 	.word	0x08005bf3
 8005b4c:	08005bf3 	.word	0x08005bf3
 8005b50:	08005bf3 	.word	0x08005bf3
 8005b54:	08005bf3 	.word	0x08005bf3
 8005b58:	08005bf3 	.word	0x08005bf3
 8005b5c:	08005bf3 	.word	0x08005bf3
 8005b60:	08005bf3 	.word	0x08005bf3
 8005b64:	08005bf3 	.word	0x08005bf3
 8005b68:	08005bf3 	.word	0x08005bf3
 8005b6c:	08005bf3 	.word	0x08005bf3
 8005b70:	08005bf3 	.word	0x08005bf3
 8005b74:	08005bf3 	.word	0x08005bf3
 8005b78:	08005bf3 	.word	0x08005bf3
 8005b7c:	08005bf3 	.word	0x08005bf3
 8005b80:	08005bf3 	.word	0x08005bf3
 8005b84:	08005be5 	.word	0x08005be5
 8005b88:	2b40      	cmp	r3, #64	; 0x40
 8005b8a:	d02e      	beq.n	8005bea <UART_SetConfig+0xa36>
 8005b8c:	e031      	b.n	8005bf2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b8e:	f7fc fef1 	bl	8002974 <HAL_RCC_GetPCLK1Freq>
 8005b92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b94:	e033      	b.n	8005bfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b96:	f7fc ff03 	bl	80029a0 <HAL_RCC_GetPCLK2Freq>
 8005b9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b9c:	e02f      	b.n	8005bfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fd fe6e 	bl	8003884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bac:	e027      	b.n	8005bfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bae:	f107 0318 	add.w	r3, r7, #24
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fd ffba 	bl	8003b2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bbc:	e01f      	b.n	8005bfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bbe:	4b2d      	ldr	r3, [pc, #180]	; (8005c74 <UART_SetConfig+0xac0>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d009      	beq.n	8005bde <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bca:	4b2a      	ldr	r3, [pc, #168]	; (8005c74 <UART_SetConfig+0xac0>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	08db      	lsrs	r3, r3, #3
 8005bd0:	f003 0303 	and.w	r3, r3, #3
 8005bd4:	4a28      	ldr	r2, [pc, #160]	; (8005c78 <UART_SetConfig+0xac4>)
 8005bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bdc:	e00f      	b.n	8005bfe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005bde:	4b26      	ldr	r3, [pc, #152]	; (8005c78 <UART_SetConfig+0xac4>)
 8005be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005be2:	e00c      	b.n	8005bfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005be4:	4b25      	ldr	r3, [pc, #148]	; (8005c7c <UART_SetConfig+0xac8>)
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005be8:	e009      	b.n	8005bfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bf0:	e005      	b.n	8005bfe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005bfc:	bf00      	nop
    }

    if (pclk != 0U)
 8005bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d021      	beq.n	8005c48 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	4a1d      	ldr	r2, [pc, #116]	; (8005c80 <UART_SetConfig+0xacc>)
 8005c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c12:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	085b      	lsrs	r3, r3, #1
 8005c1c:	441a      	add	r2, r3
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c26:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	2b0f      	cmp	r3, #15
 8005c2c:	d909      	bls.n	8005c42 <UART_SetConfig+0xa8e>
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c34:	d205      	bcs.n	8005c42 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	60da      	str	r2, [r3, #12]
 8005c40:	e002      	b.n	8005c48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2200      	movs	r2, #0
 8005c62:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005c64:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3748      	adds	r7, #72	; 0x48
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c72:	bf00      	nop
 8005c74:	58024400 	.word	0x58024400
 8005c78:	03d09000 	.word	0x03d09000
 8005c7c:	003d0900 	.word	0x003d0900
 8005c80:	08008cc4 	.word	0x08008cc4

08005c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00a      	beq.n	8005cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d18:	f003 0310 	and.w	r3, r3, #16
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00a      	beq.n	8005d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	f003 0320 	and.w	r3, r3, #32
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00a      	beq.n	8005d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d01a      	beq.n	8005d9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d82:	d10a      	bne.n	8005d9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00a      	beq.n	8005dbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	605a      	str	r2, [r3, #4]
  }
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af02      	add	r7, sp, #8
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dd8:	f7fb facc 	bl	8001374 <HAL_GetTick>
 8005ddc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0308 	and.w	r3, r3, #8
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d10e      	bne.n	8005e0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f82f 	bl	8005e5e <UART_WaitOnFlagUntilTimeout>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e025      	b.n	8005e56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d10e      	bne.n	8005e36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f819 	bl	8005e5e <UART_WaitOnFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e00f      	b.n	8005e56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b09c      	sub	sp, #112	; 0x70
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	603b      	str	r3, [r7, #0]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e6e:	e0a9      	b.n	8005fc4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e76:	f000 80a5 	beq.w	8005fc4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e7a:	f7fb fa7b 	bl	8001374 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d302      	bcc.n	8005e90 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d140      	bne.n	8005f12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ea4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eb0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005eb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e6      	bne.n	8005e90 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3308      	adds	r3, #8
 8005ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	f023 0301 	bic.w	r3, r3, #1
 8005ed8:	663b      	str	r3, [r7, #96]	; 0x60
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3308      	adds	r3, #8
 8005ee0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ee2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ee4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e5      	bne.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e069      	b.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d051      	beq.n	8005fc4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f2e:	d149      	bne.n	8005fc4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	e853 3f00 	ldrex	r3, [r3]
 8005f46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	461a      	mov	r2, r3
 8005f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f58:	637b      	str	r3, [r7, #52]	; 0x34
 8005f5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e6      	bne.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3308      	adds	r3, #8
 8005f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	e853 3f00 	ldrex	r3, [r3]
 8005f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f023 0301 	bic.w	r3, r3, #1
 8005f82:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3308      	adds	r3, #8
 8005f8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f8c:	623a      	str	r2, [r7, #32]
 8005f8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f90:	69f9      	ldr	r1, [r7, #28]
 8005f92:	6a3a      	ldr	r2, [r7, #32]
 8005f94:	e841 2300 	strex	r3, r2, [r1]
 8005f98:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1e5      	bne.n	8005f6c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e010      	b.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69da      	ldr	r2, [r3, #28]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	bf0c      	ite	eq
 8005fd4:	2301      	moveq	r3, #1
 8005fd6:	2300      	movne	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	461a      	mov	r2, r3
 8005fdc:	79fb      	ldrb	r3, [r7, #7]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	f43f af46 	beq.w	8005e70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3770      	adds	r7, #112	; 0x70
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b085      	sub	sp, #20
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_UARTEx_DisableFifoMode+0x16>
 8006000:	2302      	movs	r3, #2
 8006002:	e027      	b.n	8006054 <HAL_UARTEx_DisableFifoMode+0x66>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2224      	movs	r2, #36	; 0x24
 8006010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 0201 	bic.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006032:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2220      	movs	r2, #32
 8006046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006074:	2302      	movs	r3, #2
 8006076:	e02d      	b.n	80060d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2224      	movs	r2, #36	; 0x24
 8006084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0201 	bic.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f84f 	bl	8006158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060f0:	2302      	movs	r3, #2
 80060f2:	e02d      	b.n	8006150 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2224      	movs	r2, #36	; 0x24
 8006100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0201 	bic.w	r2, r2, #1
 800611a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f811 	bl	8006158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2220      	movs	r2, #32
 8006142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006164:	2b00      	cmp	r3, #0
 8006166:	d108      	bne.n	800617a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006178:	e031      	b.n	80061de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800617a:	2310      	movs	r3, #16
 800617c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800617e:	2310      	movs	r3, #16
 8006180:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	0e5b      	lsrs	r3, r3, #25
 800618a:	b2db      	uxtb	r3, r3
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	0f5b      	lsrs	r3, r3, #29
 800619a:	b2db      	uxtb	r3, r3
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061a2:	7bbb      	ldrb	r3, [r7, #14]
 80061a4:	7b3a      	ldrb	r2, [r7, #12]
 80061a6:	4911      	ldr	r1, [pc, #68]	; (80061ec <UARTEx_SetNbDataToProcess+0x94>)
 80061a8:	5c8a      	ldrb	r2, [r1, r2]
 80061aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061ae:	7b3a      	ldrb	r2, [r7, #12]
 80061b0:	490f      	ldr	r1, [pc, #60]	; (80061f0 <UARTEx_SetNbDataToProcess+0x98>)
 80061b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	7b7a      	ldrb	r2, [r7, #13]
 80061c4:	4909      	ldr	r1, [pc, #36]	; (80061ec <UARTEx_SetNbDataToProcess+0x94>)
 80061c6:	5c8a      	ldrb	r2, [r1, r2]
 80061c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061cc:	7b7a      	ldrb	r2, [r7, #13]
 80061ce:	4908      	ldr	r1, [pc, #32]	; (80061f0 <UARTEx_SetNbDataToProcess+0x98>)
 80061d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80061de:	bf00      	nop
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	08008cdc 	.word	0x08008cdc
 80061f0:	08008ce4 	.word	0x08008ce4

080061f4 <__errno>:
 80061f4:	4b01      	ldr	r3, [pc, #4]	; (80061fc <__errno+0x8>)
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	24000010 	.word	0x24000010

08006200 <__libc_init_array>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	4d0d      	ldr	r5, [pc, #52]	; (8006238 <__libc_init_array+0x38>)
 8006204:	4c0d      	ldr	r4, [pc, #52]	; (800623c <__libc_init_array+0x3c>)
 8006206:	1b64      	subs	r4, r4, r5
 8006208:	10a4      	asrs	r4, r4, #2
 800620a:	2600      	movs	r6, #0
 800620c:	42a6      	cmp	r6, r4
 800620e:	d109      	bne.n	8006224 <__libc_init_array+0x24>
 8006210:	4d0b      	ldr	r5, [pc, #44]	; (8006240 <__libc_init_array+0x40>)
 8006212:	4c0c      	ldr	r4, [pc, #48]	; (8006244 <__libc_init_array+0x44>)
 8006214:	f002 fd1a 	bl	8008c4c <_init>
 8006218:	1b64      	subs	r4, r4, r5
 800621a:	10a4      	asrs	r4, r4, #2
 800621c:	2600      	movs	r6, #0
 800621e:	42a6      	cmp	r6, r4
 8006220:	d105      	bne.n	800622e <__libc_init_array+0x2e>
 8006222:	bd70      	pop	{r4, r5, r6, pc}
 8006224:	f855 3b04 	ldr.w	r3, [r5], #4
 8006228:	4798      	blx	r3
 800622a:	3601      	adds	r6, #1
 800622c:	e7ee      	b.n	800620c <__libc_init_array+0xc>
 800622e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006232:	4798      	blx	r3
 8006234:	3601      	adds	r6, #1
 8006236:	e7f2      	b.n	800621e <__libc_init_array+0x1e>
 8006238:	080090cc 	.word	0x080090cc
 800623c:	080090cc 	.word	0x080090cc
 8006240:	080090cc 	.word	0x080090cc
 8006244:	080090d0 	.word	0x080090d0

08006248 <memset>:
 8006248:	4402      	add	r2, r0
 800624a:	4603      	mov	r3, r0
 800624c:	4293      	cmp	r3, r2
 800624e:	d100      	bne.n	8006252 <memset+0xa>
 8006250:	4770      	bx	lr
 8006252:	f803 1b01 	strb.w	r1, [r3], #1
 8006256:	e7f9      	b.n	800624c <memset+0x4>

08006258 <__cvt>:
 8006258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800625a:	ed2d 8b02 	vpush	{d8}
 800625e:	eeb0 8b40 	vmov.f64	d8, d0
 8006262:	b085      	sub	sp, #20
 8006264:	4617      	mov	r7, r2
 8006266:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006268:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800626a:	ee18 2a90 	vmov	r2, s17
 800626e:	f025 0520 	bic.w	r5, r5, #32
 8006272:	2a00      	cmp	r2, #0
 8006274:	bfb6      	itet	lt
 8006276:	222d      	movlt	r2, #45	; 0x2d
 8006278:	2200      	movge	r2, #0
 800627a:	eeb1 8b40 	vneglt.f64	d8, d0
 800627e:	2d46      	cmp	r5, #70	; 0x46
 8006280:	460c      	mov	r4, r1
 8006282:	701a      	strb	r2, [r3, #0]
 8006284:	d004      	beq.n	8006290 <__cvt+0x38>
 8006286:	2d45      	cmp	r5, #69	; 0x45
 8006288:	d100      	bne.n	800628c <__cvt+0x34>
 800628a:	3401      	adds	r4, #1
 800628c:	2102      	movs	r1, #2
 800628e:	e000      	b.n	8006292 <__cvt+0x3a>
 8006290:	2103      	movs	r1, #3
 8006292:	ab03      	add	r3, sp, #12
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	ab02      	add	r3, sp, #8
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	4622      	mov	r2, r4
 800629c:	4633      	mov	r3, r6
 800629e:	eeb0 0b48 	vmov.f64	d0, d8
 80062a2:	f000 fdf5 	bl	8006e90 <_dtoa_r>
 80062a6:	2d47      	cmp	r5, #71	; 0x47
 80062a8:	d101      	bne.n	80062ae <__cvt+0x56>
 80062aa:	07fb      	lsls	r3, r7, #31
 80062ac:	d51a      	bpl.n	80062e4 <__cvt+0x8c>
 80062ae:	2d46      	cmp	r5, #70	; 0x46
 80062b0:	eb00 0204 	add.w	r2, r0, r4
 80062b4:	d10c      	bne.n	80062d0 <__cvt+0x78>
 80062b6:	7803      	ldrb	r3, [r0, #0]
 80062b8:	2b30      	cmp	r3, #48	; 0x30
 80062ba:	d107      	bne.n	80062cc <__cvt+0x74>
 80062bc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80062c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c4:	bf1c      	itt	ne
 80062c6:	f1c4 0401 	rsbne	r4, r4, #1
 80062ca:	6034      	strne	r4, [r6, #0]
 80062cc:	6833      	ldr	r3, [r6, #0]
 80062ce:	441a      	add	r2, r3
 80062d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80062d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d8:	bf08      	it	eq
 80062da:	9203      	streq	r2, [sp, #12]
 80062dc:	2130      	movs	r1, #48	; 0x30
 80062de:	9b03      	ldr	r3, [sp, #12]
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d307      	bcc.n	80062f4 <__cvt+0x9c>
 80062e4:	9b03      	ldr	r3, [sp, #12]
 80062e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062e8:	1a1b      	subs	r3, r3, r0
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	b005      	add	sp, #20
 80062ee:	ecbd 8b02 	vpop	{d8}
 80062f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062f4:	1c5c      	adds	r4, r3, #1
 80062f6:	9403      	str	r4, [sp, #12]
 80062f8:	7019      	strb	r1, [r3, #0]
 80062fa:	e7f0      	b.n	80062de <__cvt+0x86>

080062fc <__exponent>:
 80062fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062fe:	4603      	mov	r3, r0
 8006300:	2900      	cmp	r1, #0
 8006302:	bfb8      	it	lt
 8006304:	4249      	neglt	r1, r1
 8006306:	f803 2b02 	strb.w	r2, [r3], #2
 800630a:	bfb4      	ite	lt
 800630c:	222d      	movlt	r2, #45	; 0x2d
 800630e:	222b      	movge	r2, #43	; 0x2b
 8006310:	2909      	cmp	r1, #9
 8006312:	7042      	strb	r2, [r0, #1]
 8006314:	dd2a      	ble.n	800636c <__exponent+0x70>
 8006316:	f10d 0407 	add.w	r4, sp, #7
 800631a:	46a4      	mov	ip, r4
 800631c:	270a      	movs	r7, #10
 800631e:	46a6      	mov	lr, r4
 8006320:	460a      	mov	r2, r1
 8006322:	fb91 f6f7 	sdiv	r6, r1, r7
 8006326:	fb07 1516 	mls	r5, r7, r6, r1
 800632a:	3530      	adds	r5, #48	; 0x30
 800632c:	2a63      	cmp	r2, #99	; 0x63
 800632e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006332:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006336:	4631      	mov	r1, r6
 8006338:	dcf1      	bgt.n	800631e <__exponent+0x22>
 800633a:	3130      	adds	r1, #48	; 0x30
 800633c:	f1ae 0502 	sub.w	r5, lr, #2
 8006340:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006344:	1c44      	adds	r4, r0, #1
 8006346:	4629      	mov	r1, r5
 8006348:	4561      	cmp	r1, ip
 800634a:	d30a      	bcc.n	8006362 <__exponent+0x66>
 800634c:	f10d 0209 	add.w	r2, sp, #9
 8006350:	eba2 020e 	sub.w	r2, r2, lr
 8006354:	4565      	cmp	r5, ip
 8006356:	bf88      	it	hi
 8006358:	2200      	movhi	r2, #0
 800635a:	4413      	add	r3, r2
 800635c:	1a18      	subs	r0, r3, r0
 800635e:	b003      	add	sp, #12
 8006360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006366:	f804 2f01 	strb.w	r2, [r4, #1]!
 800636a:	e7ed      	b.n	8006348 <__exponent+0x4c>
 800636c:	2330      	movs	r3, #48	; 0x30
 800636e:	3130      	adds	r1, #48	; 0x30
 8006370:	7083      	strb	r3, [r0, #2]
 8006372:	70c1      	strb	r1, [r0, #3]
 8006374:	1d03      	adds	r3, r0, #4
 8006376:	e7f1      	b.n	800635c <__exponent+0x60>

08006378 <_printf_float>:
 8006378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637c:	b08b      	sub	sp, #44	; 0x2c
 800637e:	460c      	mov	r4, r1
 8006380:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006384:	4616      	mov	r6, r2
 8006386:	461f      	mov	r7, r3
 8006388:	4605      	mov	r5, r0
 800638a:	f001 fca7 	bl	8007cdc <_localeconv_r>
 800638e:	f8d0 b000 	ldr.w	fp, [r0]
 8006392:	4658      	mov	r0, fp
 8006394:	f7f9 ffa4 	bl	80002e0 <strlen>
 8006398:	2300      	movs	r3, #0
 800639a:	9308      	str	r3, [sp, #32]
 800639c:	f8d8 3000 	ldr.w	r3, [r8]
 80063a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80063a4:	6822      	ldr	r2, [r4, #0]
 80063a6:	3307      	adds	r3, #7
 80063a8:	f023 0307 	bic.w	r3, r3, #7
 80063ac:	f103 0108 	add.w	r1, r3, #8
 80063b0:	f8c8 1000 	str.w	r1, [r8]
 80063b4:	4682      	mov	sl, r0
 80063b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063ba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80063be:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006620 <_printf_float+0x2a8>
 80063c2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80063c6:	eeb0 6bc0 	vabs.f64	d6, d0
 80063ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80063ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d2:	dd24      	ble.n	800641e <_printf_float+0xa6>
 80063d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80063d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063dc:	d502      	bpl.n	80063e4 <_printf_float+0x6c>
 80063de:	232d      	movs	r3, #45	; 0x2d
 80063e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063e4:	4b90      	ldr	r3, [pc, #576]	; (8006628 <_printf_float+0x2b0>)
 80063e6:	4891      	ldr	r0, [pc, #580]	; (800662c <_printf_float+0x2b4>)
 80063e8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80063ec:	bf94      	ite	ls
 80063ee:	4698      	movls	r8, r3
 80063f0:	4680      	movhi	r8, r0
 80063f2:	2303      	movs	r3, #3
 80063f4:	6123      	str	r3, [r4, #16]
 80063f6:	f022 0204 	bic.w	r2, r2, #4
 80063fa:	2300      	movs	r3, #0
 80063fc:	6022      	str	r2, [r4, #0]
 80063fe:	9304      	str	r3, [sp, #16]
 8006400:	9700      	str	r7, [sp, #0]
 8006402:	4633      	mov	r3, r6
 8006404:	aa09      	add	r2, sp, #36	; 0x24
 8006406:	4621      	mov	r1, r4
 8006408:	4628      	mov	r0, r5
 800640a:	f000 f9d3 	bl	80067b4 <_printf_common>
 800640e:	3001      	adds	r0, #1
 8006410:	f040 808a 	bne.w	8006528 <_printf_float+0x1b0>
 8006414:	f04f 30ff 	mov.w	r0, #4294967295
 8006418:	b00b      	add	sp, #44	; 0x2c
 800641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641e:	eeb4 0b40 	vcmp.f64	d0, d0
 8006422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006426:	d709      	bvc.n	800643c <_printf_float+0xc4>
 8006428:	ee10 3a90 	vmov	r3, s1
 800642c:	2b00      	cmp	r3, #0
 800642e:	bfbc      	itt	lt
 8006430:	232d      	movlt	r3, #45	; 0x2d
 8006432:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006436:	487e      	ldr	r0, [pc, #504]	; (8006630 <_printf_float+0x2b8>)
 8006438:	4b7e      	ldr	r3, [pc, #504]	; (8006634 <_printf_float+0x2bc>)
 800643a:	e7d5      	b.n	80063e8 <_printf_float+0x70>
 800643c:	6863      	ldr	r3, [r4, #4]
 800643e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006442:	9104      	str	r1, [sp, #16]
 8006444:	1c59      	adds	r1, r3, #1
 8006446:	d13c      	bne.n	80064c2 <_printf_float+0x14a>
 8006448:	2306      	movs	r3, #6
 800644a:	6063      	str	r3, [r4, #4]
 800644c:	2300      	movs	r3, #0
 800644e:	9303      	str	r3, [sp, #12]
 8006450:	ab08      	add	r3, sp, #32
 8006452:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006456:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800645a:	ab07      	add	r3, sp, #28
 800645c:	6861      	ldr	r1, [r4, #4]
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	6022      	str	r2, [r4, #0]
 8006462:	f10d 031b 	add.w	r3, sp, #27
 8006466:	4628      	mov	r0, r5
 8006468:	f7ff fef6 	bl	8006258 <__cvt>
 800646c:	9b04      	ldr	r3, [sp, #16]
 800646e:	9907      	ldr	r1, [sp, #28]
 8006470:	2b47      	cmp	r3, #71	; 0x47
 8006472:	4680      	mov	r8, r0
 8006474:	d108      	bne.n	8006488 <_printf_float+0x110>
 8006476:	1cc8      	adds	r0, r1, #3
 8006478:	db02      	blt.n	8006480 <_printf_float+0x108>
 800647a:	6863      	ldr	r3, [r4, #4]
 800647c:	4299      	cmp	r1, r3
 800647e:	dd41      	ble.n	8006504 <_printf_float+0x18c>
 8006480:	f1a9 0902 	sub.w	r9, r9, #2
 8006484:	fa5f f989 	uxtb.w	r9, r9
 8006488:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800648c:	d820      	bhi.n	80064d0 <_printf_float+0x158>
 800648e:	3901      	subs	r1, #1
 8006490:	464a      	mov	r2, r9
 8006492:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006496:	9107      	str	r1, [sp, #28]
 8006498:	f7ff ff30 	bl	80062fc <__exponent>
 800649c:	9a08      	ldr	r2, [sp, #32]
 800649e:	9004      	str	r0, [sp, #16]
 80064a0:	1813      	adds	r3, r2, r0
 80064a2:	2a01      	cmp	r2, #1
 80064a4:	6123      	str	r3, [r4, #16]
 80064a6:	dc02      	bgt.n	80064ae <_printf_float+0x136>
 80064a8:	6822      	ldr	r2, [r4, #0]
 80064aa:	07d2      	lsls	r2, r2, #31
 80064ac:	d501      	bpl.n	80064b2 <_printf_float+0x13a>
 80064ae:	3301      	adds	r3, #1
 80064b0:	6123      	str	r3, [r4, #16]
 80064b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0a2      	beq.n	8006400 <_printf_float+0x88>
 80064ba:	232d      	movs	r3, #45	; 0x2d
 80064bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064c0:	e79e      	b.n	8006400 <_printf_float+0x88>
 80064c2:	9904      	ldr	r1, [sp, #16]
 80064c4:	2947      	cmp	r1, #71	; 0x47
 80064c6:	d1c1      	bne.n	800644c <_printf_float+0xd4>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1bf      	bne.n	800644c <_printf_float+0xd4>
 80064cc:	2301      	movs	r3, #1
 80064ce:	e7bc      	b.n	800644a <_printf_float+0xd2>
 80064d0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80064d4:	d118      	bne.n	8006508 <_printf_float+0x190>
 80064d6:	2900      	cmp	r1, #0
 80064d8:	6863      	ldr	r3, [r4, #4]
 80064da:	dd0b      	ble.n	80064f4 <_printf_float+0x17c>
 80064dc:	6121      	str	r1, [r4, #16]
 80064de:	b913      	cbnz	r3, 80064e6 <_printf_float+0x16e>
 80064e0:	6822      	ldr	r2, [r4, #0]
 80064e2:	07d0      	lsls	r0, r2, #31
 80064e4:	d502      	bpl.n	80064ec <_printf_float+0x174>
 80064e6:	3301      	adds	r3, #1
 80064e8:	440b      	add	r3, r1
 80064ea:	6123      	str	r3, [r4, #16]
 80064ec:	2300      	movs	r3, #0
 80064ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80064f0:	9304      	str	r3, [sp, #16]
 80064f2:	e7de      	b.n	80064b2 <_printf_float+0x13a>
 80064f4:	b913      	cbnz	r3, 80064fc <_printf_float+0x184>
 80064f6:	6822      	ldr	r2, [r4, #0]
 80064f8:	07d2      	lsls	r2, r2, #31
 80064fa:	d501      	bpl.n	8006500 <_printf_float+0x188>
 80064fc:	3302      	adds	r3, #2
 80064fe:	e7f4      	b.n	80064ea <_printf_float+0x172>
 8006500:	2301      	movs	r3, #1
 8006502:	e7f2      	b.n	80064ea <_printf_float+0x172>
 8006504:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006508:	9b08      	ldr	r3, [sp, #32]
 800650a:	4299      	cmp	r1, r3
 800650c:	db05      	blt.n	800651a <_printf_float+0x1a2>
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	6121      	str	r1, [r4, #16]
 8006512:	07d8      	lsls	r0, r3, #31
 8006514:	d5ea      	bpl.n	80064ec <_printf_float+0x174>
 8006516:	1c4b      	adds	r3, r1, #1
 8006518:	e7e7      	b.n	80064ea <_printf_float+0x172>
 800651a:	2900      	cmp	r1, #0
 800651c:	bfd4      	ite	le
 800651e:	f1c1 0202 	rsble	r2, r1, #2
 8006522:	2201      	movgt	r2, #1
 8006524:	4413      	add	r3, r2
 8006526:	e7e0      	b.n	80064ea <_printf_float+0x172>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	055a      	lsls	r2, r3, #21
 800652c:	d407      	bmi.n	800653e <_printf_float+0x1c6>
 800652e:	6923      	ldr	r3, [r4, #16]
 8006530:	4642      	mov	r2, r8
 8006532:	4631      	mov	r1, r6
 8006534:	4628      	mov	r0, r5
 8006536:	47b8      	blx	r7
 8006538:	3001      	adds	r0, #1
 800653a:	d12a      	bne.n	8006592 <_printf_float+0x21a>
 800653c:	e76a      	b.n	8006414 <_printf_float+0x9c>
 800653e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006542:	f240 80e2 	bls.w	800670a <_printf_float+0x392>
 8006546:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800654a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800654e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006552:	d133      	bne.n	80065bc <_printf_float+0x244>
 8006554:	4a38      	ldr	r2, [pc, #224]	; (8006638 <_printf_float+0x2c0>)
 8006556:	2301      	movs	r3, #1
 8006558:	4631      	mov	r1, r6
 800655a:	4628      	mov	r0, r5
 800655c:	47b8      	blx	r7
 800655e:	3001      	adds	r0, #1
 8006560:	f43f af58 	beq.w	8006414 <_printf_float+0x9c>
 8006564:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006568:	429a      	cmp	r2, r3
 800656a:	db02      	blt.n	8006572 <_printf_float+0x1fa>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	07d8      	lsls	r0, r3, #31
 8006570:	d50f      	bpl.n	8006592 <_printf_float+0x21a>
 8006572:	4653      	mov	r3, sl
 8006574:	465a      	mov	r2, fp
 8006576:	4631      	mov	r1, r6
 8006578:	4628      	mov	r0, r5
 800657a:	47b8      	blx	r7
 800657c:	3001      	adds	r0, #1
 800657e:	f43f af49 	beq.w	8006414 <_printf_float+0x9c>
 8006582:	f04f 0800 	mov.w	r8, #0
 8006586:	f104 091a 	add.w	r9, r4, #26
 800658a:	9b08      	ldr	r3, [sp, #32]
 800658c:	3b01      	subs	r3, #1
 800658e:	4543      	cmp	r3, r8
 8006590:	dc09      	bgt.n	80065a6 <_printf_float+0x22e>
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	079b      	lsls	r3, r3, #30
 8006596:	f100 8108 	bmi.w	80067aa <_printf_float+0x432>
 800659a:	68e0      	ldr	r0, [r4, #12]
 800659c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659e:	4298      	cmp	r0, r3
 80065a0:	bfb8      	it	lt
 80065a2:	4618      	movlt	r0, r3
 80065a4:	e738      	b.n	8006418 <_printf_float+0xa0>
 80065a6:	2301      	movs	r3, #1
 80065a8:	464a      	mov	r2, r9
 80065aa:	4631      	mov	r1, r6
 80065ac:	4628      	mov	r0, r5
 80065ae:	47b8      	blx	r7
 80065b0:	3001      	adds	r0, #1
 80065b2:	f43f af2f 	beq.w	8006414 <_printf_float+0x9c>
 80065b6:	f108 0801 	add.w	r8, r8, #1
 80065ba:	e7e6      	b.n	800658a <_printf_float+0x212>
 80065bc:	9b07      	ldr	r3, [sp, #28]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	dc3c      	bgt.n	800663c <_printf_float+0x2c4>
 80065c2:	4a1d      	ldr	r2, [pc, #116]	; (8006638 <_printf_float+0x2c0>)
 80065c4:	2301      	movs	r3, #1
 80065c6:	4631      	mov	r1, r6
 80065c8:	4628      	mov	r0, r5
 80065ca:	47b8      	blx	r7
 80065cc:	3001      	adds	r0, #1
 80065ce:	f43f af21 	beq.w	8006414 <_printf_float+0x9c>
 80065d2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	d102      	bne.n	80065e0 <_printf_float+0x268>
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	07d9      	lsls	r1, r3, #31
 80065de:	d5d8      	bpl.n	8006592 <_printf_float+0x21a>
 80065e0:	4653      	mov	r3, sl
 80065e2:	465a      	mov	r2, fp
 80065e4:	4631      	mov	r1, r6
 80065e6:	4628      	mov	r0, r5
 80065e8:	47b8      	blx	r7
 80065ea:	3001      	adds	r0, #1
 80065ec:	f43f af12 	beq.w	8006414 <_printf_float+0x9c>
 80065f0:	f04f 0900 	mov.w	r9, #0
 80065f4:	f104 0a1a 	add.w	sl, r4, #26
 80065f8:	9b07      	ldr	r3, [sp, #28]
 80065fa:	425b      	negs	r3, r3
 80065fc:	454b      	cmp	r3, r9
 80065fe:	dc01      	bgt.n	8006604 <_printf_float+0x28c>
 8006600:	9b08      	ldr	r3, [sp, #32]
 8006602:	e795      	b.n	8006530 <_printf_float+0x1b8>
 8006604:	2301      	movs	r3, #1
 8006606:	4652      	mov	r2, sl
 8006608:	4631      	mov	r1, r6
 800660a:	4628      	mov	r0, r5
 800660c:	47b8      	blx	r7
 800660e:	3001      	adds	r0, #1
 8006610:	f43f af00 	beq.w	8006414 <_printf_float+0x9c>
 8006614:	f109 0901 	add.w	r9, r9, #1
 8006618:	e7ee      	b.n	80065f8 <_printf_float+0x280>
 800661a:	bf00      	nop
 800661c:	f3af 8000 	nop.w
 8006620:	ffffffff 	.word	0xffffffff
 8006624:	7fefffff 	.word	0x7fefffff
 8006628:	08008cf0 	.word	0x08008cf0
 800662c:	08008cf4 	.word	0x08008cf4
 8006630:	08008cfc 	.word	0x08008cfc
 8006634:	08008cf8 	.word	0x08008cf8
 8006638:	08008d00 	.word	0x08008d00
 800663c:	9a08      	ldr	r2, [sp, #32]
 800663e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006640:	429a      	cmp	r2, r3
 8006642:	bfa8      	it	ge
 8006644:	461a      	movge	r2, r3
 8006646:	2a00      	cmp	r2, #0
 8006648:	4691      	mov	r9, r2
 800664a:	dc38      	bgt.n	80066be <_printf_float+0x346>
 800664c:	2300      	movs	r3, #0
 800664e:	9305      	str	r3, [sp, #20]
 8006650:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006654:	f104 021a 	add.w	r2, r4, #26
 8006658:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800665a:	9905      	ldr	r1, [sp, #20]
 800665c:	9304      	str	r3, [sp, #16]
 800665e:	eba3 0309 	sub.w	r3, r3, r9
 8006662:	428b      	cmp	r3, r1
 8006664:	dc33      	bgt.n	80066ce <_printf_float+0x356>
 8006666:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800666a:	429a      	cmp	r2, r3
 800666c:	db3c      	blt.n	80066e8 <_printf_float+0x370>
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	07da      	lsls	r2, r3, #31
 8006672:	d439      	bmi.n	80066e8 <_printf_float+0x370>
 8006674:	9b08      	ldr	r3, [sp, #32]
 8006676:	9a04      	ldr	r2, [sp, #16]
 8006678:	9907      	ldr	r1, [sp, #28]
 800667a:	1a9a      	subs	r2, r3, r2
 800667c:	eba3 0901 	sub.w	r9, r3, r1
 8006680:	4591      	cmp	r9, r2
 8006682:	bfa8      	it	ge
 8006684:	4691      	movge	r9, r2
 8006686:	f1b9 0f00 	cmp.w	r9, #0
 800668a:	dc35      	bgt.n	80066f8 <_printf_float+0x380>
 800668c:	f04f 0800 	mov.w	r8, #0
 8006690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006694:	f104 0a1a 	add.w	sl, r4, #26
 8006698:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800669c:	1a9b      	subs	r3, r3, r2
 800669e:	eba3 0309 	sub.w	r3, r3, r9
 80066a2:	4543      	cmp	r3, r8
 80066a4:	f77f af75 	ble.w	8006592 <_printf_float+0x21a>
 80066a8:	2301      	movs	r3, #1
 80066aa:	4652      	mov	r2, sl
 80066ac:	4631      	mov	r1, r6
 80066ae:	4628      	mov	r0, r5
 80066b0:	47b8      	blx	r7
 80066b2:	3001      	adds	r0, #1
 80066b4:	f43f aeae 	beq.w	8006414 <_printf_float+0x9c>
 80066b8:	f108 0801 	add.w	r8, r8, #1
 80066bc:	e7ec      	b.n	8006698 <_printf_float+0x320>
 80066be:	4613      	mov	r3, r2
 80066c0:	4631      	mov	r1, r6
 80066c2:	4642      	mov	r2, r8
 80066c4:	4628      	mov	r0, r5
 80066c6:	47b8      	blx	r7
 80066c8:	3001      	adds	r0, #1
 80066ca:	d1bf      	bne.n	800664c <_printf_float+0x2d4>
 80066cc:	e6a2      	b.n	8006414 <_printf_float+0x9c>
 80066ce:	2301      	movs	r3, #1
 80066d0:	4631      	mov	r1, r6
 80066d2:	4628      	mov	r0, r5
 80066d4:	9204      	str	r2, [sp, #16]
 80066d6:	47b8      	blx	r7
 80066d8:	3001      	adds	r0, #1
 80066da:	f43f ae9b 	beq.w	8006414 <_printf_float+0x9c>
 80066de:	9b05      	ldr	r3, [sp, #20]
 80066e0:	9a04      	ldr	r2, [sp, #16]
 80066e2:	3301      	adds	r3, #1
 80066e4:	9305      	str	r3, [sp, #20]
 80066e6:	e7b7      	b.n	8006658 <_printf_float+0x2e0>
 80066e8:	4653      	mov	r3, sl
 80066ea:	465a      	mov	r2, fp
 80066ec:	4631      	mov	r1, r6
 80066ee:	4628      	mov	r0, r5
 80066f0:	47b8      	blx	r7
 80066f2:	3001      	adds	r0, #1
 80066f4:	d1be      	bne.n	8006674 <_printf_float+0x2fc>
 80066f6:	e68d      	b.n	8006414 <_printf_float+0x9c>
 80066f8:	9a04      	ldr	r2, [sp, #16]
 80066fa:	464b      	mov	r3, r9
 80066fc:	4442      	add	r2, r8
 80066fe:	4631      	mov	r1, r6
 8006700:	4628      	mov	r0, r5
 8006702:	47b8      	blx	r7
 8006704:	3001      	adds	r0, #1
 8006706:	d1c1      	bne.n	800668c <_printf_float+0x314>
 8006708:	e684      	b.n	8006414 <_printf_float+0x9c>
 800670a:	9a08      	ldr	r2, [sp, #32]
 800670c:	2a01      	cmp	r2, #1
 800670e:	dc01      	bgt.n	8006714 <_printf_float+0x39c>
 8006710:	07db      	lsls	r3, r3, #31
 8006712:	d537      	bpl.n	8006784 <_printf_float+0x40c>
 8006714:	2301      	movs	r3, #1
 8006716:	4642      	mov	r2, r8
 8006718:	4631      	mov	r1, r6
 800671a:	4628      	mov	r0, r5
 800671c:	47b8      	blx	r7
 800671e:	3001      	adds	r0, #1
 8006720:	f43f ae78 	beq.w	8006414 <_printf_float+0x9c>
 8006724:	4653      	mov	r3, sl
 8006726:	465a      	mov	r2, fp
 8006728:	4631      	mov	r1, r6
 800672a:	4628      	mov	r0, r5
 800672c:	47b8      	blx	r7
 800672e:	3001      	adds	r0, #1
 8006730:	f43f ae70 	beq.w	8006414 <_printf_float+0x9c>
 8006734:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006738:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800673c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006740:	d01b      	beq.n	800677a <_printf_float+0x402>
 8006742:	9b08      	ldr	r3, [sp, #32]
 8006744:	f108 0201 	add.w	r2, r8, #1
 8006748:	3b01      	subs	r3, #1
 800674a:	4631      	mov	r1, r6
 800674c:	4628      	mov	r0, r5
 800674e:	47b8      	blx	r7
 8006750:	3001      	adds	r0, #1
 8006752:	d10e      	bne.n	8006772 <_printf_float+0x3fa>
 8006754:	e65e      	b.n	8006414 <_printf_float+0x9c>
 8006756:	2301      	movs	r3, #1
 8006758:	464a      	mov	r2, r9
 800675a:	4631      	mov	r1, r6
 800675c:	4628      	mov	r0, r5
 800675e:	47b8      	blx	r7
 8006760:	3001      	adds	r0, #1
 8006762:	f43f ae57 	beq.w	8006414 <_printf_float+0x9c>
 8006766:	f108 0801 	add.w	r8, r8, #1
 800676a:	9b08      	ldr	r3, [sp, #32]
 800676c:	3b01      	subs	r3, #1
 800676e:	4543      	cmp	r3, r8
 8006770:	dcf1      	bgt.n	8006756 <_printf_float+0x3de>
 8006772:	9b04      	ldr	r3, [sp, #16]
 8006774:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006778:	e6db      	b.n	8006532 <_printf_float+0x1ba>
 800677a:	f04f 0800 	mov.w	r8, #0
 800677e:	f104 091a 	add.w	r9, r4, #26
 8006782:	e7f2      	b.n	800676a <_printf_float+0x3f2>
 8006784:	2301      	movs	r3, #1
 8006786:	4642      	mov	r2, r8
 8006788:	e7df      	b.n	800674a <_printf_float+0x3d2>
 800678a:	2301      	movs	r3, #1
 800678c:	464a      	mov	r2, r9
 800678e:	4631      	mov	r1, r6
 8006790:	4628      	mov	r0, r5
 8006792:	47b8      	blx	r7
 8006794:	3001      	adds	r0, #1
 8006796:	f43f ae3d 	beq.w	8006414 <_printf_float+0x9c>
 800679a:	f108 0801 	add.w	r8, r8, #1
 800679e:	68e3      	ldr	r3, [r4, #12]
 80067a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067a2:	1a5b      	subs	r3, r3, r1
 80067a4:	4543      	cmp	r3, r8
 80067a6:	dcf0      	bgt.n	800678a <_printf_float+0x412>
 80067a8:	e6f7      	b.n	800659a <_printf_float+0x222>
 80067aa:	f04f 0800 	mov.w	r8, #0
 80067ae:	f104 0919 	add.w	r9, r4, #25
 80067b2:	e7f4      	b.n	800679e <_printf_float+0x426>

080067b4 <_printf_common>:
 80067b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067b8:	4616      	mov	r6, r2
 80067ba:	4699      	mov	r9, r3
 80067bc:	688a      	ldr	r2, [r1, #8]
 80067be:	690b      	ldr	r3, [r1, #16]
 80067c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067c4:	4293      	cmp	r3, r2
 80067c6:	bfb8      	it	lt
 80067c8:	4613      	movlt	r3, r2
 80067ca:	6033      	str	r3, [r6, #0]
 80067cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067d0:	4607      	mov	r7, r0
 80067d2:	460c      	mov	r4, r1
 80067d4:	b10a      	cbz	r2, 80067da <_printf_common+0x26>
 80067d6:	3301      	adds	r3, #1
 80067d8:	6033      	str	r3, [r6, #0]
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	0699      	lsls	r1, r3, #26
 80067de:	bf42      	ittt	mi
 80067e0:	6833      	ldrmi	r3, [r6, #0]
 80067e2:	3302      	addmi	r3, #2
 80067e4:	6033      	strmi	r3, [r6, #0]
 80067e6:	6825      	ldr	r5, [r4, #0]
 80067e8:	f015 0506 	ands.w	r5, r5, #6
 80067ec:	d106      	bne.n	80067fc <_printf_common+0x48>
 80067ee:	f104 0a19 	add.w	sl, r4, #25
 80067f2:	68e3      	ldr	r3, [r4, #12]
 80067f4:	6832      	ldr	r2, [r6, #0]
 80067f6:	1a9b      	subs	r3, r3, r2
 80067f8:	42ab      	cmp	r3, r5
 80067fa:	dc26      	bgt.n	800684a <_printf_common+0x96>
 80067fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006800:	1e13      	subs	r3, r2, #0
 8006802:	6822      	ldr	r2, [r4, #0]
 8006804:	bf18      	it	ne
 8006806:	2301      	movne	r3, #1
 8006808:	0692      	lsls	r2, r2, #26
 800680a:	d42b      	bmi.n	8006864 <_printf_common+0xb0>
 800680c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006810:	4649      	mov	r1, r9
 8006812:	4638      	mov	r0, r7
 8006814:	47c0      	blx	r8
 8006816:	3001      	adds	r0, #1
 8006818:	d01e      	beq.n	8006858 <_printf_common+0xa4>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	68e5      	ldr	r5, [r4, #12]
 800681e:	6832      	ldr	r2, [r6, #0]
 8006820:	f003 0306 	and.w	r3, r3, #6
 8006824:	2b04      	cmp	r3, #4
 8006826:	bf08      	it	eq
 8006828:	1aad      	subeq	r5, r5, r2
 800682a:	68a3      	ldr	r3, [r4, #8]
 800682c:	6922      	ldr	r2, [r4, #16]
 800682e:	bf0c      	ite	eq
 8006830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006834:	2500      	movne	r5, #0
 8006836:	4293      	cmp	r3, r2
 8006838:	bfc4      	itt	gt
 800683a:	1a9b      	subgt	r3, r3, r2
 800683c:	18ed      	addgt	r5, r5, r3
 800683e:	2600      	movs	r6, #0
 8006840:	341a      	adds	r4, #26
 8006842:	42b5      	cmp	r5, r6
 8006844:	d11a      	bne.n	800687c <_printf_common+0xc8>
 8006846:	2000      	movs	r0, #0
 8006848:	e008      	b.n	800685c <_printf_common+0xa8>
 800684a:	2301      	movs	r3, #1
 800684c:	4652      	mov	r2, sl
 800684e:	4649      	mov	r1, r9
 8006850:	4638      	mov	r0, r7
 8006852:	47c0      	blx	r8
 8006854:	3001      	adds	r0, #1
 8006856:	d103      	bne.n	8006860 <_printf_common+0xac>
 8006858:	f04f 30ff 	mov.w	r0, #4294967295
 800685c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006860:	3501      	adds	r5, #1
 8006862:	e7c6      	b.n	80067f2 <_printf_common+0x3e>
 8006864:	18e1      	adds	r1, r4, r3
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	2030      	movs	r0, #48	; 0x30
 800686a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800686e:	4422      	add	r2, r4
 8006870:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006874:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006878:	3302      	adds	r3, #2
 800687a:	e7c7      	b.n	800680c <_printf_common+0x58>
 800687c:	2301      	movs	r3, #1
 800687e:	4622      	mov	r2, r4
 8006880:	4649      	mov	r1, r9
 8006882:	4638      	mov	r0, r7
 8006884:	47c0      	blx	r8
 8006886:	3001      	adds	r0, #1
 8006888:	d0e6      	beq.n	8006858 <_printf_common+0xa4>
 800688a:	3601      	adds	r6, #1
 800688c:	e7d9      	b.n	8006842 <_printf_common+0x8e>
	...

08006890 <_printf_i>:
 8006890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006894:	7e0f      	ldrb	r7, [r1, #24]
 8006896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006898:	2f78      	cmp	r7, #120	; 0x78
 800689a:	4691      	mov	r9, r2
 800689c:	4680      	mov	r8, r0
 800689e:	460c      	mov	r4, r1
 80068a0:	469a      	mov	sl, r3
 80068a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068a6:	d807      	bhi.n	80068b8 <_printf_i+0x28>
 80068a8:	2f62      	cmp	r7, #98	; 0x62
 80068aa:	d80a      	bhi.n	80068c2 <_printf_i+0x32>
 80068ac:	2f00      	cmp	r7, #0
 80068ae:	f000 80d8 	beq.w	8006a62 <_printf_i+0x1d2>
 80068b2:	2f58      	cmp	r7, #88	; 0x58
 80068b4:	f000 80a3 	beq.w	80069fe <_printf_i+0x16e>
 80068b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068c0:	e03a      	b.n	8006938 <_printf_i+0xa8>
 80068c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068c6:	2b15      	cmp	r3, #21
 80068c8:	d8f6      	bhi.n	80068b8 <_printf_i+0x28>
 80068ca:	a101      	add	r1, pc, #4	; (adr r1, 80068d0 <_printf_i+0x40>)
 80068cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068d0:	08006929 	.word	0x08006929
 80068d4:	0800693d 	.word	0x0800693d
 80068d8:	080068b9 	.word	0x080068b9
 80068dc:	080068b9 	.word	0x080068b9
 80068e0:	080068b9 	.word	0x080068b9
 80068e4:	080068b9 	.word	0x080068b9
 80068e8:	0800693d 	.word	0x0800693d
 80068ec:	080068b9 	.word	0x080068b9
 80068f0:	080068b9 	.word	0x080068b9
 80068f4:	080068b9 	.word	0x080068b9
 80068f8:	080068b9 	.word	0x080068b9
 80068fc:	08006a49 	.word	0x08006a49
 8006900:	0800696d 	.word	0x0800696d
 8006904:	08006a2b 	.word	0x08006a2b
 8006908:	080068b9 	.word	0x080068b9
 800690c:	080068b9 	.word	0x080068b9
 8006910:	08006a6b 	.word	0x08006a6b
 8006914:	080068b9 	.word	0x080068b9
 8006918:	0800696d 	.word	0x0800696d
 800691c:	080068b9 	.word	0x080068b9
 8006920:	080068b9 	.word	0x080068b9
 8006924:	08006a33 	.word	0x08006a33
 8006928:	682b      	ldr	r3, [r5, #0]
 800692a:	1d1a      	adds	r2, r3, #4
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	602a      	str	r2, [r5, #0]
 8006930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006938:	2301      	movs	r3, #1
 800693a:	e0a3      	b.n	8006a84 <_printf_i+0x1f4>
 800693c:	6820      	ldr	r0, [r4, #0]
 800693e:	6829      	ldr	r1, [r5, #0]
 8006940:	0606      	lsls	r6, r0, #24
 8006942:	f101 0304 	add.w	r3, r1, #4
 8006946:	d50a      	bpl.n	800695e <_printf_i+0xce>
 8006948:	680e      	ldr	r6, [r1, #0]
 800694a:	602b      	str	r3, [r5, #0]
 800694c:	2e00      	cmp	r6, #0
 800694e:	da03      	bge.n	8006958 <_printf_i+0xc8>
 8006950:	232d      	movs	r3, #45	; 0x2d
 8006952:	4276      	negs	r6, r6
 8006954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006958:	485e      	ldr	r0, [pc, #376]	; (8006ad4 <_printf_i+0x244>)
 800695a:	230a      	movs	r3, #10
 800695c:	e019      	b.n	8006992 <_printf_i+0x102>
 800695e:	680e      	ldr	r6, [r1, #0]
 8006960:	602b      	str	r3, [r5, #0]
 8006962:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006966:	bf18      	it	ne
 8006968:	b236      	sxthne	r6, r6
 800696a:	e7ef      	b.n	800694c <_printf_i+0xbc>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	6820      	ldr	r0, [r4, #0]
 8006970:	1d19      	adds	r1, r3, #4
 8006972:	6029      	str	r1, [r5, #0]
 8006974:	0601      	lsls	r1, r0, #24
 8006976:	d501      	bpl.n	800697c <_printf_i+0xec>
 8006978:	681e      	ldr	r6, [r3, #0]
 800697a:	e002      	b.n	8006982 <_printf_i+0xf2>
 800697c:	0646      	lsls	r6, r0, #25
 800697e:	d5fb      	bpl.n	8006978 <_printf_i+0xe8>
 8006980:	881e      	ldrh	r6, [r3, #0]
 8006982:	4854      	ldr	r0, [pc, #336]	; (8006ad4 <_printf_i+0x244>)
 8006984:	2f6f      	cmp	r7, #111	; 0x6f
 8006986:	bf0c      	ite	eq
 8006988:	2308      	moveq	r3, #8
 800698a:	230a      	movne	r3, #10
 800698c:	2100      	movs	r1, #0
 800698e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006992:	6865      	ldr	r5, [r4, #4]
 8006994:	60a5      	str	r5, [r4, #8]
 8006996:	2d00      	cmp	r5, #0
 8006998:	bfa2      	ittt	ge
 800699a:	6821      	ldrge	r1, [r4, #0]
 800699c:	f021 0104 	bicge.w	r1, r1, #4
 80069a0:	6021      	strge	r1, [r4, #0]
 80069a2:	b90e      	cbnz	r6, 80069a8 <_printf_i+0x118>
 80069a4:	2d00      	cmp	r5, #0
 80069a6:	d04d      	beq.n	8006a44 <_printf_i+0x1b4>
 80069a8:	4615      	mov	r5, r2
 80069aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80069ae:	fb03 6711 	mls	r7, r3, r1, r6
 80069b2:	5dc7      	ldrb	r7, [r0, r7]
 80069b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069b8:	4637      	mov	r7, r6
 80069ba:	42bb      	cmp	r3, r7
 80069bc:	460e      	mov	r6, r1
 80069be:	d9f4      	bls.n	80069aa <_printf_i+0x11a>
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d10b      	bne.n	80069dc <_printf_i+0x14c>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	07de      	lsls	r6, r3, #31
 80069c8:	d508      	bpl.n	80069dc <_printf_i+0x14c>
 80069ca:	6923      	ldr	r3, [r4, #16]
 80069cc:	6861      	ldr	r1, [r4, #4]
 80069ce:	4299      	cmp	r1, r3
 80069d0:	bfde      	ittt	le
 80069d2:	2330      	movle	r3, #48	; 0x30
 80069d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80069dc:	1b52      	subs	r2, r2, r5
 80069de:	6122      	str	r2, [r4, #16]
 80069e0:	f8cd a000 	str.w	sl, [sp]
 80069e4:	464b      	mov	r3, r9
 80069e6:	aa03      	add	r2, sp, #12
 80069e8:	4621      	mov	r1, r4
 80069ea:	4640      	mov	r0, r8
 80069ec:	f7ff fee2 	bl	80067b4 <_printf_common>
 80069f0:	3001      	adds	r0, #1
 80069f2:	d14c      	bne.n	8006a8e <_printf_i+0x1fe>
 80069f4:	f04f 30ff 	mov.w	r0, #4294967295
 80069f8:	b004      	add	sp, #16
 80069fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069fe:	4835      	ldr	r0, [pc, #212]	; (8006ad4 <_printf_i+0x244>)
 8006a00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a04:	6829      	ldr	r1, [r5, #0]
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a0c:	6029      	str	r1, [r5, #0]
 8006a0e:	061d      	lsls	r5, r3, #24
 8006a10:	d514      	bpl.n	8006a3c <_printf_i+0x1ac>
 8006a12:	07df      	lsls	r7, r3, #31
 8006a14:	bf44      	itt	mi
 8006a16:	f043 0320 	orrmi.w	r3, r3, #32
 8006a1a:	6023      	strmi	r3, [r4, #0]
 8006a1c:	b91e      	cbnz	r6, 8006a26 <_printf_i+0x196>
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	f023 0320 	bic.w	r3, r3, #32
 8006a24:	6023      	str	r3, [r4, #0]
 8006a26:	2310      	movs	r3, #16
 8006a28:	e7b0      	b.n	800698c <_printf_i+0xfc>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	f043 0320 	orr.w	r3, r3, #32
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	2378      	movs	r3, #120	; 0x78
 8006a34:	4828      	ldr	r0, [pc, #160]	; (8006ad8 <_printf_i+0x248>)
 8006a36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a3a:	e7e3      	b.n	8006a04 <_printf_i+0x174>
 8006a3c:	0659      	lsls	r1, r3, #25
 8006a3e:	bf48      	it	mi
 8006a40:	b2b6      	uxthmi	r6, r6
 8006a42:	e7e6      	b.n	8006a12 <_printf_i+0x182>
 8006a44:	4615      	mov	r5, r2
 8006a46:	e7bb      	b.n	80069c0 <_printf_i+0x130>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	6826      	ldr	r6, [r4, #0]
 8006a4c:	6961      	ldr	r1, [r4, #20]
 8006a4e:	1d18      	adds	r0, r3, #4
 8006a50:	6028      	str	r0, [r5, #0]
 8006a52:	0635      	lsls	r5, r6, #24
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	d501      	bpl.n	8006a5c <_printf_i+0x1cc>
 8006a58:	6019      	str	r1, [r3, #0]
 8006a5a:	e002      	b.n	8006a62 <_printf_i+0x1d2>
 8006a5c:	0670      	lsls	r0, r6, #25
 8006a5e:	d5fb      	bpl.n	8006a58 <_printf_i+0x1c8>
 8006a60:	8019      	strh	r1, [r3, #0]
 8006a62:	2300      	movs	r3, #0
 8006a64:	6123      	str	r3, [r4, #16]
 8006a66:	4615      	mov	r5, r2
 8006a68:	e7ba      	b.n	80069e0 <_printf_i+0x150>
 8006a6a:	682b      	ldr	r3, [r5, #0]
 8006a6c:	1d1a      	adds	r2, r3, #4
 8006a6e:	602a      	str	r2, [r5, #0]
 8006a70:	681d      	ldr	r5, [r3, #0]
 8006a72:	6862      	ldr	r2, [r4, #4]
 8006a74:	2100      	movs	r1, #0
 8006a76:	4628      	mov	r0, r5
 8006a78:	f7f9 fc3a 	bl	80002f0 <memchr>
 8006a7c:	b108      	cbz	r0, 8006a82 <_printf_i+0x1f2>
 8006a7e:	1b40      	subs	r0, r0, r5
 8006a80:	6060      	str	r0, [r4, #4]
 8006a82:	6863      	ldr	r3, [r4, #4]
 8006a84:	6123      	str	r3, [r4, #16]
 8006a86:	2300      	movs	r3, #0
 8006a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a8c:	e7a8      	b.n	80069e0 <_printf_i+0x150>
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	462a      	mov	r2, r5
 8006a92:	4649      	mov	r1, r9
 8006a94:	4640      	mov	r0, r8
 8006a96:	47d0      	blx	sl
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d0ab      	beq.n	80069f4 <_printf_i+0x164>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	079b      	lsls	r3, r3, #30
 8006aa0:	d413      	bmi.n	8006aca <_printf_i+0x23a>
 8006aa2:	68e0      	ldr	r0, [r4, #12]
 8006aa4:	9b03      	ldr	r3, [sp, #12]
 8006aa6:	4298      	cmp	r0, r3
 8006aa8:	bfb8      	it	lt
 8006aaa:	4618      	movlt	r0, r3
 8006aac:	e7a4      	b.n	80069f8 <_printf_i+0x168>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4632      	mov	r2, r6
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	4640      	mov	r0, r8
 8006ab6:	47d0      	blx	sl
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d09b      	beq.n	80069f4 <_printf_i+0x164>
 8006abc:	3501      	adds	r5, #1
 8006abe:	68e3      	ldr	r3, [r4, #12]
 8006ac0:	9903      	ldr	r1, [sp, #12]
 8006ac2:	1a5b      	subs	r3, r3, r1
 8006ac4:	42ab      	cmp	r3, r5
 8006ac6:	dcf2      	bgt.n	8006aae <_printf_i+0x21e>
 8006ac8:	e7eb      	b.n	8006aa2 <_printf_i+0x212>
 8006aca:	2500      	movs	r5, #0
 8006acc:	f104 0619 	add.w	r6, r4, #25
 8006ad0:	e7f5      	b.n	8006abe <_printf_i+0x22e>
 8006ad2:	bf00      	nop
 8006ad4:	08008d02 	.word	0x08008d02
 8006ad8:	08008d13 	.word	0x08008d13

08006adc <iprintf>:
 8006adc:	b40f      	push	{r0, r1, r2, r3}
 8006ade:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <iprintf+0x2c>)
 8006ae0:	b513      	push	{r0, r1, r4, lr}
 8006ae2:	681c      	ldr	r4, [r3, #0]
 8006ae4:	b124      	cbz	r4, 8006af0 <iprintf+0x14>
 8006ae6:	69a3      	ldr	r3, [r4, #24]
 8006ae8:	b913      	cbnz	r3, 8006af0 <iprintf+0x14>
 8006aea:	4620      	mov	r0, r4
 8006aec:	f001 f858 	bl	8007ba0 <__sinit>
 8006af0:	ab05      	add	r3, sp, #20
 8006af2:	9a04      	ldr	r2, [sp, #16]
 8006af4:	68a1      	ldr	r1, [r4, #8]
 8006af6:	9301      	str	r3, [sp, #4]
 8006af8:	4620      	mov	r0, r4
 8006afa:	f001 fe15 	bl	8008728 <_vfiprintf_r>
 8006afe:	b002      	add	sp, #8
 8006b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b04:	b004      	add	sp, #16
 8006b06:	4770      	bx	lr
 8006b08:	24000010 	.word	0x24000010

08006b0c <_puts_r>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	460e      	mov	r6, r1
 8006b10:	4605      	mov	r5, r0
 8006b12:	b118      	cbz	r0, 8006b1c <_puts_r+0x10>
 8006b14:	6983      	ldr	r3, [r0, #24]
 8006b16:	b90b      	cbnz	r3, 8006b1c <_puts_r+0x10>
 8006b18:	f001 f842 	bl	8007ba0 <__sinit>
 8006b1c:	69ab      	ldr	r3, [r5, #24]
 8006b1e:	68ac      	ldr	r4, [r5, #8]
 8006b20:	b913      	cbnz	r3, 8006b28 <_puts_r+0x1c>
 8006b22:	4628      	mov	r0, r5
 8006b24:	f001 f83c 	bl	8007ba0 <__sinit>
 8006b28:	4b2c      	ldr	r3, [pc, #176]	; (8006bdc <_puts_r+0xd0>)
 8006b2a:	429c      	cmp	r4, r3
 8006b2c:	d120      	bne.n	8006b70 <_puts_r+0x64>
 8006b2e:	686c      	ldr	r4, [r5, #4]
 8006b30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b32:	07db      	lsls	r3, r3, #31
 8006b34:	d405      	bmi.n	8006b42 <_puts_r+0x36>
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	0598      	lsls	r0, r3, #22
 8006b3a:	d402      	bmi.n	8006b42 <_puts_r+0x36>
 8006b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b3e:	f001 f8d2 	bl	8007ce6 <__retarget_lock_acquire_recursive>
 8006b42:	89a3      	ldrh	r3, [r4, #12]
 8006b44:	0719      	lsls	r1, r3, #28
 8006b46:	d51d      	bpl.n	8006b84 <_puts_r+0x78>
 8006b48:	6923      	ldr	r3, [r4, #16]
 8006b4a:	b1db      	cbz	r3, 8006b84 <_puts_r+0x78>
 8006b4c:	3e01      	subs	r6, #1
 8006b4e:	68a3      	ldr	r3, [r4, #8]
 8006b50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b54:	3b01      	subs	r3, #1
 8006b56:	60a3      	str	r3, [r4, #8]
 8006b58:	bb39      	cbnz	r1, 8006baa <_puts_r+0x9e>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	da38      	bge.n	8006bd0 <_puts_r+0xc4>
 8006b5e:	4622      	mov	r2, r4
 8006b60:	210a      	movs	r1, #10
 8006b62:	4628      	mov	r0, r5
 8006b64:	f000 f848 	bl	8006bf8 <__swbuf_r>
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d011      	beq.n	8006b90 <_puts_r+0x84>
 8006b6c:	250a      	movs	r5, #10
 8006b6e:	e011      	b.n	8006b94 <_puts_r+0x88>
 8006b70:	4b1b      	ldr	r3, [pc, #108]	; (8006be0 <_puts_r+0xd4>)
 8006b72:	429c      	cmp	r4, r3
 8006b74:	d101      	bne.n	8006b7a <_puts_r+0x6e>
 8006b76:	68ac      	ldr	r4, [r5, #8]
 8006b78:	e7da      	b.n	8006b30 <_puts_r+0x24>
 8006b7a:	4b1a      	ldr	r3, [pc, #104]	; (8006be4 <_puts_r+0xd8>)
 8006b7c:	429c      	cmp	r4, r3
 8006b7e:	bf08      	it	eq
 8006b80:	68ec      	ldreq	r4, [r5, #12]
 8006b82:	e7d5      	b.n	8006b30 <_puts_r+0x24>
 8006b84:	4621      	mov	r1, r4
 8006b86:	4628      	mov	r0, r5
 8006b88:	f000 f888 	bl	8006c9c <__swsetup_r>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d0dd      	beq.n	8006b4c <_puts_r+0x40>
 8006b90:	f04f 35ff 	mov.w	r5, #4294967295
 8006b94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b96:	07da      	lsls	r2, r3, #31
 8006b98:	d405      	bmi.n	8006ba6 <_puts_r+0x9a>
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	059b      	lsls	r3, r3, #22
 8006b9e:	d402      	bmi.n	8006ba6 <_puts_r+0x9a>
 8006ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ba2:	f001 f8a1 	bl	8007ce8 <__retarget_lock_release_recursive>
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	bd70      	pop	{r4, r5, r6, pc}
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	da04      	bge.n	8006bb8 <_puts_r+0xac>
 8006bae:	69a2      	ldr	r2, [r4, #24]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	dc06      	bgt.n	8006bc2 <_puts_r+0xb6>
 8006bb4:	290a      	cmp	r1, #10
 8006bb6:	d004      	beq.n	8006bc2 <_puts_r+0xb6>
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	6022      	str	r2, [r4, #0]
 8006bbe:	7019      	strb	r1, [r3, #0]
 8006bc0:	e7c5      	b.n	8006b4e <_puts_r+0x42>
 8006bc2:	4622      	mov	r2, r4
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	f000 f817 	bl	8006bf8 <__swbuf_r>
 8006bca:	3001      	adds	r0, #1
 8006bcc:	d1bf      	bne.n	8006b4e <_puts_r+0x42>
 8006bce:	e7df      	b.n	8006b90 <_puts_r+0x84>
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	250a      	movs	r5, #10
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	6022      	str	r2, [r4, #0]
 8006bd8:	701d      	strb	r5, [r3, #0]
 8006bda:	e7db      	b.n	8006b94 <_puts_r+0x88>
 8006bdc:	08008dd4 	.word	0x08008dd4
 8006be0:	08008df4 	.word	0x08008df4
 8006be4:	08008db4 	.word	0x08008db4

08006be8 <puts>:
 8006be8:	4b02      	ldr	r3, [pc, #8]	; (8006bf4 <puts+0xc>)
 8006bea:	4601      	mov	r1, r0
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	f7ff bf8d 	b.w	8006b0c <_puts_r>
 8006bf2:	bf00      	nop
 8006bf4:	24000010 	.word	0x24000010

08006bf8 <__swbuf_r>:
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	460e      	mov	r6, r1
 8006bfc:	4614      	mov	r4, r2
 8006bfe:	4605      	mov	r5, r0
 8006c00:	b118      	cbz	r0, 8006c0a <__swbuf_r+0x12>
 8006c02:	6983      	ldr	r3, [r0, #24]
 8006c04:	b90b      	cbnz	r3, 8006c0a <__swbuf_r+0x12>
 8006c06:	f000 ffcb 	bl	8007ba0 <__sinit>
 8006c0a:	4b21      	ldr	r3, [pc, #132]	; (8006c90 <__swbuf_r+0x98>)
 8006c0c:	429c      	cmp	r4, r3
 8006c0e:	d12b      	bne.n	8006c68 <__swbuf_r+0x70>
 8006c10:	686c      	ldr	r4, [r5, #4]
 8006c12:	69a3      	ldr	r3, [r4, #24]
 8006c14:	60a3      	str	r3, [r4, #8]
 8006c16:	89a3      	ldrh	r3, [r4, #12]
 8006c18:	071a      	lsls	r2, r3, #28
 8006c1a:	d52f      	bpl.n	8006c7c <__swbuf_r+0x84>
 8006c1c:	6923      	ldr	r3, [r4, #16]
 8006c1e:	b36b      	cbz	r3, 8006c7c <__swbuf_r+0x84>
 8006c20:	6923      	ldr	r3, [r4, #16]
 8006c22:	6820      	ldr	r0, [r4, #0]
 8006c24:	1ac0      	subs	r0, r0, r3
 8006c26:	6963      	ldr	r3, [r4, #20]
 8006c28:	b2f6      	uxtb	r6, r6
 8006c2a:	4283      	cmp	r3, r0
 8006c2c:	4637      	mov	r7, r6
 8006c2e:	dc04      	bgt.n	8006c3a <__swbuf_r+0x42>
 8006c30:	4621      	mov	r1, r4
 8006c32:	4628      	mov	r0, r5
 8006c34:	f000 ff20 	bl	8007a78 <_fflush_r>
 8006c38:	bb30      	cbnz	r0, 8006c88 <__swbuf_r+0x90>
 8006c3a:	68a3      	ldr	r3, [r4, #8]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	60a3      	str	r3, [r4, #8]
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	6022      	str	r2, [r4, #0]
 8006c46:	701e      	strb	r6, [r3, #0]
 8006c48:	6963      	ldr	r3, [r4, #20]
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	4283      	cmp	r3, r0
 8006c4e:	d004      	beq.n	8006c5a <__swbuf_r+0x62>
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	07db      	lsls	r3, r3, #31
 8006c54:	d506      	bpl.n	8006c64 <__swbuf_r+0x6c>
 8006c56:	2e0a      	cmp	r6, #10
 8006c58:	d104      	bne.n	8006c64 <__swbuf_r+0x6c>
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	f000 ff0b 	bl	8007a78 <_fflush_r>
 8006c62:	b988      	cbnz	r0, 8006c88 <__swbuf_r+0x90>
 8006c64:	4638      	mov	r0, r7
 8006c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c68:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <__swbuf_r+0x9c>)
 8006c6a:	429c      	cmp	r4, r3
 8006c6c:	d101      	bne.n	8006c72 <__swbuf_r+0x7a>
 8006c6e:	68ac      	ldr	r4, [r5, #8]
 8006c70:	e7cf      	b.n	8006c12 <__swbuf_r+0x1a>
 8006c72:	4b09      	ldr	r3, [pc, #36]	; (8006c98 <__swbuf_r+0xa0>)
 8006c74:	429c      	cmp	r4, r3
 8006c76:	bf08      	it	eq
 8006c78:	68ec      	ldreq	r4, [r5, #12]
 8006c7a:	e7ca      	b.n	8006c12 <__swbuf_r+0x1a>
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	4628      	mov	r0, r5
 8006c80:	f000 f80c 	bl	8006c9c <__swsetup_r>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d0cb      	beq.n	8006c20 <__swbuf_r+0x28>
 8006c88:	f04f 37ff 	mov.w	r7, #4294967295
 8006c8c:	e7ea      	b.n	8006c64 <__swbuf_r+0x6c>
 8006c8e:	bf00      	nop
 8006c90:	08008dd4 	.word	0x08008dd4
 8006c94:	08008df4 	.word	0x08008df4
 8006c98:	08008db4 	.word	0x08008db4

08006c9c <__swsetup_r>:
 8006c9c:	4b32      	ldr	r3, [pc, #200]	; (8006d68 <__swsetup_r+0xcc>)
 8006c9e:	b570      	push	{r4, r5, r6, lr}
 8006ca0:	681d      	ldr	r5, [r3, #0]
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	b125      	cbz	r5, 8006cb2 <__swsetup_r+0x16>
 8006ca8:	69ab      	ldr	r3, [r5, #24]
 8006caa:	b913      	cbnz	r3, 8006cb2 <__swsetup_r+0x16>
 8006cac:	4628      	mov	r0, r5
 8006cae:	f000 ff77 	bl	8007ba0 <__sinit>
 8006cb2:	4b2e      	ldr	r3, [pc, #184]	; (8006d6c <__swsetup_r+0xd0>)
 8006cb4:	429c      	cmp	r4, r3
 8006cb6:	d10f      	bne.n	8006cd8 <__swsetup_r+0x3c>
 8006cb8:	686c      	ldr	r4, [r5, #4]
 8006cba:	89a3      	ldrh	r3, [r4, #12]
 8006cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cc0:	0719      	lsls	r1, r3, #28
 8006cc2:	d42c      	bmi.n	8006d1e <__swsetup_r+0x82>
 8006cc4:	06dd      	lsls	r5, r3, #27
 8006cc6:	d411      	bmi.n	8006cec <__swsetup_r+0x50>
 8006cc8:	2309      	movs	r3, #9
 8006cca:	6033      	str	r3, [r6, #0]
 8006ccc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cd0:	81a3      	strh	r3, [r4, #12]
 8006cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd6:	e03e      	b.n	8006d56 <__swsetup_r+0xba>
 8006cd8:	4b25      	ldr	r3, [pc, #148]	; (8006d70 <__swsetup_r+0xd4>)
 8006cda:	429c      	cmp	r4, r3
 8006cdc:	d101      	bne.n	8006ce2 <__swsetup_r+0x46>
 8006cde:	68ac      	ldr	r4, [r5, #8]
 8006ce0:	e7eb      	b.n	8006cba <__swsetup_r+0x1e>
 8006ce2:	4b24      	ldr	r3, [pc, #144]	; (8006d74 <__swsetup_r+0xd8>)
 8006ce4:	429c      	cmp	r4, r3
 8006ce6:	bf08      	it	eq
 8006ce8:	68ec      	ldreq	r4, [r5, #12]
 8006cea:	e7e6      	b.n	8006cba <__swsetup_r+0x1e>
 8006cec:	0758      	lsls	r0, r3, #29
 8006cee:	d512      	bpl.n	8006d16 <__swsetup_r+0x7a>
 8006cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cf2:	b141      	cbz	r1, 8006d06 <__swsetup_r+0x6a>
 8006cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cf8:	4299      	cmp	r1, r3
 8006cfa:	d002      	beq.n	8006d02 <__swsetup_r+0x66>
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f001 fc09 	bl	8008514 <_free_r>
 8006d02:	2300      	movs	r3, #0
 8006d04:	6363      	str	r3, [r4, #52]	; 0x34
 8006d06:	89a3      	ldrh	r3, [r4, #12]
 8006d08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d0c:	81a3      	strh	r3, [r4, #12]
 8006d0e:	2300      	movs	r3, #0
 8006d10:	6063      	str	r3, [r4, #4]
 8006d12:	6923      	ldr	r3, [r4, #16]
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	89a3      	ldrh	r3, [r4, #12]
 8006d18:	f043 0308 	orr.w	r3, r3, #8
 8006d1c:	81a3      	strh	r3, [r4, #12]
 8006d1e:	6923      	ldr	r3, [r4, #16]
 8006d20:	b94b      	cbnz	r3, 8006d36 <__swsetup_r+0x9a>
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d2c:	d003      	beq.n	8006d36 <__swsetup_r+0x9a>
 8006d2e:	4621      	mov	r1, r4
 8006d30:	4630      	mov	r0, r6
 8006d32:	f000 ffff 	bl	8007d34 <__smakebuf_r>
 8006d36:	89a0      	ldrh	r0, [r4, #12]
 8006d38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d3c:	f010 0301 	ands.w	r3, r0, #1
 8006d40:	d00a      	beq.n	8006d58 <__swsetup_r+0xbc>
 8006d42:	2300      	movs	r3, #0
 8006d44:	60a3      	str	r3, [r4, #8]
 8006d46:	6963      	ldr	r3, [r4, #20]
 8006d48:	425b      	negs	r3, r3
 8006d4a:	61a3      	str	r3, [r4, #24]
 8006d4c:	6923      	ldr	r3, [r4, #16]
 8006d4e:	b943      	cbnz	r3, 8006d62 <__swsetup_r+0xc6>
 8006d50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d54:	d1ba      	bne.n	8006ccc <__swsetup_r+0x30>
 8006d56:	bd70      	pop	{r4, r5, r6, pc}
 8006d58:	0781      	lsls	r1, r0, #30
 8006d5a:	bf58      	it	pl
 8006d5c:	6963      	ldrpl	r3, [r4, #20]
 8006d5e:	60a3      	str	r3, [r4, #8]
 8006d60:	e7f4      	b.n	8006d4c <__swsetup_r+0xb0>
 8006d62:	2000      	movs	r0, #0
 8006d64:	e7f7      	b.n	8006d56 <__swsetup_r+0xba>
 8006d66:	bf00      	nop
 8006d68:	24000010 	.word	0x24000010
 8006d6c:	08008dd4 	.word	0x08008dd4
 8006d70:	08008df4 	.word	0x08008df4
 8006d74:	08008db4 	.word	0x08008db4

08006d78 <quorem>:
 8006d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	6903      	ldr	r3, [r0, #16]
 8006d7e:	690c      	ldr	r4, [r1, #16]
 8006d80:	42a3      	cmp	r3, r4
 8006d82:	4607      	mov	r7, r0
 8006d84:	f2c0 8081 	blt.w	8006e8a <quorem+0x112>
 8006d88:	3c01      	subs	r4, #1
 8006d8a:	f101 0814 	add.w	r8, r1, #20
 8006d8e:	f100 0514 	add.w	r5, r0, #20
 8006d92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d96:	9301      	str	r3, [sp, #4]
 8006d98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006da0:	3301      	adds	r3, #1
 8006da2:	429a      	cmp	r2, r3
 8006da4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006da8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006dac:	fbb2 f6f3 	udiv	r6, r2, r3
 8006db0:	d331      	bcc.n	8006e16 <quorem+0x9e>
 8006db2:	f04f 0e00 	mov.w	lr, #0
 8006db6:	4640      	mov	r0, r8
 8006db8:	46ac      	mov	ip, r5
 8006dba:	46f2      	mov	sl, lr
 8006dbc:	f850 2b04 	ldr.w	r2, [r0], #4
 8006dc0:	b293      	uxth	r3, r2
 8006dc2:	fb06 e303 	mla	r3, r6, r3, lr
 8006dc6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	ebaa 0303 	sub.w	r3, sl, r3
 8006dd0:	f8dc a000 	ldr.w	sl, [ip]
 8006dd4:	0c12      	lsrs	r2, r2, #16
 8006dd6:	fa13 f38a 	uxtah	r3, r3, sl
 8006dda:	fb06 e202 	mla	r2, r6, r2, lr
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	9b00      	ldr	r3, [sp, #0]
 8006de2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006de6:	b292      	uxth	r2, r2
 8006de8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006dec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006df0:	f8bd 3000 	ldrh.w	r3, [sp]
 8006df4:	4581      	cmp	r9, r0
 8006df6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dfa:	f84c 3b04 	str.w	r3, [ip], #4
 8006dfe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006e02:	d2db      	bcs.n	8006dbc <quorem+0x44>
 8006e04:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e08:	b92b      	cbnz	r3, 8006e16 <quorem+0x9e>
 8006e0a:	9b01      	ldr	r3, [sp, #4]
 8006e0c:	3b04      	subs	r3, #4
 8006e0e:	429d      	cmp	r5, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	d32e      	bcc.n	8006e72 <quorem+0xfa>
 8006e14:	613c      	str	r4, [r7, #16]
 8006e16:	4638      	mov	r0, r7
 8006e18:	f001 fa64 	bl	80082e4 <__mcmp>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	db24      	blt.n	8006e6a <quorem+0xf2>
 8006e20:	3601      	adds	r6, #1
 8006e22:	4628      	mov	r0, r5
 8006e24:	f04f 0c00 	mov.w	ip, #0
 8006e28:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e2c:	f8d0 e000 	ldr.w	lr, [r0]
 8006e30:	b293      	uxth	r3, r2
 8006e32:	ebac 0303 	sub.w	r3, ip, r3
 8006e36:	0c12      	lsrs	r2, r2, #16
 8006e38:	fa13 f38e 	uxtah	r3, r3, lr
 8006e3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e4a:	45c1      	cmp	r9, r8
 8006e4c:	f840 3b04 	str.w	r3, [r0], #4
 8006e50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e54:	d2e8      	bcs.n	8006e28 <quorem+0xb0>
 8006e56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e5e:	b922      	cbnz	r2, 8006e6a <quorem+0xf2>
 8006e60:	3b04      	subs	r3, #4
 8006e62:	429d      	cmp	r5, r3
 8006e64:	461a      	mov	r2, r3
 8006e66:	d30a      	bcc.n	8006e7e <quorem+0x106>
 8006e68:	613c      	str	r4, [r7, #16]
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	b003      	add	sp, #12
 8006e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e72:	6812      	ldr	r2, [r2, #0]
 8006e74:	3b04      	subs	r3, #4
 8006e76:	2a00      	cmp	r2, #0
 8006e78:	d1cc      	bne.n	8006e14 <quorem+0x9c>
 8006e7a:	3c01      	subs	r4, #1
 8006e7c:	e7c7      	b.n	8006e0e <quorem+0x96>
 8006e7e:	6812      	ldr	r2, [r2, #0]
 8006e80:	3b04      	subs	r3, #4
 8006e82:	2a00      	cmp	r2, #0
 8006e84:	d1f0      	bne.n	8006e68 <quorem+0xf0>
 8006e86:	3c01      	subs	r4, #1
 8006e88:	e7eb      	b.n	8006e62 <quorem+0xea>
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	e7ee      	b.n	8006e6c <quorem+0xf4>
	...

08006e90 <_dtoa_r>:
 8006e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e94:	ed2d 8b02 	vpush	{d8}
 8006e98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e9a:	b091      	sub	sp, #68	; 0x44
 8006e9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006ea0:	ec59 8b10 	vmov	r8, r9, d0
 8006ea4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8006ea6:	9106      	str	r1, [sp, #24]
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	9208      	str	r2, [sp, #32]
 8006eac:	930c      	str	r3, [sp, #48]	; 0x30
 8006eae:	b975      	cbnz	r5, 8006ece <_dtoa_r+0x3e>
 8006eb0:	2010      	movs	r0, #16
 8006eb2:	f000 ff7f 	bl	8007db4 <malloc>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	6270      	str	r0, [r6, #36]	; 0x24
 8006eba:	b920      	cbnz	r0, 8006ec6 <_dtoa_r+0x36>
 8006ebc:	4baa      	ldr	r3, [pc, #680]	; (8007168 <_dtoa_r+0x2d8>)
 8006ebe:	21ea      	movs	r1, #234	; 0xea
 8006ec0:	48aa      	ldr	r0, [pc, #680]	; (800716c <_dtoa_r+0x2dc>)
 8006ec2:	f001 fdc7 	bl	8008a54 <__assert_func>
 8006ec6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006eca:	6005      	str	r5, [r0, #0]
 8006ecc:	60c5      	str	r5, [r0, #12]
 8006ece:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ed0:	6819      	ldr	r1, [r3, #0]
 8006ed2:	b151      	cbz	r1, 8006eea <_dtoa_r+0x5a>
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	604a      	str	r2, [r1, #4]
 8006ed8:	2301      	movs	r3, #1
 8006eda:	4093      	lsls	r3, r2
 8006edc:	608b      	str	r3, [r1, #8]
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f000 ffbe 	bl	8007e60 <_Bfree>
 8006ee4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	f1b9 0300 	subs.w	r3, r9, #0
 8006eee:	bfbb      	ittet	lt
 8006ef0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ef4:	9303      	strlt	r3, [sp, #12]
 8006ef6:	2300      	movge	r3, #0
 8006ef8:	2201      	movlt	r2, #1
 8006efa:	bfac      	ite	ge
 8006efc:	6023      	strge	r3, [r4, #0]
 8006efe:	6022      	strlt	r2, [r4, #0]
 8006f00:	4b9b      	ldr	r3, [pc, #620]	; (8007170 <_dtoa_r+0x2e0>)
 8006f02:	9c03      	ldr	r4, [sp, #12]
 8006f04:	43a3      	bics	r3, r4
 8006f06:	d11c      	bne.n	8006f42 <_dtoa_r+0xb2>
 8006f08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006f14:	ea53 0308 	orrs.w	r3, r3, r8
 8006f18:	f000 84fd 	beq.w	8007916 <_dtoa_r+0xa86>
 8006f1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f1e:	b963      	cbnz	r3, 8006f3a <_dtoa_r+0xaa>
 8006f20:	4b94      	ldr	r3, [pc, #592]	; (8007174 <_dtoa_r+0x2e4>)
 8006f22:	e01f      	b.n	8006f64 <_dtoa_r+0xd4>
 8006f24:	4b94      	ldr	r3, [pc, #592]	; (8007178 <_dtoa_r+0x2e8>)
 8006f26:	9301      	str	r3, [sp, #4]
 8006f28:	3308      	adds	r3, #8
 8006f2a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	9801      	ldr	r0, [sp, #4]
 8006f30:	b011      	add	sp, #68	; 0x44
 8006f32:	ecbd 8b02 	vpop	{d8}
 8006f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3a:	4b8e      	ldr	r3, [pc, #568]	; (8007174 <_dtoa_r+0x2e4>)
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	3303      	adds	r3, #3
 8006f40:	e7f3      	b.n	8006f2a <_dtoa_r+0x9a>
 8006f42:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006f46:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f4e:	d10b      	bne.n	8006f68 <_dtoa_r+0xd8>
 8006f50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f52:	2301      	movs	r3, #1
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 84d9 	beq.w	8007910 <_dtoa_r+0xa80>
 8006f5e:	4887      	ldr	r0, [pc, #540]	; (800717c <_dtoa_r+0x2ec>)
 8006f60:	6018      	str	r0, [r3, #0]
 8006f62:	1e43      	subs	r3, r0, #1
 8006f64:	9301      	str	r3, [sp, #4]
 8006f66:	e7e2      	b.n	8006f2e <_dtoa_r+0x9e>
 8006f68:	a90f      	add	r1, sp, #60	; 0x3c
 8006f6a:	aa0e      	add	r2, sp, #56	; 0x38
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	eeb0 0b48 	vmov.f64	d0, d8
 8006f72:	f001 fa5d 	bl	8008430 <__d2b>
 8006f76:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006f7e:	2900      	cmp	r1, #0
 8006f80:	d046      	beq.n	8007010 <_dtoa_r+0x180>
 8006f82:	ee18 4a90 	vmov	r4, s17
 8006f86:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006f8a:	ec53 2b18 	vmov	r2, r3, d8
 8006f8e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8006f92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006f96:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006f9a:	2400      	movs	r4, #0
 8006f9c:	ec43 2b16 	vmov	d6, r2, r3
 8006fa0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8006fa4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007150 <_dtoa_r+0x2c0>
 8006fa8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006fac:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007158 <_dtoa_r+0x2c8>
 8006fb0:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006fb4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007160 <_dtoa_r+0x2d0>
 8006fb8:	ee07 1a90 	vmov	s15, r1
 8006fbc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006fc0:	eeb0 7b46 	vmov.f64	d7, d6
 8006fc4:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006fc8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006fcc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd4:	ee16 ba90 	vmov	fp, s13
 8006fd8:	940a      	str	r4, [sp, #40]	; 0x28
 8006fda:	d508      	bpl.n	8006fee <_dtoa_r+0x15e>
 8006fdc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006fe0:	eeb4 6b47 	vcmp.f64	d6, d7
 8006fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe8:	bf18      	it	ne
 8006fea:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006fee:	f1bb 0f16 	cmp.w	fp, #22
 8006ff2:	d82f      	bhi.n	8007054 <_dtoa_r+0x1c4>
 8006ff4:	4b62      	ldr	r3, [pc, #392]	; (8007180 <_dtoa_r+0x2f0>)
 8006ff6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ffa:	ed93 7b00 	vldr	d7, [r3]
 8006ffe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007006:	d501      	bpl.n	800700c <_dtoa_r+0x17c>
 8007008:	f10b 3bff 	add.w	fp, fp, #4294967295
 800700c:	2300      	movs	r3, #0
 800700e:	e022      	b.n	8007056 <_dtoa_r+0x1c6>
 8007010:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007012:	4401      	add	r1, r0
 8007014:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007018:	2b20      	cmp	r3, #32
 800701a:	bfc1      	itttt	gt
 800701c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007020:	fa04 f303 	lslgt.w	r3, r4, r3
 8007024:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007028:	fa28 f804 	lsrgt.w	r8, r8, r4
 800702c:	bfd6      	itet	le
 800702e:	f1c3 0320 	rsble	r3, r3, #32
 8007032:	ea43 0808 	orrgt.w	r8, r3, r8
 8007036:	fa08 f803 	lslle.w	r8, r8, r3
 800703a:	ee07 8a90 	vmov	s15, r8
 800703e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007042:	3901      	subs	r1, #1
 8007044:	ee17 4a90 	vmov	r4, s15
 8007048:	ec53 2b17 	vmov	r2, r3, d7
 800704c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007050:	2401      	movs	r4, #1
 8007052:	e7a3      	b.n	8006f9c <_dtoa_r+0x10c>
 8007054:	2301      	movs	r3, #1
 8007056:	930b      	str	r3, [sp, #44]	; 0x2c
 8007058:	1a43      	subs	r3, r0, r1
 800705a:	1e5a      	subs	r2, r3, #1
 800705c:	bf45      	ittet	mi
 800705e:	f1c3 0301 	rsbmi	r3, r3, #1
 8007062:	9304      	strmi	r3, [sp, #16]
 8007064:	2300      	movpl	r3, #0
 8007066:	2300      	movmi	r3, #0
 8007068:	9205      	str	r2, [sp, #20]
 800706a:	bf54      	ite	pl
 800706c:	9304      	strpl	r3, [sp, #16]
 800706e:	9305      	strmi	r3, [sp, #20]
 8007070:	f1bb 0f00 	cmp.w	fp, #0
 8007074:	db18      	blt.n	80070a8 <_dtoa_r+0x218>
 8007076:	9b05      	ldr	r3, [sp, #20]
 8007078:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800707c:	445b      	add	r3, fp
 800707e:	9305      	str	r3, [sp, #20]
 8007080:	2300      	movs	r3, #0
 8007082:	9a06      	ldr	r2, [sp, #24]
 8007084:	2a09      	cmp	r2, #9
 8007086:	d849      	bhi.n	800711c <_dtoa_r+0x28c>
 8007088:	2a05      	cmp	r2, #5
 800708a:	bfc4      	itt	gt
 800708c:	3a04      	subgt	r2, #4
 800708e:	9206      	strgt	r2, [sp, #24]
 8007090:	9a06      	ldr	r2, [sp, #24]
 8007092:	f1a2 0202 	sub.w	r2, r2, #2
 8007096:	bfcc      	ite	gt
 8007098:	2400      	movgt	r4, #0
 800709a:	2401      	movle	r4, #1
 800709c:	2a03      	cmp	r2, #3
 800709e:	d848      	bhi.n	8007132 <_dtoa_r+0x2a2>
 80070a0:	e8df f002 	tbb	[pc, r2]
 80070a4:	3a2c2e0b 	.word	0x3a2c2e0b
 80070a8:	9b04      	ldr	r3, [sp, #16]
 80070aa:	2200      	movs	r2, #0
 80070ac:	eba3 030b 	sub.w	r3, r3, fp
 80070b0:	9304      	str	r3, [sp, #16]
 80070b2:	9209      	str	r2, [sp, #36]	; 0x24
 80070b4:	f1cb 0300 	rsb	r3, fp, #0
 80070b8:	e7e3      	b.n	8007082 <_dtoa_r+0x1f2>
 80070ba:	2200      	movs	r2, #0
 80070bc:	9207      	str	r2, [sp, #28]
 80070be:	9a08      	ldr	r2, [sp, #32]
 80070c0:	2a00      	cmp	r2, #0
 80070c2:	dc39      	bgt.n	8007138 <_dtoa_r+0x2a8>
 80070c4:	f04f 0a01 	mov.w	sl, #1
 80070c8:	46d1      	mov	r9, sl
 80070ca:	4652      	mov	r2, sl
 80070cc:	f8cd a020 	str.w	sl, [sp, #32]
 80070d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80070d2:	2100      	movs	r1, #0
 80070d4:	6079      	str	r1, [r7, #4]
 80070d6:	2004      	movs	r0, #4
 80070d8:	f100 0c14 	add.w	ip, r0, #20
 80070dc:	4594      	cmp	ip, r2
 80070de:	6879      	ldr	r1, [r7, #4]
 80070e0:	d92f      	bls.n	8007142 <_dtoa_r+0x2b2>
 80070e2:	4630      	mov	r0, r6
 80070e4:	930d      	str	r3, [sp, #52]	; 0x34
 80070e6:	f000 fe7b 	bl	8007de0 <_Balloc>
 80070ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070ec:	9001      	str	r0, [sp, #4]
 80070ee:	4602      	mov	r2, r0
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d149      	bne.n	8007188 <_dtoa_r+0x2f8>
 80070f4:	4b23      	ldr	r3, [pc, #140]	; (8007184 <_dtoa_r+0x2f4>)
 80070f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80070fa:	e6e1      	b.n	8006ec0 <_dtoa_r+0x30>
 80070fc:	2201      	movs	r2, #1
 80070fe:	e7dd      	b.n	80070bc <_dtoa_r+0x22c>
 8007100:	2200      	movs	r2, #0
 8007102:	9207      	str	r2, [sp, #28]
 8007104:	9a08      	ldr	r2, [sp, #32]
 8007106:	eb0b 0a02 	add.w	sl, fp, r2
 800710a:	f10a 0901 	add.w	r9, sl, #1
 800710e:	464a      	mov	r2, r9
 8007110:	2a01      	cmp	r2, #1
 8007112:	bfb8      	it	lt
 8007114:	2201      	movlt	r2, #1
 8007116:	e7db      	b.n	80070d0 <_dtoa_r+0x240>
 8007118:	2201      	movs	r2, #1
 800711a:	e7f2      	b.n	8007102 <_dtoa_r+0x272>
 800711c:	2401      	movs	r4, #1
 800711e:	2200      	movs	r2, #0
 8007120:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007124:	f04f 3aff 	mov.w	sl, #4294967295
 8007128:	2100      	movs	r1, #0
 800712a:	46d1      	mov	r9, sl
 800712c:	2212      	movs	r2, #18
 800712e:	9108      	str	r1, [sp, #32]
 8007130:	e7ce      	b.n	80070d0 <_dtoa_r+0x240>
 8007132:	2201      	movs	r2, #1
 8007134:	9207      	str	r2, [sp, #28]
 8007136:	e7f5      	b.n	8007124 <_dtoa_r+0x294>
 8007138:	f8dd a020 	ldr.w	sl, [sp, #32]
 800713c:	46d1      	mov	r9, sl
 800713e:	4652      	mov	r2, sl
 8007140:	e7c6      	b.n	80070d0 <_dtoa_r+0x240>
 8007142:	3101      	adds	r1, #1
 8007144:	6079      	str	r1, [r7, #4]
 8007146:	0040      	lsls	r0, r0, #1
 8007148:	e7c6      	b.n	80070d8 <_dtoa_r+0x248>
 800714a:	bf00      	nop
 800714c:	f3af 8000 	nop.w
 8007150:	636f4361 	.word	0x636f4361
 8007154:	3fd287a7 	.word	0x3fd287a7
 8007158:	8b60c8b3 	.word	0x8b60c8b3
 800715c:	3fc68a28 	.word	0x3fc68a28
 8007160:	509f79fb 	.word	0x509f79fb
 8007164:	3fd34413 	.word	0x3fd34413
 8007168:	08008d31 	.word	0x08008d31
 800716c:	08008d48 	.word	0x08008d48
 8007170:	7ff00000 	.word	0x7ff00000
 8007174:	08008d2d 	.word	0x08008d2d
 8007178:	08008d24 	.word	0x08008d24
 800717c:	08008d01 	.word	0x08008d01
 8007180:	08008e98 	.word	0x08008e98
 8007184:	08008da3 	.word	0x08008da3
 8007188:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800718a:	9901      	ldr	r1, [sp, #4]
 800718c:	6011      	str	r1, [r2, #0]
 800718e:	f1b9 0f0e 	cmp.w	r9, #14
 8007192:	d86c      	bhi.n	800726e <_dtoa_r+0x3de>
 8007194:	2c00      	cmp	r4, #0
 8007196:	d06a      	beq.n	800726e <_dtoa_r+0x3de>
 8007198:	f1bb 0f00 	cmp.w	fp, #0
 800719c:	f340 80a0 	ble.w	80072e0 <_dtoa_r+0x450>
 80071a0:	49c1      	ldr	r1, [pc, #772]	; (80074a8 <_dtoa_r+0x618>)
 80071a2:	f00b 020f 	and.w	r2, fp, #15
 80071a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80071aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80071ae:	ed92 7b00 	vldr	d7, [r2]
 80071b2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80071b6:	f000 8087 	beq.w	80072c8 <_dtoa_r+0x438>
 80071ba:	4abc      	ldr	r2, [pc, #752]	; (80074ac <_dtoa_r+0x61c>)
 80071bc:	ed92 6b08 	vldr	d6, [r2, #32]
 80071c0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80071c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80071c8:	f001 010f 	and.w	r1, r1, #15
 80071cc:	2203      	movs	r2, #3
 80071ce:	48b7      	ldr	r0, [pc, #732]	; (80074ac <_dtoa_r+0x61c>)
 80071d0:	2900      	cmp	r1, #0
 80071d2:	d17b      	bne.n	80072cc <_dtoa_r+0x43c>
 80071d4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80071d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80071dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80071e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071e2:	2900      	cmp	r1, #0
 80071e4:	f000 80a2 	beq.w	800732c <_dtoa_r+0x49c>
 80071e8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80071ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80071f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f8:	f140 8098 	bpl.w	800732c <_dtoa_r+0x49c>
 80071fc:	f1b9 0f00 	cmp.w	r9, #0
 8007200:	f000 8094 	beq.w	800732c <_dtoa_r+0x49c>
 8007204:	f1ba 0f00 	cmp.w	sl, #0
 8007208:	dd2f      	ble.n	800726a <_dtoa_r+0x3da>
 800720a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800720e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007212:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007216:	f10b 37ff 	add.w	r7, fp, #4294967295
 800721a:	3201      	adds	r2, #1
 800721c:	4650      	mov	r0, sl
 800721e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007222:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007226:	ee07 2a90 	vmov	s15, r2
 800722a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800722e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007232:	ee15 4a90 	vmov	r4, s11
 8007236:	ec52 1b15 	vmov	r1, r2, d5
 800723a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800723e:	2800      	cmp	r0, #0
 8007240:	d177      	bne.n	8007332 <_dtoa_r+0x4a2>
 8007242:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007246:	ee36 6b47 	vsub.f64	d6, d6, d7
 800724a:	ec42 1b17 	vmov	d7, r1, r2
 800724e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007256:	f300 8263 	bgt.w	8007720 <_dtoa_r+0x890>
 800725a:	eeb1 7b47 	vneg.f64	d7, d7
 800725e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007266:	f100 8258 	bmi.w	800771a <_dtoa_r+0x88a>
 800726a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800726e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007270:	2a00      	cmp	r2, #0
 8007272:	f2c0 811d 	blt.w	80074b0 <_dtoa_r+0x620>
 8007276:	f1bb 0f0e 	cmp.w	fp, #14
 800727a:	f300 8119 	bgt.w	80074b0 <_dtoa_r+0x620>
 800727e:	4b8a      	ldr	r3, [pc, #552]	; (80074a8 <_dtoa_r+0x618>)
 8007280:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007284:	ed93 6b00 	vldr	d6, [r3]
 8007288:	9b08      	ldr	r3, [sp, #32]
 800728a:	2b00      	cmp	r3, #0
 800728c:	f280 80b7 	bge.w	80073fe <_dtoa_r+0x56e>
 8007290:	f1b9 0f00 	cmp.w	r9, #0
 8007294:	f300 80b3 	bgt.w	80073fe <_dtoa_r+0x56e>
 8007298:	f040 823f 	bne.w	800771a <_dtoa_r+0x88a>
 800729c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80072a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80072a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80072ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b0:	464c      	mov	r4, r9
 80072b2:	464f      	mov	r7, r9
 80072b4:	f280 8215 	bge.w	80076e2 <_dtoa_r+0x852>
 80072b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80072bc:	2331      	movs	r3, #49	; 0x31
 80072be:	f808 3b01 	strb.w	r3, [r8], #1
 80072c2:	f10b 0b01 	add.w	fp, fp, #1
 80072c6:	e211      	b.n	80076ec <_dtoa_r+0x85c>
 80072c8:	2202      	movs	r2, #2
 80072ca:	e780      	b.n	80071ce <_dtoa_r+0x33e>
 80072cc:	07cc      	lsls	r4, r1, #31
 80072ce:	d504      	bpl.n	80072da <_dtoa_r+0x44a>
 80072d0:	ed90 6b00 	vldr	d6, [r0]
 80072d4:	3201      	adds	r2, #1
 80072d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072da:	1049      	asrs	r1, r1, #1
 80072dc:	3008      	adds	r0, #8
 80072de:	e777      	b.n	80071d0 <_dtoa_r+0x340>
 80072e0:	d022      	beq.n	8007328 <_dtoa_r+0x498>
 80072e2:	f1cb 0100 	rsb	r1, fp, #0
 80072e6:	4a70      	ldr	r2, [pc, #448]	; (80074a8 <_dtoa_r+0x618>)
 80072e8:	f001 000f 	and.w	r0, r1, #15
 80072ec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80072f0:	ed92 7b00 	vldr	d7, [r2]
 80072f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80072f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80072fc:	486b      	ldr	r0, [pc, #428]	; (80074ac <_dtoa_r+0x61c>)
 80072fe:	1109      	asrs	r1, r1, #4
 8007300:	2400      	movs	r4, #0
 8007302:	2202      	movs	r2, #2
 8007304:	b929      	cbnz	r1, 8007312 <_dtoa_r+0x482>
 8007306:	2c00      	cmp	r4, #0
 8007308:	f43f af6a 	beq.w	80071e0 <_dtoa_r+0x350>
 800730c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007310:	e766      	b.n	80071e0 <_dtoa_r+0x350>
 8007312:	07cf      	lsls	r7, r1, #31
 8007314:	d505      	bpl.n	8007322 <_dtoa_r+0x492>
 8007316:	ed90 6b00 	vldr	d6, [r0]
 800731a:	3201      	adds	r2, #1
 800731c:	2401      	movs	r4, #1
 800731e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007322:	1049      	asrs	r1, r1, #1
 8007324:	3008      	adds	r0, #8
 8007326:	e7ed      	b.n	8007304 <_dtoa_r+0x474>
 8007328:	2202      	movs	r2, #2
 800732a:	e759      	b.n	80071e0 <_dtoa_r+0x350>
 800732c:	465f      	mov	r7, fp
 800732e:	4648      	mov	r0, r9
 8007330:	e775      	b.n	800721e <_dtoa_r+0x38e>
 8007332:	ec42 1b17 	vmov	d7, r1, r2
 8007336:	4a5c      	ldr	r2, [pc, #368]	; (80074a8 <_dtoa_r+0x618>)
 8007338:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800733c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007340:	9a01      	ldr	r2, [sp, #4]
 8007342:	1814      	adds	r4, r2, r0
 8007344:	9a07      	ldr	r2, [sp, #28]
 8007346:	b352      	cbz	r2, 800739e <_dtoa_r+0x50e>
 8007348:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800734c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007350:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007354:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007358:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800735c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007360:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007364:	ee14 2a90 	vmov	r2, s9
 8007368:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800736c:	3230      	adds	r2, #48	; 0x30
 800736e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007372:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737a:	f808 2b01 	strb.w	r2, [r8], #1
 800737e:	d439      	bmi.n	80073f4 <_dtoa_r+0x564>
 8007380:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007384:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800738c:	d472      	bmi.n	8007474 <_dtoa_r+0x5e4>
 800738e:	45a0      	cmp	r8, r4
 8007390:	f43f af6b 	beq.w	800726a <_dtoa_r+0x3da>
 8007394:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007398:	ee26 6b03 	vmul.f64	d6, d6, d3
 800739c:	e7e0      	b.n	8007360 <_dtoa_r+0x4d0>
 800739e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80073a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80073a6:	4621      	mov	r1, r4
 80073a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80073ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80073b0:	ee14 2a90 	vmov	r2, s9
 80073b4:	3230      	adds	r2, #48	; 0x30
 80073b6:	f808 2b01 	strb.w	r2, [r8], #1
 80073ba:	45a0      	cmp	r8, r4
 80073bc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80073c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80073c4:	d118      	bne.n	80073f8 <_dtoa_r+0x568>
 80073c6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80073ca:	ee37 4b05 	vadd.f64	d4, d7, d5
 80073ce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80073d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d6:	dc4d      	bgt.n	8007474 <_dtoa_r+0x5e4>
 80073d8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80073dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80073e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e4:	f57f af41 	bpl.w	800726a <_dtoa_r+0x3da>
 80073e8:	4688      	mov	r8, r1
 80073ea:	3901      	subs	r1, #1
 80073ec:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80073f0:	2b30      	cmp	r3, #48	; 0x30
 80073f2:	d0f9      	beq.n	80073e8 <_dtoa_r+0x558>
 80073f4:	46bb      	mov	fp, r7
 80073f6:	e02a      	b.n	800744e <_dtoa_r+0x5be>
 80073f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80073fc:	e7d6      	b.n	80073ac <_dtoa_r+0x51c>
 80073fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007402:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007406:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800740a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800740e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007412:	ee15 3a10 	vmov	r3, s10
 8007416:	3330      	adds	r3, #48	; 0x30
 8007418:	f808 3b01 	strb.w	r3, [r8], #1
 800741c:	9b01      	ldr	r3, [sp, #4]
 800741e:	eba8 0303 	sub.w	r3, r8, r3
 8007422:	4599      	cmp	r9, r3
 8007424:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007428:	eea3 7b46 	vfms.f64	d7, d3, d6
 800742c:	d133      	bne.n	8007496 <_dtoa_r+0x606>
 800742e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007432:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800743a:	dc1a      	bgt.n	8007472 <_dtoa_r+0x5e2>
 800743c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007444:	d103      	bne.n	800744e <_dtoa_r+0x5be>
 8007446:	ee15 3a10 	vmov	r3, s10
 800744a:	07d9      	lsls	r1, r3, #31
 800744c:	d411      	bmi.n	8007472 <_dtoa_r+0x5e2>
 800744e:	4629      	mov	r1, r5
 8007450:	4630      	mov	r0, r6
 8007452:	f000 fd05 	bl	8007e60 <_Bfree>
 8007456:	2300      	movs	r3, #0
 8007458:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800745a:	f888 3000 	strb.w	r3, [r8]
 800745e:	f10b 0301 	add.w	r3, fp, #1
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007466:	2b00      	cmp	r3, #0
 8007468:	f43f ad61 	beq.w	8006f2e <_dtoa_r+0x9e>
 800746c:	f8c3 8000 	str.w	r8, [r3]
 8007470:	e55d      	b.n	8006f2e <_dtoa_r+0x9e>
 8007472:	465f      	mov	r7, fp
 8007474:	4643      	mov	r3, r8
 8007476:	4698      	mov	r8, r3
 8007478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800747c:	2a39      	cmp	r2, #57	; 0x39
 800747e:	d106      	bne.n	800748e <_dtoa_r+0x5fe>
 8007480:	9a01      	ldr	r2, [sp, #4]
 8007482:	429a      	cmp	r2, r3
 8007484:	d1f7      	bne.n	8007476 <_dtoa_r+0x5e6>
 8007486:	9901      	ldr	r1, [sp, #4]
 8007488:	2230      	movs	r2, #48	; 0x30
 800748a:	3701      	adds	r7, #1
 800748c:	700a      	strb	r2, [r1, #0]
 800748e:	781a      	ldrb	r2, [r3, #0]
 8007490:	3201      	adds	r2, #1
 8007492:	701a      	strb	r2, [r3, #0]
 8007494:	e7ae      	b.n	80073f4 <_dtoa_r+0x564>
 8007496:	ee27 7b04 	vmul.f64	d7, d7, d4
 800749a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800749e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a2:	d1b2      	bne.n	800740a <_dtoa_r+0x57a>
 80074a4:	e7d3      	b.n	800744e <_dtoa_r+0x5be>
 80074a6:	bf00      	nop
 80074a8:	08008e98 	.word	0x08008e98
 80074ac:	08008e70 	.word	0x08008e70
 80074b0:	9907      	ldr	r1, [sp, #28]
 80074b2:	2900      	cmp	r1, #0
 80074b4:	f000 80d0 	beq.w	8007658 <_dtoa_r+0x7c8>
 80074b8:	9906      	ldr	r1, [sp, #24]
 80074ba:	2901      	cmp	r1, #1
 80074bc:	f300 80b4 	bgt.w	8007628 <_dtoa_r+0x798>
 80074c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80074c2:	2900      	cmp	r1, #0
 80074c4:	f000 80ac 	beq.w	8007620 <_dtoa_r+0x790>
 80074c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80074cc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80074d0:	461c      	mov	r4, r3
 80074d2:	930a      	str	r3, [sp, #40]	; 0x28
 80074d4:	9b04      	ldr	r3, [sp, #16]
 80074d6:	4413      	add	r3, r2
 80074d8:	9304      	str	r3, [sp, #16]
 80074da:	9b05      	ldr	r3, [sp, #20]
 80074dc:	2101      	movs	r1, #1
 80074de:	4413      	add	r3, r2
 80074e0:	4630      	mov	r0, r6
 80074e2:	9305      	str	r3, [sp, #20]
 80074e4:	f000 fd74 	bl	8007fd0 <__i2b>
 80074e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ea:	4607      	mov	r7, r0
 80074ec:	f1b8 0f00 	cmp.w	r8, #0
 80074f0:	dd0d      	ble.n	800750e <_dtoa_r+0x67e>
 80074f2:	9a05      	ldr	r2, [sp, #20]
 80074f4:	2a00      	cmp	r2, #0
 80074f6:	dd0a      	ble.n	800750e <_dtoa_r+0x67e>
 80074f8:	4542      	cmp	r2, r8
 80074fa:	9904      	ldr	r1, [sp, #16]
 80074fc:	bfa8      	it	ge
 80074fe:	4642      	movge	r2, r8
 8007500:	1a89      	subs	r1, r1, r2
 8007502:	9104      	str	r1, [sp, #16]
 8007504:	9905      	ldr	r1, [sp, #20]
 8007506:	eba8 0802 	sub.w	r8, r8, r2
 800750a:	1a8a      	subs	r2, r1, r2
 800750c:	9205      	str	r2, [sp, #20]
 800750e:	b303      	cbz	r3, 8007552 <_dtoa_r+0x6c2>
 8007510:	9a07      	ldr	r2, [sp, #28]
 8007512:	2a00      	cmp	r2, #0
 8007514:	f000 80a5 	beq.w	8007662 <_dtoa_r+0x7d2>
 8007518:	2c00      	cmp	r4, #0
 800751a:	dd13      	ble.n	8007544 <_dtoa_r+0x6b4>
 800751c:	4639      	mov	r1, r7
 800751e:	4622      	mov	r2, r4
 8007520:	4630      	mov	r0, r6
 8007522:	930d      	str	r3, [sp, #52]	; 0x34
 8007524:	f000 fe14 	bl	8008150 <__pow5mult>
 8007528:	462a      	mov	r2, r5
 800752a:	4601      	mov	r1, r0
 800752c:	4607      	mov	r7, r0
 800752e:	4630      	mov	r0, r6
 8007530:	f000 fd64 	bl	8007ffc <__multiply>
 8007534:	4629      	mov	r1, r5
 8007536:	900a      	str	r0, [sp, #40]	; 0x28
 8007538:	4630      	mov	r0, r6
 800753a:	f000 fc91 	bl	8007e60 <_Bfree>
 800753e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007542:	4615      	mov	r5, r2
 8007544:	1b1a      	subs	r2, r3, r4
 8007546:	d004      	beq.n	8007552 <_dtoa_r+0x6c2>
 8007548:	4629      	mov	r1, r5
 800754a:	4630      	mov	r0, r6
 800754c:	f000 fe00 	bl	8008150 <__pow5mult>
 8007550:	4605      	mov	r5, r0
 8007552:	2101      	movs	r1, #1
 8007554:	4630      	mov	r0, r6
 8007556:	f000 fd3b 	bl	8007fd0 <__i2b>
 800755a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755c:	2b00      	cmp	r3, #0
 800755e:	4604      	mov	r4, r0
 8007560:	f340 8081 	ble.w	8007666 <_dtoa_r+0x7d6>
 8007564:	461a      	mov	r2, r3
 8007566:	4601      	mov	r1, r0
 8007568:	4630      	mov	r0, r6
 800756a:	f000 fdf1 	bl	8008150 <__pow5mult>
 800756e:	9b06      	ldr	r3, [sp, #24]
 8007570:	2b01      	cmp	r3, #1
 8007572:	4604      	mov	r4, r0
 8007574:	dd7a      	ble.n	800766c <_dtoa_r+0x7dc>
 8007576:	2300      	movs	r3, #0
 8007578:	930a      	str	r3, [sp, #40]	; 0x28
 800757a:	6922      	ldr	r2, [r4, #16]
 800757c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007580:	6910      	ldr	r0, [r2, #16]
 8007582:	f000 fcd5 	bl	8007f30 <__hi0bits>
 8007586:	f1c0 0020 	rsb	r0, r0, #32
 800758a:	9b05      	ldr	r3, [sp, #20]
 800758c:	4418      	add	r0, r3
 800758e:	f010 001f 	ands.w	r0, r0, #31
 8007592:	f000 808c 	beq.w	80076ae <_dtoa_r+0x81e>
 8007596:	f1c0 0220 	rsb	r2, r0, #32
 800759a:	2a04      	cmp	r2, #4
 800759c:	f340 8085 	ble.w	80076aa <_dtoa_r+0x81a>
 80075a0:	f1c0 001c 	rsb	r0, r0, #28
 80075a4:	9b04      	ldr	r3, [sp, #16]
 80075a6:	4403      	add	r3, r0
 80075a8:	9304      	str	r3, [sp, #16]
 80075aa:	9b05      	ldr	r3, [sp, #20]
 80075ac:	4403      	add	r3, r0
 80075ae:	4480      	add	r8, r0
 80075b0:	9305      	str	r3, [sp, #20]
 80075b2:	9b04      	ldr	r3, [sp, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	dd05      	ble.n	80075c4 <_dtoa_r+0x734>
 80075b8:	4629      	mov	r1, r5
 80075ba:	461a      	mov	r2, r3
 80075bc:	4630      	mov	r0, r6
 80075be:	f000 fe21 	bl	8008204 <__lshift>
 80075c2:	4605      	mov	r5, r0
 80075c4:	9b05      	ldr	r3, [sp, #20]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	dd05      	ble.n	80075d6 <_dtoa_r+0x746>
 80075ca:	4621      	mov	r1, r4
 80075cc:	461a      	mov	r2, r3
 80075ce:	4630      	mov	r0, r6
 80075d0:	f000 fe18 	bl	8008204 <__lshift>
 80075d4:	4604      	mov	r4, r0
 80075d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d06a      	beq.n	80076b2 <_dtoa_r+0x822>
 80075dc:	4621      	mov	r1, r4
 80075de:	4628      	mov	r0, r5
 80075e0:	f000 fe80 	bl	80082e4 <__mcmp>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	da64      	bge.n	80076b2 <_dtoa_r+0x822>
 80075e8:	2300      	movs	r3, #0
 80075ea:	4629      	mov	r1, r5
 80075ec:	220a      	movs	r2, #10
 80075ee:	4630      	mov	r0, r6
 80075f0:	f000 fc58 	bl	8007ea4 <__multadd>
 80075f4:	9b07      	ldr	r3, [sp, #28]
 80075f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075fa:	4605      	mov	r5, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 8191 	beq.w	8007924 <_dtoa_r+0xa94>
 8007602:	4639      	mov	r1, r7
 8007604:	2300      	movs	r3, #0
 8007606:	220a      	movs	r2, #10
 8007608:	4630      	mov	r0, r6
 800760a:	f000 fc4b 	bl	8007ea4 <__multadd>
 800760e:	f1ba 0f00 	cmp.w	sl, #0
 8007612:	4607      	mov	r7, r0
 8007614:	f300 808d 	bgt.w	8007732 <_dtoa_r+0x8a2>
 8007618:	9b06      	ldr	r3, [sp, #24]
 800761a:	2b02      	cmp	r3, #2
 800761c:	dc50      	bgt.n	80076c0 <_dtoa_r+0x830>
 800761e:	e088      	b.n	8007732 <_dtoa_r+0x8a2>
 8007620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007622:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007626:	e751      	b.n	80074cc <_dtoa_r+0x63c>
 8007628:	f109 34ff 	add.w	r4, r9, #4294967295
 800762c:	42a3      	cmp	r3, r4
 800762e:	bfbf      	itttt	lt
 8007630:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007632:	1ae3      	sublt	r3, r4, r3
 8007634:	18d2      	addlt	r2, r2, r3
 8007636:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007638:	bfb6      	itet	lt
 800763a:	4623      	movlt	r3, r4
 800763c:	1b1c      	subge	r4, r3, r4
 800763e:	2400      	movlt	r4, #0
 8007640:	f1b9 0f00 	cmp.w	r9, #0
 8007644:	bfb5      	itete	lt
 8007646:	9a04      	ldrlt	r2, [sp, #16]
 8007648:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800764c:	eba2 0809 	sublt.w	r8, r2, r9
 8007650:	464a      	movge	r2, r9
 8007652:	bfb8      	it	lt
 8007654:	2200      	movlt	r2, #0
 8007656:	e73c      	b.n	80074d2 <_dtoa_r+0x642>
 8007658:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800765c:	9f07      	ldr	r7, [sp, #28]
 800765e:	461c      	mov	r4, r3
 8007660:	e744      	b.n	80074ec <_dtoa_r+0x65c>
 8007662:	461a      	mov	r2, r3
 8007664:	e770      	b.n	8007548 <_dtoa_r+0x6b8>
 8007666:	9b06      	ldr	r3, [sp, #24]
 8007668:	2b01      	cmp	r3, #1
 800766a:	dc18      	bgt.n	800769e <_dtoa_r+0x80e>
 800766c:	9b02      	ldr	r3, [sp, #8]
 800766e:	b9b3      	cbnz	r3, 800769e <_dtoa_r+0x80e>
 8007670:	9b03      	ldr	r3, [sp, #12]
 8007672:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007676:	b9a2      	cbnz	r2, 80076a2 <_dtoa_r+0x812>
 8007678:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800767c:	0d12      	lsrs	r2, r2, #20
 800767e:	0512      	lsls	r2, r2, #20
 8007680:	b18a      	cbz	r2, 80076a6 <_dtoa_r+0x816>
 8007682:	9b04      	ldr	r3, [sp, #16]
 8007684:	3301      	adds	r3, #1
 8007686:	9304      	str	r3, [sp, #16]
 8007688:	9b05      	ldr	r3, [sp, #20]
 800768a:	3301      	adds	r3, #1
 800768c:	9305      	str	r3, [sp, #20]
 800768e:	2301      	movs	r3, #1
 8007690:	930a      	str	r3, [sp, #40]	; 0x28
 8007692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007694:	2b00      	cmp	r3, #0
 8007696:	f47f af70 	bne.w	800757a <_dtoa_r+0x6ea>
 800769a:	2001      	movs	r0, #1
 800769c:	e775      	b.n	800758a <_dtoa_r+0x6fa>
 800769e:	2300      	movs	r3, #0
 80076a0:	e7f6      	b.n	8007690 <_dtoa_r+0x800>
 80076a2:	9b02      	ldr	r3, [sp, #8]
 80076a4:	e7f4      	b.n	8007690 <_dtoa_r+0x800>
 80076a6:	920a      	str	r2, [sp, #40]	; 0x28
 80076a8:	e7f3      	b.n	8007692 <_dtoa_r+0x802>
 80076aa:	d082      	beq.n	80075b2 <_dtoa_r+0x722>
 80076ac:	4610      	mov	r0, r2
 80076ae:	301c      	adds	r0, #28
 80076b0:	e778      	b.n	80075a4 <_dtoa_r+0x714>
 80076b2:	f1b9 0f00 	cmp.w	r9, #0
 80076b6:	dc37      	bgt.n	8007728 <_dtoa_r+0x898>
 80076b8:	9b06      	ldr	r3, [sp, #24]
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	dd34      	ble.n	8007728 <_dtoa_r+0x898>
 80076be:	46ca      	mov	sl, r9
 80076c0:	f1ba 0f00 	cmp.w	sl, #0
 80076c4:	d10d      	bne.n	80076e2 <_dtoa_r+0x852>
 80076c6:	4621      	mov	r1, r4
 80076c8:	4653      	mov	r3, sl
 80076ca:	2205      	movs	r2, #5
 80076cc:	4630      	mov	r0, r6
 80076ce:	f000 fbe9 	bl	8007ea4 <__multadd>
 80076d2:	4601      	mov	r1, r0
 80076d4:	4604      	mov	r4, r0
 80076d6:	4628      	mov	r0, r5
 80076d8:	f000 fe04 	bl	80082e4 <__mcmp>
 80076dc:	2800      	cmp	r0, #0
 80076de:	f73f adeb 	bgt.w	80072b8 <_dtoa_r+0x428>
 80076e2:	9b08      	ldr	r3, [sp, #32]
 80076e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80076e8:	ea6f 0b03 	mvn.w	fp, r3
 80076ec:	f04f 0900 	mov.w	r9, #0
 80076f0:	4621      	mov	r1, r4
 80076f2:	4630      	mov	r0, r6
 80076f4:	f000 fbb4 	bl	8007e60 <_Bfree>
 80076f8:	2f00      	cmp	r7, #0
 80076fa:	f43f aea8 	beq.w	800744e <_dtoa_r+0x5be>
 80076fe:	f1b9 0f00 	cmp.w	r9, #0
 8007702:	d005      	beq.n	8007710 <_dtoa_r+0x880>
 8007704:	45b9      	cmp	r9, r7
 8007706:	d003      	beq.n	8007710 <_dtoa_r+0x880>
 8007708:	4649      	mov	r1, r9
 800770a:	4630      	mov	r0, r6
 800770c:	f000 fba8 	bl	8007e60 <_Bfree>
 8007710:	4639      	mov	r1, r7
 8007712:	4630      	mov	r0, r6
 8007714:	f000 fba4 	bl	8007e60 <_Bfree>
 8007718:	e699      	b.n	800744e <_dtoa_r+0x5be>
 800771a:	2400      	movs	r4, #0
 800771c:	4627      	mov	r7, r4
 800771e:	e7e0      	b.n	80076e2 <_dtoa_r+0x852>
 8007720:	46bb      	mov	fp, r7
 8007722:	4604      	mov	r4, r0
 8007724:	4607      	mov	r7, r0
 8007726:	e5c7      	b.n	80072b8 <_dtoa_r+0x428>
 8007728:	9b07      	ldr	r3, [sp, #28]
 800772a:	46ca      	mov	sl, r9
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 8100 	beq.w	8007932 <_dtoa_r+0xaa2>
 8007732:	f1b8 0f00 	cmp.w	r8, #0
 8007736:	dd05      	ble.n	8007744 <_dtoa_r+0x8b4>
 8007738:	4639      	mov	r1, r7
 800773a:	4642      	mov	r2, r8
 800773c:	4630      	mov	r0, r6
 800773e:	f000 fd61 	bl	8008204 <__lshift>
 8007742:	4607      	mov	r7, r0
 8007744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007746:	2b00      	cmp	r3, #0
 8007748:	d05d      	beq.n	8007806 <_dtoa_r+0x976>
 800774a:	6879      	ldr	r1, [r7, #4]
 800774c:	4630      	mov	r0, r6
 800774e:	f000 fb47 	bl	8007de0 <_Balloc>
 8007752:	4680      	mov	r8, r0
 8007754:	b928      	cbnz	r0, 8007762 <_dtoa_r+0x8d2>
 8007756:	4b82      	ldr	r3, [pc, #520]	; (8007960 <_dtoa_r+0xad0>)
 8007758:	4602      	mov	r2, r0
 800775a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800775e:	f7ff bbaf 	b.w	8006ec0 <_dtoa_r+0x30>
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	3202      	adds	r2, #2
 8007766:	0092      	lsls	r2, r2, #2
 8007768:	f107 010c 	add.w	r1, r7, #12
 800776c:	300c      	adds	r0, #12
 800776e:	f000 fb29 	bl	8007dc4 <memcpy>
 8007772:	2201      	movs	r2, #1
 8007774:	4641      	mov	r1, r8
 8007776:	4630      	mov	r0, r6
 8007778:	f000 fd44 	bl	8008204 <__lshift>
 800777c:	9b01      	ldr	r3, [sp, #4]
 800777e:	3301      	adds	r3, #1
 8007780:	9304      	str	r3, [sp, #16]
 8007782:	9b01      	ldr	r3, [sp, #4]
 8007784:	4453      	add	r3, sl
 8007786:	9308      	str	r3, [sp, #32]
 8007788:	9b02      	ldr	r3, [sp, #8]
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	46b9      	mov	r9, r7
 8007790:	9307      	str	r3, [sp, #28]
 8007792:	4607      	mov	r7, r0
 8007794:	9b04      	ldr	r3, [sp, #16]
 8007796:	4621      	mov	r1, r4
 8007798:	3b01      	subs	r3, #1
 800779a:	4628      	mov	r0, r5
 800779c:	9302      	str	r3, [sp, #8]
 800779e:	f7ff faeb 	bl	8006d78 <quorem>
 80077a2:	4603      	mov	r3, r0
 80077a4:	3330      	adds	r3, #48	; 0x30
 80077a6:	9005      	str	r0, [sp, #20]
 80077a8:	4649      	mov	r1, r9
 80077aa:	4628      	mov	r0, r5
 80077ac:	9309      	str	r3, [sp, #36]	; 0x24
 80077ae:	f000 fd99 	bl	80082e4 <__mcmp>
 80077b2:	463a      	mov	r2, r7
 80077b4:	4682      	mov	sl, r0
 80077b6:	4621      	mov	r1, r4
 80077b8:	4630      	mov	r0, r6
 80077ba:	f000 fdaf 	bl	800831c <__mdiff>
 80077be:	68c2      	ldr	r2, [r0, #12]
 80077c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c2:	4680      	mov	r8, r0
 80077c4:	bb0a      	cbnz	r2, 800780a <_dtoa_r+0x97a>
 80077c6:	4601      	mov	r1, r0
 80077c8:	4628      	mov	r0, r5
 80077ca:	f000 fd8b 	bl	80082e4 <__mcmp>
 80077ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d0:	4602      	mov	r2, r0
 80077d2:	4641      	mov	r1, r8
 80077d4:	4630      	mov	r0, r6
 80077d6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80077da:	f000 fb41 	bl	8007e60 <_Bfree>
 80077de:	9b06      	ldr	r3, [sp, #24]
 80077e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077e2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80077e6:	ea43 0102 	orr.w	r1, r3, r2
 80077ea:	9b07      	ldr	r3, [sp, #28]
 80077ec:	430b      	orrs	r3, r1
 80077ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f0:	d10d      	bne.n	800780e <_dtoa_r+0x97e>
 80077f2:	2b39      	cmp	r3, #57	; 0x39
 80077f4:	d029      	beq.n	800784a <_dtoa_r+0x9ba>
 80077f6:	f1ba 0f00 	cmp.w	sl, #0
 80077fa:	dd01      	ble.n	8007800 <_dtoa_r+0x970>
 80077fc:	9b05      	ldr	r3, [sp, #20]
 80077fe:	3331      	adds	r3, #49	; 0x31
 8007800:	9a02      	ldr	r2, [sp, #8]
 8007802:	7013      	strb	r3, [r2, #0]
 8007804:	e774      	b.n	80076f0 <_dtoa_r+0x860>
 8007806:	4638      	mov	r0, r7
 8007808:	e7b8      	b.n	800777c <_dtoa_r+0x8ec>
 800780a:	2201      	movs	r2, #1
 800780c:	e7e1      	b.n	80077d2 <_dtoa_r+0x942>
 800780e:	f1ba 0f00 	cmp.w	sl, #0
 8007812:	db06      	blt.n	8007822 <_dtoa_r+0x992>
 8007814:	9906      	ldr	r1, [sp, #24]
 8007816:	ea41 0a0a 	orr.w	sl, r1, sl
 800781a:	9907      	ldr	r1, [sp, #28]
 800781c:	ea5a 0101 	orrs.w	r1, sl, r1
 8007820:	d120      	bne.n	8007864 <_dtoa_r+0x9d4>
 8007822:	2a00      	cmp	r2, #0
 8007824:	ddec      	ble.n	8007800 <_dtoa_r+0x970>
 8007826:	4629      	mov	r1, r5
 8007828:	2201      	movs	r2, #1
 800782a:	4630      	mov	r0, r6
 800782c:	9304      	str	r3, [sp, #16]
 800782e:	f000 fce9 	bl	8008204 <__lshift>
 8007832:	4621      	mov	r1, r4
 8007834:	4605      	mov	r5, r0
 8007836:	f000 fd55 	bl	80082e4 <__mcmp>
 800783a:	2800      	cmp	r0, #0
 800783c:	9b04      	ldr	r3, [sp, #16]
 800783e:	dc02      	bgt.n	8007846 <_dtoa_r+0x9b6>
 8007840:	d1de      	bne.n	8007800 <_dtoa_r+0x970>
 8007842:	07da      	lsls	r2, r3, #31
 8007844:	d5dc      	bpl.n	8007800 <_dtoa_r+0x970>
 8007846:	2b39      	cmp	r3, #57	; 0x39
 8007848:	d1d8      	bne.n	80077fc <_dtoa_r+0x96c>
 800784a:	9a02      	ldr	r2, [sp, #8]
 800784c:	2339      	movs	r3, #57	; 0x39
 800784e:	7013      	strb	r3, [r2, #0]
 8007850:	4643      	mov	r3, r8
 8007852:	4698      	mov	r8, r3
 8007854:	3b01      	subs	r3, #1
 8007856:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800785a:	2a39      	cmp	r2, #57	; 0x39
 800785c:	d051      	beq.n	8007902 <_dtoa_r+0xa72>
 800785e:	3201      	adds	r2, #1
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	e745      	b.n	80076f0 <_dtoa_r+0x860>
 8007864:	2a00      	cmp	r2, #0
 8007866:	dd03      	ble.n	8007870 <_dtoa_r+0x9e0>
 8007868:	2b39      	cmp	r3, #57	; 0x39
 800786a:	d0ee      	beq.n	800784a <_dtoa_r+0x9ba>
 800786c:	3301      	adds	r3, #1
 800786e:	e7c7      	b.n	8007800 <_dtoa_r+0x970>
 8007870:	9a04      	ldr	r2, [sp, #16]
 8007872:	9908      	ldr	r1, [sp, #32]
 8007874:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007878:	428a      	cmp	r2, r1
 800787a:	d02b      	beq.n	80078d4 <_dtoa_r+0xa44>
 800787c:	4629      	mov	r1, r5
 800787e:	2300      	movs	r3, #0
 8007880:	220a      	movs	r2, #10
 8007882:	4630      	mov	r0, r6
 8007884:	f000 fb0e 	bl	8007ea4 <__multadd>
 8007888:	45b9      	cmp	r9, r7
 800788a:	4605      	mov	r5, r0
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	f04f 020a 	mov.w	r2, #10
 8007894:	4649      	mov	r1, r9
 8007896:	4630      	mov	r0, r6
 8007898:	d107      	bne.n	80078aa <_dtoa_r+0xa1a>
 800789a:	f000 fb03 	bl	8007ea4 <__multadd>
 800789e:	4681      	mov	r9, r0
 80078a0:	4607      	mov	r7, r0
 80078a2:	9b04      	ldr	r3, [sp, #16]
 80078a4:	3301      	adds	r3, #1
 80078a6:	9304      	str	r3, [sp, #16]
 80078a8:	e774      	b.n	8007794 <_dtoa_r+0x904>
 80078aa:	f000 fafb 	bl	8007ea4 <__multadd>
 80078ae:	4639      	mov	r1, r7
 80078b0:	4681      	mov	r9, r0
 80078b2:	2300      	movs	r3, #0
 80078b4:	220a      	movs	r2, #10
 80078b6:	4630      	mov	r0, r6
 80078b8:	f000 faf4 	bl	8007ea4 <__multadd>
 80078bc:	4607      	mov	r7, r0
 80078be:	e7f0      	b.n	80078a2 <_dtoa_r+0xa12>
 80078c0:	f1ba 0f00 	cmp.w	sl, #0
 80078c4:	9a01      	ldr	r2, [sp, #4]
 80078c6:	bfcc      	ite	gt
 80078c8:	46d0      	movgt	r8, sl
 80078ca:	f04f 0801 	movle.w	r8, #1
 80078ce:	4490      	add	r8, r2
 80078d0:	f04f 0900 	mov.w	r9, #0
 80078d4:	4629      	mov	r1, r5
 80078d6:	2201      	movs	r2, #1
 80078d8:	4630      	mov	r0, r6
 80078da:	9302      	str	r3, [sp, #8]
 80078dc:	f000 fc92 	bl	8008204 <__lshift>
 80078e0:	4621      	mov	r1, r4
 80078e2:	4605      	mov	r5, r0
 80078e4:	f000 fcfe 	bl	80082e4 <__mcmp>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	dcb1      	bgt.n	8007850 <_dtoa_r+0x9c0>
 80078ec:	d102      	bne.n	80078f4 <_dtoa_r+0xa64>
 80078ee:	9b02      	ldr	r3, [sp, #8]
 80078f0:	07db      	lsls	r3, r3, #31
 80078f2:	d4ad      	bmi.n	8007850 <_dtoa_r+0x9c0>
 80078f4:	4643      	mov	r3, r8
 80078f6:	4698      	mov	r8, r3
 80078f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078fc:	2a30      	cmp	r2, #48	; 0x30
 80078fe:	d0fa      	beq.n	80078f6 <_dtoa_r+0xa66>
 8007900:	e6f6      	b.n	80076f0 <_dtoa_r+0x860>
 8007902:	9a01      	ldr	r2, [sp, #4]
 8007904:	429a      	cmp	r2, r3
 8007906:	d1a4      	bne.n	8007852 <_dtoa_r+0x9c2>
 8007908:	f10b 0b01 	add.w	fp, fp, #1
 800790c:	2331      	movs	r3, #49	; 0x31
 800790e:	e778      	b.n	8007802 <_dtoa_r+0x972>
 8007910:	4b14      	ldr	r3, [pc, #80]	; (8007964 <_dtoa_r+0xad4>)
 8007912:	f7ff bb27 	b.w	8006f64 <_dtoa_r+0xd4>
 8007916:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007918:	2b00      	cmp	r3, #0
 800791a:	f47f ab03 	bne.w	8006f24 <_dtoa_r+0x94>
 800791e:	4b12      	ldr	r3, [pc, #72]	; (8007968 <_dtoa_r+0xad8>)
 8007920:	f7ff bb20 	b.w	8006f64 <_dtoa_r+0xd4>
 8007924:	f1ba 0f00 	cmp.w	sl, #0
 8007928:	dc03      	bgt.n	8007932 <_dtoa_r+0xaa2>
 800792a:	9b06      	ldr	r3, [sp, #24]
 800792c:	2b02      	cmp	r3, #2
 800792e:	f73f aec7 	bgt.w	80076c0 <_dtoa_r+0x830>
 8007932:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007936:	4621      	mov	r1, r4
 8007938:	4628      	mov	r0, r5
 800793a:	f7ff fa1d 	bl	8006d78 <quorem>
 800793e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007942:	f808 3b01 	strb.w	r3, [r8], #1
 8007946:	9a01      	ldr	r2, [sp, #4]
 8007948:	eba8 0202 	sub.w	r2, r8, r2
 800794c:	4592      	cmp	sl, r2
 800794e:	ddb7      	ble.n	80078c0 <_dtoa_r+0xa30>
 8007950:	4629      	mov	r1, r5
 8007952:	2300      	movs	r3, #0
 8007954:	220a      	movs	r2, #10
 8007956:	4630      	mov	r0, r6
 8007958:	f000 faa4 	bl	8007ea4 <__multadd>
 800795c:	4605      	mov	r5, r0
 800795e:	e7ea      	b.n	8007936 <_dtoa_r+0xaa6>
 8007960:	08008da3 	.word	0x08008da3
 8007964:	08008d00 	.word	0x08008d00
 8007968:	08008d24 	.word	0x08008d24

0800796c <__sflush_r>:
 800796c:	898a      	ldrh	r2, [r1, #12]
 800796e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007972:	4605      	mov	r5, r0
 8007974:	0710      	lsls	r0, r2, #28
 8007976:	460c      	mov	r4, r1
 8007978:	d458      	bmi.n	8007a2c <__sflush_r+0xc0>
 800797a:	684b      	ldr	r3, [r1, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	dc05      	bgt.n	800798c <__sflush_r+0x20>
 8007980:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007982:	2b00      	cmp	r3, #0
 8007984:	dc02      	bgt.n	800798c <__sflush_r+0x20>
 8007986:	2000      	movs	r0, #0
 8007988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800798c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800798e:	2e00      	cmp	r6, #0
 8007990:	d0f9      	beq.n	8007986 <__sflush_r+0x1a>
 8007992:	2300      	movs	r3, #0
 8007994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007998:	682f      	ldr	r7, [r5, #0]
 800799a:	602b      	str	r3, [r5, #0]
 800799c:	d032      	beq.n	8007a04 <__sflush_r+0x98>
 800799e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	075a      	lsls	r2, r3, #29
 80079a4:	d505      	bpl.n	80079b2 <__sflush_r+0x46>
 80079a6:	6863      	ldr	r3, [r4, #4]
 80079a8:	1ac0      	subs	r0, r0, r3
 80079aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079ac:	b10b      	cbz	r3, 80079b2 <__sflush_r+0x46>
 80079ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079b0:	1ac0      	subs	r0, r0, r3
 80079b2:	2300      	movs	r3, #0
 80079b4:	4602      	mov	r2, r0
 80079b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079b8:	6a21      	ldr	r1, [r4, #32]
 80079ba:	4628      	mov	r0, r5
 80079bc:	47b0      	blx	r6
 80079be:	1c43      	adds	r3, r0, #1
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	d106      	bne.n	80079d2 <__sflush_r+0x66>
 80079c4:	6829      	ldr	r1, [r5, #0]
 80079c6:	291d      	cmp	r1, #29
 80079c8:	d82c      	bhi.n	8007a24 <__sflush_r+0xb8>
 80079ca:	4a2a      	ldr	r2, [pc, #168]	; (8007a74 <__sflush_r+0x108>)
 80079cc:	40ca      	lsrs	r2, r1
 80079ce:	07d6      	lsls	r6, r2, #31
 80079d0:	d528      	bpl.n	8007a24 <__sflush_r+0xb8>
 80079d2:	2200      	movs	r2, #0
 80079d4:	6062      	str	r2, [r4, #4]
 80079d6:	04d9      	lsls	r1, r3, #19
 80079d8:	6922      	ldr	r2, [r4, #16]
 80079da:	6022      	str	r2, [r4, #0]
 80079dc:	d504      	bpl.n	80079e8 <__sflush_r+0x7c>
 80079de:	1c42      	adds	r2, r0, #1
 80079e0:	d101      	bne.n	80079e6 <__sflush_r+0x7a>
 80079e2:	682b      	ldr	r3, [r5, #0]
 80079e4:	b903      	cbnz	r3, 80079e8 <__sflush_r+0x7c>
 80079e6:	6560      	str	r0, [r4, #84]	; 0x54
 80079e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079ea:	602f      	str	r7, [r5, #0]
 80079ec:	2900      	cmp	r1, #0
 80079ee:	d0ca      	beq.n	8007986 <__sflush_r+0x1a>
 80079f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079f4:	4299      	cmp	r1, r3
 80079f6:	d002      	beq.n	80079fe <__sflush_r+0x92>
 80079f8:	4628      	mov	r0, r5
 80079fa:	f000 fd8b 	bl	8008514 <_free_r>
 80079fe:	2000      	movs	r0, #0
 8007a00:	6360      	str	r0, [r4, #52]	; 0x34
 8007a02:	e7c1      	b.n	8007988 <__sflush_r+0x1c>
 8007a04:	6a21      	ldr	r1, [r4, #32]
 8007a06:	2301      	movs	r3, #1
 8007a08:	4628      	mov	r0, r5
 8007a0a:	47b0      	blx	r6
 8007a0c:	1c41      	adds	r1, r0, #1
 8007a0e:	d1c7      	bne.n	80079a0 <__sflush_r+0x34>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0c4      	beq.n	80079a0 <__sflush_r+0x34>
 8007a16:	2b1d      	cmp	r3, #29
 8007a18:	d001      	beq.n	8007a1e <__sflush_r+0xb2>
 8007a1a:	2b16      	cmp	r3, #22
 8007a1c:	d101      	bne.n	8007a22 <__sflush_r+0xb6>
 8007a1e:	602f      	str	r7, [r5, #0]
 8007a20:	e7b1      	b.n	8007986 <__sflush_r+0x1a>
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a28:	81a3      	strh	r3, [r4, #12]
 8007a2a:	e7ad      	b.n	8007988 <__sflush_r+0x1c>
 8007a2c:	690f      	ldr	r7, [r1, #16]
 8007a2e:	2f00      	cmp	r7, #0
 8007a30:	d0a9      	beq.n	8007986 <__sflush_r+0x1a>
 8007a32:	0793      	lsls	r3, r2, #30
 8007a34:	680e      	ldr	r6, [r1, #0]
 8007a36:	bf08      	it	eq
 8007a38:	694b      	ldreq	r3, [r1, #20]
 8007a3a:	600f      	str	r7, [r1, #0]
 8007a3c:	bf18      	it	ne
 8007a3e:	2300      	movne	r3, #0
 8007a40:	eba6 0807 	sub.w	r8, r6, r7
 8007a44:	608b      	str	r3, [r1, #8]
 8007a46:	f1b8 0f00 	cmp.w	r8, #0
 8007a4a:	dd9c      	ble.n	8007986 <__sflush_r+0x1a>
 8007a4c:	6a21      	ldr	r1, [r4, #32]
 8007a4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a50:	4643      	mov	r3, r8
 8007a52:	463a      	mov	r2, r7
 8007a54:	4628      	mov	r0, r5
 8007a56:	47b0      	blx	r6
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	dc06      	bgt.n	8007a6a <__sflush_r+0xfe>
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a62:	81a3      	strh	r3, [r4, #12]
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	e78e      	b.n	8007988 <__sflush_r+0x1c>
 8007a6a:	4407      	add	r7, r0
 8007a6c:	eba8 0800 	sub.w	r8, r8, r0
 8007a70:	e7e9      	b.n	8007a46 <__sflush_r+0xda>
 8007a72:	bf00      	nop
 8007a74:	20400001 	.word	0x20400001

08007a78 <_fflush_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	690b      	ldr	r3, [r1, #16]
 8007a7c:	4605      	mov	r5, r0
 8007a7e:	460c      	mov	r4, r1
 8007a80:	b913      	cbnz	r3, 8007a88 <_fflush_r+0x10>
 8007a82:	2500      	movs	r5, #0
 8007a84:	4628      	mov	r0, r5
 8007a86:	bd38      	pop	{r3, r4, r5, pc}
 8007a88:	b118      	cbz	r0, 8007a92 <_fflush_r+0x1a>
 8007a8a:	6983      	ldr	r3, [r0, #24]
 8007a8c:	b90b      	cbnz	r3, 8007a92 <_fflush_r+0x1a>
 8007a8e:	f000 f887 	bl	8007ba0 <__sinit>
 8007a92:	4b14      	ldr	r3, [pc, #80]	; (8007ae4 <_fflush_r+0x6c>)
 8007a94:	429c      	cmp	r4, r3
 8007a96:	d11b      	bne.n	8007ad0 <_fflush_r+0x58>
 8007a98:	686c      	ldr	r4, [r5, #4]
 8007a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0ef      	beq.n	8007a82 <_fflush_r+0xa>
 8007aa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007aa4:	07d0      	lsls	r0, r2, #31
 8007aa6:	d404      	bmi.n	8007ab2 <_fflush_r+0x3a>
 8007aa8:	0599      	lsls	r1, r3, #22
 8007aaa:	d402      	bmi.n	8007ab2 <_fflush_r+0x3a>
 8007aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aae:	f000 f91a 	bl	8007ce6 <__retarget_lock_acquire_recursive>
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	f7ff ff59 	bl	800796c <__sflush_r>
 8007aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007abc:	07da      	lsls	r2, r3, #31
 8007abe:	4605      	mov	r5, r0
 8007ac0:	d4e0      	bmi.n	8007a84 <_fflush_r+0xc>
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	059b      	lsls	r3, r3, #22
 8007ac6:	d4dd      	bmi.n	8007a84 <_fflush_r+0xc>
 8007ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aca:	f000 f90d 	bl	8007ce8 <__retarget_lock_release_recursive>
 8007ace:	e7d9      	b.n	8007a84 <_fflush_r+0xc>
 8007ad0:	4b05      	ldr	r3, [pc, #20]	; (8007ae8 <_fflush_r+0x70>)
 8007ad2:	429c      	cmp	r4, r3
 8007ad4:	d101      	bne.n	8007ada <_fflush_r+0x62>
 8007ad6:	68ac      	ldr	r4, [r5, #8]
 8007ad8:	e7df      	b.n	8007a9a <_fflush_r+0x22>
 8007ada:	4b04      	ldr	r3, [pc, #16]	; (8007aec <_fflush_r+0x74>)
 8007adc:	429c      	cmp	r4, r3
 8007ade:	bf08      	it	eq
 8007ae0:	68ec      	ldreq	r4, [r5, #12]
 8007ae2:	e7da      	b.n	8007a9a <_fflush_r+0x22>
 8007ae4:	08008dd4 	.word	0x08008dd4
 8007ae8:	08008df4 	.word	0x08008df4
 8007aec:	08008db4 	.word	0x08008db4

08007af0 <std>:
 8007af0:	2300      	movs	r3, #0
 8007af2:	b510      	push	{r4, lr}
 8007af4:	4604      	mov	r4, r0
 8007af6:	e9c0 3300 	strd	r3, r3, [r0]
 8007afa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007afe:	6083      	str	r3, [r0, #8]
 8007b00:	8181      	strh	r1, [r0, #12]
 8007b02:	6643      	str	r3, [r0, #100]	; 0x64
 8007b04:	81c2      	strh	r2, [r0, #14]
 8007b06:	6183      	str	r3, [r0, #24]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	2208      	movs	r2, #8
 8007b0c:	305c      	adds	r0, #92	; 0x5c
 8007b0e:	f7fe fb9b 	bl	8006248 <memset>
 8007b12:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <std+0x38>)
 8007b14:	6263      	str	r3, [r4, #36]	; 0x24
 8007b16:	4b05      	ldr	r3, [pc, #20]	; (8007b2c <std+0x3c>)
 8007b18:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b1a:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <std+0x40>)
 8007b1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b1e:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <std+0x44>)
 8007b20:	6224      	str	r4, [r4, #32]
 8007b22:	6323      	str	r3, [r4, #48]	; 0x30
 8007b24:	bd10      	pop	{r4, pc}
 8007b26:	bf00      	nop
 8007b28:	080089a9 	.word	0x080089a9
 8007b2c:	080089cb 	.word	0x080089cb
 8007b30:	08008a03 	.word	0x08008a03
 8007b34:	08008a27 	.word	0x08008a27

08007b38 <_cleanup_r>:
 8007b38:	4901      	ldr	r1, [pc, #4]	; (8007b40 <_cleanup_r+0x8>)
 8007b3a:	f000 b8af 	b.w	8007c9c <_fwalk_reent>
 8007b3e:	bf00      	nop
 8007b40:	08007a79 	.word	0x08007a79

08007b44 <__sfmoreglue>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	2268      	movs	r2, #104	; 0x68
 8007b48:	1e4d      	subs	r5, r1, #1
 8007b4a:	4355      	muls	r5, r2
 8007b4c:	460e      	mov	r6, r1
 8007b4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b52:	f000 fd4b 	bl	80085ec <_malloc_r>
 8007b56:	4604      	mov	r4, r0
 8007b58:	b140      	cbz	r0, 8007b6c <__sfmoreglue+0x28>
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	e9c0 1600 	strd	r1, r6, [r0]
 8007b60:	300c      	adds	r0, #12
 8007b62:	60a0      	str	r0, [r4, #8]
 8007b64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b68:	f7fe fb6e 	bl	8006248 <memset>
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	bd70      	pop	{r4, r5, r6, pc}

08007b70 <__sfp_lock_acquire>:
 8007b70:	4801      	ldr	r0, [pc, #4]	; (8007b78 <__sfp_lock_acquire+0x8>)
 8007b72:	f000 b8b8 	b.w	8007ce6 <__retarget_lock_acquire_recursive>
 8007b76:	bf00      	nop
 8007b78:	2400031d 	.word	0x2400031d

08007b7c <__sfp_lock_release>:
 8007b7c:	4801      	ldr	r0, [pc, #4]	; (8007b84 <__sfp_lock_release+0x8>)
 8007b7e:	f000 b8b3 	b.w	8007ce8 <__retarget_lock_release_recursive>
 8007b82:	bf00      	nop
 8007b84:	2400031d 	.word	0x2400031d

08007b88 <__sinit_lock_acquire>:
 8007b88:	4801      	ldr	r0, [pc, #4]	; (8007b90 <__sinit_lock_acquire+0x8>)
 8007b8a:	f000 b8ac 	b.w	8007ce6 <__retarget_lock_acquire_recursive>
 8007b8e:	bf00      	nop
 8007b90:	2400031e 	.word	0x2400031e

08007b94 <__sinit_lock_release>:
 8007b94:	4801      	ldr	r0, [pc, #4]	; (8007b9c <__sinit_lock_release+0x8>)
 8007b96:	f000 b8a7 	b.w	8007ce8 <__retarget_lock_release_recursive>
 8007b9a:	bf00      	nop
 8007b9c:	2400031e 	.word	0x2400031e

08007ba0 <__sinit>:
 8007ba0:	b510      	push	{r4, lr}
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	f7ff fff0 	bl	8007b88 <__sinit_lock_acquire>
 8007ba8:	69a3      	ldr	r3, [r4, #24]
 8007baa:	b11b      	cbz	r3, 8007bb4 <__sinit+0x14>
 8007bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb0:	f7ff bff0 	b.w	8007b94 <__sinit_lock_release>
 8007bb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007bb8:	6523      	str	r3, [r4, #80]	; 0x50
 8007bba:	4b13      	ldr	r3, [pc, #76]	; (8007c08 <__sinit+0x68>)
 8007bbc:	4a13      	ldr	r2, [pc, #76]	; (8007c0c <__sinit+0x6c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007bc2:	42a3      	cmp	r3, r4
 8007bc4:	bf04      	itt	eq
 8007bc6:	2301      	moveq	r3, #1
 8007bc8:	61a3      	streq	r3, [r4, #24]
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f000 f820 	bl	8007c10 <__sfp>
 8007bd0:	6060      	str	r0, [r4, #4]
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 f81c 	bl	8007c10 <__sfp>
 8007bd8:	60a0      	str	r0, [r4, #8]
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f000 f818 	bl	8007c10 <__sfp>
 8007be0:	2200      	movs	r2, #0
 8007be2:	60e0      	str	r0, [r4, #12]
 8007be4:	2104      	movs	r1, #4
 8007be6:	6860      	ldr	r0, [r4, #4]
 8007be8:	f7ff ff82 	bl	8007af0 <std>
 8007bec:	68a0      	ldr	r0, [r4, #8]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	2109      	movs	r1, #9
 8007bf2:	f7ff ff7d 	bl	8007af0 <std>
 8007bf6:	68e0      	ldr	r0, [r4, #12]
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	2112      	movs	r1, #18
 8007bfc:	f7ff ff78 	bl	8007af0 <std>
 8007c00:	2301      	movs	r3, #1
 8007c02:	61a3      	str	r3, [r4, #24]
 8007c04:	e7d2      	b.n	8007bac <__sinit+0xc>
 8007c06:	bf00      	nop
 8007c08:	08008cec 	.word	0x08008cec
 8007c0c:	08007b39 	.word	0x08007b39

08007c10 <__sfp>:
 8007c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c12:	4607      	mov	r7, r0
 8007c14:	f7ff ffac 	bl	8007b70 <__sfp_lock_acquire>
 8007c18:	4b1e      	ldr	r3, [pc, #120]	; (8007c94 <__sfp+0x84>)
 8007c1a:	681e      	ldr	r6, [r3, #0]
 8007c1c:	69b3      	ldr	r3, [r6, #24]
 8007c1e:	b913      	cbnz	r3, 8007c26 <__sfp+0x16>
 8007c20:	4630      	mov	r0, r6
 8007c22:	f7ff ffbd 	bl	8007ba0 <__sinit>
 8007c26:	3648      	adds	r6, #72	; 0x48
 8007c28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	d503      	bpl.n	8007c38 <__sfp+0x28>
 8007c30:	6833      	ldr	r3, [r6, #0]
 8007c32:	b30b      	cbz	r3, 8007c78 <__sfp+0x68>
 8007c34:	6836      	ldr	r6, [r6, #0]
 8007c36:	e7f7      	b.n	8007c28 <__sfp+0x18>
 8007c38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c3c:	b9d5      	cbnz	r5, 8007c74 <__sfp+0x64>
 8007c3e:	4b16      	ldr	r3, [pc, #88]	; (8007c98 <__sfp+0x88>)
 8007c40:	60e3      	str	r3, [r4, #12]
 8007c42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c46:	6665      	str	r5, [r4, #100]	; 0x64
 8007c48:	f000 f84c 	bl	8007ce4 <__retarget_lock_init_recursive>
 8007c4c:	f7ff ff96 	bl	8007b7c <__sfp_lock_release>
 8007c50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c58:	6025      	str	r5, [r4, #0]
 8007c5a:	61a5      	str	r5, [r4, #24]
 8007c5c:	2208      	movs	r2, #8
 8007c5e:	4629      	mov	r1, r5
 8007c60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c64:	f7fe faf0 	bl	8006248 <memset>
 8007c68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c70:	4620      	mov	r0, r4
 8007c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c74:	3468      	adds	r4, #104	; 0x68
 8007c76:	e7d9      	b.n	8007c2c <__sfp+0x1c>
 8007c78:	2104      	movs	r1, #4
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	f7ff ff62 	bl	8007b44 <__sfmoreglue>
 8007c80:	4604      	mov	r4, r0
 8007c82:	6030      	str	r0, [r6, #0]
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d1d5      	bne.n	8007c34 <__sfp+0x24>
 8007c88:	f7ff ff78 	bl	8007b7c <__sfp_lock_release>
 8007c8c:	230c      	movs	r3, #12
 8007c8e:	603b      	str	r3, [r7, #0]
 8007c90:	e7ee      	b.n	8007c70 <__sfp+0x60>
 8007c92:	bf00      	nop
 8007c94:	08008cec 	.word	0x08008cec
 8007c98:	ffff0001 	.word	0xffff0001

08007c9c <_fwalk_reent>:
 8007c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	4688      	mov	r8, r1
 8007ca4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ca8:	2700      	movs	r7, #0
 8007caa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cae:	f1b9 0901 	subs.w	r9, r9, #1
 8007cb2:	d505      	bpl.n	8007cc0 <_fwalk_reent+0x24>
 8007cb4:	6824      	ldr	r4, [r4, #0]
 8007cb6:	2c00      	cmp	r4, #0
 8007cb8:	d1f7      	bne.n	8007caa <_fwalk_reent+0xe>
 8007cba:	4638      	mov	r0, r7
 8007cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cc0:	89ab      	ldrh	r3, [r5, #12]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d907      	bls.n	8007cd6 <_fwalk_reent+0x3a>
 8007cc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	d003      	beq.n	8007cd6 <_fwalk_reent+0x3a>
 8007cce:	4629      	mov	r1, r5
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	47c0      	blx	r8
 8007cd4:	4307      	orrs	r7, r0
 8007cd6:	3568      	adds	r5, #104	; 0x68
 8007cd8:	e7e9      	b.n	8007cae <_fwalk_reent+0x12>
	...

08007cdc <_localeconv_r>:
 8007cdc:	4800      	ldr	r0, [pc, #0]	; (8007ce0 <_localeconv_r+0x4>)
 8007cde:	4770      	bx	lr
 8007ce0:	24000164 	.word	0x24000164

08007ce4 <__retarget_lock_init_recursive>:
 8007ce4:	4770      	bx	lr

08007ce6 <__retarget_lock_acquire_recursive>:
 8007ce6:	4770      	bx	lr

08007ce8 <__retarget_lock_release_recursive>:
 8007ce8:	4770      	bx	lr

08007cea <__swhatbuf_r>:
 8007cea:	b570      	push	{r4, r5, r6, lr}
 8007cec:	460e      	mov	r6, r1
 8007cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf2:	2900      	cmp	r1, #0
 8007cf4:	b096      	sub	sp, #88	; 0x58
 8007cf6:	4614      	mov	r4, r2
 8007cf8:	461d      	mov	r5, r3
 8007cfa:	da08      	bge.n	8007d0e <__swhatbuf_r+0x24>
 8007cfc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	602a      	str	r2, [r5, #0]
 8007d04:	061a      	lsls	r2, r3, #24
 8007d06:	d410      	bmi.n	8007d2a <__swhatbuf_r+0x40>
 8007d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d0c:	e00e      	b.n	8007d2c <__swhatbuf_r+0x42>
 8007d0e:	466a      	mov	r2, sp
 8007d10:	f000 fee0 	bl	8008ad4 <_fstat_r>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	dbf1      	blt.n	8007cfc <__swhatbuf_r+0x12>
 8007d18:	9a01      	ldr	r2, [sp, #4]
 8007d1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d22:	425a      	negs	r2, r3
 8007d24:	415a      	adcs	r2, r3
 8007d26:	602a      	str	r2, [r5, #0]
 8007d28:	e7ee      	b.n	8007d08 <__swhatbuf_r+0x1e>
 8007d2a:	2340      	movs	r3, #64	; 0x40
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	6023      	str	r3, [r4, #0]
 8007d30:	b016      	add	sp, #88	; 0x58
 8007d32:	bd70      	pop	{r4, r5, r6, pc}

08007d34 <__smakebuf_r>:
 8007d34:	898b      	ldrh	r3, [r1, #12]
 8007d36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d38:	079d      	lsls	r5, r3, #30
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	d507      	bpl.n	8007d50 <__smakebuf_r+0x1c>
 8007d40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	6123      	str	r3, [r4, #16]
 8007d48:	2301      	movs	r3, #1
 8007d4a:	6163      	str	r3, [r4, #20]
 8007d4c:	b002      	add	sp, #8
 8007d4e:	bd70      	pop	{r4, r5, r6, pc}
 8007d50:	ab01      	add	r3, sp, #4
 8007d52:	466a      	mov	r2, sp
 8007d54:	f7ff ffc9 	bl	8007cea <__swhatbuf_r>
 8007d58:	9900      	ldr	r1, [sp, #0]
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f000 fc45 	bl	80085ec <_malloc_r>
 8007d62:	b948      	cbnz	r0, 8007d78 <__smakebuf_r+0x44>
 8007d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d68:	059a      	lsls	r2, r3, #22
 8007d6a:	d4ef      	bmi.n	8007d4c <__smakebuf_r+0x18>
 8007d6c:	f023 0303 	bic.w	r3, r3, #3
 8007d70:	f043 0302 	orr.w	r3, r3, #2
 8007d74:	81a3      	strh	r3, [r4, #12]
 8007d76:	e7e3      	b.n	8007d40 <__smakebuf_r+0xc>
 8007d78:	4b0d      	ldr	r3, [pc, #52]	; (8007db0 <__smakebuf_r+0x7c>)
 8007d7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	6020      	str	r0, [r4, #0]
 8007d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d84:	81a3      	strh	r3, [r4, #12]
 8007d86:	9b00      	ldr	r3, [sp, #0]
 8007d88:	6163      	str	r3, [r4, #20]
 8007d8a:	9b01      	ldr	r3, [sp, #4]
 8007d8c:	6120      	str	r0, [r4, #16]
 8007d8e:	b15b      	cbz	r3, 8007da8 <__smakebuf_r+0x74>
 8007d90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d94:	4630      	mov	r0, r6
 8007d96:	f000 feaf 	bl	8008af8 <_isatty_r>
 8007d9a:	b128      	cbz	r0, 8007da8 <__smakebuf_r+0x74>
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	f023 0303 	bic.w	r3, r3, #3
 8007da2:	f043 0301 	orr.w	r3, r3, #1
 8007da6:	81a3      	strh	r3, [r4, #12]
 8007da8:	89a0      	ldrh	r0, [r4, #12]
 8007daa:	4305      	orrs	r5, r0
 8007dac:	81a5      	strh	r5, [r4, #12]
 8007dae:	e7cd      	b.n	8007d4c <__smakebuf_r+0x18>
 8007db0:	08007b39 	.word	0x08007b39

08007db4 <malloc>:
 8007db4:	4b02      	ldr	r3, [pc, #8]	; (8007dc0 <malloc+0xc>)
 8007db6:	4601      	mov	r1, r0
 8007db8:	6818      	ldr	r0, [r3, #0]
 8007dba:	f000 bc17 	b.w	80085ec <_malloc_r>
 8007dbe:	bf00      	nop
 8007dc0:	24000010 	.word	0x24000010

08007dc4 <memcpy>:
 8007dc4:	440a      	add	r2, r1
 8007dc6:	4291      	cmp	r1, r2
 8007dc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dcc:	d100      	bne.n	8007dd0 <memcpy+0xc>
 8007dce:	4770      	bx	lr
 8007dd0:	b510      	push	{r4, lr}
 8007dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dda:	4291      	cmp	r1, r2
 8007ddc:	d1f9      	bne.n	8007dd2 <memcpy+0xe>
 8007dde:	bd10      	pop	{r4, pc}

08007de0 <_Balloc>:
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007de4:	4604      	mov	r4, r0
 8007de6:	460d      	mov	r5, r1
 8007de8:	b976      	cbnz	r6, 8007e08 <_Balloc+0x28>
 8007dea:	2010      	movs	r0, #16
 8007dec:	f7ff ffe2 	bl	8007db4 <malloc>
 8007df0:	4602      	mov	r2, r0
 8007df2:	6260      	str	r0, [r4, #36]	; 0x24
 8007df4:	b920      	cbnz	r0, 8007e00 <_Balloc+0x20>
 8007df6:	4b18      	ldr	r3, [pc, #96]	; (8007e58 <_Balloc+0x78>)
 8007df8:	4818      	ldr	r0, [pc, #96]	; (8007e5c <_Balloc+0x7c>)
 8007dfa:	2166      	movs	r1, #102	; 0x66
 8007dfc:	f000 fe2a 	bl	8008a54 <__assert_func>
 8007e00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e04:	6006      	str	r6, [r0, #0]
 8007e06:	60c6      	str	r6, [r0, #12]
 8007e08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e0a:	68f3      	ldr	r3, [r6, #12]
 8007e0c:	b183      	cbz	r3, 8007e30 <_Balloc+0x50>
 8007e0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e16:	b9b8      	cbnz	r0, 8007e48 <_Balloc+0x68>
 8007e18:	2101      	movs	r1, #1
 8007e1a:	fa01 f605 	lsl.w	r6, r1, r5
 8007e1e:	1d72      	adds	r2, r6, #5
 8007e20:	0092      	lsls	r2, r2, #2
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 fb60 	bl	80084e8 <_calloc_r>
 8007e28:	b160      	cbz	r0, 8007e44 <_Balloc+0x64>
 8007e2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e2e:	e00e      	b.n	8007e4e <_Balloc+0x6e>
 8007e30:	2221      	movs	r2, #33	; 0x21
 8007e32:	2104      	movs	r1, #4
 8007e34:	4620      	mov	r0, r4
 8007e36:	f000 fb57 	bl	80084e8 <_calloc_r>
 8007e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e3c:	60f0      	str	r0, [r6, #12]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1e4      	bne.n	8007e0e <_Balloc+0x2e>
 8007e44:	2000      	movs	r0, #0
 8007e46:	bd70      	pop	{r4, r5, r6, pc}
 8007e48:	6802      	ldr	r2, [r0, #0]
 8007e4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e54:	e7f7      	b.n	8007e46 <_Balloc+0x66>
 8007e56:	bf00      	nop
 8007e58:	08008d31 	.word	0x08008d31
 8007e5c:	08008e14 	.word	0x08008e14

08007e60 <_Bfree>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e64:	4605      	mov	r5, r0
 8007e66:	460c      	mov	r4, r1
 8007e68:	b976      	cbnz	r6, 8007e88 <_Bfree+0x28>
 8007e6a:	2010      	movs	r0, #16
 8007e6c:	f7ff ffa2 	bl	8007db4 <malloc>
 8007e70:	4602      	mov	r2, r0
 8007e72:	6268      	str	r0, [r5, #36]	; 0x24
 8007e74:	b920      	cbnz	r0, 8007e80 <_Bfree+0x20>
 8007e76:	4b09      	ldr	r3, [pc, #36]	; (8007e9c <_Bfree+0x3c>)
 8007e78:	4809      	ldr	r0, [pc, #36]	; (8007ea0 <_Bfree+0x40>)
 8007e7a:	218a      	movs	r1, #138	; 0x8a
 8007e7c:	f000 fdea 	bl	8008a54 <__assert_func>
 8007e80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e84:	6006      	str	r6, [r0, #0]
 8007e86:	60c6      	str	r6, [r0, #12]
 8007e88:	b13c      	cbz	r4, 8007e9a <_Bfree+0x3a>
 8007e8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e8c:	6862      	ldr	r2, [r4, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e94:	6021      	str	r1, [r4, #0]
 8007e96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}
 8007e9c:	08008d31 	.word	0x08008d31
 8007ea0:	08008e14 	.word	0x08008e14

08007ea4 <__multadd>:
 8007ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea8:	690d      	ldr	r5, [r1, #16]
 8007eaa:	4607      	mov	r7, r0
 8007eac:	460c      	mov	r4, r1
 8007eae:	461e      	mov	r6, r3
 8007eb0:	f101 0c14 	add.w	ip, r1, #20
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	f8dc 3000 	ldr.w	r3, [ip]
 8007eba:	b299      	uxth	r1, r3
 8007ebc:	fb02 6101 	mla	r1, r2, r1, r6
 8007ec0:	0c1e      	lsrs	r6, r3, #16
 8007ec2:	0c0b      	lsrs	r3, r1, #16
 8007ec4:	fb02 3306 	mla	r3, r2, r6, r3
 8007ec8:	b289      	uxth	r1, r1
 8007eca:	3001      	adds	r0, #1
 8007ecc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ed0:	4285      	cmp	r5, r0
 8007ed2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ed6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007eda:	dcec      	bgt.n	8007eb6 <__multadd+0x12>
 8007edc:	b30e      	cbz	r6, 8007f22 <__multadd+0x7e>
 8007ede:	68a3      	ldr	r3, [r4, #8]
 8007ee0:	42ab      	cmp	r3, r5
 8007ee2:	dc19      	bgt.n	8007f18 <__multadd+0x74>
 8007ee4:	6861      	ldr	r1, [r4, #4]
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	3101      	adds	r1, #1
 8007eea:	f7ff ff79 	bl	8007de0 <_Balloc>
 8007eee:	4680      	mov	r8, r0
 8007ef0:	b928      	cbnz	r0, 8007efe <__multadd+0x5a>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <__multadd+0x84>)
 8007ef6:	480d      	ldr	r0, [pc, #52]	; (8007f2c <__multadd+0x88>)
 8007ef8:	21b5      	movs	r1, #181	; 0xb5
 8007efa:	f000 fdab 	bl	8008a54 <__assert_func>
 8007efe:	6922      	ldr	r2, [r4, #16]
 8007f00:	3202      	adds	r2, #2
 8007f02:	f104 010c 	add.w	r1, r4, #12
 8007f06:	0092      	lsls	r2, r2, #2
 8007f08:	300c      	adds	r0, #12
 8007f0a:	f7ff ff5b 	bl	8007dc4 <memcpy>
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4638      	mov	r0, r7
 8007f12:	f7ff ffa5 	bl	8007e60 <_Bfree>
 8007f16:	4644      	mov	r4, r8
 8007f18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f1c:	3501      	adds	r5, #1
 8007f1e:	615e      	str	r6, [r3, #20]
 8007f20:	6125      	str	r5, [r4, #16]
 8007f22:	4620      	mov	r0, r4
 8007f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f28:	08008da3 	.word	0x08008da3
 8007f2c:	08008e14 	.word	0x08008e14

08007f30 <__hi0bits>:
 8007f30:	0c03      	lsrs	r3, r0, #16
 8007f32:	041b      	lsls	r3, r3, #16
 8007f34:	b9d3      	cbnz	r3, 8007f6c <__hi0bits+0x3c>
 8007f36:	0400      	lsls	r0, r0, #16
 8007f38:	2310      	movs	r3, #16
 8007f3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f3e:	bf04      	itt	eq
 8007f40:	0200      	lsleq	r0, r0, #8
 8007f42:	3308      	addeq	r3, #8
 8007f44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f48:	bf04      	itt	eq
 8007f4a:	0100      	lsleq	r0, r0, #4
 8007f4c:	3304      	addeq	r3, #4
 8007f4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f52:	bf04      	itt	eq
 8007f54:	0080      	lsleq	r0, r0, #2
 8007f56:	3302      	addeq	r3, #2
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	db05      	blt.n	8007f68 <__hi0bits+0x38>
 8007f5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f60:	f103 0301 	add.w	r3, r3, #1
 8007f64:	bf08      	it	eq
 8007f66:	2320      	moveq	r3, #32
 8007f68:	4618      	mov	r0, r3
 8007f6a:	4770      	bx	lr
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	e7e4      	b.n	8007f3a <__hi0bits+0xa>

08007f70 <__lo0bits>:
 8007f70:	6803      	ldr	r3, [r0, #0]
 8007f72:	f013 0207 	ands.w	r2, r3, #7
 8007f76:	4601      	mov	r1, r0
 8007f78:	d00b      	beq.n	8007f92 <__lo0bits+0x22>
 8007f7a:	07da      	lsls	r2, r3, #31
 8007f7c:	d423      	bmi.n	8007fc6 <__lo0bits+0x56>
 8007f7e:	0798      	lsls	r0, r3, #30
 8007f80:	bf49      	itett	mi
 8007f82:	085b      	lsrmi	r3, r3, #1
 8007f84:	089b      	lsrpl	r3, r3, #2
 8007f86:	2001      	movmi	r0, #1
 8007f88:	600b      	strmi	r3, [r1, #0]
 8007f8a:	bf5c      	itt	pl
 8007f8c:	600b      	strpl	r3, [r1, #0]
 8007f8e:	2002      	movpl	r0, #2
 8007f90:	4770      	bx	lr
 8007f92:	b298      	uxth	r0, r3
 8007f94:	b9a8      	cbnz	r0, 8007fc2 <__lo0bits+0x52>
 8007f96:	0c1b      	lsrs	r3, r3, #16
 8007f98:	2010      	movs	r0, #16
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	b90a      	cbnz	r2, 8007fa2 <__lo0bits+0x32>
 8007f9e:	3008      	adds	r0, #8
 8007fa0:	0a1b      	lsrs	r3, r3, #8
 8007fa2:	071a      	lsls	r2, r3, #28
 8007fa4:	bf04      	itt	eq
 8007fa6:	091b      	lsreq	r3, r3, #4
 8007fa8:	3004      	addeq	r0, #4
 8007faa:	079a      	lsls	r2, r3, #30
 8007fac:	bf04      	itt	eq
 8007fae:	089b      	lsreq	r3, r3, #2
 8007fb0:	3002      	addeq	r0, #2
 8007fb2:	07da      	lsls	r2, r3, #31
 8007fb4:	d403      	bmi.n	8007fbe <__lo0bits+0x4e>
 8007fb6:	085b      	lsrs	r3, r3, #1
 8007fb8:	f100 0001 	add.w	r0, r0, #1
 8007fbc:	d005      	beq.n	8007fca <__lo0bits+0x5a>
 8007fbe:	600b      	str	r3, [r1, #0]
 8007fc0:	4770      	bx	lr
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	e7e9      	b.n	8007f9a <__lo0bits+0x2a>
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	4770      	bx	lr
 8007fca:	2020      	movs	r0, #32
 8007fcc:	4770      	bx	lr
	...

08007fd0 <__i2b>:
 8007fd0:	b510      	push	{r4, lr}
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	f7ff ff03 	bl	8007de0 <_Balloc>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	b928      	cbnz	r0, 8007fea <__i2b+0x1a>
 8007fde:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <__i2b+0x24>)
 8007fe0:	4805      	ldr	r0, [pc, #20]	; (8007ff8 <__i2b+0x28>)
 8007fe2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007fe6:	f000 fd35 	bl	8008a54 <__assert_func>
 8007fea:	2301      	movs	r3, #1
 8007fec:	6144      	str	r4, [r0, #20]
 8007fee:	6103      	str	r3, [r0, #16]
 8007ff0:	bd10      	pop	{r4, pc}
 8007ff2:	bf00      	nop
 8007ff4:	08008da3 	.word	0x08008da3
 8007ff8:	08008e14 	.word	0x08008e14

08007ffc <__multiply>:
 8007ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008000:	4691      	mov	r9, r2
 8008002:	690a      	ldr	r2, [r1, #16]
 8008004:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008008:	429a      	cmp	r2, r3
 800800a:	bfb8      	it	lt
 800800c:	460b      	movlt	r3, r1
 800800e:	460c      	mov	r4, r1
 8008010:	bfbc      	itt	lt
 8008012:	464c      	movlt	r4, r9
 8008014:	4699      	movlt	r9, r3
 8008016:	6927      	ldr	r7, [r4, #16]
 8008018:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800801c:	68a3      	ldr	r3, [r4, #8]
 800801e:	6861      	ldr	r1, [r4, #4]
 8008020:	eb07 060a 	add.w	r6, r7, sl
 8008024:	42b3      	cmp	r3, r6
 8008026:	b085      	sub	sp, #20
 8008028:	bfb8      	it	lt
 800802a:	3101      	addlt	r1, #1
 800802c:	f7ff fed8 	bl	8007de0 <_Balloc>
 8008030:	b930      	cbnz	r0, 8008040 <__multiply+0x44>
 8008032:	4602      	mov	r2, r0
 8008034:	4b44      	ldr	r3, [pc, #272]	; (8008148 <__multiply+0x14c>)
 8008036:	4845      	ldr	r0, [pc, #276]	; (800814c <__multiply+0x150>)
 8008038:	f240 115d 	movw	r1, #349	; 0x15d
 800803c:	f000 fd0a 	bl	8008a54 <__assert_func>
 8008040:	f100 0514 	add.w	r5, r0, #20
 8008044:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008048:	462b      	mov	r3, r5
 800804a:	2200      	movs	r2, #0
 800804c:	4543      	cmp	r3, r8
 800804e:	d321      	bcc.n	8008094 <__multiply+0x98>
 8008050:	f104 0314 	add.w	r3, r4, #20
 8008054:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008058:	f109 0314 	add.w	r3, r9, #20
 800805c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008060:	9202      	str	r2, [sp, #8]
 8008062:	1b3a      	subs	r2, r7, r4
 8008064:	3a15      	subs	r2, #21
 8008066:	f022 0203 	bic.w	r2, r2, #3
 800806a:	3204      	adds	r2, #4
 800806c:	f104 0115 	add.w	r1, r4, #21
 8008070:	428f      	cmp	r7, r1
 8008072:	bf38      	it	cc
 8008074:	2204      	movcc	r2, #4
 8008076:	9201      	str	r2, [sp, #4]
 8008078:	9a02      	ldr	r2, [sp, #8]
 800807a:	9303      	str	r3, [sp, #12]
 800807c:	429a      	cmp	r2, r3
 800807e:	d80c      	bhi.n	800809a <__multiply+0x9e>
 8008080:	2e00      	cmp	r6, #0
 8008082:	dd03      	ble.n	800808c <__multiply+0x90>
 8008084:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008088:	2b00      	cmp	r3, #0
 800808a:	d05a      	beq.n	8008142 <__multiply+0x146>
 800808c:	6106      	str	r6, [r0, #16]
 800808e:	b005      	add	sp, #20
 8008090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008094:	f843 2b04 	str.w	r2, [r3], #4
 8008098:	e7d8      	b.n	800804c <__multiply+0x50>
 800809a:	f8b3 a000 	ldrh.w	sl, [r3]
 800809e:	f1ba 0f00 	cmp.w	sl, #0
 80080a2:	d024      	beq.n	80080ee <__multiply+0xf2>
 80080a4:	f104 0e14 	add.w	lr, r4, #20
 80080a8:	46a9      	mov	r9, r5
 80080aa:	f04f 0c00 	mov.w	ip, #0
 80080ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80080b2:	f8d9 1000 	ldr.w	r1, [r9]
 80080b6:	fa1f fb82 	uxth.w	fp, r2
 80080ba:	b289      	uxth	r1, r1
 80080bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80080c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80080c4:	f8d9 2000 	ldr.w	r2, [r9]
 80080c8:	4461      	add	r1, ip
 80080ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80080d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80080d6:	b289      	uxth	r1, r1
 80080d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80080dc:	4577      	cmp	r7, lr
 80080de:	f849 1b04 	str.w	r1, [r9], #4
 80080e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080e6:	d8e2      	bhi.n	80080ae <__multiply+0xb2>
 80080e8:	9a01      	ldr	r2, [sp, #4]
 80080ea:	f845 c002 	str.w	ip, [r5, r2]
 80080ee:	9a03      	ldr	r2, [sp, #12]
 80080f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80080f4:	3304      	adds	r3, #4
 80080f6:	f1b9 0f00 	cmp.w	r9, #0
 80080fa:	d020      	beq.n	800813e <__multiply+0x142>
 80080fc:	6829      	ldr	r1, [r5, #0]
 80080fe:	f104 0c14 	add.w	ip, r4, #20
 8008102:	46ae      	mov	lr, r5
 8008104:	f04f 0a00 	mov.w	sl, #0
 8008108:	f8bc b000 	ldrh.w	fp, [ip]
 800810c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008110:	fb09 220b 	mla	r2, r9, fp, r2
 8008114:	4492      	add	sl, r2
 8008116:	b289      	uxth	r1, r1
 8008118:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800811c:	f84e 1b04 	str.w	r1, [lr], #4
 8008120:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008124:	f8be 1000 	ldrh.w	r1, [lr]
 8008128:	0c12      	lsrs	r2, r2, #16
 800812a:	fb09 1102 	mla	r1, r9, r2, r1
 800812e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008132:	4567      	cmp	r7, ip
 8008134:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008138:	d8e6      	bhi.n	8008108 <__multiply+0x10c>
 800813a:	9a01      	ldr	r2, [sp, #4]
 800813c:	50a9      	str	r1, [r5, r2]
 800813e:	3504      	adds	r5, #4
 8008140:	e79a      	b.n	8008078 <__multiply+0x7c>
 8008142:	3e01      	subs	r6, #1
 8008144:	e79c      	b.n	8008080 <__multiply+0x84>
 8008146:	bf00      	nop
 8008148:	08008da3 	.word	0x08008da3
 800814c:	08008e14 	.word	0x08008e14

08008150 <__pow5mult>:
 8008150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008154:	4615      	mov	r5, r2
 8008156:	f012 0203 	ands.w	r2, r2, #3
 800815a:	4606      	mov	r6, r0
 800815c:	460f      	mov	r7, r1
 800815e:	d007      	beq.n	8008170 <__pow5mult+0x20>
 8008160:	4c25      	ldr	r4, [pc, #148]	; (80081f8 <__pow5mult+0xa8>)
 8008162:	3a01      	subs	r2, #1
 8008164:	2300      	movs	r3, #0
 8008166:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800816a:	f7ff fe9b 	bl	8007ea4 <__multadd>
 800816e:	4607      	mov	r7, r0
 8008170:	10ad      	asrs	r5, r5, #2
 8008172:	d03d      	beq.n	80081f0 <__pow5mult+0xa0>
 8008174:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008176:	b97c      	cbnz	r4, 8008198 <__pow5mult+0x48>
 8008178:	2010      	movs	r0, #16
 800817a:	f7ff fe1b 	bl	8007db4 <malloc>
 800817e:	4602      	mov	r2, r0
 8008180:	6270      	str	r0, [r6, #36]	; 0x24
 8008182:	b928      	cbnz	r0, 8008190 <__pow5mult+0x40>
 8008184:	4b1d      	ldr	r3, [pc, #116]	; (80081fc <__pow5mult+0xac>)
 8008186:	481e      	ldr	r0, [pc, #120]	; (8008200 <__pow5mult+0xb0>)
 8008188:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800818c:	f000 fc62 	bl	8008a54 <__assert_func>
 8008190:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008194:	6004      	str	r4, [r0, #0]
 8008196:	60c4      	str	r4, [r0, #12]
 8008198:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800819c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081a0:	b94c      	cbnz	r4, 80081b6 <__pow5mult+0x66>
 80081a2:	f240 2171 	movw	r1, #625	; 0x271
 80081a6:	4630      	mov	r0, r6
 80081a8:	f7ff ff12 	bl	8007fd0 <__i2b>
 80081ac:	2300      	movs	r3, #0
 80081ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80081b2:	4604      	mov	r4, r0
 80081b4:	6003      	str	r3, [r0, #0]
 80081b6:	f04f 0900 	mov.w	r9, #0
 80081ba:	07eb      	lsls	r3, r5, #31
 80081bc:	d50a      	bpl.n	80081d4 <__pow5mult+0x84>
 80081be:	4639      	mov	r1, r7
 80081c0:	4622      	mov	r2, r4
 80081c2:	4630      	mov	r0, r6
 80081c4:	f7ff ff1a 	bl	8007ffc <__multiply>
 80081c8:	4639      	mov	r1, r7
 80081ca:	4680      	mov	r8, r0
 80081cc:	4630      	mov	r0, r6
 80081ce:	f7ff fe47 	bl	8007e60 <_Bfree>
 80081d2:	4647      	mov	r7, r8
 80081d4:	106d      	asrs	r5, r5, #1
 80081d6:	d00b      	beq.n	80081f0 <__pow5mult+0xa0>
 80081d8:	6820      	ldr	r0, [r4, #0]
 80081da:	b938      	cbnz	r0, 80081ec <__pow5mult+0x9c>
 80081dc:	4622      	mov	r2, r4
 80081de:	4621      	mov	r1, r4
 80081e0:	4630      	mov	r0, r6
 80081e2:	f7ff ff0b 	bl	8007ffc <__multiply>
 80081e6:	6020      	str	r0, [r4, #0]
 80081e8:	f8c0 9000 	str.w	r9, [r0]
 80081ec:	4604      	mov	r4, r0
 80081ee:	e7e4      	b.n	80081ba <__pow5mult+0x6a>
 80081f0:	4638      	mov	r0, r7
 80081f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f6:	bf00      	nop
 80081f8:	08008f60 	.word	0x08008f60
 80081fc:	08008d31 	.word	0x08008d31
 8008200:	08008e14 	.word	0x08008e14

08008204 <__lshift>:
 8008204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008208:	460c      	mov	r4, r1
 800820a:	6849      	ldr	r1, [r1, #4]
 800820c:	6923      	ldr	r3, [r4, #16]
 800820e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008212:	68a3      	ldr	r3, [r4, #8]
 8008214:	4607      	mov	r7, r0
 8008216:	4691      	mov	r9, r2
 8008218:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800821c:	f108 0601 	add.w	r6, r8, #1
 8008220:	42b3      	cmp	r3, r6
 8008222:	db0b      	blt.n	800823c <__lshift+0x38>
 8008224:	4638      	mov	r0, r7
 8008226:	f7ff fddb 	bl	8007de0 <_Balloc>
 800822a:	4605      	mov	r5, r0
 800822c:	b948      	cbnz	r0, 8008242 <__lshift+0x3e>
 800822e:	4602      	mov	r2, r0
 8008230:	4b2a      	ldr	r3, [pc, #168]	; (80082dc <__lshift+0xd8>)
 8008232:	482b      	ldr	r0, [pc, #172]	; (80082e0 <__lshift+0xdc>)
 8008234:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008238:	f000 fc0c 	bl	8008a54 <__assert_func>
 800823c:	3101      	adds	r1, #1
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	e7ee      	b.n	8008220 <__lshift+0x1c>
 8008242:	2300      	movs	r3, #0
 8008244:	f100 0114 	add.w	r1, r0, #20
 8008248:	f100 0210 	add.w	r2, r0, #16
 800824c:	4618      	mov	r0, r3
 800824e:	4553      	cmp	r3, sl
 8008250:	db37      	blt.n	80082c2 <__lshift+0xbe>
 8008252:	6920      	ldr	r0, [r4, #16]
 8008254:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008258:	f104 0314 	add.w	r3, r4, #20
 800825c:	f019 091f 	ands.w	r9, r9, #31
 8008260:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008264:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008268:	d02f      	beq.n	80082ca <__lshift+0xc6>
 800826a:	f1c9 0e20 	rsb	lr, r9, #32
 800826e:	468a      	mov	sl, r1
 8008270:	f04f 0c00 	mov.w	ip, #0
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	fa02 f209 	lsl.w	r2, r2, r9
 800827a:	ea42 020c 	orr.w	r2, r2, ip
 800827e:	f84a 2b04 	str.w	r2, [sl], #4
 8008282:	f853 2b04 	ldr.w	r2, [r3], #4
 8008286:	4298      	cmp	r0, r3
 8008288:	fa22 fc0e 	lsr.w	ip, r2, lr
 800828c:	d8f2      	bhi.n	8008274 <__lshift+0x70>
 800828e:	1b03      	subs	r3, r0, r4
 8008290:	3b15      	subs	r3, #21
 8008292:	f023 0303 	bic.w	r3, r3, #3
 8008296:	3304      	adds	r3, #4
 8008298:	f104 0215 	add.w	r2, r4, #21
 800829c:	4290      	cmp	r0, r2
 800829e:	bf38      	it	cc
 80082a0:	2304      	movcc	r3, #4
 80082a2:	f841 c003 	str.w	ip, [r1, r3]
 80082a6:	f1bc 0f00 	cmp.w	ip, #0
 80082aa:	d001      	beq.n	80082b0 <__lshift+0xac>
 80082ac:	f108 0602 	add.w	r6, r8, #2
 80082b0:	3e01      	subs	r6, #1
 80082b2:	4638      	mov	r0, r7
 80082b4:	612e      	str	r6, [r5, #16]
 80082b6:	4621      	mov	r1, r4
 80082b8:	f7ff fdd2 	bl	8007e60 <_Bfree>
 80082bc:	4628      	mov	r0, r5
 80082be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80082c6:	3301      	adds	r3, #1
 80082c8:	e7c1      	b.n	800824e <__lshift+0x4a>
 80082ca:	3904      	subs	r1, #4
 80082cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80082d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80082d4:	4298      	cmp	r0, r3
 80082d6:	d8f9      	bhi.n	80082cc <__lshift+0xc8>
 80082d8:	e7ea      	b.n	80082b0 <__lshift+0xac>
 80082da:	bf00      	nop
 80082dc:	08008da3 	.word	0x08008da3
 80082e0:	08008e14 	.word	0x08008e14

080082e4 <__mcmp>:
 80082e4:	b530      	push	{r4, r5, lr}
 80082e6:	6902      	ldr	r2, [r0, #16]
 80082e8:	690c      	ldr	r4, [r1, #16]
 80082ea:	1b12      	subs	r2, r2, r4
 80082ec:	d10e      	bne.n	800830c <__mcmp+0x28>
 80082ee:	f100 0314 	add.w	r3, r0, #20
 80082f2:	3114      	adds	r1, #20
 80082f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80082f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80082fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008300:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008304:	42a5      	cmp	r5, r4
 8008306:	d003      	beq.n	8008310 <__mcmp+0x2c>
 8008308:	d305      	bcc.n	8008316 <__mcmp+0x32>
 800830a:	2201      	movs	r2, #1
 800830c:	4610      	mov	r0, r2
 800830e:	bd30      	pop	{r4, r5, pc}
 8008310:	4283      	cmp	r3, r0
 8008312:	d3f3      	bcc.n	80082fc <__mcmp+0x18>
 8008314:	e7fa      	b.n	800830c <__mcmp+0x28>
 8008316:	f04f 32ff 	mov.w	r2, #4294967295
 800831a:	e7f7      	b.n	800830c <__mcmp+0x28>

0800831c <__mdiff>:
 800831c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008320:	460c      	mov	r4, r1
 8008322:	4606      	mov	r6, r0
 8008324:	4611      	mov	r1, r2
 8008326:	4620      	mov	r0, r4
 8008328:	4690      	mov	r8, r2
 800832a:	f7ff ffdb 	bl	80082e4 <__mcmp>
 800832e:	1e05      	subs	r5, r0, #0
 8008330:	d110      	bne.n	8008354 <__mdiff+0x38>
 8008332:	4629      	mov	r1, r5
 8008334:	4630      	mov	r0, r6
 8008336:	f7ff fd53 	bl	8007de0 <_Balloc>
 800833a:	b930      	cbnz	r0, 800834a <__mdiff+0x2e>
 800833c:	4b3a      	ldr	r3, [pc, #232]	; (8008428 <__mdiff+0x10c>)
 800833e:	4602      	mov	r2, r0
 8008340:	f240 2132 	movw	r1, #562	; 0x232
 8008344:	4839      	ldr	r0, [pc, #228]	; (800842c <__mdiff+0x110>)
 8008346:	f000 fb85 	bl	8008a54 <__assert_func>
 800834a:	2301      	movs	r3, #1
 800834c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008350:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008354:	bfa4      	itt	ge
 8008356:	4643      	movge	r3, r8
 8008358:	46a0      	movge	r8, r4
 800835a:	4630      	mov	r0, r6
 800835c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008360:	bfa6      	itte	ge
 8008362:	461c      	movge	r4, r3
 8008364:	2500      	movge	r5, #0
 8008366:	2501      	movlt	r5, #1
 8008368:	f7ff fd3a 	bl	8007de0 <_Balloc>
 800836c:	b920      	cbnz	r0, 8008378 <__mdiff+0x5c>
 800836e:	4b2e      	ldr	r3, [pc, #184]	; (8008428 <__mdiff+0x10c>)
 8008370:	4602      	mov	r2, r0
 8008372:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008376:	e7e5      	b.n	8008344 <__mdiff+0x28>
 8008378:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800837c:	6926      	ldr	r6, [r4, #16]
 800837e:	60c5      	str	r5, [r0, #12]
 8008380:	f104 0914 	add.w	r9, r4, #20
 8008384:	f108 0514 	add.w	r5, r8, #20
 8008388:	f100 0e14 	add.w	lr, r0, #20
 800838c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008390:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008394:	f108 0210 	add.w	r2, r8, #16
 8008398:	46f2      	mov	sl, lr
 800839a:	2100      	movs	r1, #0
 800839c:	f859 3b04 	ldr.w	r3, [r9], #4
 80083a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80083a4:	fa1f f883 	uxth.w	r8, r3
 80083a8:	fa11 f18b 	uxtah	r1, r1, fp
 80083ac:	0c1b      	lsrs	r3, r3, #16
 80083ae:	eba1 0808 	sub.w	r8, r1, r8
 80083b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80083ba:	fa1f f888 	uxth.w	r8, r8
 80083be:	1419      	asrs	r1, r3, #16
 80083c0:	454e      	cmp	r6, r9
 80083c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80083c6:	f84a 3b04 	str.w	r3, [sl], #4
 80083ca:	d8e7      	bhi.n	800839c <__mdiff+0x80>
 80083cc:	1b33      	subs	r3, r6, r4
 80083ce:	3b15      	subs	r3, #21
 80083d0:	f023 0303 	bic.w	r3, r3, #3
 80083d4:	3304      	adds	r3, #4
 80083d6:	3415      	adds	r4, #21
 80083d8:	42a6      	cmp	r6, r4
 80083da:	bf38      	it	cc
 80083dc:	2304      	movcc	r3, #4
 80083de:	441d      	add	r5, r3
 80083e0:	4473      	add	r3, lr
 80083e2:	469e      	mov	lr, r3
 80083e4:	462e      	mov	r6, r5
 80083e6:	4566      	cmp	r6, ip
 80083e8:	d30e      	bcc.n	8008408 <__mdiff+0xec>
 80083ea:	f10c 0203 	add.w	r2, ip, #3
 80083ee:	1b52      	subs	r2, r2, r5
 80083f0:	f022 0203 	bic.w	r2, r2, #3
 80083f4:	3d03      	subs	r5, #3
 80083f6:	45ac      	cmp	ip, r5
 80083f8:	bf38      	it	cc
 80083fa:	2200      	movcc	r2, #0
 80083fc:	441a      	add	r2, r3
 80083fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008402:	b17b      	cbz	r3, 8008424 <__mdiff+0x108>
 8008404:	6107      	str	r7, [r0, #16]
 8008406:	e7a3      	b.n	8008350 <__mdiff+0x34>
 8008408:	f856 8b04 	ldr.w	r8, [r6], #4
 800840c:	fa11 f288 	uxtah	r2, r1, r8
 8008410:	1414      	asrs	r4, r2, #16
 8008412:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008416:	b292      	uxth	r2, r2
 8008418:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800841c:	f84e 2b04 	str.w	r2, [lr], #4
 8008420:	1421      	asrs	r1, r4, #16
 8008422:	e7e0      	b.n	80083e6 <__mdiff+0xca>
 8008424:	3f01      	subs	r7, #1
 8008426:	e7ea      	b.n	80083fe <__mdiff+0xe2>
 8008428:	08008da3 	.word	0x08008da3
 800842c:	08008e14 	.word	0x08008e14

08008430 <__d2b>:
 8008430:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008434:	4689      	mov	r9, r1
 8008436:	2101      	movs	r1, #1
 8008438:	ec57 6b10 	vmov	r6, r7, d0
 800843c:	4690      	mov	r8, r2
 800843e:	f7ff fccf 	bl	8007de0 <_Balloc>
 8008442:	4604      	mov	r4, r0
 8008444:	b930      	cbnz	r0, 8008454 <__d2b+0x24>
 8008446:	4602      	mov	r2, r0
 8008448:	4b25      	ldr	r3, [pc, #148]	; (80084e0 <__d2b+0xb0>)
 800844a:	4826      	ldr	r0, [pc, #152]	; (80084e4 <__d2b+0xb4>)
 800844c:	f240 310a 	movw	r1, #778	; 0x30a
 8008450:	f000 fb00 	bl	8008a54 <__assert_func>
 8008454:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008458:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800845c:	bb35      	cbnz	r5, 80084ac <__d2b+0x7c>
 800845e:	2e00      	cmp	r6, #0
 8008460:	9301      	str	r3, [sp, #4]
 8008462:	d028      	beq.n	80084b6 <__d2b+0x86>
 8008464:	4668      	mov	r0, sp
 8008466:	9600      	str	r6, [sp, #0]
 8008468:	f7ff fd82 	bl	8007f70 <__lo0bits>
 800846c:	9900      	ldr	r1, [sp, #0]
 800846e:	b300      	cbz	r0, 80084b2 <__d2b+0x82>
 8008470:	9a01      	ldr	r2, [sp, #4]
 8008472:	f1c0 0320 	rsb	r3, r0, #32
 8008476:	fa02 f303 	lsl.w	r3, r2, r3
 800847a:	430b      	orrs	r3, r1
 800847c:	40c2      	lsrs	r2, r0
 800847e:	6163      	str	r3, [r4, #20]
 8008480:	9201      	str	r2, [sp, #4]
 8008482:	9b01      	ldr	r3, [sp, #4]
 8008484:	61a3      	str	r3, [r4, #24]
 8008486:	2b00      	cmp	r3, #0
 8008488:	bf14      	ite	ne
 800848a:	2202      	movne	r2, #2
 800848c:	2201      	moveq	r2, #1
 800848e:	6122      	str	r2, [r4, #16]
 8008490:	b1d5      	cbz	r5, 80084c8 <__d2b+0x98>
 8008492:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008496:	4405      	add	r5, r0
 8008498:	f8c9 5000 	str.w	r5, [r9]
 800849c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084a0:	f8c8 0000 	str.w	r0, [r8]
 80084a4:	4620      	mov	r0, r4
 80084a6:	b003      	add	sp, #12
 80084a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084b0:	e7d5      	b.n	800845e <__d2b+0x2e>
 80084b2:	6161      	str	r1, [r4, #20]
 80084b4:	e7e5      	b.n	8008482 <__d2b+0x52>
 80084b6:	a801      	add	r0, sp, #4
 80084b8:	f7ff fd5a 	bl	8007f70 <__lo0bits>
 80084bc:	9b01      	ldr	r3, [sp, #4]
 80084be:	6163      	str	r3, [r4, #20]
 80084c0:	2201      	movs	r2, #1
 80084c2:	6122      	str	r2, [r4, #16]
 80084c4:	3020      	adds	r0, #32
 80084c6:	e7e3      	b.n	8008490 <__d2b+0x60>
 80084c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084d0:	f8c9 0000 	str.w	r0, [r9]
 80084d4:	6918      	ldr	r0, [r3, #16]
 80084d6:	f7ff fd2b 	bl	8007f30 <__hi0bits>
 80084da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084de:	e7df      	b.n	80084a0 <__d2b+0x70>
 80084e0:	08008da3 	.word	0x08008da3
 80084e4:	08008e14 	.word	0x08008e14

080084e8 <_calloc_r>:
 80084e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084ea:	fba1 2402 	umull	r2, r4, r1, r2
 80084ee:	b94c      	cbnz	r4, 8008504 <_calloc_r+0x1c>
 80084f0:	4611      	mov	r1, r2
 80084f2:	9201      	str	r2, [sp, #4]
 80084f4:	f000 f87a 	bl	80085ec <_malloc_r>
 80084f8:	9a01      	ldr	r2, [sp, #4]
 80084fa:	4605      	mov	r5, r0
 80084fc:	b930      	cbnz	r0, 800850c <_calloc_r+0x24>
 80084fe:	4628      	mov	r0, r5
 8008500:	b003      	add	sp, #12
 8008502:	bd30      	pop	{r4, r5, pc}
 8008504:	220c      	movs	r2, #12
 8008506:	6002      	str	r2, [r0, #0]
 8008508:	2500      	movs	r5, #0
 800850a:	e7f8      	b.n	80084fe <_calloc_r+0x16>
 800850c:	4621      	mov	r1, r4
 800850e:	f7fd fe9b 	bl	8006248 <memset>
 8008512:	e7f4      	b.n	80084fe <_calloc_r+0x16>

08008514 <_free_r>:
 8008514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008516:	2900      	cmp	r1, #0
 8008518:	d044      	beq.n	80085a4 <_free_r+0x90>
 800851a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800851e:	9001      	str	r0, [sp, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	f1a1 0404 	sub.w	r4, r1, #4
 8008526:	bfb8      	it	lt
 8008528:	18e4      	addlt	r4, r4, r3
 800852a:	f000 fb19 	bl	8008b60 <__malloc_lock>
 800852e:	4a1e      	ldr	r2, [pc, #120]	; (80085a8 <_free_r+0x94>)
 8008530:	9801      	ldr	r0, [sp, #4]
 8008532:	6813      	ldr	r3, [r2, #0]
 8008534:	b933      	cbnz	r3, 8008544 <_free_r+0x30>
 8008536:	6063      	str	r3, [r4, #4]
 8008538:	6014      	str	r4, [r2, #0]
 800853a:	b003      	add	sp, #12
 800853c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008540:	f000 bb14 	b.w	8008b6c <__malloc_unlock>
 8008544:	42a3      	cmp	r3, r4
 8008546:	d908      	bls.n	800855a <_free_r+0x46>
 8008548:	6825      	ldr	r5, [r4, #0]
 800854a:	1961      	adds	r1, r4, r5
 800854c:	428b      	cmp	r3, r1
 800854e:	bf01      	itttt	eq
 8008550:	6819      	ldreq	r1, [r3, #0]
 8008552:	685b      	ldreq	r3, [r3, #4]
 8008554:	1949      	addeq	r1, r1, r5
 8008556:	6021      	streq	r1, [r4, #0]
 8008558:	e7ed      	b.n	8008536 <_free_r+0x22>
 800855a:	461a      	mov	r2, r3
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	b10b      	cbz	r3, 8008564 <_free_r+0x50>
 8008560:	42a3      	cmp	r3, r4
 8008562:	d9fa      	bls.n	800855a <_free_r+0x46>
 8008564:	6811      	ldr	r1, [r2, #0]
 8008566:	1855      	adds	r5, r2, r1
 8008568:	42a5      	cmp	r5, r4
 800856a:	d10b      	bne.n	8008584 <_free_r+0x70>
 800856c:	6824      	ldr	r4, [r4, #0]
 800856e:	4421      	add	r1, r4
 8008570:	1854      	adds	r4, r2, r1
 8008572:	42a3      	cmp	r3, r4
 8008574:	6011      	str	r1, [r2, #0]
 8008576:	d1e0      	bne.n	800853a <_free_r+0x26>
 8008578:	681c      	ldr	r4, [r3, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	6053      	str	r3, [r2, #4]
 800857e:	4421      	add	r1, r4
 8008580:	6011      	str	r1, [r2, #0]
 8008582:	e7da      	b.n	800853a <_free_r+0x26>
 8008584:	d902      	bls.n	800858c <_free_r+0x78>
 8008586:	230c      	movs	r3, #12
 8008588:	6003      	str	r3, [r0, #0]
 800858a:	e7d6      	b.n	800853a <_free_r+0x26>
 800858c:	6825      	ldr	r5, [r4, #0]
 800858e:	1961      	adds	r1, r4, r5
 8008590:	428b      	cmp	r3, r1
 8008592:	bf04      	itt	eq
 8008594:	6819      	ldreq	r1, [r3, #0]
 8008596:	685b      	ldreq	r3, [r3, #4]
 8008598:	6063      	str	r3, [r4, #4]
 800859a:	bf04      	itt	eq
 800859c:	1949      	addeq	r1, r1, r5
 800859e:	6021      	streq	r1, [r4, #0]
 80085a0:	6054      	str	r4, [r2, #4]
 80085a2:	e7ca      	b.n	800853a <_free_r+0x26>
 80085a4:	b003      	add	sp, #12
 80085a6:	bd30      	pop	{r4, r5, pc}
 80085a8:	24000320 	.word	0x24000320

080085ac <sbrk_aligned>:
 80085ac:	b570      	push	{r4, r5, r6, lr}
 80085ae:	4e0e      	ldr	r6, [pc, #56]	; (80085e8 <sbrk_aligned+0x3c>)
 80085b0:	460c      	mov	r4, r1
 80085b2:	6831      	ldr	r1, [r6, #0]
 80085b4:	4605      	mov	r5, r0
 80085b6:	b911      	cbnz	r1, 80085be <sbrk_aligned+0x12>
 80085b8:	f000 f9e6 	bl	8008988 <_sbrk_r>
 80085bc:	6030      	str	r0, [r6, #0]
 80085be:	4621      	mov	r1, r4
 80085c0:	4628      	mov	r0, r5
 80085c2:	f000 f9e1 	bl	8008988 <_sbrk_r>
 80085c6:	1c43      	adds	r3, r0, #1
 80085c8:	d00a      	beq.n	80085e0 <sbrk_aligned+0x34>
 80085ca:	1cc4      	adds	r4, r0, #3
 80085cc:	f024 0403 	bic.w	r4, r4, #3
 80085d0:	42a0      	cmp	r0, r4
 80085d2:	d007      	beq.n	80085e4 <sbrk_aligned+0x38>
 80085d4:	1a21      	subs	r1, r4, r0
 80085d6:	4628      	mov	r0, r5
 80085d8:	f000 f9d6 	bl	8008988 <_sbrk_r>
 80085dc:	3001      	adds	r0, #1
 80085de:	d101      	bne.n	80085e4 <sbrk_aligned+0x38>
 80085e0:	f04f 34ff 	mov.w	r4, #4294967295
 80085e4:	4620      	mov	r0, r4
 80085e6:	bd70      	pop	{r4, r5, r6, pc}
 80085e8:	24000324 	.word	0x24000324

080085ec <_malloc_r>:
 80085ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f0:	1ccd      	adds	r5, r1, #3
 80085f2:	f025 0503 	bic.w	r5, r5, #3
 80085f6:	3508      	adds	r5, #8
 80085f8:	2d0c      	cmp	r5, #12
 80085fa:	bf38      	it	cc
 80085fc:	250c      	movcc	r5, #12
 80085fe:	2d00      	cmp	r5, #0
 8008600:	4607      	mov	r7, r0
 8008602:	db01      	blt.n	8008608 <_malloc_r+0x1c>
 8008604:	42a9      	cmp	r1, r5
 8008606:	d905      	bls.n	8008614 <_malloc_r+0x28>
 8008608:	230c      	movs	r3, #12
 800860a:	603b      	str	r3, [r7, #0]
 800860c:	2600      	movs	r6, #0
 800860e:	4630      	mov	r0, r6
 8008610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008614:	4e2e      	ldr	r6, [pc, #184]	; (80086d0 <_malloc_r+0xe4>)
 8008616:	f000 faa3 	bl	8008b60 <__malloc_lock>
 800861a:	6833      	ldr	r3, [r6, #0]
 800861c:	461c      	mov	r4, r3
 800861e:	bb34      	cbnz	r4, 800866e <_malloc_r+0x82>
 8008620:	4629      	mov	r1, r5
 8008622:	4638      	mov	r0, r7
 8008624:	f7ff ffc2 	bl	80085ac <sbrk_aligned>
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	4604      	mov	r4, r0
 800862c:	d14d      	bne.n	80086ca <_malloc_r+0xde>
 800862e:	6834      	ldr	r4, [r6, #0]
 8008630:	4626      	mov	r6, r4
 8008632:	2e00      	cmp	r6, #0
 8008634:	d140      	bne.n	80086b8 <_malloc_r+0xcc>
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	4631      	mov	r1, r6
 800863a:	4638      	mov	r0, r7
 800863c:	eb04 0803 	add.w	r8, r4, r3
 8008640:	f000 f9a2 	bl	8008988 <_sbrk_r>
 8008644:	4580      	cmp	r8, r0
 8008646:	d13a      	bne.n	80086be <_malloc_r+0xd2>
 8008648:	6821      	ldr	r1, [r4, #0]
 800864a:	3503      	adds	r5, #3
 800864c:	1a6d      	subs	r5, r5, r1
 800864e:	f025 0503 	bic.w	r5, r5, #3
 8008652:	3508      	adds	r5, #8
 8008654:	2d0c      	cmp	r5, #12
 8008656:	bf38      	it	cc
 8008658:	250c      	movcc	r5, #12
 800865a:	4629      	mov	r1, r5
 800865c:	4638      	mov	r0, r7
 800865e:	f7ff ffa5 	bl	80085ac <sbrk_aligned>
 8008662:	3001      	adds	r0, #1
 8008664:	d02b      	beq.n	80086be <_malloc_r+0xd2>
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	442b      	add	r3, r5
 800866a:	6023      	str	r3, [r4, #0]
 800866c:	e00e      	b.n	800868c <_malloc_r+0xa0>
 800866e:	6822      	ldr	r2, [r4, #0]
 8008670:	1b52      	subs	r2, r2, r5
 8008672:	d41e      	bmi.n	80086b2 <_malloc_r+0xc6>
 8008674:	2a0b      	cmp	r2, #11
 8008676:	d916      	bls.n	80086a6 <_malloc_r+0xba>
 8008678:	1961      	adds	r1, r4, r5
 800867a:	42a3      	cmp	r3, r4
 800867c:	6025      	str	r5, [r4, #0]
 800867e:	bf18      	it	ne
 8008680:	6059      	strne	r1, [r3, #4]
 8008682:	6863      	ldr	r3, [r4, #4]
 8008684:	bf08      	it	eq
 8008686:	6031      	streq	r1, [r6, #0]
 8008688:	5162      	str	r2, [r4, r5]
 800868a:	604b      	str	r3, [r1, #4]
 800868c:	4638      	mov	r0, r7
 800868e:	f104 060b 	add.w	r6, r4, #11
 8008692:	f000 fa6b 	bl	8008b6c <__malloc_unlock>
 8008696:	f026 0607 	bic.w	r6, r6, #7
 800869a:	1d23      	adds	r3, r4, #4
 800869c:	1af2      	subs	r2, r6, r3
 800869e:	d0b6      	beq.n	800860e <_malloc_r+0x22>
 80086a0:	1b9b      	subs	r3, r3, r6
 80086a2:	50a3      	str	r3, [r4, r2]
 80086a4:	e7b3      	b.n	800860e <_malloc_r+0x22>
 80086a6:	6862      	ldr	r2, [r4, #4]
 80086a8:	42a3      	cmp	r3, r4
 80086aa:	bf0c      	ite	eq
 80086ac:	6032      	streq	r2, [r6, #0]
 80086ae:	605a      	strne	r2, [r3, #4]
 80086b0:	e7ec      	b.n	800868c <_malloc_r+0xa0>
 80086b2:	4623      	mov	r3, r4
 80086b4:	6864      	ldr	r4, [r4, #4]
 80086b6:	e7b2      	b.n	800861e <_malloc_r+0x32>
 80086b8:	4634      	mov	r4, r6
 80086ba:	6876      	ldr	r6, [r6, #4]
 80086bc:	e7b9      	b.n	8008632 <_malloc_r+0x46>
 80086be:	230c      	movs	r3, #12
 80086c0:	603b      	str	r3, [r7, #0]
 80086c2:	4638      	mov	r0, r7
 80086c4:	f000 fa52 	bl	8008b6c <__malloc_unlock>
 80086c8:	e7a1      	b.n	800860e <_malloc_r+0x22>
 80086ca:	6025      	str	r5, [r4, #0]
 80086cc:	e7de      	b.n	800868c <_malloc_r+0xa0>
 80086ce:	bf00      	nop
 80086d0:	24000320 	.word	0x24000320

080086d4 <__sfputc_r>:
 80086d4:	6893      	ldr	r3, [r2, #8]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	2b00      	cmp	r3, #0
 80086da:	b410      	push	{r4}
 80086dc:	6093      	str	r3, [r2, #8]
 80086de:	da08      	bge.n	80086f2 <__sfputc_r+0x1e>
 80086e0:	6994      	ldr	r4, [r2, #24]
 80086e2:	42a3      	cmp	r3, r4
 80086e4:	db01      	blt.n	80086ea <__sfputc_r+0x16>
 80086e6:	290a      	cmp	r1, #10
 80086e8:	d103      	bne.n	80086f2 <__sfputc_r+0x1e>
 80086ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086ee:	f7fe ba83 	b.w	8006bf8 <__swbuf_r>
 80086f2:	6813      	ldr	r3, [r2, #0]
 80086f4:	1c58      	adds	r0, r3, #1
 80086f6:	6010      	str	r0, [r2, #0]
 80086f8:	7019      	strb	r1, [r3, #0]
 80086fa:	4608      	mov	r0, r1
 80086fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008700:	4770      	bx	lr

08008702 <__sfputs_r>:
 8008702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008704:	4606      	mov	r6, r0
 8008706:	460f      	mov	r7, r1
 8008708:	4614      	mov	r4, r2
 800870a:	18d5      	adds	r5, r2, r3
 800870c:	42ac      	cmp	r4, r5
 800870e:	d101      	bne.n	8008714 <__sfputs_r+0x12>
 8008710:	2000      	movs	r0, #0
 8008712:	e007      	b.n	8008724 <__sfputs_r+0x22>
 8008714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008718:	463a      	mov	r2, r7
 800871a:	4630      	mov	r0, r6
 800871c:	f7ff ffda 	bl	80086d4 <__sfputc_r>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d1f3      	bne.n	800870c <__sfputs_r+0xa>
 8008724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008728 <_vfiprintf_r>:
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	460d      	mov	r5, r1
 800872e:	b09d      	sub	sp, #116	; 0x74
 8008730:	4614      	mov	r4, r2
 8008732:	4698      	mov	r8, r3
 8008734:	4606      	mov	r6, r0
 8008736:	b118      	cbz	r0, 8008740 <_vfiprintf_r+0x18>
 8008738:	6983      	ldr	r3, [r0, #24]
 800873a:	b90b      	cbnz	r3, 8008740 <_vfiprintf_r+0x18>
 800873c:	f7ff fa30 	bl	8007ba0 <__sinit>
 8008740:	4b89      	ldr	r3, [pc, #548]	; (8008968 <_vfiprintf_r+0x240>)
 8008742:	429d      	cmp	r5, r3
 8008744:	d11b      	bne.n	800877e <_vfiprintf_r+0x56>
 8008746:	6875      	ldr	r5, [r6, #4]
 8008748:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800874a:	07d9      	lsls	r1, r3, #31
 800874c:	d405      	bmi.n	800875a <_vfiprintf_r+0x32>
 800874e:	89ab      	ldrh	r3, [r5, #12]
 8008750:	059a      	lsls	r2, r3, #22
 8008752:	d402      	bmi.n	800875a <_vfiprintf_r+0x32>
 8008754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008756:	f7ff fac6 	bl	8007ce6 <__retarget_lock_acquire_recursive>
 800875a:	89ab      	ldrh	r3, [r5, #12]
 800875c:	071b      	lsls	r3, r3, #28
 800875e:	d501      	bpl.n	8008764 <_vfiprintf_r+0x3c>
 8008760:	692b      	ldr	r3, [r5, #16]
 8008762:	b9eb      	cbnz	r3, 80087a0 <_vfiprintf_r+0x78>
 8008764:	4629      	mov	r1, r5
 8008766:	4630      	mov	r0, r6
 8008768:	f7fe fa98 	bl	8006c9c <__swsetup_r>
 800876c:	b1c0      	cbz	r0, 80087a0 <_vfiprintf_r+0x78>
 800876e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008770:	07dc      	lsls	r4, r3, #31
 8008772:	d50e      	bpl.n	8008792 <_vfiprintf_r+0x6a>
 8008774:	f04f 30ff 	mov.w	r0, #4294967295
 8008778:	b01d      	add	sp, #116	; 0x74
 800877a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800877e:	4b7b      	ldr	r3, [pc, #492]	; (800896c <_vfiprintf_r+0x244>)
 8008780:	429d      	cmp	r5, r3
 8008782:	d101      	bne.n	8008788 <_vfiprintf_r+0x60>
 8008784:	68b5      	ldr	r5, [r6, #8]
 8008786:	e7df      	b.n	8008748 <_vfiprintf_r+0x20>
 8008788:	4b79      	ldr	r3, [pc, #484]	; (8008970 <_vfiprintf_r+0x248>)
 800878a:	429d      	cmp	r5, r3
 800878c:	bf08      	it	eq
 800878e:	68f5      	ldreq	r5, [r6, #12]
 8008790:	e7da      	b.n	8008748 <_vfiprintf_r+0x20>
 8008792:	89ab      	ldrh	r3, [r5, #12]
 8008794:	0598      	lsls	r0, r3, #22
 8008796:	d4ed      	bmi.n	8008774 <_vfiprintf_r+0x4c>
 8008798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800879a:	f7ff faa5 	bl	8007ce8 <__retarget_lock_release_recursive>
 800879e:	e7e9      	b.n	8008774 <_vfiprintf_r+0x4c>
 80087a0:	2300      	movs	r3, #0
 80087a2:	9309      	str	r3, [sp, #36]	; 0x24
 80087a4:	2320      	movs	r3, #32
 80087a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80087ae:	2330      	movs	r3, #48	; 0x30
 80087b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008974 <_vfiprintf_r+0x24c>
 80087b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087b8:	f04f 0901 	mov.w	r9, #1
 80087bc:	4623      	mov	r3, r4
 80087be:	469a      	mov	sl, r3
 80087c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087c4:	b10a      	cbz	r2, 80087ca <_vfiprintf_r+0xa2>
 80087c6:	2a25      	cmp	r2, #37	; 0x25
 80087c8:	d1f9      	bne.n	80087be <_vfiprintf_r+0x96>
 80087ca:	ebba 0b04 	subs.w	fp, sl, r4
 80087ce:	d00b      	beq.n	80087e8 <_vfiprintf_r+0xc0>
 80087d0:	465b      	mov	r3, fp
 80087d2:	4622      	mov	r2, r4
 80087d4:	4629      	mov	r1, r5
 80087d6:	4630      	mov	r0, r6
 80087d8:	f7ff ff93 	bl	8008702 <__sfputs_r>
 80087dc:	3001      	adds	r0, #1
 80087de:	f000 80aa 	beq.w	8008936 <_vfiprintf_r+0x20e>
 80087e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087e4:	445a      	add	r2, fp
 80087e6:	9209      	str	r2, [sp, #36]	; 0x24
 80087e8:	f89a 3000 	ldrb.w	r3, [sl]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f000 80a2 	beq.w	8008936 <_vfiprintf_r+0x20e>
 80087f2:	2300      	movs	r3, #0
 80087f4:	f04f 32ff 	mov.w	r2, #4294967295
 80087f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087fc:	f10a 0a01 	add.w	sl, sl, #1
 8008800:	9304      	str	r3, [sp, #16]
 8008802:	9307      	str	r3, [sp, #28]
 8008804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008808:	931a      	str	r3, [sp, #104]	; 0x68
 800880a:	4654      	mov	r4, sl
 800880c:	2205      	movs	r2, #5
 800880e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008812:	4858      	ldr	r0, [pc, #352]	; (8008974 <_vfiprintf_r+0x24c>)
 8008814:	f7f7 fd6c 	bl	80002f0 <memchr>
 8008818:	9a04      	ldr	r2, [sp, #16]
 800881a:	b9d8      	cbnz	r0, 8008854 <_vfiprintf_r+0x12c>
 800881c:	06d1      	lsls	r1, r2, #27
 800881e:	bf44      	itt	mi
 8008820:	2320      	movmi	r3, #32
 8008822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008826:	0713      	lsls	r3, r2, #28
 8008828:	bf44      	itt	mi
 800882a:	232b      	movmi	r3, #43	; 0x2b
 800882c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008830:	f89a 3000 	ldrb.w	r3, [sl]
 8008834:	2b2a      	cmp	r3, #42	; 0x2a
 8008836:	d015      	beq.n	8008864 <_vfiprintf_r+0x13c>
 8008838:	9a07      	ldr	r2, [sp, #28]
 800883a:	4654      	mov	r4, sl
 800883c:	2000      	movs	r0, #0
 800883e:	f04f 0c0a 	mov.w	ip, #10
 8008842:	4621      	mov	r1, r4
 8008844:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008848:	3b30      	subs	r3, #48	; 0x30
 800884a:	2b09      	cmp	r3, #9
 800884c:	d94e      	bls.n	80088ec <_vfiprintf_r+0x1c4>
 800884e:	b1b0      	cbz	r0, 800887e <_vfiprintf_r+0x156>
 8008850:	9207      	str	r2, [sp, #28]
 8008852:	e014      	b.n	800887e <_vfiprintf_r+0x156>
 8008854:	eba0 0308 	sub.w	r3, r0, r8
 8008858:	fa09 f303 	lsl.w	r3, r9, r3
 800885c:	4313      	orrs	r3, r2
 800885e:	9304      	str	r3, [sp, #16]
 8008860:	46a2      	mov	sl, r4
 8008862:	e7d2      	b.n	800880a <_vfiprintf_r+0xe2>
 8008864:	9b03      	ldr	r3, [sp, #12]
 8008866:	1d19      	adds	r1, r3, #4
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	9103      	str	r1, [sp, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	bfbb      	ittet	lt
 8008870:	425b      	neglt	r3, r3
 8008872:	f042 0202 	orrlt.w	r2, r2, #2
 8008876:	9307      	strge	r3, [sp, #28]
 8008878:	9307      	strlt	r3, [sp, #28]
 800887a:	bfb8      	it	lt
 800887c:	9204      	strlt	r2, [sp, #16]
 800887e:	7823      	ldrb	r3, [r4, #0]
 8008880:	2b2e      	cmp	r3, #46	; 0x2e
 8008882:	d10c      	bne.n	800889e <_vfiprintf_r+0x176>
 8008884:	7863      	ldrb	r3, [r4, #1]
 8008886:	2b2a      	cmp	r3, #42	; 0x2a
 8008888:	d135      	bne.n	80088f6 <_vfiprintf_r+0x1ce>
 800888a:	9b03      	ldr	r3, [sp, #12]
 800888c:	1d1a      	adds	r2, r3, #4
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	9203      	str	r2, [sp, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	bfb8      	it	lt
 8008896:	f04f 33ff 	movlt.w	r3, #4294967295
 800889a:	3402      	adds	r4, #2
 800889c:	9305      	str	r3, [sp, #20]
 800889e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008984 <_vfiprintf_r+0x25c>
 80088a2:	7821      	ldrb	r1, [r4, #0]
 80088a4:	2203      	movs	r2, #3
 80088a6:	4650      	mov	r0, sl
 80088a8:	f7f7 fd22 	bl	80002f0 <memchr>
 80088ac:	b140      	cbz	r0, 80088c0 <_vfiprintf_r+0x198>
 80088ae:	2340      	movs	r3, #64	; 0x40
 80088b0:	eba0 000a 	sub.w	r0, r0, sl
 80088b4:	fa03 f000 	lsl.w	r0, r3, r0
 80088b8:	9b04      	ldr	r3, [sp, #16]
 80088ba:	4303      	orrs	r3, r0
 80088bc:	3401      	adds	r4, #1
 80088be:	9304      	str	r3, [sp, #16]
 80088c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088c4:	482c      	ldr	r0, [pc, #176]	; (8008978 <_vfiprintf_r+0x250>)
 80088c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088ca:	2206      	movs	r2, #6
 80088cc:	f7f7 fd10 	bl	80002f0 <memchr>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	d03f      	beq.n	8008954 <_vfiprintf_r+0x22c>
 80088d4:	4b29      	ldr	r3, [pc, #164]	; (800897c <_vfiprintf_r+0x254>)
 80088d6:	bb1b      	cbnz	r3, 8008920 <_vfiprintf_r+0x1f8>
 80088d8:	9b03      	ldr	r3, [sp, #12]
 80088da:	3307      	adds	r3, #7
 80088dc:	f023 0307 	bic.w	r3, r3, #7
 80088e0:	3308      	adds	r3, #8
 80088e2:	9303      	str	r3, [sp, #12]
 80088e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e6:	443b      	add	r3, r7
 80088e8:	9309      	str	r3, [sp, #36]	; 0x24
 80088ea:	e767      	b.n	80087bc <_vfiprintf_r+0x94>
 80088ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80088f0:	460c      	mov	r4, r1
 80088f2:	2001      	movs	r0, #1
 80088f4:	e7a5      	b.n	8008842 <_vfiprintf_r+0x11a>
 80088f6:	2300      	movs	r3, #0
 80088f8:	3401      	adds	r4, #1
 80088fa:	9305      	str	r3, [sp, #20]
 80088fc:	4619      	mov	r1, r3
 80088fe:	f04f 0c0a 	mov.w	ip, #10
 8008902:	4620      	mov	r0, r4
 8008904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008908:	3a30      	subs	r2, #48	; 0x30
 800890a:	2a09      	cmp	r2, #9
 800890c:	d903      	bls.n	8008916 <_vfiprintf_r+0x1ee>
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0c5      	beq.n	800889e <_vfiprintf_r+0x176>
 8008912:	9105      	str	r1, [sp, #20]
 8008914:	e7c3      	b.n	800889e <_vfiprintf_r+0x176>
 8008916:	fb0c 2101 	mla	r1, ip, r1, r2
 800891a:	4604      	mov	r4, r0
 800891c:	2301      	movs	r3, #1
 800891e:	e7f0      	b.n	8008902 <_vfiprintf_r+0x1da>
 8008920:	ab03      	add	r3, sp, #12
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	462a      	mov	r2, r5
 8008926:	4b16      	ldr	r3, [pc, #88]	; (8008980 <_vfiprintf_r+0x258>)
 8008928:	a904      	add	r1, sp, #16
 800892a:	4630      	mov	r0, r6
 800892c:	f7fd fd24 	bl	8006378 <_printf_float>
 8008930:	4607      	mov	r7, r0
 8008932:	1c78      	adds	r0, r7, #1
 8008934:	d1d6      	bne.n	80088e4 <_vfiprintf_r+0x1bc>
 8008936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008938:	07d9      	lsls	r1, r3, #31
 800893a:	d405      	bmi.n	8008948 <_vfiprintf_r+0x220>
 800893c:	89ab      	ldrh	r3, [r5, #12]
 800893e:	059a      	lsls	r2, r3, #22
 8008940:	d402      	bmi.n	8008948 <_vfiprintf_r+0x220>
 8008942:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008944:	f7ff f9d0 	bl	8007ce8 <__retarget_lock_release_recursive>
 8008948:	89ab      	ldrh	r3, [r5, #12]
 800894a:	065b      	lsls	r3, r3, #25
 800894c:	f53f af12 	bmi.w	8008774 <_vfiprintf_r+0x4c>
 8008950:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008952:	e711      	b.n	8008778 <_vfiprintf_r+0x50>
 8008954:	ab03      	add	r3, sp, #12
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	462a      	mov	r2, r5
 800895a:	4b09      	ldr	r3, [pc, #36]	; (8008980 <_vfiprintf_r+0x258>)
 800895c:	a904      	add	r1, sp, #16
 800895e:	4630      	mov	r0, r6
 8008960:	f7fd ff96 	bl	8006890 <_printf_i>
 8008964:	e7e4      	b.n	8008930 <_vfiprintf_r+0x208>
 8008966:	bf00      	nop
 8008968:	08008dd4 	.word	0x08008dd4
 800896c:	08008df4 	.word	0x08008df4
 8008970:	08008db4 	.word	0x08008db4
 8008974:	08008f6c 	.word	0x08008f6c
 8008978:	08008f76 	.word	0x08008f76
 800897c:	08006379 	.word	0x08006379
 8008980:	08008703 	.word	0x08008703
 8008984:	08008f72 	.word	0x08008f72

08008988 <_sbrk_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	4d06      	ldr	r5, [pc, #24]	; (80089a4 <_sbrk_r+0x1c>)
 800898c:	2300      	movs	r3, #0
 800898e:	4604      	mov	r4, r0
 8008990:	4608      	mov	r0, r1
 8008992:	602b      	str	r3, [r5, #0]
 8008994:	f7f8 fc08 	bl	80011a8 <_sbrk>
 8008998:	1c43      	adds	r3, r0, #1
 800899a:	d102      	bne.n	80089a2 <_sbrk_r+0x1a>
 800899c:	682b      	ldr	r3, [r5, #0]
 800899e:	b103      	cbz	r3, 80089a2 <_sbrk_r+0x1a>
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	bd38      	pop	{r3, r4, r5, pc}
 80089a4:	24000328 	.word	0x24000328

080089a8 <__sread>:
 80089a8:	b510      	push	{r4, lr}
 80089aa:	460c      	mov	r4, r1
 80089ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b0:	f000 f8e2 	bl	8008b78 <_read_r>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	bfab      	itete	ge
 80089b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089ba:	89a3      	ldrhlt	r3, [r4, #12]
 80089bc:	181b      	addge	r3, r3, r0
 80089be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089c2:	bfac      	ite	ge
 80089c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80089c6:	81a3      	strhlt	r3, [r4, #12]
 80089c8:	bd10      	pop	{r4, pc}

080089ca <__swrite>:
 80089ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ce:	461f      	mov	r7, r3
 80089d0:	898b      	ldrh	r3, [r1, #12]
 80089d2:	05db      	lsls	r3, r3, #23
 80089d4:	4605      	mov	r5, r0
 80089d6:	460c      	mov	r4, r1
 80089d8:	4616      	mov	r6, r2
 80089da:	d505      	bpl.n	80089e8 <__swrite+0x1e>
 80089dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e0:	2302      	movs	r3, #2
 80089e2:	2200      	movs	r2, #0
 80089e4:	f000 f898 	bl	8008b18 <_lseek_r>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089f2:	81a3      	strh	r3, [r4, #12]
 80089f4:	4632      	mov	r2, r6
 80089f6:	463b      	mov	r3, r7
 80089f8:	4628      	mov	r0, r5
 80089fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089fe:	f000 b817 	b.w	8008a30 <_write_r>

08008a02 <__sseek>:
 8008a02:	b510      	push	{r4, lr}
 8008a04:	460c      	mov	r4, r1
 8008a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0a:	f000 f885 	bl	8008b18 <_lseek_r>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	bf15      	itete	ne
 8008a14:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a1e:	81a3      	strheq	r3, [r4, #12]
 8008a20:	bf18      	it	ne
 8008a22:	81a3      	strhne	r3, [r4, #12]
 8008a24:	bd10      	pop	{r4, pc}

08008a26 <__sclose>:
 8008a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2a:	f000 b831 	b.w	8008a90 <_close_r>
	...

08008a30 <_write_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4d07      	ldr	r5, [pc, #28]	; (8008a50 <_write_r+0x20>)
 8008a34:	4604      	mov	r4, r0
 8008a36:	4608      	mov	r0, r1
 8008a38:	4611      	mov	r1, r2
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	602a      	str	r2, [r5, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f7f8 fb61 	bl	8001106 <_write>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_write_r+0x1e>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_write_r+0x1e>
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	24000328 	.word	0x24000328

08008a54 <__assert_func>:
 8008a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a56:	4614      	mov	r4, r2
 8008a58:	461a      	mov	r2, r3
 8008a5a:	4b09      	ldr	r3, [pc, #36]	; (8008a80 <__assert_func+0x2c>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4605      	mov	r5, r0
 8008a60:	68d8      	ldr	r0, [r3, #12]
 8008a62:	b14c      	cbz	r4, 8008a78 <__assert_func+0x24>
 8008a64:	4b07      	ldr	r3, [pc, #28]	; (8008a84 <__assert_func+0x30>)
 8008a66:	9100      	str	r1, [sp, #0]
 8008a68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a6c:	4906      	ldr	r1, [pc, #24]	; (8008a88 <__assert_func+0x34>)
 8008a6e:	462b      	mov	r3, r5
 8008a70:	f000 f81e 	bl	8008ab0 <fiprintf>
 8008a74:	f000 f89f 	bl	8008bb6 <abort>
 8008a78:	4b04      	ldr	r3, [pc, #16]	; (8008a8c <__assert_func+0x38>)
 8008a7a:	461c      	mov	r4, r3
 8008a7c:	e7f3      	b.n	8008a66 <__assert_func+0x12>
 8008a7e:	bf00      	nop
 8008a80:	24000010 	.word	0x24000010
 8008a84:	08008f7d 	.word	0x08008f7d
 8008a88:	08008f8a 	.word	0x08008f8a
 8008a8c:	08008fb8 	.word	0x08008fb8

08008a90 <_close_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	4d06      	ldr	r5, [pc, #24]	; (8008aac <_close_r+0x1c>)
 8008a94:	2300      	movs	r3, #0
 8008a96:	4604      	mov	r4, r0
 8008a98:	4608      	mov	r0, r1
 8008a9a:	602b      	str	r3, [r5, #0]
 8008a9c:	f7f8 fb4f 	bl	800113e <_close>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d102      	bne.n	8008aaa <_close_r+0x1a>
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	b103      	cbz	r3, 8008aaa <_close_r+0x1a>
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	bd38      	pop	{r3, r4, r5, pc}
 8008aac:	24000328 	.word	0x24000328

08008ab0 <fiprintf>:
 8008ab0:	b40e      	push	{r1, r2, r3}
 8008ab2:	b503      	push	{r0, r1, lr}
 8008ab4:	4601      	mov	r1, r0
 8008ab6:	ab03      	add	r3, sp, #12
 8008ab8:	4805      	ldr	r0, [pc, #20]	; (8008ad0 <fiprintf+0x20>)
 8008aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008abe:	6800      	ldr	r0, [r0, #0]
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	f7ff fe31 	bl	8008728 <_vfiprintf_r>
 8008ac6:	b002      	add	sp, #8
 8008ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008acc:	b003      	add	sp, #12
 8008ace:	4770      	bx	lr
 8008ad0:	24000010 	.word	0x24000010

08008ad4 <_fstat_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4d07      	ldr	r5, [pc, #28]	; (8008af4 <_fstat_r+0x20>)
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4604      	mov	r4, r0
 8008adc:	4608      	mov	r0, r1
 8008ade:	4611      	mov	r1, r2
 8008ae0:	602b      	str	r3, [r5, #0]
 8008ae2:	f7f8 fb38 	bl	8001156 <_fstat>
 8008ae6:	1c43      	adds	r3, r0, #1
 8008ae8:	d102      	bne.n	8008af0 <_fstat_r+0x1c>
 8008aea:	682b      	ldr	r3, [r5, #0]
 8008aec:	b103      	cbz	r3, 8008af0 <_fstat_r+0x1c>
 8008aee:	6023      	str	r3, [r4, #0]
 8008af0:	bd38      	pop	{r3, r4, r5, pc}
 8008af2:	bf00      	nop
 8008af4:	24000328 	.word	0x24000328

08008af8 <_isatty_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4d06      	ldr	r5, [pc, #24]	; (8008b14 <_isatty_r+0x1c>)
 8008afc:	2300      	movs	r3, #0
 8008afe:	4604      	mov	r4, r0
 8008b00:	4608      	mov	r0, r1
 8008b02:	602b      	str	r3, [r5, #0]
 8008b04:	f7f8 fb37 	bl	8001176 <_isatty>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d102      	bne.n	8008b12 <_isatty_r+0x1a>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b103      	cbz	r3, 8008b12 <_isatty_r+0x1a>
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	24000328 	.word	0x24000328

08008b18 <_lseek_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4d07      	ldr	r5, [pc, #28]	; (8008b38 <_lseek_r+0x20>)
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	4608      	mov	r0, r1
 8008b20:	4611      	mov	r1, r2
 8008b22:	2200      	movs	r2, #0
 8008b24:	602a      	str	r2, [r5, #0]
 8008b26:	461a      	mov	r2, r3
 8008b28:	f7f8 fb30 	bl	800118c <_lseek>
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	d102      	bne.n	8008b36 <_lseek_r+0x1e>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	b103      	cbz	r3, 8008b36 <_lseek_r+0x1e>
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
 8008b38:	24000328 	.word	0x24000328

08008b3c <__ascii_mbtowc>:
 8008b3c:	b082      	sub	sp, #8
 8008b3e:	b901      	cbnz	r1, 8008b42 <__ascii_mbtowc+0x6>
 8008b40:	a901      	add	r1, sp, #4
 8008b42:	b142      	cbz	r2, 8008b56 <__ascii_mbtowc+0x1a>
 8008b44:	b14b      	cbz	r3, 8008b5a <__ascii_mbtowc+0x1e>
 8008b46:	7813      	ldrb	r3, [r2, #0]
 8008b48:	600b      	str	r3, [r1, #0]
 8008b4a:	7812      	ldrb	r2, [r2, #0]
 8008b4c:	1e10      	subs	r0, r2, #0
 8008b4e:	bf18      	it	ne
 8008b50:	2001      	movne	r0, #1
 8008b52:	b002      	add	sp, #8
 8008b54:	4770      	bx	lr
 8008b56:	4610      	mov	r0, r2
 8008b58:	e7fb      	b.n	8008b52 <__ascii_mbtowc+0x16>
 8008b5a:	f06f 0001 	mvn.w	r0, #1
 8008b5e:	e7f8      	b.n	8008b52 <__ascii_mbtowc+0x16>

08008b60 <__malloc_lock>:
 8008b60:	4801      	ldr	r0, [pc, #4]	; (8008b68 <__malloc_lock+0x8>)
 8008b62:	f7ff b8c0 	b.w	8007ce6 <__retarget_lock_acquire_recursive>
 8008b66:	bf00      	nop
 8008b68:	2400031c 	.word	0x2400031c

08008b6c <__malloc_unlock>:
 8008b6c:	4801      	ldr	r0, [pc, #4]	; (8008b74 <__malloc_unlock+0x8>)
 8008b6e:	f7ff b8bb 	b.w	8007ce8 <__retarget_lock_release_recursive>
 8008b72:	bf00      	nop
 8008b74:	2400031c 	.word	0x2400031c

08008b78 <_read_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	4d07      	ldr	r5, [pc, #28]	; (8008b98 <_read_r+0x20>)
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	4608      	mov	r0, r1
 8008b80:	4611      	mov	r1, r2
 8008b82:	2200      	movs	r2, #0
 8008b84:	602a      	str	r2, [r5, #0]
 8008b86:	461a      	mov	r2, r3
 8008b88:	f7f8 faa0 	bl	80010cc <_read>
 8008b8c:	1c43      	adds	r3, r0, #1
 8008b8e:	d102      	bne.n	8008b96 <_read_r+0x1e>
 8008b90:	682b      	ldr	r3, [r5, #0]
 8008b92:	b103      	cbz	r3, 8008b96 <_read_r+0x1e>
 8008b94:	6023      	str	r3, [r4, #0]
 8008b96:	bd38      	pop	{r3, r4, r5, pc}
 8008b98:	24000328 	.word	0x24000328

08008b9c <__ascii_wctomb>:
 8008b9c:	b149      	cbz	r1, 8008bb2 <__ascii_wctomb+0x16>
 8008b9e:	2aff      	cmp	r2, #255	; 0xff
 8008ba0:	bf85      	ittet	hi
 8008ba2:	238a      	movhi	r3, #138	; 0x8a
 8008ba4:	6003      	strhi	r3, [r0, #0]
 8008ba6:	700a      	strbls	r2, [r1, #0]
 8008ba8:	f04f 30ff 	movhi.w	r0, #4294967295
 8008bac:	bf98      	it	ls
 8008bae:	2001      	movls	r0, #1
 8008bb0:	4770      	bx	lr
 8008bb2:	4608      	mov	r0, r1
 8008bb4:	4770      	bx	lr

08008bb6 <abort>:
 8008bb6:	b508      	push	{r3, lr}
 8008bb8:	2006      	movs	r0, #6
 8008bba:	f000 f82b 	bl	8008c14 <raise>
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	f7f8 fa7a 	bl	80010b8 <_exit>

08008bc4 <_raise_r>:
 8008bc4:	291f      	cmp	r1, #31
 8008bc6:	b538      	push	{r3, r4, r5, lr}
 8008bc8:	4604      	mov	r4, r0
 8008bca:	460d      	mov	r5, r1
 8008bcc:	d904      	bls.n	8008bd8 <_raise_r+0x14>
 8008bce:	2316      	movs	r3, #22
 8008bd0:	6003      	str	r3, [r0, #0]
 8008bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}
 8008bd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008bda:	b112      	cbz	r2, 8008be2 <_raise_r+0x1e>
 8008bdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008be0:	b94b      	cbnz	r3, 8008bf6 <_raise_r+0x32>
 8008be2:	4620      	mov	r0, r4
 8008be4:	f000 f830 	bl	8008c48 <_getpid_r>
 8008be8:	462a      	mov	r2, r5
 8008bea:	4601      	mov	r1, r0
 8008bec:	4620      	mov	r0, r4
 8008bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bf2:	f000 b817 	b.w	8008c24 <_kill_r>
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d00a      	beq.n	8008c10 <_raise_r+0x4c>
 8008bfa:	1c59      	adds	r1, r3, #1
 8008bfc:	d103      	bne.n	8008c06 <_raise_r+0x42>
 8008bfe:	2316      	movs	r3, #22
 8008c00:	6003      	str	r3, [r0, #0]
 8008c02:	2001      	movs	r0, #1
 8008c04:	e7e7      	b.n	8008bd6 <_raise_r+0x12>
 8008c06:	2400      	movs	r4, #0
 8008c08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	4798      	blx	r3
 8008c10:	2000      	movs	r0, #0
 8008c12:	e7e0      	b.n	8008bd6 <_raise_r+0x12>

08008c14 <raise>:
 8008c14:	4b02      	ldr	r3, [pc, #8]	; (8008c20 <raise+0xc>)
 8008c16:	4601      	mov	r1, r0
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	f7ff bfd3 	b.w	8008bc4 <_raise_r>
 8008c1e:	bf00      	nop
 8008c20:	24000010 	.word	0x24000010

08008c24 <_kill_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d07      	ldr	r5, [pc, #28]	; (8008c44 <_kill_r+0x20>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	4611      	mov	r1, r2
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	f7f8 fa31 	bl	8001098 <_kill>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	d102      	bne.n	8008c40 <_kill_r+0x1c>
 8008c3a:	682b      	ldr	r3, [r5, #0]
 8008c3c:	b103      	cbz	r3, 8008c40 <_kill_r+0x1c>
 8008c3e:	6023      	str	r3, [r4, #0]
 8008c40:	bd38      	pop	{r3, r4, r5, pc}
 8008c42:	bf00      	nop
 8008c44:	24000328 	.word	0x24000328

08008c48 <_getpid_r>:
 8008c48:	f7f8 ba1e 	b.w	8001088 <_getpid>

08008c4c <_init>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	bf00      	nop
 8008c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c52:	bc08      	pop	{r3}
 8008c54:	469e      	mov	lr, r3
 8008c56:	4770      	bx	lr

08008c58 <_fini>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	bf00      	nop
 8008c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5e:	bc08      	pop	{r3}
 8008c60:	469e      	mov	lr, r3
 8008c62:	4770      	bx	lr
