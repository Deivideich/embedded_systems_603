
H755_ENCODER_2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006410  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006788  08006788  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006788  08006788  00016788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006790  08006790  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006794  08006794  00016794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08006798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  24000074  0800680c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000188  0800680c  00020188  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b81  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000278f  00000000  00000000  00036c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  000393b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  0003a518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b5b8  00000000  00000000  0003b580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d0f  00000000  00000000  00076b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018838d  00000000  00000000  0008c847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00214bd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005108  00000000  00000000  00214c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006698 	.word	0x08006698

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08006698 	.word	0x08006698

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <HAL_TIM_IC_CaptureCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t timer_counter = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	timer_counter = __HAL_TIM_GET_COUNTER(htim);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <HAL_TIM_IC_CaptureCallback+0x20>)
 80007c0:	6013      	str	r3, [r2, #0]
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	2400016c 	.word	0x2400016c

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007de:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007e0:	bf00      	nop
 80007e2:	4b25      	ldr	r3, [pc, #148]	; (8000878 <main+0xa4>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d004      	beq.n	80007f8 <main+0x24>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	dcf4      	bgt.n	80007e2 <main+0xe>
  if ( timeout < 0 )
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da01      	bge.n	8000802 <main+0x2e>
  {
  Error_Handler();
 80007fe:	f000 f989 	bl	8000b14 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f000 fb73 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f83d 	bl	8000884 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800080a:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <main+0xa4>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000810:	4a19      	ldr	r2, [pc, #100]	; (8000878 <main+0xa4>)
 8000812:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000816:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <main+0xa4>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000828:	2000      	movs	r0, #0
 800082a:	f000 febd 	bl	80015a8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800082e:	2100      	movs	r1, #0
 8000830:	2000      	movs	r0, #0
 8000832:	f000 fed3 	bl	80015dc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800083c:	bf00      	nop
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <main+0xa4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000846:	2b00      	cmp	r3, #0
 8000848:	d104      	bne.n	8000854 <main+0x80>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	1e5a      	subs	r2, r3, #1
 800084e:	607a      	str	r2, [r7, #4]
 8000850:	2b00      	cmp	r3, #0
 8000852:	dcf4      	bgt.n	800083e <main+0x6a>
if ( timeout < 0 )
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	da01      	bge.n	800085e <main+0x8a>
{
Error_Handler();
 800085a:	f000 f95b 	bl	8000b14 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085e:	f000 f921 	bl	8000aa4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000862:	f000 f8d3 	bl	8000a0c <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000866:	f000 f877 	bl	8000958 <MX_TIM4_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("%ld \r\n", timer_counter);
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <main+0xa8>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4619      	mov	r1, r3
 8000870:	4803      	ldr	r0, [pc, #12]	; (8000880 <main+0xac>)
 8000872:	f004 ff83 	bl	800577c <iprintf>
 8000876:	e7f8      	b.n	800086a <main+0x96>
 8000878:	58024400 	.word	0x58024400
 800087c:	2400016c 	.word	0x2400016c
 8000880:	080066b0 	.word	0x080066b0

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b09c      	sub	sp, #112	; 0x70
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	224c      	movs	r2, #76	; 0x4c
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f004 ff6a 	bl	800576c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2220      	movs	r2, #32
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f004 ff64 	bl	800576c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008a4:	2004      	movs	r0, #4
 80008a6:	f000 fead 	bl	8001604 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <SystemClock_Config+0xcc>)
 80008b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b2:	4a27      	ldr	r2, [pc, #156]	; (8000950 <SystemClock_Config+0xcc>)
 80008b4:	f023 0301 	bic.w	r3, r3, #1
 80008b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <SystemClock_Config+0xcc>)
 80008bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <SystemClock_Config+0xd0>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <SystemClock_Config+0xd0>)
 80008ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <SystemClock_Config+0xd0>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008e0:	bf00      	nop
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <SystemClock_Config+0xd0>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ee:	d1f8      	bne.n	80008e2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f0:	2302      	movs	r3, #2
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008f4:	2301      	movs	r3, #1
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f8:	2340      	movs	r3, #64	; 0x40
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fed7 	bl	80016b8 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000910:	f000 f900 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	233f      	movs	r3, #63	; 0x3f
 8000916:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2101      	movs	r1, #1
 8000938:	4618      	mov	r0, r3
 800093a:	f001 faeb 	bl	8001f14 <HAL_RCC_ClockConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000944:	f000 f8e6 	bl	8000b14 <Error_Handler>
  }
}
 8000948:	bf00      	nop
 800094a:	3770      	adds	r7, #112	; 0x70
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	58000400 	.word	0x58000400
 8000954:	58024800 	.word	0x58024800

08000958 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	; 0x30
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	2224      	movs	r2, #36	; 0x24
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f004 ff00 	bl	800576c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096c:	463b      	mov	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000976:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <MX_TIM4_Init+0xac>)
 8000978:	4a23      	ldr	r2, [pc, #140]	; (8000a08 <MX_TIM4_Init+0xb0>)
 800097a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <MX_TIM4_Init+0xac>)
 800097e:	2200      	movs	r2, #0
 8000980:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <MX_TIM4_Init+0xac>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000988:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_TIM4_Init+0xac>)
 800098a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800098e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_TIM4_Init+0xac>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_TIM4_Init+0xac>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800099c:	2303      	movs	r3, #3
 800099e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80009a0:	2302      	movs	r3, #2
 80009a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009a4:	2301      	movs	r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80009ac:	230a      	movs	r3, #10
 80009ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80009b0:	2302      	movs	r3, #2
 80009b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009b4:	2301      	movs	r3, #1
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80009bc:	230a      	movs	r3, #10
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4619      	mov	r1, r3
 80009c6:	480f      	ldr	r0, [pc, #60]	; (8000a04 <MX_TIM4_Init+0xac>)
 80009c8:	f003 f998 	bl	8003cfc <HAL_TIM_Encoder_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80009d2:	f000 f89f 	bl	8000b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	4808      	ldr	r0, [pc, #32]	; (8000a04 <MX_TIM4_Init+0xac>)
 80009e4:	f003 fce6 	bl	80043b4 <HAL_TIMEx_MasterConfigSynchronization>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80009ee:	f000 f891 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_ALL);
 80009f2:	213c      	movs	r1, #60	; 0x3c
 80009f4:	4803      	ldr	r0, [pc, #12]	; (8000a04 <MX_TIM4_Init+0xac>)
 80009f6:	f003 fa27 	bl	8003e48 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	3730      	adds	r7, #48	; 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	24000090 	.word	0x24000090
 8000a08:	40000800 	.word	0x40000800

08000a0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a12:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <MX_USART3_UART_Init+0x94>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a54:	4811      	ldr	r0, [pc, #68]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a56:	f003 fd59 	bl	800450c <HAL_UART_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a60:	f000 f858 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	480d      	ldr	r0, [pc, #52]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a68:	f004 fd8c 	bl	8005584 <HAL_UARTEx_SetTxFifoThreshold>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a72:	f000 f84f 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4808      	ldr	r0, [pc, #32]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a7a:	f004 fdc1 	bl	8005600 <HAL_UARTEx_SetRxFifoThreshold>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a84:	f000 f846 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a8a:	f004 fd42 	bl	8005512 <HAL_UARTEx_DisableFifoMode>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a94:	f000 f83e 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	240000dc 	.word	0x240000dc
 8000aa0:	40004800 	.word	0x40004800

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000aee:	f043 0308 	orr.w	r3, r3, #8
 8000af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	f003 0308 	and.w	r3, r3, #8
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]

}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	58024400 	.word	0x58024400

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000b28:	1d39      	adds	r1, r7, #4
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4803      	ldr	r0, [pc, #12]	; (8000b40 <__io_putchar+0x20>)
 8000b32:	f003 fd3b 	bl	80045ac <HAL_UART_Transmit>
  return ch;
 8000b36:	687b      	ldr	r3, [r7, #4]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	240000dc 	.word	0x240000dc

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_MspInit+0x30>)
 8000b4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b50:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <HAL_MspInit+0x30>)
 8000b52:	f043 0302 	orr.w	r3, r3, #2
 8000b56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_MspInit+0x30>)
 8000b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	58024400 	.word	0x58024400

08000b78 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a1e      	ldr	r2, [pc, #120]	; (8000c10 <HAL_TIM_Encoder_MspInit+0x98>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d136      	bne.n	8000c08 <HAL_TIM_Encoder_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ba0:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbe:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000bd6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000be8:	2302      	movs	r3, #2
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4809      	ldr	r0, [pc, #36]	; (8000c18 <HAL_TIM_Encoder_MspInit+0xa0>)
 8000bf4:	f000 fb28 	bl	8001248 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	201e      	movs	r0, #30
 8000bfe:	f000 faee 	bl	80011de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c02:	201e      	movs	r0, #30
 8000c04:	f000 fb05 	bl	8001212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	; 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40000800 	.word	0x40000800
 8000c14:	58024400 	.word	0x58024400
 8000c18:	58020c00 	.word	0x58020c00

08000c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b0b8      	sub	sp, #224	; 0xe0
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	22bc      	movs	r2, #188	; 0xbc
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f004 fd95 	bl	800576c <memset>
  if(huart->Instance==USART3)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a25      	ldr	r2, [pc, #148]	; (8000cdc <HAL_UART_MspInit+0xc0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d142      	bne.n	8000cd2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fce6 	bl	800262c <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c66:	f7ff ff55 	bl	8000b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_UART_MspInit+0xc4>)
 8000c6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c70:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0xc4>)
 8000c72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_UART_MspInit+0xc4>)
 8000c7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0xc4>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <HAL_UART_MspInit+0xc4>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_UART_MspInit+0xc4>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ca6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000caa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_UART_MspInit+0xc8>)
 8000cce:	f000 fabb 	bl	8001248 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	37e0      	adds	r7, #224	; 0xe0
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40004800 	.word	0x40004800
 8000ce0:	58024400 	.word	0x58024400
 8000ce4:	58020c00 	.word	0x58020c00

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f94c 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <TIM4_IRQHandler+0x10>)
 8000d42:	f003 f92f 	bl	8003fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	24000090 	.word	0x24000090

08000d50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e00a      	b.n	8000d78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d62:	f3af 8000 	nop.w
 8000d66:	4601      	mov	r1, r0
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	60ba      	str	r2, [r7, #8]
 8000d6e:	b2ca      	uxtb	r2, r1
 8000d70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dbf0      	blt.n	8000d62 <_read+0x12>
	}

return len;
 8000d80:	687b      	ldr	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	e009      	b.n	8000db0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	60ba      	str	r2, [r7, #8]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff febb 	bl	8000b20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	dbf1      	blt.n	8000d9c <_write+0x12>
	}
	return len;
 8000db8:	687b      	ldr	r3, [r7, #4]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_close>:

int _close(int file)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
	return -1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dea:	605a      	str	r2, [r3, #4]
	return 0;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <_isatty>:

int _isatty(int file)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
	return 1;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f004 fc5c 	bl	8005718 <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	24080000 	.word	0x24080000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	24000170 	.word	0x24000170
 8000e94:	24000188 	.word	0x24000188

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e9c:	f7ff fbf2 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ea2:	490d      	ldr	r1, [pc, #52]	; (8000ed8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ee4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f004 fc2d 	bl	8005724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eca:	f7ff fc83 	bl	80007d4 <main>
  bx  lr
 8000ece:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ed4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ed8:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000edc:	08006798 	.word	0x08006798
  ldr r2, =_sbss
 8000ee0:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000ee4:	24000188 	.word	0x24000188

08000ee8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC3_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	f000 f968 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ef8:	f001 f9c2 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 8000efc:	4602      	mov	r2, r0
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_Init+0x68>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	0a1b      	lsrs	r3, r3, #8
 8000f04:	f003 030f 	and.w	r3, r3, #15
 8000f08:	4913      	ldr	r1, [pc, #76]	; (8000f58 <HAL_Init+0x6c>)
 8000f0a:	5ccb      	ldrb	r3, [r1, r3]
 8000f0c:	f003 031f 	and.w	r3, r3, #31
 8000f10:	fa22 f303 	lsr.w	r3, r2, r3
 8000f14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_Init+0x68>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <HAL_Init+0x6c>)
 8000f20:	5cd3      	ldrb	r3, [r2, r3]
 8000f22:	f003 031f 	and.w	r3, r3, #31
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <HAL_Init+0x70>)
 8000f2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <HAL_Init+0x74>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f814 	bl	8000f64 <HAL_InitTick>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e002      	b.n	8000f4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f46:	f7ff fdfd 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	58024400 	.word	0x58024400
 8000f58:	080066b8 	.word	0x080066b8
 8000f5c:	24000004 	.word	0x24000004
 8000f60:	24000000 	.word	0x24000000

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_InitTick+0x60>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e021      	b.n	8000fbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <HAL_InitTick+0x64>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_InitTick+0x60>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f94d 	bl	800122e <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f917 	bl	80011de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_InitTick+0x68>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2400000c 	.word	0x2400000c
 8000fc8:	24000000 	.word	0x24000000
 8000fcc:	24000008 	.word	0x24000008

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	2400000c 	.word	0x2400000c
 8000ff4:	24000174 	.word	0x24000174

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	24000174 	.word	0x24000174

08001010 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetREVID+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	0c1b      	lsrs	r3, r3, #16
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	5c001000 	.word	0x5c001000

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <__NVIC_SetPriorityGrouping+0x40>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	4313      	orrs	r3, r2
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <__NVIC_SetPriorityGrouping+0x40>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00
 800106c:	05fa0000 	.word	0x05fa0000

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4907      	ldr	r1, [pc, #28]	; (80010c4 <__NVIC_EnableIRQ+0x38>)
 80010a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001194:	d301      	bcc.n	800119a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2301      	movs	r3, #1
 8001198:	e00f      	b.n	80011ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <SysTick_Config+0x40>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a2:	210f      	movs	r1, #15
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f7ff ff8e 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <SysTick_Config+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <SysTick_Config+0x40>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff29 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011ec:	f7ff ff40 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f7ff ff90 	bl	800111c <NVIC_EncodePriority>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff5f 	bl	80010c8 <__NVIC_SetPriority>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff33 	bl	800108c <__NVIC_EnableIRQ>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffa4 	bl	8001184 <SysTick_Config>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001256:	4b89      	ldr	r3, [pc, #548]	; (800147c <HAL_GPIO_Init+0x234>)
 8001258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800125a:	e194      	b.n	8001586 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	2101      	movs	r1, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 8186 	beq.w	8001580 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b01      	cmp	r3, #1
 800127e:	d005      	beq.n	800128c <HAL_GPIO_Init+0x44>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d130      	bne.n	80012ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012c2:	2201      	movs	r2, #1
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	091b      	lsrs	r3, r3, #4
 80012d8:	f003 0201 	and.w	r2, r3, #1
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d017      	beq.n	800132a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	2203      	movs	r2, #3
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d123      	bne.n	800137e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	08da      	lsrs	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3208      	adds	r2, #8
 800133e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	691a      	ldr	r2, [r3, #16]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	08da      	lsrs	r2, r3, #3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3208      	adds	r2, #8
 8001378:	69b9      	ldr	r1, [r7, #24]
 800137a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0203 	and.w	r2, r3, #3
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 80e0 	beq.w	8001580 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c0:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <HAL_GPIO_Init+0x238>)
 80013c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013c6:	4a2e      	ldr	r2, [pc, #184]	; (8001480 <HAL_GPIO_Init+0x238>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <HAL_GPIO_Init+0x238>)
 80013d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013de:	4a29      	ldr	r2, [pc, #164]	; (8001484 <HAL_GPIO_Init+0x23c>)
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a20      	ldr	r2, [pc, #128]	; (8001488 <HAL_GPIO_Init+0x240>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d052      	beq.n	80014b0 <HAL_GPIO_Init+0x268>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a1f      	ldr	r2, [pc, #124]	; (800148c <HAL_GPIO_Init+0x244>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d031      	beq.n	8001476 <HAL_GPIO_Init+0x22e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a1e      	ldr	r2, [pc, #120]	; (8001490 <HAL_GPIO_Init+0x248>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d02b      	beq.n	8001472 <HAL_GPIO_Init+0x22a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <HAL_GPIO_Init+0x24c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d025      	beq.n	800146e <HAL_GPIO_Init+0x226>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <HAL_GPIO_Init+0x250>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d01f      	beq.n	800146a <HAL_GPIO_Init+0x222>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a1b      	ldr	r2, [pc, #108]	; (800149c <HAL_GPIO_Init+0x254>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d019      	beq.n	8001466 <HAL_GPIO_Init+0x21e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a1a      	ldr	r2, [pc, #104]	; (80014a0 <HAL_GPIO_Init+0x258>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d013      	beq.n	8001462 <HAL_GPIO_Init+0x21a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <HAL_GPIO_Init+0x25c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d00d      	beq.n	800145e <HAL_GPIO_Init+0x216>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <HAL_GPIO_Init+0x260>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d007      	beq.n	800145a <HAL_GPIO_Init+0x212>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a17      	ldr	r2, [pc, #92]	; (80014ac <HAL_GPIO_Init+0x264>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d101      	bne.n	8001456 <HAL_GPIO_Init+0x20e>
 8001452:	2309      	movs	r3, #9
 8001454:	e02d      	b.n	80014b2 <HAL_GPIO_Init+0x26a>
 8001456:	230a      	movs	r3, #10
 8001458:	e02b      	b.n	80014b2 <HAL_GPIO_Init+0x26a>
 800145a:	2308      	movs	r3, #8
 800145c:	e029      	b.n	80014b2 <HAL_GPIO_Init+0x26a>
 800145e:	2307      	movs	r3, #7
 8001460:	e027      	b.n	80014b2 <HAL_GPIO_Init+0x26a>
 8001462:	2306      	movs	r3, #6
 8001464:	e025      	b.n	80014b2 <HAL_GPIO_Init+0x26a>
 8001466:	2305      	movs	r3, #5
 8001468:	e023      	b.n	80014b2 <HAL_GPIO_Init+0x26a>
 800146a:	2304      	movs	r3, #4
 800146c:	e021      	b.n	80014b2 <HAL_GPIO_Init+0x26a>
 800146e:	2303      	movs	r3, #3
 8001470:	e01f      	b.n	80014b2 <HAL_GPIO_Init+0x26a>
 8001472:	2302      	movs	r3, #2
 8001474:	e01d      	b.n	80014b2 <HAL_GPIO_Init+0x26a>
 8001476:	2301      	movs	r3, #1
 8001478:	e01b      	b.n	80014b2 <HAL_GPIO_Init+0x26a>
 800147a:	bf00      	nop
 800147c:	58000080 	.word	0x58000080
 8001480:	58024400 	.word	0x58024400
 8001484:	58000400 	.word	0x58000400
 8001488:	58020000 	.word	0x58020000
 800148c:	58020400 	.word	0x58020400
 8001490:	58020800 	.word	0x58020800
 8001494:	58020c00 	.word	0x58020c00
 8001498:	58021000 	.word	0x58021000
 800149c:	58021400 	.word	0x58021400
 80014a0:	58021800 	.word	0x58021800
 80014a4:	58021c00 	.word	0x58021c00
 80014a8:	58022000 	.word	0x58022000
 80014ac:	58022400 	.word	0x58022400
 80014b0:	2300      	movs	r3, #0
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	f002 0203 	and.w	r2, r2, #3
 80014b8:	0092      	lsls	r2, r2, #2
 80014ba:	4093      	lsls	r3, r2
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c2:	4938      	ldr	r1, [pc, #224]	; (80015a4 <HAL_GPIO_Init+0x35c>)
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	089b      	lsrs	r3, r3, #2
 80014c8:	3302      	adds	r3, #2
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001524:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	3301      	adds	r3, #1
 8001584:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa22 f303 	lsr.w	r3, r2, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	f47f ae63 	bne.w	800125c <HAL_GPIO_Init+0x14>
  }
}
 8001596:	bf00      	nop
 8001598:	bf00      	nop
 800159a:	3724      	adds	r7, #36	; 0x24
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	58000400 	.word	0x58000400

080015a8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80015b0:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_HSEM_FastTake+0x2c>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3320      	adds	r3, #32
 80015b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ba:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_HSEM_FastTake+0x30>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d101      	bne.n	80015c4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e000      	b.n	80015c6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	58026400 	.word	0x58026400
 80015d8:	80000300 	.word	0x80000300

080015dc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80015e6:	4906      	ldr	r1, [pc, #24]	; (8001600 <HAL_HSEM_Release+0x24>)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	58026400 	.word	0x58026400

08001604 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800160c:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	2b06      	cmp	r3, #6
 8001616:	d00a      	beq.n	800162e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001618:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	429a      	cmp	r2, r3
 8001624:	d001      	beq.n	800162a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e040      	b.n	80016ac <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e03e      	b.n	80016ac <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001636:	491f      	ldr	r1, [pc, #124]	; (80016b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4313      	orrs	r3, r2
 800163c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800163e:	f7ff fcdb 	bl	8000ff8 <HAL_GetTick>
 8001642:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001644:	e009      	b.n	800165a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001646:	f7ff fcd7 	bl	8000ff8 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001654:	d901      	bls.n	800165a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e028      	b.n	80016ac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001666:	d1ee      	bne.n	8001646 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b1e      	cmp	r3, #30
 800166c:	d008      	beq.n	8001680 <HAL_PWREx_ConfigSupply+0x7c>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b2e      	cmp	r3, #46	; 0x2e
 8001672:	d005      	beq.n	8001680 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b1d      	cmp	r3, #29
 8001678:	d002      	beq.n	8001680 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b2d      	cmp	r3, #45	; 0x2d
 800167e:	d114      	bne.n	80016aa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001680:	f7ff fcba 	bl	8000ff8 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001686:	e009      	b.n	800169c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001688:	f7ff fcb6 	bl	8000ff8 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001696:	d901      	bls.n	800169c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e007      	b.n	80016ac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a8:	d1ee      	bne.n	8001688 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	58024800 	.word	0x58024800

080016b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08c      	sub	sp, #48	; 0x30
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d102      	bne.n	80016cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	f000 bc1d 	b.w	8001f06 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 8087 	beq.w	80017e8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016da:	4b99      	ldr	r3, [pc, #612]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016e4:	4b96      	ldr	r3, [pc, #600]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80016ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ec:	2b10      	cmp	r3, #16
 80016ee:	d007      	beq.n	8001700 <HAL_RCC_OscConfig+0x48>
 80016f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f2:	2b18      	cmp	r3, #24
 80016f4:	d110      	bne.n	8001718 <HAL_RCC_OscConfig+0x60>
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d10b      	bne.n	8001718 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	4b8f      	ldr	r3, [pc, #572]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d06c      	beq.n	80017e6 <HAL_RCC_OscConfig+0x12e>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d168      	bne.n	80017e6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e3f6      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001720:	d106      	bne.n	8001730 <HAL_RCC_OscConfig+0x78>
 8001722:	4b87      	ldr	r3, [pc, #540]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a86      	ldr	r2, [pc, #536]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e02e      	b.n	800178e <HAL_RCC_OscConfig+0xd6>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10c      	bne.n	8001752 <HAL_RCC_OscConfig+0x9a>
 8001738:	4b81      	ldr	r3, [pc, #516]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a80      	ldr	r2, [pc, #512]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 800173e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b7e      	ldr	r3, [pc, #504]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a7d      	ldr	r2, [pc, #500]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 800174a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	e01d      	b.n	800178e <HAL_RCC_OscConfig+0xd6>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800175a:	d10c      	bne.n	8001776 <HAL_RCC_OscConfig+0xbe>
 800175c:	4b78      	ldr	r3, [pc, #480]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a77      	ldr	r2, [pc, #476]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 8001762:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b75      	ldr	r3, [pc, #468]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a74      	ldr	r2, [pc, #464]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 800176e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	e00b      	b.n	800178e <HAL_RCC_OscConfig+0xd6>
 8001776:	4b72      	ldr	r3, [pc, #456]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a71      	ldr	r2, [pc, #452]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 800177c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	4b6f      	ldr	r3, [pc, #444]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a6e      	ldr	r2, [pc, #440]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 8001788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d013      	beq.n	80017be <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001796:	f7ff fc2f 	bl	8000ff8 <HAL_GetTick>
 800179a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800179e:	f7ff fc2b 	bl	8000ff8 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b64      	cmp	r3, #100	; 0x64
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e3aa      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017b0:	4b63      	ldr	r3, [pc, #396]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0xe6>
 80017bc:	e014      	b.n	80017e8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017be:	f7ff fc1b 	bl	8000ff8 <HAL_GetTick>
 80017c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c6:	f7ff fc17 	bl	8000ff8 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b64      	cmp	r3, #100	; 0x64
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e396      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017d8:	4b59      	ldr	r3, [pc, #356]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f0      	bne.n	80017c6 <HAL_RCC_OscConfig+0x10e>
 80017e4:	e000      	b.n	80017e8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 80cb 	beq.w	800198c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f6:	4b52      	ldr	r3, [pc, #328]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017fe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001800:	4b4f      	ldr	r3, [pc, #316]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <HAL_RCC_OscConfig+0x164>
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	2b18      	cmp	r3, #24
 8001810:	d156      	bne.n	80018c0 <HAL_RCC_OscConfig+0x208>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d151      	bne.n	80018c0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800181c:	4b48      	ldr	r3, [pc, #288]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_OscConfig+0x17c>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e368      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001834:	4b42      	ldr	r3, [pc, #264]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 0219 	bic.w	r2, r3, #25
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	493f      	ldr	r1, [pc, #252]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001846:	f7ff fbd7 	bl	8000ff8 <HAL_GetTick>
 800184a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800184e:	f7ff fbd3 	bl	8000ff8 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e352      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001860:	4b37      	ldr	r3, [pc, #220]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	f7ff fbd0 	bl	8001010 <HAL_GetREVID>
 8001870:	4603      	mov	r3, r0
 8001872:	f241 0203 	movw	r2, #4099	; 0x1003
 8001876:	4293      	cmp	r3, r2
 8001878:	d817      	bhi.n	80018aa <HAL_RCC_OscConfig+0x1f2>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	2b40      	cmp	r3, #64	; 0x40
 8001880:	d108      	bne.n	8001894 <HAL_RCC_OscConfig+0x1dc>
 8001882:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800188a:	4a2d      	ldr	r2, [pc, #180]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001892:	e07b      	b.n	800198c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001894:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	031b      	lsls	r3, r3, #12
 80018a2:	4927      	ldr	r1, [pc, #156]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a8:	e070      	b.n	800198c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	061b      	lsls	r3, r3, #24
 80018b8:	4921      	ldr	r1, [pc, #132]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018be:	e065      	b.n	800198c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d048      	beq.n	800195a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 0219 	bic.w	r2, r3, #25
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	491a      	ldr	r1, [pc, #104]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018da:	f7ff fb8d 	bl	8000ff8 <HAL_GetTick>
 80018de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e2:	f7ff fb89 	bl	8000ff8 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e308      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001900:	f7ff fb86 	bl	8001010 <HAL_GetREVID>
 8001904:	4603      	mov	r3, r0
 8001906:	f241 0203 	movw	r2, #4099	; 0x1003
 800190a:	4293      	cmp	r3, r2
 800190c:	d81a      	bhi.n	8001944 <HAL_RCC_OscConfig+0x28c>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	2b40      	cmp	r3, #64	; 0x40
 8001914:	d108      	bne.n	8001928 <HAL_RCC_OscConfig+0x270>
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800191e:	4a08      	ldr	r2, [pc, #32]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	6053      	str	r3, [r2, #4]
 8001926:	e031      	b.n	800198c <HAL_RCC_OscConfig+0x2d4>
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	031b      	lsls	r3, r3, #12
 8001936:	4902      	ldr	r1, [pc, #8]	; (8001940 <HAL_RCC_OscConfig+0x288>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
 800193c:	e026      	b.n	800198c <HAL_RCC_OscConfig+0x2d4>
 800193e:	bf00      	nop
 8001940:	58024400 	.word	0x58024400
 8001944:	4b9a      	ldr	r3, [pc, #616]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	061b      	lsls	r3, r3, #24
 8001952:	4997      	ldr	r1, [pc, #604]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]
 8001958:	e018      	b.n	800198c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195a:	4b95      	ldr	r3, [pc, #596]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a94      	ldr	r2, [pc, #592]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001960:	f023 0301 	bic.w	r3, r3, #1
 8001964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001966:	f7ff fb47 	bl	8000ff8 <HAL_GetTick>
 800196a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800196e:	f7ff fb43 	bl	8000ff8 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e2c2      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001980:	4b8b      	ldr	r3, [pc, #556]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f0      	bne.n	800196e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80a9 	beq.w	8001aec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800199a:	4b85      	ldr	r3, [pc, #532]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019a4:	4b82      	ldr	r3, [pc, #520]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d007      	beq.n	80019c0 <HAL_RCC_OscConfig+0x308>
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2b18      	cmp	r3, #24
 80019b4:	d13a      	bne.n	8001a2c <HAL_RCC_OscConfig+0x374>
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d135      	bne.n	8001a2c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019c0:	4b7b      	ldr	r3, [pc, #492]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_OscConfig+0x320>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	2b80      	cmp	r3, #128	; 0x80
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e296      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019d8:	f7ff fb1a 	bl	8001010 <HAL_GetREVID>
 80019dc:	4603      	mov	r3, r0
 80019de:	f241 0203 	movw	r2, #4099	; 0x1003
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d817      	bhi.n	8001a16 <HAL_RCC_OscConfig+0x35e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	2b20      	cmp	r3, #32
 80019ec:	d108      	bne.n	8001a00 <HAL_RCC_OscConfig+0x348>
 80019ee:	4b70      	ldr	r3, [pc, #448]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80019f6:	4a6e      	ldr	r2, [pc, #440]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 80019f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019fe:	e075      	b.n	8001aec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a00:	4b6b      	ldr	r3, [pc, #428]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	069b      	lsls	r3, r3, #26
 8001a0e:	4968      	ldr	r1, [pc, #416]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a14:	e06a      	b.n	8001aec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a16:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	061b      	lsls	r3, r3, #24
 8001a24:	4962      	ldr	r1, [pc, #392]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a2a:	e05f      	b.n	8001aec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d042      	beq.n	8001aba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a34:	4b5e      	ldr	r3, [pc, #376]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a5d      	ldr	r2, [pc, #372]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff fada 	bl	8000ff8 <HAL_GetTick>
 8001a44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a48:	f7ff fad6 	bl	8000ff8 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e255      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a5a:	4b55      	ldr	r3, [pc, #340]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a66:	f7ff fad3 	bl	8001010 <HAL_GetREVID>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d817      	bhi.n	8001aa4 <HAL_RCC_OscConfig+0x3ec>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	2b20      	cmp	r3, #32
 8001a7a:	d108      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3d6>
 8001a7c:	4b4c      	ldr	r3, [pc, #304]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a84:	4a4a      	ldr	r2, [pc, #296]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001a86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a8a:	6053      	str	r3, [r2, #4]
 8001a8c:	e02e      	b.n	8001aec <HAL_RCC_OscConfig+0x434>
 8001a8e:	4b48      	ldr	r3, [pc, #288]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	069b      	lsls	r3, r3, #26
 8001a9c:	4944      	ldr	r1, [pc, #272]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	604b      	str	r3, [r1, #4]
 8001aa2:	e023      	b.n	8001aec <HAL_RCC_OscConfig+0x434>
 8001aa4:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	061b      	lsls	r3, r3, #24
 8001ab2:	493f      	ldr	r1, [pc, #252]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60cb      	str	r3, [r1, #12]
 8001ab8:	e018      	b.n	8001aec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001aba:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a3c      	ldr	r2, [pc, #240]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fa97 	bl	8000ff8 <HAL_GetTick>
 8001aca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001ace:	f7ff fa93 	bl	8000ff8 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e212      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ae0:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d036      	beq.n	8001b66 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d019      	beq.n	8001b34 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b00:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b04:	4a2a      	ldr	r2, [pc, #168]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0c:	f7ff fa74 	bl	8000ff8 <HAL_GetTick>
 8001b10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b14:	f7ff fa70 	bl	8000ff8 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e1ef      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0x45c>
 8001b32:	e018      	b.n	8001b66 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b34:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b38:	4a1d      	ldr	r2, [pc, #116]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001b3a:	f023 0301 	bic.w	r3, r3, #1
 8001b3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7ff fa5a 	bl	8000ff8 <HAL_GetTick>
 8001b44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b48:	f7ff fa56 	bl	8000ff8 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e1d5      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0320 	and.w	r3, r3, #32
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d039      	beq.n	8001be6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d01c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b86:	f7ff fa37 	bl	8000ff8 <HAL_GetTick>
 8001b8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b8e:	f7ff fa33 	bl	8000ff8 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e1b2      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x4d6>
 8001bac:	e01b      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
 8001bae:	bf00      	nop
 8001bb0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bb4:	4b9b      	ldr	r3, [pc, #620]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a9a      	ldr	r2, [pc, #616]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001bba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fa1a 	bl	8000ff8 <HAL_GetTick>
 8001bc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001bc8:	f7ff fa16 	bl	8000ff8 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e195      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bda:	4b92      	ldr	r3, [pc, #584]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8081 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bf4:	4b8c      	ldr	r3, [pc, #560]	; (8001e28 <HAL_RCC_OscConfig+0x770>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a8b      	ldr	r2, [pc, #556]	; (8001e28 <HAL_RCC_OscConfig+0x770>)
 8001bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c00:	f7ff f9fa 	bl	8000ff8 <HAL_GetTick>
 8001c04:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c08:	f7ff f9f6 	bl	8000ff8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	; 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e175      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c1a:	4b83      	ldr	r3, [pc, #524]	; (8001e28 <HAL_RCC_OscConfig+0x770>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d106      	bne.n	8001c3c <HAL_RCC_OscConfig+0x584>
 8001c2e:	4b7d      	ldr	r3, [pc, #500]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c32:	4a7c      	ldr	r2, [pc, #496]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3a:	e02d      	b.n	8001c98 <HAL_RCC_OscConfig+0x5e0>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10c      	bne.n	8001c5e <HAL_RCC_OscConfig+0x5a6>
 8001c44:	4b77      	ldr	r3, [pc, #476]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c48:	4a76      	ldr	r2, [pc, #472]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001c4a:	f023 0301 	bic.w	r3, r3, #1
 8001c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c50:	4b74      	ldr	r3, [pc, #464]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c54:	4a73      	ldr	r2, [pc, #460]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001c56:	f023 0304 	bic.w	r3, r3, #4
 8001c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5c:	e01c      	b.n	8001c98 <HAL_RCC_OscConfig+0x5e0>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5c8>
 8001c66:	4b6f      	ldr	r3, [pc, #444]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6a:	4a6e      	ldr	r2, [pc, #440]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001c6c:	f043 0304 	orr.w	r3, r3, #4
 8001c70:	6713      	str	r3, [r2, #112]	; 0x70
 8001c72:	4b6c      	ldr	r3, [pc, #432]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c76:	4a6b      	ldr	r2, [pc, #428]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7e:	e00b      	b.n	8001c98 <HAL_RCC_OscConfig+0x5e0>
 8001c80:	4b68      	ldr	r3, [pc, #416]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	4a67      	ldr	r2, [pc, #412]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001c86:	f023 0301 	bic.w	r3, r3, #1
 8001c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8c:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	4a64      	ldr	r2, [pc, #400]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001c92:	f023 0304 	bic.w	r3, r3, #4
 8001c96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d015      	beq.n	8001ccc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca0:	f7ff f9aa 	bl	8000ff8 <HAL_GetTick>
 8001ca4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca8:	f7ff f9a6 	bl	8000ff8 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e123      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cbe:	4b59      	ldr	r3, [pc, #356]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0ee      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x5f0>
 8001cca:	e014      	b.n	8001cf6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f994 	bl	8000ff8 <HAL_GetTick>
 8001cd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f990 	bl	8000ff8 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e10d      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cea:	4b4e      	ldr	r3, [pc, #312]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1ee      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8102 	beq.w	8001f04 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d00:	4b48      	ldr	r3, [pc, #288]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d08:	2b18      	cmp	r3, #24
 8001d0a:	f000 80bd 	beq.w	8001e88 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	f040 809e 	bne.w	8001e54 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d18:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a41      	ldr	r2, [pc, #260]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7ff f968 	bl	8000ff8 <HAL_GetTick>
 8001d28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7ff f964 	bl	8000ff8 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e0e3      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d3e:	4b39      	ldr	r3, [pc, #228]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d4a:	4b36      	ldr	r3, [pc, #216]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d4e:	4b37      	ldr	r3, [pc, #220]	; (8001e2c <HAL_RCC_OscConfig+0x774>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	4931      	ldr	r1, [pc, #196]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	628b      	str	r3, [r1, #40]	; 0x28
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d72:	3b01      	subs	r3, #1
 8001d74:	025b      	lsls	r3, r3, #9
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	041b      	lsls	r3, r3, #16
 8001d82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	061b      	lsls	r3, r3, #24
 8001d90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001d94:	4923      	ldr	r1, [pc, #140]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001d9a:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001da6:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001daa:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <HAL_RCC_OscConfig+0x778>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001db2:	00d2      	lsls	r2, r2, #3
 8001db4:	491b      	ldr	r1, [pc, #108]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	f023 020c 	bic.w	r2, r3, #12
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4917      	ldr	r1, [pc, #92]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001dcc:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	f023 0202 	bic.w	r2, r3, #2
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd8:	4912      	ldr	r1, [pc, #72]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	4a10      	ldr	r2, [pc, #64]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <HAL_RCC_OscConfig+0x76c>)
 8001e14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1a:	f7ff f8ed 	bl	8000ff8 <HAL_GetTick>
 8001e1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e20:	e011      	b.n	8001e46 <HAL_RCC_OscConfig+0x78e>
 8001e22:	bf00      	nop
 8001e24:	58024400 	.word	0x58024400
 8001e28:	58024800 	.word	0x58024800
 8001e2c:	fffffc0c 	.word	0xfffffc0c
 8001e30:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e34:	f7ff f8e0 	bl	8000ff8 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e05f      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <HAL_RCC_OscConfig+0x858>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x77c>
 8001e52:	e057      	b.n	8001f04 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e54:	4b2e      	ldr	r3, [pc, #184]	; (8001f10 <HAL_RCC_OscConfig+0x858>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a2d      	ldr	r2, [pc, #180]	; (8001f10 <HAL_RCC_OscConfig+0x858>)
 8001e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7ff f8ca 	bl	8000ff8 <HAL_GetTick>
 8001e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e68:	f7ff f8c6 	bl	8000ff8 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e045      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e7a:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <HAL_RCC_OscConfig+0x858>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x7b0>
 8001e86:	e03d      	b.n	8001f04 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e88:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_RCC_OscConfig+0x858>)
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_RCC_OscConfig+0x858>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d031      	beq.n	8001f00 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	f003 0203 	and.w	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d12a      	bne.n	8001f00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d122      	bne.n	8001f00 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d11a      	bne.n	8001f00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	0a5b      	lsrs	r3, r3, #9
 8001ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d111      	bne.n	8001f00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	0c1b      	lsrs	r3, r3, #16
 8001ee0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d108      	bne.n	8001f00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	0e1b      	lsrs	r3, r3, #24
 8001ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3730      	adds	r7, #48	; 0x30
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	58024400 	.word	0x58024400

08001f14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e19c      	b.n	8002262 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f28:	4b8a      	ldr	r3, [pc, #552]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d910      	bls.n	8001f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b87      	ldr	r3, [pc, #540]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 020f 	bic.w	r2, r3, #15
 8001f3e:	4985      	ldr	r1, [pc, #532]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b83      	ldr	r3, [pc, #524]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e184      	b.n	8002262 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d010      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	4b7b      	ldr	r3, [pc, #492]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d908      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f74:	4b78      	ldr	r3, [pc, #480]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	4975      	ldr	r1, [pc, #468]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d010      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	4b70      	ldr	r3, [pc, #448]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d908      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fa2:	4b6d      	ldr	r3, [pc, #436]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	496a      	ldr	r1, [pc, #424]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d010      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699a      	ldr	r2, [r3, #24]
 8001fc4:	4b64      	ldr	r3, [pc, #400]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d908      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fd0:	4b61      	ldr	r3, [pc, #388]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	495e      	ldr	r1, [pc, #376]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69da      	ldr	r2, [r3, #28]
 8001ff2:	4b59      	ldr	r3, [pc, #356]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d908      	bls.n	8002010 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ffe:	4b56      	ldr	r3, [pc, #344]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4953      	ldr	r1, [pc, #332]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 800200c:	4313      	orrs	r3, r2
 800200e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d010      	beq.n	800203e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	4b4d      	ldr	r3, [pc, #308]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	429a      	cmp	r2, r3
 800202a:	d908      	bls.n	800203e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800202c:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f023 020f 	bic.w	r2, r3, #15
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4947      	ldr	r1, [pc, #284]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 800203a:	4313      	orrs	r3, r2
 800203c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d055      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800204a:	4b43      	ldr	r3, [pc, #268]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	4940      	ldr	r1, [pc, #256]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002058:	4313      	orrs	r3, r2
 800205a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d107      	bne.n	8002074 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002064:	4b3c      	ldr	r3, [pc, #240]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d121      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0f6      	b.n	8002262 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b03      	cmp	r3, #3
 800207a:	d107      	bne.n	800208c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800207c:	4b36      	ldr	r3, [pc, #216]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d115      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0ea      	b.n	8002262 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d107      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002094:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d109      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0de      	b.n	8002262 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020a4:	4b2c      	ldr	r3, [pc, #176]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0d6      	b.n	8002262 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020b4:	4b28      	ldr	r3, [pc, #160]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f023 0207 	bic.w	r2, r3, #7
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4925      	ldr	r1, [pc, #148]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c6:	f7fe ff97 	bl	8000ff8 <HAL_GetTick>
 80020ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020cc:	e00a      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ce:	f7fe ff93 	bl	8000ff8 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020dc:	4293      	cmp	r3, r2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e0be      	b.n	8002262 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e4:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d1eb      	bne.n	80020ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d010      	beq.n	8002124 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	429a      	cmp	r2, r3
 8002110:	d208      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f023 020f 	bic.w	r2, r3, #15
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	490e      	ldr	r1, [pc, #56]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002120:	4313      	orrs	r3, r2
 8002122:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d214      	bcs.n	800215c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 020f 	bic.w	r2, r3, #15
 800213a:	4906      	ldr	r1, [pc, #24]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d005      	beq.n	800215c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e086      	b.n	8002262 <HAL_RCC_ClockConfig+0x34e>
 8002154:	52002000 	.word	0x52002000
 8002158:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d010      	beq.n	800218a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	4b3f      	ldr	r3, [pc, #252]	; (800226c <HAL_RCC_ClockConfig+0x358>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002174:	429a      	cmp	r2, r3
 8002176:	d208      	bcs.n	800218a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002178:	4b3c      	ldr	r3, [pc, #240]	; (800226c <HAL_RCC_ClockConfig+0x358>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	4939      	ldr	r1, [pc, #228]	; (800226c <HAL_RCC_ClockConfig+0x358>)
 8002186:	4313      	orrs	r3, r2
 8002188:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d010      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695a      	ldr	r2, [r3, #20]
 800219a:	4b34      	ldr	r3, [pc, #208]	; (800226c <HAL_RCC_ClockConfig+0x358>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d208      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021a6:	4b31      	ldr	r3, [pc, #196]	; (800226c <HAL_RCC_ClockConfig+0x358>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	492e      	ldr	r1, [pc, #184]	; (800226c <HAL_RCC_ClockConfig+0x358>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d010      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699a      	ldr	r2, [r3, #24]
 80021c8:	4b28      	ldr	r3, [pc, #160]	; (800226c <HAL_RCC_ClockConfig+0x358>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d208      	bcs.n	80021e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021d4:	4b25      	ldr	r3, [pc, #148]	; (800226c <HAL_RCC_ClockConfig+0x358>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	4922      	ldr	r1, [pc, #136]	; (800226c <HAL_RCC_ClockConfig+0x358>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d010      	beq.n	8002214 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69da      	ldr	r2, [r3, #28]
 80021f6:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_RCC_ClockConfig+0x358>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021fe:	429a      	cmp	r2, r3
 8002200:	d208      	bcs.n	8002214 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <HAL_RCC_ClockConfig+0x358>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4917      	ldr	r1, [pc, #92]	; (800226c <HAL_RCC_ClockConfig+0x358>)
 8002210:	4313      	orrs	r3, r2
 8002212:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002214:	f000 f834 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 8002218:	4602      	mov	r2, r0
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_RCC_ClockConfig+0x358>)
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	4912      	ldr	r1, [pc, #72]	; (8002270 <HAL_RCC_ClockConfig+0x35c>)
 8002226:	5ccb      	ldrb	r3, [r1, r3]
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
 8002230:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <HAL_RCC_ClockConfig+0x358>)
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <HAL_RCC_ClockConfig+0x35c>)
 800223c:	5cd3      	ldrb	r3, [r2, r3]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
 8002248:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <HAL_RCC_ClockConfig+0x360>)
 800224a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800224c:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <HAL_RCC_ClockConfig+0x364>)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_RCC_ClockConfig+0x368>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe fe84 	bl	8000f64 <HAL_InitTick>
 800225c:	4603      	mov	r3, r0
 800225e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002260:	7bfb      	ldrb	r3, [r7, #15]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	58024400 	.word	0x58024400
 8002270:	080066b8 	.word	0x080066b8
 8002274:	24000004 	.word	0x24000004
 8002278:	24000000 	.word	0x24000000
 800227c:	24000008 	.word	0x24000008

08002280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002286:	4bb3      	ldr	r3, [pc, #716]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800228e:	2b18      	cmp	r3, #24
 8002290:	f200 8155 	bhi.w	800253e <HAL_RCC_GetSysClockFreq+0x2be>
 8002294:	a201      	add	r2, pc, #4	; (adr r2, 800229c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229a:	bf00      	nop
 800229c:	08002301 	.word	0x08002301
 80022a0:	0800253f 	.word	0x0800253f
 80022a4:	0800253f 	.word	0x0800253f
 80022a8:	0800253f 	.word	0x0800253f
 80022ac:	0800253f 	.word	0x0800253f
 80022b0:	0800253f 	.word	0x0800253f
 80022b4:	0800253f 	.word	0x0800253f
 80022b8:	0800253f 	.word	0x0800253f
 80022bc:	08002327 	.word	0x08002327
 80022c0:	0800253f 	.word	0x0800253f
 80022c4:	0800253f 	.word	0x0800253f
 80022c8:	0800253f 	.word	0x0800253f
 80022cc:	0800253f 	.word	0x0800253f
 80022d0:	0800253f 	.word	0x0800253f
 80022d4:	0800253f 	.word	0x0800253f
 80022d8:	0800253f 	.word	0x0800253f
 80022dc:	0800232d 	.word	0x0800232d
 80022e0:	0800253f 	.word	0x0800253f
 80022e4:	0800253f 	.word	0x0800253f
 80022e8:	0800253f 	.word	0x0800253f
 80022ec:	0800253f 	.word	0x0800253f
 80022f0:	0800253f 	.word	0x0800253f
 80022f4:	0800253f 	.word	0x0800253f
 80022f8:	0800253f 	.word	0x0800253f
 80022fc:	08002333 	.word	0x08002333
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002300:	4b94      	ldr	r3, [pc, #592]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0320 	and.w	r3, r3, #32
 8002308:	2b00      	cmp	r3, #0
 800230a:	d009      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800230c:	4b91      	ldr	r3, [pc, #580]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	08db      	lsrs	r3, r3, #3
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	4a90      	ldr	r2, [pc, #576]	; (8002558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
 800231c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800231e:	e111      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002320:	4b8d      	ldr	r3, [pc, #564]	; (8002558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002322:	61bb      	str	r3, [r7, #24]
    break;
 8002324:	e10e      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002326:	4b8d      	ldr	r3, [pc, #564]	; (800255c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002328:	61bb      	str	r3, [r7, #24]
    break;
 800232a:	e10b      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800232c:	4b8c      	ldr	r3, [pc, #560]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800232e:	61bb      	str	r3, [r7, #24]
    break;
 8002330:	e108      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002332:	4b88      	ldr	r3, [pc, #544]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800233c:	4b85      	ldr	r3, [pc, #532]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002346:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002348:	4b82      	ldr	r3, [pc, #520]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002352:	4b80      	ldr	r3, [pc, #512]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002356:	08db      	lsrs	r3, r3, #3
 8002358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	ee07 3a90 	vmov	s15, r3
 8002366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800236a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80e1 	beq.w	8002538 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2b02      	cmp	r3, #2
 800237a:	f000 8083 	beq.w	8002484 <HAL_RCC_GetSysClockFreq+0x204>
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2b02      	cmp	r3, #2
 8002382:	f200 80a1 	bhi.w	80024c8 <HAL_RCC_GetSysClockFreq+0x248>
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x114>
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d056      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002392:	e099      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002394:	4b6f      	ldr	r3, [pc, #444]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b00      	cmp	r3, #0
 800239e:	d02d      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023a0:	4b6c      	ldr	r3, [pc, #432]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	08db      	lsrs	r3, r3, #3
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	4a6b      	ldr	r2, [pc, #428]	; (8002558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
 80023b0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	ee07 3a90 	vmov	s15, r3
 80023b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	ee07 3a90 	vmov	s15, r3
 80023c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ca:	4b62      	ldr	r3, [pc, #392]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023da:	ed97 6a02 	vldr	s12, [r7, #8]
 80023de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002564 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80023fa:	e087      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	ee07 3a90 	vmov	s15, r3
 8002402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002406:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002568 <HAL_RCC_GetSysClockFreq+0x2e8>
 800240a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800240e:	4b51      	ldr	r3, [pc, #324]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800241e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002422:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002564 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800242a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800242e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800243e:	e065      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800256c <HAL_RCC_GetSysClockFreq+0x2ec>
 800244e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002452:	4b40      	ldr	r3, [pc, #256]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002462:	ed97 6a02 	vldr	s12, [r7, #8]
 8002466:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002564 <HAL_RCC_GetSysClockFreq+0x2e4>
 800246a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800246e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800247a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002482:	e043      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800248e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002570 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002496:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002564 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024c6:	e021      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	ee07 3a90 	vmov	s15, r3
 80024ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800256c <HAL_RCC_GetSysClockFreq+0x2ec>
 80024d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024da:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002564 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800250a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	0a5b      	lsrs	r3, r3, #9
 8002512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002516:	3301      	adds	r3, #1
 8002518:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	ee07 3a90 	vmov	s15, r3
 8002520:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002524:	edd7 6a07 	vldr	s13, [r7, #28]
 8002528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800252c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002530:	ee17 3a90 	vmov	r3, s15
 8002534:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002536:	e005      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
    break;
 800253c:	e002      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002540:	61bb      	str	r3, [r7, #24]
    break;
 8002542:	bf00      	nop
  }

  return sysclockfreq;
 8002544:	69bb      	ldr	r3, [r7, #24]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3724      	adds	r7, #36	; 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	58024400 	.word	0x58024400
 8002558:	03d09000 	.word	0x03d09000
 800255c:	003d0900 	.word	0x003d0900
 8002560:	007a1200 	.word	0x007a1200
 8002564:	46000000 	.word	0x46000000
 8002568:	4c742400 	.word	0x4c742400
 800256c:	4a742400 	.word	0x4a742400
 8002570:	4af42400 	.word	0x4af42400

08002574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800257a:	f7ff fe81 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 800257e:	4602      	mov	r2, r0
 8002580:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	490f      	ldr	r1, [pc, #60]	; (80025c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800258c:	5ccb      	ldrb	r3, [r1, r3]
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	fa22 f303 	lsr.w	r3, r2, r3
 8002596:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	fa22 f303 	lsr.w	r3, r2, r3
 80025ae:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HAL_RCC_GetHCLKFreq+0x58>)
 80025b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025b2:	4a07      	ldr	r2, [pc, #28]	; (80025d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <HAL_RCC_GetHCLKFreq+0x58>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	58024400 	.word	0x58024400
 80025c8:	080066b8 	.word	0x080066b8
 80025cc:	24000004 	.word	0x24000004
 80025d0:	24000000 	.word	0x24000000

080025d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80025d8:	f7ff ffcc 	bl	8002574 <HAL_RCC_GetHCLKFreq>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4904      	ldr	r1, [pc, #16]	; (80025fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80025ea:	5ccb      	ldrb	r3, [r1, r3]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	58024400 	.word	0x58024400
 80025fc:	080066b8 	.word	0x080066b8

08002600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002604:	f7ff ffb6 	bl	8002574 <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <HAL_RCC_GetPCLK2Freq+0x24>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4904      	ldr	r1, [pc, #16]	; (8002628 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	58024400 	.word	0x58024400
 8002628:	080066b8 	.word	0x080066b8

0800262c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002634:	2300      	movs	r3, #0
 8002636:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002638:	2300      	movs	r3, #0
 800263a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d03f      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800264c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002650:	d02a      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002652:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002656:	d824      	bhi.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002658:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800265c:	d018      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800265e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002662:	d81e      	bhi.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800266c:	d007      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800266e:	e018      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002670:	4ba3      	ldr	r3, [pc, #652]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	4aa2      	ldr	r2, [pc, #648]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800267c:	e015      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3304      	adds	r3, #4
 8002682:	2102      	movs	r1, #2
 8002684:	4618      	mov	r0, r3
 8002686:	f001 f9d5 	bl	8003a34 <RCCEx_PLL2_Config>
 800268a:	4603      	mov	r3, r0
 800268c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800268e:	e00c      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3324      	adds	r3, #36	; 0x24
 8002694:	2102      	movs	r1, #2
 8002696:	4618      	mov	r0, r3
 8002698:	f001 fa7e 	bl	8003b98 <RCCEx_PLL3_Config>
 800269c:	4603      	mov	r3, r0
 800269e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026a0:	e003      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	75fb      	strb	r3, [r7, #23]
      break;
 80026a6:	e000      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80026b0:	4b93      	ldr	r3, [pc, #588]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026bc:	4990      	ldr	r1, [pc, #576]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	650b      	str	r3, [r1, #80]	; 0x50
 80026c2:	e001      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
 80026c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d03d      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d826      	bhi.n	800272a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80026dc:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80026de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e2:	bf00      	nop
 80026e4:	080026f9 	.word	0x080026f9
 80026e8:	08002707 	.word	0x08002707
 80026ec:	08002719 	.word	0x08002719
 80026f0:	08002731 	.word	0x08002731
 80026f4:	08002731 	.word	0x08002731
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026f8:	4b81      	ldr	r3, [pc, #516]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	4a80      	ldr	r2, [pc, #512]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002702:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002704:	e015      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3304      	adds	r3, #4
 800270a:	2100      	movs	r1, #0
 800270c:	4618      	mov	r0, r3
 800270e:	f001 f991 	bl	8003a34 <RCCEx_PLL2_Config>
 8002712:	4603      	mov	r3, r0
 8002714:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002716:	e00c      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3324      	adds	r3, #36	; 0x24
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f001 fa3a 	bl	8003b98 <RCCEx_PLL3_Config>
 8002724:	4603      	mov	r3, r0
 8002726:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002728:	e003      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
      break;
 800272e:	e000      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002732:	7dfb      	ldrb	r3, [r7, #23]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d109      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002738:	4b71      	ldr	r3, [pc, #452]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800273a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800273c:	f023 0207 	bic.w	r2, r3, #7
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002744:	496e      	ldr	r1, [pc, #440]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002746:	4313      	orrs	r3, r2
 8002748:	650b      	str	r3, [r1, #80]	; 0x50
 800274a:	e001      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800274c:	7dfb      	ldrb	r3, [r7, #23]
 800274e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002758:	2b00      	cmp	r3, #0
 800275a:	d042      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002764:	d02b      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800276a:	d825      	bhi.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800276c:	2bc0      	cmp	r3, #192	; 0xc0
 800276e:	d028      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002770:	2bc0      	cmp	r3, #192	; 0xc0
 8002772:	d821      	bhi.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002774:	2b80      	cmp	r3, #128	; 0x80
 8002776:	d016      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002778:	2b80      	cmp	r3, #128	; 0x80
 800277a:	d81d      	bhi.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002780:	2b40      	cmp	r3, #64	; 0x40
 8002782:	d007      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002784:	e018      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002786:	4b5e      	ldr	r3, [pc, #376]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	4a5d      	ldr	r2, [pc, #372]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800278c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002790:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002792:	e017      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3304      	adds	r3, #4
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f001 f94a 	bl	8003a34 <RCCEx_PLL2_Config>
 80027a0:	4603      	mov	r3, r0
 80027a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80027a4:	e00e      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3324      	adds	r3, #36	; 0x24
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f001 f9f3 	bl	8003b98 <RCCEx_PLL3_Config>
 80027b2:	4603      	mov	r3, r0
 80027b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80027b6:	e005      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	75fb      	strb	r3, [r7, #23]
      break;
 80027bc:	e002      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80027be:	bf00      	nop
 80027c0:	e000      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80027c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80027ca:	4b4d      	ldr	r3, [pc, #308]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	494a      	ldr	r1, [pc, #296]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	650b      	str	r3, [r1, #80]	; 0x50
 80027dc:	e001      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027de:	7dfb      	ldrb	r3, [r7, #23]
 80027e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d049      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027f8:	d030      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80027fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027fe:	d82a      	bhi.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002800:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002804:	d02c      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002806:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800280a:	d824      	bhi.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800280c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002810:	d018      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002816:	d81e      	bhi.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800281c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002820:	d007      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002822:	e018      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002824:	4b36      	ldr	r3, [pc, #216]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	4a35      	ldr	r2, [pc, #212]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800282a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800282e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002830:	e017      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3304      	adds	r3, #4
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f001 f8fb 	bl	8003a34 <RCCEx_PLL2_Config>
 800283e:	4603      	mov	r3, r0
 8002840:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002842:	e00e      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3324      	adds	r3, #36	; 0x24
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f001 f9a4 	bl	8003b98 <RCCEx_PLL3_Config>
 8002850:	4603      	mov	r3, r0
 8002852:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002854:	e005      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
      break;
 800285a:	e002      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800285c:	bf00      	nop
 800285e:	e000      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002862:	7dfb      	ldrb	r3, [r7, #23]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002868:	4b25      	ldr	r3, [pc, #148]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002876:	4922      	ldr	r1, [pc, #136]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002878:	4313      	orrs	r3, r2
 800287a:	658b      	str	r3, [r1, #88]	; 0x58
 800287c:	e001      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800288a:	2b00      	cmp	r3, #0
 800288c:	d04b      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002898:	d030      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800289a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800289e:	d82a      	bhi.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80028a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028a4:	d02e      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80028a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028aa:	d824      	bhi.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80028ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028b0:	d018      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80028b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028b6:	d81e      	bhi.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80028bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c0:	d007      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80028c2:	e018      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028c4:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	4a0d      	ldr	r2, [pc, #52]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028d0:	e019      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3304      	adds	r3, #4
 80028d6:	2100      	movs	r1, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f001 f8ab 	bl	8003a34 <RCCEx_PLL2_Config>
 80028de:	4603      	mov	r3, r0
 80028e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80028e2:	e010      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3324      	adds	r3, #36	; 0x24
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 f954 	bl	8003b98 <RCCEx_PLL3_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028f4:	e007      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	75fb      	strb	r3, [r7, #23]
      break;
 80028fa:	e004      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80028fc:	bf00      	nop
 80028fe:	e002      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002900:	58024400 	.word	0x58024400
      break;
 8002904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002906:	7dfb      	ldrb	r3, [r7, #23]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800290c:	4b99      	ldr	r3, [pc, #612]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800291a:	4996      	ldr	r1, [pc, #600]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800291c:	4313      	orrs	r3, r2
 800291e:	658b      	str	r3, [r1, #88]	; 0x58
 8002920:	e001      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002922:	7dfb      	ldrb	r3, [r7, #23]
 8002924:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d032      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002936:	2b30      	cmp	r3, #48	; 0x30
 8002938:	d01c      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800293a:	2b30      	cmp	r3, #48	; 0x30
 800293c:	d817      	bhi.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800293e:	2b20      	cmp	r3, #32
 8002940:	d00c      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002942:	2b20      	cmp	r3, #32
 8002944:	d813      	bhi.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002946:	2b00      	cmp	r3, #0
 8002948:	d016      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800294a:	2b10      	cmp	r3, #16
 800294c:	d10f      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800294e:	4b89      	ldr	r3, [pc, #548]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	4a88      	ldr	r2, [pc, #544]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002958:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800295a:	e00e      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	2102      	movs	r1, #2
 8002962:	4618      	mov	r0, r3
 8002964:	f001 f866 	bl	8003a34 <RCCEx_PLL2_Config>
 8002968:	4603      	mov	r3, r0
 800296a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800296c:	e005      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	75fb      	strb	r3, [r7, #23]
      break;
 8002972:	e002      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002974:	bf00      	nop
 8002976:	e000      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800297a:	7dfb      	ldrb	r3, [r7, #23]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d109      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002980:	4b7c      	ldr	r3, [pc, #496]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002984:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298c:	4979      	ldr	r1, [pc, #484]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800298e:	4313      	orrs	r3, r2
 8002990:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002992:	e001      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d047      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ac:	d030      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80029ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029b2:	d82a      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80029b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029b8:	d02c      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80029ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029be:	d824      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80029c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c4:	d018      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80029c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ca:	d81e      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80029d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d4:	d007      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80029d6:	e018      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029d8:	4b66      	ldr	r3, [pc, #408]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	4a65      	ldr	r2, [pc, #404]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029e4:	e017      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3304      	adds	r3, #4
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f001 f821 	bl	8003a34 <RCCEx_PLL2_Config>
 80029f2:	4603      	mov	r3, r0
 80029f4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029f6:	e00e      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3324      	adds	r3, #36	; 0x24
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f001 f8ca 	bl	8003b98 <RCCEx_PLL3_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a08:	e005      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a0e:	e002      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002a10:	bf00      	nop
 8002a12:	e000      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002a14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a16:	7dfb      	ldrb	r3, [r7, #23]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a1c:	4b55      	ldr	r3, [pc, #340]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a20:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	4952      	ldr	r1, [pc, #328]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	650b      	str	r3, [r1, #80]	; 0x50
 8002a2e:	e001      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a30:	7dfb      	ldrb	r3, [r7, #23]
 8002a32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d049      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a48:	d02e      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002a4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a4e:	d828      	bhi.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002a50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a54:	d02a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002a56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a5a:	d822      	bhi.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002a5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a60:	d026      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002a62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a66:	d81c      	bhi.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002a68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a6c:	d010      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002a6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a72:	d816      	bhi.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d01d      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7c:	d111      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2101      	movs	r1, #1
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 ffd5 	bl	8003a34 <RCCEx_PLL2_Config>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a8e:	e012      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3324      	adds	r3, #36	; 0x24
 8002a94:	2101      	movs	r1, #1
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 f87e 	bl	8003b98 <RCCEx_PLL3_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002aa0:	e009      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8002aa6:	e006      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002aa8:	bf00      	nop
 8002aaa:	e004      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002aac:	bf00      	nop
 8002aae:	e002      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002ab0:	bf00      	nop
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d109      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002abc:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac8:	492a      	ldr	r1, [pc, #168]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	650b      	str	r3, [r1, #80]	; 0x50
 8002ace:	e001      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad0:	7dfb      	ldrb	r3, [r7, #23]
 8002ad2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d04d      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aea:	d02e      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002af0:	d828      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af6:	d02a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afc:	d822      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002afe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b02:	d026      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002b04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b08:	d81c      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b0e:	d010      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b14:	d816      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d01d      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002b1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b1e:	d111      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3304      	adds	r3, #4
 8002b24:	2101      	movs	r1, #1
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 ff84 	bl	8003a34 <RCCEx_PLL2_Config>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b30:	e012      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3324      	adds	r3, #36	; 0x24
 8002b36:	2101      	movs	r1, #1
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f001 f82d 	bl	8003b98 <RCCEx_PLL3_Config>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b42:	e009      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	75fb      	strb	r3, [r7, #23]
      break;
 8002b48:	e006      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e004      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e002      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002b52:	bf00      	nop
 8002b54:	e000      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002b56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b6c:	4901      	ldr	r1, [pc, #4]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	658b      	str	r3, [r1, #88]	; 0x58
 8002b72:	e003      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002b74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d02f      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b90:	d00e      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b96:	d814      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d015      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002b9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ba0:	d10f      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ba2:	4baf      	ldr	r3, [pc, #700]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	4aae      	ldr	r2, [pc, #696]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002bae:	e00c      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 ff3c 	bl	8003a34 <RCCEx_PLL2_Config>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002bc0:	e003      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8002bc6:	e000      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d109      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bd0:	4ba3      	ldr	r3, [pc, #652]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bdc:	49a0      	ldr	r1, [pc, #640]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	650b      	str	r3, [r1, #80]	; 0x50
 8002be2:	e001      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d032      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d81b      	bhi.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002bfc:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c02:	bf00      	nop
 8002c04:	08002c3b 	.word	0x08002c3b
 8002c08:	08002c15 	.word	0x08002c15
 8002c0c:	08002c23 	.word	0x08002c23
 8002c10:	08002c3b 	.word	0x08002c3b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c14:	4b92      	ldr	r3, [pc, #584]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	4a91      	ldr	r2, [pc, #580]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c20:	e00c      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2102      	movs	r1, #2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 ff03 	bl	8003a34 <RCCEx_PLL2_Config>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c32:	e003      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	75fb      	strb	r3, [r7, #23]
      break;
 8002c38:	e000      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c42:	4b87      	ldr	r3, [pc, #540]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c46:	f023 0203 	bic.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	4984      	ldr	r1, [pc, #528]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c54:	e001      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 8086 	beq.w	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c68:	4b7e      	ldr	r3, [pc, #504]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a7d      	ldr	r2, [pc, #500]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c74:	f7fe f9c0 	bl	8000ff8 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c7a:	e009      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7c:	f7fe f9bc 	bl	8000ff8 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d902      	bls.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	75fb      	strb	r3, [r7, #23]
        break;
 8002c8e:	e005      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c90:	4b74      	ldr	r3, [pc, #464]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ef      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d166      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ca2:	4b6f      	ldr	r3, [pc, #444]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ca4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cac:	4053      	eors	r3, r2
 8002cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d013      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cb6:	4b6a      	ldr	r3, [pc, #424]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cbe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cc0:	4b67      	ldr	r3, [pc, #412]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc4:	4a66      	ldr	r2, [pc, #408]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ccc:	4b64      	ldr	r3, [pc, #400]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	4a63      	ldr	r2, [pc, #396]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002cd8:	4a61      	ldr	r2, [pc, #388]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce8:	d115      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cea:	f7fe f985 	bl	8000ff8 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cf0:	e00b      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7fe f981 	bl	8000ff8 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d902      	bls.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	75fb      	strb	r3, [r7, #23]
            break;
 8002d08:	e005      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d0a:	4b55      	ldr	r3, [pc, #340]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0ed      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d126      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d2a:	d10d      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002d2c:	4b4c      	ldr	r3, [pc, #304]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d3a:	0919      	lsrs	r1, r3, #4
 8002d3c:	4b4a      	ldr	r3, [pc, #296]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002d3e:	400b      	ands	r3, r1
 8002d40:	4947      	ldr	r1, [pc, #284]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	610b      	str	r3, [r1, #16]
 8002d46:	e005      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002d48:	4b45      	ldr	r3, [pc, #276]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	4a44      	ldr	r2, [pc, #272]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d52:	6113      	str	r3, [r2, #16]
 8002d54:	4b42      	ldr	r3, [pc, #264]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d62:	493f      	ldr	r1, [pc, #252]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	670b      	str	r3, [r1, #112]	; 0x70
 8002d68:	e004      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
 8002d6c:	75bb      	strb	r3, [r7, #22]
 8002d6e:	e001      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8085 	beq.w	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d86:	2b28      	cmp	r3, #40	; 0x28
 8002d88:	d866      	bhi.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002d8a:	a201      	add	r2, pc, #4	; (adr r2, 8002d90 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d90:	08002e6d 	.word	0x08002e6d
 8002d94:	08002e59 	.word	0x08002e59
 8002d98:	08002e59 	.word	0x08002e59
 8002d9c:	08002e59 	.word	0x08002e59
 8002da0:	08002e59 	.word	0x08002e59
 8002da4:	08002e59 	.word	0x08002e59
 8002da8:	08002e59 	.word	0x08002e59
 8002dac:	08002e59 	.word	0x08002e59
 8002db0:	08002e35 	.word	0x08002e35
 8002db4:	08002e59 	.word	0x08002e59
 8002db8:	08002e59 	.word	0x08002e59
 8002dbc:	08002e59 	.word	0x08002e59
 8002dc0:	08002e59 	.word	0x08002e59
 8002dc4:	08002e59 	.word	0x08002e59
 8002dc8:	08002e59 	.word	0x08002e59
 8002dcc:	08002e59 	.word	0x08002e59
 8002dd0:	08002e47 	.word	0x08002e47
 8002dd4:	08002e59 	.word	0x08002e59
 8002dd8:	08002e59 	.word	0x08002e59
 8002ddc:	08002e59 	.word	0x08002e59
 8002de0:	08002e59 	.word	0x08002e59
 8002de4:	08002e59 	.word	0x08002e59
 8002de8:	08002e59 	.word	0x08002e59
 8002dec:	08002e59 	.word	0x08002e59
 8002df0:	08002e6d 	.word	0x08002e6d
 8002df4:	08002e59 	.word	0x08002e59
 8002df8:	08002e59 	.word	0x08002e59
 8002dfc:	08002e59 	.word	0x08002e59
 8002e00:	08002e59 	.word	0x08002e59
 8002e04:	08002e59 	.word	0x08002e59
 8002e08:	08002e59 	.word	0x08002e59
 8002e0c:	08002e59 	.word	0x08002e59
 8002e10:	08002e6d 	.word	0x08002e6d
 8002e14:	08002e59 	.word	0x08002e59
 8002e18:	08002e59 	.word	0x08002e59
 8002e1c:	08002e59 	.word	0x08002e59
 8002e20:	08002e59 	.word	0x08002e59
 8002e24:	08002e59 	.word	0x08002e59
 8002e28:	08002e59 	.word	0x08002e59
 8002e2c:	08002e59 	.word	0x08002e59
 8002e30:	08002e6d 	.word	0x08002e6d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3304      	adds	r3, #4
 8002e38:	2101      	movs	r1, #1
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fdfa 	bl	8003a34 <RCCEx_PLL2_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e44:	e013      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3324      	adds	r3, #36	; 0x24
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fea3 	bl	8003b98 <RCCEx_PLL3_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e56:	e00a      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e5c:	e007      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002e5e:	bf00      	nop
 8002e60:	58024400 	.word	0x58024400
 8002e64:	58024800 	.word	0x58024800
 8002e68:	00ffffcf 	.word	0x00ffffcf
      break;
 8002e6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e74:	4b96      	ldr	r3, [pc, #600]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e80:	4993      	ldr	r1, [pc, #588]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	654b      	str	r3, [r1, #84]	; 0x54
 8002e86:	e001      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d038      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9c:	2b05      	cmp	r3, #5
 8002e9e:	d821      	bhi.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002ea0:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002eeb 	.word	0x08002eeb
 8002eac:	08002ec1 	.word	0x08002ec1
 8002eb0:	08002ed3 	.word	0x08002ed3
 8002eb4:	08002eeb 	.word	0x08002eeb
 8002eb8:	08002eeb 	.word	0x08002eeb
 8002ebc:	08002eeb 	.word	0x08002eeb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fdb4 	bl	8003a34 <RCCEx_PLL2_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ed0:	e00c      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3324      	adds	r3, #36	; 0x24
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fe5d 	bl	8003b98 <RCCEx_PLL3_Config>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ee2:	e003      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee8:	e000      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002ef2:	4b77      	ldr	r3, [pc, #476]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	f023 0207 	bic.w	r2, r3, #7
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efe:	4974      	ldr	r1, [pc, #464]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	654b      	str	r3, [r1, #84]	; 0x54
 8002f04:	e001      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
 8002f08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d03a      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d821      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002f20:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f26:	bf00      	nop
 8002f28:	08002f6b 	.word	0x08002f6b
 8002f2c:	08002f41 	.word	0x08002f41
 8002f30:	08002f53 	.word	0x08002f53
 8002f34:	08002f6b 	.word	0x08002f6b
 8002f38:	08002f6b 	.word	0x08002f6b
 8002f3c:	08002f6b 	.word	0x08002f6b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	2101      	movs	r1, #1
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fd74 	bl	8003a34 <RCCEx_PLL2_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f50:	e00c      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3324      	adds	r3, #36	; 0x24
 8002f56:	2101      	movs	r1, #1
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fe1d 	bl	8003b98 <RCCEx_PLL3_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f62:	e003      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	75fb      	strb	r3, [r7, #23]
      break;
 8002f68:	e000      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f6c:	7dfb      	ldrb	r3, [r7, #23]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10a      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f72:	4b57      	ldr	r3, [pc, #348]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	f023 0207 	bic.w	r2, r3, #7
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f80:	4953      	ldr	r1, [pc, #332]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	658b      	str	r3, [r1, #88]	; 0x58
 8002f86:	e001      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f88:	7dfb      	ldrb	r3, [r7, #23]
 8002f8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d04b      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa2:	d02e      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa8:	d828      	bhi.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fae:	d02a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb4:	d822      	bhi.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002fb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fba:	d026      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002fbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fc0:	d81c      	bhi.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002fc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc6:	d010      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fcc:	d816      	bhi.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d01d      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fd6:	d111      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3304      	adds	r3, #4
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fd28 	bl	8003a34 <RCCEx_PLL2_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002fe8:	e012      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3324      	adds	r3, #36	; 0x24
 8002fee:	2102      	movs	r1, #2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fdd1 	bl	8003b98 <RCCEx_PLL3_Config>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002ffa:	e009      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8003000:	e006      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003002:	bf00      	nop
 8003004:	e004      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003006:	bf00      	nop
 8003008:	e002      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800300a:	bf00      	nop
 800300c:	e000      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800300e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003010:	7dfb      	ldrb	r3, [r7, #23]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10a      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003016:	4b2e      	ldr	r3, [pc, #184]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003024:	492a      	ldr	r1, [pc, #168]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003026:	4313      	orrs	r3, r2
 8003028:	654b      	str	r3, [r1, #84]	; 0x54
 800302a:	e001      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d04d      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003042:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003046:	d02e      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003048:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800304c:	d828      	bhi.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800304e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003052:	d02a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003058:	d822      	bhi.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800305a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800305e:	d026      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003060:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003064:	d81c      	bhi.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800306a:	d010      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800306c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003070:	d816      	bhi.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01d      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307a:	d111      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3304      	adds	r3, #4
 8003080:	2100      	movs	r1, #0
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fcd6 	bl	8003a34 <RCCEx_PLL2_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800308c:	e012      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3324      	adds	r3, #36	; 0x24
 8003092:	2102      	movs	r1, #2
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fd7f 	bl	8003b98 <RCCEx_PLL3_Config>
 800309a:	4603      	mov	r3, r0
 800309c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800309e:	e009      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	75fb      	strb	r3, [r7, #23]
      break;
 80030a4:	e006      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80030a6:	bf00      	nop
 80030a8:	e004      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80030aa:	bf00      	nop
 80030ac:	e002      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80030ae:	bf00      	nop
 80030b0:	e000      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80030b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030c8:	4901      	ldr	r1, [pc, #4]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	658b      	str	r3, [r1, #88]	; 0x58
 80030ce:	e003      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80030d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d04b      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030ee:	d02e      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80030f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030f4:	d828      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80030f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030fa:	d02a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80030fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003100:	d822      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003102:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003106:	d026      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003108:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800310c:	d81c      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800310e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003112:	d010      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003114:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003118:	d816      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d01d      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800311e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003122:	d111      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3304      	adds	r3, #4
 8003128:	2100      	movs	r1, #0
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fc82 	bl	8003a34 <RCCEx_PLL2_Config>
 8003130:	4603      	mov	r3, r0
 8003132:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003134:	e012      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3324      	adds	r3, #36	; 0x24
 800313a:	2102      	movs	r1, #2
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fd2b 	bl	8003b98 <RCCEx_PLL3_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003146:	e009      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	75fb      	strb	r3, [r7, #23]
      break;
 800314c:	e006      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800314e:	bf00      	nop
 8003150:	e004      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003152:	bf00      	nop
 8003154:	e002      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003156:	bf00      	nop
 8003158:	e000      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800315a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800315c:	7dfb      	ldrb	r3, [r7, #23]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10a      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003162:	4b9d      	ldr	r3, [pc, #628]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003170:	4999      	ldr	r1, [pc, #612]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003172:	4313      	orrs	r3, r2
 8003174:	658b      	str	r3, [r1, #88]	; 0x58
 8003176:	e001      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003178:	7dfb      	ldrb	r3, [r7, #23]
 800317a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01a      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800318e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003192:	d10a      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3324      	adds	r3, #36	; 0x24
 8003198:	2102      	movs	r1, #2
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fcfc 	bl	8003b98 <RCCEx_PLL3_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80031aa:	4b8b      	ldr	r3, [pc, #556]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031b8:	4987      	ldr	r1, [pc, #540]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d4:	d10a      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3324      	adds	r3, #36	; 0x24
 80031da:	2102      	movs	r1, #2
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fcdb 	bl	8003b98 <RCCEx_PLL3_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031ec:	4b7a      	ldr	r3, [pc, #488]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031fa:	4977      	ldr	r1, [pc, #476]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d034      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003212:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003216:	d01d      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800321c:	d817      	bhi.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003226:	d009      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003228:	e011      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3304      	adds	r3, #4
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fbff 	bl	8003a34 <RCCEx_PLL2_Config>
 8003236:	4603      	mov	r3, r0
 8003238:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800323a:	e00c      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3324      	adds	r3, #36	; 0x24
 8003240:	2102      	movs	r1, #2
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fca8 	bl	8003b98 <RCCEx_PLL3_Config>
 8003248:	4603      	mov	r3, r0
 800324a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800324c:	e003      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	75fb      	strb	r3, [r7, #23]
      break;
 8003252:	e000      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003256:	7dfb      	ldrb	r3, [r7, #23]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10a      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800325c:	4b5e      	ldr	r3, [pc, #376]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003260:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800326a:	495b      	ldr	r1, [pc, #364]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800326c:	4313      	orrs	r3, r2
 800326e:	658b      	str	r3, [r1, #88]	; 0x58
 8003270:	e001      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003272:	7dfb      	ldrb	r3, [r7, #23]
 8003274:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d033      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003288:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800328c:	d01c      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800328e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003292:	d816      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003294:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003298:	d003      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800329a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800329e:	d007      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80032a0:	e00f      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a2:	4b4d      	ldr	r3, [pc, #308]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	4a4c      	ldr	r2, [pc, #304]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80032ae:	e00c      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3324      	adds	r3, #36	; 0x24
 80032b4:	2101      	movs	r1, #1
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fc6e 	bl	8003b98 <RCCEx_PLL3_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	75fb      	strb	r3, [r7, #23]
      break;
 80032c6:	e000      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80032c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10a      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032d0:	4b41      	ldr	r3, [pc, #260]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032de:	493e      	ldr	r1, [pc, #248]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	654b      	str	r3, [r1, #84]	; 0x54
 80032e4:	e001      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
 80032e8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d029      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80032fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003302:	d007      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003304:	e00f      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003306:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	4a33      	ldr	r2, [pc, #204]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800330c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003310:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003312:	e00b      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3304      	adds	r3, #4
 8003318:	2102      	movs	r1, #2
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fb8a 	bl	8003a34 <RCCEx_PLL2_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003324:	e002      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	75fb      	strb	r3, [r7, #23]
      break;
 800332a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800332c:	7dfb      	ldrb	r3, [r7, #23]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003332:	4b29      	ldr	r3, [pc, #164]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333e:	4926      	ldr	r1, [pc, #152]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003340:	4313      	orrs	r3, r2
 8003342:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003344:	e001      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003346:	7dfb      	ldrb	r3, [r7, #23]
 8003348:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3324      	adds	r3, #36	; 0x24
 800335a:	2102      	movs	r1, #2
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fc1b 	bl	8003b98 <RCCEx_PLL3_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d033      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800337c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003380:	d017      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003382:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003386:	d811      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338c:	d013      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800338e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003392:	d80b      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d010      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800339c:	d106      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800339e:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a2:	4a0d      	ldr	r2, [pc, #52]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80033aa:	e007      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	75fb      	strb	r3, [r7, #23]
      break;
 80033b0:	e004      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80033b2:	bf00      	nop
 80033b4:	e002      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80033b6:	bf00      	nop
 80033b8:	e000      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80033ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10c      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ce:	4902      	ldr	r1, [pc, #8]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	654b      	str	r3, [r1, #84]	; 0x54
 80033d4:	e004      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80033d6:	bf00      	nop
 80033d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
 80033de:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033ec:	4b31      	ldr	r3, [pc, #196]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80033ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	492e      	ldr	r1, [pc, #184]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800340a:	4b2a      	ldr	r3, [pc, #168]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003418:	4926      	ldr	r1, [pc, #152]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800341a:	4313      	orrs	r3, r2
 800341c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800342a:	4b22      	ldr	r3, [pc, #136]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800342c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003436:	491f      	ldr	r1, [pc, #124]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003438:	4313      	orrs	r3, r2
 800343a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00d      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003448:	4b1a      	ldr	r3, [pc, #104]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	4a19      	ldr	r2, [pc, #100]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800344e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003452:	6113      	str	r3, [r2, #16]
 8003454:	4b17      	ldr	r3, [pc, #92]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800345e:	4915      	ldr	r1, [pc, #84]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003460:	4313      	orrs	r3, r2
 8003462:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	da08      	bge.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800346e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003470:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003478:	490e      	ldr	r1, [pc, #56]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800347a:	4313      	orrs	r3, r2
 800347c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800348c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003498:	4906      	ldr	r1, [pc, #24]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800349a:	4313      	orrs	r3, r2
 800349c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800349e:	7dbb      	ldrb	r3, [r7, #22]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	e000      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	58024400 	.word	0x58024400

080034b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80034bc:	f7ff f85a 	bl	8002574 <HAL_RCC_GetHCLKFreq>
 80034c0:	4602      	mov	r2, r0
 80034c2:	4b06      	ldr	r3, [pc, #24]	; (80034dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	091b      	lsrs	r3, r3, #4
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	4904      	ldr	r1, [pc, #16]	; (80034e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80034ce:	5ccb      	ldrb	r3, [r1, r3]
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	58024400 	.word	0x58024400
 80034e0:	080066b8 	.word	0x080066b8

080034e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b089      	sub	sp, #36	; 0x24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034ec:	4ba1      	ldr	r3, [pc, #644]	; (8003774 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80034f6:	4b9f      	ldr	r3, [pc, #636]	; (8003774 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	0b1b      	lsrs	r3, r3, #12
 80034fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003500:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003502:	4b9c      	ldr	r3, [pc, #624]	; (8003774 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800350e:	4b99      	ldr	r3, [pc, #612]	; (8003774 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003512:	08db      	lsrs	r3, r3, #3
 8003514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	fb02 f303 	mul.w	r3, r2, r3
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003526:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 8111 	beq.w	8003754 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b02      	cmp	r3, #2
 8003536:	f000 8083 	beq.w	8003640 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	2b02      	cmp	r3, #2
 800353e:	f200 80a1 	bhi.w	8003684 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d056      	beq.n	80035fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800354e:	e099      	b.n	8003684 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003550:	4b88      	ldr	r3, [pc, #544]	; (8003774 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d02d      	beq.n	80035b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800355c:	4b85      	ldr	r3, [pc, #532]	; (8003774 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	08db      	lsrs	r3, r3, #3
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	4a84      	ldr	r2, [pc, #528]	; (8003778 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003568:	fa22 f303 	lsr.w	r3, r2, r3
 800356c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	ee07 3a90 	vmov	s15, r3
 8003574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003586:	4b7b      	ldr	r3, [pc, #492]	; (8003774 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358e:	ee07 3a90 	vmov	s15, r3
 8003592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003596:	ed97 6a03 	vldr	s12, [r7, #12]
 800359a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800377c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800359e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80035b6:	e087      	b.n	80036c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003780 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80035c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ca:	4b6a      	ldr	r3, [pc, #424]	; (8003774 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d2:	ee07 3a90 	vmov	s15, r3
 80035d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035da:	ed97 6a03 	vldr	s12, [r7, #12]
 80035de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800377c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035fa:	e065      	b.n	80036c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003606:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003784 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800360a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800360e:	4b59      	ldr	r3, [pc, #356]	; (8003774 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003616:	ee07 3a90 	vmov	s15, r3
 800361a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800361e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003622:	eddf 5a56 	vldr	s11, [pc, #344]	; 800377c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800362a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800362e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800363e:	e043      	b.n	80036c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003788 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800364e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003652:	4b48      	ldr	r3, [pc, #288]	; (8003774 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003662:	ed97 6a03 	vldr	s12, [r7, #12]
 8003666:	eddf 5a45 	vldr	s11, [pc, #276]	; 800377c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800366a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800366e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800367a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003682:	e021      	b.n	80036c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003784 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003696:	4b37      	ldr	r3, [pc, #220]	; (8003774 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80036aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800377c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80036c8:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036cc:	0a5b      	lsrs	r3, r3, #9
 80036ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036d2:	ee07 3a90 	vmov	s15, r3
 80036d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80036e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ee:	ee17 2a90 	vmov	r2, s15
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80036f6:	4b1f      	ldr	r3, [pc, #124]	; (8003774 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	0c1b      	lsrs	r3, r3, #16
 80036fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003700:	ee07 3a90 	vmov	s15, r3
 8003704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003708:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800370c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003710:	edd7 6a07 	vldr	s13, [r7, #28]
 8003714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800371c:	ee17 2a90 	vmov	r2, s15
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003724:	4b13      	ldr	r3, [pc, #76]	; (8003774 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	0e1b      	lsrs	r3, r3, #24
 800372a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003736:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800373a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800373e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800374a:	ee17 2a90 	vmov	r2, s15
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003752:	e008      	b.n	8003766 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	609a      	str	r2, [r3, #8]
}
 8003766:	bf00      	nop
 8003768:	3724      	adds	r7, #36	; 0x24
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	58024400 	.word	0x58024400
 8003778:	03d09000 	.word	0x03d09000
 800377c:	46000000 	.word	0x46000000
 8003780:	4c742400 	.word	0x4c742400
 8003784:	4a742400 	.word	0x4a742400
 8003788:	4af42400 	.word	0x4af42400

0800378c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800378c:	b480      	push	{r7}
 800378e:	b089      	sub	sp, #36	; 0x24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003794:	4ba1      	ldr	r3, [pc, #644]	; (8003a1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800379e:	4b9f      	ldr	r3, [pc, #636]	; (8003a1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	0d1b      	lsrs	r3, r3, #20
 80037a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80037aa:	4b9c      	ldr	r3, [pc, #624]	; (8003a1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	0a1b      	lsrs	r3, r3, #8
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80037b6:	4b99      	ldr	r3, [pc, #612]	; (8003a1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	08db      	lsrs	r3, r3, #3
 80037bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 8111 	beq.w	80039fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	f000 8083 	beq.w	80038e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	f200 80a1 	bhi.w	800392c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d056      	beq.n	80038a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80037f6:	e099      	b.n	800392c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037f8:	4b88      	ldr	r3, [pc, #544]	; (8003a1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b00      	cmp	r3, #0
 8003802:	d02d      	beq.n	8003860 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003804:	4b85      	ldr	r3, [pc, #532]	; (8003a1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	08db      	lsrs	r3, r3, #3
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	4a84      	ldr	r2, [pc, #528]	; (8003a20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
 8003814:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	ee07 3a90 	vmov	s15, r3
 800381c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800382e:	4b7b      	ldr	r3, [pc, #492]	; (8003a1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800383e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003842:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800384a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800384e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800385a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800385e:	e087      	b.n	8003970 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	ee07 3a90 	vmov	s15, r3
 8003866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800386a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800386e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003872:	4b6a      	ldr	r3, [pc, #424]	; (8003a1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003882:	ed97 6a03 	vldr	s12, [r7, #12]
 8003886:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800388a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800388e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800389a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038a2:	e065      	b.n	8003970 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	ee07 3a90 	vmov	s15, r3
 80038aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80038b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038b6:	4b59      	ldr	r3, [pc, #356]	; (8003a1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038be:	ee07 3a90 	vmov	s15, r3
 80038c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80038ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038e6:	e043      	b.n	8003970 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	ee07 3a90 	vmov	s15, r3
 80038ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80038f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038fa:	4b48      	ldr	r3, [pc, #288]	; (8003a1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003902:	ee07 3a90 	vmov	s15, r3
 8003906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800390a:	ed97 6a03 	vldr	s12, [r7, #12]
 800390e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800391a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800391e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003926:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800392a:	e021      	b.n	8003970 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003936:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800393a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800393e:	4b37      	ldr	r3, [pc, #220]	; (8003a1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003946:	ee07 3a90 	vmov	s15, r3
 800394a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800394e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003952:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800395a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800395e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800396e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003970:	4b2a      	ldr	r3, [pc, #168]	; (8003a1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	0a5b      	lsrs	r3, r3, #9
 8003976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003982:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003986:	ee37 7a87 	vadd.f32	s14, s15, s14
 800398a:	edd7 6a07 	vldr	s13, [r7, #28]
 800398e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003996:	ee17 2a90 	vmov	r2, s15
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800399e:	4b1f      	ldr	r3, [pc, #124]	; (8003a1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	0c1b      	lsrs	r3, r3, #16
 80039a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039a8:	ee07 3a90 	vmov	s15, r3
 80039ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80039bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039c4:	ee17 2a90 	vmov	r2, s15
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80039cc:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	0e1b      	lsrs	r3, r3, #24
 80039d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80039ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039f2:	ee17 2a90 	vmov	r2, s15
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80039fa:	e008      	b.n	8003a0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	609a      	str	r2, [r3, #8]
}
 8003a0e:	bf00      	nop
 8003a10:	3724      	adds	r7, #36	; 0x24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	58024400 	.word	0x58024400
 8003a20:	03d09000 	.word	0x03d09000
 8003a24:	46000000 	.word	0x46000000
 8003a28:	4c742400 	.word	0x4c742400
 8003a2c:	4a742400 	.word	0x4a742400
 8003a30:	4af42400 	.word	0x4af42400

08003a34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a42:	4b53      	ldr	r3, [pc, #332]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d101      	bne.n	8003a52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e099      	b.n	8003b86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003a52:	4b4f      	ldr	r3, [pc, #316]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a4e      	ldr	r2, [pc, #312]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003a58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a5e:	f7fd facb 	bl	8000ff8 <HAL_GetTick>
 8003a62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a64:	e008      	b.n	8003a78 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a66:	f7fd fac7 	bl	8000ff8 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e086      	b.n	8003b86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a78:	4b45      	ldr	r3, [pc, #276]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1f0      	bne.n	8003a66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003a84:	4b42      	ldr	r3, [pc, #264]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	031b      	lsls	r3, r3, #12
 8003a92:	493f      	ldr	r1, [pc, #252]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	628b      	str	r3, [r1, #40]	; 0x28
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	025b      	lsls	r3, r3, #9
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	041b      	lsls	r3, r3, #16
 8003ab6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	061b      	lsls	r3, r3, #24
 8003ac4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ac8:	4931      	ldr	r1, [pc, #196]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ace:	4b30      	ldr	r3, [pc, #192]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	492d      	ldr	r1, [pc, #180]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ae0:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	f023 0220 	bic.w	r2, r3, #32
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	4928      	ldr	r1, [pc, #160]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003af2:	4b27      	ldr	r3, [pc, #156]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	4a26      	ldr	r2, [pc, #152]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003af8:	f023 0310 	bic.w	r3, r3, #16
 8003afc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003afe:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003b00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b02:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <RCCEx_PLL2_Config+0x160>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	69d2      	ldr	r2, [r2, #28]
 8003b0a:	00d2      	lsls	r2, r2, #3
 8003b0c:	4920      	ldr	r1, [pc, #128]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003b12:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	4a1e      	ldr	r2, [pc, #120]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003b18:	f043 0310 	orr.w	r3, r3, #16
 8003b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003b24:	4b1a      	ldr	r3, [pc, #104]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	4a19      	ldr	r2, [pc, #100]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003b2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b30:	e00f      	b.n	8003b52 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d106      	bne.n	8003b46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003b38:	4b15      	ldr	r3, [pc, #84]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	4a14      	ldr	r2, [pc, #80]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b44:	e005      	b.n	8003b52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	4a11      	ldr	r2, [pc, #68]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003b4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003b52:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a0e      	ldr	r2, [pc, #56]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003b58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b5e:	f7fd fa4b 	bl	8000ff8 <HAL_GetTick>
 8003b62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b64:	e008      	b.n	8003b78 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b66:	f7fd fa47 	bl	8000ff8 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e006      	b.n	8003b86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <RCCEx_PLL2_Config+0x15c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0f0      	beq.n	8003b66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	58024400 	.word	0x58024400
 8003b94:	ffff0007 	.word	0xffff0007

08003b98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ba6:	4b53      	ldr	r3, [pc, #332]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d101      	bne.n	8003bb6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e099      	b.n	8003cea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003bb6:	4b4f      	ldr	r3, [pc, #316]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a4e      	ldr	r2, [pc, #312]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc2:	f7fd fa19 	bl	8000ff8 <HAL_GetTick>
 8003bc6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003bc8:	e008      	b.n	8003bdc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003bca:	f7fd fa15 	bl	8000ff8 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e086      	b.n	8003cea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003bdc:	4b45      	ldr	r3, [pc, #276]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f0      	bne.n	8003bca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003be8:	4b42      	ldr	r3, [pc, #264]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	051b      	lsls	r3, r3, #20
 8003bf6:	493f      	ldr	r1, [pc, #252]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	628b      	str	r3, [r1, #40]	; 0x28
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	025b      	lsls	r3, r3, #9
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	041b      	lsls	r3, r3, #16
 8003c1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	3b01      	subs	r3, #1
 8003c26:	061b      	lsls	r3, r3, #24
 8003c28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c2c:	4931      	ldr	r1, [pc, #196]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003c32:	4b30      	ldr	r3, [pc, #192]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	492d      	ldr	r1, [pc, #180]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003c44:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	4928      	ldr	r1, [pc, #160]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003c56:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	4a26      	ldr	r2, [pc, #152]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003c62:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c66:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <RCCEx_PLL3_Config+0x160>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	69d2      	ldr	r2, [r2, #28]
 8003c6e:	00d2      	lsls	r2, r2, #3
 8003c70:	4920      	ldr	r1, [pc, #128]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003c76:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	4a1e      	ldr	r2, [pc, #120]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d106      	bne.n	8003c96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003c88:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	4a19      	ldr	r2, [pc, #100]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003c8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c94:	e00f      	b.n	8003cb6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d106      	bne.n	8003caa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003c9c:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	4a14      	ldr	r2, [pc, #80]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003ca2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ca6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ca8:	e005      	b.n	8003cb6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003caa:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	4a11      	ldr	r2, [pc, #68]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003cb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003cb6:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a0e      	ldr	r2, [pc, #56]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc2:	f7fd f999 	bl	8000ff8 <HAL_GetTick>
 8003cc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003cc8:	e008      	b.n	8003cdc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003cca:	f7fd f995 	bl	8000ff8 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e006      	b.n	8003cea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <RCCEx_PLL3_Config+0x15c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	ffff0007 	.word	0xffff0007

08003cfc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e08f      	b.n	8003e30 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d106      	bne.n	8003d2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7fc ff27 	bl	8000b78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6899      	ldr	r1, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4b3e      	ldr	r3, [pc, #248]	; (8003e38 <HAL_TIM_Encoder_Init+0x13c>)
 8003d3e:	400b      	ands	r3, r1
 8003d40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	f000 fa71 	bl	8004234 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4b31      	ldr	r3, [pc, #196]	; (8003e3c <HAL_TIM_Encoder_Init+0x140>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	4313      	orrs	r3, r2
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <HAL_TIM_Encoder_Init+0x144>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4b2a      	ldr	r3, [pc, #168]	; (8003e44 <HAL_TIM_Encoder_Init+0x148>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	4313      	orrs	r3, r2
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	011a      	lsls	r2, r3, #4
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	031b      	lsls	r3, r3, #12
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003dca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003dd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	4313      	orrs	r3, r2
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	fffebff8 	.word	0xfffebff8
 8003e3c:	fffffcfc 	.word	0xfffffcfc
 8003e40:	fffff3f3 	.word	0xfffff3f3
 8003e44:	ffff0f0f 	.word	0xffff0f0f

08003e48 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d110      	bne.n	8003e9a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d102      	bne.n	8003e84 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e7e:	7b7b      	ldrb	r3, [r7, #13]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d001      	beq.n	8003e88 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e089      	b.n	8003f9c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e98:	e031      	b.n	8003efe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d110      	bne.n	8003ec2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ea0:	7bbb      	ldrb	r3, [r7, #14]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d102      	bne.n	8003eac <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ea6:	7b3b      	ldrb	r3, [r7, #12]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d001      	beq.n	8003eb0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e075      	b.n	8003f9c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ec0:	e01d      	b.n	8003efe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d108      	bne.n	8003eda <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ec8:	7bbb      	ldrb	r3, [r7, #14]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d105      	bne.n	8003eda <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ece:	7b7b      	ldrb	r3, [r7, #13]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d102      	bne.n	8003eda <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ed4:	7b3b      	ldrb	r3, [r7, #12]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d001      	beq.n	8003ede <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e05e      	b.n	8003f9c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_TIM_Encoder_Start_IT+0xc4>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d010      	beq.n	8003f2c <HAL_TIM_Encoder_Start_IT+0xe4>
 8003f0a:	e01f      	b.n	8003f4c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2201      	movs	r2, #1
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fa27 	bl	8004368 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0202 	orr.w	r2, r2, #2
 8003f28:	60da      	str	r2, [r3, #12]
      break;
 8003f2a:	e02e      	b.n	8003f8a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2201      	movs	r2, #1
 8003f32:	2104      	movs	r1, #4
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fa17 	bl	8004368 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0204 	orr.w	r2, r2, #4
 8003f48:	60da      	str	r2, [r3, #12]
      break;
 8003f4a:	e01e      	b.n	8003f8a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2201      	movs	r2, #1
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fa07 	bl	8004368 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	2104      	movs	r1, #4
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fa00 	bl	8004368 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0202 	orr.w	r2, r2, #2
 8003f76:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0204 	orr.w	r2, r2, #4
 8003f86:	60da      	str	r2, [r3, #12]
      break;
 8003f88:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d122      	bne.n	8004000 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d11b      	bne.n	8004000 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0202 	mvn.w	r2, #2
 8003fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fc fbe2 	bl	80007b0 <HAL_TIM_IC_CaptureCallback>
 8003fec:	e005      	b.n	8003ffa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f901 	bl	80041f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f908 	bl	800420a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b04      	cmp	r3, #4
 800400c:	d122      	bne.n	8004054 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b04      	cmp	r3, #4
 800401a:	d11b      	bne.n	8004054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0204 	mvn.w	r2, #4
 8004024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2202      	movs	r2, #2
 800402a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fc fbb8 	bl	80007b0 <HAL_TIM_IC_CaptureCallback>
 8004040:	e005      	b.n	800404e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f8d7 	bl	80041f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f8de 	bl	800420a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b08      	cmp	r3, #8
 8004060:	d122      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b08      	cmp	r3, #8
 800406e:	d11b      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0208 	mvn.w	r2, #8
 8004078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2204      	movs	r2, #4
 800407e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fc fb8e 	bl	80007b0 <HAL_TIM_IC_CaptureCallback>
 8004094:	e005      	b.n	80040a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f8ad 	bl	80041f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f8b4 	bl	800420a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b10      	cmp	r3, #16
 80040b4:	d122      	bne.n	80040fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b10      	cmp	r3, #16
 80040c2:	d11b      	bne.n	80040fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0210 	mvn.w	r2, #16
 80040cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2208      	movs	r2, #8
 80040d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fc fb64 	bl	80007b0 <HAL_TIM_IC_CaptureCallback>
 80040e8:	e005      	b.n	80040f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f883 	bl	80041f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f88a 	bl	800420a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b01      	cmp	r3, #1
 8004108:	d10e      	bne.n	8004128 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b01      	cmp	r3, #1
 8004116:	d107      	bne.n	8004128 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0201 	mvn.w	r2, #1
 8004120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f85d 	bl	80041e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004132:	2b80      	cmp	r3, #128	; 0x80
 8004134:	d10e      	bne.n	8004154 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004140:	2b80      	cmp	r3, #128	; 0x80
 8004142:	d107      	bne.n	8004154 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800414c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f9c8 	bl	80044e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004162:	d10e      	bne.n	8004182 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b80      	cmp	r3, #128	; 0x80
 8004170:	d107      	bne.n	8004182 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800417a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f9bb 	bl	80044f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418c:	2b40      	cmp	r3, #64	; 0x40
 800418e:	d10e      	bne.n	80041ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b40      	cmp	r3, #64	; 0x40
 800419c:	d107      	bne.n	80041ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f838 	bl	800421e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d10e      	bne.n	80041da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d107      	bne.n	80041da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f06f 0220 	mvn.w	r2, #32
 80041d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f97b 	bl	80044d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
	...

08004234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a40      	ldr	r2, [pc, #256]	; (8004348 <TIM_Base_SetConfig+0x114>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d013      	beq.n	8004274 <TIM_Base_SetConfig+0x40>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004252:	d00f      	beq.n	8004274 <TIM_Base_SetConfig+0x40>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a3d      	ldr	r2, [pc, #244]	; (800434c <TIM_Base_SetConfig+0x118>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d00b      	beq.n	8004274 <TIM_Base_SetConfig+0x40>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a3c      	ldr	r2, [pc, #240]	; (8004350 <TIM_Base_SetConfig+0x11c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d007      	beq.n	8004274 <TIM_Base_SetConfig+0x40>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a3b      	ldr	r2, [pc, #236]	; (8004354 <TIM_Base_SetConfig+0x120>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d003      	beq.n	8004274 <TIM_Base_SetConfig+0x40>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a3a      	ldr	r2, [pc, #232]	; (8004358 <TIM_Base_SetConfig+0x124>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d108      	bne.n	8004286 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a2f      	ldr	r2, [pc, #188]	; (8004348 <TIM_Base_SetConfig+0x114>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d01f      	beq.n	80042ce <TIM_Base_SetConfig+0x9a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004294:	d01b      	beq.n	80042ce <TIM_Base_SetConfig+0x9a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a2c      	ldr	r2, [pc, #176]	; (800434c <TIM_Base_SetConfig+0x118>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d017      	beq.n	80042ce <TIM_Base_SetConfig+0x9a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a2b      	ldr	r2, [pc, #172]	; (8004350 <TIM_Base_SetConfig+0x11c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d013      	beq.n	80042ce <TIM_Base_SetConfig+0x9a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a2a      	ldr	r2, [pc, #168]	; (8004354 <TIM_Base_SetConfig+0x120>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00f      	beq.n	80042ce <TIM_Base_SetConfig+0x9a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a29      	ldr	r2, [pc, #164]	; (8004358 <TIM_Base_SetConfig+0x124>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00b      	beq.n	80042ce <TIM_Base_SetConfig+0x9a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a28      	ldr	r2, [pc, #160]	; (800435c <TIM_Base_SetConfig+0x128>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d007      	beq.n	80042ce <TIM_Base_SetConfig+0x9a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a27      	ldr	r2, [pc, #156]	; (8004360 <TIM_Base_SetConfig+0x12c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d003      	beq.n	80042ce <TIM_Base_SetConfig+0x9a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a26      	ldr	r2, [pc, #152]	; (8004364 <TIM_Base_SetConfig+0x130>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d108      	bne.n	80042e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a10      	ldr	r2, [pc, #64]	; (8004348 <TIM_Base_SetConfig+0x114>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00f      	beq.n	800432c <TIM_Base_SetConfig+0xf8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a12      	ldr	r2, [pc, #72]	; (8004358 <TIM_Base_SetConfig+0x124>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00b      	beq.n	800432c <TIM_Base_SetConfig+0xf8>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a11      	ldr	r2, [pc, #68]	; (800435c <TIM_Base_SetConfig+0x128>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d007      	beq.n	800432c <TIM_Base_SetConfig+0xf8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a10      	ldr	r2, [pc, #64]	; (8004360 <TIM_Base_SetConfig+0x12c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_Base_SetConfig+0xf8>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a0f      	ldr	r2, [pc, #60]	; (8004364 <TIM_Base_SetConfig+0x130>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d103      	bne.n	8004334 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	615a      	str	r2, [r3, #20]
}
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40010000 	.word	0x40010000
 800434c:	40000400 	.word	0x40000400
 8004350:	40000800 	.word	0x40000800
 8004354:	40000c00 	.word	0x40000c00
 8004358:	40010400 	.word	0x40010400
 800435c:	40014000 	.word	0x40014000
 8004360:	40014400 	.word	0x40014400
 8004364:	40014800 	.word	0x40014800

08004368 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f003 031f 	and.w	r3, r3, #31
 800437a:	2201      	movs	r2, #1
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a1a      	ldr	r2, [r3, #32]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	43db      	mvns	r3, r3
 800438a:	401a      	ands	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a1a      	ldr	r2, [r3, #32]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f003 031f 	and.w	r3, r3, #31
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	fa01 f303 	lsl.w	r3, r1, r3
 80043a0:	431a      	orrs	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	621a      	str	r2, [r3, #32]
}
 80043a6:	bf00      	nop
 80043a8:	371c      	adds	r7, #28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e06d      	b.n	80044a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a30      	ldr	r2, [pc, #192]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d004      	beq.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a2f      	ldr	r2, [pc, #188]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d108      	bne.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004406:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004418:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a20      	ldr	r2, [pc, #128]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d022      	beq.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443e:	d01d      	beq.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1d      	ldr	r2, [pc, #116]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d018      	beq.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1c      	ldr	r2, [pc, #112]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00e      	beq.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a15      	ldr	r2, [pc, #84]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a16      	ldr	r2, [pc, #88]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a15      	ldr	r2, [pc, #84]	; (80044cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d10c      	bne.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004482:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	4313      	orrs	r3, r2
 800448c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	40010000 	.word	0x40010000
 80044b8:	40010400 	.word	0x40010400
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40001800 	.word	0x40001800
 80044cc:	40014000 	.word	0x40014000

080044d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e042      	b.n	80045a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004524:	2b00      	cmp	r3, #0
 8004526:	d106      	bne.n	8004536 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7fc fb73 	bl	8000c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2224      	movs	r2, #36	; 0x24
 800453a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0201 	bic.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f8c2 	bl	80046d8 <UART_SetConfig>
 8004554:	4603      	mov	r3, r0
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e022      	b.n	80045a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fe1e 	bl	80051a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800457a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800458a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 fea5 	bl	80052ec <UART_CheckIdleState>
 80045a2:	4603      	mov	r3, r0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	4613      	mov	r3, r2
 80045ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c2:	2b20      	cmp	r3, #32
 80045c4:	f040 8083 	bne.w	80046ce <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_UART_Transmit+0x28>
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e07b      	b.n	80046d0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d101      	bne.n	80045e6 <HAL_UART_Transmit+0x3a>
 80045e2:	2302      	movs	r3, #2
 80045e4:	e074      	b.n	80046d0 <HAL_UART_Transmit+0x124>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2221      	movs	r2, #33	; 0x21
 80045fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045fe:	f7fc fcfb 	bl	8000ff8 <HAL_GetTick>
 8004602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	88fa      	ldrh	r2, [r7, #6]
 8004610:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461c:	d108      	bne.n	8004630 <HAL_UART_Transmit+0x84>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d104      	bne.n	8004630 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	e003      	b.n	8004638 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004640:	e02c      	b.n	800469c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2200      	movs	r2, #0
 800464a:	2180      	movs	r1, #128	; 0x80
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 fe98 	bl	8005382 <UART_WaitOnFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e039      	b.n	80046d0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10b      	bne.n	800467a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004670:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	3302      	adds	r3, #2
 8004676:	61bb      	str	r3, [r7, #24]
 8004678:	e007      	b.n	800468a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	3301      	adds	r3, #1
 8004688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1cc      	bne.n	8004642 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2200      	movs	r2, #0
 80046b0:	2140      	movs	r1, #64	; 0x40
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fe65 	bl	8005382 <UART_WaitOnFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e006      	b.n	80046d0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e000      	b.n	80046d0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80046ce:	2302      	movs	r3, #2
  }
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3720      	adds	r7, #32
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046dc:	b092      	sub	sp, #72	; 0x48
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	4bbe      	ldr	r3, [pc, #760]	; (8004a00 <UART_SetConfig+0x328>)
 8004708:	4013      	ands	r3, r2
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	6812      	ldr	r2, [r2, #0]
 800470e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004710:	430b      	orrs	r3, r1
 8004712:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4ab3      	ldr	r2, [pc, #716]	; (8004a04 <UART_SetConfig+0x32c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d004      	beq.n	8004744 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004740:	4313      	orrs	r3, r2
 8004742:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	4baf      	ldr	r3, [pc, #700]	; (8004a08 <UART_SetConfig+0x330>)
 800474c:	4013      	ands	r3, r2
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004754:	430b      	orrs	r3, r1
 8004756:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	f023 010f 	bic.w	r1, r3, #15
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4aa6      	ldr	r2, [pc, #664]	; (8004a0c <UART_SetConfig+0x334>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d177      	bne.n	8004868 <UART_SetConfig+0x190>
 8004778:	4ba5      	ldr	r3, [pc, #660]	; (8004a10 <UART_SetConfig+0x338>)
 800477a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004780:	2b28      	cmp	r3, #40	; 0x28
 8004782:	d86d      	bhi.n	8004860 <UART_SetConfig+0x188>
 8004784:	a201      	add	r2, pc, #4	; (adr r2, 800478c <UART_SetConfig+0xb4>)
 8004786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478a:	bf00      	nop
 800478c:	08004831 	.word	0x08004831
 8004790:	08004861 	.word	0x08004861
 8004794:	08004861 	.word	0x08004861
 8004798:	08004861 	.word	0x08004861
 800479c:	08004861 	.word	0x08004861
 80047a0:	08004861 	.word	0x08004861
 80047a4:	08004861 	.word	0x08004861
 80047a8:	08004861 	.word	0x08004861
 80047ac:	08004839 	.word	0x08004839
 80047b0:	08004861 	.word	0x08004861
 80047b4:	08004861 	.word	0x08004861
 80047b8:	08004861 	.word	0x08004861
 80047bc:	08004861 	.word	0x08004861
 80047c0:	08004861 	.word	0x08004861
 80047c4:	08004861 	.word	0x08004861
 80047c8:	08004861 	.word	0x08004861
 80047cc:	08004841 	.word	0x08004841
 80047d0:	08004861 	.word	0x08004861
 80047d4:	08004861 	.word	0x08004861
 80047d8:	08004861 	.word	0x08004861
 80047dc:	08004861 	.word	0x08004861
 80047e0:	08004861 	.word	0x08004861
 80047e4:	08004861 	.word	0x08004861
 80047e8:	08004861 	.word	0x08004861
 80047ec:	08004849 	.word	0x08004849
 80047f0:	08004861 	.word	0x08004861
 80047f4:	08004861 	.word	0x08004861
 80047f8:	08004861 	.word	0x08004861
 80047fc:	08004861 	.word	0x08004861
 8004800:	08004861 	.word	0x08004861
 8004804:	08004861 	.word	0x08004861
 8004808:	08004861 	.word	0x08004861
 800480c:	08004851 	.word	0x08004851
 8004810:	08004861 	.word	0x08004861
 8004814:	08004861 	.word	0x08004861
 8004818:	08004861 	.word	0x08004861
 800481c:	08004861 	.word	0x08004861
 8004820:	08004861 	.word	0x08004861
 8004824:	08004861 	.word	0x08004861
 8004828:	08004861 	.word	0x08004861
 800482c:	08004859 	.word	0x08004859
 8004830:	2301      	movs	r3, #1
 8004832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004836:	e222      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004838:	2304      	movs	r3, #4
 800483a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800483e:	e21e      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004840:	2308      	movs	r3, #8
 8004842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004846:	e21a      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004848:	2310      	movs	r3, #16
 800484a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800484e:	e216      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004850:	2320      	movs	r3, #32
 8004852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004856:	e212      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004858:	2340      	movs	r3, #64	; 0x40
 800485a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800485e:	e20e      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004860:	2380      	movs	r3, #128	; 0x80
 8004862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004866:	e20a      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a69      	ldr	r2, [pc, #420]	; (8004a14 <UART_SetConfig+0x33c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d130      	bne.n	80048d4 <UART_SetConfig+0x1fc>
 8004872:	4b67      	ldr	r3, [pc, #412]	; (8004a10 <UART_SetConfig+0x338>)
 8004874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	2b05      	cmp	r3, #5
 800487c:	d826      	bhi.n	80048cc <UART_SetConfig+0x1f4>
 800487e:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <UART_SetConfig+0x1ac>)
 8004880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004884:	0800489d 	.word	0x0800489d
 8004888:	080048a5 	.word	0x080048a5
 800488c:	080048ad 	.word	0x080048ad
 8004890:	080048b5 	.word	0x080048b5
 8004894:	080048bd 	.word	0x080048bd
 8004898:	080048c5 	.word	0x080048c5
 800489c:	2300      	movs	r3, #0
 800489e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048a2:	e1ec      	b.n	8004c7e <UART_SetConfig+0x5a6>
 80048a4:	2304      	movs	r3, #4
 80048a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048aa:	e1e8      	b.n	8004c7e <UART_SetConfig+0x5a6>
 80048ac:	2308      	movs	r3, #8
 80048ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048b2:	e1e4      	b.n	8004c7e <UART_SetConfig+0x5a6>
 80048b4:	2310      	movs	r3, #16
 80048b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ba:	e1e0      	b.n	8004c7e <UART_SetConfig+0x5a6>
 80048bc:	2320      	movs	r3, #32
 80048be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048c2:	e1dc      	b.n	8004c7e <UART_SetConfig+0x5a6>
 80048c4:	2340      	movs	r3, #64	; 0x40
 80048c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ca:	e1d8      	b.n	8004c7e <UART_SetConfig+0x5a6>
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048d2:	e1d4      	b.n	8004c7e <UART_SetConfig+0x5a6>
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a4f      	ldr	r2, [pc, #316]	; (8004a18 <UART_SetConfig+0x340>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d130      	bne.n	8004940 <UART_SetConfig+0x268>
 80048de:	4b4c      	ldr	r3, [pc, #304]	; (8004a10 <UART_SetConfig+0x338>)
 80048e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	2b05      	cmp	r3, #5
 80048e8:	d826      	bhi.n	8004938 <UART_SetConfig+0x260>
 80048ea:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <UART_SetConfig+0x218>)
 80048ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f0:	08004909 	.word	0x08004909
 80048f4:	08004911 	.word	0x08004911
 80048f8:	08004919 	.word	0x08004919
 80048fc:	08004921 	.word	0x08004921
 8004900:	08004929 	.word	0x08004929
 8004904:	08004931 	.word	0x08004931
 8004908:	2300      	movs	r3, #0
 800490a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800490e:	e1b6      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004910:	2304      	movs	r3, #4
 8004912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004916:	e1b2      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004918:	2308      	movs	r3, #8
 800491a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800491e:	e1ae      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004920:	2310      	movs	r3, #16
 8004922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004926:	e1aa      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004928:	2320      	movs	r3, #32
 800492a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800492e:	e1a6      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004930:	2340      	movs	r3, #64	; 0x40
 8004932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004936:	e1a2      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800493e:	e19e      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a35      	ldr	r2, [pc, #212]	; (8004a1c <UART_SetConfig+0x344>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d130      	bne.n	80049ac <UART_SetConfig+0x2d4>
 800494a:	4b31      	ldr	r3, [pc, #196]	; (8004a10 <UART_SetConfig+0x338>)
 800494c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	2b05      	cmp	r3, #5
 8004954:	d826      	bhi.n	80049a4 <UART_SetConfig+0x2cc>
 8004956:	a201      	add	r2, pc, #4	; (adr r2, 800495c <UART_SetConfig+0x284>)
 8004958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495c:	08004975 	.word	0x08004975
 8004960:	0800497d 	.word	0x0800497d
 8004964:	08004985 	.word	0x08004985
 8004968:	0800498d 	.word	0x0800498d
 800496c:	08004995 	.word	0x08004995
 8004970:	0800499d 	.word	0x0800499d
 8004974:	2300      	movs	r3, #0
 8004976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800497a:	e180      	b.n	8004c7e <UART_SetConfig+0x5a6>
 800497c:	2304      	movs	r3, #4
 800497e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004982:	e17c      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004984:	2308      	movs	r3, #8
 8004986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800498a:	e178      	b.n	8004c7e <UART_SetConfig+0x5a6>
 800498c:	2310      	movs	r3, #16
 800498e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004992:	e174      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004994:	2320      	movs	r3, #32
 8004996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800499a:	e170      	b.n	8004c7e <UART_SetConfig+0x5a6>
 800499c:	2340      	movs	r3, #64	; 0x40
 800499e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049a2:	e16c      	b.n	8004c7e <UART_SetConfig+0x5a6>
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049aa:	e168      	b.n	8004c7e <UART_SetConfig+0x5a6>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1b      	ldr	r2, [pc, #108]	; (8004a20 <UART_SetConfig+0x348>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d142      	bne.n	8004a3c <UART_SetConfig+0x364>
 80049b6:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <UART_SetConfig+0x338>)
 80049b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	2b05      	cmp	r3, #5
 80049c0:	d838      	bhi.n	8004a34 <UART_SetConfig+0x35c>
 80049c2:	a201      	add	r2, pc, #4	; (adr r2, 80049c8 <UART_SetConfig+0x2f0>)
 80049c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c8:	080049e1 	.word	0x080049e1
 80049cc:	080049e9 	.word	0x080049e9
 80049d0:	080049f1 	.word	0x080049f1
 80049d4:	080049f9 	.word	0x080049f9
 80049d8:	08004a25 	.word	0x08004a25
 80049dc:	08004a2d 	.word	0x08004a2d
 80049e0:	2300      	movs	r3, #0
 80049e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049e6:	e14a      	b.n	8004c7e <UART_SetConfig+0x5a6>
 80049e8:	2304      	movs	r3, #4
 80049ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ee:	e146      	b.n	8004c7e <UART_SetConfig+0x5a6>
 80049f0:	2308      	movs	r3, #8
 80049f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049f6:	e142      	b.n	8004c7e <UART_SetConfig+0x5a6>
 80049f8:	2310      	movs	r3, #16
 80049fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049fe:	e13e      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004a00:	cfff69f3 	.word	0xcfff69f3
 8004a04:	58000c00 	.word	0x58000c00
 8004a08:	11fff4ff 	.word	0x11fff4ff
 8004a0c:	40011000 	.word	0x40011000
 8004a10:	58024400 	.word	0x58024400
 8004a14:	40004400 	.word	0x40004400
 8004a18:	40004800 	.word	0x40004800
 8004a1c:	40004c00 	.word	0x40004c00
 8004a20:	40005000 	.word	0x40005000
 8004a24:	2320      	movs	r3, #32
 8004a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a2a:	e128      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004a2c:	2340      	movs	r3, #64	; 0x40
 8004a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a32:	e124      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004a34:	2380      	movs	r3, #128	; 0x80
 8004a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a3a:	e120      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4acb      	ldr	r2, [pc, #812]	; (8004d70 <UART_SetConfig+0x698>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d176      	bne.n	8004b34 <UART_SetConfig+0x45c>
 8004a46:	4bcb      	ldr	r3, [pc, #812]	; (8004d74 <UART_SetConfig+0x69c>)
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a4e:	2b28      	cmp	r3, #40	; 0x28
 8004a50:	d86c      	bhi.n	8004b2c <UART_SetConfig+0x454>
 8004a52:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <UART_SetConfig+0x380>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004afd 	.word	0x08004afd
 8004a5c:	08004b2d 	.word	0x08004b2d
 8004a60:	08004b2d 	.word	0x08004b2d
 8004a64:	08004b2d 	.word	0x08004b2d
 8004a68:	08004b2d 	.word	0x08004b2d
 8004a6c:	08004b2d 	.word	0x08004b2d
 8004a70:	08004b2d 	.word	0x08004b2d
 8004a74:	08004b2d 	.word	0x08004b2d
 8004a78:	08004b05 	.word	0x08004b05
 8004a7c:	08004b2d 	.word	0x08004b2d
 8004a80:	08004b2d 	.word	0x08004b2d
 8004a84:	08004b2d 	.word	0x08004b2d
 8004a88:	08004b2d 	.word	0x08004b2d
 8004a8c:	08004b2d 	.word	0x08004b2d
 8004a90:	08004b2d 	.word	0x08004b2d
 8004a94:	08004b2d 	.word	0x08004b2d
 8004a98:	08004b0d 	.word	0x08004b0d
 8004a9c:	08004b2d 	.word	0x08004b2d
 8004aa0:	08004b2d 	.word	0x08004b2d
 8004aa4:	08004b2d 	.word	0x08004b2d
 8004aa8:	08004b2d 	.word	0x08004b2d
 8004aac:	08004b2d 	.word	0x08004b2d
 8004ab0:	08004b2d 	.word	0x08004b2d
 8004ab4:	08004b2d 	.word	0x08004b2d
 8004ab8:	08004b15 	.word	0x08004b15
 8004abc:	08004b2d 	.word	0x08004b2d
 8004ac0:	08004b2d 	.word	0x08004b2d
 8004ac4:	08004b2d 	.word	0x08004b2d
 8004ac8:	08004b2d 	.word	0x08004b2d
 8004acc:	08004b2d 	.word	0x08004b2d
 8004ad0:	08004b2d 	.word	0x08004b2d
 8004ad4:	08004b2d 	.word	0x08004b2d
 8004ad8:	08004b1d 	.word	0x08004b1d
 8004adc:	08004b2d 	.word	0x08004b2d
 8004ae0:	08004b2d 	.word	0x08004b2d
 8004ae4:	08004b2d 	.word	0x08004b2d
 8004ae8:	08004b2d 	.word	0x08004b2d
 8004aec:	08004b2d 	.word	0x08004b2d
 8004af0:	08004b2d 	.word	0x08004b2d
 8004af4:	08004b2d 	.word	0x08004b2d
 8004af8:	08004b25 	.word	0x08004b25
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b02:	e0bc      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004b04:	2304      	movs	r3, #4
 8004b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b0a:	e0b8      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004b0c:	2308      	movs	r3, #8
 8004b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b12:	e0b4      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004b14:	2310      	movs	r3, #16
 8004b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b1a:	e0b0      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b22:	e0ac      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004b24:	2340      	movs	r3, #64	; 0x40
 8004b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b2a:	e0a8      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004b2c:	2380      	movs	r3, #128	; 0x80
 8004b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b32:	e0a4      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a8f      	ldr	r2, [pc, #572]	; (8004d78 <UART_SetConfig+0x6a0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d130      	bne.n	8004ba0 <UART_SetConfig+0x4c8>
 8004b3e:	4b8d      	ldr	r3, [pc, #564]	; (8004d74 <UART_SetConfig+0x69c>)
 8004b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	2b05      	cmp	r3, #5
 8004b48:	d826      	bhi.n	8004b98 <UART_SetConfig+0x4c0>
 8004b4a:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <UART_SetConfig+0x478>)
 8004b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b50:	08004b69 	.word	0x08004b69
 8004b54:	08004b71 	.word	0x08004b71
 8004b58:	08004b79 	.word	0x08004b79
 8004b5c:	08004b81 	.word	0x08004b81
 8004b60:	08004b89 	.word	0x08004b89
 8004b64:	08004b91 	.word	0x08004b91
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b6e:	e086      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004b70:	2304      	movs	r3, #4
 8004b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b76:	e082      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004b78:	2308      	movs	r3, #8
 8004b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b7e:	e07e      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004b80:	2310      	movs	r3, #16
 8004b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b86:	e07a      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004b88:	2320      	movs	r3, #32
 8004b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b8e:	e076      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004b90:	2340      	movs	r3, #64	; 0x40
 8004b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b96:	e072      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004b98:	2380      	movs	r3, #128	; 0x80
 8004b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b9e:	e06e      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a75      	ldr	r2, [pc, #468]	; (8004d7c <UART_SetConfig+0x6a4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d130      	bne.n	8004c0c <UART_SetConfig+0x534>
 8004baa:	4b72      	ldr	r3, [pc, #456]	; (8004d74 <UART_SetConfig+0x69c>)
 8004bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	2b05      	cmp	r3, #5
 8004bb4:	d826      	bhi.n	8004c04 <UART_SetConfig+0x52c>
 8004bb6:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <UART_SetConfig+0x4e4>)
 8004bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbc:	08004bd5 	.word	0x08004bd5
 8004bc0:	08004bdd 	.word	0x08004bdd
 8004bc4:	08004be5 	.word	0x08004be5
 8004bc8:	08004bed 	.word	0x08004bed
 8004bcc:	08004bf5 	.word	0x08004bf5
 8004bd0:	08004bfd 	.word	0x08004bfd
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bda:	e050      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004bdc:	2304      	movs	r3, #4
 8004bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004be2:	e04c      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004be4:	2308      	movs	r3, #8
 8004be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bea:	e048      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004bec:	2310      	movs	r3, #16
 8004bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bf2:	e044      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004bf4:	2320      	movs	r3, #32
 8004bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bfa:	e040      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004bfc:	2340      	movs	r3, #64	; 0x40
 8004bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c02:	e03c      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004c04:	2380      	movs	r3, #128	; 0x80
 8004c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c0a:	e038      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a5b      	ldr	r2, [pc, #364]	; (8004d80 <UART_SetConfig+0x6a8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d130      	bne.n	8004c78 <UART_SetConfig+0x5a0>
 8004c16:	4b57      	ldr	r3, [pc, #348]	; (8004d74 <UART_SetConfig+0x69c>)
 8004c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	2b05      	cmp	r3, #5
 8004c20:	d826      	bhi.n	8004c70 <UART_SetConfig+0x598>
 8004c22:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <UART_SetConfig+0x550>)
 8004c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c28:	08004c41 	.word	0x08004c41
 8004c2c:	08004c49 	.word	0x08004c49
 8004c30:	08004c51 	.word	0x08004c51
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c61 	.word	0x08004c61
 8004c3c:	08004c69 	.word	0x08004c69
 8004c40:	2302      	movs	r3, #2
 8004c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c46:	e01a      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c4e:	e016      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004c50:	2308      	movs	r3, #8
 8004c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c56:	e012      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004c58:	2310      	movs	r3, #16
 8004c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c5e:	e00e      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004c60:	2320      	movs	r3, #32
 8004c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c66:	e00a      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004c68:	2340      	movs	r3, #64	; 0x40
 8004c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c6e:	e006      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004c70:	2380      	movs	r3, #128	; 0x80
 8004c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c76:	e002      	b.n	8004c7e <UART_SetConfig+0x5a6>
 8004c78:	2380      	movs	r3, #128	; 0x80
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a3f      	ldr	r2, [pc, #252]	; (8004d80 <UART_SetConfig+0x6a8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	f040 80f8 	bne.w	8004e7a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	dc46      	bgt.n	8004d20 <UART_SetConfig+0x648>
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	f2c0 8082 	blt.w	8004d9c <UART_SetConfig+0x6c4>
 8004c98:	3b02      	subs	r3, #2
 8004c9a:	2b1e      	cmp	r3, #30
 8004c9c:	d87e      	bhi.n	8004d9c <UART_SetConfig+0x6c4>
 8004c9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <UART_SetConfig+0x5cc>)
 8004ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca4:	08004d27 	.word	0x08004d27
 8004ca8:	08004d9d 	.word	0x08004d9d
 8004cac:	08004d2f 	.word	0x08004d2f
 8004cb0:	08004d9d 	.word	0x08004d9d
 8004cb4:	08004d9d 	.word	0x08004d9d
 8004cb8:	08004d9d 	.word	0x08004d9d
 8004cbc:	08004d3f 	.word	0x08004d3f
 8004cc0:	08004d9d 	.word	0x08004d9d
 8004cc4:	08004d9d 	.word	0x08004d9d
 8004cc8:	08004d9d 	.word	0x08004d9d
 8004ccc:	08004d9d 	.word	0x08004d9d
 8004cd0:	08004d9d 	.word	0x08004d9d
 8004cd4:	08004d9d 	.word	0x08004d9d
 8004cd8:	08004d9d 	.word	0x08004d9d
 8004cdc:	08004d4f 	.word	0x08004d4f
 8004ce0:	08004d9d 	.word	0x08004d9d
 8004ce4:	08004d9d 	.word	0x08004d9d
 8004ce8:	08004d9d 	.word	0x08004d9d
 8004cec:	08004d9d 	.word	0x08004d9d
 8004cf0:	08004d9d 	.word	0x08004d9d
 8004cf4:	08004d9d 	.word	0x08004d9d
 8004cf8:	08004d9d 	.word	0x08004d9d
 8004cfc:	08004d9d 	.word	0x08004d9d
 8004d00:	08004d9d 	.word	0x08004d9d
 8004d04:	08004d9d 	.word	0x08004d9d
 8004d08:	08004d9d 	.word	0x08004d9d
 8004d0c:	08004d9d 	.word	0x08004d9d
 8004d10:	08004d9d 	.word	0x08004d9d
 8004d14:	08004d9d 	.word	0x08004d9d
 8004d18:	08004d9d 	.word	0x08004d9d
 8004d1c:	08004d8f 	.word	0x08004d8f
 8004d20:	2b40      	cmp	r3, #64	; 0x40
 8004d22:	d037      	beq.n	8004d94 <UART_SetConfig+0x6bc>
 8004d24:	e03a      	b.n	8004d9c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004d26:	f7fe fbc7 	bl	80034b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004d2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004d2c:	e03c      	b.n	8004da8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe fbd6 	bl	80034e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d3c:	e034      	b.n	8004da8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d3e:	f107 0318 	add.w	r3, r7, #24
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fe fd22 	bl	800378c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d4c:	e02c      	b.n	8004da8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d4e:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <UART_SetConfig+0x69c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d016      	beq.n	8004d88 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d5a:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <UART_SetConfig+0x69c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	08db      	lsrs	r3, r3, #3
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	4a07      	ldr	r2, [pc, #28]	; (8004d84 <UART_SetConfig+0x6ac>)
 8004d66:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d6c:	e01c      	b.n	8004da8 <UART_SetConfig+0x6d0>
 8004d6e:	bf00      	nop
 8004d70:	40011400 	.word	0x40011400
 8004d74:	58024400 	.word	0x58024400
 8004d78:	40007800 	.word	0x40007800
 8004d7c:	40007c00 	.word	0x40007c00
 8004d80:	58000c00 	.word	0x58000c00
 8004d84:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004d88:	4b9d      	ldr	r3, [pc, #628]	; (8005000 <UART_SetConfig+0x928>)
 8004d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d8c:	e00c      	b.n	8004da8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d8e:	4b9d      	ldr	r3, [pc, #628]	; (8005004 <UART_SetConfig+0x92c>)
 8004d90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d92:	e009      	b.n	8004da8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d9a:	e005      	b.n	8004da8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004da6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 81de 	beq.w	800516c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	4a94      	ldr	r2, [pc, #592]	; (8005008 <UART_SetConfig+0x930>)
 8004db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dc2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	4413      	add	r3, r2
 8004dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d305      	bcc.n	8004de0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d903      	bls.n	8004de8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004de6:	e1c1      	b.n	800516c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dea:	2200      	movs	r2, #0
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	60fa      	str	r2, [r7, #12]
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	4a84      	ldr	r2, [pc, #528]	; (8005008 <UART_SetConfig+0x930>)
 8004df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e0a:	f7fb fab9 	bl	8000380 <__aeabi_uldivmod>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4610      	mov	r0, r2
 8004e14:	4619      	mov	r1, r3
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	020b      	lsls	r3, r1, #8
 8004e20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e24:	0202      	lsls	r2, r0, #8
 8004e26:	6979      	ldr	r1, [r7, #20]
 8004e28:	6849      	ldr	r1, [r1, #4]
 8004e2a:	0849      	lsrs	r1, r1, #1
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	460c      	mov	r4, r1
 8004e30:	4605      	mov	r5, r0
 8004e32:	eb12 0804 	adds.w	r8, r2, r4
 8004e36:	eb43 0905 	adc.w	r9, r3, r5
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	469a      	mov	sl, r3
 8004e42:	4693      	mov	fp, r2
 8004e44:	4652      	mov	r2, sl
 8004e46:	465b      	mov	r3, fp
 8004e48:	4640      	mov	r0, r8
 8004e4a:	4649      	mov	r1, r9
 8004e4c:	f7fb fa98 	bl	8000380 <__aeabi_uldivmod>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4613      	mov	r3, r2
 8004e56:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e5e:	d308      	bcc.n	8004e72 <UART_SetConfig+0x79a>
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e66:	d204      	bcs.n	8004e72 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e6e:	60da      	str	r2, [r3, #12]
 8004e70:	e17c      	b.n	800516c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004e78:	e178      	b.n	800516c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e82:	f040 80c5 	bne.w	8005010 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004e86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	dc48      	bgt.n	8004f20 <UART_SetConfig+0x848>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	db7b      	blt.n	8004f8a <UART_SetConfig+0x8b2>
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	d879      	bhi.n	8004f8a <UART_SetConfig+0x8b2>
 8004e96:	a201      	add	r2, pc, #4	; (adr r2, 8004e9c <UART_SetConfig+0x7c4>)
 8004e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9c:	08004f27 	.word	0x08004f27
 8004ea0:	08004f2f 	.word	0x08004f2f
 8004ea4:	08004f8b 	.word	0x08004f8b
 8004ea8:	08004f8b 	.word	0x08004f8b
 8004eac:	08004f37 	.word	0x08004f37
 8004eb0:	08004f8b 	.word	0x08004f8b
 8004eb4:	08004f8b 	.word	0x08004f8b
 8004eb8:	08004f8b 	.word	0x08004f8b
 8004ebc:	08004f47 	.word	0x08004f47
 8004ec0:	08004f8b 	.word	0x08004f8b
 8004ec4:	08004f8b 	.word	0x08004f8b
 8004ec8:	08004f8b 	.word	0x08004f8b
 8004ecc:	08004f8b 	.word	0x08004f8b
 8004ed0:	08004f8b 	.word	0x08004f8b
 8004ed4:	08004f8b 	.word	0x08004f8b
 8004ed8:	08004f8b 	.word	0x08004f8b
 8004edc:	08004f57 	.word	0x08004f57
 8004ee0:	08004f8b 	.word	0x08004f8b
 8004ee4:	08004f8b 	.word	0x08004f8b
 8004ee8:	08004f8b 	.word	0x08004f8b
 8004eec:	08004f8b 	.word	0x08004f8b
 8004ef0:	08004f8b 	.word	0x08004f8b
 8004ef4:	08004f8b 	.word	0x08004f8b
 8004ef8:	08004f8b 	.word	0x08004f8b
 8004efc:	08004f8b 	.word	0x08004f8b
 8004f00:	08004f8b 	.word	0x08004f8b
 8004f04:	08004f8b 	.word	0x08004f8b
 8004f08:	08004f8b 	.word	0x08004f8b
 8004f0c:	08004f8b 	.word	0x08004f8b
 8004f10:	08004f8b 	.word	0x08004f8b
 8004f14:	08004f8b 	.word	0x08004f8b
 8004f18:	08004f8b 	.word	0x08004f8b
 8004f1c:	08004f7d 	.word	0x08004f7d
 8004f20:	2b40      	cmp	r3, #64	; 0x40
 8004f22:	d02e      	beq.n	8004f82 <UART_SetConfig+0x8aa>
 8004f24:	e031      	b.n	8004f8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f26:	f7fd fb55 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 8004f2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004f2c:	e033      	b.n	8004f96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f2e:	f7fd fb67 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
 8004f32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004f34:	e02f      	b.n	8004f96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fe fad2 	bl	80034e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f44:	e027      	b.n	8004f96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f46:	f107 0318 	add.w	r3, r7, #24
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fe fc1e 	bl	800378c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f54:	e01f      	b.n	8004f96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f56:	4b2d      	ldr	r3, [pc, #180]	; (800500c <UART_SetConfig+0x934>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f62:	4b2a      	ldr	r3, [pc, #168]	; (800500c <UART_SetConfig+0x934>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	08db      	lsrs	r3, r3, #3
 8004f68:	f003 0303 	and.w	r3, r3, #3
 8004f6c:	4a24      	ldr	r2, [pc, #144]	; (8005000 <UART_SetConfig+0x928>)
 8004f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f74:	e00f      	b.n	8004f96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004f76:	4b22      	ldr	r3, [pc, #136]	; (8005000 <UART_SetConfig+0x928>)
 8004f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f7a:	e00c      	b.n	8004f96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f7c:	4b21      	ldr	r3, [pc, #132]	; (8005004 <UART_SetConfig+0x92c>)
 8004f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f80:	e009      	b.n	8004f96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f88:	e005      	b.n	8004f96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004f94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80e7 	beq.w	800516c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	4a19      	ldr	r2, [pc, #100]	; (8005008 <UART_SetConfig+0x930>)
 8004fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fac:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fb0:	005a      	lsls	r2, r3, #1
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	441a      	add	r2, r3
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc6:	2b0f      	cmp	r3, #15
 8004fc8:	d916      	bls.n	8004ff8 <UART_SetConfig+0x920>
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd0:	d212      	bcs.n	8004ff8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	f023 030f 	bic.w	r3, r3, #15
 8004fda:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fde:	085b      	lsrs	r3, r3, #1
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004fea:	4313      	orrs	r3, r2
 8004fec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004ff4:	60da      	str	r2, [r3, #12]
 8004ff6:	e0b9      	b.n	800516c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004ffe:	e0b5      	b.n	800516c <UART_SetConfig+0xa94>
 8005000:	03d09000 	.word	0x03d09000
 8005004:	003d0900 	.word	0x003d0900
 8005008:	080066c8 	.word	0x080066c8
 800500c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005010:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005014:	2b20      	cmp	r3, #32
 8005016:	dc49      	bgt.n	80050ac <UART_SetConfig+0x9d4>
 8005018:	2b00      	cmp	r3, #0
 800501a:	db7c      	blt.n	8005116 <UART_SetConfig+0xa3e>
 800501c:	2b20      	cmp	r3, #32
 800501e:	d87a      	bhi.n	8005116 <UART_SetConfig+0xa3e>
 8005020:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <UART_SetConfig+0x950>)
 8005022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005026:	bf00      	nop
 8005028:	080050b3 	.word	0x080050b3
 800502c:	080050bb 	.word	0x080050bb
 8005030:	08005117 	.word	0x08005117
 8005034:	08005117 	.word	0x08005117
 8005038:	080050c3 	.word	0x080050c3
 800503c:	08005117 	.word	0x08005117
 8005040:	08005117 	.word	0x08005117
 8005044:	08005117 	.word	0x08005117
 8005048:	080050d3 	.word	0x080050d3
 800504c:	08005117 	.word	0x08005117
 8005050:	08005117 	.word	0x08005117
 8005054:	08005117 	.word	0x08005117
 8005058:	08005117 	.word	0x08005117
 800505c:	08005117 	.word	0x08005117
 8005060:	08005117 	.word	0x08005117
 8005064:	08005117 	.word	0x08005117
 8005068:	080050e3 	.word	0x080050e3
 800506c:	08005117 	.word	0x08005117
 8005070:	08005117 	.word	0x08005117
 8005074:	08005117 	.word	0x08005117
 8005078:	08005117 	.word	0x08005117
 800507c:	08005117 	.word	0x08005117
 8005080:	08005117 	.word	0x08005117
 8005084:	08005117 	.word	0x08005117
 8005088:	08005117 	.word	0x08005117
 800508c:	08005117 	.word	0x08005117
 8005090:	08005117 	.word	0x08005117
 8005094:	08005117 	.word	0x08005117
 8005098:	08005117 	.word	0x08005117
 800509c:	08005117 	.word	0x08005117
 80050a0:	08005117 	.word	0x08005117
 80050a4:	08005117 	.word	0x08005117
 80050a8:	08005109 	.word	0x08005109
 80050ac:	2b40      	cmp	r3, #64	; 0x40
 80050ae:	d02e      	beq.n	800510e <UART_SetConfig+0xa36>
 80050b0:	e031      	b.n	8005116 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b2:	f7fd fa8f 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 80050b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80050b8:	e033      	b.n	8005122 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050ba:	f7fd faa1 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
 80050be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80050c0:	e02f      	b.n	8005122 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fe fa0c 	bl	80034e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050d0:	e027      	b.n	8005122 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050d2:	f107 0318 	add.w	r3, r7, #24
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fe fb58 	bl	800378c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050e0:	e01f      	b.n	8005122 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050e2:	4b2d      	ldr	r3, [pc, #180]	; (8005198 <UART_SetConfig+0xac0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d009      	beq.n	8005102 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050ee:	4b2a      	ldr	r3, [pc, #168]	; (8005198 <UART_SetConfig+0xac0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	08db      	lsrs	r3, r3, #3
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	4a28      	ldr	r2, [pc, #160]	; (800519c <UART_SetConfig+0xac4>)
 80050fa:	fa22 f303 	lsr.w	r3, r2, r3
 80050fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005100:	e00f      	b.n	8005122 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005102:	4b26      	ldr	r3, [pc, #152]	; (800519c <UART_SetConfig+0xac4>)
 8005104:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005106:	e00c      	b.n	8005122 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005108:	4b25      	ldr	r3, [pc, #148]	; (80051a0 <UART_SetConfig+0xac8>)
 800510a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800510c:	e009      	b.n	8005122 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800510e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005114:	e005      	b.n	8005122 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005120:	bf00      	nop
    }

    if (pclk != 0U)
 8005122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d021      	beq.n	800516c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <UART_SetConfig+0xacc>)
 800512e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005132:	461a      	mov	r2, r3
 8005134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005136:	fbb3 f2f2 	udiv	r2, r3, r2
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	085b      	lsrs	r3, r3, #1
 8005140:	441a      	add	r2, r3
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	fbb2 f3f3 	udiv	r3, r2, r3
 800514a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	2b0f      	cmp	r3, #15
 8005150:	d909      	bls.n	8005166 <UART_SetConfig+0xa8e>
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005158:	d205      	bcs.n	8005166 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	b29a      	uxth	r2, r3
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60da      	str	r2, [r3, #12]
 8005164:	e002      	b.n	800516c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2201      	movs	r2, #1
 8005170:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2201      	movs	r2, #1
 8005178:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2200      	movs	r2, #0
 8005180:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2200      	movs	r2, #0
 8005186:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005188:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800518c:	4618      	mov	r0, r3
 800518e:	3748      	adds	r7, #72	; 0x48
 8005190:	46bd      	mov	sp, r7
 8005192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005196:	bf00      	nop
 8005198:	58024400 	.word	0x58024400
 800519c:	03d09000 	.word	0x03d09000
 80051a0:	003d0900 	.word	0x003d0900
 80051a4:	080066c8 	.word	0x080066c8

080051a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00a      	beq.n	8005216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01a      	beq.n	80052be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052a6:	d10a      	bne.n	80052be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	605a      	str	r2, [r3, #4]
  }
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052fc:	f7fb fe7c 	bl	8000ff8 <HAL_GetTick>
 8005300:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b08      	cmp	r3, #8
 800530e:	d10e      	bne.n	800532e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005310:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f82f 	bl	8005382 <UART_WaitOnFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e025      	b.n	800537a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b04      	cmp	r3, #4
 800533a:	d10e      	bne.n	800535a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800533c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f819 	bl	8005382 <UART_WaitOnFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e00f      	b.n	800537a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b09c      	sub	sp, #112	; 0x70
 8005386:	af00      	add	r7, sp, #0
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	603b      	str	r3, [r7, #0]
 800538e:	4613      	mov	r3, r2
 8005390:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005392:	e0a9      	b.n	80054e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539a:	f000 80a5 	beq.w	80054e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800539e:	f7fb fe2b 	bl	8000ff8 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d302      	bcc.n	80053b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80053ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d140      	bne.n	8005436 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053c8:	667b      	str	r3, [r7, #100]	; 0x64
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e6      	bne.n	80053b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3308      	adds	r3, #8
 80053ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	f023 0301 	bic.w	r3, r3, #1
 80053fc:	663b      	str	r3, [r7, #96]	; 0x60
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3308      	adds	r3, #8
 8005404:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005406:	64ba      	str	r2, [r7, #72]	; 0x48
 8005408:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800540c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e5      	bne.n	80053e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2220      	movs	r2, #32
 8005426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e069      	b.n	800550a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d051      	beq.n	80054e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800544e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005452:	d149      	bne.n	80054e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800545c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005472:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800547c:	637b      	str	r3, [r7, #52]	; 0x34
 800547e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800548a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e6      	bne.n	800545e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3308      	adds	r3, #8
 8005496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	e853 3f00 	ldrex	r3, [r3]
 800549e:	613b      	str	r3, [r7, #16]
   return(result);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3308      	adds	r3, #8
 80054ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054b0:	623a      	str	r2, [r7, #32]
 80054b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	69f9      	ldr	r1, [r7, #28]
 80054b6:	6a3a      	ldr	r2, [r7, #32]
 80054b8:	e841 2300 	strex	r3, r2, [r1]
 80054bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e5      	bne.n	8005490 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e010      	b.n	800550a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69da      	ldr	r2, [r3, #28]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	4013      	ands	r3, r2
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	bf0c      	ite	eq
 80054f8:	2301      	moveq	r3, #1
 80054fa:	2300      	movne	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	461a      	mov	r2, r3
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	429a      	cmp	r2, r3
 8005504:	f43f af46 	beq.w	8005394 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3770      	adds	r7, #112	; 0x70
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005512:	b480      	push	{r7}
 8005514:	b085      	sub	sp, #20
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_UARTEx_DisableFifoMode+0x16>
 8005524:	2302      	movs	r3, #2
 8005526:	e027      	b.n	8005578 <HAL_UARTEx_DisableFifoMode+0x66>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2224      	movs	r2, #36	; 0x24
 8005534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0201 	bic.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005556:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005598:	2302      	movs	r3, #2
 800559a:	e02d      	b.n	80055f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2224      	movs	r2, #36	; 0x24
 80055a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0201 	bic.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f84f 	bl	800567c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005614:	2302      	movs	r3, #2
 8005616:	e02d      	b.n	8005674 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2224      	movs	r2, #36	; 0x24
 8005624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0201 	bic.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f811 	bl	800567c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2220      	movs	r2, #32
 8005666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005688:	2b00      	cmp	r3, #0
 800568a:	d108      	bne.n	800569e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800569c:	e031      	b.n	8005702 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800569e:	2310      	movs	r3, #16
 80056a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056a2:	2310      	movs	r3, #16
 80056a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	0e5b      	lsrs	r3, r3, #25
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	0f5b      	lsrs	r3, r3, #29
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056c6:	7bbb      	ldrb	r3, [r7, #14]
 80056c8:	7b3a      	ldrb	r2, [r7, #12]
 80056ca:	4911      	ldr	r1, [pc, #68]	; (8005710 <UARTEx_SetNbDataToProcess+0x94>)
 80056cc:	5c8a      	ldrb	r2, [r1, r2]
 80056ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056d2:	7b3a      	ldrb	r2, [r7, #12]
 80056d4:	490f      	ldr	r1, [pc, #60]	; (8005714 <UARTEx_SetNbDataToProcess+0x98>)
 80056d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80056dc:	b29a      	uxth	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	7b7a      	ldrb	r2, [r7, #13]
 80056e8:	4909      	ldr	r1, [pc, #36]	; (8005710 <UARTEx_SetNbDataToProcess+0x94>)
 80056ea:	5c8a      	ldrb	r2, [r1, r2]
 80056ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056f0:	7b7a      	ldrb	r2, [r7, #13]
 80056f2:	4908      	ldr	r1, [pc, #32]	; (8005714 <UARTEx_SetNbDataToProcess+0x98>)
 80056f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005702:	bf00      	nop
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	080066e0 	.word	0x080066e0
 8005714:	080066e8 	.word	0x080066e8

08005718 <__errno>:
 8005718:	4b01      	ldr	r3, [pc, #4]	; (8005720 <__errno+0x8>)
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	24000010 	.word	0x24000010

08005724 <__libc_init_array>:
 8005724:	b570      	push	{r4, r5, r6, lr}
 8005726:	4d0d      	ldr	r5, [pc, #52]	; (800575c <__libc_init_array+0x38>)
 8005728:	4c0d      	ldr	r4, [pc, #52]	; (8005760 <__libc_init_array+0x3c>)
 800572a:	1b64      	subs	r4, r4, r5
 800572c:	10a4      	asrs	r4, r4, #2
 800572e:	2600      	movs	r6, #0
 8005730:	42a6      	cmp	r6, r4
 8005732:	d109      	bne.n	8005748 <__libc_init_array+0x24>
 8005734:	4d0b      	ldr	r5, [pc, #44]	; (8005764 <__libc_init_array+0x40>)
 8005736:	4c0c      	ldr	r4, [pc, #48]	; (8005768 <__libc_init_array+0x44>)
 8005738:	f000 ffae 	bl	8006698 <_init>
 800573c:	1b64      	subs	r4, r4, r5
 800573e:	10a4      	asrs	r4, r4, #2
 8005740:	2600      	movs	r6, #0
 8005742:	42a6      	cmp	r6, r4
 8005744:	d105      	bne.n	8005752 <__libc_init_array+0x2e>
 8005746:	bd70      	pop	{r4, r5, r6, pc}
 8005748:	f855 3b04 	ldr.w	r3, [r5], #4
 800574c:	4798      	blx	r3
 800574e:	3601      	adds	r6, #1
 8005750:	e7ee      	b.n	8005730 <__libc_init_array+0xc>
 8005752:	f855 3b04 	ldr.w	r3, [r5], #4
 8005756:	4798      	blx	r3
 8005758:	3601      	adds	r6, #1
 800575a:	e7f2      	b.n	8005742 <__libc_init_array+0x1e>
 800575c:	08006790 	.word	0x08006790
 8005760:	08006790 	.word	0x08006790
 8005764:	08006790 	.word	0x08006790
 8005768:	08006794 	.word	0x08006794

0800576c <memset>:
 800576c:	4402      	add	r2, r0
 800576e:	4603      	mov	r3, r0
 8005770:	4293      	cmp	r3, r2
 8005772:	d100      	bne.n	8005776 <memset+0xa>
 8005774:	4770      	bx	lr
 8005776:	f803 1b01 	strb.w	r1, [r3], #1
 800577a:	e7f9      	b.n	8005770 <memset+0x4>

0800577c <iprintf>:
 800577c:	b40f      	push	{r0, r1, r2, r3}
 800577e:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <iprintf+0x2c>)
 8005780:	b513      	push	{r0, r1, r4, lr}
 8005782:	681c      	ldr	r4, [r3, #0]
 8005784:	b124      	cbz	r4, 8005790 <iprintf+0x14>
 8005786:	69a3      	ldr	r3, [r4, #24]
 8005788:	b913      	cbnz	r3, 8005790 <iprintf+0x14>
 800578a:	4620      	mov	r0, r4
 800578c:	f000 f866 	bl	800585c <__sinit>
 8005790:	ab05      	add	r3, sp, #20
 8005792:	9a04      	ldr	r2, [sp, #16]
 8005794:	68a1      	ldr	r1, [r4, #8]
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	4620      	mov	r0, r4
 800579a:	f000 f9bd 	bl	8005b18 <_vfiprintf_r>
 800579e:	b002      	add	sp, #8
 80057a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057a4:	b004      	add	sp, #16
 80057a6:	4770      	bx	lr
 80057a8:	24000010 	.word	0x24000010

080057ac <std>:
 80057ac:	2300      	movs	r3, #0
 80057ae:	b510      	push	{r4, lr}
 80057b0:	4604      	mov	r4, r0
 80057b2:	e9c0 3300 	strd	r3, r3, [r0]
 80057b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057ba:	6083      	str	r3, [r0, #8]
 80057bc:	8181      	strh	r1, [r0, #12]
 80057be:	6643      	str	r3, [r0, #100]	; 0x64
 80057c0:	81c2      	strh	r2, [r0, #14]
 80057c2:	6183      	str	r3, [r0, #24]
 80057c4:	4619      	mov	r1, r3
 80057c6:	2208      	movs	r2, #8
 80057c8:	305c      	adds	r0, #92	; 0x5c
 80057ca:	f7ff ffcf 	bl	800576c <memset>
 80057ce:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <std+0x38>)
 80057d0:	6263      	str	r3, [r4, #36]	; 0x24
 80057d2:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <std+0x3c>)
 80057d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80057d6:	4b05      	ldr	r3, [pc, #20]	; (80057ec <std+0x40>)
 80057d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057da:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <std+0x44>)
 80057dc:	6224      	str	r4, [r4, #32]
 80057de:	6323      	str	r3, [r4, #48]	; 0x30
 80057e0:	bd10      	pop	{r4, pc}
 80057e2:	bf00      	nop
 80057e4:	080060c1 	.word	0x080060c1
 80057e8:	080060e3 	.word	0x080060e3
 80057ec:	0800611b 	.word	0x0800611b
 80057f0:	0800613f 	.word	0x0800613f

080057f4 <_cleanup_r>:
 80057f4:	4901      	ldr	r1, [pc, #4]	; (80057fc <_cleanup_r+0x8>)
 80057f6:	f000 b8af 	b.w	8005958 <_fwalk_reent>
 80057fa:	bf00      	nop
 80057fc:	08006419 	.word	0x08006419

08005800 <__sfmoreglue>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	2268      	movs	r2, #104	; 0x68
 8005804:	1e4d      	subs	r5, r1, #1
 8005806:	4355      	muls	r5, r2
 8005808:	460e      	mov	r6, r1
 800580a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800580e:	f000 f8e5 	bl	80059dc <_malloc_r>
 8005812:	4604      	mov	r4, r0
 8005814:	b140      	cbz	r0, 8005828 <__sfmoreglue+0x28>
 8005816:	2100      	movs	r1, #0
 8005818:	e9c0 1600 	strd	r1, r6, [r0]
 800581c:	300c      	adds	r0, #12
 800581e:	60a0      	str	r0, [r4, #8]
 8005820:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005824:	f7ff ffa2 	bl	800576c <memset>
 8005828:	4620      	mov	r0, r4
 800582a:	bd70      	pop	{r4, r5, r6, pc}

0800582c <__sfp_lock_acquire>:
 800582c:	4801      	ldr	r0, [pc, #4]	; (8005834 <__sfp_lock_acquire+0x8>)
 800582e:	f000 b8b3 	b.w	8005998 <__retarget_lock_acquire_recursive>
 8005832:	bf00      	nop
 8005834:	24000179 	.word	0x24000179

08005838 <__sfp_lock_release>:
 8005838:	4801      	ldr	r0, [pc, #4]	; (8005840 <__sfp_lock_release+0x8>)
 800583a:	f000 b8ae 	b.w	800599a <__retarget_lock_release_recursive>
 800583e:	bf00      	nop
 8005840:	24000179 	.word	0x24000179

08005844 <__sinit_lock_acquire>:
 8005844:	4801      	ldr	r0, [pc, #4]	; (800584c <__sinit_lock_acquire+0x8>)
 8005846:	f000 b8a7 	b.w	8005998 <__retarget_lock_acquire_recursive>
 800584a:	bf00      	nop
 800584c:	2400017a 	.word	0x2400017a

08005850 <__sinit_lock_release>:
 8005850:	4801      	ldr	r0, [pc, #4]	; (8005858 <__sinit_lock_release+0x8>)
 8005852:	f000 b8a2 	b.w	800599a <__retarget_lock_release_recursive>
 8005856:	bf00      	nop
 8005858:	2400017a 	.word	0x2400017a

0800585c <__sinit>:
 800585c:	b510      	push	{r4, lr}
 800585e:	4604      	mov	r4, r0
 8005860:	f7ff fff0 	bl	8005844 <__sinit_lock_acquire>
 8005864:	69a3      	ldr	r3, [r4, #24]
 8005866:	b11b      	cbz	r3, 8005870 <__sinit+0x14>
 8005868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800586c:	f7ff bff0 	b.w	8005850 <__sinit_lock_release>
 8005870:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005874:	6523      	str	r3, [r4, #80]	; 0x50
 8005876:	4b13      	ldr	r3, [pc, #76]	; (80058c4 <__sinit+0x68>)
 8005878:	4a13      	ldr	r2, [pc, #76]	; (80058c8 <__sinit+0x6c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	62a2      	str	r2, [r4, #40]	; 0x28
 800587e:	42a3      	cmp	r3, r4
 8005880:	bf04      	itt	eq
 8005882:	2301      	moveq	r3, #1
 8005884:	61a3      	streq	r3, [r4, #24]
 8005886:	4620      	mov	r0, r4
 8005888:	f000 f820 	bl	80058cc <__sfp>
 800588c:	6060      	str	r0, [r4, #4]
 800588e:	4620      	mov	r0, r4
 8005890:	f000 f81c 	bl	80058cc <__sfp>
 8005894:	60a0      	str	r0, [r4, #8]
 8005896:	4620      	mov	r0, r4
 8005898:	f000 f818 	bl	80058cc <__sfp>
 800589c:	2200      	movs	r2, #0
 800589e:	60e0      	str	r0, [r4, #12]
 80058a0:	2104      	movs	r1, #4
 80058a2:	6860      	ldr	r0, [r4, #4]
 80058a4:	f7ff ff82 	bl	80057ac <std>
 80058a8:	68a0      	ldr	r0, [r4, #8]
 80058aa:	2201      	movs	r2, #1
 80058ac:	2109      	movs	r1, #9
 80058ae:	f7ff ff7d 	bl	80057ac <std>
 80058b2:	68e0      	ldr	r0, [r4, #12]
 80058b4:	2202      	movs	r2, #2
 80058b6:	2112      	movs	r1, #18
 80058b8:	f7ff ff78 	bl	80057ac <std>
 80058bc:	2301      	movs	r3, #1
 80058be:	61a3      	str	r3, [r4, #24]
 80058c0:	e7d2      	b.n	8005868 <__sinit+0xc>
 80058c2:	bf00      	nop
 80058c4:	080066f0 	.word	0x080066f0
 80058c8:	080057f5 	.word	0x080057f5

080058cc <__sfp>:
 80058cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ce:	4607      	mov	r7, r0
 80058d0:	f7ff ffac 	bl	800582c <__sfp_lock_acquire>
 80058d4:	4b1e      	ldr	r3, [pc, #120]	; (8005950 <__sfp+0x84>)
 80058d6:	681e      	ldr	r6, [r3, #0]
 80058d8:	69b3      	ldr	r3, [r6, #24]
 80058da:	b913      	cbnz	r3, 80058e2 <__sfp+0x16>
 80058dc:	4630      	mov	r0, r6
 80058de:	f7ff ffbd 	bl	800585c <__sinit>
 80058e2:	3648      	adds	r6, #72	; 0x48
 80058e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	d503      	bpl.n	80058f4 <__sfp+0x28>
 80058ec:	6833      	ldr	r3, [r6, #0]
 80058ee:	b30b      	cbz	r3, 8005934 <__sfp+0x68>
 80058f0:	6836      	ldr	r6, [r6, #0]
 80058f2:	e7f7      	b.n	80058e4 <__sfp+0x18>
 80058f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80058f8:	b9d5      	cbnz	r5, 8005930 <__sfp+0x64>
 80058fa:	4b16      	ldr	r3, [pc, #88]	; (8005954 <__sfp+0x88>)
 80058fc:	60e3      	str	r3, [r4, #12]
 80058fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005902:	6665      	str	r5, [r4, #100]	; 0x64
 8005904:	f000 f847 	bl	8005996 <__retarget_lock_init_recursive>
 8005908:	f7ff ff96 	bl	8005838 <__sfp_lock_release>
 800590c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005910:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005914:	6025      	str	r5, [r4, #0]
 8005916:	61a5      	str	r5, [r4, #24]
 8005918:	2208      	movs	r2, #8
 800591a:	4629      	mov	r1, r5
 800591c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005920:	f7ff ff24 	bl	800576c <memset>
 8005924:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005928:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800592c:	4620      	mov	r0, r4
 800592e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005930:	3468      	adds	r4, #104	; 0x68
 8005932:	e7d9      	b.n	80058e8 <__sfp+0x1c>
 8005934:	2104      	movs	r1, #4
 8005936:	4638      	mov	r0, r7
 8005938:	f7ff ff62 	bl	8005800 <__sfmoreglue>
 800593c:	4604      	mov	r4, r0
 800593e:	6030      	str	r0, [r6, #0]
 8005940:	2800      	cmp	r0, #0
 8005942:	d1d5      	bne.n	80058f0 <__sfp+0x24>
 8005944:	f7ff ff78 	bl	8005838 <__sfp_lock_release>
 8005948:	230c      	movs	r3, #12
 800594a:	603b      	str	r3, [r7, #0]
 800594c:	e7ee      	b.n	800592c <__sfp+0x60>
 800594e:	bf00      	nop
 8005950:	080066f0 	.word	0x080066f0
 8005954:	ffff0001 	.word	0xffff0001

08005958 <_fwalk_reent>:
 8005958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800595c:	4606      	mov	r6, r0
 800595e:	4688      	mov	r8, r1
 8005960:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005964:	2700      	movs	r7, #0
 8005966:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800596a:	f1b9 0901 	subs.w	r9, r9, #1
 800596e:	d505      	bpl.n	800597c <_fwalk_reent+0x24>
 8005970:	6824      	ldr	r4, [r4, #0]
 8005972:	2c00      	cmp	r4, #0
 8005974:	d1f7      	bne.n	8005966 <_fwalk_reent+0xe>
 8005976:	4638      	mov	r0, r7
 8005978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597c:	89ab      	ldrh	r3, [r5, #12]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d907      	bls.n	8005992 <_fwalk_reent+0x3a>
 8005982:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005986:	3301      	adds	r3, #1
 8005988:	d003      	beq.n	8005992 <_fwalk_reent+0x3a>
 800598a:	4629      	mov	r1, r5
 800598c:	4630      	mov	r0, r6
 800598e:	47c0      	blx	r8
 8005990:	4307      	orrs	r7, r0
 8005992:	3568      	adds	r5, #104	; 0x68
 8005994:	e7e9      	b.n	800596a <_fwalk_reent+0x12>

08005996 <__retarget_lock_init_recursive>:
 8005996:	4770      	bx	lr

08005998 <__retarget_lock_acquire_recursive>:
 8005998:	4770      	bx	lr

0800599a <__retarget_lock_release_recursive>:
 800599a:	4770      	bx	lr

0800599c <sbrk_aligned>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	4e0e      	ldr	r6, [pc, #56]	; (80059d8 <sbrk_aligned+0x3c>)
 80059a0:	460c      	mov	r4, r1
 80059a2:	6831      	ldr	r1, [r6, #0]
 80059a4:	4605      	mov	r5, r0
 80059a6:	b911      	cbnz	r1, 80059ae <sbrk_aligned+0x12>
 80059a8:	f000 fb7a 	bl	80060a0 <_sbrk_r>
 80059ac:	6030      	str	r0, [r6, #0]
 80059ae:	4621      	mov	r1, r4
 80059b0:	4628      	mov	r0, r5
 80059b2:	f000 fb75 	bl	80060a0 <_sbrk_r>
 80059b6:	1c43      	adds	r3, r0, #1
 80059b8:	d00a      	beq.n	80059d0 <sbrk_aligned+0x34>
 80059ba:	1cc4      	adds	r4, r0, #3
 80059bc:	f024 0403 	bic.w	r4, r4, #3
 80059c0:	42a0      	cmp	r0, r4
 80059c2:	d007      	beq.n	80059d4 <sbrk_aligned+0x38>
 80059c4:	1a21      	subs	r1, r4, r0
 80059c6:	4628      	mov	r0, r5
 80059c8:	f000 fb6a 	bl	80060a0 <_sbrk_r>
 80059cc:	3001      	adds	r0, #1
 80059ce:	d101      	bne.n	80059d4 <sbrk_aligned+0x38>
 80059d0:	f04f 34ff 	mov.w	r4, #4294967295
 80059d4:	4620      	mov	r0, r4
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	24000180 	.word	0x24000180

080059dc <_malloc_r>:
 80059dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e0:	1ccd      	adds	r5, r1, #3
 80059e2:	f025 0503 	bic.w	r5, r5, #3
 80059e6:	3508      	adds	r5, #8
 80059e8:	2d0c      	cmp	r5, #12
 80059ea:	bf38      	it	cc
 80059ec:	250c      	movcc	r5, #12
 80059ee:	2d00      	cmp	r5, #0
 80059f0:	4607      	mov	r7, r0
 80059f2:	db01      	blt.n	80059f8 <_malloc_r+0x1c>
 80059f4:	42a9      	cmp	r1, r5
 80059f6:	d905      	bls.n	8005a04 <_malloc_r+0x28>
 80059f8:	230c      	movs	r3, #12
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	2600      	movs	r6, #0
 80059fe:	4630      	mov	r0, r6
 8005a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a04:	4e2e      	ldr	r6, [pc, #184]	; (8005ac0 <_malloc_r+0xe4>)
 8005a06:	f000 fdbb 	bl	8006580 <__malloc_lock>
 8005a0a:	6833      	ldr	r3, [r6, #0]
 8005a0c:	461c      	mov	r4, r3
 8005a0e:	bb34      	cbnz	r4, 8005a5e <_malloc_r+0x82>
 8005a10:	4629      	mov	r1, r5
 8005a12:	4638      	mov	r0, r7
 8005a14:	f7ff ffc2 	bl	800599c <sbrk_aligned>
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	d14d      	bne.n	8005aba <_malloc_r+0xde>
 8005a1e:	6834      	ldr	r4, [r6, #0]
 8005a20:	4626      	mov	r6, r4
 8005a22:	2e00      	cmp	r6, #0
 8005a24:	d140      	bne.n	8005aa8 <_malloc_r+0xcc>
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	4631      	mov	r1, r6
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	eb04 0803 	add.w	r8, r4, r3
 8005a30:	f000 fb36 	bl	80060a0 <_sbrk_r>
 8005a34:	4580      	cmp	r8, r0
 8005a36:	d13a      	bne.n	8005aae <_malloc_r+0xd2>
 8005a38:	6821      	ldr	r1, [r4, #0]
 8005a3a:	3503      	adds	r5, #3
 8005a3c:	1a6d      	subs	r5, r5, r1
 8005a3e:	f025 0503 	bic.w	r5, r5, #3
 8005a42:	3508      	adds	r5, #8
 8005a44:	2d0c      	cmp	r5, #12
 8005a46:	bf38      	it	cc
 8005a48:	250c      	movcc	r5, #12
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	f7ff ffa5 	bl	800599c <sbrk_aligned>
 8005a52:	3001      	adds	r0, #1
 8005a54:	d02b      	beq.n	8005aae <_malloc_r+0xd2>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	442b      	add	r3, r5
 8005a5a:	6023      	str	r3, [r4, #0]
 8005a5c:	e00e      	b.n	8005a7c <_malloc_r+0xa0>
 8005a5e:	6822      	ldr	r2, [r4, #0]
 8005a60:	1b52      	subs	r2, r2, r5
 8005a62:	d41e      	bmi.n	8005aa2 <_malloc_r+0xc6>
 8005a64:	2a0b      	cmp	r2, #11
 8005a66:	d916      	bls.n	8005a96 <_malloc_r+0xba>
 8005a68:	1961      	adds	r1, r4, r5
 8005a6a:	42a3      	cmp	r3, r4
 8005a6c:	6025      	str	r5, [r4, #0]
 8005a6e:	bf18      	it	ne
 8005a70:	6059      	strne	r1, [r3, #4]
 8005a72:	6863      	ldr	r3, [r4, #4]
 8005a74:	bf08      	it	eq
 8005a76:	6031      	streq	r1, [r6, #0]
 8005a78:	5162      	str	r2, [r4, r5]
 8005a7a:	604b      	str	r3, [r1, #4]
 8005a7c:	4638      	mov	r0, r7
 8005a7e:	f104 060b 	add.w	r6, r4, #11
 8005a82:	f000 fd83 	bl	800658c <__malloc_unlock>
 8005a86:	f026 0607 	bic.w	r6, r6, #7
 8005a8a:	1d23      	adds	r3, r4, #4
 8005a8c:	1af2      	subs	r2, r6, r3
 8005a8e:	d0b6      	beq.n	80059fe <_malloc_r+0x22>
 8005a90:	1b9b      	subs	r3, r3, r6
 8005a92:	50a3      	str	r3, [r4, r2]
 8005a94:	e7b3      	b.n	80059fe <_malloc_r+0x22>
 8005a96:	6862      	ldr	r2, [r4, #4]
 8005a98:	42a3      	cmp	r3, r4
 8005a9a:	bf0c      	ite	eq
 8005a9c:	6032      	streq	r2, [r6, #0]
 8005a9e:	605a      	strne	r2, [r3, #4]
 8005aa0:	e7ec      	b.n	8005a7c <_malloc_r+0xa0>
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	6864      	ldr	r4, [r4, #4]
 8005aa6:	e7b2      	b.n	8005a0e <_malloc_r+0x32>
 8005aa8:	4634      	mov	r4, r6
 8005aaa:	6876      	ldr	r6, [r6, #4]
 8005aac:	e7b9      	b.n	8005a22 <_malloc_r+0x46>
 8005aae:	230c      	movs	r3, #12
 8005ab0:	603b      	str	r3, [r7, #0]
 8005ab2:	4638      	mov	r0, r7
 8005ab4:	f000 fd6a 	bl	800658c <__malloc_unlock>
 8005ab8:	e7a1      	b.n	80059fe <_malloc_r+0x22>
 8005aba:	6025      	str	r5, [r4, #0]
 8005abc:	e7de      	b.n	8005a7c <_malloc_r+0xa0>
 8005abe:	bf00      	nop
 8005ac0:	2400017c 	.word	0x2400017c

08005ac4 <__sfputc_r>:
 8005ac4:	6893      	ldr	r3, [r2, #8]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	b410      	push	{r4}
 8005acc:	6093      	str	r3, [r2, #8]
 8005ace:	da08      	bge.n	8005ae2 <__sfputc_r+0x1e>
 8005ad0:	6994      	ldr	r4, [r2, #24]
 8005ad2:	42a3      	cmp	r3, r4
 8005ad4:	db01      	blt.n	8005ada <__sfputc_r+0x16>
 8005ad6:	290a      	cmp	r1, #10
 8005ad8:	d103      	bne.n	8005ae2 <__sfputc_r+0x1e>
 8005ada:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ade:	f000 bb33 	b.w	8006148 <__swbuf_r>
 8005ae2:	6813      	ldr	r3, [r2, #0]
 8005ae4:	1c58      	adds	r0, r3, #1
 8005ae6:	6010      	str	r0, [r2, #0]
 8005ae8:	7019      	strb	r1, [r3, #0]
 8005aea:	4608      	mov	r0, r1
 8005aec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <__sfputs_r>:
 8005af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af4:	4606      	mov	r6, r0
 8005af6:	460f      	mov	r7, r1
 8005af8:	4614      	mov	r4, r2
 8005afa:	18d5      	adds	r5, r2, r3
 8005afc:	42ac      	cmp	r4, r5
 8005afe:	d101      	bne.n	8005b04 <__sfputs_r+0x12>
 8005b00:	2000      	movs	r0, #0
 8005b02:	e007      	b.n	8005b14 <__sfputs_r+0x22>
 8005b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b08:	463a      	mov	r2, r7
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	f7ff ffda 	bl	8005ac4 <__sfputc_r>
 8005b10:	1c43      	adds	r3, r0, #1
 8005b12:	d1f3      	bne.n	8005afc <__sfputs_r+0xa>
 8005b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b18 <_vfiprintf_r>:
 8005b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1c:	460d      	mov	r5, r1
 8005b1e:	b09d      	sub	sp, #116	; 0x74
 8005b20:	4614      	mov	r4, r2
 8005b22:	4698      	mov	r8, r3
 8005b24:	4606      	mov	r6, r0
 8005b26:	b118      	cbz	r0, 8005b30 <_vfiprintf_r+0x18>
 8005b28:	6983      	ldr	r3, [r0, #24]
 8005b2a:	b90b      	cbnz	r3, 8005b30 <_vfiprintf_r+0x18>
 8005b2c:	f7ff fe96 	bl	800585c <__sinit>
 8005b30:	4b89      	ldr	r3, [pc, #548]	; (8005d58 <_vfiprintf_r+0x240>)
 8005b32:	429d      	cmp	r5, r3
 8005b34:	d11b      	bne.n	8005b6e <_vfiprintf_r+0x56>
 8005b36:	6875      	ldr	r5, [r6, #4]
 8005b38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b3a:	07d9      	lsls	r1, r3, #31
 8005b3c:	d405      	bmi.n	8005b4a <_vfiprintf_r+0x32>
 8005b3e:	89ab      	ldrh	r3, [r5, #12]
 8005b40:	059a      	lsls	r2, r3, #22
 8005b42:	d402      	bmi.n	8005b4a <_vfiprintf_r+0x32>
 8005b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b46:	f7ff ff27 	bl	8005998 <__retarget_lock_acquire_recursive>
 8005b4a:	89ab      	ldrh	r3, [r5, #12]
 8005b4c:	071b      	lsls	r3, r3, #28
 8005b4e:	d501      	bpl.n	8005b54 <_vfiprintf_r+0x3c>
 8005b50:	692b      	ldr	r3, [r5, #16]
 8005b52:	b9eb      	cbnz	r3, 8005b90 <_vfiprintf_r+0x78>
 8005b54:	4629      	mov	r1, r5
 8005b56:	4630      	mov	r0, r6
 8005b58:	f000 fb5a 	bl	8006210 <__swsetup_r>
 8005b5c:	b1c0      	cbz	r0, 8005b90 <_vfiprintf_r+0x78>
 8005b5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b60:	07dc      	lsls	r4, r3, #31
 8005b62:	d50e      	bpl.n	8005b82 <_vfiprintf_r+0x6a>
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295
 8005b68:	b01d      	add	sp, #116	; 0x74
 8005b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b6e:	4b7b      	ldr	r3, [pc, #492]	; (8005d5c <_vfiprintf_r+0x244>)
 8005b70:	429d      	cmp	r5, r3
 8005b72:	d101      	bne.n	8005b78 <_vfiprintf_r+0x60>
 8005b74:	68b5      	ldr	r5, [r6, #8]
 8005b76:	e7df      	b.n	8005b38 <_vfiprintf_r+0x20>
 8005b78:	4b79      	ldr	r3, [pc, #484]	; (8005d60 <_vfiprintf_r+0x248>)
 8005b7a:	429d      	cmp	r5, r3
 8005b7c:	bf08      	it	eq
 8005b7e:	68f5      	ldreq	r5, [r6, #12]
 8005b80:	e7da      	b.n	8005b38 <_vfiprintf_r+0x20>
 8005b82:	89ab      	ldrh	r3, [r5, #12]
 8005b84:	0598      	lsls	r0, r3, #22
 8005b86:	d4ed      	bmi.n	8005b64 <_vfiprintf_r+0x4c>
 8005b88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b8a:	f7ff ff06 	bl	800599a <__retarget_lock_release_recursive>
 8005b8e:	e7e9      	b.n	8005b64 <_vfiprintf_r+0x4c>
 8005b90:	2300      	movs	r3, #0
 8005b92:	9309      	str	r3, [sp, #36]	; 0x24
 8005b94:	2320      	movs	r3, #32
 8005b96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b9e:	2330      	movs	r3, #48	; 0x30
 8005ba0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d64 <_vfiprintf_r+0x24c>
 8005ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ba8:	f04f 0901 	mov.w	r9, #1
 8005bac:	4623      	mov	r3, r4
 8005bae:	469a      	mov	sl, r3
 8005bb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bb4:	b10a      	cbz	r2, 8005bba <_vfiprintf_r+0xa2>
 8005bb6:	2a25      	cmp	r2, #37	; 0x25
 8005bb8:	d1f9      	bne.n	8005bae <_vfiprintf_r+0x96>
 8005bba:	ebba 0b04 	subs.w	fp, sl, r4
 8005bbe:	d00b      	beq.n	8005bd8 <_vfiprintf_r+0xc0>
 8005bc0:	465b      	mov	r3, fp
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	f7ff ff93 	bl	8005af2 <__sfputs_r>
 8005bcc:	3001      	adds	r0, #1
 8005bce:	f000 80aa 	beq.w	8005d26 <_vfiprintf_r+0x20e>
 8005bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bd4:	445a      	add	r2, fp
 8005bd6:	9209      	str	r2, [sp, #36]	; 0x24
 8005bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 80a2 	beq.w	8005d26 <_vfiprintf_r+0x20e>
 8005be2:	2300      	movs	r3, #0
 8005be4:	f04f 32ff 	mov.w	r2, #4294967295
 8005be8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bec:	f10a 0a01 	add.w	sl, sl, #1
 8005bf0:	9304      	str	r3, [sp, #16]
 8005bf2:	9307      	str	r3, [sp, #28]
 8005bf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bf8:	931a      	str	r3, [sp, #104]	; 0x68
 8005bfa:	4654      	mov	r4, sl
 8005bfc:	2205      	movs	r2, #5
 8005bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c02:	4858      	ldr	r0, [pc, #352]	; (8005d64 <_vfiprintf_r+0x24c>)
 8005c04:	f7fa fb6c 	bl	80002e0 <memchr>
 8005c08:	9a04      	ldr	r2, [sp, #16]
 8005c0a:	b9d8      	cbnz	r0, 8005c44 <_vfiprintf_r+0x12c>
 8005c0c:	06d1      	lsls	r1, r2, #27
 8005c0e:	bf44      	itt	mi
 8005c10:	2320      	movmi	r3, #32
 8005c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c16:	0713      	lsls	r3, r2, #28
 8005c18:	bf44      	itt	mi
 8005c1a:	232b      	movmi	r3, #43	; 0x2b
 8005c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c20:	f89a 3000 	ldrb.w	r3, [sl]
 8005c24:	2b2a      	cmp	r3, #42	; 0x2a
 8005c26:	d015      	beq.n	8005c54 <_vfiprintf_r+0x13c>
 8005c28:	9a07      	ldr	r2, [sp, #28]
 8005c2a:	4654      	mov	r4, sl
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	f04f 0c0a 	mov.w	ip, #10
 8005c32:	4621      	mov	r1, r4
 8005c34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c38:	3b30      	subs	r3, #48	; 0x30
 8005c3a:	2b09      	cmp	r3, #9
 8005c3c:	d94e      	bls.n	8005cdc <_vfiprintf_r+0x1c4>
 8005c3e:	b1b0      	cbz	r0, 8005c6e <_vfiprintf_r+0x156>
 8005c40:	9207      	str	r2, [sp, #28]
 8005c42:	e014      	b.n	8005c6e <_vfiprintf_r+0x156>
 8005c44:	eba0 0308 	sub.w	r3, r0, r8
 8005c48:	fa09 f303 	lsl.w	r3, r9, r3
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	9304      	str	r3, [sp, #16]
 8005c50:	46a2      	mov	sl, r4
 8005c52:	e7d2      	b.n	8005bfa <_vfiprintf_r+0xe2>
 8005c54:	9b03      	ldr	r3, [sp, #12]
 8005c56:	1d19      	adds	r1, r3, #4
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	9103      	str	r1, [sp, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bfbb      	ittet	lt
 8005c60:	425b      	neglt	r3, r3
 8005c62:	f042 0202 	orrlt.w	r2, r2, #2
 8005c66:	9307      	strge	r3, [sp, #28]
 8005c68:	9307      	strlt	r3, [sp, #28]
 8005c6a:	bfb8      	it	lt
 8005c6c:	9204      	strlt	r2, [sp, #16]
 8005c6e:	7823      	ldrb	r3, [r4, #0]
 8005c70:	2b2e      	cmp	r3, #46	; 0x2e
 8005c72:	d10c      	bne.n	8005c8e <_vfiprintf_r+0x176>
 8005c74:	7863      	ldrb	r3, [r4, #1]
 8005c76:	2b2a      	cmp	r3, #42	; 0x2a
 8005c78:	d135      	bne.n	8005ce6 <_vfiprintf_r+0x1ce>
 8005c7a:	9b03      	ldr	r3, [sp, #12]
 8005c7c:	1d1a      	adds	r2, r3, #4
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	9203      	str	r2, [sp, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	bfb8      	it	lt
 8005c86:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c8a:	3402      	adds	r4, #2
 8005c8c:	9305      	str	r3, [sp, #20]
 8005c8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d74 <_vfiprintf_r+0x25c>
 8005c92:	7821      	ldrb	r1, [r4, #0]
 8005c94:	2203      	movs	r2, #3
 8005c96:	4650      	mov	r0, sl
 8005c98:	f7fa fb22 	bl	80002e0 <memchr>
 8005c9c:	b140      	cbz	r0, 8005cb0 <_vfiprintf_r+0x198>
 8005c9e:	2340      	movs	r3, #64	; 0x40
 8005ca0:	eba0 000a 	sub.w	r0, r0, sl
 8005ca4:	fa03 f000 	lsl.w	r0, r3, r0
 8005ca8:	9b04      	ldr	r3, [sp, #16]
 8005caa:	4303      	orrs	r3, r0
 8005cac:	3401      	adds	r4, #1
 8005cae:	9304      	str	r3, [sp, #16]
 8005cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cb4:	482c      	ldr	r0, [pc, #176]	; (8005d68 <_vfiprintf_r+0x250>)
 8005cb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cba:	2206      	movs	r2, #6
 8005cbc:	f7fa fb10 	bl	80002e0 <memchr>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d03f      	beq.n	8005d44 <_vfiprintf_r+0x22c>
 8005cc4:	4b29      	ldr	r3, [pc, #164]	; (8005d6c <_vfiprintf_r+0x254>)
 8005cc6:	bb1b      	cbnz	r3, 8005d10 <_vfiprintf_r+0x1f8>
 8005cc8:	9b03      	ldr	r3, [sp, #12]
 8005cca:	3307      	adds	r3, #7
 8005ccc:	f023 0307 	bic.w	r3, r3, #7
 8005cd0:	3308      	adds	r3, #8
 8005cd2:	9303      	str	r3, [sp, #12]
 8005cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cd6:	443b      	add	r3, r7
 8005cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8005cda:	e767      	b.n	8005bac <_vfiprintf_r+0x94>
 8005cdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	2001      	movs	r0, #1
 8005ce4:	e7a5      	b.n	8005c32 <_vfiprintf_r+0x11a>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	3401      	adds	r4, #1
 8005cea:	9305      	str	r3, [sp, #20]
 8005cec:	4619      	mov	r1, r3
 8005cee:	f04f 0c0a 	mov.w	ip, #10
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cf8:	3a30      	subs	r2, #48	; 0x30
 8005cfa:	2a09      	cmp	r2, #9
 8005cfc:	d903      	bls.n	8005d06 <_vfiprintf_r+0x1ee>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0c5      	beq.n	8005c8e <_vfiprintf_r+0x176>
 8005d02:	9105      	str	r1, [sp, #20]
 8005d04:	e7c3      	b.n	8005c8e <_vfiprintf_r+0x176>
 8005d06:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e7f0      	b.n	8005cf2 <_vfiprintf_r+0x1da>
 8005d10:	ab03      	add	r3, sp, #12
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	462a      	mov	r2, r5
 8005d16:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <_vfiprintf_r+0x258>)
 8005d18:	a904      	add	r1, sp, #16
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f3af 8000 	nop.w
 8005d20:	4607      	mov	r7, r0
 8005d22:	1c78      	adds	r0, r7, #1
 8005d24:	d1d6      	bne.n	8005cd4 <_vfiprintf_r+0x1bc>
 8005d26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d28:	07d9      	lsls	r1, r3, #31
 8005d2a:	d405      	bmi.n	8005d38 <_vfiprintf_r+0x220>
 8005d2c:	89ab      	ldrh	r3, [r5, #12]
 8005d2e:	059a      	lsls	r2, r3, #22
 8005d30:	d402      	bmi.n	8005d38 <_vfiprintf_r+0x220>
 8005d32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d34:	f7ff fe31 	bl	800599a <__retarget_lock_release_recursive>
 8005d38:	89ab      	ldrh	r3, [r5, #12]
 8005d3a:	065b      	lsls	r3, r3, #25
 8005d3c:	f53f af12 	bmi.w	8005b64 <_vfiprintf_r+0x4c>
 8005d40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d42:	e711      	b.n	8005b68 <_vfiprintf_r+0x50>
 8005d44:	ab03      	add	r3, sp, #12
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	462a      	mov	r2, r5
 8005d4a:	4b09      	ldr	r3, [pc, #36]	; (8005d70 <_vfiprintf_r+0x258>)
 8005d4c:	a904      	add	r1, sp, #16
 8005d4e:	4630      	mov	r0, r6
 8005d50:	f000 f880 	bl	8005e54 <_printf_i>
 8005d54:	e7e4      	b.n	8005d20 <_vfiprintf_r+0x208>
 8005d56:	bf00      	nop
 8005d58:	08006714 	.word	0x08006714
 8005d5c:	08006734 	.word	0x08006734
 8005d60:	080066f4 	.word	0x080066f4
 8005d64:	08006754 	.word	0x08006754
 8005d68:	0800675e 	.word	0x0800675e
 8005d6c:	00000000 	.word	0x00000000
 8005d70:	08005af3 	.word	0x08005af3
 8005d74:	0800675a 	.word	0x0800675a

08005d78 <_printf_common>:
 8005d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d7c:	4616      	mov	r6, r2
 8005d7e:	4699      	mov	r9, r3
 8005d80:	688a      	ldr	r2, [r1, #8]
 8005d82:	690b      	ldr	r3, [r1, #16]
 8005d84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	bfb8      	it	lt
 8005d8c:	4613      	movlt	r3, r2
 8005d8e:	6033      	str	r3, [r6, #0]
 8005d90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d94:	4607      	mov	r7, r0
 8005d96:	460c      	mov	r4, r1
 8005d98:	b10a      	cbz	r2, 8005d9e <_printf_common+0x26>
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	6033      	str	r3, [r6, #0]
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	0699      	lsls	r1, r3, #26
 8005da2:	bf42      	ittt	mi
 8005da4:	6833      	ldrmi	r3, [r6, #0]
 8005da6:	3302      	addmi	r3, #2
 8005da8:	6033      	strmi	r3, [r6, #0]
 8005daa:	6825      	ldr	r5, [r4, #0]
 8005dac:	f015 0506 	ands.w	r5, r5, #6
 8005db0:	d106      	bne.n	8005dc0 <_printf_common+0x48>
 8005db2:	f104 0a19 	add.w	sl, r4, #25
 8005db6:	68e3      	ldr	r3, [r4, #12]
 8005db8:	6832      	ldr	r2, [r6, #0]
 8005dba:	1a9b      	subs	r3, r3, r2
 8005dbc:	42ab      	cmp	r3, r5
 8005dbe:	dc26      	bgt.n	8005e0e <_printf_common+0x96>
 8005dc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dc4:	1e13      	subs	r3, r2, #0
 8005dc6:	6822      	ldr	r2, [r4, #0]
 8005dc8:	bf18      	it	ne
 8005dca:	2301      	movne	r3, #1
 8005dcc:	0692      	lsls	r2, r2, #26
 8005dce:	d42b      	bmi.n	8005e28 <_printf_common+0xb0>
 8005dd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	47c0      	blx	r8
 8005dda:	3001      	adds	r0, #1
 8005ddc:	d01e      	beq.n	8005e1c <_printf_common+0xa4>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	68e5      	ldr	r5, [r4, #12]
 8005de2:	6832      	ldr	r2, [r6, #0]
 8005de4:	f003 0306 	and.w	r3, r3, #6
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	bf08      	it	eq
 8005dec:	1aad      	subeq	r5, r5, r2
 8005dee:	68a3      	ldr	r3, [r4, #8]
 8005df0:	6922      	ldr	r2, [r4, #16]
 8005df2:	bf0c      	ite	eq
 8005df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005df8:	2500      	movne	r5, #0
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	bfc4      	itt	gt
 8005dfe:	1a9b      	subgt	r3, r3, r2
 8005e00:	18ed      	addgt	r5, r5, r3
 8005e02:	2600      	movs	r6, #0
 8005e04:	341a      	adds	r4, #26
 8005e06:	42b5      	cmp	r5, r6
 8005e08:	d11a      	bne.n	8005e40 <_printf_common+0xc8>
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	e008      	b.n	8005e20 <_printf_common+0xa8>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	4652      	mov	r2, sl
 8005e12:	4649      	mov	r1, r9
 8005e14:	4638      	mov	r0, r7
 8005e16:	47c0      	blx	r8
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d103      	bne.n	8005e24 <_printf_common+0xac>
 8005e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e24:	3501      	adds	r5, #1
 8005e26:	e7c6      	b.n	8005db6 <_printf_common+0x3e>
 8005e28:	18e1      	adds	r1, r4, r3
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	2030      	movs	r0, #48	; 0x30
 8005e2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e32:	4422      	add	r2, r4
 8005e34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e3c:	3302      	adds	r3, #2
 8005e3e:	e7c7      	b.n	8005dd0 <_printf_common+0x58>
 8005e40:	2301      	movs	r3, #1
 8005e42:	4622      	mov	r2, r4
 8005e44:	4649      	mov	r1, r9
 8005e46:	4638      	mov	r0, r7
 8005e48:	47c0      	blx	r8
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	d0e6      	beq.n	8005e1c <_printf_common+0xa4>
 8005e4e:	3601      	adds	r6, #1
 8005e50:	e7d9      	b.n	8005e06 <_printf_common+0x8e>
	...

08005e54 <_printf_i>:
 8005e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e58:	7e0f      	ldrb	r7, [r1, #24]
 8005e5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e5c:	2f78      	cmp	r7, #120	; 0x78
 8005e5e:	4691      	mov	r9, r2
 8005e60:	4680      	mov	r8, r0
 8005e62:	460c      	mov	r4, r1
 8005e64:	469a      	mov	sl, r3
 8005e66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e6a:	d807      	bhi.n	8005e7c <_printf_i+0x28>
 8005e6c:	2f62      	cmp	r7, #98	; 0x62
 8005e6e:	d80a      	bhi.n	8005e86 <_printf_i+0x32>
 8005e70:	2f00      	cmp	r7, #0
 8005e72:	f000 80d8 	beq.w	8006026 <_printf_i+0x1d2>
 8005e76:	2f58      	cmp	r7, #88	; 0x58
 8005e78:	f000 80a3 	beq.w	8005fc2 <_printf_i+0x16e>
 8005e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e84:	e03a      	b.n	8005efc <_printf_i+0xa8>
 8005e86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e8a:	2b15      	cmp	r3, #21
 8005e8c:	d8f6      	bhi.n	8005e7c <_printf_i+0x28>
 8005e8e:	a101      	add	r1, pc, #4	; (adr r1, 8005e94 <_printf_i+0x40>)
 8005e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e94:	08005eed 	.word	0x08005eed
 8005e98:	08005f01 	.word	0x08005f01
 8005e9c:	08005e7d 	.word	0x08005e7d
 8005ea0:	08005e7d 	.word	0x08005e7d
 8005ea4:	08005e7d 	.word	0x08005e7d
 8005ea8:	08005e7d 	.word	0x08005e7d
 8005eac:	08005f01 	.word	0x08005f01
 8005eb0:	08005e7d 	.word	0x08005e7d
 8005eb4:	08005e7d 	.word	0x08005e7d
 8005eb8:	08005e7d 	.word	0x08005e7d
 8005ebc:	08005e7d 	.word	0x08005e7d
 8005ec0:	0800600d 	.word	0x0800600d
 8005ec4:	08005f31 	.word	0x08005f31
 8005ec8:	08005fef 	.word	0x08005fef
 8005ecc:	08005e7d 	.word	0x08005e7d
 8005ed0:	08005e7d 	.word	0x08005e7d
 8005ed4:	0800602f 	.word	0x0800602f
 8005ed8:	08005e7d 	.word	0x08005e7d
 8005edc:	08005f31 	.word	0x08005f31
 8005ee0:	08005e7d 	.word	0x08005e7d
 8005ee4:	08005e7d 	.word	0x08005e7d
 8005ee8:	08005ff7 	.word	0x08005ff7
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	1d1a      	adds	r2, r3, #4
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	602a      	str	r2, [r5, #0]
 8005ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005efc:	2301      	movs	r3, #1
 8005efe:	e0a3      	b.n	8006048 <_printf_i+0x1f4>
 8005f00:	6820      	ldr	r0, [r4, #0]
 8005f02:	6829      	ldr	r1, [r5, #0]
 8005f04:	0606      	lsls	r6, r0, #24
 8005f06:	f101 0304 	add.w	r3, r1, #4
 8005f0a:	d50a      	bpl.n	8005f22 <_printf_i+0xce>
 8005f0c:	680e      	ldr	r6, [r1, #0]
 8005f0e:	602b      	str	r3, [r5, #0]
 8005f10:	2e00      	cmp	r6, #0
 8005f12:	da03      	bge.n	8005f1c <_printf_i+0xc8>
 8005f14:	232d      	movs	r3, #45	; 0x2d
 8005f16:	4276      	negs	r6, r6
 8005f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f1c:	485e      	ldr	r0, [pc, #376]	; (8006098 <_printf_i+0x244>)
 8005f1e:	230a      	movs	r3, #10
 8005f20:	e019      	b.n	8005f56 <_printf_i+0x102>
 8005f22:	680e      	ldr	r6, [r1, #0]
 8005f24:	602b      	str	r3, [r5, #0]
 8005f26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f2a:	bf18      	it	ne
 8005f2c:	b236      	sxthne	r6, r6
 8005f2e:	e7ef      	b.n	8005f10 <_printf_i+0xbc>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	6820      	ldr	r0, [r4, #0]
 8005f34:	1d19      	adds	r1, r3, #4
 8005f36:	6029      	str	r1, [r5, #0]
 8005f38:	0601      	lsls	r1, r0, #24
 8005f3a:	d501      	bpl.n	8005f40 <_printf_i+0xec>
 8005f3c:	681e      	ldr	r6, [r3, #0]
 8005f3e:	e002      	b.n	8005f46 <_printf_i+0xf2>
 8005f40:	0646      	lsls	r6, r0, #25
 8005f42:	d5fb      	bpl.n	8005f3c <_printf_i+0xe8>
 8005f44:	881e      	ldrh	r6, [r3, #0]
 8005f46:	4854      	ldr	r0, [pc, #336]	; (8006098 <_printf_i+0x244>)
 8005f48:	2f6f      	cmp	r7, #111	; 0x6f
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2308      	moveq	r3, #8
 8005f4e:	230a      	movne	r3, #10
 8005f50:	2100      	movs	r1, #0
 8005f52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f56:	6865      	ldr	r5, [r4, #4]
 8005f58:	60a5      	str	r5, [r4, #8]
 8005f5a:	2d00      	cmp	r5, #0
 8005f5c:	bfa2      	ittt	ge
 8005f5e:	6821      	ldrge	r1, [r4, #0]
 8005f60:	f021 0104 	bicge.w	r1, r1, #4
 8005f64:	6021      	strge	r1, [r4, #0]
 8005f66:	b90e      	cbnz	r6, 8005f6c <_printf_i+0x118>
 8005f68:	2d00      	cmp	r5, #0
 8005f6a:	d04d      	beq.n	8006008 <_printf_i+0x1b4>
 8005f6c:	4615      	mov	r5, r2
 8005f6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f72:	fb03 6711 	mls	r7, r3, r1, r6
 8005f76:	5dc7      	ldrb	r7, [r0, r7]
 8005f78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f7c:	4637      	mov	r7, r6
 8005f7e:	42bb      	cmp	r3, r7
 8005f80:	460e      	mov	r6, r1
 8005f82:	d9f4      	bls.n	8005f6e <_printf_i+0x11a>
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d10b      	bne.n	8005fa0 <_printf_i+0x14c>
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	07de      	lsls	r6, r3, #31
 8005f8c:	d508      	bpl.n	8005fa0 <_printf_i+0x14c>
 8005f8e:	6923      	ldr	r3, [r4, #16]
 8005f90:	6861      	ldr	r1, [r4, #4]
 8005f92:	4299      	cmp	r1, r3
 8005f94:	bfde      	ittt	le
 8005f96:	2330      	movle	r3, #48	; 0x30
 8005f98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fa0:	1b52      	subs	r2, r2, r5
 8005fa2:	6122      	str	r2, [r4, #16]
 8005fa4:	f8cd a000 	str.w	sl, [sp]
 8005fa8:	464b      	mov	r3, r9
 8005faa:	aa03      	add	r2, sp, #12
 8005fac:	4621      	mov	r1, r4
 8005fae:	4640      	mov	r0, r8
 8005fb0:	f7ff fee2 	bl	8005d78 <_printf_common>
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d14c      	bne.n	8006052 <_printf_i+0x1fe>
 8005fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fbc:	b004      	add	sp, #16
 8005fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc2:	4835      	ldr	r0, [pc, #212]	; (8006098 <_printf_i+0x244>)
 8005fc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fc8:	6829      	ldr	r1, [r5, #0]
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fd0:	6029      	str	r1, [r5, #0]
 8005fd2:	061d      	lsls	r5, r3, #24
 8005fd4:	d514      	bpl.n	8006000 <_printf_i+0x1ac>
 8005fd6:	07df      	lsls	r7, r3, #31
 8005fd8:	bf44      	itt	mi
 8005fda:	f043 0320 	orrmi.w	r3, r3, #32
 8005fde:	6023      	strmi	r3, [r4, #0]
 8005fe0:	b91e      	cbnz	r6, 8005fea <_printf_i+0x196>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	f023 0320 	bic.w	r3, r3, #32
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	2310      	movs	r3, #16
 8005fec:	e7b0      	b.n	8005f50 <_printf_i+0xfc>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	f043 0320 	orr.w	r3, r3, #32
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	2378      	movs	r3, #120	; 0x78
 8005ff8:	4828      	ldr	r0, [pc, #160]	; (800609c <_printf_i+0x248>)
 8005ffa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ffe:	e7e3      	b.n	8005fc8 <_printf_i+0x174>
 8006000:	0659      	lsls	r1, r3, #25
 8006002:	bf48      	it	mi
 8006004:	b2b6      	uxthmi	r6, r6
 8006006:	e7e6      	b.n	8005fd6 <_printf_i+0x182>
 8006008:	4615      	mov	r5, r2
 800600a:	e7bb      	b.n	8005f84 <_printf_i+0x130>
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	6826      	ldr	r6, [r4, #0]
 8006010:	6961      	ldr	r1, [r4, #20]
 8006012:	1d18      	adds	r0, r3, #4
 8006014:	6028      	str	r0, [r5, #0]
 8006016:	0635      	lsls	r5, r6, #24
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	d501      	bpl.n	8006020 <_printf_i+0x1cc>
 800601c:	6019      	str	r1, [r3, #0]
 800601e:	e002      	b.n	8006026 <_printf_i+0x1d2>
 8006020:	0670      	lsls	r0, r6, #25
 8006022:	d5fb      	bpl.n	800601c <_printf_i+0x1c8>
 8006024:	8019      	strh	r1, [r3, #0]
 8006026:	2300      	movs	r3, #0
 8006028:	6123      	str	r3, [r4, #16]
 800602a:	4615      	mov	r5, r2
 800602c:	e7ba      	b.n	8005fa4 <_printf_i+0x150>
 800602e:	682b      	ldr	r3, [r5, #0]
 8006030:	1d1a      	adds	r2, r3, #4
 8006032:	602a      	str	r2, [r5, #0]
 8006034:	681d      	ldr	r5, [r3, #0]
 8006036:	6862      	ldr	r2, [r4, #4]
 8006038:	2100      	movs	r1, #0
 800603a:	4628      	mov	r0, r5
 800603c:	f7fa f950 	bl	80002e0 <memchr>
 8006040:	b108      	cbz	r0, 8006046 <_printf_i+0x1f2>
 8006042:	1b40      	subs	r0, r0, r5
 8006044:	6060      	str	r0, [r4, #4]
 8006046:	6863      	ldr	r3, [r4, #4]
 8006048:	6123      	str	r3, [r4, #16]
 800604a:	2300      	movs	r3, #0
 800604c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006050:	e7a8      	b.n	8005fa4 <_printf_i+0x150>
 8006052:	6923      	ldr	r3, [r4, #16]
 8006054:	462a      	mov	r2, r5
 8006056:	4649      	mov	r1, r9
 8006058:	4640      	mov	r0, r8
 800605a:	47d0      	blx	sl
 800605c:	3001      	adds	r0, #1
 800605e:	d0ab      	beq.n	8005fb8 <_printf_i+0x164>
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	079b      	lsls	r3, r3, #30
 8006064:	d413      	bmi.n	800608e <_printf_i+0x23a>
 8006066:	68e0      	ldr	r0, [r4, #12]
 8006068:	9b03      	ldr	r3, [sp, #12]
 800606a:	4298      	cmp	r0, r3
 800606c:	bfb8      	it	lt
 800606e:	4618      	movlt	r0, r3
 8006070:	e7a4      	b.n	8005fbc <_printf_i+0x168>
 8006072:	2301      	movs	r3, #1
 8006074:	4632      	mov	r2, r6
 8006076:	4649      	mov	r1, r9
 8006078:	4640      	mov	r0, r8
 800607a:	47d0      	blx	sl
 800607c:	3001      	adds	r0, #1
 800607e:	d09b      	beq.n	8005fb8 <_printf_i+0x164>
 8006080:	3501      	adds	r5, #1
 8006082:	68e3      	ldr	r3, [r4, #12]
 8006084:	9903      	ldr	r1, [sp, #12]
 8006086:	1a5b      	subs	r3, r3, r1
 8006088:	42ab      	cmp	r3, r5
 800608a:	dcf2      	bgt.n	8006072 <_printf_i+0x21e>
 800608c:	e7eb      	b.n	8006066 <_printf_i+0x212>
 800608e:	2500      	movs	r5, #0
 8006090:	f104 0619 	add.w	r6, r4, #25
 8006094:	e7f5      	b.n	8006082 <_printf_i+0x22e>
 8006096:	bf00      	nop
 8006098:	08006765 	.word	0x08006765
 800609c:	08006776 	.word	0x08006776

080060a0 <_sbrk_r>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	4d06      	ldr	r5, [pc, #24]	; (80060bc <_sbrk_r+0x1c>)
 80060a4:	2300      	movs	r3, #0
 80060a6:	4604      	mov	r4, r0
 80060a8:	4608      	mov	r0, r1
 80060aa:	602b      	str	r3, [r5, #0]
 80060ac:	f7fa febe 	bl	8000e2c <_sbrk>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d102      	bne.n	80060ba <_sbrk_r+0x1a>
 80060b4:	682b      	ldr	r3, [r5, #0]
 80060b6:	b103      	cbz	r3, 80060ba <_sbrk_r+0x1a>
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	bd38      	pop	{r3, r4, r5, pc}
 80060bc:	24000184 	.word	0x24000184

080060c0 <__sread>:
 80060c0:	b510      	push	{r4, lr}
 80060c2:	460c      	mov	r4, r1
 80060c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c8:	f000 fab2 	bl	8006630 <_read_r>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	bfab      	itete	ge
 80060d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060d2:	89a3      	ldrhlt	r3, [r4, #12]
 80060d4:	181b      	addge	r3, r3, r0
 80060d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060da:	bfac      	ite	ge
 80060dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80060de:	81a3      	strhlt	r3, [r4, #12]
 80060e0:	bd10      	pop	{r4, pc}

080060e2 <__swrite>:
 80060e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060e6:	461f      	mov	r7, r3
 80060e8:	898b      	ldrh	r3, [r1, #12]
 80060ea:	05db      	lsls	r3, r3, #23
 80060ec:	4605      	mov	r5, r0
 80060ee:	460c      	mov	r4, r1
 80060f0:	4616      	mov	r6, r2
 80060f2:	d505      	bpl.n	8006100 <__swrite+0x1e>
 80060f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f8:	2302      	movs	r3, #2
 80060fa:	2200      	movs	r2, #0
 80060fc:	f000 f9c8 	bl	8006490 <_lseek_r>
 8006100:	89a3      	ldrh	r3, [r4, #12]
 8006102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006106:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800610a:	81a3      	strh	r3, [r4, #12]
 800610c:	4632      	mov	r2, r6
 800610e:	463b      	mov	r3, r7
 8006110:	4628      	mov	r0, r5
 8006112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006116:	f000 b869 	b.w	80061ec <_write_r>

0800611a <__sseek>:
 800611a:	b510      	push	{r4, lr}
 800611c:	460c      	mov	r4, r1
 800611e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006122:	f000 f9b5 	bl	8006490 <_lseek_r>
 8006126:	1c43      	adds	r3, r0, #1
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	bf15      	itete	ne
 800612c:	6560      	strne	r0, [r4, #84]	; 0x54
 800612e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006132:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006136:	81a3      	strheq	r3, [r4, #12]
 8006138:	bf18      	it	ne
 800613a:	81a3      	strhne	r3, [r4, #12]
 800613c:	bd10      	pop	{r4, pc}

0800613e <__sclose>:
 800613e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006142:	f000 b8d3 	b.w	80062ec <_close_r>
	...

08006148 <__swbuf_r>:
 8006148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614a:	460e      	mov	r6, r1
 800614c:	4614      	mov	r4, r2
 800614e:	4605      	mov	r5, r0
 8006150:	b118      	cbz	r0, 800615a <__swbuf_r+0x12>
 8006152:	6983      	ldr	r3, [r0, #24]
 8006154:	b90b      	cbnz	r3, 800615a <__swbuf_r+0x12>
 8006156:	f7ff fb81 	bl	800585c <__sinit>
 800615a:	4b21      	ldr	r3, [pc, #132]	; (80061e0 <__swbuf_r+0x98>)
 800615c:	429c      	cmp	r4, r3
 800615e:	d12b      	bne.n	80061b8 <__swbuf_r+0x70>
 8006160:	686c      	ldr	r4, [r5, #4]
 8006162:	69a3      	ldr	r3, [r4, #24]
 8006164:	60a3      	str	r3, [r4, #8]
 8006166:	89a3      	ldrh	r3, [r4, #12]
 8006168:	071a      	lsls	r2, r3, #28
 800616a:	d52f      	bpl.n	80061cc <__swbuf_r+0x84>
 800616c:	6923      	ldr	r3, [r4, #16]
 800616e:	b36b      	cbz	r3, 80061cc <__swbuf_r+0x84>
 8006170:	6923      	ldr	r3, [r4, #16]
 8006172:	6820      	ldr	r0, [r4, #0]
 8006174:	1ac0      	subs	r0, r0, r3
 8006176:	6963      	ldr	r3, [r4, #20]
 8006178:	b2f6      	uxtb	r6, r6
 800617a:	4283      	cmp	r3, r0
 800617c:	4637      	mov	r7, r6
 800617e:	dc04      	bgt.n	800618a <__swbuf_r+0x42>
 8006180:	4621      	mov	r1, r4
 8006182:	4628      	mov	r0, r5
 8006184:	f000 f948 	bl	8006418 <_fflush_r>
 8006188:	bb30      	cbnz	r0, 80061d8 <__swbuf_r+0x90>
 800618a:	68a3      	ldr	r3, [r4, #8]
 800618c:	3b01      	subs	r3, #1
 800618e:	60a3      	str	r3, [r4, #8]
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	6022      	str	r2, [r4, #0]
 8006196:	701e      	strb	r6, [r3, #0]
 8006198:	6963      	ldr	r3, [r4, #20]
 800619a:	3001      	adds	r0, #1
 800619c:	4283      	cmp	r3, r0
 800619e:	d004      	beq.n	80061aa <__swbuf_r+0x62>
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	07db      	lsls	r3, r3, #31
 80061a4:	d506      	bpl.n	80061b4 <__swbuf_r+0x6c>
 80061a6:	2e0a      	cmp	r6, #10
 80061a8:	d104      	bne.n	80061b4 <__swbuf_r+0x6c>
 80061aa:	4621      	mov	r1, r4
 80061ac:	4628      	mov	r0, r5
 80061ae:	f000 f933 	bl	8006418 <_fflush_r>
 80061b2:	b988      	cbnz	r0, 80061d8 <__swbuf_r+0x90>
 80061b4:	4638      	mov	r0, r7
 80061b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <__swbuf_r+0x9c>)
 80061ba:	429c      	cmp	r4, r3
 80061bc:	d101      	bne.n	80061c2 <__swbuf_r+0x7a>
 80061be:	68ac      	ldr	r4, [r5, #8]
 80061c0:	e7cf      	b.n	8006162 <__swbuf_r+0x1a>
 80061c2:	4b09      	ldr	r3, [pc, #36]	; (80061e8 <__swbuf_r+0xa0>)
 80061c4:	429c      	cmp	r4, r3
 80061c6:	bf08      	it	eq
 80061c8:	68ec      	ldreq	r4, [r5, #12]
 80061ca:	e7ca      	b.n	8006162 <__swbuf_r+0x1a>
 80061cc:	4621      	mov	r1, r4
 80061ce:	4628      	mov	r0, r5
 80061d0:	f000 f81e 	bl	8006210 <__swsetup_r>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d0cb      	beq.n	8006170 <__swbuf_r+0x28>
 80061d8:	f04f 37ff 	mov.w	r7, #4294967295
 80061dc:	e7ea      	b.n	80061b4 <__swbuf_r+0x6c>
 80061de:	bf00      	nop
 80061e0:	08006714 	.word	0x08006714
 80061e4:	08006734 	.word	0x08006734
 80061e8:	080066f4 	.word	0x080066f4

080061ec <_write_r>:
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	4d07      	ldr	r5, [pc, #28]	; (800620c <_write_r+0x20>)
 80061f0:	4604      	mov	r4, r0
 80061f2:	4608      	mov	r0, r1
 80061f4:	4611      	mov	r1, r2
 80061f6:	2200      	movs	r2, #0
 80061f8:	602a      	str	r2, [r5, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	f7fa fdc5 	bl	8000d8a <_write>
 8006200:	1c43      	adds	r3, r0, #1
 8006202:	d102      	bne.n	800620a <_write_r+0x1e>
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	b103      	cbz	r3, 800620a <_write_r+0x1e>
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	bd38      	pop	{r3, r4, r5, pc}
 800620c:	24000184 	.word	0x24000184

08006210 <__swsetup_r>:
 8006210:	4b32      	ldr	r3, [pc, #200]	; (80062dc <__swsetup_r+0xcc>)
 8006212:	b570      	push	{r4, r5, r6, lr}
 8006214:	681d      	ldr	r5, [r3, #0]
 8006216:	4606      	mov	r6, r0
 8006218:	460c      	mov	r4, r1
 800621a:	b125      	cbz	r5, 8006226 <__swsetup_r+0x16>
 800621c:	69ab      	ldr	r3, [r5, #24]
 800621e:	b913      	cbnz	r3, 8006226 <__swsetup_r+0x16>
 8006220:	4628      	mov	r0, r5
 8006222:	f7ff fb1b 	bl	800585c <__sinit>
 8006226:	4b2e      	ldr	r3, [pc, #184]	; (80062e0 <__swsetup_r+0xd0>)
 8006228:	429c      	cmp	r4, r3
 800622a:	d10f      	bne.n	800624c <__swsetup_r+0x3c>
 800622c:	686c      	ldr	r4, [r5, #4]
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006234:	0719      	lsls	r1, r3, #28
 8006236:	d42c      	bmi.n	8006292 <__swsetup_r+0x82>
 8006238:	06dd      	lsls	r5, r3, #27
 800623a:	d411      	bmi.n	8006260 <__swsetup_r+0x50>
 800623c:	2309      	movs	r3, #9
 800623e:	6033      	str	r3, [r6, #0]
 8006240:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006244:	81a3      	strh	r3, [r4, #12]
 8006246:	f04f 30ff 	mov.w	r0, #4294967295
 800624a:	e03e      	b.n	80062ca <__swsetup_r+0xba>
 800624c:	4b25      	ldr	r3, [pc, #148]	; (80062e4 <__swsetup_r+0xd4>)
 800624e:	429c      	cmp	r4, r3
 8006250:	d101      	bne.n	8006256 <__swsetup_r+0x46>
 8006252:	68ac      	ldr	r4, [r5, #8]
 8006254:	e7eb      	b.n	800622e <__swsetup_r+0x1e>
 8006256:	4b24      	ldr	r3, [pc, #144]	; (80062e8 <__swsetup_r+0xd8>)
 8006258:	429c      	cmp	r4, r3
 800625a:	bf08      	it	eq
 800625c:	68ec      	ldreq	r4, [r5, #12]
 800625e:	e7e6      	b.n	800622e <__swsetup_r+0x1e>
 8006260:	0758      	lsls	r0, r3, #29
 8006262:	d512      	bpl.n	800628a <__swsetup_r+0x7a>
 8006264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006266:	b141      	cbz	r1, 800627a <__swsetup_r+0x6a>
 8006268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800626c:	4299      	cmp	r1, r3
 800626e:	d002      	beq.n	8006276 <__swsetup_r+0x66>
 8006270:	4630      	mov	r0, r6
 8006272:	f000 f991 	bl	8006598 <_free_r>
 8006276:	2300      	movs	r3, #0
 8006278:	6363      	str	r3, [r4, #52]	; 0x34
 800627a:	89a3      	ldrh	r3, [r4, #12]
 800627c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006280:	81a3      	strh	r3, [r4, #12]
 8006282:	2300      	movs	r3, #0
 8006284:	6063      	str	r3, [r4, #4]
 8006286:	6923      	ldr	r3, [r4, #16]
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	89a3      	ldrh	r3, [r4, #12]
 800628c:	f043 0308 	orr.w	r3, r3, #8
 8006290:	81a3      	strh	r3, [r4, #12]
 8006292:	6923      	ldr	r3, [r4, #16]
 8006294:	b94b      	cbnz	r3, 80062aa <__swsetup_r+0x9a>
 8006296:	89a3      	ldrh	r3, [r4, #12]
 8006298:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800629c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062a0:	d003      	beq.n	80062aa <__swsetup_r+0x9a>
 80062a2:	4621      	mov	r1, r4
 80062a4:	4630      	mov	r0, r6
 80062a6:	f000 f92b 	bl	8006500 <__smakebuf_r>
 80062aa:	89a0      	ldrh	r0, [r4, #12]
 80062ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062b0:	f010 0301 	ands.w	r3, r0, #1
 80062b4:	d00a      	beq.n	80062cc <__swsetup_r+0xbc>
 80062b6:	2300      	movs	r3, #0
 80062b8:	60a3      	str	r3, [r4, #8]
 80062ba:	6963      	ldr	r3, [r4, #20]
 80062bc:	425b      	negs	r3, r3
 80062be:	61a3      	str	r3, [r4, #24]
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	b943      	cbnz	r3, 80062d6 <__swsetup_r+0xc6>
 80062c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062c8:	d1ba      	bne.n	8006240 <__swsetup_r+0x30>
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
 80062cc:	0781      	lsls	r1, r0, #30
 80062ce:	bf58      	it	pl
 80062d0:	6963      	ldrpl	r3, [r4, #20]
 80062d2:	60a3      	str	r3, [r4, #8]
 80062d4:	e7f4      	b.n	80062c0 <__swsetup_r+0xb0>
 80062d6:	2000      	movs	r0, #0
 80062d8:	e7f7      	b.n	80062ca <__swsetup_r+0xba>
 80062da:	bf00      	nop
 80062dc:	24000010 	.word	0x24000010
 80062e0:	08006714 	.word	0x08006714
 80062e4:	08006734 	.word	0x08006734
 80062e8:	080066f4 	.word	0x080066f4

080062ec <_close_r>:
 80062ec:	b538      	push	{r3, r4, r5, lr}
 80062ee:	4d06      	ldr	r5, [pc, #24]	; (8006308 <_close_r+0x1c>)
 80062f0:	2300      	movs	r3, #0
 80062f2:	4604      	mov	r4, r0
 80062f4:	4608      	mov	r0, r1
 80062f6:	602b      	str	r3, [r5, #0]
 80062f8:	f7fa fd63 	bl	8000dc2 <_close>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d102      	bne.n	8006306 <_close_r+0x1a>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	b103      	cbz	r3, 8006306 <_close_r+0x1a>
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	bd38      	pop	{r3, r4, r5, pc}
 8006308:	24000184 	.word	0x24000184

0800630c <__sflush_r>:
 800630c:	898a      	ldrh	r2, [r1, #12]
 800630e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006312:	4605      	mov	r5, r0
 8006314:	0710      	lsls	r0, r2, #28
 8006316:	460c      	mov	r4, r1
 8006318:	d458      	bmi.n	80063cc <__sflush_r+0xc0>
 800631a:	684b      	ldr	r3, [r1, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	dc05      	bgt.n	800632c <__sflush_r+0x20>
 8006320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	dc02      	bgt.n	800632c <__sflush_r+0x20>
 8006326:	2000      	movs	r0, #0
 8006328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800632c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800632e:	2e00      	cmp	r6, #0
 8006330:	d0f9      	beq.n	8006326 <__sflush_r+0x1a>
 8006332:	2300      	movs	r3, #0
 8006334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006338:	682f      	ldr	r7, [r5, #0]
 800633a:	602b      	str	r3, [r5, #0]
 800633c:	d032      	beq.n	80063a4 <__sflush_r+0x98>
 800633e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006340:	89a3      	ldrh	r3, [r4, #12]
 8006342:	075a      	lsls	r2, r3, #29
 8006344:	d505      	bpl.n	8006352 <__sflush_r+0x46>
 8006346:	6863      	ldr	r3, [r4, #4]
 8006348:	1ac0      	subs	r0, r0, r3
 800634a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800634c:	b10b      	cbz	r3, 8006352 <__sflush_r+0x46>
 800634e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006350:	1ac0      	subs	r0, r0, r3
 8006352:	2300      	movs	r3, #0
 8006354:	4602      	mov	r2, r0
 8006356:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006358:	6a21      	ldr	r1, [r4, #32]
 800635a:	4628      	mov	r0, r5
 800635c:	47b0      	blx	r6
 800635e:	1c43      	adds	r3, r0, #1
 8006360:	89a3      	ldrh	r3, [r4, #12]
 8006362:	d106      	bne.n	8006372 <__sflush_r+0x66>
 8006364:	6829      	ldr	r1, [r5, #0]
 8006366:	291d      	cmp	r1, #29
 8006368:	d82c      	bhi.n	80063c4 <__sflush_r+0xb8>
 800636a:	4a2a      	ldr	r2, [pc, #168]	; (8006414 <__sflush_r+0x108>)
 800636c:	40ca      	lsrs	r2, r1
 800636e:	07d6      	lsls	r6, r2, #31
 8006370:	d528      	bpl.n	80063c4 <__sflush_r+0xb8>
 8006372:	2200      	movs	r2, #0
 8006374:	6062      	str	r2, [r4, #4]
 8006376:	04d9      	lsls	r1, r3, #19
 8006378:	6922      	ldr	r2, [r4, #16]
 800637a:	6022      	str	r2, [r4, #0]
 800637c:	d504      	bpl.n	8006388 <__sflush_r+0x7c>
 800637e:	1c42      	adds	r2, r0, #1
 8006380:	d101      	bne.n	8006386 <__sflush_r+0x7a>
 8006382:	682b      	ldr	r3, [r5, #0]
 8006384:	b903      	cbnz	r3, 8006388 <__sflush_r+0x7c>
 8006386:	6560      	str	r0, [r4, #84]	; 0x54
 8006388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800638a:	602f      	str	r7, [r5, #0]
 800638c:	2900      	cmp	r1, #0
 800638e:	d0ca      	beq.n	8006326 <__sflush_r+0x1a>
 8006390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006394:	4299      	cmp	r1, r3
 8006396:	d002      	beq.n	800639e <__sflush_r+0x92>
 8006398:	4628      	mov	r0, r5
 800639a:	f000 f8fd 	bl	8006598 <_free_r>
 800639e:	2000      	movs	r0, #0
 80063a0:	6360      	str	r0, [r4, #52]	; 0x34
 80063a2:	e7c1      	b.n	8006328 <__sflush_r+0x1c>
 80063a4:	6a21      	ldr	r1, [r4, #32]
 80063a6:	2301      	movs	r3, #1
 80063a8:	4628      	mov	r0, r5
 80063aa:	47b0      	blx	r6
 80063ac:	1c41      	adds	r1, r0, #1
 80063ae:	d1c7      	bne.n	8006340 <__sflush_r+0x34>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0c4      	beq.n	8006340 <__sflush_r+0x34>
 80063b6:	2b1d      	cmp	r3, #29
 80063b8:	d001      	beq.n	80063be <__sflush_r+0xb2>
 80063ba:	2b16      	cmp	r3, #22
 80063bc:	d101      	bne.n	80063c2 <__sflush_r+0xb6>
 80063be:	602f      	str	r7, [r5, #0]
 80063c0:	e7b1      	b.n	8006326 <__sflush_r+0x1a>
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063c8:	81a3      	strh	r3, [r4, #12]
 80063ca:	e7ad      	b.n	8006328 <__sflush_r+0x1c>
 80063cc:	690f      	ldr	r7, [r1, #16]
 80063ce:	2f00      	cmp	r7, #0
 80063d0:	d0a9      	beq.n	8006326 <__sflush_r+0x1a>
 80063d2:	0793      	lsls	r3, r2, #30
 80063d4:	680e      	ldr	r6, [r1, #0]
 80063d6:	bf08      	it	eq
 80063d8:	694b      	ldreq	r3, [r1, #20]
 80063da:	600f      	str	r7, [r1, #0]
 80063dc:	bf18      	it	ne
 80063de:	2300      	movne	r3, #0
 80063e0:	eba6 0807 	sub.w	r8, r6, r7
 80063e4:	608b      	str	r3, [r1, #8]
 80063e6:	f1b8 0f00 	cmp.w	r8, #0
 80063ea:	dd9c      	ble.n	8006326 <__sflush_r+0x1a>
 80063ec:	6a21      	ldr	r1, [r4, #32]
 80063ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063f0:	4643      	mov	r3, r8
 80063f2:	463a      	mov	r2, r7
 80063f4:	4628      	mov	r0, r5
 80063f6:	47b0      	blx	r6
 80063f8:	2800      	cmp	r0, #0
 80063fa:	dc06      	bgt.n	800640a <__sflush_r+0xfe>
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006402:	81a3      	strh	r3, [r4, #12]
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	e78e      	b.n	8006328 <__sflush_r+0x1c>
 800640a:	4407      	add	r7, r0
 800640c:	eba8 0800 	sub.w	r8, r8, r0
 8006410:	e7e9      	b.n	80063e6 <__sflush_r+0xda>
 8006412:	bf00      	nop
 8006414:	20400001 	.word	0x20400001

08006418 <_fflush_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	690b      	ldr	r3, [r1, #16]
 800641c:	4605      	mov	r5, r0
 800641e:	460c      	mov	r4, r1
 8006420:	b913      	cbnz	r3, 8006428 <_fflush_r+0x10>
 8006422:	2500      	movs	r5, #0
 8006424:	4628      	mov	r0, r5
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	b118      	cbz	r0, 8006432 <_fflush_r+0x1a>
 800642a:	6983      	ldr	r3, [r0, #24]
 800642c:	b90b      	cbnz	r3, 8006432 <_fflush_r+0x1a>
 800642e:	f7ff fa15 	bl	800585c <__sinit>
 8006432:	4b14      	ldr	r3, [pc, #80]	; (8006484 <_fflush_r+0x6c>)
 8006434:	429c      	cmp	r4, r3
 8006436:	d11b      	bne.n	8006470 <_fflush_r+0x58>
 8006438:	686c      	ldr	r4, [r5, #4]
 800643a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0ef      	beq.n	8006422 <_fflush_r+0xa>
 8006442:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006444:	07d0      	lsls	r0, r2, #31
 8006446:	d404      	bmi.n	8006452 <_fflush_r+0x3a>
 8006448:	0599      	lsls	r1, r3, #22
 800644a:	d402      	bmi.n	8006452 <_fflush_r+0x3a>
 800644c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800644e:	f7ff faa3 	bl	8005998 <__retarget_lock_acquire_recursive>
 8006452:	4628      	mov	r0, r5
 8006454:	4621      	mov	r1, r4
 8006456:	f7ff ff59 	bl	800630c <__sflush_r>
 800645a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800645c:	07da      	lsls	r2, r3, #31
 800645e:	4605      	mov	r5, r0
 8006460:	d4e0      	bmi.n	8006424 <_fflush_r+0xc>
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	059b      	lsls	r3, r3, #22
 8006466:	d4dd      	bmi.n	8006424 <_fflush_r+0xc>
 8006468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800646a:	f7ff fa96 	bl	800599a <__retarget_lock_release_recursive>
 800646e:	e7d9      	b.n	8006424 <_fflush_r+0xc>
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <_fflush_r+0x70>)
 8006472:	429c      	cmp	r4, r3
 8006474:	d101      	bne.n	800647a <_fflush_r+0x62>
 8006476:	68ac      	ldr	r4, [r5, #8]
 8006478:	e7df      	b.n	800643a <_fflush_r+0x22>
 800647a:	4b04      	ldr	r3, [pc, #16]	; (800648c <_fflush_r+0x74>)
 800647c:	429c      	cmp	r4, r3
 800647e:	bf08      	it	eq
 8006480:	68ec      	ldreq	r4, [r5, #12]
 8006482:	e7da      	b.n	800643a <_fflush_r+0x22>
 8006484:	08006714 	.word	0x08006714
 8006488:	08006734 	.word	0x08006734
 800648c:	080066f4 	.word	0x080066f4

08006490 <_lseek_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4d07      	ldr	r5, [pc, #28]	; (80064b0 <_lseek_r+0x20>)
 8006494:	4604      	mov	r4, r0
 8006496:	4608      	mov	r0, r1
 8006498:	4611      	mov	r1, r2
 800649a:	2200      	movs	r2, #0
 800649c:	602a      	str	r2, [r5, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	f7fa fcb6 	bl	8000e10 <_lseek>
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	d102      	bne.n	80064ae <_lseek_r+0x1e>
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	b103      	cbz	r3, 80064ae <_lseek_r+0x1e>
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	bd38      	pop	{r3, r4, r5, pc}
 80064b0:	24000184 	.word	0x24000184

080064b4 <__swhatbuf_r>:
 80064b4:	b570      	push	{r4, r5, r6, lr}
 80064b6:	460e      	mov	r6, r1
 80064b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064bc:	2900      	cmp	r1, #0
 80064be:	b096      	sub	sp, #88	; 0x58
 80064c0:	4614      	mov	r4, r2
 80064c2:	461d      	mov	r5, r3
 80064c4:	da08      	bge.n	80064d8 <__swhatbuf_r+0x24>
 80064c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	602a      	str	r2, [r5, #0]
 80064ce:	061a      	lsls	r2, r3, #24
 80064d0:	d410      	bmi.n	80064f4 <__swhatbuf_r+0x40>
 80064d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064d6:	e00e      	b.n	80064f6 <__swhatbuf_r+0x42>
 80064d8:	466a      	mov	r2, sp
 80064da:	f000 f8bb 	bl	8006654 <_fstat_r>
 80064de:	2800      	cmp	r0, #0
 80064e0:	dbf1      	blt.n	80064c6 <__swhatbuf_r+0x12>
 80064e2:	9a01      	ldr	r2, [sp, #4]
 80064e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064ec:	425a      	negs	r2, r3
 80064ee:	415a      	adcs	r2, r3
 80064f0:	602a      	str	r2, [r5, #0]
 80064f2:	e7ee      	b.n	80064d2 <__swhatbuf_r+0x1e>
 80064f4:	2340      	movs	r3, #64	; 0x40
 80064f6:	2000      	movs	r0, #0
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	b016      	add	sp, #88	; 0x58
 80064fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006500 <__smakebuf_r>:
 8006500:	898b      	ldrh	r3, [r1, #12]
 8006502:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006504:	079d      	lsls	r5, r3, #30
 8006506:	4606      	mov	r6, r0
 8006508:	460c      	mov	r4, r1
 800650a:	d507      	bpl.n	800651c <__smakebuf_r+0x1c>
 800650c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	6123      	str	r3, [r4, #16]
 8006514:	2301      	movs	r3, #1
 8006516:	6163      	str	r3, [r4, #20]
 8006518:	b002      	add	sp, #8
 800651a:	bd70      	pop	{r4, r5, r6, pc}
 800651c:	ab01      	add	r3, sp, #4
 800651e:	466a      	mov	r2, sp
 8006520:	f7ff ffc8 	bl	80064b4 <__swhatbuf_r>
 8006524:	9900      	ldr	r1, [sp, #0]
 8006526:	4605      	mov	r5, r0
 8006528:	4630      	mov	r0, r6
 800652a:	f7ff fa57 	bl	80059dc <_malloc_r>
 800652e:	b948      	cbnz	r0, 8006544 <__smakebuf_r+0x44>
 8006530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006534:	059a      	lsls	r2, r3, #22
 8006536:	d4ef      	bmi.n	8006518 <__smakebuf_r+0x18>
 8006538:	f023 0303 	bic.w	r3, r3, #3
 800653c:	f043 0302 	orr.w	r3, r3, #2
 8006540:	81a3      	strh	r3, [r4, #12]
 8006542:	e7e3      	b.n	800650c <__smakebuf_r+0xc>
 8006544:	4b0d      	ldr	r3, [pc, #52]	; (800657c <__smakebuf_r+0x7c>)
 8006546:	62b3      	str	r3, [r6, #40]	; 0x28
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	6020      	str	r0, [r4, #0]
 800654c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006550:	81a3      	strh	r3, [r4, #12]
 8006552:	9b00      	ldr	r3, [sp, #0]
 8006554:	6163      	str	r3, [r4, #20]
 8006556:	9b01      	ldr	r3, [sp, #4]
 8006558:	6120      	str	r0, [r4, #16]
 800655a:	b15b      	cbz	r3, 8006574 <__smakebuf_r+0x74>
 800655c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006560:	4630      	mov	r0, r6
 8006562:	f000 f889 	bl	8006678 <_isatty_r>
 8006566:	b128      	cbz	r0, 8006574 <__smakebuf_r+0x74>
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	f023 0303 	bic.w	r3, r3, #3
 800656e:	f043 0301 	orr.w	r3, r3, #1
 8006572:	81a3      	strh	r3, [r4, #12]
 8006574:	89a0      	ldrh	r0, [r4, #12]
 8006576:	4305      	orrs	r5, r0
 8006578:	81a5      	strh	r5, [r4, #12]
 800657a:	e7cd      	b.n	8006518 <__smakebuf_r+0x18>
 800657c:	080057f5 	.word	0x080057f5

08006580 <__malloc_lock>:
 8006580:	4801      	ldr	r0, [pc, #4]	; (8006588 <__malloc_lock+0x8>)
 8006582:	f7ff ba09 	b.w	8005998 <__retarget_lock_acquire_recursive>
 8006586:	bf00      	nop
 8006588:	24000178 	.word	0x24000178

0800658c <__malloc_unlock>:
 800658c:	4801      	ldr	r0, [pc, #4]	; (8006594 <__malloc_unlock+0x8>)
 800658e:	f7ff ba04 	b.w	800599a <__retarget_lock_release_recursive>
 8006592:	bf00      	nop
 8006594:	24000178 	.word	0x24000178

08006598 <_free_r>:
 8006598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800659a:	2900      	cmp	r1, #0
 800659c:	d044      	beq.n	8006628 <_free_r+0x90>
 800659e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065a2:	9001      	str	r0, [sp, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f1a1 0404 	sub.w	r4, r1, #4
 80065aa:	bfb8      	it	lt
 80065ac:	18e4      	addlt	r4, r4, r3
 80065ae:	f7ff ffe7 	bl	8006580 <__malloc_lock>
 80065b2:	4a1e      	ldr	r2, [pc, #120]	; (800662c <_free_r+0x94>)
 80065b4:	9801      	ldr	r0, [sp, #4]
 80065b6:	6813      	ldr	r3, [r2, #0]
 80065b8:	b933      	cbnz	r3, 80065c8 <_free_r+0x30>
 80065ba:	6063      	str	r3, [r4, #4]
 80065bc:	6014      	str	r4, [r2, #0]
 80065be:	b003      	add	sp, #12
 80065c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065c4:	f7ff bfe2 	b.w	800658c <__malloc_unlock>
 80065c8:	42a3      	cmp	r3, r4
 80065ca:	d908      	bls.n	80065de <_free_r+0x46>
 80065cc:	6825      	ldr	r5, [r4, #0]
 80065ce:	1961      	adds	r1, r4, r5
 80065d0:	428b      	cmp	r3, r1
 80065d2:	bf01      	itttt	eq
 80065d4:	6819      	ldreq	r1, [r3, #0]
 80065d6:	685b      	ldreq	r3, [r3, #4]
 80065d8:	1949      	addeq	r1, r1, r5
 80065da:	6021      	streq	r1, [r4, #0]
 80065dc:	e7ed      	b.n	80065ba <_free_r+0x22>
 80065de:	461a      	mov	r2, r3
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	b10b      	cbz	r3, 80065e8 <_free_r+0x50>
 80065e4:	42a3      	cmp	r3, r4
 80065e6:	d9fa      	bls.n	80065de <_free_r+0x46>
 80065e8:	6811      	ldr	r1, [r2, #0]
 80065ea:	1855      	adds	r5, r2, r1
 80065ec:	42a5      	cmp	r5, r4
 80065ee:	d10b      	bne.n	8006608 <_free_r+0x70>
 80065f0:	6824      	ldr	r4, [r4, #0]
 80065f2:	4421      	add	r1, r4
 80065f4:	1854      	adds	r4, r2, r1
 80065f6:	42a3      	cmp	r3, r4
 80065f8:	6011      	str	r1, [r2, #0]
 80065fa:	d1e0      	bne.n	80065be <_free_r+0x26>
 80065fc:	681c      	ldr	r4, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	6053      	str	r3, [r2, #4]
 8006602:	4421      	add	r1, r4
 8006604:	6011      	str	r1, [r2, #0]
 8006606:	e7da      	b.n	80065be <_free_r+0x26>
 8006608:	d902      	bls.n	8006610 <_free_r+0x78>
 800660a:	230c      	movs	r3, #12
 800660c:	6003      	str	r3, [r0, #0]
 800660e:	e7d6      	b.n	80065be <_free_r+0x26>
 8006610:	6825      	ldr	r5, [r4, #0]
 8006612:	1961      	adds	r1, r4, r5
 8006614:	428b      	cmp	r3, r1
 8006616:	bf04      	itt	eq
 8006618:	6819      	ldreq	r1, [r3, #0]
 800661a:	685b      	ldreq	r3, [r3, #4]
 800661c:	6063      	str	r3, [r4, #4]
 800661e:	bf04      	itt	eq
 8006620:	1949      	addeq	r1, r1, r5
 8006622:	6021      	streq	r1, [r4, #0]
 8006624:	6054      	str	r4, [r2, #4]
 8006626:	e7ca      	b.n	80065be <_free_r+0x26>
 8006628:	b003      	add	sp, #12
 800662a:	bd30      	pop	{r4, r5, pc}
 800662c:	2400017c 	.word	0x2400017c

08006630 <_read_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4d07      	ldr	r5, [pc, #28]	; (8006650 <_read_r+0x20>)
 8006634:	4604      	mov	r4, r0
 8006636:	4608      	mov	r0, r1
 8006638:	4611      	mov	r1, r2
 800663a:	2200      	movs	r2, #0
 800663c:	602a      	str	r2, [r5, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	f7fa fb86 	bl	8000d50 <_read>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_read_r+0x1e>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	b103      	cbz	r3, 800664e <_read_r+0x1e>
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	24000184 	.word	0x24000184

08006654 <_fstat_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4d07      	ldr	r5, [pc, #28]	; (8006674 <_fstat_r+0x20>)
 8006658:	2300      	movs	r3, #0
 800665a:	4604      	mov	r4, r0
 800665c:	4608      	mov	r0, r1
 800665e:	4611      	mov	r1, r2
 8006660:	602b      	str	r3, [r5, #0]
 8006662:	f7fa fbba 	bl	8000dda <_fstat>
 8006666:	1c43      	adds	r3, r0, #1
 8006668:	d102      	bne.n	8006670 <_fstat_r+0x1c>
 800666a:	682b      	ldr	r3, [r5, #0]
 800666c:	b103      	cbz	r3, 8006670 <_fstat_r+0x1c>
 800666e:	6023      	str	r3, [r4, #0]
 8006670:	bd38      	pop	{r3, r4, r5, pc}
 8006672:	bf00      	nop
 8006674:	24000184 	.word	0x24000184

08006678 <_isatty_r>:
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	4d06      	ldr	r5, [pc, #24]	; (8006694 <_isatty_r+0x1c>)
 800667c:	2300      	movs	r3, #0
 800667e:	4604      	mov	r4, r0
 8006680:	4608      	mov	r0, r1
 8006682:	602b      	str	r3, [r5, #0]
 8006684:	f7fa fbb9 	bl	8000dfa <_isatty>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d102      	bne.n	8006692 <_isatty_r+0x1a>
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	b103      	cbz	r3, 8006692 <_isatty_r+0x1a>
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	24000184 	.word	0x24000184

08006698 <_init>:
 8006698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669a:	bf00      	nop
 800669c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669e:	bc08      	pop	{r3}
 80066a0:	469e      	mov	lr, r3
 80066a2:	4770      	bx	lr

080066a4 <_fini>:
 80066a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a6:	bf00      	nop
 80066a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066aa:	bc08      	pop	{r3}
 80066ac:	469e      	mov	lr, r3
 80066ae:	4770      	bx	lr
