
stm32_h7_canbase_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063a8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006640  08006640  00016640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006768  08006768  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006768  08006768  00016768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006770  08006770  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006770  08006770  00016770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006774  08006774  00016774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08006778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  24000074  080067ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400021c  080067ec  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151b2  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e7  00000000  00000000  00035254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00037640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00038560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ad04  00000000  00000000  00039398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012850  00000000  00000000  0007409c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00183d43  00000000  00000000  000868ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020a62f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004650  00000000  00000000  0020a680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000074 	.word	0x24000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006628 	.word	0x08006628

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000078 	.word	0x24000078
 80002d4:	08006628 	.word	0x08006628

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b4c      	ldr	r3, [pc, #304]	; (8000848 <main+0x140>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	627a      	str	r2, [r7, #36]	; 0x24
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 fa9f 	bl	8000c74 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fc93 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f899 	bl	8000870 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */

__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b42      	ldr	r3, [pc, #264]	; (8000848 <main+0x140>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a40      	ldr	r2, [pc, #256]	; (8000848 <main+0x140>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b3e      	ldr	r3, [pc, #248]	; (8000848 <main+0x140>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f001 fd75 	bl	800224c <HAL_HSEM_FastTake>

HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f001 fd8b 	bl	8002280 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b35      	ldr	r3, [pc, #212]	; (8000848 <main+0x140>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	627a      	str	r2, [r7, #36]	; 0x24
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 fa71 	bl	8000c74 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f9ed 	bl	8000b70 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f99f 	bl	8000ad8 <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 800079a:	f000 f8e5 	bl	8000968 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t TxData[] = {0x01,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0xFF};
 800079e:	4a2b      	ldr	r2, [pc, #172]	; (800084c <main+0x144>)
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a8:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t TxData2[] = {0x00,0x01,0xFF,0xFF,0xFF,0x01,0xFF,0xFF};
 80007ac:	4a28      	ldr	r2, [pc, #160]	; (8000850 <main+0x148>)
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007b6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t TxData3[] = {0xFF,0xFF,0xFF,0x00,0x22,0xFF,0xFF,0xFF};
 80007ba:	4a26      	ldr	r2, [pc, #152]	; (8000854 <main+0x14c>)
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007c4:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t TxData4[] = {0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF};
 80007c8:	4a23      	ldr	r2, [pc, #140]	; (8000858 <main+0x150>)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007d0:	e883 0003 	stmia.w	r3, {r0, r1}

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
     printf("Hello World\r\n");
 80007d4:	4821      	ldr	r0, [pc, #132]	; (800085c <main+0x154>)
 80007d6:	f005 fa97 	bl	8005d08 <puts>
//     	printf(" [%X] ", ((unsigned int)RxHeader.DataLength & 0x000F0000) >> 16 );
//     	printf(" %02X %02X %02X %02X %02X %02X %02X %02X",RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
//     	HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
//     	HAL_Delay(100); /AAO-/

      	TxHeader.Identifier = 0x00FF14A3;
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <main+0x158>)
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <main+0x15c>)
 80007de:	601a      	str	r2, [r3, #0]
      	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	461a      	mov	r2, r3
 80007e6:	491e      	ldr	r1, [pc, #120]	; (8000860 <main+0x158>)
 80007e8:	481f      	ldr	r0, [pc, #124]	; (8000868 <main+0x160>)
 80007ea:	f001 f88b 	bl	8001904 <HAL_FDCAN_AddMessageToTxFifoQ>
      	HAL_Delay(100);
 80007ee:	2064      	movs	r0, #100	; 0x64
 80007f0:	f000 fcc8 	bl	8001184 <HAL_Delay>
      	TxHeader.Identifier = 0x00F004A3;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <main+0x158>)
 80007f6:	4a1d      	ldr	r2, [pc, #116]	; (800086c <main+0x164>)
 80007f8:	601a      	str	r2, [r3, #0]
      	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData3);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	461a      	mov	r2, r3
 8000800:	4917      	ldr	r1, [pc, #92]	; (8000860 <main+0x158>)
 8000802:	4819      	ldr	r0, [pc, #100]	; (8000868 <main+0x160>)
 8000804:	f001 f87e 	bl	8001904 <HAL_FDCAN_AddMessageToTxFifoQ>
      	HAL_Delay(400);
 8000808:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800080c:	f000 fcba 	bl	8001184 <HAL_Delay>
     	TxHeader.Identifier = 0x00FF14A3;
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <main+0x158>)
 8000812:	4a14      	ldr	r2, [pc, #80]	; (8000864 <main+0x15c>)
 8000814:	601a      	str	r2, [r3, #0]
     	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData2);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	461a      	mov	r2, r3
 800081c:	4910      	ldr	r1, [pc, #64]	; (8000860 <main+0x158>)
 800081e:	4812      	ldr	r0, [pc, #72]	; (8000868 <main+0x160>)
 8000820:	f001 f870 	bl	8001904 <HAL_FDCAN_AddMessageToTxFifoQ>
     	HAL_Delay(100);
 8000824:	2064      	movs	r0, #100	; 0x64
 8000826:	f000 fcad 	bl	8001184 <HAL_Delay>
     	TxHeader.Identifier = 0x00F004A3;
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <main+0x158>)
 800082c:	4a0f      	ldr	r2, [pc, #60]	; (800086c <main+0x164>)
 800082e:	601a      	str	r2, [r3, #0]
     	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData4);
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	461a      	mov	r2, r3
 8000834:	490a      	ldr	r1, [pc, #40]	; (8000860 <main+0x158>)
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <main+0x160>)
 8000838:	f001 f864 	bl	8001904 <HAL_FDCAN_AddMessageToTxFifoQ>
     	HAL_Delay(400);
 800083c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000840:	f000 fca0 	bl	8001184 <HAL_Delay>
      	TxHeader.Identifier = 0x00FF14A3;
 8000844:	e7c9      	b.n	80007da <main+0xd2>
 8000846:	bf00      	nop
 8000848:	58024400 	.word	0x58024400
 800084c:	08006650 	.word	0x08006650
 8000850:	08006658 	.word	0x08006658
 8000854:	08006660 	.word	0x08006660
 8000858:	08006668 	.word	0x08006668
 800085c:	08006640 	.word	0x08006640
 8000860:	240001e0 	.word	0x240001e0
 8000864:	00ff14a3 	.word	0x00ff14a3
 8000868:	24000090 	.word	0x24000090
 800086c:	00f004a3 	.word	0x00f004a3

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b09c      	sub	sp, #112	; 0x70
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087a:	224c      	movs	r2, #76	; 0x4c
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f005 f9cc 	bl	8005c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2220      	movs	r2, #32
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f005 f9c6 	bl	8005c1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000890:	2004      	movs	r0, #4
 8000892:	f001 fd09 	bl	80022a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b31      	ldr	r3, [pc, #196]	; (8000960 <SystemClock_Config+0xf0>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a30      	ldr	r2, [pc, #192]	; (8000960 <SystemClock_Config+0xf0>)
 80008a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <SystemClock_Config+0xf0>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <SystemClock_Config+0xf4>)
 80008b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b4:	4a2b      	ldr	r2, [pc, #172]	; (8000964 <SystemClock_Config+0xf4>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008bc:	4b29      	ldr	r3, [pc, #164]	; (8000964 <SystemClock_Config+0xf4>)
 80008be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c8:	bf00      	nop
 80008ca:	4b25      	ldr	r3, [pc, #148]	; (8000960 <SystemClock_Config+0xf0>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008d6:	d1f8      	bne.n	80008ca <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d8:	2302      	movs	r3, #2
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008dc:	2301      	movs	r3, #1
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e0:	2340      	movs	r3, #64	; 0x40
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e4:	2302      	movs	r3, #2
 80008e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e8:	2300      	movs	r3, #0
 80008ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008ec:	2304      	movs	r3, #4
 80008ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80008f0:	233c      	movs	r3, #60	; 0x3c
 80008f2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 80008f8:	2318      	movs	r3, #24
 80008fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000900:	230c      	movs	r3, #12
 8000902:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000904:	2300      	movs	r3, #0
 8000906:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	4618      	mov	r0, r3
 8000912:	f001 fd23 	bl	800235c <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800091c:	f000 f9aa 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	233f      	movs	r3, #63	; 0x3f
 8000922:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000924:	2303      	movs	r3, #3
 8000926:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800092c:	2308      	movs	r3, #8
 800092e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000934:	2340      	movs	r3, #64	; 0x40
 8000936:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800093e:	2340      	movs	r3, #64	; 0x40
 8000940:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2104      	movs	r1, #4
 8000946:	4618      	mov	r0, r3
 8000948:	f002 f936 	bl	8002bb8 <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000952:	f000 f98f 	bl	8000c74 <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3770      	adds	r7, #112	; 0x70
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	58024800 	.word	0x58024800
 8000964:	58000400 	.word	0x58000400

08000968 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800096e:	4b55      	ldr	r3, [pc, #340]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 8000970:	4a55      	ldr	r2, [pc, #340]	; (8000ac8 <MX_FDCAN1_Init+0x160>)
 8000972:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000974:	4b53      	ldr	r3, [pc, #332]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800097a:	4b52      	ldr	r3, [pc, #328]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000980:	4b50      	ldr	r3, [pc, #320]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 8000982:	2200      	movs	r2, #0
 8000984:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000986:	4b4f      	ldr	r3, [pc, #316]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 8000988:	2200      	movs	r2, #0
 800098a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 800098c:	4b4d      	ldr	r3, [pc, #308]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 800098e:	2201      	movs	r2, #1
 8000990:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000992:	4b4c      	ldr	r3, [pc, #304]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 8000994:	2202      	movs	r2, #2
 8000996:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000998:	4b4a      	ldr	r3, [pc, #296]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 800099a:	2208      	movs	r2, #8
 800099c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x3F;
 800099e:	4b49      	ldr	r3, [pc, #292]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 80009a0:	223f      	movs	r2, #63	; 0x3f
 80009a2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 80009a4:	4b47      	ldr	r3, [pc, #284]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 80009a6:	2210      	movs	r2, #16
 80009a8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80009aa:	4b46      	ldr	r3, [pc, #280]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009b0:	4b44      	ldr	r3, [pc, #272]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80009b6:	4b43      	ldr	r3, [pc, #268]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80009bc:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 80009be:	2201      	movs	r2, #1
 80009c0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80009c2:	4b40      	ldr	r3, [pc, #256]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80009c8:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009ce:	4b3d      	ldr	r3, [pc, #244]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80009d4:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80009da:	4b3a      	ldr	r3, [pc, #232]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 80009dc:	2204      	movs	r2, #4
 80009de:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80009e0:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80009e6:	4b37      	ldr	r3, [pc, #220]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 80009e8:	2204      	movs	r2, #4
 80009ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80009ec:	4b35      	ldr	r3, [pc, #212]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009f2:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 80009f4:	2204      	movs	r2, #4
 80009f6:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80009f8:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80009fe:	4b31      	ldr	r3, [pc, #196]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000a04:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a10:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 8000a12:	2204      	movs	r2, #4
 8000a14:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a16:	482b      	ldr	r0, [pc, #172]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 8000a18:	f000 fcc8 	bl	80013ac <HAL_FDCAN_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000a22:	f000 f927 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

   /* Configure Rx filter */
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000a26:	4b29      	ldr	r3, [pc, #164]	; (8000acc <MX_FDCAN1_Init+0x164>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8000a2c:	4b27      	ldr	r3, [pc, #156]	; (8000acc <MX_FDCAN1_Init+0x164>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000a32:	4b26      	ldr	r3, [pc, #152]	; (8000acc <MX_FDCAN1_Init+0x164>)
 8000a34:	2202      	movs	r2, #2
 8000a36:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <MX_FDCAN1_Init+0x164>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	60da      	str	r2, [r3, #12]
//    sFilterConfig.FilterID1 = 0x321;
//    sFilterConfig.FilterID2 = 0x7FF;
    sFilterConfig.FilterID1 = 0x610; //Testing
 8000a3e:	4b23      	ldr	r3, [pc, #140]	; (8000acc <MX_FDCAN1_Init+0x164>)
 8000a40:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8000a44:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterID2 = 0xFFF;
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <MX_FDCAN1_Init+0x164>)
 8000a48:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000a4c:	615a      	str	r2, [r3, #20]

    /* Configure global filter to reject all non-matching frames */
    HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8000a4e:	2301      	movs	r3, #1
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2301      	movs	r3, #1
 8000a54:	2202      	movs	r2, #2
 8000a56:	2102      	movs	r1, #2
 8000a58:	481a      	ldr	r0, [pc, #104]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 8000a5a:	f000 fefb 	bl	8001854 <HAL_FDCAN_ConfigGlobalFilter>

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000a5e:	491b      	ldr	r1, [pc, #108]	; (8000acc <MX_FDCAN1_Init+0x164>)
 8000a60:	4818      	ldr	r0, [pc, #96]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 8000a62:	f000 fe81 	bl	8001768 <HAL_FDCAN_ConfigFilter>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_FDCAN1_Init+0x108>
      {
         /* Filter configuration Error */
         Error_Handler();
 8000a6c:	f000 f902 	bl	8000c74 <Error_Handler>
      }
     /* Start the FDCAN module */
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000a70:	4814      	ldr	r0, [pc, #80]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 8000a72:	f000 ff1c 	bl	80018ae <HAL_FDCAN_Start>
      }
         /* Start Error */
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000a76:	2200      	movs	r2, #0
 8000a78:	2101      	movs	r1, #1
 8000a7a:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <MX_FDCAN1_Init+0x15c>)
 8000a7c:	f000 ff9e 	bl	80019bc <HAL_FDCAN_ActivateNotification>
      }
         /* Notification Error */

     /* Configure Tx buffer message */
    TxHeader.Identifier = 0x00FF14A3;
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_FDCAN1_Init+0x168>)
 8000a82:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <MX_FDCAN1_Init+0x16c>)
 8000a84:	601a      	str	r2, [r3, #0]
//    TxHeader.IdType = FDCAN_STANDARD_ID;
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_FDCAN1_Init+0x168>)
 8000a88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a8c:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <MX_FDCAN1_Init+0x168>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
//    TxHeader.DataLength = FDCAN_DLC_BYTES_12;
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_FDCAN1_Init+0x168>)
 8000a96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a9a:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_FDCAN1_Init+0x168>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_FDCAN1_Init+0x168>)
 8000aa4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000aa8:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_FDCAN1_Init+0x168>)
 8000aac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ab0:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <MX_FDCAN1_Init+0x168>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0x00;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <MX_FDCAN1_Init+0x168>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	24000090 	.word	0x24000090
 8000ac8:	4000a000 	.word	0x4000a000
 8000acc:	240001c0 	.word	0x240001c0
 8000ad0:	240001e0 	.word	0x240001e0
 8000ad4:	00ff14a3 	.word	0x00ff14a3

08000ad8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000adc:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <MX_USART3_UART_Init+0x90>)
 8000ade:	4a23      	ldr	r2, [pc, #140]	; (8000b6c <MX_USART3_UART_Init+0x94>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <MX_USART3_UART_Init+0x90>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_USART3_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MX_USART3_UART_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_USART3_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_USART3_UART_Init+0x90>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b20:	4811      	ldr	r0, [pc, #68]	; (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b22:	f003 ff3d 	bl	80049a0 <HAL_UART_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b2c:	f000 f8a2 	bl	8000c74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b34:	f004 ff70 	bl	8005a18 <HAL_UARTEx_SetTxFifoThreshold>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b3e:	f000 f899 	bl	8000c74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b42:	2100      	movs	r1, #0
 8000b44:	4808      	ldr	r0, [pc, #32]	; (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b46:	f004 ffa5 	bl	8005a94 <HAL_UARTEx_SetRxFifoThreshold>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b50:	f000 f890 	bl	8000c74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_USART3_UART_Init+0x90>)
 8000b56:	f004 ff26 	bl	80059a6 <HAL_UARTEx_DisableFifoMode>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b60:	f000 f888 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	24000130 	.word	0x24000130
 8000b6c:	40004800 	.word	0x40004800

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	4b38      	ldr	r3, [pc, #224]	; (8000c68 <MX_GPIO_Init+0xf8>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	4a36      	ldr	r2, [pc, #216]	; (8000c68 <MX_GPIO_Init+0xf8>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b96:	4b34      	ldr	r3, [pc, #208]	; (8000c68 <MX_GPIO_Init+0xf8>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba4:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <MX_GPIO_Init+0xf8>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000baa:	4a2f      	ldr	r2, [pc, #188]	; (8000c68 <MX_GPIO_Init+0xf8>)
 8000bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb4:	4b2c      	ldr	r3, [pc, #176]	; (8000c68 <MX_GPIO_Init+0xf8>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <MX_GPIO_Init+0xf8>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a27      	ldr	r2, [pc, #156]	; (8000c68 <MX_GPIO_Init+0xf8>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <MX_GPIO_Init+0xf8>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be0:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <MX_GPIO_Init+0xf8>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be6:	4a20      	ldr	r2, [pc, #128]	; (8000c68 <MX_GPIO_Init+0xf8>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <MX_GPIO_Init+0xf8>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <MX_GPIO_Init+0xf8>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <MX_GPIO_Init+0xf8>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <MX_GPIO_Init+0xf8>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c22:	4812      	ldr	r0, [pc, #72]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000c24:	f001 faf8 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <MX_GPIO_Init+0x100>)
 8000c3e:	f001 f93b 	bl	8001eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8000c42:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_GPIO_Init+0xfc>)
 8000c5c:	f001 f92c 	bl	8001eb8 <HAL_GPIO_Init>

}
 8000c60:	bf00      	nop
 8000c62:	3728      	adds	r7, #40	; 0x28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	58024400 	.word	0x58024400
 8000c6c:	58020400 	.word	0x58020400
 8000c70:	58020800 	.word	0x58020800

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <Error_Handler+0x8>
	...

08000c80 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c88:	1d39      	adds	r1, r7, #4
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <__io_putchar+0x20>)
 8000c92:	f003 fed5 	bl	8004a40 <HAL_UART_Transmit>
  return ch;
 8000c96:	687b      	ldr	r3, [r7, #4]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	24000130 	.word	0x24000130

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_MspInit+0x30>)
 8000cac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cb0:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x30>)
 8000cb2:	f043 0302 	orr.w	r3, r3, #2
 8000cb6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x30>)
 8000cbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	58024400 	.word	0x58024400

08000cd8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b0b8      	sub	sp, #224	; 0xe0
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	22bc      	movs	r2, #188	; 0xbc
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f004 ff8f 	bl	8005c1c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a25      	ldr	r2, [pc, #148]	; (8000d98 <HAL_FDCAN_MspInit+0xc0>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d142      	bne.n	8000d8e <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000d0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d12:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f002 fad9 	bl	80032d0 <HAL_RCCEx_PeriphCLKConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000d24:	f7ff ffa6 	bl	8000c74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d28:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <HAL_FDCAN_MspInit+0xc4>)
 8000d2a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000d2e:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <HAL_FDCAN_MspInit+0xc4>)
 8000d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d34:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000d38:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_FDCAN_MspInit+0xc4>)
 8000d3a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_FDCAN_MspInit+0xc4>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	4a13      	ldr	r2, [pc, #76]	; (8000d9c <HAL_FDCAN_MspInit+0xc4>)
 8000d4e:	f043 0308 	orr.w	r3, r3, #8
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_FDCAN_MspInit+0xc4>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5c:	f003 0308 	and.w	r3, r3, #8
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8000d64:	2303      	movs	r3, #3
 8000d66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000d7c:	2309      	movs	r3, #9
 8000d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d82:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <HAL_FDCAN_MspInit+0xc8>)
 8000d8a:	f001 f895 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	37e0      	adds	r7, #224	; 0xe0
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	4000a000 	.word	0x4000a000
 8000d9c:	58024400 	.word	0x58024400
 8000da0:	58020c00 	.word	0x58020c00

08000da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0b8      	sub	sp, #224	; 0xe0
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	22bc      	movs	r2, #188	; 0xbc
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f004 ff29 	bl	8005c1c <memset>
  if(huart->Instance==USART3)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a25      	ldr	r2, [pc, #148]	; (8000e64 <HAL_UART_MspInit+0xc0>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d142      	bne.n	8000e5a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 fa74 	bl	80032d0 <HAL_RCCEx_PeriphCLKConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dee:	f7ff ff41 	bl	8000c74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <HAL_UART_MspInit+0xc4>)
 8000df4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000df8:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <HAL_UART_MspInit+0xc4>)
 8000dfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dfe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_UART_MspInit+0xc4>)
 8000e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_UART_MspInit+0xc4>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e16:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <HAL_UART_MspInit+0xc4>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_UART_MspInit+0xc4>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e48:	2307      	movs	r3, #7
 8000e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_UART_MspInit+0xc8>)
 8000e56:	f001 f82f 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	37e0      	adds	r7, #224	; 0xe0
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40004800 	.word	0x40004800
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	58020c00 	.word	0x58020c00

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 f942 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	e00a      	b.n	8000eec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ed6:	f3af 8000 	nop.w
 8000eda:	4601      	mov	r1, r0
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	60ba      	str	r2, [r7, #8]
 8000ee2:	b2ca      	uxtb	r2, r1
 8000ee4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	dbf0      	blt.n	8000ed6 <_read+0x12>
	}

return len;
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	e009      	b.n	8000f24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	60ba      	str	r2, [r7, #8]
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff feb1 	bl	8000c80 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dbf1      	blt.n	8000f10 <_write+0x12>
	}
	return len;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_close>:

int _close(int file)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_isatty>:

int _isatty(int file)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
	return 1;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <_sbrk+0x5c>)
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <_sbrk+0x60>)
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <_sbrk+0x64>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <_sbrk+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d207      	bcs.n	8000fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd0:	f004 fdec 	bl	8005bac <__errno>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e009      	b.n	8000ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <_sbrk+0x64>)
 8000ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	24080000 	.word	0x24080000
 8001000:	00000400 	.word	0x00000400
 8001004:	24000204 	.word	0x24000204
 8001008:	24000220 	.word	0x24000220

0800100c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001010:	f7ff fae4 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001016:	490d      	ldr	r1, [pc, #52]	; (800104c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800102c:	4c0a      	ldr	r4, [pc, #40]	; (8001058 <LoopFillZerobss+0x22>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103a:	f004 fdbd 	bl	8005bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103e:	f7ff fb63 	bl	8000708 <main>
  bx  lr
 8001042:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001044:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001048:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800104c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001050:	08006778 	.word	0x08006778
  ldr r2, =_sbss
 8001054:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001058:	2400021c 	.word	0x2400021c

0800105c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC3_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001066:	2003      	movs	r0, #3
 8001068:	f000 f96e 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800106c:	f001 ff5a 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8001070:	4602      	mov	r2, r0
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_Init+0x68>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	0a1b      	lsrs	r3, r3, #8
 8001078:	f003 030f 	and.w	r3, r3, #15
 800107c:	4913      	ldr	r1, [pc, #76]	; (80010cc <HAL_Init+0x6c>)
 800107e:	5ccb      	ldrb	r3, [r1, r3]
 8001080:	f003 031f 	and.w	r3, r3, #31
 8001084:	fa22 f303 	lsr.w	r3, r2, r3
 8001088:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_Init+0x68>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <HAL_Init+0x6c>)
 8001094:	5cd3      	ldrb	r3, [r2, r3]
 8001096:	f003 031f 	and.w	r3, r3, #31
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	fa22 f303 	lsr.w	r3, r2, r3
 80010a0:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <HAL_Init+0x70>)
 80010a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010a4:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <HAL_Init+0x74>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010aa:	200f      	movs	r0, #15
 80010ac:	f000 f814 	bl	80010d8 <HAL_InitTick>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e002      	b.n	80010c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010ba:	f7ff fdf3 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	58024400 	.word	0x58024400
 80010cc:	080066bc 	.word	0x080066bc
 80010d0:	24000004 	.word	0x24000004
 80010d4:	24000000 	.word	0x24000000

080010d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_InitTick+0x60>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e021      	b.n	8001130 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <HAL_InitTick+0x64>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_InitTick+0x60>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f945 	bl	8001392 <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 f91d 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <HAL_InitTick+0x68>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2400000c 	.word	0x2400000c
 800113c:	24000000 	.word	0x24000000
 8001140:	24000008 	.word	0x24000008

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	2400000c 	.word	0x2400000c
 8001168:	24000208 	.word	0x24000208

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	24000208 	.word	0x24000208

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffde 	bl	800116c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2400000c 	.word	0x2400000c

080011cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <HAL_GetREVID+0x14>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	0c1b      	lsrs	r3, r3, #16
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	5c001000 	.word	0x5c001000

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <__NVIC_SetPriorityGrouping+0x40>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	4313      	orrs	r3, r2
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <__NVIC_SetPriorityGrouping+0x40>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00
 8001228:	05fa0000 	.word	0x05fa0000

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f7ff ff8e 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff47 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800136c:	f7ff ff5e 	bl	800122c <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff90 	bl	800129c <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5f 	bl	8001248 <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffb2 	bl	8001304 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b098      	sub	sp, #96	; 0x60
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80013b4:	4a84      	ldr	r2, [pc, #528]	; (80015c8 <HAL_FDCAN_Init+0x21c>)
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	4611      	mov	r1, r2
 80013bc:	224c      	movs	r2, #76	; 0x4c
 80013be:	4618      	mov	r0, r3
 80013c0:	f004 fc1e 	bl	8005c00 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e1c6      	b.n	800175c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a7e      	ldr	r2, [pc, #504]	; (80015cc <HAL_FDCAN_Init+0x220>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d106      	bne.n	80013e6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80013e0:	461a      	mov	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d106      	bne.n	8001400 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fc6c 	bl	8000cd8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	699a      	ldr	r2, [r3, #24]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0210 	bic.w	r2, r2, #16
 800140e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001410:	f7ff feac 	bl	800116c <HAL_GetTick>
 8001414:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001416:	e014      	b.n	8001442 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001418:	f7ff fea8 	bl	800116c <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b0a      	cmp	r3, #10
 8001424:	d90d      	bls.n	8001442 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800142c:	f043 0201 	orr.w	r2, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2203      	movs	r2, #3
 800143a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e18c      	b.n	800175c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b08      	cmp	r3, #8
 800144e:	d0e3      	beq.n	8001418 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	699a      	ldr	r2, [r3, #24]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001460:	f7ff fe84 	bl	800116c <HAL_GetTick>
 8001464:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001466:	e014      	b.n	8001492 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001468:	f7ff fe80 	bl	800116c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b0a      	cmp	r3, #10
 8001474:	d90d      	bls.n	8001492 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800147c:	f043 0201 	orr.w	r2, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2203      	movs	r2, #3
 800148a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e164      	b.n	800175c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0e3      	beq.n	8001468 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	699a      	ldr	r2, [r3, #24]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0202 	orr.w	r2, r2, #2
 80014ae:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7c1b      	ldrb	r3, [r3, #16]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d108      	bne.n	80014ca <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	699a      	ldr	r2, [r3, #24]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014c6:	619a      	str	r2, [r3, #24]
 80014c8:	e007      	b.n	80014da <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699a      	ldr	r2, [r3, #24]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014d8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	7c5b      	ldrb	r3, [r3, #17]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d108      	bne.n	80014f4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	699a      	ldr	r2, [r3, #24]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014f0:	619a      	str	r2, [r3, #24]
 80014f2:	e007      	b.n	8001504 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	699a      	ldr	r2, [r3, #24]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001502:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7c9b      	ldrb	r3, [r3, #18]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d108      	bne.n	800151e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	699a      	ldr	r2, [r3, #24]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800151a:	619a      	str	r2, [r3, #24]
 800151c:	e007      	b.n	800152e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	699a      	ldr	r2, [r3, #24]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800152c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001552:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	691a      	ldr	r2, [r3, #16]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0210 	bic.w	r2, r2, #16
 8001562:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d108      	bne.n	800157e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	699a      	ldr	r2, [r3, #24]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0204 	orr.w	r2, r2, #4
 800157a:	619a      	str	r2, [r3, #24]
 800157c:	e030      	b.n	80015e0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d02c      	beq.n	80015e0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d020      	beq.n	80015d0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699a      	ldr	r2, [r3, #24]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800159c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 0210 	orr.w	r2, r2, #16
 80015ac:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d114      	bne.n	80015e0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	699a      	ldr	r2, [r3, #24]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f042 0220 	orr.w	r2, r2, #32
 80015c4:	619a      	str	r2, [r3, #24]
 80015c6:	e00b      	b.n	80015e0 <HAL_FDCAN_Init+0x234>
 80015c8:	08006670 	.word	0x08006670
 80015cc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	699a      	ldr	r2, [r3, #24]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0220 	orr.w	r2, r2, #32
 80015de:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015f0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015f8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	3b01      	subs	r3, #1
 8001602:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001608:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800160a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001614:	d115      	bne.n	8001642 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	3b01      	subs	r3, #1
 8001622:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001624:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	3b01      	subs	r3, #1
 800162c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800162e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	3b01      	subs	r3, #1
 8001638:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800163e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001640:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00a      	beq.n	8001660 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001668:	4413      	add	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d011      	beq.n	8001692 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001676:	f023 0107 	bic.w	r1, r3, #7
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	3360      	adds	r3, #96	; 0x60
 8001682:	443b      	add	r3, r7
 8001684:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	2b00      	cmp	r3, #0
 8001698:	d011      	beq.n	80016be <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80016a2:	f023 0107 	bic.w	r1, r3, #7
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	3360      	adds	r3, #96	; 0x60
 80016ae:	443b      	add	r3, r7
 80016b0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d012      	beq.n	80016ec <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80016ce:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	3360      	adds	r3, #96	; 0x60
 80016da:	443b      	add	r3, r7
 80016dc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80016e0:	011a      	lsls	r2, r3, #4
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d012      	beq.n	800171a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80016fc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	3360      	adds	r3, #96	; 0x60
 8001708:	443b      	add	r3, r7
 800170a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800170e:	021a      	lsls	r2, r3, #8
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a11      	ldr	r2, [pc, #68]	; (8001764 <HAL_FDCAN_Init+0x3b8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d107      	bne.n	8001734 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f022 0203 	bic.w	r2, r2, #3
 8001732:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f9af 	bl	8001ab0 <FDCAN_CalcultateRamBlockAddresses>
 8001752:	4603      	mov	r3, r0
 8001754:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001758:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800175c:	4618      	mov	r0, r3
 800175e:	3760      	adds	r7, #96	; 0x60
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	4000a000 	.word	0x4000a000

08001768 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001778:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d002      	beq.n	8001786 <HAL_FDCAN_ConfigFilter+0x1e>
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d157      	bne.n	8001836 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d12b      	bne.n	80017e6 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b07      	cmp	r3, #7
 8001794:	d10d      	bne.n	80017b2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80017a2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80017a8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80017aa:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	e00e      	b.n	80017d0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80017be:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80017c6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80017cc:	4313      	orrs	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	e025      	b.n	8001832 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	075a      	lsls	r2, r3, #29
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b07      	cmp	r3, #7
 80017fa:	d103      	bne.n	8001804 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	e006      	b.n	8001812 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	079a      	lsls	r2, r3, #30
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4413      	add	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	3304      	adds	r3, #4
 800182a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e008      	b.n	8001848 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800183c:	f043 0202 	orr.w	r2, r3, #2
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
  }
}
 8001848:	4618      	mov	r0, r3
 800184a:	371c      	adds	r7, #28
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b01      	cmp	r3, #1
 800186c:	d110      	bne.n	8001890 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001876:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800187c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	e008      	b.n	80018a2 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001896:	f043 0204 	orr.w	r2, r3, #4
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
  }
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d111      	bne.n	80018e6 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2202      	movs	r2, #2
 80018c6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699a      	ldr	r2, [r3, #24]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0201 	bic.w	r2, r2, #1
 80018d8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e008      	b.n	80018f8 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018ec:	f043 0204 	orr.w	r2, r3, #4
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
  }
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d141      	bne.n	80019a0 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001924:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d109      	bne.n	8001940 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001932:	f043 0220 	orr.w	r2, r3, #32
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e038      	b.n	80019b2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d009      	beq.n	8001964 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001956:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e026      	b.n	80019b2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800196c:	0c1b      	lsrs	r3, r3, #16
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 fa1e 	bl	8001dbc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2101      	movs	r1, #1
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	fa01 f202 	lsl.w	r2, r1, r2
 800198c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001990:	2201      	movs	r2, #1
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	409a      	lsls	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	e008      	b.n	80019b2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019a6:	f043 0208 	orr.w	r2, r3, #8
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
  }
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80019ce:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d002      	beq.n	80019dc <HAL_FDCAN_ActivateNotification+0x20>
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d155      	bne.n	8001a88 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d108      	bne.n	80019fc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0201 	orr.w	r2, r2, #1
 80019f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80019fa:	e014      	b.n	8001a26 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	4013      	ands	r3, r2
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d108      	bne.n	8001a1e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0202 	orr.w	r2, r2, #2
 8001a1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a1c:	e003      	b.n	8001a26 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2203      	movs	r2, #3
 8001a24:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d009      	beq.n	8001a44 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d009      	beq.n	8001a62 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_FDCAN_ActivateNotification+0xec>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	430b      	orrs	r3, r1
 8001a74:	6553      	str	r3, [r2, #84]	; 0x54
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_FDCAN_ActivateNotification+0xf0>)
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	0f9b      	lsrs	r3, r3, #30
 8001a7e:	490b      	ldr	r1, [pc, #44]	; (8001aac <HAL_FDCAN_ActivateNotification+0xf0>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e008      	b.n	8001a9a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a8e:	f043 0202 	orr.w	r2, r3, #2
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
  }
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	3fcfffff 	.word	0x3fcfffff
 8001aac:	4000a800 	.word	0x4000a800

08001ab0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001ac6:	4ba7      	ldr	r3, [pc, #668]	; (8001d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	0091      	lsls	r1, r2, #2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	430b      	orrs	r3, r1
 8001ad4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ae0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae8:	041a      	lsls	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	4413      	add	r3, r2
 8001afc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b06:	4b97      	ldr	r3, [pc, #604]	; (8001d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	0091      	lsls	r1, r2, #2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	430b      	orrs	r3, r1
 8001b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b20:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b28:	041a      	lsls	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001b48:	4b86      	ldr	r3, [pc, #536]	; (8001d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	0091      	lsls	r1, r2, #2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	430b      	orrs	r3, r1
 8001b56:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001b62:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	041a      	lsls	r2, r3, #16
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	4413      	add	r3, r2
 8001b86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b90:	4b74      	ldr	r3, [pc, #464]	; (8001d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	0091      	lsls	r1, r2, #2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001baa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb2:	041a      	lsls	r2, r3, #16
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001bc6:	fb02 f303 	mul.w	r3, r2, r3
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	4413      	add	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001bd8:	4b62      	ldr	r3, [pc, #392]	; (8001d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	0091      	lsls	r1, r2, #2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	430b      	orrs	r3, r1
 8001be6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001c04:	4b57      	ldr	r3, [pc, #348]	; (8001d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	0091      	lsls	r1, r2, #2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	430b      	orrs	r3, r1
 8001c12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c1e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	041a      	lsls	r2, r3, #16
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001c46:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	0091      	lsls	r1, r2, #2
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	430b      	orrs	r3, r1
 8001c54:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c60:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c68:	041a      	lsls	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c7c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c84:	061a      	lsls	r2, r3, #24
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c94:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001c96:	4413      	add	r3, r2
 8001c98:	009a      	lsls	r2, r3, #2
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	441a      	add	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	441a      	add	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	441a      	add	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	441a      	add	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001cfa:	fb01 f303 	mul.w	r3, r1, r3
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	441a      	add	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	441a      	add	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001d2a:	fb01 f303 	mul.w	r3, r1, r3
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	441a      	add	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	441a      	add	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5a:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d915      	bls.n	8001d8c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001d60:	e006      	b.n	8001d70 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001d62:	bf00      	nop
 8001d64:	ffff0003 	.word	0xffff0003
 8001d68:	10002b00 	.word	0x10002b00
 8001d6c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d76:	f043 0220 	orr.w	r2, r3, #32
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2203      	movs	r2, #3
 8001d84:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e010      	b.n	8001dae <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	e005      	b.n	8001da0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d3f3      	bcc.n	8001d94 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop

08001dbc <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10a      	bne.n	8001de8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001dda:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	e00a      	b.n	8001dfe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001df0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001df6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001df8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001dfc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001e08:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001e0e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001e14:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	fb01 f303 	mul.w	r3, r1, r3
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	69fa      	ldr	r2, [r7, #28]
 8001e38:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	e020      	b.n	8001e94 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3303      	adds	r3, #3
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	3302      	adds	r3, #2
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	440b      	add	r3, r1
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001e6a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	440b      	add	r3, r1
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8001e78:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	440a      	add	r2, r1
 8001e80:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8001e82:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3304      	adds	r3, #4
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0c1b      	lsrs	r3, r3, #16
 8001e9a:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <FDCAN_CopyMessageToRAM+0xf8>)
 8001e9c:	5cd3      	ldrb	r3, [r2, r3]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d3d5      	bcc.n	8001e52 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	bf00      	nop
 8001eaa:	3724      	adds	r7, #36	; 0x24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	080066cc 	.word	0x080066cc

08001eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	; 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ec6:	4b89      	ldr	r3, [pc, #548]	; (80020ec <HAL_GPIO_Init+0x234>)
 8001ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eca:	e194      	b.n	80021f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8186 	beq.w	80021f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d005      	beq.n	8001efc <HAL_GPIO_Init+0x44>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d130      	bne.n	8001f5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f32:	2201      	movs	r2, #1
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	f003 0201 	and.w	r2, r3, #1
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d017      	beq.n	8001f9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d123      	bne.n	8001fee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	08da      	lsrs	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3208      	adds	r2, #8
 8001fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	08da      	lsrs	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3208      	adds	r2, #8
 8001fe8:	69b9      	ldr	r1, [r7, #24]
 8001fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0203 	and.w	r2, r3, #3
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80e0 	beq.w	80021f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002030:	4b2f      	ldr	r3, [pc, #188]	; (80020f0 <HAL_GPIO_Init+0x238>)
 8002032:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002036:	4a2e      	ldr	r2, [pc, #184]	; (80020f0 <HAL_GPIO_Init+0x238>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002040:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <HAL_GPIO_Init+0x238>)
 8002042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800204e:	4a29      	ldr	r2, [pc, #164]	; (80020f4 <HAL_GPIO_Init+0x23c>)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	3302      	adds	r3, #2
 8002056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	220f      	movs	r2, #15
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a20      	ldr	r2, [pc, #128]	; (80020f8 <HAL_GPIO_Init+0x240>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d052      	beq.n	8002120 <HAL_GPIO_Init+0x268>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <HAL_GPIO_Init+0x244>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d031      	beq.n	80020e6 <HAL_GPIO_Init+0x22e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a1e      	ldr	r2, [pc, #120]	; (8002100 <HAL_GPIO_Init+0x248>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d02b      	beq.n	80020e2 <HAL_GPIO_Init+0x22a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <HAL_GPIO_Init+0x24c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d025      	beq.n	80020de <HAL_GPIO_Init+0x226>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <HAL_GPIO_Init+0x250>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01f      	beq.n	80020da <HAL_GPIO_Init+0x222>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a1b      	ldr	r2, [pc, #108]	; (800210c <HAL_GPIO_Init+0x254>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d019      	beq.n	80020d6 <HAL_GPIO_Init+0x21e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a1a      	ldr	r2, [pc, #104]	; (8002110 <HAL_GPIO_Init+0x258>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <HAL_GPIO_Init+0x21a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a19      	ldr	r2, [pc, #100]	; (8002114 <HAL_GPIO_Init+0x25c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00d      	beq.n	80020ce <HAL_GPIO_Init+0x216>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a18      	ldr	r2, [pc, #96]	; (8002118 <HAL_GPIO_Init+0x260>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <HAL_GPIO_Init+0x212>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_GPIO_Init+0x264>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d101      	bne.n	80020c6 <HAL_GPIO_Init+0x20e>
 80020c2:	2309      	movs	r3, #9
 80020c4:	e02d      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020c6:	230a      	movs	r3, #10
 80020c8:	e02b      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020ca:	2308      	movs	r3, #8
 80020cc:	e029      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020ce:	2307      	movs	r3, #7
 80020d0:	e027      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020d2:	2306      	movs	r3, #6
 80020d4:	e025      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020d6:	2305      	movs	r3, #5
 80020d8:	e023      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020da:	2304      	movs	r3, #4
 80020dc:	e021      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020de:	2303      	movs	r3, #3
 80020e0:	e01f      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e01d      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e01b      	b.n	8002122 <HAL_GPIO_Init+0x26a>
 80020ea:	bf00      	nop
 80020ec:	58000080 	.word	0x58000080
 80020f0:	58024400 	.word	0x58024400
 80020f4:	58000400 	.word	0x58000400
 80020f8:	58020000 	.word	0x58020000
 80020fc:	58020400 	.word	0x58020400
 8002100:	58020800 	.word	0x58020800
 8002104:	58020c00 	.word	0x58020c00
 8002108:	58021000 	.word	0x58021000
 800210c:	58021400 	.word	0x58021400
 8002110:	58021800 	.word	0x58021800
 8002114:	58021c00 	.word	0x58021c00
 8002118:	58022000 	.word	0x58022000
 800211c:	58022400 	.word	0x58022400
 8002120:	2300      	movs	r3, #0
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	f002 0203 	and.w	r2, r2, #3
 8002128:	0092      	lsls	r2, r2, #2
 800212a:	4093      	lsls	r3, r2
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002132:	4938      	ldr	r1, [pc, #224]	; (8002214 <HAL_GPIO_Init+0x35c>)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800216e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002194:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	3301      	adds	r3, #1
 80021f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	f47f ae63 	bne.w	8001ecc <HAL_GPIO_Init+0x14>
  }
}
 8002206:	bf00      	nop
 8002208:	bf00      	nop
 800220a:	3724      	adds	r7, #36	; 0x24
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	58000400 	.word	0x58000400

08002218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
 8002224:	4613      	mov	r3, r2
 8002226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002228:	787b      	ldrb	r3, [r7, #1]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002234:	e003      	b.n	800223e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	041a      	lsls	r2, r3, #16
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	619a      	str	r2, [r3, #24]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002254:	4a08      	ldr	r2, [pc, #32]	; (8002278 <HAL_HSEM_FastTake+0x2c>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3320      	adds	r3, #32
 800225a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225e:	4a07      	ldr	r2, [pc, #28]	; (800227c <HAL_HSEM_FastTake+0x30>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d101      	bne.n	8002268 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	e000      	b.n	800226a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	58026400 	.word	0x58026400
 800227c:	80000300 	.word	0x80000300

08002280 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800228a:	4906      	ldr	r1, [pc, #24]	; (80022a4 <HAL_HSEM_Release+0x24>)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	58026400 	.word	0x58026400

080022a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80022b0:	4b29      	ldr	r3, [pc, #164]	; (8002358 <HAL_PWREx_ConfigSupply+0xb0>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	2b06      	cmp	r3, #6
 80022ba:	d00a      	beq.n	80022d2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022bc:	4b26      	ldr	r3, [pc, #152]	; (8002358 <HAL_PWREx_ConfigSupply+0xb0>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d001      	beq.n	80022ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e040      	b.n	8002350 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e03e      	b.n	8002350 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022d2:	4b21      	ldr	r3, [pc, #132]	; (8002358 <HAL_PWREx_ConfigSupply+0xb0>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80022da:	491f      	ldr	r1, [pc, #124]	; (8002358 <HAL_PWREx_ConfigSupply+0xb0>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022e2:	f7fe ff43 	bl	800116c <HAL_GetTick>
 80022e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022e8:	e009      	b.n	80022fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022ea:	f7fe ff3f 	bl	800116c <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022f8:	d901      	bls.n	80022fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e028      	b.n	8002350 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <HAL_PWREx_ConfigSupply+0xb0>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800230a:	d1ee      	bne.n	80022ea <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b1e      	cmp	r3, #30
 8002310:	d008      	beq.n	8002324 <HAL_PWREx_ConfigSupply+0x7c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b2e      	cmp	r3, #46	; 0x2e
 8002316:	d005      	beq.n	8002324 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b1d      	cmp	r3, #29
 800231c:	d002      	beq.n	8002324 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b2d      	cmp	r3, #45	; 0x2d
 8002322:	d114      	bne.n	800234e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002324:	f7fe ff22 	bl	800116c <HAL_GetTick>
 8002328:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800232a:	e009      	b.n	8002340 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800232c:	f7fe ff1e 	bl	800116c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800233a:	d901      	bls.n	8002340 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e007      	b.n	8002350 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_PWREx_ConfigSupply+0xb0>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234c:	d1ee      	bne.n	800232c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	58024800 	.word	0x58024800

0800235c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08c      	sub	sp, #48	; 0x30
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d102      	bne.n	8002370 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	f000 bc1d 	b.w	8002baa <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 8087 	beq.w	800248c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237e:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002388:	4b96      	ldr	r3, [pc, #600]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002390:	2b10      	cmp	r3, #16
 8002392:	d007      	beq.n	80023a4 <HAL_RCC_OscConfig+0x48>
 8002394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002396:	2b18      	cmp	r3, #24
 8002398:	d110      	bne.n	80023bc <HAL_RCC_OscConfig+0x60>
 800239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d10b      	bne.n	80023bc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	4b8f      	ldr	r3, [pc, #572]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d06c      	beq.n	800248a <HAL_RCC_OscConfig+0x12e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d168      	bne.n	800248a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e3f6      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d106      	bne.n	80023d4 <HAL_RCC_OscConfig+0x78>
 80023c6:	4b87      	ldr	r3, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a86      	ldr	r2, [pc, #536]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e02e      	b.n	8002432 <HAL_RCC_OscConfig+0xd6>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10c      	bne.n	80023f6 <HAL_RCC_OscConfig+0x9a>
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 80023e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b7e      	ldr	r3, [pc, #504]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a7d      	ldr	r2, [pc, #500]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 80023ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	e01d      	b.n	8002432 <HAL_RCC_OscConfig+0xd6>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023fe:	d10c      	bne.n	800241a <HAL_RCC_OscConfig+0xbe>
 8002400:	4b78      	ldr	r3, [pc, #480]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a77      	ldr	r2, [pc, #476]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 8002406:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b75      	ldr	r3, [pc, #468]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a74      	ldr	r2, [pc, #464]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 8002412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	e00b      	b.n	8002432 <HAL_RCC_OscConfig+0xd6>
 800241a:	4b72      	ldr	r3, [pc, #456]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a71      	ldr	r2, [pc, #452]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 8002420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b6f      	ldr	r3, [pc, #444]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a6e      	ldr	r2, [pc, #440]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 800242c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002430:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d013      	beq.n	8002462 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7fe fe97 	bl	800116c <HAL_GetTick>
 800243e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002442:	f7fe fe93 	bl	800116c <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b64      	cmp	r3, #100	; 0x64
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e3aa      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002454:	4b63      	ldr	r3, [pc, #396]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0xe6>
 8002460:	e014      	b.n	800248c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7fe fe83 	bl	800116c <HAL_GetTick>
 8002466:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800246a:	f7fe fe7f 	bl	800116c <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b64      	cmp	r3, #100	; 0x64
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e396      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800247c:	4b59      	ldr	r3, [pc, #356]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f0      	bne.n	800246a <HAL_RCC_OscConfig+0x10e>
 8002488:	e000      	b.n	800248c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80cb 	beq.w	8002630 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800249a:	4b52      	ldr	r3, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024a2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024a4:	4b4f      	ldr	r3, [pc, #316]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_RCC_OscConfig+0x164>
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	2b18      	cmp	r3, #24
 80024b4:	d156      	bne.n	8002564 <HAL_RCC_OscConfig+0x208>
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d151      	bne.n	8002564 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c0:	4b48      	ldr	r3, [pc, #288]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_OscConfig+0x17c>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e368      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024d8:	4b42      	ldr	r3, [pc, #264]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 0219 	bic.w	r2, r3, #25
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	493f      	ldr	r1, [pc, #252]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024ea:	f7fe fe3f 	bl	800116c <HAL_GetTick>
 80024ee:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f2:	f7fe fe3b 	bl	800116c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e352      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002504:	4b37      	ldr	r3, [pc, #220]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002510:	f7fe fe5c 	bl	80011cc <HAL_GetREVID>
 8002514:	4603      	mov	r3, r0
 8002516:	f241 0203 	movw	r2, #4099	; 0x1003
 800251a:	4293      	cmp	r3, r2
 800251c:	d817      	bhi.n	800254e <HAL_RCC_OscConfig+0x1f2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b40      	cmp	r3, #64	; 0x40
 8002524:	d108      	bne.n	8002538 <HAL_RCC_OscConfig+0x1dc>
 8002526:	4b2f      	ldr	r3, [pc, #188]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800252e:	4a2d      	ldr	r2, [pc, #180]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 8002530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002534:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002536:	e07b      	b.n	8002630 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	031b      	lsls	r3, r3, #12
 8002546:	4927      	ldr	r1, [pc, #156]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800254c:	e070      	b.n	8002630 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254e:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	061b      	lsls	r3, r3, #24
 800255c:	4921      	ldr	r1, [pc, #132]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002562:	e065      	b.n	8002630 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d048      	beq.n	80025fe <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 0219 	bic.w	r2, r3, #25
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	491a      	ldr	r1, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7fe fdf5 	bl	800116c <HAL_GetTick>
 8002582:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002586:	f7fe fdf1 	bl	800116c <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e308      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	f7fe fe12 	bl	80011cc <HAL_GetREVID>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d81a      	bhi.n	80025e8 <HAL_RCC_OscConfig+0x28c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b40      	cmp	r3, #64	; 0x40
 80025b8:	d108      	bne.n	80025cc <HAL_RCC_OscConfig+0x270>
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80025c2:	4a08      	ldr	r2, [pc, #32]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 80025c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c8:	6053      	str	r3, [r2, #4]
 80025ca:	e031      	b.n	8002630 <HAL_RCC_OscConfig+0x2d4>
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	031b      	lsls	r3, r3, #12
 80025da:	4902      	ldr	r1, [pc, #8]	; (80025e4 <HAL_RCC_OscConfig+0x288>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
 80025e0:	e026      	b.n	8002630 <HAL_RCC_OscConfig+0x2d4>
 80025e2:	bf00      	nop
 80025e4:	58024400 	.word	0x58024400
 80025e8:	4b9a      	ldr	r3, [pc, #616]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	061b      	lsls	r3, r3, #24
 80025f6:	4997      	ldr	r1, [pc, #604]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
 80025fc:	e018      	b.n	8002630 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fe:	4b95      	ldr	r3, [pc, #596]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a94      	ldr	r2, [pc, #592]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260a:	f7fe fdaf 	bl	800116c <HAL_GetTick>
 800260e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002612:	f7fe fdab 	bl	800116c <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e2c2      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002624:	4b8b      	ldr	r3, [pc, #556]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f0      	bne.n	8002612 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80a9 	beq.w	8002790 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800263e:	4b85      	ldr	r3, [pc, #532]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002646:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002648:	4b82      	ldr	r3, [pc, #520]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b08      	cmp	r3, #8
 8002652:	d007      	beq.n	8002664 <HAL_RCC_OscConfig+0x308>
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b18      	cmp	r3, #24
 8002658:	d13a      	bne.n	80026d0 <HAL_RCC_OscConfig+0x374>
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d135      	bne.n	80026d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002664:	4b7b      	ldr	r3, [pc, #492]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_OscConfig+0x320>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	2b80      	cmp	r3, #128	; 0x80
 8002676:	d001      	beq.n	800267c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e296      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800267c:	f7fe fda6 	bl	80011cc <HAL_GetREVID>
 8002680:	4603      	mov	r3, r0
 8002682:	f241 0203 	movw	r2, #4099	; 0x1003
 8002686:	4293      	cmp	r3, r2
 8002688:	d817      	bhi.n	80026ba <HAL_RCC_OscConfig+0x35e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	2b20      	cmp	r3, #32
 8002690:	d108      	bne.n	80026a4 <HAL_RCC_OscConfig+0x348>
 8002692:	4b70      	ldr	r3, [pc, #448]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800269a:	4a6e      	ldr	r2, [pc, #440]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 800269c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026a0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026a2:	e075      	b.n	8002790 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026a4:	4b6b      	ldr	r3, [pc, #428]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	069b      	lsls	r3, r3, #26
 80026b2:	4968      	ldr	r1, [pc, #416]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026b8:	e06a      	b.n	8002790 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026ba:	4b66      	ldr	r3, [pc, #408]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	061b      	lsls	r3, r3, #24
 80026c8:	4962      	ldr	r1, [pc, #392]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026ce:	e05f      	b.n	8002790 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d042      	beq.n	800275e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026d8:	4b5e      	ldr	r3, [pc, #376]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a5d      	ldr	r2, [pc, #372]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 80026de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7fe fd42 	bl	800116c <HAL_GetTick>
 80026e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80026ec:	f7fe fd3e 	bl	800116c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e255      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026fe:	4b55      	ldr	r3, [pc, #340]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800270a:	f7fe fd5f 	bl	80011cc <HAL_GetREVID>
 800270e:	4603      	mov	r3, r0
 8002710:	f241 0203 	movw	r2, #4099	; 0x1003
 8002714:	4293      	cmp	r3, r2
 8002716:	d817      	bhi.n	8002748 <HAL_RCC_OscConfig+0x3ec>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	2b20      	cmp	r3, #32
 800271e:	d108      	bne.n	8002732 <HAL_RCC_OscConfig+0x3d6>
 8002720:	4b4c      	ldr	r3, [pc, #304]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002728:	4a4a      	ldr	r2, [pc, #296]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 800272a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800272e:	6053      	str	r3, [r2, #4]
 8002730:	e02e      	b.n	8002790 <HAL_RCC_OscConfig+0x434>
 8002732:	4b48      	ldr	r3, [pc, #288]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	069b      	lsls	r3, r3, #26
 8002740:	4944      	ldr	r1, [pc, #272]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
 8002746:	e023      	b.n	8002790 <HAL_RCC_OscConfig+0x434>
 8002748:	4b42      	ldr	r3, [pc, #264]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	493f      	ldr	r1, [pc, #252]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002758:	4313      	orrs	r3, r2
 800275a:	60cb      	str	r3, [r1, #12]
 800275c:	e018      	b.n	8002790 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a3c      	ldr	r2, [pc, #240]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276a:	f7fe fcff 	bl	800116c <HAL_GetTick>
 800276e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002772:	f7fe fcfb 	bl	800116c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e212      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002784:	4b33      	ldr	r3, [pc, #204]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f0      	bne.n	8002772 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d036      	beq.n	800280a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d019      	beq.n	80027d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a4:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 80027a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a8:	4a2a      	ldr	r2, [pc, #168]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7fe fcdc 	bl	800116c <HAL_GetTick>
 80027b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027b8:	f7fe fcd8 	bl	800116c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e1ef      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 80027cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x45c>
 80027d6:	e018      	b.n	800280a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d8:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 80027da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027dc:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e4:	f7fe fcc2 	bl	800116c <HAL_GetTick>
 80027e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ec:	f7fe fcbe 	bl	800116c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1d5      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d039      	beq.n	800288a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d01c      	beq.n	8002858 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a0c      	ldr	r2, [pc, #48]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002828:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800282a:	f7fe fc9f 	bl	800116c <HAL_GetTick>
 800282e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002832:	f7fe fc9b 	bl	800116c <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e1b2      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x4d6>
 8002850:	e01b      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
 8002852:	bf00      	nop
 8002854:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002858:	4b9b      	ldr	r3, [pc, #620]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a9a      	ldr	r2, [pc, #616]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 800285e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002862:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002864:	f7fe fc82 	bl	800116c <HAL_GetTick>
 8002868:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800286c:	f7fe fc7e 	bl	800116c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e195      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800287e:	4b92      	ldr	r3, [pc, #584]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 8081 	beq.w	800299a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002898:	4b8c      	ldr	r3, [pc, #560]	; (8002acc <HAL_RCC_OscConfig+0x770>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a8b      	ldr	r2, [pc, #556]	; (8002acc <HAL_RCC_OscConfig+0x770>)
 800289e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028a4:	f7fe fc62 	bl	800116c <HAL_GetTick>
 80028a8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80028ac:	f7fe fc5e 	bl	800116c <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e175      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028be:	4b83      	ldr	r3, [pc, #524]	; (8002acc <HAL_RCC_OscConfig+0x770>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d106      	bne.n	80028e0 <HAL_RCC_OscConfig+0x584>
 80028d2:	4b7d      	ldr	r3, [pc, #500]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	4a7c      	ldr	r2, [pc, #496]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6713      	str	r3, [r2, #112]	; 0x70
 80028de:	e02d      	b.n	800293c <HAL_RCC_OscConfig+0x5e0>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10c      	bne.n	8002902 <HAL_RCC_OscConfig+0x5a6>
 80028e8:	4b77      	ldr	r3, [pc, #476]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a76      	ldr	r2, [pc, #472]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
 80028f4:	4b74      	ldr	r3, [pc, #464]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a73      	ldr	r2, [pc, #460]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 80028fa:	f023 0304 	bic.w	r3, r3, #4
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002900:	e01c      	b.n	800293c <HAL_RCC_OscConfig+0x5e0>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b05      	cmp	r3, #5
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x5c8>
 800290a:	4b6f      	ldr	r3, [pc, #444]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	4a6e      	ldr	r2, [pc, #440]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	6713      	str	r3, [r2, #112]	; 0x70
 8002916:	4b6c      	ldr	r3, [pc, #432]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	4a6b      	ldr	r2, [pc, #428]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6713      	str	r3, [r2, #112]	; 0x70
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0x5e0>
 8002924:	4b68      	ldr	r3, [pc, #416]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a67      	ldr	r2, [pc, #412]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
 8002930:	4b65      	ldr	r3, [pc, #404]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	4a64      	ldr	r2, [pc, #400]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002936:	f023 0304 	bic.w	r3, r3, #4
 800293a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d015      	beq.n	8002970 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002944:	f7fe fc12 	bl	800116c <HAL_GetTick>
 8002948:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800294a:	e00a      	b.n	8002962 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800294c:	f7fe fc0e 	bl	800116c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	; 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e123      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002962:	4b59      	ldr	r3, [pc, #356]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0ee      	beq.n	800294c <HAL_RCC_OscConfig+0x5f0>
 800296e:	e014      	b.n	800299a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002970:	f7fe fbfc 	bl	800116c <HAL_GetTick>
 8002974:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002976:	e00a      	b.n	800298e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f7fe fbf8 	bl	800116c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	; 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e10d      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800298e:	4b4e      	ldr	r3, [pc, #312]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1ee      	bne.n	8002978 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8102 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029a4:	4b48      	ldr	r3, [pc, #288]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029ac:	2b18      	cmp	r3, #24
 80029ae:	f000 80bd 	beq.w	8002b2c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	f040 809e 	bne.w	8002af8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029bc:	4b42      	ldr	r3, [pc, #264]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a41      	ldr	r2, [pc, #260]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 80029c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7fe fbd0 	bl	800116c <HAL_GetTick>
 80029cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d0:	f7fe fbcc 	bl	800116c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e0e3      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029e2:	4b39      	ldr	r3, [pc, #228]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ee:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 80029f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029f2:	4b37      	ldr	r3, [pc, #220]	; (8002ad0 <HAL_RCC_OscConfig+0x774>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029fe:	0112      	lsls	r2, r2, #4
 8002a00:	430a      	orrs	r2, r1
 8002a02:	4931      	ldr	r1, [pc, #196]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	628b      	str	r3, [r1, #40]	; 0x28
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a16:	3b01      	subs	r3, #1
 8002a18:	025b      	lsls	r3, r3, #9
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	3b01      	subs	r3, #1
 8002a24:	041b      	lsls	r3, r3, #16
 8002a26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a30:	3b01      	subs	r3, #1
 8002a32:	061b      	lsls	r3, r3, #24
 8002a34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a38:	4923      	ldr	r1, [pc, #140]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002a3e:	4b22      	ldr	r3, [pc, #136]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	4a21      	ldr	r2, [pc, #132]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a4a:	4b1f      	ldr	r3, [pc, #124]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a4e:	4b21      	ldr	r3, [pc, #132]	; (8002ad4 <HAL_RCC_OscConfig+0x778>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a56:	00d2      	lsls	r2, r2, #3
 8002a58:	491b      	ldr	r1, [pc, #108]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	f023 020c 	bic.w	r2, r3, #12
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4917      	ldr	r1, [pc, #92]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a70:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	f023 0202 	bic.w	r2, r3, #2
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	4912      	ldr	r1, [pc, #72]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	4a10      	ldr	r2, [pc, #64]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	4a0d      	ldr	r2, [pc, #52]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002aa6:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <HAL_RCC_OscConfig+0x76c>)
 8002ab8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe fb55 	bl	800116c <HAL_GetTick>
 8002ac2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ac4:	e011      	b.n	8002aea <HAL_RCC_OscConfig+0x78e>
 8002ac6:	bf00      	nop
 8002ac8:	58024400 	.word	0x58024400
 8002acc:	58024800 	.word	0x58024800
 8002ad0:	fffffc0c 	.word	0xfffffc0c
 8002ad4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7fe fb48 	bl	800116c <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e05f      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aea:	4b32      	ldr	r3, [pc, #200]	; (8002bb4 <HAL_RCC_OscConfig+0x858>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x77c>
 8002af6:	e057      	b.n	8002ba8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af8:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <HAL_RCC_OscConfig+0x858>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a2d      	ldr	r2, [pc, #180]	; (8002bb4 <HAL_RCC_OscConfig+0x858>)
 8002afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fb32 	bl	800116c <HAL_GetTick>
 8002b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe fb2e 	bl	800116c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e045      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b1e:	4b25      	ldr	r3, [pc, #148]	; (8002bb4 <HAL_RCC_OscConfig+0x858>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x7b0>
 8002b2a:	e03d      	b.n	8002ba8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b2c:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_RCC_OscConfig+0x858>)
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b32:	4b20      	ldr	r3, [pc, #128]	; (8002bb4 <HAL_RCC_OscConfig+0x858>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d031      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f003 0203 	and.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d12a      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d122      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d11a      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	0a5b      	lsrs	r3, r3, #9
 8002b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d111      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	0c1b      	lsrs	r3, r3, #16
 8002b84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d108      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	0e1b      	lsrs	r3, r3, #24
 8002b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3730      	adds	r7, #48	; 0x30
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	58024400 	.word	0x58024400

08002bb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e19c      	b.n	8002f06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b8a      	ldr	r3, [pc, #552]	; (8002df8 <HAL_RCC_ClockConfig+0x240>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d910      	bls.n	8002bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b87      	ldr	r3, [pc, #540]	; (8002df8 <HAL_RCC_ClockConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 020f 	bic.w	r2, r3, #15
 8002be2:	4985      	ldr	r1, [pc, #532]	; (8002df8 <HAL_RCC_ClockConfig+0x240>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b83      	ldr	r3, [pc, #524]	; (8002df8 <HAL_RCC_ClockConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e184      	b.n	8002f06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d010      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	4b7b      	ldr	r3, [pc, #492]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d908      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c18:	4b78      	ldr	r3, [pc, #480]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	4975      	ldr	r1, [pc, #468]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d010      	beq.n	8002c58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	4b70      	ldr	r3, [pc, #448]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d908      	bls.n	8002c58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c46:	4b6d      	ldr	r3, [pc, #436]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	496a      	ldr	r1, [pc, #424]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d010      	beq.n	8002c86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699a      	ldr	r2, [r3, #24]
 8002c68:	4b64      	ldr	r3, [pc, #400]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d908      	bls.n	8002c86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c74:	4b61      	ldr	r3, [pc, #388]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	495e      	ldr	r1, [pc, #376]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d010      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69da      	ldr	r2, [r3, #28]
 8002c96:	4b59      	ldr	r3, [pc, #356]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d908      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ca2:	4b56      	ldr	r3, [pc, #344]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	4953      	ldr	r1, [pc, #332]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d010      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	4b4d      	ldr	r3, [pc, #308]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d908      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd0:	4b4a      	ldr	r3, [pc, #296]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f023 020f 	bic.w	r2, r3, #15
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4947      	ldr	r1, [pc, #284]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d055      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002cee:	4b43      	ldr	r3, [pc, #268]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	4940      	ldr	r1, [pc, #256]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d107      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d08:	4b3c      	ldr	r3, [pc, #240]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d121      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0f6      	b.n	8002f06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d107      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d20:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d115      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0ea      	b.n	8002f06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d107      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d38:	4b30      	ldr	r3, [pc, #192]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d109      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0de      	b.n	8002f06 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d48:	4b2c      	ldr	r3, [pc, #176]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0d6      	b.n	8002f06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d58:	4b28      	ldr	r3, [pc, #160]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	f023 0207 	bic.w	r2, r3, #7
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4925      	ldr	r1, [pc, #148]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6a:	f7fe f9ff 	bl	800116c <HAL_GetTick>
 8002d6e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d72:	f7fe f9fb 	bl	800116c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e0be      	b.n	8002f06 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d88:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d1eb      	bne.n	8002d72 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d010      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d208      	bcs.n	8002dc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f023 020f 	bic.w	r2, r3, #15
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	490e      	ldr	r1, [pc, #56]	; (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCC_ClockConfig+0x240>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d214      	bcs.n	8002e00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <HAL_RCC_ClockConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 020f 	bic.w	r2, r3, #15
 8002dde:	4906      	ldr	r1, [pc, #24]	; (8002df8 <HAL_RCC_ClockConfig+0x240>)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <HAL_RCC_ClockConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e086      	b.n	8002f06 <HAL_RCC_ClockConfig+0x34e>
 8002df8:	52002000 	.word	0x52002000
 8002dfc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d010      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d208      	bcs.n	8002e2e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e1c:	4b3c      	ldr	r3, [pc, #240]	; (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	4939      	ldr	r1, [pc, #228]	; (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d010      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	4b34      	ldr	r3, [pc, #208]	; (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d208      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e4a:	4b31      	ldr	r3, [pc, #196]	; (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	492e      	ldr	r1, [pc, #184]	; (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d010      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699a      	ldr	r2, [r3, #24]
 8002e6c:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d208      	bcs.n	8002e8a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e78:	4b25      	ldr	r3, [pc, #148]	; (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	4922      	ldr	r1, [pc, #136]	; (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d010      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69da      	ldr	r2, [r3, #28]
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d208      	bcs.n	8002eb8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ea6:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4917      	ldr	r1, [pc, #92]	; (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002eb8:	f000 f834 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	0a1b      	lsrs	r3, r3, #8
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	4912      	ldr	r1, [pc, #72]	; (8002f14 <HAL_RCC_ClockConfig+0x35c>)
 8002eca:	5ccb      	ldrb	r3, [r1, r3]
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	4a0d      	ldr	r2, [pc, #52]	; (8002f14 <HAL_RCC_ClockConfig+0x35c>)
 8002ee0:	5cd3      	ldrb	r3, [r2, r3]
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eec:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <HAL_RCC_ClockConfig+0x360>)
 8002eee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <HAL_RCC_ClockConfig+0x364>)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <HAL_RCC_ClockConfig+0x368>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe f8ec 	bl	80010d8 <HAL_InitTick>
 8002f00:	4603      	mov	r3, r0
 8002f02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	58024400 	.word	0x58024400
 8002f14:	080066bc 	.word	0x080066bc
 8002f18:	24000004 	.word	0x24000004
 8002f1c:	24000000 	.word	0x24000000
 8002f20:	24000008 	.word	0x24000008

08002f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b089      	sub	sp, #36	; 0x24
 8002f28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f2a:	4bb3      	ldr	r3, [pc, #716]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f32:	2b18      	cmp	r3, #24
 8002f34:	f200 8155 	bhi.w	80031e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002f38:	a201      	add	r2, pc, #4	; (adr r2, 8002f40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3e:	bf00      	nop
 8002f40:	08002fa5 	.word	0x08002fa5
 8002f44:	080031e3 	.word	0x080031e3
 8002f48:	080031e3 	.word	0x080031e3
 8002f4c:	080031e3 	.word	0x080031e3
 8002f50:	080031e3 	.word	0x080031e3
 8002f54:	080031e3 	.word	0x080031e3
 8002f58:	080031e3 	.word	0x080031e3
 8002f5c:	080031e3 	.word	0x080031e3
 8002f60:	08002fcb 	.word	0x08002fcb
 8002f64:	080031e3 	.word	0x080031e3
 8002f68:	080031e3 	.word	0x080031e3
 8002f6c:	080031e3 	.word	0x080031e3
 8002f70:	080031e3 	.word	0x080031e3
 8002f74:	080031e3 	.word	0x080031e3
 8002f78:	080031e3 	.word	0x080031e3
 8002f7c:	080031e3 	.word	0x080031e3
 8002f80:	08002fd1 	.word	0x08002fd1
 8002f84:	080031e3 	.word	0x080031e3
 8002f88:	080031e3 	.word	0x080031e3
 8002f8c:	080031e3 	.word	0x080031e3
 8002f90:	080031e3 	.word	0x080031e3
 8002f94:	080031e3 	.word	0x080031e3
 8002f98:	080031e3 	.word	0x080031e3
 8002f9c:	080031e3 	.word	0x080031e3
 8002fa0:	08002fd7 	.word	0x08002fd7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fa4:	4b94      	ldr	r3, [pc, #592]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d009      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002fb0:	4b91      	ldr	r3, [pc, #580]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	08db      	lsrs	r3, r3, #3
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	4a90      	ldr	r2, [pc, #576]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002fc2:	e111      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fc4:	4b8d      	ldr	r3, [pc, #564]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fc6:	61bb      	str	r3, [r7, #24]
    break;
 8002fc8:	e10e      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002fca:	4b8d      	ldr	r3, [pc, #564]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fcc:	61bb      	str	r3, [r7, #24]
    break;
 8002fce:	e10b      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002fd0:	4b8c      	ldr	r3, [pc, #560]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fd2:	61bb      	str	r3, [r7, #24]
    break;
 8002fd4:	e108      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fd6:	4b88      	ldr	r3, [pc, #544]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002fe0:	4b85      	ldr	r3, [pc, #532]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002fec:	4b82      	ldr	r3, [pc, #520]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002ff6:	4b80      	ldr	r3, [pc, #512]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffa:	08db      	lsrs	r3, r3, #3
 8002ffc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	fb02 f303 	mul.w	r3, r2, r3
 8003006:	ee07 3a90 	vmov	s15, r3
 800300a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800300e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80e1 	beq.w	80031dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b02      	cmp	r3, #2
 800301e:	f000 8083 	beq.w	8003128 <HAL_RCC_GetSysClockFreq+0x204>
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b02      	cmp	r3, #2
 8003026:	f200 80a1 	bhi.w	800316c <HAL_RCC_GetSysClockFreq+0x248>
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0x114>
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d056      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003036:	e099      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003038:	4b6f      	ldr	r3, [pc, #444]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b00      	cmp	r3, #0
 8003042:	d02d      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003044:	4b6c      	ldr	r3, [pc, #432]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	08db      	lsrs	r3, r3, #3
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	4a6b      	ldr	r2, [pc, #428]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
 8003054:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	ee07 3a90 	vmov	s15, r3
 800305c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800306e:	4b62      	ldr	r3, [pc, #392]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003076:	ee07 3a90 	vmov	s15, r3
 800307a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800307e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003082:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003208 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800308a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800308e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800309e:	e087      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800320c <HAL_RCC_GetSysClockFreq+0x2e8>
 80030ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030b2:	4b51      	ldr	r3, [pc, #324]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ba:	ee07 3a90 	vmov	s15, r3
 80030be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003208 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030e2:	e065      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003210 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030f6:	4b40      	ldr	r3, [pc, #256]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030fe:	ee07 3a90 	vmov	s15, r3
 8003102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003106:	ed97 6a02 	vldr	s12, [r7, #8]
 800310a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003208 <HAL_RCC_GetSysClockFreq+0x2e4>
 800310e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800311a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800311e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003126:	e043      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003132:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003214 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800313a:	4b2f      	ldr	r3, [pc, #188]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800314a:	ed97 6a02 	vldr	s12, [r7, #8]
 800314e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003208 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800315a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800315e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800316a:	e021      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003176:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003210 <HAL_RCC_GetSysClockFreq+0x2ec>
 800317a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800317e:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800318e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003192:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003208 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800319a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800319e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031ae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	0a5b      	lsrs	r3, r3, #9
 80031b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ba:	3301      	adds	r3, #1
 80031bc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	ee07 3a90 	vmov	s15, r3
 80031c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80031cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031d4:	ee17 3a90 	vmov	r3, s15
 80031d8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80031da:	e005      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	61bb      	str	r3, [r7, #24]
    break;
 80031e0:	e002      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031e4:	61bb      	str	r3, [r7, #24]
    break;
 80031e6:	bf00      	nop
  }

  return sysclockfreq;
 80031e8:	69bb      	ldr	r3, [r7, #24]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3724      	adds	r7, #36	; 0x24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	58024400 	.word	0x58024400
 80031fc:	03d09000 	.word	0x03d09000
 8003200:	003d0900 	.word	0x003d0900
 8003204:	007a1200 	.word	0x007a1200
 8003208:	46000000 	.word	0x46000000
 800320c:	4c742400 	.word	0x4c742400
 8003210:	4a742400 	.word	0x4a742400
 8003214:	4af42400 	.word	0x4af42400

08003218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800321e:	f7ff fe81 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8003222:	4602      	mov	r2, r0
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_RCC_GetHCLKFreq+0x50>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	0a1b      	lsrs	r3, r3, #8
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	490f      	ldr	r1, [pc, #60]	; (800326c <HAL_RCC_GetHCLKFreq+0x54>)
 8003230:	5ccb      	ldrb	r3, [r1, r3]
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	fa22 f303 	lsr.w	r3, r2, r3
 800323a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <HAL_RCC_GetHCLKFreq+0x50>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	4a09      	ldr	r2, [pc, #36]	; (800326c <HAL_RCC_GetHCLKFreq+0x54>)
 8003246:	5cd3      	ldrb	r3, [r2, r3]
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	4a07      	ldr	r2, [pc, #28]	; (8003270 <HAL_RCC_GetHCLKFreq+0x58>)
 8003254:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003256:	4a07      	ldr	r2, [pc, #28]	; (8003274 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <HAL_RCC_GetHCLKFreq+0x58>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	58024400 	.word	0x58024400
 800326c:	080066bc 	.word	0x080066bc
 8003270:	24000004 	.word	0x24000004
 8003274:	24000000 	.word	0x24000000

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800327c:	f7ff ffcc 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4904      	ldr	r1, [pc, #16]	; (80032a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	58024400 	.word	0x58024400
 80032a0:	080066bc 	.word	0x080066bc

080032a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032a8:	f7ff ffb6 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4904      	ldr	r1, [pc, #16]	; (80032cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	58024400 	.word	0x58024400
 80032cc:	080066bc 	.word	0x080066bc

080032d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032d8:	2300      	movs	r3, #0
 80032da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032dc:	2300      	movs	r3, #0
 80032de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d03f      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032f4:	d02a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032fa:	d824      	bhi.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003300:	d018      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003306:	d81e      	bhi.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800330c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003310:	d007      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003312:	e018      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003314:	4ba3      	ldr	r3, [pc, #652]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	4aa2      	ldr	r2, [pc, #648]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800331a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003320:	e015      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3304      	adds	r3, #4
 8003326:	2102      	movs	r1, #2
 8003328:	4618      	mov	r0, r3
 800332a:	f001 f9d5 	bl	80046d8 <RCCEx_PLL2_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003332:	e00c      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3324      	adds	r3, #36	; 0x24
 8003338:	2102      	movs	r1, #2
 800333a:	4618      	mov	r0, r3
 800333c:	f001 fa7e 	bl	800483c <RCCEx_PLL3_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003344:	e003      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	75fb      	strb	r3, [r7, #23]
      break;
 800334a:	e000      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800334c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d109      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003354:	4b93      	ldr	r3, [pc, #588]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003360:	4990      	ldr	r1, [pc, #576]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003362:	4313      	orrs	r3, r2
 8003364:	650b      	str	r3, [r1, #80]	; 0x50
 8003366:	e001      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003368:	7dfb      	ldrb	r3, [r7, #23]
 800336a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d03d      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337c:	2b04      	cmp	r3, #4
 800337e:	d826      	bhi.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003380:	a201      	add	r2, pc, #4	; (adr r2, 8003388 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003386:	bf00      	nop
 8003388:	0800339d 	.word	0x0800339d
 800338c:	080033ab 	.word	0x080033ab
 8003390:	080033bd 	.word	0x080033bd
 8003394:	080033d5 	.word	0x080033d5
 8003398:	080033d5 	.word	0x080033d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800339c:	4b81      	ldr	r3, [pc, #516]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	4a80      	ldr	r2, [pc, #512]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033a8:	e015      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3304      	adds	r3, #4
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f001 f991 	bl	80046d8 <RCCEx_PLL2_Config>
 80033b6:	4603      	mov	r3, r0
 80033b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033ba:	e00c      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3324      	adds	r3, #36	; 0x24
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f001 fa3a 	bl	800483c <RCCEx_PLL3_Config>
 80033c8:	4603      	mov	r3, r0
 80033ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033cc:	e003      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	75fb      	strb	r3, [r7, #23]
      break;
 80033d2:	e000      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80033d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d109      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033dc:	4b71      	ldr	r3, [pc, #452]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e0:	f023 0207 	bic.w	r2, r3, #7
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	496e      	ldr	r1, [pc, #440]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	650b      	str	r3, [r1, #80]	; 0x50
 80033ee:	e001      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d042      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003408:	d02b      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800340a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800340e:	d825      	bhi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003410:	2bc0      	cmp	r3, #192	; 0xc0
 8003412:	d028      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003414:	2bc0      	cmp	r3, #192	; 0xc0
 8003416:	d821      	bhi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003418:	2b80      	cmp	r3, #128	; 0x80
 800341a:	d016      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800341c:	2b80      	cmp	r3, #128	; 0x80
 800341e:	d81d      	bhi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003424:	2b40      	cmp	r3, #64	; 0x40
 8003426:	d007      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003428:	e018      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800342a:	4b5e      	ldr	r3, [pc, #376]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	4a5d      	ldr	r2, [pc, #372]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003434:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003436:	e017      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	2100      	movs	r1, #0
 800343e:	4618      	mov	r0, r3
 8003440:	f001 f94a 	bl	80046d8 <RCCEx_PLL2_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003448:	e00e      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3324      	adds	r3, #36	; 0x24
 800344e:	2100      	movs	r1, #0
 8003450:	4618      	mov	r0, r3
 8003452:	f001 f9f3 	bl	800483c <RCCEx_PLL3_Config>
 8003456:	4603      	mov	r3, r0
 8003458:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800345a:	e005      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	75fb      	strb	r3, [r7, #23]
      break;
 8003460:	e002      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003462:	bf00      	nop
 8003464:	e000      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800346e:	4b4d      	ldr	r3, [pc, #308]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003472:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	494a      	ldr	r1, [pc, #296]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800347c:	4313      	orrs	r3, r2
 800347e:	650b      	str	r3, [r1, #80]	; 0x50
 8003480:	e001      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003482:	7dfb      	ldrb	r3, [r7, #23]
 8003484:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348e:	2b00      	cmp	r3, #0
 8003490:	d049      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003498:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800349c:	d030      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800349e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034a2:	d82a      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80034a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80034a8:	d02c      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80034aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80034ae:	d824      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80034b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034b4:	d018      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80034b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ba:	d81e      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80034c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034c4:	d007      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80034c6:	e018      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c8:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	4a35      	ldr	r2, [pc, #212]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034d4:	e017      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3304      	adds	r3, #4
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f001 f8fb 	bl	80046d8 <RCCEx_PLL2_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80034e6:	e00e      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3324      	adds	r3, #36	; 0x24
 80034ec:	2100      	movs	r1, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f001 f9a4 	bl	800483c <RCCEx_PLL3_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034f8:	e005      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	75fb      	strb	r3, [r7, #23]
      break;
 80034fe:	e002      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003500:	bf00      	nop
 8003502:	e000      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800350c:	4b25      	ldr	r3, [pc, #148]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800351a:	4922      	ldr	r1, [pc, #136]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	658b      	str	r3, [r1, #88]	; 0x58
 8003520:	e001      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352e:	2b00      	cmp	r3, #0
 8003530:	d04b      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800353c:	d030      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800353e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003542:	d82a      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003544:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003548:	d02e      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800354a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800354e:	d824      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003550:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003554:	d018      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003556:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800355a:	d81e      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003564:	d007      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003566:	e018      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003568:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	4a0d      	ldr	r2, [pc, #52]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800356e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003572:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003574:	e019      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3304      	adds	r3, #4
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f001 f8ab 	bl	80046d8 <RCCEx_PLL2_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003586:	e010      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3324      	adds	r3, #36	; 0x24
 800358c:	2100      	movs	r1, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f001 f954 	bl	800483c <RCCEx_PLL3_Config>
 8003594:	4603      	mov	r3, r0
 8003596:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003598:	e007      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	75fb      	strb	r3, [r7, #23]
      break;
 800359e:	e004      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80035a0:	bf00      	nop
 80035a2:	e002      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80035a4:	58024400 	.word	0x58024400
      break;
 80035a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035aa:	7dfb      	ldrb	r3, [r7, #23]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10a      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80035b0:	4b99      	ldr	r3, [pc, #612]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035be:	4996      	ldr	r1, [pc, #600]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	658b      	str	r3, [r1, #88]	; 0x58
 80035c4:	e001      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
 80035c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d032      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035da:	2b30      	cmp	r3, #48	; 0x30
 80035dc:	d01c      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80035de:	2b30      	cmp	r3, #48	; 0x30
 80035e0:	d817      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d00c      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d813      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d016      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d10f      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f2:	4b89      	ldr	r3, [pc, #548]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	4a88      	ldr	r2, [pc, #544]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80035fe:	e00e      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	2102      	movs	r1, #2
 8003606:	4618      	mov	r0, r3
 8003608:	f001 f866 	bl	80046d8 <RCCEx_PLL2_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003610:	e005      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	75fb      	strb	r3, [r7, #23]
      break;
 8003616:	e002      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800361c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d109      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003624:	4b7c      	ldr	r3, [pc, #496]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003628:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003630:	4979      	ldr	r1, [pc, #484]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003632:	4313      	orrs	r3, r2
 8003634:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003636:	e001      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003638:	7dfb      	ldrb	r3, [r7, #23]
 800363a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d047      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003650:	d030      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003652:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003656:	d82a      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003658:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800365c:	d02c      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800365e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003662:	d824      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003668:	d018      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800366a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800366e:	d81e      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003678:	d007      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800367a:	e018      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800367c:	4b66      	ldr	r3, [pc, #408]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	4a65      	ldr	r2, [pc, #404]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003686:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003688:	e017      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3304      	adds	r3, #4
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f001 f821 	bl	80046d8 <RCCEx_PLL2_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800369a:	e00e      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3324      	adds	r3, #36	; 0x24
 80036a0:	2100      	movs	r1, #0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f001 f8ca 	bl	800483c <RCCEx_PLL3_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036ac:	e005      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	75fb      	strb	r3, [r7, #23]
      break;
 80036b2:	e002      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80036b4:	bf00      	nop
 80036b6:	e000      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80036b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036c0:	4b55      	ldr	r3, [pc, #340]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	4952      	ldr	r1, [pc, #328]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	650b      	str	r3, [r1, #80]	; 0x50
 80036d2:	e001      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d049      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ec:	d02e      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80036ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f2:	d828      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80036f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036f8:	d02a      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80036fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036fe:	d822      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003700:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003704:	d026      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003706:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800370a:	d81c      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800370c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003710:	d010      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003716:	d816      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01d      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800371c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003720:	d111      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3304      	adds	r3, #4
 8003726:	2101      	movs	r1, #1
 8003728:	4618      	mov	r0, r3
 800372a:	f000 ffd5 	bl	80046d8 <RCCEx_PLL2_Config>
 800372e:	4603      	mov	r3, r0
 8003730:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003732:	e012      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3324      	adds	r3, #36	; 0x24
 8003738:	2101      	movs	r1, #1
 800373a:	4618      	mov	r0, r3
 800373c:	f001 f87e 	bl	800483c <RCCEx_PLL3_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003744:	e009      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	75fb      	strb	r3, [r7, #23]
      break;
 800374a:	e006      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800374c:	bf00      	nop
 800374e:	e004      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003750:	bf00      	nop
 8003752:	e002      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003754:	bf00      	nop
 8003756:	e000      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003760:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003764:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376c:	492a      	ldr	r1, [pc, #168]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800376e:	4313      	orrs	r3, r2
 8003770:	650b      	str	r3, [r1, #80]	; 0x50
 8003772:	e001      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003774:	7dfb      	ldrb	r3, [r7, #23]
 8003776:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d04d      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800378a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800378e:	d02e      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003794:	d828      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379a:	d02a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800379c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a0:	d822      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80037a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037a6:	d026      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80037a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037ac:	d81c      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80037ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b2:	d010      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80037b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b8:	d816      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d01d      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80037be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037c2:	d111      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3304      	adds	r3, #4
 80037c8:	2101      	movs	r1, #1
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 ff84 	bl	80046d8 <RCCEx_PLL2_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80037d4:	e012      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3324      	adds	r3, #36	; 0x24
 80037da:	2101      	movs	r1, #1
 80037dc:	4618      	mov	r0, r3
 80037de:	f001 f82d 	bl	800483c <RCCEx_PLL3_Config>
 80037e2:	4603      	mov	r3, r0
 80037e4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80037e6:	e009      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	75fb      	strb	r3, [r7, #23]
      break;
 80037ec:	e006      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80037ee:	bf00      	nop
 80037f0:	e004      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80037f2:	bf00      	nop
 80037f4:	e002      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80037fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10c      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003806:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003810:	4901      	ldr	r1, [pc, #4]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003812:	4313      	orrs	r3, r2
 8003814:	658b      	str	r3, [r1, #88]	; 0x58
 8003816:	e003      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d02f      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003834:	d00e      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800383a:	d814      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d015      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003844:	d10f      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003846:	4baf      	ldr	r3, [pc, #700]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	4aae      	ldr	r2, [pc, #696]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800384c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003850:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003852:	e00c      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	2101      	movs	r1, #1
 800385a:	4618      	mov	r0, r3
 800385c:	f000 ff3c 	bl	80046d8 <RCCEx_PLL2_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003864:	e003      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
      break;
 800386a:	e000      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800386c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800386e:	7dfb      	ldrb	r3, [r7, #23]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d109      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003874:	4ba3      	ldr	r3, [pc, #652]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003878:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003880:	49a0      	ldr	r1, [pc, #640]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003882:	4313      	orrs	r3, r2
 8003884:	650b      	str	r3, [r1, #80]	; 0x50
 8003886:	e001      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003888:	7dfb      	ldrb	r3, [r7, #23]
 800388a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d032      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	2b03      	cmp	r3, #3
 800389e:	d81b      	bhi.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80038a0:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80038a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a6:	bf00      	nop
 80038a8:	080038df 	.word	0x080038df
 80038ac:	080038b9 	.word	0x080038b9
 80038b0:	080038c7 	.word	0x080038c7
 80038b4:	080038df 	.word	0x080038df
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b8:	4b92      	ldr	r3, [pc, #584]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	4a91      	ldr	r2, [pc, #580]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80038c4:	e00c      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3304      	adds	r3, #4
 80038ca:	2102      	movs	r1, #2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 ff03 	bl	80046d8 <RCCEx_PLL2_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80038d6:	e003      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	75fb      	strb	r3, [r7, #23]
      break;
 80038dc:	e000      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80038de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80038e6:	4b87      	ldr	r3, [pc, #540]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ea:	f023 0203 	bic.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	4984      	ldr	r1, [pc, #528]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80038f8:	e001      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fa:	7dfb      	ldrb	r3, [r7, #23]
 80038fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8086 	beq.w	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800390c:	4b7e      	ldr	r3, [pc, #504]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a7d      	ldr	r2, [pc, #500]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003916:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003918:	f7fd fc28 	bl	800116c <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800391e:	e009      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003920:	f7fd fc24 	bl	800116c <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	; 0x64
 800392c:	d902      	bls.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	75fb      	strb	r3, [r7, #23]
        break;
 8003932:	e005      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003934:	4b74      	ldr	r3, [pc, #464]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ef      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003940:	7dfb      	ldrb	r3, [r7, #23]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d166      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003946:	4b6f      	ldr	r3, [pc, #444]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003948:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003950:	4053      	eors	r3, r2
 8003952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003956:	2b00      	cmp	r3, #0
 8003958:	d013      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800395a:	4b6a      	ldr	r3, [pc, #424]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003962:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003964:	4b67      	ldr	r3, [pc, #412]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	4a66      	ldr	r2, [pc, #408]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800396a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003970:	4b64      	ldr	r3, [pc, #400]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	4a63      	ldr	r2, [pc, #396]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800397c:	4a61      	ldr	r2, [pc, #388]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398c:	d115      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398e:	f7fd fbed 	bl	800116c <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003994:	e00b      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003996:	f7fd fbe9 	bl	800116c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d902      	bls.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	75fb      	strb	r3, [r7, #23]
            break;
 80039ac:	e005      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039ae:	4b55      	ldr	r3, [pc, #340]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0ed      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d126      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ce:	d10d      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80039d0:	4b4c      	ldr	r3, [pc, #304]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039de:	0919      	lsrs	r1, r3, #4
 80039e0:	4b4a      	ldr	r3, [pc, #296]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80039e2:	400b      	ands	r3, r1
 80039e4:	4947      	ldr	r1, [pc, #284]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	610b      	str	r3, [r1, #16]
 80039ea:	e005      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80039ec:	4b45      	ldr	r3, [pc, #276]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	4a44      	ldr	r2, [pc, #272]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80039f6:	6113      	str	r3, [r2, #16]
 80039f8:	4b42      	ldr	r3, [pc, #264]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a06:	493f      	ldr	r1, [pc, #252]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	670b      	str	r3, [r1, #112]	; 0x70
 8003a0c:	e004      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
 8003a10:	75bb      	strb	r3, [r7, #22]
 8003a12:	e001      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
 8003a16:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 8085 	beq.w	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a2a:	2b28      	cmp	r3, #40	; 0x28
 8003a2c:	d866      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003a2e:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003b11 	.word	0x08003b11
 8003a38:	08003afd 	.word	0x08003afd
 8003a3c:	08003afd 	.word	0x08003afd
 8003a40:	08003afd 	.word	0x08003afd
 8003a44:	08003afd 	.word	0x08003afd
 8003a48:	08003afd 	.word	0x08003afd
 8003a4c:	08003afd 	.word	0x08003afd
 8003a50:	08003afd 	.word	0x08003afd
 8003a54:	08003ad9 	.word	0x08003ad9
 8003a58:	08003afd 	.word	0x08003afd
 8003a5c:	08003afd 	.word	0x08003afd
 8003a60:	08003afd 	.word	0x08003afd
 8003a64:	08003afd 	.word	0x08003afd
 8003a68:	08003afd 	.word	0x08003afd
 8003a6c:	08003afd 	.word	0x08003afd
 8003a70:	08003afd 	.word	0x08003afd
 8003a74:	08003aeb 	.word	0x08003aeb
 8003a78:	08003afd 	.word	0x08003afd
 8003a7c:	08003afd 	.word	0x08003afd
 8003a80:	08003afd 	.word	0x08003afd
 8003a84:	08003afd 	.word	0x08003afd
 8003a88:	08003afd 	.word	0x08003afd
 8003a8c:	08003afd 	.word	0x08003afd
 8003a90:	08003afd 	.word	0x08003afd
 8003a94:	08003b11 	.word	0x08003b11
 8003a98:	08003afd 	.word	0x08003afd
 8003a9c:	08003afd 	.word	0x08003afd
 8003aa0:	08003afd 	.word	0x08003afd
 8003aa4:	08003afd 	.word	0x08003afd
 8003aa8:	08003afd 	.word	0x08003afd
 8003aac:	08003afd 	.word	0x08003afd
 8003ab0:	08003afd 	.word	0x08003afd
 8003ab4:	08003b11 	.word	0x08003b11
 8003ab8:	08003afd 	.word	0x08003afd
 8003abc:	08003afd 	.word	0x08003afd
 8003ac0:	08003afd 	.word	0x08003afd
 8003ac4:	08003afd 	.word	0x08003afd
 8003ac8:	08003afd 	.word	0x08003afd
 8003acc:	08003afd 	.word	0x08003afd
 8003ad0:	08003afd 	.word	0x08003afd
 8003ad4:	08003b11 	.word	0x08003b11
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3304      	adds	r3, #4
 8003adc:	2101      	movs	r1, #1
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fdfa 	bl	80046d8 <RCCEx_PLL2_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ae8:	e013      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3324      	adds	r3, #36	; 0x24
 8003aee:	2101      	movs	r1, #1
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fea3 	bl	800483c <RCCEx_PLL3_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003afa:	e00a      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	75fb      	strb	r3, [r7, #23]
      break;
 8003b00:	e007      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b02:	bf00      	nop
 8003b04:	58024400 	.word	0x58024400
 8003b08:	58024800 	.word	0x58024800
 8003b0c:	00ffffcf 	.word	0x00ffffcf
      break;
 8003b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b18:	4b96      	ldr	r3, [pc, #600]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b24:	4993      	ldr	r1, [pc, #588]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	654b      	str	r3, [r1, #84]	; 0x54
 8003b2a:	e001      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d038      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b40:	2b05      	cmp	r3, #5
 8003b42:	d821      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003b44:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003b8f 	.word	0x08003b8f
 8003b50:	08003b65 	.word	0x08003b65
 8003b54:	08003b77 	.word	0x08003b77
 8003b58:	08003b8f 	.word	0x08003b8f
 8003b5c:	08003b8f 	.word	0x08003b8f
 8003b60:	08003b8f 	.word	0x08003b8f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3304      	adds	r3, #4
 8003b68:	2101      	movs	r1, #1
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fdb4 	bl	80046d8 <RCCEx_PLL2_Config>
 8003b70:	4603      	mov	r3, r0
 8003b72:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003b74:	e00c      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3324      	adds	r3, #36	; 0x24
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fe5d 	bl	800483c <RCCEx_PLL3_Config>
 8003b82:	4603      	mov	r3, r0
 8003b84:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003b86:	e003      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b8c:	e000      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b96:	4b77      	ldr	r3, [pc, #476]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9a:	f023 0207 	bic.w	r2, r3, #7
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba2:	4974      	ldr	r1, [pc, #464]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	654b      	str	r3, [r1, #84]	; 0x54
 8003ba8:	e001      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d03a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc0:	2b05      	cmp	r3, #5
 8003bc2:	d821      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003c0f 	.word	0x08003c0f
 8003bd0:	08003be5 	.word	0x08003be5
 8003bd4:	08003bf7 	.word	0x08003bf7
 8003bd8:	08003c0f 	.word	0x08003c0f
 8003bdc:	08003c0f 	.word	0x08003c0f
 8003be0:	08003c0f 	.word	0x08003c0f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3304      	adds	r3, #4
 8003be8:	2101      	movs	r1, #1
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 fd74 	bl	80046d8 <RCCEx_PLL2_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003bf4:	e00c      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3324      	adds	r3, #36	; 0x24
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fe1d 	bl	800483c <RCCEx_PLL3_Config>
 8003c02:	4603      	mov	r3, r0
 8003c04:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c06:	e003      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c0c:	e000      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c16:	4b57      	ldr	r3, [pc, #348]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	f023 0207 	bic.w	r2, r3, #7
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c24:	4953      	ldr	r1, [pc, #332]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	658b      	str	r3, [r1, #88]	; 0x58
 8003c2a:	e001      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d04b      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c46:	d02e      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c4c:	d828      	bhi.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c52:	d02a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c58:	d822      	bhi.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003c5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c5e:	d026      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003c60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c64:	d81c      	bhi.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c6a:	d010      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c70:	d816      	bhi.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d01d      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003c76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c7a:	d111      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fd28 	bl	80046d8 <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003c8c:	e012      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3324      	adds	r3, #36	; 0x24
 8003c92:	2102      	movs	r1, #2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fdd1 	bl	800483c <RCCEx_PLL3_Config>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003c9e:	e009      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca4:	e006      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ca6:	bf00      	nop
 8003ca8:	e004      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003caa:	bf00      	nop
 8003cac:	e002      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003cae:	bf00      	nop
 8003cb0:	e000      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cba:	4b2e      	ldr	r3, [pc, #184]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc8:	492a      	ldr	r1, [pc, #168]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	654b      	str	r3, [r1, #84]	; 0x54
 8003cce:	e001      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	7dfb      	ldrb	r3, [r7, #23]
 8003cd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d04d      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ce6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cea:	d02e      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003cec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cf0:	d828      	bhi.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf6:	d02a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfc:	d822      	bhi.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003cfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d02:	d026      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003d04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d08:	d81c      	bhi.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d0e:	d010      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d14:	d816      	bhi.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01d      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1e:	d111      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3304      	adds	r3, #4
 8003d24:	2100      	movs	r1, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fcd6 	bl	80046d8 <RCCEx_PLL2_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d30:	e012      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3324      	adds	r3, #36	; 0x24
 8003d36:	2102      	movs	r1, #2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fd7f 	bl	800483c <RCCEx_PLL3_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d42:	e009      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	75fb      	strb	r3, [r7, #23]
      break;
 8003d48:	e006      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003d4a:	bf00      	nop
 8003d4c:	e004      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003d4e:	bf00      	nop
 8003d50:	e002      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003d52:	bf00      	nop
 8003d54:	e000      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003d56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d58:	7dfb      	ldrb	r3, [r7, #23]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d62:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d6c:	4901      	ldr	r1, [pc, #4]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	658b      	str	r3, [r1, #88]	; 0x58
 8003d72:	e003      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003d74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d04b      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d8e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d92:	d02e      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003d94:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d98:	d828      	bhi.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d9e:	d02a      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da4:	d822      	bhi.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003da6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003daa:	d026      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003dac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003db0:	d81c      	bhi.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003db2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003db6:	d010      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dbc:	d816      	bhi.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d01d      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc6:	d111      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fc82 	bl	80046d8 <RCCEx_PLL2_Config>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003dd8:	e012      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3324      	adds	r3, #36	; 0x24
 8003dde:	2102      	movs	r1, #2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fd2b 	bl	800483c <RCCEx_PLL3_Config>
 8003de6:	4603      	mov	r3, r0
 8003de8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003dea:	e009      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	75fb      	strb	r3, [r7, #23]
      break;
 8003df0:	e006      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003df2:	bf00      	nop
 8003df4:	e004      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003df6:	bf00      	nop
 8003df8:	e002      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e000      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e06:	4b9d      	ldr	r3, [pc, #628]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e14:	4999      	ldr	r1, [pc, #612]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	658b      	str	r3, [r1, #88]	; 0x58
 8003e1a:	e001      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1c:	7dfb      	ldrb	r3, [r7, #23]
 8003e1e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e36:	d10a      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3324      	adds	r3, #36	; 0x24
 8003e3c:	2102      	movs	r1, #2
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fcfc 	bl	800483c <RCCEx_PLL3_Config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e4e:	4b8b      	ldr	r3, [pc, #556]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e5c:	4987      	ldr	r1, [pc, #540]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01a      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e78:	d10a      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3324      	adds	r3, #36	; 0x24
 8003e7e:	2102      	movs	r1, #2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fcdb 	bl	800483c <RCCEx_PLL3_Config>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e90:	4b7a      	ldr	r3, [pc, #488]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e9e:	4977      	ldr	r1, [pc, #476]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d034      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003eb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eba:	d01d      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ec0:	d817      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eca:	d009      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003ecc:	e011      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fbff 	bl	80046d8 <RCCEx_PLL2_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ede:	e00c      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3324      	adds	r3, #36	; 0x24
 8003ee4:	2102      	movs	r1, #2
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fca8 	bl	800483c <RCCEx_PLL3_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ef0:	e003      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef6:	e000      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003efa:	7dfb      	ldrb	r3, [r7, #23]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10a      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f00:	4b5e      	ldr	r3, [pc, #376]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f0e:	495b      	ldr	r1, [pc, #364]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	658b      	str	r3, [r1, #88]	; 0x58
 8003f14:	e001      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d033      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f30:	d01c      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003f32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f36:	d816      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003f38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f3c:	d003      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003f3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f42:	d007      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003f44:	e00f      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f46:	4b4d      	ldr	r3, [pc, #308]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	4a4c      	ldr	r2, [pc, #304]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003f52:	e00c      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3324      	adds	r3, #36	; 0x24
 8003f58:	2101      	movs	r1, #1
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fc6e 	bl	800483c <RCCEx_PLL3_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003f64:	e003      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	75fb      	strb	r3, [r7, #23]
      break;
 8003f6a:	e000      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f6e:	7dfb      	ldrb	r3, [r7, #23]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f74:	4b41      	ldr	r3, [pc, #260]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f82:	493e      	ldr	r1, [pc, #248]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	654b      	str	r3, [r1, #84]	; 0x54
 8003f88:	e001      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8a:	7dfb      	ldrb	r3, [r7, #23]
 8003f8c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d029      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa6:	d007      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003fa8:	e00f      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003faa:	4b34      	ldr	r3, [pc, #208]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fae:	4a33      	ldr	r2, [pc, #204]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003fb6:	e00b      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	2102      	movs	r1, #2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fb8a 	bl	80046d8 <RCCEx_PLL2_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003fc8:	e002      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8003fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003fd6:	4b29      	ldr	r3, [pc, #164]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe2:	4926      	ldr	r1, [pc, #152]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003fe8:	e001      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fea:	7dfb      	ldrb	r3, [r7, #23]
 8003fec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3324      	adds	r3, #36	; 0x24
 8003ffe:	2102      	movs	r1, #2
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fc1b 	bl	800483c <RCCEx_PLL3_Config>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d033      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004024:	d017      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402a:	d811      	bhi.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800402c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004030:	d013      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004036:	d80b      	bhi.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d010      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800403c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004040:	d106      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004042:	4b0e      	ldr	r3, [pc, #56]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	4a0d      	ldr	r2, [pc, #52]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800404e:	e007      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	75fb      	strb	r3, [r7, #23]
      break;
 8004054:	e004      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004056:	bf00      	nop
 8004058:	e002      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800405a:	bf00      	nop
 800405c:	e000      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800405e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004060:	7dfb      	ldrb	r3, [r7, #23]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10c      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004072:	4902      	ldr	r1, [pc, #8]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004074:	4313      	orrs	r3, r2
 8004076:	654b      	str	r3, [r1, #84]	; 0x54
 8004078:	e004      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800407a:	bf00      	nop
 800407c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004080:	7dfb      	ldrb	r3, [r7, #23]
 8004082:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004090:	4b31      	ldr	r3, [pc, #196]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004094:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409c:	492e      	ldr	r1, [pc, #184]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80040ae:	4b2a      	ldr	r3, [pc, #168]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80040bc:	4926      	ldr	r1, [pc, #152]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d008      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040ce:	4b22      	ldr	r3, [pc, #136]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040da:	491f      	ldr	r1, [pc, #124]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00d      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040ec:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	4a19      	ldr	r2, [pc, #100]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040f6:	6113      	str	r3, [r2, #16]
 80040f8:	4b17      	ldr	r3, [pc, #92]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004102:	4915      	ldr	r1, [pc, #84]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004104:	4313      	orrs	r3, r2
 8004106:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	da08      	bge.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004110:	4b11      	ldr	r3, [pc, #68]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004114:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411c:	490e      	ldr	r1, [pc, #56]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800411e:	4313      	orrs	r3, r2
 8004120:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800412e:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004132:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413c:	4906      	ldr	r1, [pc, #24]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800413e:	4313      	orrs	r3, r2
 8004140:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004142:	7dbb      	ldrb	r3, [r7, #22]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	e000      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	58024400 	.word	0x58024400

0800415c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004160:	f7ff f85a 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 8004164:	4602      	mov	r2, r0
 8004166:	4b06      	ldr	r3, [pc, #24]	; (8004180 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	091b      	lsrs	r3, r3, #4
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	4904      	ldr	r1, [pc, #16]	; (8004184 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004172:	5ccb      	ldrb	r3, [r1, r3]
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800417c:	4618      	mov	r0, r3
 800417e:	bd80      	pop	{r7, pc}
 8004180:	58024400 	.word	0x58024400
 8004184:	080066bc 	.word	0x080066bc

08004188 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004188:	b480      	push	{r7}
 800418a:	b089      	sub	sp, #36	; 0x24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004190:	4ba1      	ldr	r3, [pc, #644]	; (8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	f003 0303 	and.w	r3, r3, #3
 8004198:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800419a:	4b9f      	ldr	r3, [pc, #636]	; (8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	0b1b      	lsrs	r3, r3, #12
 80041a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80041a6:	4b9c      	ldr	r3, [pc, #624]	; (8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80041b2:	4b99      	ldr	r3, [pc, #612]	; (8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b6:	08db      	lsrs	r3, r3, #3
 80041b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	fb02 f303 	mul.w	r3, r2, r3
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 8111 	beq.w	80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	f000 8083 	beq.w	80042e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	f200 80a1 	bhi.w	8004328 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d056      	beq.n	80042a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80041f2:	e099      	b.n	8004328 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041f4:	4b88      	ldr	r3, [pc, #544]	; (8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d02d      	beq.n	800425c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004200:	4b85      	ldr	r3, [pc, #532]	; (8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	08db      	lsrs	r3, r3, #3
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	4a84      	ldr	r2, [pc, #528]	; (800441c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
 8004210:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422a:	4b7b      	ldr	r3, [pc, #492]	; (8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423a:	ed97 6a03 	vldr	s12, [r7, #12]
 800423e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800424e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004256:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800425a:	e087      	b.n	800436c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004266:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800426a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800426e:	4b6a      	ldr	r3, [pc, #424]	; (8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004276:	ee07 3a90 	vmov	s15, r3
 800427a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800427e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004282:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800428a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800428e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800429e:	e065      	b.n	800436c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	ee07 3a90 	vmov	s15, r3
 80042a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80042ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042b2:	4b59      	ldr	r3, [pc, #356]	; (8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042e2:	e043      	b.n	800436c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800442c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80042f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042f6:	4b48      	ldr	r3, [pc, #288]	; (8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004306:	ed97 6a03 	vldr	s12, [r7, #12]
 800430a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800430e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800431a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800431e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004322:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004326:	e021      	b.n	800436c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004332:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800433a:	4b37      	ldr	r3, [pc, #220]	; (8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800433c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004342:	ee07 3a90 	vmov	s15, r3
 8004346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800434a:	ed97 6a03 	vldr	s12, [r7, #12]
 800434e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800435a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800435e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004366:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800436a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800436c:	4b2a      	ldr	r3, [pc, #168]	; (8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	0a5b      	lsrs	r3, r3, #9
 8004372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004382:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004386:	edd7 6a07 	vldr	s13, [r7, #28]
 800438a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800438e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004392:	ee17 2a90 	vmov	r2, s15
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800439a:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	0c1b      	lsrs	r3, r3, #16
 80043a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a4:	ee07 3a90 	vmov	s15, r3
 80043a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80043b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043c0:	ee17 2a90 	vmov	r2, s15
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80043c8:	4b13      	ldr	r3, [pc, #76]	; (8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	0e1b      	lsrs	r3, r3, #24
 80043ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80043e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ee:	ee17 2a90 	vmov	r2, s15
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80043f6:	e008      	b.n	800440a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]
}
 800440a:	bf00      	nop
 800440c:	3724      	adds	r7, #36	; 0x24
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	58024400 	.word	0x58024400
 800441c:	03d09000 	.word	0x03d09000
 8004420:	46000000 	.word	0x46000000
 8004424:	4c742400 	.word	0x4c742400
 8004428:	4a742400 	.word	0x4a742400
 800442c:	4af42400 	.word	0x4af42400

08004430 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004430:	b480      	push	{r7}
 8004432:	b089      	sub	sp, #36	; 0x24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004438:	4ba1      	ldr	r3, [pc, #644]	; (80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004442:	4b9f      	ldr	r3, [pc, #636]	; (80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	0d1b      	lsrs	r3, r3, #20
 8004448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800444c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800444e:	4b9c      	ldr	r3, [pc, #624]	; (80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	0a1b      	lsrs	r3, r3, #8
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800445a:	4b99      	ldr	r3, [pc, #612]	; (80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	08db      	lsrs	r3, r3, #3
 8004460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	fb02 f303 	mul.w	r3, r2, r3
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004472:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8111 	beq.w	80046a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2b02      	cmp	r3, #2
 8004482:	f000 8083 	beq.w	800458c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b02      	cmp	r3, #2
 800448a:	f200 80a1 	bhi.w	80045d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d056      	beq.n	8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800449a:	e099      	b.n	80045d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800449c:	4b88      	ldr	r3, [pc, #544]	; (80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d02d      	beq.n	8004504 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044a8:	4b85      	ldr	r3, [pc, #532]	; (80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	08db      	lsrs	r3, r3, #3
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	4a84      	ldr	r2, [pc, #528]	; (80046c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80044b4:	fa22 f303 	lsr.w	r3, r2, r3
 80044b8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	ee07 3a90 	vmov	s15, r3
 80044c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d2:	4b7b      	ldr	r3, [pc, #492]	; (80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004502:	e087      	b.n	8004614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004516:	4b6a      	ldr	r3, [pc, #424]	; (80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004526:	ed97 6a03 	vldr	s12, [r7, #12]
 800452a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800452e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004542:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004546:	e065      	b.n	8004614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004552:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80046d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455a:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456a:	ed97 6a03 	vldr	s12, [r7, #12]
 800456e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800457e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004586:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800458a:	e043      	b.n	8004614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004596:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80046d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800459a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800459e:	4b48      	ldr	r3, [pc, #288]	; (80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80045b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045ce:	e021      	b.n	8004614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80046d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80045de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e2:	4b37      	ldr	r3, [pc, #220]	; (80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004612:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004614:	4b2a      	ldr	r3, [pc, #168]	; (80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	0a5b      	lsrs	r3, r3, #9
 800461a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800462a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800462e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800463a:	ee17 2a90 	vmov	r2, s15
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004642:	4b1f      	ldr	r3, [pc, #124]	; (80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800464c:	ee07 3a90 	vmov	s15, r3
 8004650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004658:	ee37 7a87 	vadd.f32	s14, s15, s14
 800465c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004668:	ee17 2a90 	vmov	r2, s15
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004670:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	0e1b      	lsrs	r3, r3, #24
 8004676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800468a:	edd7 6a07 	vldr	s13, [r7, #28]
 800468e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004696:	ee17 2a90 	vmov	r2, s15
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800469e:	e008      	b.n	80046b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	609a      	str	r2, [r3, #8]
}
 80046b2:	bf00      	nop
 80046b4:	3724      	adds	r7, #36	; 0x24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	58024400 	.word	0x58024400
 80046c4:	03d09000 	.word	0x03d09000
 80046c8:	46000000 	.word	0x46000000
 80046cc:	4c742400 	.word	0x4c742400
 80046d0:	4a742400 	.word	0x4a742400
 80046d4:	4af42400 	.word	0x4af42400

080046d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046e6:	4b53      	ldr	r3, [pc, #332]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d101      	bne.n	80046f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e099      	b.n	800482a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80046f6:	4b4f      	ldr	r3, [pc, #316]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a4e      	ldr	r2, [pc, #312]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80046fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004702:	f7fc fd33 	bl	800116c <HAL_GetTick>
 8004706:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004708:	e008      	b.n	800471c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800470a:	f7fc fd2f 	bl	800116c <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e086      	b.n	800482a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800471c:	4b45      	ldr	r3, [pc, #276]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f0      	bne.n	800470a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004728:	4b42      	ldr	r3, [pc, #264]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	031b      	lsls	r3, r3, #12
 8004736:	493f      	ldr	r1, [pc, #252]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 8004738:	4313      	orrs	r3, r2
 800473a:	628b      	str	r3, [r1, #40]	; 0x28
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	3b01      	subs	r3, #1
 8004742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	3b01      	subs	r3, #1
 800474c:	025b      	lsls	r3, r3, #9
 800474e:	b29b      	uxth	r3, r3
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	3b01      	subs	r3, #1
 8004758:	041b      	lsls	r3, r3, #16
 800475a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	3b01      	subs	r3, #1
 8004766:	061b      	lsls	r3, r3, #24
 8004768:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800476c:	4931      	ldr	r1, [pc, #196]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 800476e:	4313      	orrs	r3, r2
 8004770:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004772:	4b30      	ldr	r3, [pc, #192]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	492d      	ldr	r1, [pc, #180]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 8004780:	4313      	orrs	r3, r2
 8004782:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004784:	4b2b      	ldr	r3, [pc, #172]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	f023 0220 	bic.w	r2, r3, #32
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	4928      	ldr	r1, [pc, #160]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 8004792:	4313      	orrs	r3, r2
 8004794:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004796:	4b27      	ldr	r3, [pc, #156]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	4a26      	ldr	r2, [pc, #152]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 800479c:	f023 0310 	bic.w	r3, r3, #16
 80047a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80047a2:	4b24      	ldr	r3, [pc, #144]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047a6:	4b24      	ldr	r3, [pc, #144]	; (8004838 <RCCEx_PLL2_Config+0x160>)
 80047a8:	4013      	ands	r3, r2
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	69d2      	ldr	r2, [r2, #28]
 80047ae:	00d2      	lsls	r2, r2, #3
 80047b0:	4920      	ldr	r1, [pc, #128]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80047b6:	4b1f      	ldr	r3, [pc, #124]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	4a1e      	ldr	r2, [pc, #120]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047bc:	f043 0310 	orr.w	r3, r3, #16
 80047c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047c8:	4b1a      	ldr	r3, [pc, #104]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	4a19      	ldr	r2, [pc, #100]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047d4:	e00f      	b.n	80047f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d106      	bne.n	80047ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80047dc:	4b15      	ldr	r3, [pc, #84]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	4a14      	ldr	r2, [pc, #80]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047e8:	e005      	b.n	80047f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	4a11      	ldr	r2, [pc, #68]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80047f6:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a0e      	ldr	r2, [pc, #56]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004802:	f7fc fcb3 	bl	800116c <HAL_GetTick>
 8004806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004808:	e008      	b.n	800481c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800480a:	f7fc fcaf 	bl	800116c <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e006      	b.n	800482a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004828:	7bfb      	ldrb	r3, [r7, #15]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	58024400 	.word	0x58024400
 8004838:	ffff0007 	.word	0xffff0007

0800483c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800484a:	4b53      	ldr	r3, [pc, #332]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b03      	cmp	r3, #3
 8004854:	d101      	bne.n	800485a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e099      	b.n	800498e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800485a:	4b4f      	ldr	r3, [pc, #316]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a4e      	ldr	r2, [pc, #312]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004866:	f7fc fc81 	bl	800116c <HAL_GetTick>
 800486a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800486c:	e008      	b.n	8004880 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800486e:	f7fc fc7d 	bl	800116c <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e086      	b.n	800498e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004880:	4b45      	ldr	r3, [pc, #276]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f0      	bne.n	800486e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800488c:	4b42      	ldr	r3, [pc, #264]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	051b      	lsls	r3, r3, #20
 800489a:	493f      	ldr	r1, [pc, #252]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 800489c:	4313      	orrs	r3, r2
 800489e:	628b      	str	r3, [r1, #40]	; 0x28
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	025b      	lsls	r3, r3, #9
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	041b      	lsls	r3, r3, #16
 80048be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	061b      	lsls	r3, r3, #24
 80048cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048d0:	4931      	ldr	r1, [pc, #196]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80048d6:	4b30      	ldr	r3, [pc, #192]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	492d      	ldr	r1, [pc, #180]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80048e8:	4b2b      	ldr	r3, [pc, #172]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	4928      	ldr	r1, [pc, #160]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80048fa:	4b27      	ldr	r3, [pc, #156]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	4a26      	ldr	r2, [pc, #152]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004904:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004906:	4b24      	ldr	r3, [pc, #144]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490a:	4b24      	ldr	r3, [pc, #144]	; (800499c <RCCEx_PLL3_Config+0x160>)
 800490c:	4013      	ands	r3, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	69d2      	ldr	r2, [r2, #28]
 8004912:	00d2      	lsls	r2, r2, #3
 8004914:	4920      	ldr	r1, [pc, #128]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004916:	4313      	orrs	r3, r2
 8004918:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800491a:	4b1f      	ldr	r3, [pc, #124]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	4a1e      	ldr	r2, [pc, #120]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004924:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d106      	bne.n	800493a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800492c:	4b1a      	ldr	r3, [pc, #104]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	4a19      	ldr	r2, [pc, #100]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004932:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004936:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004938:	e00f      	b.n	800495a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d106      	bne.n	800494e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004940:	4b15      	ldr	r3, [pc, #84]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	4a14      	ldr	r2, [pc, #80]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004946:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800494a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800494c:	e005      	b.n	800495a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800494e:	4b12      	ldr	r3, [pc, #72]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	4a11      	ldr	r2, [pc, #68]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004954:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004958:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800495a:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a0e      	ldr	r2, [pc, #56]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004966:	f7fc fc01 	bl	800116c <HAL_GetTick>
 800496a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800496c:	e008      	b.n	8004980 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800496e:	f7fc fbfd 	bl	800116c <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e006      	b.n	800498e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800498c:	7bfb      	ldrb	r3, [r7, #15]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	58024400 	.word	0x58024400
 800499c:	ffff0007 	.word	0xffff0007

080049a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e042      	b.n	8004a38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d106      	bne.n	80049ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7fc f9ed 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2224      	movs	r2, #36	; 0x24
 80049ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0201 	bic.w	r2, r2, #1
 80049e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f8c2 	bl	8004b6c <UART_SetConfig>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d101      	bne.n	80049f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e022      	b.n	8004a38 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fe1e 	bl	800563c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fea5 	bl	8005780 <UART_CheckIdleState>
 8004a36:	4603      	mov	r3, r0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08a      	sub	sp, #40	; 0x28
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	f040 8083 	bne.w	8004b62 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d002      	beq.n	8004a68 <HAL_UART_Transmit+0x28>
 8004a62:	88fb      	ldrh	r3, [r7, #6]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e07b      	b.n	8004b64 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_UART_Transmit+0x3a>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e074      	b.n	8004b64 <HAL_UART_Transmit+0x124>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2221      	movs	r2, #33	; 0x21
 8004a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a92:	f7fc fb6b 	bl	800116c <HAL_GetTick>
 8004a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	88fa      	ldrh	r2, [r7, #6]
 8004a9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	88fa      	ldrh	r2, [r7, #6]
 8004aa4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab0:	d108      	bne.n	8004ac4 <HAL_UART_Transmit+0x84>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d104      	bne.n	8004ac4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	e003      	b.n	8004acc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004ad4:	e02c      	b.n	8004b30 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2200      	movs	r2, #0
 8004ade:	2180      	movs	r1, #128	; 0x80
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 fe98 	bl	8005816 <UART_WaitOnFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e039      	b.n	8004b64 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10b      	bne.n	8004b0e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	3302      	adds	r3, #2
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	e007      	b.n	8004b1e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	781a      	ldrb	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1cc      	bne.n	8004ad6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2200      	movs	r2, #0
 8004b44:	2140      	movs	r1, #64	; 0x40
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 fe65 	bl	8005816 <UART_WaitOnFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e006      	b.n	8004b64 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e000      	b.n	8004b64 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
  }
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3720      	adds	r7, #32
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b70:	b092      	sub	sp, #72	; 0x48
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	431a      	orrs	r2, r3
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4bbe      	ldr	r3, [pc, #760]	; (8004e94 <UART_SetConfig+0x328>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	6812      	ldr	r2, [r2, #0]
 8004ba2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4ab3      	ldr	r2, [pc, #716]	; (8004e98 <UART_SetConfig+0x32c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	4baf      	ldr	r3, [pc, #700]	; (8004e9c <UART_SetConfig+0x330>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	6812      	ldr	r2, [r2, #0]
 8004be6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004be8:	430b      	orrs	r3, r1
 8004bea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	f023 010f 	bic.w	r1, r3, #15
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4aa6      	ldr	r2, [pc, #664]	; (8004ea0 <UART_SetConfig+0x334>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d177      	bne.n	8004cfc <UART_SetConfig+0x190>
 8004c0c:	4ba5      	ldr	r3, [pc, #660]	; (8004ea4 <UART_SetConfig+0x338>)
 8004c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c14:	2b28      	cmp	r3, #40	; 0x28
 8004c16:	d86d      	bhi.n	8004cf4 <UART_SetConfig+0x188>
 8004c18:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <UART_SetConfig+0xb4>)
 8004c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1e:	bf00      	nop
 8004c20:	08004cc5 	.word	0x08004cc5
 8004c24:	08004cf5 	.word	0x08004cf5
 8004c28:	08004cf5 	.word	0x08004cf5
 8004c2c:	08004cf5 	.word	0x08004cf5
 8004c30:	08004cf5 	.word	0x08004cf5
 8004c34:	08004cf5 	.word	0x08004cf5
 8004c38:	08004cf5 	.word	0x08004cf5
 8004c3c:	08004cf5 	.word	0x08004cf5
 8004c40:	08004ccd 	.word	0x08004ccd
 8004c44:	08004cf5 	.word	0x08004cf5
 8004c48:	08004cf5 	.word	0x08004cf5
 8004c4c:	08004cf5 	.word	0x08004cf5
 8004c50:	08004cf5 	.word	0x08004cf5
 8004c54:	08004cf5 	.word	0x08004cf5
 8004c58:	08004cf5 	.word	0x08004cf5
 8004c5c:	08004cf5 	.word	0x08004cf5
 8004c60:	08004cd5 	.word	0x08004cd5
 8004c64:	08004cf5 	.word	0x08004cf5
 8004c68:	08004cf5 	.word	0x08004cf5
 8004c6c:	08004cf5 	.word	0x08004cf5
 8004c70:	08004cf5 	.word	0x08004cf5
 8004c74:	08004cf5 	.word	0x08004cf5
 8004c78:	08004cf5 	.word	0x08004cf5
 8004c7c:	08004cf5 	.word	0x08004cf5
 8004c80:	08004cdd 	.word	0x08004cdd
 8004c84:	08004cf5 	.word	0x08004cf5
 8004c88:	08004cf5 	.word	0x08004cf5
 8004c8c:	08004cf5 	.word	0x08004cf5
 8004c90:	08004cf5 	.word	0x08004cf5
 8004c94:	08004cf5 	.word	0x08004cf5
 8004c98:	08004cf5 	.word	0x08004cf5
 8004c9c:	08004cf5 	.word	0x08004cf5
 8004ca0:	08004ce5 	.word	0x08004ce5
 8004ca4:	08004cf5 	.word	0x08004cf5
 8004ca8:	08004cf5 	.word	0x08004cf5
 8004cac:	08004cf5 	.word	0x08004cf5
 8004cb0:	08004cf5 	.word	0x08004cf5
 8004cb4:	08004cf5 	.word	0x08004cf5
 8004cb8:	08004cf5 	.word	0x08004cf5
 8004cbc:	08004cf5 	.word	0x08004cf5
 8004cc0:	08004ced 	.word	0x08004ced
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cca:	e222      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004ccc:	2304      	movs	r3, #4
 8004cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cd2:	e21e      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cda:	e21a      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ce2:	e216      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004ce4:	2320      	movs	r3, #32
 8004ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cea:	e212      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004cec:	2340      	movs	r3, #64	; 0x40
 8004cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf2:	e20e      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004cf4:	2380      	movs	r3, #128	; 0x80
 8004cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfa:	e20a      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a69      	ldr	r2, [pc, #420]	; (8004ea8 <UART_SetConfig+0x33c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d130      	bne.n	8004d68 <UART_SetConfig+0x1fc>
 8004d06:	4b67      	ldr	r3, [pc, #412]	; (8004ea4 <UART_SetConfig+0x338>)
 8004d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	2b05      	cmp	r3, #5
 8004d10:	d826      	bhi.n	8004d60 <UART_SetConfig+0x1f4>
 8004d12:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <UART_SetConfig+0x1ac>)
 8004d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d18:	08004d31 	.word	0x08004d31
 8004d1c:	08004d39 	.word	0x08004d39
 8004d20:	08004d41 	.word	0x08004d41
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d51 	.word	0x08004d51
 8004d2c:	08004d59 	.word	0x08004d59
 8004d30:	2300      	movs	r3, #0
 8004d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d36:	e1ec      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004d38:	2304      	movs	r3, #4
 8004d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d3e:	e1e8      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004d40:	2308      	movs	r3, #8
 8004d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d46:	e1e4      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004d48:	2310      	movs	r3, #16
 8004d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4e:	e1e0      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004d50:	2320      	movs	r3, #32
 8004d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d56:	e1dc      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004d58:	2340      	movs	r3, #64	; 0x40
 8004d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5e:	e1d8      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d66:	e1d4      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a4f      	ldr	r2, [pc, #316]	; (8004eac <UART_SetConfig+0x340>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d130      	bne.n	8004dd4 <UART_SetConfig+0x268>
 8004d72:	4b4c      	ldr	r3, [pc, #304]	; (8004ea4 <UART_SetConfig+0x338>)
 8004d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	2b05      	cmp	r3, #5
 8004d7c:	d826      	bhi.n	8004dcc <UART_SetConfig+0x260>
 8004d7e:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <UART_SetConfig+0x218>)
 8004d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d84:	08004d9d 	.word	0x08004d9d
 8004d88:	08004da5 	.word	0x08004da5
 8004d8c:	08004dad 	.word	0x08004dad
 8004d90:	08004db5 	.word	0x08004db5
 8004d94:	08004dbd 	.word	0x08004dbd
 8004d98:	08004dc5 	.word	0x08004dc5
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004da2:	e1b6      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004da4:	2304      	movs	r3, #4
 8004da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004daa:	e1b2      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004dac:	2308      	movs	r3, #8
 8004dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004db2:	e1ae      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004db4:	2310      	movs	r3, #16
 8004db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dba:	e1aa      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004dbc:	2320      	movs	r3, #32
 8004dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dc2:	e1a6      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004dc4:	2340      	movs	r3, #64	; 0x40
 8004dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dca:	e1a2      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd2:	e19e      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a35      	ldr	r2, [pc, #212]	; (8004eb0 <UART_SetConfig+0x344>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d130      	bne.n	8004e40 <UART_SetConfig+0x2d4>
 8004dde:	4b31      	ldr	r3, [pc, #196]	; (8004ea4 <UART_SetConfig+0x338>)
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	2b05      	cmp	r3, #5
 8004de8:	d826      	bhi.n	8004e38 <UART_SetConfig+0x2cc>
 8004dea:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <UART_SetConfig+0x284>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e09 	.word	0x08004e09
 8004df4:	08004e11 	.word	0x08004e11
 8004df8:	08004e19 	.word	0x08004e19
 8004dfc:	08004e21 	.word	0x08004e21
 8004e00:	08004e29 	.word	0x08004e29
 8004e04:	08004e31 	.word	0x08004e31
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e0e:	e180      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004e10:	2304      	movs	r3, #4
 8004e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e16:	e17c      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004e18:	2308      	movs	r3, #8
 8004e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e1e:	e178      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004e20:	2310      	movs	r3, #16
 8004e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e26:	e174      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004e28:	2320      	movs	r3, #32
 8004e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e2e:	e170      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004e30:	2340      	movs	r3, #64	; 0x40
 8004e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e36:	e16c      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004e38:	2380      	movs	r3, #128	; 0x80
 8004e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e3e:	e168      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1b      	ldr	r2, [pc, #108]	; (8004eb4 <UART_SetConfig+0x348>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d142      	bne.n	8004ed0 <UART_SetConfig+0x364>
 8004e4a:	4b16      	ldr	r3, [pc, #88]	; (8004ea4 <UART_SetConfig+0x338>)
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	2b05      	cmp	r3, #5
 8004e54:	d838      	bhi.n	8004ec8 <UART_SetConfig+0x35c>
 8004e56:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <UART_SetConfig+0x2f0>)
 8004e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5c:	08004e75 	.word	0x08004e75
 8004e60:	08004e7d 	.word	0x08004e7d
 8004e64:	08004e85 	.word	0x08004e85
 8004e68:	08004e8d 	.word	0x08004e8d
 8004e6c:	08004eb9 	.word	0x08004eb9
 8004e70:	08004ec1 	.word	0x08004ec1
 8004e74:	2300      	movs	r3, #0
 8004e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e7a:	e14a      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e82:	e146      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004e84:	2308      	movs	r3, #8
 8004e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e8a:	e142      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004e8c:	2310      	movs	r3, #16
 8004e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e92:	e13e      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004e94:	cfff69f3 	.word	0xcfff69f3
 8004e98:	58000c00 	.word	0x58000c00
 8004e9c:	11fff4ff 	.word	0x11fff4ff
 8004ea0:	40011000 	.word	0x40011000
 8004ea4:	58024400 	.word	0x58024400
 8004ea8:	40004400 	.word	0x40004400
 8004eac:	40004800 	.word	0x40004800
 8004eb0:	40004c00 	.word	0x40004c00
 8004eb4:	40005000 	.word	0x40005000
 8004eb8:	2320      	movs	r3, #32
 8004eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ebe:	e128      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004ec0:	2340      	movs	r3, #64	; 0x40
 8004ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ec6:	e124      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004ec8:	2380      	movs	r3, #128	; 0x80
 8004eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ece:	e120      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4acb      	ldr	r2, [pc, #812]	; (8005204 <UART_SetConfig+0x698>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d176      	bne.n	8004fc8 <UART_SetConfig+0x45c>
 8004eda:	4bcb      	ldr	r3, [pc, #812]	; (8005208 <UART_SetConfig+0x69c>)
 8004edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ee2:	2b28      	cmp	r3, #40	; 0x28
 8004ee4:	d86c      	bhi.n	8004fc0 <UART_SetConfig+0x454>
 8004ee6:	a201      	add	r2, pc, #4	; (adr r2, 8004eec <UART_SetConfig+0x380>)
 8004ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eec:	08004f91 	.word	0x08004f91
 8004ef0:	08004fc1 	.word	0x08004fc1
 8004ef4:	08004fc1 	.word	0x08004fc1
 8004ef8:	08004fc1 	.word	0x08004fc1
 8004efc:	08004fc1 	.word	0x08004fc1
 8004f00:	08004fc1 	.word	0x08004fc1
 8004f04:	08004fc1 	.word	0x08004fc1
 8004f08:	08004fc1 	.word	0x08004fc1
 8004f0c:	08004f99 	.word	0x08004f99
 8004f10:	08004fc1 	.word	0x08004fc1
 8004f14:	08004fc1 	.word	0x08004fc1
 8004f18:	08004fc1 	.word	0x08004fc1
 8004f1c:	08004fc1 	.word	0x08004fc1
 8004f20:	08004fc1 	.word	0x08004fc1
 8004f24:	08004fc1 	.word	0x08004fc1
 8004f28:	08004fc1 	.word	0x08004fc1
 8004f2c:	08004fa1 	.word	0x08004fa1
 8004f30:	08004fc1 	.word	0x08004fc1
 8004f34:	08004fc1 	.word	0x08004fc1
 8004f38:	08004fc1 	.word	0x08004fc1
 8004f3c:	08004fc1 	.word	0x08004fc1
 8004f40:	08004fc1 	.word	0x08004fc1
 8004f44:	08004fc1 	.word	0x08004fc1
 8004f48:	08004fc1 	.word	0x08004fc1
 8004f4c:	08004fa9 	.word	0x08004fa9
 8004f50:	08004fc1 	.word	0x08004fc1
 8004f54:	08004fc1 	.word	0x08004fc1
 8004f58:	08004fc1 	.word	0x08004fc1
 8004f5c:	08004fc1 	.word	0x08004fc1
 8004f60:	08004fc1 	.word	0x08004fc1
 8004f64:	08004fc1 	.word	0x08004fc1
 8004f68:	08004fc1 	.word	0x08004fc1
 8004f6c:	08004fb1 	.word	0x08004fb1
 8004f70:	08004fc1 	.word	0x08004fc1
 8004f74:	08004fc1 	.word	0x08004fc1
 8004f78:	08004fc1 	.word	0x08004fc1
 8004f7c:	08004fc1 	.word	0x08004fc1
 8004f80:	08004fc1 	.word	0x08004fc1
 8004f84:	08004fc1 	.word	0x08004fc1
 8004f88:	08004fc1 	.word	0x08004fc1
 8004f8c:	08004fb9 	.word	0x08004fb9
 8004f90:	2301      	movs	r3, #1
 8004f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f96:	e0bc      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004f98:	2304      	movs	r3, #4
 8004f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9e:	e0b8      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004fa0:	2308      	movs	r3, #8
 8004fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa6:	e0b4      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004fa8:	2310      	movs	r3, #16
 8004faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fae:	e0b0      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004fb0:	2320      	movs	r3, #32
 8004fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb6:	e0ac      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004fb8:	2340      	movs	r3, #64	; 0x40
 8004fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fbe:	e0a8      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004fc0:	2380      	movs	r3, #128	; 0x80
 8004fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc6:	e0a4      	b.n	8005112 <UART_SetConfig+0x5a6>
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a8f      	ldr	r2, [pc, #572]	; (800520c <UART_SetConfig+0x6a0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d130      	bne.n	8005034 <UART_SetConfig+0x4c8>
 8004fd2:	4b8d      	ldr	r3, [pc, #564]	; (8005208 <UART_SetConfig+0x69c>)
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	2b05      	cmp	r3, #5
 8004fdc:	d826      	bhi.n	800502c <UART_SetConfig+0x4c0>
 8004fde:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <UART_SetConfig+0x478>)
 8004fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe4:	08004ffd 	.word	0x08004ffd
 8004fe8:	08005005 	.word	0x08005005
 8004fec:	0800500d 	.word	0x0800500d
 8004ff0:	08005015 	.word	0x08005015
 8004ff4:	0800501d 	.word	0x0800501d
 8004ff8:	08005025 	.word	0x08005025
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005002:	e086      	b.n	8005112 <UART_SetConfig+0x5a6>
 8005004:	2304      	movs	r3, #4
 8005006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500a:	e082      	b.n	8005112 <UART_SetConfig+0x5a6>
 800500c:	2308      	movs	r3, #8
 800500e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005012:	e07e      	b.n	8005112 <UART_SetConfig+0x5a6>
 8005014:	2310      	movs	r3, #16
 8005016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501a:	e07a      	b.n	8005112 <UART_SetConfig+0x5a6>
 800501c:	2320      	movs	r3, #32
 800501e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005022:	e076      	b.n	8005112 <UART_SetConfig+0x5a6>
 8005024:	2340      	movs	r3, #64	; 0x40
 8005026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502a:	e072      	b.n	8005112 <UART_SetConfig+0x5a6>
 800502c:	2380      	movs	r3, #128	; 0x80
 800502e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005032:	e06e      	b.n	8005112 <UART_SetConfig+0x5a6>
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a75      	ldr	r2, [pc, #468]	; (8005210 <UART_SetConfig+0x6a4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d130      	bne.n	80050a0 <UART_SetConfig+0x534>
 800503e:	4b72      	ldr	r3, [pc, #456]	; (8005208 <UART_SetConfig+0x69c>)
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	2b05      	cmp	r3, #5
 8005048:	d826      	bhi.n	8005098 <UART_SetConfig+0x52c>
 800504a:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <UART_SetConfig+0x4e4>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	08005069 	.word	0x08005069
 8005054:	08005071 	.word	0x08005071
 8005058:	08005079 	.word	0x08005079
 800505c:	08005081 	.word	0x08005081
 8005060:	08005089 	.word	0x08005089
 8005064:	08005091 	.word	0x08005091
 8005068:	2300      	movs	r3, #0
 800506a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800506e:	e050      	b.n	8005112 <UART_SetConfig+0x5a6>
 8005070:	2304      	movs	r3, #4
 8005072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005076:	e04c      	b.n	8005112 <UART_SetConfig+0x5a6>
 8005078:	2308      	movs	r3, #8
 800507a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507e:	e048      	b.n	8005112 <UART_SetConfig+0x5a6>
 8005080:	2310      	movs	r3, #16
 8005082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005086:	e044      	b.n	8005112 <UART_SetConfig+0x5a6>
 8005088:	2320      	movs	r3, #32
 800508a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508e:	e040      	b.n	8005112 <UART_SetConfig+0x5a6>
 8005090:	2340      	movs	r3, #64	; 0x40
 8005092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005096:	e03c      	b.n	8005112 <UART_SetConfig+0x5a6>
 8005098:	2380      	movs	r3, #128	; 0x80
 800509a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509e:	e038      	b.n	8005112 <UART_SetConfig+0x5a6>
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a5b      	ldr	r2, [pc, #364]	; (8005214 <UART_SetConfig+0x6a8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d130      	bne.n	800510c <UART_SetConfig+0x5a0>
 80050aa:	4b57      	ldr	r3, [pc, #348]	; (8005208 <UART_SetConfig+0x69c>)
 80050ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	2b05      	cmp	r3, #5
 80050b4:	d826      	bhi.n	8005104 <UART_SetConfig+0x598>
 80050b6:	a201      	add	r2, pc, #4	; (adr r2, 80050bc <UART_SetConfig+0x550>)
 80050b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050bc:	080050d5 	.word	0x080050d5
 80050c0:	080050dd 	.word	0x080050dd
 80050c4:	080050e5 	.word	0x080050e5
 80050c8:	080050ed 	.word	0x080050ed
 80050cc:	080050f5 	.word	0x080050f5
 80050d0:	080050fd 	.word	0x080050fd
 80050d4:	2302      	movs	r3, #2
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050da:	e01a      	b.n	8005112 <UART_SetConfig+0x5a6>
 80050dc:	2304      	movs	r3, #4
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e2:	e016      	b.n	8005112 <UART_SetConfig+0x5a6>
 80050e4:	2308      	movs	r3, #8
 80050e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ea:	e012      	b.n	8005112 <UART_SetConfig+0x5a6>
 80050ec:	2310      	movs	r3, #16
 80050ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050f2:	e00e      	b.n	8005112 <UART_SetConfig+0x5a6>
 80050f4:	2320      	movs	r3, #32
 80050f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fa:	e00a      	b.n	8005112 <UART_SetConfig+0x5a6>
 80050fc:	2340      	movs	r3, #64	; 0x40
 80050fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005102:	e006      	b.n	8005112 <UART_SetConfig+0x5a6>
 8005104:	2380      	movs	r3, #128	; 0x80
 8005106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800510a:	e002      	b.n	8005112 <UART_SetConfig+0x5a6>
 800510c:	2380      	movs	r3, #128	; 0x80
 800510e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a3f      	ldr	r2, [pc, #252]	; (8005214 <UART_SetConfig+0x6a8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	f040 80f8 	bne.w	800530e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800511e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005122:	2b20      	cmp	r3, #32
 8005124:	dc46      	bgt.n	80051b4 <UART_SetConfig+0x648>
 8005126:	2b02      	cmp	r3, #2
 8005128:	f2c0 8082 	blt.w	8005230 <UART_SetConfig+0x6c4>
 800512c:	3b02      	subs	r3, #2
 800512e:	2b1e      	cmp	r3, #30
 8005130:	d87e      	bhi.n	8005230 <UART_SetConfig+0x6c4>
 8005132:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <UART_SetConfig+0x5cc>)
 8005134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005138:	080051bb 	.word	0x080051bb
 800513c:	08005231 	.word	0x08005231
 8005140:	080051c3 	.word	0x080051c3
 8005144:	08005231 	.word	0x08005231
 8005148:	08005231 	.word	0x08005231
 800514c:	08005231 	.word	0x08005231
 8005150:	080051d3 	.word	0x080051d3
 8005154:	08005231 	.word	0x08005231
 8005158:	08005231 	.word	0x08005231
 800515c:	08005231 	.word	0x08005231
 8005160:	08005231 	.word	0x08005231
 8005164:	08005231 	.word	0x08005231
 8005168:	08005231 	.word	0x08005231
 800516c:	08005231 	.word	0x08005231
 8005170:	080051e3 	.word	0x080051e3
 8005174:	08005231 	.word	0x08005231
 8005178:	08005231 	.word	0x08005231
 800517c:	08005231 	.word	0x08005231
 8005180:	08005231 	.word	0x08005231
 8005184:	08005231 	.word	0x08005231
 8005188:	08005231 	.word	0x08005231
 800518c:	08005231 	.word	0x08005231
 8005190:	08005231 	.word	0x08005231
 8005194:	08005231 	.word	0x08005231
 8005198:	08005231 	.word	0x08005231
 800519c:	08005231 	.word	0x08005231
 80051a0:	08005231 	.word	0x08005231
 80051a4:	08005231 	.word	0x08005231
 80051a8:	08005231 	.word	0x08005231
 80051ac:	08005231 	.word	0x08005231
 80051b0:	08005223 	.word	0x08005223
 80051b4:	2b40      	cmp	r3, #64	; 0x40
 80051b6:	d037      	beq.n	8005228 <UART_SetConfig+0x6bc>
 80051b8:	e03a      	b.n	8005230 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80051ba:	f7fe ffcf 	bl	800415c <HAL_RCCEx_GetD3PCLK1Freq>
 80051be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80051c0:	e03c      	b.n	800523c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe ffde 	bl	8004188 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051d0:	e034      	b.n	800523c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051d2:	f107 0318 	add.w	r3, r7, #24
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff f92a 	bl	8004430 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051e0:	e02c      	b.n	800523c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051e2:	4b09      	ldr	r3, [pc, #36]	; (8005208 <UART_SetConfig+0x69c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d016      	beq.n	800521c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80051ee:	4b06      	ldr	r3, [pc, #24]	; (8005208 <UART_SetConfig+0x69c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	08db      	lsrs	r3, r3, #3
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	4a07      	ldr	r2, [pc, #28]	; (8005218 <UART_SetConfig+0x6ac>)
 80051fa:	fa22 f303 	lsr.w	r3, r2, r3
 80051fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005200:	e01c      	b.n	800523c <UART_SetConfig+0x6d0>
 8005202:	bf00      	nop
 8005204:	40011400 	.word	0x40011400
 8005208:	58024400 	.word	0x58024400
 800520c:	40007800 	.word	0x40007800
 8005210:	40007c00 	.word	0x40007c00
 8005214:	58000c00 	.word	0x58000c00
 8005218:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800521c:	4b9d      	ldr	r3, [pc, #628]	; (8005494 <UART_SetConfig+0x928>)
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005220:	e00c      	b.n	800523c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005222:	4b9d      	ldr	r3, [pc, #628]	; (8005498 <UART_SetConfig+0x92c>)
 8005224:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005226:	e009      	b.n	800523c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800522e:	e005      	b.n	800523c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800523a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800523c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 81de 	beq.w	8005600 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	4a94      	ldr	r2, [pc, #592]	; (800549c <UART_SetConfig+0x930>)
 800524a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800524e:	461a      	mov	r2, r3
 8005250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005252:	fbb3 f3f2 	udiv	r3, r3, r2
 8005256:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	4613      	mov	r3, r2
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	4413      	add	r3, r2
 8005262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005264:	429a      	cmp	r2, r3
 8005266:	d305      	bcc.n	8005274 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800526e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005270:	429a      	cmp	r2, r3
 8005272:	d903      	bls.n	800527c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800527a:	e1c1      	b.n	8005600 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800527c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800527e:	2200      	movs	r2, #0
 8005280:	60bb      	str	r3, [r7, #8]
 8005282:	60fa      	str	r2, [r7, #12]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	4a84      	ldr	r2, [pc, #528]	; (800549c <UART_SetConfig+0x930>)
 800528a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800528e:	b29b      	uxth	r3, r3
 8005290:	2200      	movs	r2, #0
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	607a      	str	r2, [r7, #4]
 8005296:	e9d7 2300 	ldrd	r2, r3, [r7]
 800529a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800529e:	f7fb f81b 	bl	80002d8 <__aeabi_uldivmod>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4610      	mov	r0, r2
 80052a8:	4619      	mov	r1, r3
 80052aa:	f04f 0200 	mov.w	r2, #0
 80052ae:	f04f 0300 	mov.w	r3, #0
 80052b2:	020b      	lsls	r3, r1, #8
 80052b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052b8:	0202      	lsls	r2, r0, #8
 80052ba:	6979      	ldr	r1, [r7, #20]
 80052bc:	6849      	ldr	r1, [r1, #4]
 80052be:	0849      	lsrs	r1, r1, #1
 80052c0:	2000      	movs	r0, #0
 80052c2:	460c      	mov	r4, r1
 80052c4:	4605      	mov	r5, r0
 80052c6:	eb12 0804 	adds.w	r8, r2, r4
 80052ca:	eb43 0905 	adc.w	r9, r3, r5
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	469a      	mov	sl, r3
 80052d6:	4693      	mov	fp, r2
 80052d8:	4652      	mov	r2, sl
 80052da:	465b      	mov	r3, fp
 80052dc:	4640      	mov	r0, r8
 80052de:	4649      	mov	r1, r9
 80052e0:	f7fa fffa 	bl	80002d8 <__aeabi_uldivmod>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4613      	mov	r3, r2
 80052ea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052f2:	d308      	bcc.n	8005306 <UART_SetConfig+0x79a>
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052fa:	d204      	bcs.n	8005306 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005302:	60da      	str	r2, [r3, #12]
 8005304:	e17c      	b.n	8005600 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800530c:	e178      	b.n	8005600 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005316:	f040 80c5 	bne.w	80054a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800531a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800531e:	2b20      	cmp	r3, #32
 8005320:	dc48      	bgt.n	80053b4 <UART_SetConfig+0x848>
 8005322:	2b00      	cmp	r3, #0
 8005324:	db7b      	blt.n	800541e <UART_SetConfig+0x8b2>
 8005326:	2b20      	cmp	r3, #32
 8005328:	d879      	bhi.n	800541e <UART_SetConfig+0x8b2>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <UART_SetConfig+0x7c4>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	080053bb 	.word	0x080053bb
 8005334:	080053c3 	.word	0x080053c3
 8005338:	0800541f 	.word	0x0800541f
 800533c:	0800541f 	.word	0x0800541f
 8005340:	080053cb 	.word	0x080053cb
 8005344:	0800541f 	.word	0x0800541f
 8005348:	0800541f 	.word	0x0800541f
 800534c:	0800541f 	.word	0x0800541f
 8005350:	080053db 	.word	0x080053db
 8005354:	0800541f 	.word	0x0800541f
 8005358:	0800541f 	.word	0x0800541f
 800535c:	0800541f 	.word	0x0800541f
 8005360:	0800541f 	.word	0x0800541f
 8005364:	0800541f 	.word	0x0800541f
 8005368:	0800541f 	.word	0x0800541f
 800536c:	0800541f 	.word	0x0800541f
 8005370:	080053eb 	.word	0x080053eb
 8005374:	0800541f 	.word	0x0800541f
 8005378:	0800541f 	.word	0x0800541f
 800537c:	0800541f 	.word	0x0800541f
 8005380:	0800541f 	.word	0x0800541f
 8005384:	0800541f 	.word	0x0800541f
 8005388:	0800541f 	.word	0x0800541f
 800538c:	0800541f 	.word	0x0800541f
 8005390:	0800541f 	.word	0x0800541f
 8005394:	0800541f 	.word	0x0800541f
 8005398:	0800541f 	.word	0x0800541f
 800539c:	0800541f 	.word	0x0800541f
 80053a0:	0800541f 	.word	0x0800541f
 80053a4:	0800541f 	.word	0x0800541f
 80053a8:	0800541f 	.word	0x0800541f
 80053ac:	0800541f 	.word	0x0800541f
 80053b0:	08005411 	.word	0x08005411
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d02e      	beq.n	8005416 <UART_SetConfig+0x8aa>
 80053b8:	e031      	b.n	800541e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ba:	f7fd ff5d 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 80053be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053c0:	e033      	b.n	800542a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053c2:	f7fd ff6f 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 80053c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053c8:	e02f      	b.n	800542a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe feda 	bl	8004188 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053d8:	e027      	b.n	800542a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053da:	f107 0318 	add.w	r3, r7, #24
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff f826 	bl	8004430 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053e8:	e01f      	b.n	800542a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053ea:	4b2d      	ldr	r3, [pc, #180]	; (80054a0 <UART_SetConfig+0x934>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d009      	beq.n	800540a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053f6:	4b2a      	ldr	r3, [pc, #168]	; (80054a0 <UART_SetConfig+0x934>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	08db      	lsrs	r3, r3, #3
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	4a24      	ldr	r2, [pc, #144]	; (8005494 <UART_SetConfig+0x928>)
 8005402:	fa22 f303 	lsr.w	r3, r2, r3
 8005406:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005408:	e00f      	b.n	800542a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800540a:	4b22      	ldr	r3, [pc, #136]	; (8005494 <UART_SetConfig+0x928>)
 800540c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800540e:	e00c      	b.n	800542a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005410:	4b21      	ldr	r3, [pc, #132]	; (8005498 <UART_SetConfig+0x92c>)
 8005412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005414:	e009      	b.n	800542a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800541c:	e005      	b.n	800542a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005428:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800542a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 80e7 	beq.w	8005600 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	4a19      	ldr	r2, [pc, #100]	; (800549c <UART_SetConfig+0x930>)
 8005438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800543c:	461a      	mov	r2, r3
 800543e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005440:	fbb3 f3f2 	udiv	r3, r3, r2
 8005444:	005a      	lsls	r2, r3, #1
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	085b      	lsrs	r3, r3, #1
 800544c:	441a      	add	r2, r3
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	fbb2 f3f3 	udiv	r3, r2, r3
 8005456:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545a:	2b0f      	cmp	r3, #15
 800545c:	d916      	bls.n	800548c <UART_SetConfig+0x920>
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005464:	d212      	bcs.n	800548c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005468:	b29b      	uxth	r3, r3
 800546a:	f023 030f 	bic.w	r3, r3, #15
 800546e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005472:	085b      	lsrs	r3, r3, #1
 8005474:	b29b      	uxth	r3, r3
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	b29a      	uxth	r2, r3
 800547c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800547e:	4313      	orrs	r3, r2
 8005480:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005488:	60da      	str	r2, [r3, #12]
 800548a:	e0b9      	b.n	8005600 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005492:	e0b5      	b.n	8005600 <UART_SetConfig+0xa94>
 8005494:	03d09000 	.word	0x03d09000
 8005498:	003d0900 	.word	0x003d0900
 800549c:	080066dc 	.word	0x080066dc
 80054a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80054a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	dc49      	bgt.n	8005540 <UART_SetConfig+0x9d4>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	db7c      	blt.n	80055aa <UART_SetConfig+0xa3e>
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	d87a      	bhi.n	80055aa <UART_SetConfig+0xa3e>
 80054b4:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <UART_SetConfig+0x950>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	08005547 	.word	0x08005547
 80054c0:	0800554f 	.word	0x0800554f
 80054c4:	080055ab 	.word	0x080055ab
 80054c8:	080055ab 	.word	0x080055ab
 80054cc:	08005557 	.word	0x08005557
 80054d0:	080055ab 	.word	0x080055ab
 80054d4:	080055ab 	.word	0x080055ab
 80054d8:	080055ab 	.word	0x080055ab
 80054dc:	08005567 	.word	0x08005567
 80054e0:	080055ab 	.word	0x080055ab
 80054e4:	080055ab 	.word	0x080055ab
 80054e8:	080055ab 	.word	0x080055ab
 80054ec:	080055ab 	.word	0x080055ab
 80054f0:	080055ab 	.word	0x080055ab
 80054f4:	080055ab 	.word	0x080055ab
 80054f8:	080055ab 	.word	0x080055ab
 80054fc:	08005577 	.word	0x08005577
 8005500:	080055ab 	.word	0x080055ab
 8005504:	080055ab 	.word	0x080055ab
 8005508:	080055ab 	.word	0x080055ab
 800550c:	080055ab 	.word	0x080055ab
 8005510:	080055ab 	.word	0x080055ab
 8005514:	080055ab 	.word	0x080055ab
 8005518:	080055ab 	.word	0x080055ab
 800551c:	080055ab 	.word	0x080055ab
 8005520:	080055ab 	.word	0x080055ab
 8005524:	080055ab 	.word	0x080055ab
 8005528:	080055ab 	.word	0x080055ab
 800552c:	080055ab 	.word	0x080055ab
 8005530:	080055ab 	.word	0x080055ab
 8005534:	080055ab 	.word	0x080055ab
 8005538:	080055ab 	.word	0x080055ab
 800553c:	0800559d 	.word	0x0800559d
 8005540:	2b40      	cmp	r3, #64	; 0x40
 8005542:	d02e      	beq.n	80055a2 <UART_SetConfig+0xa36>
 8005544:	e031      	b.n	80055aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005546:	f7fd fe97 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 800554a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800554c:	e033      	b.n	80055b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800554e:	f7fd fea9 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 8005552:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005554:	e02f      	b.n	80055b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800555a:	4618      	mov	r0, r3
 800555c:	f7fe fe14 	bl	8004188 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005564:	e027      	b.n	80055b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005566:	f107 0318 	add.w	r3, r7, #24
 800556a:	4618      	mov	r0, r3
 800556c:	f7fe ff60 	bl	8004430 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005574:	e01f      	b.n	80055b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005576:	4b2d      	ldr	r3, [pc, #180]	; (800562c <UART_SetConfig+0xac0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005582:	4b2a      	ldr	r3, [pc, #168]	; (800562c <UART_SetConfig+0xac0>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	08db      	lsrs	r3, r3, #3
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	4a28      	ldr	r2, [pc, #160]	; (8005630 <UART_SetConfig+0xac4>)
 800558e:	fa22 f303 	lsr.w	r3, r2, r3
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005594:	e00f      	b.n	80055b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005596:	4b26      	ldr	r3, [pc, #152]	; (8005630 <UART_SetConfig+0xac4>)
 8005598:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800559a:	e00c      	b.n	80055b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800559c:	4b25      	ldr	r3, [pc, #148]	; (8005634 <UART_SetConfig+0xac8>)
 800559e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055a0:	e009      	b.n	80055b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055a8:	e005      	b.n	80055b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80055b4:	bf00      	nop
    }

    if (pclk != 0U)
 80055b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d021      	beq.n	8005600 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	4a1d      	ldr	r2, [pc, #116]	; (8005638 <UART_SetConfig+0xacc>)
 80055c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055c6:	461a      	mov	r2, r3
 80055c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	441a      	add	r2, r3
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	fbb2 f3f3 	udiv	r3, r2, r3
 80055de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	2b0f      	cmp	r3, #15
 80055e4:	d909      	bls.n	80055fa <UART_SetConfig+0xa8e>
 80055e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ec:	d205      	bcs.n	80055fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60da      	str	r2, [r3, #12]
 80055f8:	e002      	b.n	8005600 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2201      	movs	r2, #1
 8005604:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2201      	movs	r2, #1
 800560c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2200      	movs	r2, #0
 8005614:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2200      	movs	r2, #0
 800561a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800561c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005620:	4618      	mov	r0, r3
 8005622:	3748      	adds	r7, #72	; 0x48
 8005624:	46bd      	mov	sp, r7
 8005626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800562a:	bf00      	nop
 800562c:	58024400 	.word	0x58024400
 8005630:	03d09000 	.word	0x03d09000
 8005634:	003d0900 	.word	0x003d0900
 8005638:	080066dc 	.word	0x080066dc

0800563c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	f003 0320 	and.w	r3, r3, #32
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01a      	beq.n	8005752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800573a:	d10a      	bne.n	8005752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	605a      	str	r2, [r3, #4]
  }
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af02      	add	r7, sp, #8
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005790:	f7fb fcec 	bl	800116c <HAL_GetTick>
 8005794:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0308 	and.w	r3, r3, #8
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d10e      	bne.n	80057c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f82f 	bl	8005816 <UART_WaitOnFlagUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e025      	b.n	800580e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d10e      	bne.n	80057ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f819 	bl	8005816 <UART_WaitOnFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e00f      	b.n	800580e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b09c      	sub	sp, #112	; 0x70
 800581a:	af00      	add	r7, sp, #0
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	603b      	str	r3, [r7, #0]
 8005822:	4613      	mov	r3, r2
 8005824:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005826:	e0a9      	b.n	800597c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582e:	f000 80a5 	beq.w	800597c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005832:	f7fb fc9b 	bl	800116c <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800583e:	429a      	cmp	r2, r3
 8005840:	d302      	bcc.n	8005848 <UART_WaitOnFlagUntilTimeout+0x32>
 8005842:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005844:	2b00      	cmp	r3, #0
 8005846:	d140      	bne.n	80058ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005858:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800585c:	667b      	str	r3, [r7, #100]	; 0x64
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005866:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005868:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800586c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e6      	bne.n	8005848 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3308      	adds	r3, #8
 8005880:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800588a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588c:	f023 0301 	bic.w	r3, r3, #1
 8005890:	663b      	str	r3, [r7, #96]	; 0x60
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3308      	adds	r3, #8
 8005898:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800589a:	64ba      	str	r2, [r7, #72]	; 0x48
 800589c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80058a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1e5      	bne.n	800587a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e069      	b.n	800599e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d051      	beq.n	800597c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058e6:	d149      	bne.n	800597c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	e853 3f00 	ldrex	r3, [r3]
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005906:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	461a      	mov	r2, r3
 800590e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005910:	637b      	str	r3, [r7, #52]	; 0x34
 8005912:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005918:	e841 2300 	strex	r3, r2, [r1]
 800591c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1e6      	bne.n	80058f2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3308      	adds	r3, #8
 800592a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	e853 3f00 	ldrex	r3, [r3]
 8005932:	613b      	str	r3, [r7, #16]
   return(result);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f023 0301 	bic.w	r3, r3, #1
 800593a:	66bb      	str	r3, [r7, #104]	; 0x68
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3308      	adds	r3, #8
 8005942:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005944:	623a      	str	r2, [r7, #32]
 8005946:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005948:	69f9      	ldr	r1, [r7, #28]
 800594a:	6a3a      	ldr	r2, [r7, #32]
 800594c:	e841 2300 	strex	r3, r2, [r1]
 8005950:	61bb      	str	r3, [r7, #24]
   return(result);
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e5      	bne.n	8005924 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2220      	movs	r2, #32
 8005964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2220      	movs	r2, #32
 800596c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e010      	b.n	800599e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	69da      	ldr	r2, [r3, #28]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4013      	ands	r3, r2
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	429a      	cmp	r2, r3
 800598a:	bf0c      	ite	eq
 800598c:	2301      	moveq	r3, #1
 800598e:	2300      	movne	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	429a      	cmp	r2, r3
 8005998:	f43f af46 	beq.w	8005828 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3770      	adds	r7, #112	; 0x70
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b085      	sub	sp, #20
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_UARTEx_DisableFifoMode+0x16>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e027      	b.n	8005a0c <HAL_UARTEx_DisableFifoMode+0x66>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2224      	movs	r2, #36	; 0x24
 80059c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0201 	bic.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80059ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d101      	bne.n	8005a30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e02d      	b.n	8005a8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2224      	movs	r2, #36	; 0x24
 8005a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0201 	bic.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f84f 	bl	8005b10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e02d      	b.n	8005b08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2224      	movs	r2, #36	; 0x24
 8005ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0201 	bic.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f811 	bl	8005b10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d108      	bne.n	8005b32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b30:	e031      	b.n	8005b96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b32:	2310      	movs	r3, #16
 8005b34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b36:	2310      	movs	r3, #16
 8005b38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	0e5b      	lsrs	r3, r3, #25
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	0f5b      	lsrs	r3, r3, #29
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b5a:	7bbb      	ldrb	r3, [r7, #14]
 8005b5c:	7b3a      	ldrb	r2, [r7, #12]
 8005b5e:	4911      	ldr	r1, [pc, #68]	; (8005ba4 <UARTEx_SetNbDataToProcess+0x94>)
 8005b60:	5c8a      	ldrb	r2, [r1, r2]
 8005b62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b66:	7b3a      	ldrb	r2, [r7, #12]
 8005b68:	490f      	ldr	r1, [pc, #60]	; (8005ba8 <UARTEx_SetNbDataToProcess+0x98>)
 8005b6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	7b7a      	ldrb	r2, [r7, #13]
 8005b7c:	4909      	ldr	r1, [pc, #36]	; (8005ba4 <UARTEx_SetNbDataToProcess+0x94>)
 8005b7e:	5c8a      	ldrb	r2, [r1, r2]
 8005b80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b84:	7b7a      	ldrb	r2, [r7, #13]
 8005b86:	4908      	ldr	r1, [pc, #32]	; (8005ba8 <UARTEx_SetNbDataToProcess+0x98>)
 8005b88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005b96:	bf00      	nop
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	080066f4 	.word	0x080066f4
 8005ba8:	080066fc 	.word	0x080066fc

08005bac <__errno>:
 8005bac:	4b01      	ldr	r3, [pc, #4]	; (8005bb4 <__errno+0x8>)
 8005bae:	6818      	ldr	r0, [r3, #0]
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	24000010 	.word	0x24000010

08005bb8 <__libc_init_array>:
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	4d0d      	ldr	r5, [pc, #52]	; (8005bf0 <__libc_init_array+0x38>)
 8005bbc:	4c0d      	ldr	r4, [pc, #52]	; (8005bf4 <__libc_init_array+0x3c>)
 8005bbe:	1b64      	subs	r4, r4, r5
 8005bc0:	10a4      	asrs	r4, r4, #2
 8005bc2:	2600      	movs	r6, #0
 8005bc4:	42a6      	cmp	r6, r4
 8005bc6:	d109      	bne.n	8005bdc <__libc_init_array+0x24>
 8005bc8:	4d0b      	ldr	r5, [pc, #44]	; (8005bf8 <__libc_init_array+0x40>)
 8005bca:	4c0c      	ldr	r4, [pc, #48]	; (8005bfc <__libc_init_array+0x44>)
 8005bcc:	f000 fd2c 	bl	8006628 <_init>
 8005bd0:	1b64      	subs	r4, r4, r5
 8005bd2:	10a4      	asrs	r4, r4, #2
 8005bd4:	2600      	movs	r6, #0
 8005bd6:	42a6      	cmp	r6, r4
 8005bd8:	d105      	bne.n	8005be6 <__libc_init_array+0x2e>
 8005bda:	bd70      	pop	{r4, r5, r6, pc}
 8005bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be0:	4798      	blx	r3
 8005be2:	3601      	adds	r6, #1
 8005be4:	e7ee      	b.n	8005bc4 <__libc_init_array+0xc>
 8005be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bea:	4798      	blx	r3
 8005bec:	3601      	adds	r6, #1
 8005bee:	e7f2      	b.n	8005bd6 <__libc_init_array+0x1e>
 8005bf0:	08006770 	.word	0x08006770
 8005bf4:	08006770 	.word	0x08006770
 8005bf8:	08006770 	.word	0x08006770
 8005bfc:	08006774 	.word	0x08006774

08005c00 <memcpy>:
 8005c00:	440a      	add	r2, r1
 8005c02:	4291      	cmp	r1, r2
 8005c04:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c08:	d100      	bne.n	8005c0c <memcpy+0xc>
 8005c0a:	4770      	bx	lr
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c16:	4291      	cmp	r1, r2
 8005c18:	d1f9      	bne.n	8005c0e <memcpy+0xe>
 8005c1a:	bd10      	pop	{r4, pc}

08005c1c <memset>:
 8005c1c:	4402      	add	r2, r0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d100      	bne.n	8005c26 <memset+0xa>
 8005c24:	4770      	bx	lr
 8005c26:	f803 1b01 	strb.w	r1, [r3], #1
 8005c2a:	e7f9      	b.n	8005c20 <memset+0x4>

08005c2c <_puts_r>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	460e      	mov	r6, r1
 8005c30:	4605      	mov	r5, r0
 8005c32:	b118      	cbz	r0, 8005c3c <_puts_r+0x10>
 8005c34:	6983      	ldr	r3, [r0, #24]
 8005c36:	b90b      	cbnz	r3, 8005c3c <_puts_r+0x10>
 8005c38:	f000 fa48 	bl	80060cc <__sinit>
 8005c3c:	69ab      	ldr	r3, [r5, #24]
 8005c3e:	68ac      	ldr	r4, [r5, #8]
 8005c40:	b913      	cbnz	r3, 8005c48 <_puts_r+0x1c>
 8005c42:	4628      	mov	r0, r5
 8005c44:	f000 fa42 	bl	80060cc <__sinit>
 8005c48:	4b2c      	ldr	r3, [pc, #176]	; (8005cfc <_puts_r+0xd0>)
 8005c4a:	429c      	cmp	r4, r3
 8005c4c:	d120      	bne.n	8005c90 <_puts_r+0x64>
 8005c4e:	686c      	ldr	r4, [r5, #4]
 8005c50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c52:	07db      	lsls	r3, r3, #31
 8005c54:	d405      	bmi.n	8005c62 <_puts_r+0x36>
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	0598      	lsls	r0, r3, #22
 8005c5a:	d402      	bmi.n	8005c62 <_puts_r+0x36>
 8005c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c5e:	f000 fad3 	bl	8006208 <__retarget_lock_acquire_recursive>
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	0719      	lsls	r1, r3, #28
 8005c66:	d51d      	bpl.n	8005ca4 <_puts_r+0x78>
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	b1db      	cbz	r3, 8005ca4 <_puts_r+0x78>
 8005c6c:	3e01      	subs	r6, #1
 8005c6e:	68a3      	ldr	r3, [r4, #8]
 8005c70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c74:	3b01      	subs	r3, #1
 8005c76:	60a3      	str	r3, [r4, #8]
 8005c78:	bb39      	cbnz	r1, 8005cca <_puts_r+0x9e>
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	da38      	bge.n	8005cf0 <_puts_r+0xc4>
 8005c7e:	4622      	mov	r2, r4
 8005c80:	210a      	movs	r1, #10
 8005c82:	4628      	mov	r0, r5
 8005c84:	f000 f848 	bl	8005d18 <__swbuf_r>
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d011      	beq.n	8005cb0 <_puts_r+0x84>
 8005c8c:	250a      	movs	r5, #10
 8005c8e:	e011      	b.n	8005cb4 <_puts_r+0x88>
 8005c90:	4b1b      	ldr	r3, [pc, #108]	; (8005d00 <_puts_r+0xd4>)
 8005c92:	429c      	cmp	r4, r3
 8005c94:	d101      	bne.n	8005c9a <_puts_r+0x6e>
 8005c96:	68ac      	ldr	r4, [r5, #8]
 8005c98:	e7da      	b.n	8005c50 <_puts_r+0x24>
 8005c9a:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <_puts_r+0xd8>)
 8005c9c:	429c      	cmp	r4, r3
 8005c9e:	bf08      	it	eq
 8005ca0:	68ec      	ldreq	r4, [r5, #12]
 8005ca2:	e7d5      	b.n	8005c50 <_puts_r+0x24>
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 f888 	bl	8005dbc <__swsetup_r>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d0dd      	beq.n	8005c6c <_puts_r+0x40>
 8005cb0:	f04f 35ff 	mov.w	r5, #4294967295
 8005cb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cb6:	07da      	lsls	r2, r3, #31
 8005cb8:	d405      	bmi.n	8005cc6 <_puts_r+0x9a>
 8005cba:	89a3      	ldrh	r3, [r4, #12]
 8005cbc:	059b      	lsls	r3, r3, #22
 8005cbe:	d402      	bmi.n	8005cc6 <_puts_r+0x9a>
 8005cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cc2:	f000 faa2 	bl	800620a <__retarget_lock_release_recursive>
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	bd70      	pop	{r4, r5, r6, pc}
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	da04      	bge.n	8005cd8 <_puts_r+0xac>
 8005cce:	69a2      	ldr	r2, [r4, #24]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	dc06      	bgt.n	8005ce2 <_puts_r+0xb6>
 8005cd4:	290a      	cmp	r1, #10
 8005cd6:	d004      	beq.n	8005ce2 <_puts_r+0xb6>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	6022      	str	r2, [r4, #0]
 8005cde:	7019      	strb	r1, [r3, #0]
 8005ce0:	e7c5      	b.n	8005c6e <_puts_r+0x42>
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f000 f817 	bl	8005d18 <__swbuf_r>
 8005cea:	3001      	adds	r0, #1
 8005cec:	d1bf      	bne.n	8005c6e <_puts_r+0x42>
 8005cee:	e7df      	b.n	8005cb0 <_puts_r+0x84>
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	250a      	movs	r5, #10
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	6022      	str	r2, [r4, #0]
 8005cf8:	701d      	strb	r5, [r3, #0]
 8005cfa:	e7db      	b.n	8005cb4 <_puts_r+0x88>
 8005cfc:	08006728 	.word	0x08006728
 8005d00:	08006748 	.word	0x08006748
 8005d04:	08006708 	.word	0x08006708

08005d08 <puts>:
 8005d08:	4b02      	ldr	r3, [pc, #8]	; (8005d14 <puts+0xc>)
 8005d0a:	4601      	mov	r1, r0
 8005d0c:	6818      	ldr	r0, [r3, #0]
 8005d0e:	f7ff bf8d 	b.w	8005c2c <_puts_r>
 8005d12:	bf00      	nop
 8005d14:	24000010 	.word	0x24000010

08005d18 <__swbuf_r>:
 8005d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1a:	460e      	mov	r6, r1
 8005d1c:	4614      	mov	r4, r2
 8005d1e:	4605      	mov	r5, r0
 8005d20:	b118      	cbz	r0, 8005d2a <__swbuf_r+0x12>
 8005d22:	6983      	ldr	r3, [r0, #24]
 8005d24:	b90b      	cbnz	r3, 8005d2a <__swbuf_r+0x12>
 8005d26:	f000 f9d1 	bl	80060cc <__sinit>
 8005d2a:	4b21      	ldr	r3, [pc, #132]	; (8005db0 <__swbuf_r+0x98>)
 8005d2c:	429c      	cmp	r4, r3
 8005d2e:	d12b      	bne.n	8005d88 <__swbuf_r+0x70>
 8005d30:	686c      	ldr	r4, [r5, #4]
 8005d32:	69a3      	ldr	r3, [r4, #24]
 8005d34:	60a3      	str	r3, [r4, #8]
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	071a      	lsls	r2, r3, #28
 8005d3a:	d52f      	bpl.n	8005d9c <__swbuf_r+0x84>
 8005d3c:	6923      	ldr	r3, [r4, #16]
 8005d3e:	b36b      	cbz	r3, 8005d9c <__swbuf_r+0x84>
 8005d40:	6923      	ldr	r3, [r4, #16]
 8005d42:	6820      	ldr	r0, [r4, #0]
 8005d44:	1ac0      	subs	r0, r0, r3
 8005d46:	6963      	ldr	r3, [r4, #20]
 8005d48:	b2f6      	uxtb	r6, r6
 8005d4a:	4283      	cmp	r3, r0
 8005d4c:	4637      	mov	r7, r6
 8005d4e:	dc04      	bgt.n	8005d5a <__swbuf_r+0x42>
 8005d50:	4621      	mov	r1, r4
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 f926 	bl	8005fa4 <_fflush_r>
 8005d58:	bb30      	cbnz	r0, 8005da8 <__swbuf_r+0x90>
 8005d5a:	68a3      	ldr	r3, [r4, #8]
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	60a3      	str	r3, [r4, #8]
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	6022      	str	r2, [r4, #0]
 8005d66:	701e      	strb	r6, [r3, #0]
 8005d68:	6963      	ldr	r3, [r4, #20]
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	4283      	cmp	r3, r0
 8005d6e:	d004      	beq.n	8005d7a <__swbuf_r+0x62>
 8005d70:	89a3      	ldrh	r3, [r4, #12]
 8005d72:	07db      	lsls	r3, r3, #31
 8005d74:	d506      	bpl.n	8005d84 <__swbuf_r+0x6c>
 8005d76:	2e0a      	cmp	r6, #10
 8005d78:	d104      	bne.n	8005d84 <__swbuf_r+0x6c>
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f000 f911 	bl	8005fa4 <_fflush_r>
 8005d82:	b988      	cbnz	r0, 8005da8 <__swbuf_r+0x90>
 8005d84:	4638      	mov	r0, r7
 8005d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d88:	4b0a      	ldr	r3, [pc, #40]	; (8005db4 <__swbuf_r+0x9c>)
 8005d8a:	429c      	cmp	r4, r3
 8005d8c:	d101      	bne.n	8005d92 <__swbuf_r+0x7a>
 8005d8e:	68ac      	ldr	r4, [r5, #8]
 8005d90:	e7cf      	b.n	8005d32 <__swbuf_r+0x1a>
 8005d92:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <__swbuf_r+0xa0>)
 8005d94:	429c      	cmp	r4, r3
 8005d96:	bf08      	it	eq
 8005d98:	68ec      	ldreq	r4, [r5, #12]
 8005d9a:	e7ca      	b.n	8005d32 <__swbuf_r+0x1a>
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f000 f80c 	bl	8005dbc <__swsetup_r>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d0cb      	beq.n	8005d40 <__swbuf_r+0x28>
 8005da8:	f04f 37ff 	mov.w	r7, #4294967295
 8005dac:	e7ea      	b.n	8005d84 <__swbuf_r+0x6c>
 8005dae:	bf00      	nop
 8005db0:	08006728 	.word	0x08006728
 8005db4:	08006748 	.word	0x08006748
 8005db8:	08006708 	.word	0x08006708

08005dbc <__swsetup_r>:
 8005dbc:	4b32      	ldr	r3, [pc, #200]	; (8005e88 <__swsetup_r+0xcc>)
 8005dbe:	b570      	push	{r4, r5, r6, lr}
 8005dc0:	681d      	ldr	r5, [r3, #0]
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	b125      	cbz	r5, 8005dd2 <__swsetup_r+0x16>
 8005dc8:	69ab      	ldr	r3, [r5, #24]
 8005dca:	b913      	cbnz	r3, 8005dd2 <__swsetup_r+0x16>
 8005dcc:	4628      	mov	r0, r5
 8005dce:	f000 f97d 	bl	80060cc <__sinit>
 8005dd2:	4b2e      	ldr	r3, [pc, #184]	; (8005e8c <__swsetup_r+0xd0>)
 8005dd4:	429c      	cmp	r4, r3
 8005dd6:	d10f      	bne.n	8005df8 <__swsetup_r+0x3c>
 8005dd8:	686c      	ldr	r4, [r5, #4]
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005de0:	0719      	lsls	r1, r3, #28
 8005de2:	d42c      	bmi.n	8005e3e <__swsetup_r+0x82>
 8005de4:	06dd      	lsls	r5, r3, #27
 8005de6:	d411      	bmi.n	8005e0c <__swsetup_r+0x50>
 8005de8:	2309      	movs	r3, #9
 8005dea:	6033      	str	r3, [r6, #0]
 8005dec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005df0:	81a3      	strh	r3, [r4, #12]
 8005df2:	f04f 30ff 	mov.w	r0, #4294967295
 8005df6:	e03e      	b.n	8005e76 <__swsetup_r+0xba>
 8005df8:	4b25      	ldr	r3, [pc, #148]	; (8005e90 <__swsetup_r+0xd4>)
 8005dfa:	429c      	cmp	r4, r3
 8005dfc:	d101      	bne.n	8005e02 <__swsetup_r+0x46>
 8005dfe:	68ac      	ldr	r4, [r5, #8]
 8005e00:	e7eb      	b.n	8005dda <__swsetup_r+0x1e>
 8005e02:	4b24      	ldr	r3, [pc, #144]	; (8005e94 <__swsetup_r+0xd8>)
 8005e04:	429c      	cmp	r4, r3
 8005e06:	bf08      	it	eq
 8005e08:	68ec      	ldreq	r4, [r5, #12]
 8005e0a:	e7e6      	b.n	8005dda <__swsetup_r+0x1e>
 8005e0c:	0758      	lsls	r0, r3, #29
 8005e0e:	d512      	bpl.n	8005e36 <__swsetup_r+0x7a>
 8005e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e12:	b141      	cbz	r1, 8005e26 <__swsetup_r+0x6a>
 8005e14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e18:	4299      	cmp	r1, r3
 8005e1a:	d002      	beq.n	8005e22 <__swsetup_r+0x66>
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	f000 fa5b 	bl	80062d8 <_free_r>
 8005e22:	2300      	movs	r3, #0
 8005e24:	6363      	str	r3, [r4, #52]	; 0x34
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e2c:	81a3      	strh	r3, [r4, #12]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	6063      	str	r3, [r4, #4]
 8005e32:	6923      	ldr	r3, [r4, #16]
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	89a3      	ldrh	r3, [r4, #12]
 8005e38:	f043 0308 	orr.w	r3, r3, #8
 8005e3c:	81a3      	strh	r3, [r4, #12]
 8005e3e:	6923      	ldr	r3, [r4, #16]
 8005e40:	b94b      	cbnz	r3, 8005e56 <__swsetup_r+0x9a>
 8005e42:	89a3      	ldrh	r3, [r4, #12]
 8005e44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e4c:	d003      	beq.n	8005e56 <__swsetup_r+0x9a>
 8005e4e:	4621      	mov	r1, r4
 8005e50:	4630      	mov	r0, r6
 8005e52:	f000 fa01 	bl	8006258 <__smakebuf_r>
 8005e56:	89a0      	ldrh	r0, [r4, #12]
 8005e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e5c:	f010 0301 	ands.w	r3, r0, #1
 8005e60:	d00a      	beq.n	8005e78 <__swsetup_r+0xbc>
 8005e62:	2300      	movs	r3, #0
 8005e64:	60a3      	str	r3, [r4, #8]
 8005e66:	6963      	ldr	r3, [r4, #20]
 8005e68:	425b      	negs	r3, r3
 8005e6a:	61a3      	str	r3, [r4, #24]
 8005e6c:	6923      	ldr	r3, [r4, #16]
 8005e6e:	b943      	cbnz	r3, 8005e82 <__swsetup_r+0xc6>
 8005e70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e74:	d1ba      	bne.n	8005dec <__swsetup_r+0x30>
 8005e76:	bd70      	pop	{r4, r5, r6, pc}
 8005e78:	0781      	lsls	r1, r0, #30
 8005e7a:	bf58      	it	pl
 8005e7c:	6963      	ldrpl	r3, [r4, #20]
 8005e7e:	60a3      	str	r3, [r4, #8]
 8005e80:	e7f4      	b.n	8005e6c <__swsetup_r+0xb0>
 8005e82:	2000      	movs	r0, #0
 8005e84:	e7f7      	b.n	8005e76 <__swsetup_r+0xba>
 8005e86:	bf00      	nop
 8005e88:	24000010 	.word	0x24000010
 8005e8c:	08006728 	.word	0x08006728
 8005e90:	08006748 	.word	0x08006748
 8005e94:	08006708 	.word	0x08006708

08005e98 <__sflush_r>:
 8005e98:	898a      	ldrh	r2, [r1, #12]
 8005e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	0710      	lsls	r0, r2, #28
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	d458      	bmi.n	8005f58 <__sflush_r+0xc0>
 8005ea6:	684b      	ldr	r3, [r1, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	dc05      	bgt.n	8005eb8 <__sflush_r+0x20>
 8005eac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	dc02      	bgt.n	8005eb8 <__sflush_r+0x20>
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eba:	2e00      	cmp	r6, #0
 8005ebc:	d0f9      	beq.n	8005eb2 <__sflush_r+0x1a>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ec4:	682f      	ldr	r7, [r5, #0]
 8005ec6:	602b      	str	r3, [r5, #0]
 8005ec8:	d032      	beq.n	8005f30 <__sflush_r+0x98>
 8005eca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	075a      	lsls	r2, r3, #29
 8005ed0:	d505      	bpl.n	8005ede <__sflush_r+0x46>
 8005ed2:	6863      	ldr	r3, [r4, #4]
 8005ed4:	1ac0      	subs	r0, r0, r3
 8005ed6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ed8:	b10b      	cbz	r3, 8005ede <__sflush_r+0x46>
 8005eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005edc:	1ac0      	subs	r0, r0, r3
 8005ede:	2300      	movs	r3, #0
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ee4:	6a21      	ldr	r1, [r4, #32]
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	47b0      	blx	r6
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	d106      	bne.n	8005efe <__sflush_r+0x66>
 8005ef0:	6829      	ldr	r1, [r5, #0]
 8005ef2:	291d      	cmp	r1, #29
 8005ef4:	d82c      	bhi.n	8005f50 <__sflush_r+0xb8>
 8005ef6:	4a2a      	ldr	r2, [pc, #168]	; (8005fa0 <__sflush_r+0x108>)
 8005ef8:	40ca      	lsrs	r2, r1
 8005efa:	07d6      	lsls	r6, r2, #31
 8005efc:	d528      	bpl.n	8005f50 <__sflush_r+0xb8>
 8005efe:	2200      	movs	r2, #0
 8005f00:	6062      	str	r2, [r4, #4]
 8005f02:	04d9      	lsls	r1, r3, #19
 8005f04:	6922      	ldr	r2, [r4, #16]
 8005f06:	6022      	str	r2, [r4, #0]
 8005f08:	d504      	bpl.n	8005f14 <__sflush_r+0x7c>
 8005f0a:	1c42      	adds	r2, r0, #1
 8005f0c:	d101      	bne.n	8005f12 <__sflush_r+0x7a>
 8005f0e:	682b      	ldr	r3, [r5, #0]
 8005f10:	b903      	cbnz	r3, 8005f14 <__sflush_r+0x7c>
 8005f12:	6560      	str	r0, [r4, #84]	; 0x54
 8005f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f16:	602f      	str	r7, [r5, #0]
 8005f18:	2900      	cmp	r1, #0
 8005f1a:	d0ca      	beq.n	8005eb2 <__sflush_r+0x1a>
 8005f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f20:	4299      	cmp	r1, r3
 8005f22:	d002      	beq.n	8005f2a <__sflush_r+0x92>
 8005f24:	4628      	mov	r0, r5
 8005f26:	f000 f9d7 	bl	80062d8 <_free_r>
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	6360      	str	r0, [r4, #52]	; 0x34
 8005f2e:	e7c1      	b.n	8005eb4 <__sflush_r+0x1c>
 8005f30:	6a21      	ldr	r1, [r4, #32]
 8005f32:	2301      	movs	r3, #1
 8005f34:	4628      	mov	r0, r5
 8005f36:	47b0      	blx	r6
 8005f38:	1c41      	adds	r1, r0, #1
 8005f3a:	d1c7      	bne.n	8005ecc <__sflush_r+0x34>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0c4      	beq.n	8005ecc <__sflush_r+0x34>
 8005f42:	2b1d      	cmp	r3, #29
 8005f44:	d001      	beq.n	8005f4a <__sflush_r+0xb2>
 8005f46:	2b16      	cmp	r3, #22
 8005f48:	d101      	bne.n	8005f4e <__sflush_r+0xb6>
 8005f4a:	602f      	str	r7, [r5, #0]
 8005f4c:	e7b1      	b.n	8005eb2 <__sflush_r+0x1a>
 8005f4e:	89a3      	ldrh	r3, [r4, #12]
 8005f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f54:	81a3      	strh	r3, [r4, #12]
 8005f56:	e7ad      	b.n	8005eb4 <__sflush_r+0x1c>
 8005f58:	690f      	ldr	r7, [r1, #16]
 8005f5a:	2f00      	cmp	r7, #0
 8005f5c:	d0a9      	beq.n	8005eb2 <__sflush_r+0x1a>
 8005f5e:	0793      	lsls	r3, r2, #30
 8005f60:	680e      	ldr	r6, [r1, #0]
 8005f62:	bf08      	it	eq
 8005f64:	694b      	ldreq	r3, [r1, #20]
 8005f66:	600f      	str	r7, [r1, #0]
 8005f68:	bf18      	it	ne
 8005f6a:	2300      	movne	r3, #0
 8005f6c:	eba6 0807 	sub.w	r8, r6, r7
 8005f70:	608b      	str	r3, [r1, #8]
 8005f72:	f1b8 0f00 	cmp.w	r8, #0
 8005f76:	dd9c      	ble.n	8005eb2 <__sflush_r+0x1a>
 8005f78:	6a21      	ldr	r1, [r4, #32]
 8005f7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f7c:	4643      	mov	r3, r8
 8005f7e:	463a      	mov	r2, r7
 8005f80:	4628      	mov	r0, r5
 8005f82:	47b0      	blx	r6
 8005f84:	2800      	cmp	r0, #0
 8005f86:	dc06      	bgt.n	8005f96 <__sflush_r+0xfe>
 8005f88:	89a3      	ldrh	r3, [r4, #12]
 8005f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	f04f 30ff 	mov.w	r0, #4294967295
 8005f94:	e78e      	b.n	8005eb4 <__sflush_r+0x1c>
 8005f96:	4407      	add	r7, r0
 8005f98:	eba8 0800 	sub.w	r8, r8, r0
 8005f9c:	e7e9      	b.n	8005f72 <__sflush_r+0xda>
 8005f9e:	bf00      	nop
 8005fa0:	20400001 	.word	0x20400001

08005fa4 <_fflush_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	690b      	ldr	r3, [r1, #16]
 8005fa8:	4605      	mov	r5, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	b913      	cbnz	r3, 8005fb4 <_fflush_r+0x10>
 8005fae:	2500      	movs	r5, #0
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	b118      	cbz	r0, 8005fbe <_fflush_r+0x1a>
 8005fb6:	6983      	ldr	r3, [r0, #24]
 8005fb8:	b90b      	cbnz	r3, 8005fbe <_fflush_r+0x1a>
 8005fba:	f000 f887 	bl	80060cc <__sinit>
 8005fbe:	4b14      	ldr	r3, [pc, #80]	; (8006010 <_fflush_r+0x6c>)
 8005fc0:	429c      	cmp	r4, r3
 8005fc2:	d11b      	bne.n	8005ffc <_fflush_r+0x58>
 8005fc4:	686c      	ldr	r4, [r5, #4]
 8005fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0ef      	beq.n	8005fae <_fflush_r+0xa>
 8005fce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fd0:	07d0      	lsls	r0, r2, #31
 8005fd2:	d404      	bmi.n	8005fde <_fflush_r+0x3a>
 8005fd4:	0599      	lsls	r1, r3, #22
 8005fd6:	d402      	bmi.n	8005fde <_fflush_r+0x3a>
 8005fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fda:	f000 f915 	bl	8006208 <__retarget_lock_acquire_recursive>
 8005fde:	4628      	mov	r0, r5
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	f7ff ff59 	bl	8005e98 <__sflush_r>
 8005fe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fe8:	07da      	lsls	r2, r3, #31
 8005fea:	4605      	mov	r5, r0
 8005fec:	d4e0      	bmi.n	8005fb0 <_fflush_r+0xc>
 8005fee:	89a3      	ldrh	r3, [r4, #12]
 8005ff0:	059b      	lsls	r3, r3, #22
 8005ff2:	d4dd      	bmi.n	8005fb0 <_fflush_r+0xc>
 8005ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ff6:	f000 f908 	bl	800620a <__retarget_lock_release_recursive>
 8005ffa:	e7d9      	b.n	8005fb0 <_fflush_r+0xc>
 8005ffc:	4b05      	ldr	r3, [pc, #20]	; (8006014 <_fflush_r+0x70>)
 8005ffe:	429c      	cmp	r4, r3
 8006000:	d101      	bne.n	8006006 <_fflush_r+0x62>
 8006002:	68ac      	ldr	r4, [r5, #8]
 8006004:	e7df      	b.n	8005fc6 <_fflush_r+0x22>
 8006006:	4b04      	ldr	r3, [pc, #16]	; (8006018 <_fflush_r+0x74>)
 8006008:	429c      	cmp	r4, r3
 800600a:	bf08      	it	eq
 800600c:	68ec      	ldreq	r4, [r5, #12]
 800600e:	e7da      	b.n	8005fc6 <_fflush_r+0x22>
 8006010:	08006728 	.word	0x08006728
 8006014:	08006748 	.word	0x08006748
 8006018:	08006708 	.word	0x08006708

0800601c <std>:
 800601c:	2300      	movs	r3, #0
 800601e:	b510      	push	{r4, lr}
 8006020:	4604      	mov	r4, r0
 8006022:	e9c0 3300 	strd	r3, r3, [r0]
 8006026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800602a:	6083      	str	r3, [r0, #8]
 800602c:	8181      	strh	r1, [r0, #12]
 800602e:	6643      	str	r3, [r0, #100]	; 0x64
 8006030:	81c2      	strh	r2, [r0, #14]
 8006032:	6183      	str	r3, [r0, #24]
 8006034:	4619      	mov	r1, r3
 8006036:	2208      	movs	r2, #8
 8006038:	305c      	adds	r0, #92	; 0x5c
 800603a:	f7ff fdef 	bl	8005c1c <memset>
 800603e:	4b05      	ldr	r3, [pc, #20]	; (8006054 <std+0x38>)
 8006040:	6263      	str	r3, [r4, #36]	; 0x24
 8006042:	4b05      	ldr	r3, [pc, #20]	; (8006058 <std+0x3c>)
 8006044:	62a3      	str	r3, [r4, #40]	; 0x28
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <std+0x40>)
 8006048:	62e3      	str	r3, [r4, #44]	; 0x2c
 800604a:	4b05      	ldr	r3, [pc, #20]	; (8006060 <std+0x44>)
 800604c:	6224      	str	r4, [r4, #32]
 800604e:	6323      	str	r3, [r4, #48]	; 0x30
 8006050:	bd10      	pop	{r4, pc}
 8006052:	bf00      	nop
 8006054:	080064b9 	.word	0x080064b9
 8006058:	080064db 	.word	0x080064db
 800605c:	08006513 	.word	0x08006513
 8006060:	08006537 	.word	0x08006537

08006064 <_cleanup_r>:
 8006064:	4901      	ldr	r1, [pc, #4]	; (800606c <_cleanup_r+0x8>)
 8006066:	f000 b8af 	b.w	80061c8 <_fwalk_reent>
 800606a:	bf00      	nop
 800606c:	08005fa5 	.word	0x08005fa5

08006070 <__sfmoreglue>:
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	2268      	movs	r2, #104	; 0x68
 8006074:	1e4d      	subs	r5, r1, #1
 8006076:	4355      	muls	r5, r2
 8006078:	460e      	mov	r6, r1
 800607a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800607e:	f000 f997 	bl	80063b0 <_malloc_r>
 8006082:	4604      	mov	r4, r0
 8006084:	b140      	cbz	r0, 8006098 <__sfmoreglue+0x28>
 8006086:	2100      	movs	r1, #0
 8006088:	e9c0 1600 	strd	r1, r6, [r0]
 800608c:	300c      	adds	r0, #12
 800608e:	60a0      	str	r0, [r4, #8]
 8006090:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006094:	f7ff fdc2 	bl	8005c1c <memset>
 8006098:	4620      	mov	r0, r4
 800609a:	bd70      	pop	{r4, r5, r6, pc}

0800609c <__sfp_lock_acquire>:
 800609c:	4801      	ldr	r0, [pc, #4]	; (80060a4 <__sfp_lock_acquire+0x8>)
 800609e:	f000 b8b3 	b.w	8006208 <__retarget_lock_acquire_recursive>
 80060a2:	bf00      	nop
 80060a4:	2400020d 	.word	0x2400020d

080060a8 <__sfp_lock_release>:
 80060a8:	4801      	ldr	r0, [pc, #4]	; (80060b0 <__sfp_lock_release+0x8>)
 80060aa:	f000 b8ae 	b.w	800620a <__retarget_lock_release_recursive>
 80060ae:	bf00      	nop
 80060b0:	2400020d 	.word	0x2400020d

080060b4 <__sinit_lock_acquire>:
 80060b4:	4801      	ldr	r0, [pc, #4]	; (80060bc <__sinit_lock_acquire+0x8>)
 80060b6:	f000 b8a7 	b.w	8006208 <__retarget_lock_acquire_recursive>
 80060ba:	bf00      	nop
 80060bc:	2400020e 	.word	0x2400020e

080060c0 <__sinit_lock_release>:
 80060c0:	4801      	ldr	r0, [pc, #4]	; (80060c8 <__sinit_lock_release+0x8>)
 80060c2:	f000 b8a2 	b.w	800620a <__retarget_lock_release_recursive>
 80060c6:	bf00      	nop
 80060c8:	2400020e 	.word	0x2400020e

080060cc <__sinit>:
 80060cc:	b510      	push	{r4, lr}
 80060ce:	4604      	mov	r4, r0
 80060d0:	f7ff fff0 	bl	80060b4 <__sinit_lock_acquire>
 80060d4:	69a3      	ldr	r3, [r4, #24]
 80060d6:	b11b      	cbz	r3, 80060e0 <__sinit+0x14>
 80060d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060dc:	f7ff bff0 	b.w	80060c0 <__sinit_lock_release>
 80060e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80060e4:	6523      	str	r3, [r4, #80]	; 0x50
 80060e6:	4b13      	ldr	r3, [pc, #76]	; (8006134 <__sinit+0x68>)
 80060e8:	4a13      	ldr	r2, [pc, #76]	; (8006138 <__sinit+0x6c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80060ee:	42a3      	cmp	r3, r4
 80060f0:	bf04      	itt	eq
 80060f2:	2301      	moveq	r3, #1
 80060f4:	61a3      	streq	r3, [r4, #24]
 80060f6:	4620      	mov	r0, r4
 80060f8:	f000 f820 	bl	800613c <__sfp>
 80060fc:	6060      	str	r0, [r4, #4]
 80060fe:	4620      	mov	r0, r4
 8006100:	f000 f81c 	bl	800613c <__sfp>
 8006104:	60a0      	str	r0, [r4, #8]
 8006106:	4620      	mov	r0, r4
 8006108:	f000 f818 	bl	800613c <__sfp>
 800610c:	2200      	movs	r2, #0
 800610e:	60e0      	str	r0, [r4, #12]
 8006110:	2104      	movs	r1, #4
 8006112:	6860      	ldr	r0, [r4, #4]
 8006114:	f7ff ff82 	bl	800601c <std>
 8006118:	68a0      	ldr	r0, [r4, #8]
 800611a:	2201      	movs	r2, #1
 800611c:	2109      	movs	r1, #9
 800611e:	f7ff ff7d 	bl	800601c <std>
 8006122:	68e0      	ldr	r0, [r4, #12]
 8006124:	2202      	movs	r2, #2
 8006126:	2112      	movs	r1, #18
 8006128:	f7ff ff78 	bl	800601c <std>
 800612c:	2301      	movs	r3, #1
 800612e:	61a3      	str	r3, [r4, #24]
 8006130:	e7d2      	b.n	80060d8 <__sinit+0xc>
 8006132:	bf00      	nop
 8006134:	08006704 	.word	0x08006704
 8006138:	08006065 	.word	0x08006065

0800613c <__sfp>:
 800613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613e:	4607      	mov	r7, r0
 8006140:	f7ff ffac 	bl	800609c <__sfp_lock_acquire>
 8006144:	4b1e      	ldr	r3, [pc, #120]	; (80061c0 <__sfp+0x84>)
 8006146:	681e      	ldr	r6, [r3, #0]
 8006148:	69b3      	ldr	r3, [r6, #24]
 800614a:	b913      	cbnz	r3, 8006152 <__sfp+0x16>
 800614c:	4630      	mov	r0, r6
 800614e:	f7ff ffbd 	bl	80060cc <__sinit>
 8006152:	3648      	adds	r6, #72	; 0x48
 8006154:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006158:	3b01      	subs	r3, #1
 800615a:	d503      	bpl.n	8006164 <__sfp+0x28>
 800615c:	6833      	ldr	r3, [r6, #0]
 800615e:	b30b      	cbz	r3, 80061a4 <__sfp+0x68>
 8006160:	6836      	ldr	r6, [r6, #0]
 8006162:	e7f7      	b.n	8006154 <__sfp+0x18>
 8006164:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006168:	b9d5      	cbnz	r5, 80061a0 <__sfp+0x64>
 800616a:	4b16      	ldr	r3, [pc, #88]	; (80061c4 <__sfp+0x88>)
 800616c:	60e3      	str	r3, [r4, #12]
 800616e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006172:	6665      	str	r5, [r4, #100]	; 0x64
 8006174:	f000 f847 	bl	8006206 <__retarget_lock_init_recursive>
 8006178:	f7ff ff96 	bl	80060a8 <__sfp_lock_release>
 800617c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006180:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006184:	6025      	str	r5, [r4, #0]
 8006186:	61a5      	str	r5, [r4, #24]
 8006188:	2208      	movs	r2, #8
 800618a:	4629      	mov	r1, r5
 800618c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006190:	f7ff fd44 	bl	8005c1c <memset>
 8006194:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006198:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800619c:	4620      	mov	r0, r4
 800619e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a0:	3468      	adds	r4, #104	; 0x68
 80061a2:	e7d9      	b.n	8006158 <__sfp+0x1c>
 80061a4:	2104      	movs	r1, #4
 80061a6:	4638      	mov	r0, r7
 80061a8:	f7ff ff62 	bl	8006070 <__sfmoreglue>
 80061ac:	4604      	mov	r4, r0
 80061ae:	6030      	str	r0, [r6, #0]
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d1d5      	bne.n	8006160 <__sfp+0x24>
 80061b4:	f7ff ff78 	bl	80060a8 <__sfp_lock_release>
 80061b8:	230c      	movs	r3, #12
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	e7ee      	b.n	800619c <__sfp+0x60>
 80061be:	bf00      	nop
 80061c0:	08006704 	.word	0x08006704
 80061c4:	ffff0001 	.word	0xffff0001

080061c8 <_fwalk_reent>:
 80061c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061cc:	4606      	mov	r6, r0
 80061ce:	4688      	mov	r8, r1
 80061d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061d4:	2700      	movs	r7, #0
 80061d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061da:	f1b9 0901 	subs.w	r9, r9, #1
 80061de:	d505      	bpl.n	80061ec <_fwalk_reent+0x24>
 80061e0:	6824      	ldr	r4, [r4, #0]
 80061e2:	2c00      	cmp	r4, #0
 80061e4:	d1f7      	bne.n	80061d6 <_fwalk_reent+0xe>
 80061e6:	4638      	mov	r0, r7
 80061e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ec:	89ab      	ldrh	r3, [r5, #12]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d907      	bls.n	8006202 <_fwalk_reent+0x3a>
 80061f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061f6:	3301      	adds	r3, #1
 80061f8:	d003      	beq.n	8006202 <_fwalk_reent+0x3a>
 80061fa:	4629      	mov	r1, r5
 80061fc:	4630      	mov	r0, r6
 80061fe:	47c0      	blx	r8
 8006200:	4307      	orrs	r7, r0
 8006202:	3568      	adds	r5, #104	; 0x68
 8006204:	e7e9      	b.n	80061da <_fwalk_reent+0x12>

08006206 <__retarget_lock_init_recursive>:
 8006206:	4770      	bx	lr

08006208 <__retarget_lock_acquire_recursive>:
 8006208:	4770      	bx	lr

0800620a <__retarget_lock_release_recursive>:
 800620a:	4770      	bx	lr

0800620c <__swhatbuf_r>:
 800620c:	b570      	push	{r4, r5, r6, lr}
 800620e:	460e      	mov	r6, r1
 8006210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006214:	2900      	cmp	r1, #0
 8006216:	b096      	sub	sp, #88	; 0x58
 8006218:	4614      	mov	r4, r2
 800621a:	461d      	mov	r5, r3
 800621c:	da08      	bge.n	8006230 <__swhatbuf_r+0x24>
 800621e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	602a      	str	r2, [r5, #0]
 8006226:	061a      	lsls	r2, r3, #24
 8006228:	d410      	bmi.n	800624c <__swhatbuf_r+0x40>
 800622a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800622e:	e00e      	b.n	800624e <__swhatbuf_r+0x42>
 8006230:	466a      	mov	r2, sp
 8006232:	f000 f9a7 	bl	8006584 <_fstat_r>
 8006236:	2800      	cmp	r0, #0
 8006238:	dbf1      	blt.n	800621e <__swhatbuf_r+0x12>
 800623a:	9a01      	ldr	r2, [sp, #4]
 800623c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006240:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006244:	425a      	negs	r2, r3
 8006246:	415a      	adcs	r2, r3
 8006248:	602a      	str	r2, [r5, #0]
 800624a:	e7ee      	b.n	800622a <__swhatbuf_r+0x1e>
 800624c:	2340      	movs	r3, #64	; 0x40
 800624e:	2000      	movs	r0, #0
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	b016      	add	sp, #88	; 0x58
 8006254:	bd70      	pop	{r4, r5, r6, pc}
	...

08006258 <__smakebuf_r>:
 8006258:	898b      	ldrh	r3, [r1, #12]
 800625a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800625c:	079d      	lsls	r5, r3, #30
 800625e:	4606      	mov	r6, r0
 8006260:	460c      	mov	r4, r1
 8006262:	d507      	bpl.n	8006274 <__smakebuf_r+0x1c>
 8006264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	6123      	str	r3, [r4, #16]
 800626c:	2301      	movs	r3, #1
 800626e:	6163      	str	r3, [r4, #20]
 8006270:	b002      	add	sp, #8
 8006272:	bd70      	pop	{r4, r5, r6, pc}
 8006274:	ab01      	add	r3, sp, #4
 8006276:	466a      	mov	r2, sp
 8006278:	f7ff ffc8 	bl	800620c <__swhatbuf_r>
 800627c:	9900      	ldr	r1, [sp, #0]
 800627e:	4605      	mov	r5, r0
 8006280:	4630      	mov	r0, r6
 8006282:	f000 f895 	bl	80063b0 <_malloc_r>
 8006286:	b948      	cbnz	r0, 800629c <__smakebuf_r+0x44>
 8006288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800628c:	059a      	lsls	r2, r3, #22
 800628e:	d4ef      	bmi.n	8006270 <__smakebuf_r+0x18>
 8006290:	f023 0303 	bic.w	r3, r3, #3
 8006294:	f043 0302 	orr.w	r3, r3, #2
 8006298:	81a3      	strh	r3, [r4, #12]
 800629a:	e7e3      	b.n	8006264 <__smakebuf_r+0xc>
 800629c:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <__smakebuf_r+0x7c>)
 800629e:	62b3      	str	r3, [r6, #40]	; 0x28
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	6020      	str	r0, [r4, #0]
 80062a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a8:	81a3      	strh	r3, [r4, #12]
 80062aa:	9b00      	ldr	r3, [sp, #0]
 80062ac:	6163      	str	r3, [r4, #20]
 80062ae:	9b01      	ldr	r3, [sp, #4]
 80062b0:	6120      	str	r0, [r4, #16]
 80062b2:	b15b      	cbz	r3, 80062cc <__smakebuf_r+0x74>
 80062b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062b8:	4630      	mov	r0, r6
 80062ba:	f000 f975 	bl	80065a8 <_isatty_r>
 80062be:	b128      	cbz	r0, 80062cc <__smakebuf_r+0x74>
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f023 0303 	bic.w	r3, r3, #3
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	81a3      	strh	r3, [r4, #12]
 80062cc:	89a0      	ldrh	r0, [r4, #12]
 80062ce:	4305      	orrs	r5, r0
 80062d0:	81a5      	strh	r5, [r4, #12]
 80062d2:	e7cd      	b.n	8006270 <__smakebuf_r+0x18>
 80062d4:	08006065 	.word	0x08006065

080062d8 <_free_r>:
 80062d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062da:	2900      	cmp	r1, #0
 80062dc:	d044      	beq.n	8006368 <_free_r+0x90>
 80062de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062e2:	9001      	str	r0, [sp, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f1a1 0404 	sub.w	r4, r1, #4
 80062ea:	bfb8      	it	lt
 80062ec:	18e4      	addlt	r4, r4, r3
 80062ee:	f000 f97d 	bl	80065ec <__malloc_lock>
 80062f2:	4a1e      	ldr	r2, [pc, #120]	; (800636c <_free_r+0x94>)
 80062f4:	9801      	ldr	r0, [sp, #4]
 80062f6:	6813      	ldr	r3, [r2, #0]
 80062f8:	b933      	cbnz	r3, 8006308 <_free_r+0x30>
 80062fa:	6063      	str	r3, [r4, #4]
 80062fc:	6014      	str	r4, [r2, #0]
 80062fe:	b003      	add	sp, #12
 8006300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006304:	f000 b978 	b.w	80065f8 <__malloc_unlock>
 8006308:	42a3      	cmp	r3, r4
 800630a:	d908      	bls.n	800631e <_free_r+0x46>
 800630c:	6825      	ldr	r5, [r4, #0]
 800630e:	1961      	adds	r1, r4, r5
 8006310:	428b      	cmp	r3, r1
 8006312:	bf01      	itttt	eq
 8006314:	6819      	ldreq	r1, [r3, #0]
 8006316:	685b      	ldreq	r3, [r3, #4]
 8006318:	1949      	addeq	r1, r1, r5
 800631a:	6021      	streq	r1, [r4, #0]
 800631c:	e7ed      	b.n	80062fa <_free_r+0x22>
 800631e:	461a      	mov	r2, r3
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	b10b      	cbz	r3, 8006328 <_free_r+0x50>
 8006324:	42a3      	cmp	r3, r4
 8006326:	d9fa      	bls.n	800631e <_free_r+0x46>
 8006328:	6811      	ldr	r1, [r2, #0]
 800632a:	1855      	adds	r5, r2, r1
 800632c:	42a5      	cmp	r5, r4
 800632e:	d10b      	bne.n	8006348 <_free_r+0x70>
 8006330:	6824      	ldr	r4, [r4, #0]
 8006332:	4421      	add	r1, r4
 8006334:	1854      	adds	r4, r2, r1
 8006336:	42a3      	cmp	r3, r4
 8006338:	6011      	str	r1, [r2, #0]
 800633a:	d1e0      	bne.n	80062fe <_free_r+0x26>
 800633c:	681c      	ldr	r4, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	6053      	str	r3, [r2, #4]
 8006342:	4421      	add	r1, r4
 8006344:	6011      	str	r1, [r2, #0]
 8006346:	e7da      	b.n	80062fe <_free_r+0x26>
 8006348:	d902      	bls.n	8006350 <_free_r+0x78>
 800634a:	230c      	movs	r3, #12
 800634c:	6003      	str	r3, [r0, #0]
 800634e:	e7d6      	b.n	80062fe <_free_r+0x26>
 8006350:	6825      	ldr	r5, [r4, #0]
 8006352:	1961      	adds	r1, r4, r5
 8006354:	428b      	cmp	r3, r1
 8006356:	bf04      	itt	eq
 8006358:	6819      	ldreq	r1, [r3, #0]
 800635a:	685b      	ldreq	r3, [r3, #4]
 800635c:	6063      	str	r3, [r4, #4]
 800635e:	bf04      	itt	eq
 8006360:	1949      	addeq	r1, r1, r5
 8006362:	6021      	streq	r1, [r4, #0]
 8006364:	6054      	str	r4, [r2, #4]
 8006366:	e7ca      	b.n	80062fe <_free_r+0x26>
 8006368:	b003      	add	sp, #12
 800636a:	bd30      	pop	{r4, r5, pc}
 800636c:	24000210 	.word	0x24000210

08006370 <sbrk_aligned>:
 8006370:	b570      	push	{r4, r5, r6, lr}
 8006372:	4e0e      	ldr	r6, [pc, #56]	; (80063ac <sbrk_aligned+0x3c>)
 8006374:	460c      	mov	r4, r1
 8006376:	6831      	ldr	r1, [r6, #0]
 8006378:	4605      	mov	r5, r0
 800637a:	b911      	cbnz	r1, 8006382 <sbrk_aligned+0x12>
 800637c:	f000 f88c 	bl	8006498 <_sbrk_r>
 8006380:	6030      	str	r0, [r6, #0]
 8006382:	4621      	mov	r1, r4
 8006384:	4628      	mov	r0, r5
 8006386:	f000 f887 	bl	8006498 <_sbrk_r>
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	d00a      	beq.n	80063a4 <sbrk_aligned+0x34>
 800638e:	1cc4      	adds	r4, r0, #3
 8006390:	f024 0403 	bic.w	r4, r4, #3
 8006394:	42a0      	cmp	r0, r4
 8006396:	d007      	beq.n	80063a8 <sbrk_aligned+0x38>
 8006398:	1a21      	subs	r1, r4, r0
 800639a:	4628      	mov	r0, r5
 800639c:	f000 f87c 	bl	8006498 <_sbrk_r>
 80063a0:	3001      	adds	r0, #1
 80063a2:	d101      	bne.n	80063a8 <sbrk_aligned+0x38>
 80063a4:	f04f 34ff 	mov.w	r4, #4294967295
 80063a8:	4620      	mov	r0, r4
 80063aa:	bd70      	pop	{r4, r5, r6, pc}
 80063ac:	24000214 	.word	0x24000214

080063b0 <_malloc_r>:
 80063b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063b4:	1ccd      	adds	r5, r1, #3
 80063b6:	f025 0503 	bic.w	r5, r5, #3
 80063ba:	3508      	adds	r5, #8
 80063bc:	2d0c      	cmp	r5, #12
 80063be:	bf38      	it	cc
 80063c0:	250c      	movcc	r5, #12
 80063c2:	2d00      	cmp	r5, #0
 80063c4:	4607      	mov	r7, r0
 80063c6:	db01      	blt.n	80063cc <_malloc_r+0x1c>
 80063c8:	42a9      	cmp	r1, r5
 80063ca:	d905      	bls.n	80063d8 <_malloc_r+0x28>
 80063cc:	230c      	movs	r3, #12
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	2600      	movs	r6, #0
 80063d2:	4630      	mov	r0, r6
 80063d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063d8:	4e2e      	ldr	r6, [pc, #184]	; (8006494 <_malloc_r+0xe4>)
 80063da:	f000 f907 	bl	80065ec <__malloc_lock>
 80063de:	6833      	ldr	r3, [r6, #0]
 80063e0:	461c      	mov	r4, r3
 80063e2:	bb34      	cbnz	r4, 8006432 <_malloc_r+0x82>
 80063e4:	4629      	mov	r1, r5
 80063e6:	4638      	mov	r0, r7
 80063e8:	f7ff ffc2 	bl	8006370 <sbrk_aligned>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	4604      	mov	r4, r0
 80063f0:	d14d      	bne.n	800648e <_malloc_r+0xde>
 80063f2:	6834      	ldr	r4, [r6, #0]
 80063f4:	4626      	mov	r6, r4
 80063f6:	2e00      	cmp	r6, #0
 80063f8:	d140      	bne.n	800647c <_malloc_r+0xcc>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	4631      	mov	r1, r6
 80063fe:	4638      	mov	r0, r7
 8006400:	eb04 0803 	add.w	r8, r4, r3
 8006404:	f000 f848 	bl	8006498 <_sbrk_r>
 8006408:	4580      	cmp	r8, r0
 800640a:	d13a      	bne.n	8006482 <_malloc_r+0xd2>
 800640c:	6821      	ldr	r1, [r4, #0]
 800640e:	3503      	adds	r5, #3
 8006410:	1a6d      	subs	r5, r5, r1
 8006412:	f025 0503 	bic.w	r5, r5, #3
 8006416:	3508      	adds	r5, #8
 8006418:	2d0c      	cmp	r5, #12
 800641a:	bf38      	it	cc
 800641c:	250c      	movcc	r5, #12
 800641e:	4629      	mov	r1, r5
 8006420:	4638      	mov	r0, r7
 8006422:	f7ff ffa5 	bl	8006370 <sbrk_aligned>
 8006426:	3001      	adds	r0, #1
 8006428:	d02b      	beq.n	8006482 <_malloc_r+0xd2>
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	442b      	add	r3, r5
 800642e:	6023      	str	r3, [r4, #0]
 8006430:	e00e      	b.n	8006450 <_malloc_r+0xa0>
 8006432:	6822      	ldr	r2, [r4, #0]
 8006434:	1b52      	subs	r2, r2, r5
 8006436:	d41e      	bmi.n	8006476 <_malloc_r+0xc6>
 8006438:	2a0b      	cmp	r2, #11
 800643a:	d916      	bls.n	800646a <_malloc_r+0xba>
 800643c:	1961      	adds	r1, r4, r5
 800643e:	42a3      	cmp	r3, r4
 8006440:	6025      	str	r5, [r4, #0]
 8006442:	bf18      	it	ne
 8006444:	6059      	strne	r1, [r3, #4]
 8006446:	6863      	ldr	r3, [r4, #4]
 8006448:	bf08      	it	eq
 800644a:	6031      	streq	r1, [r6, #0]
 800644c:	5162      	str	r2, [r4, r5]
 800644e:	604b      	str	r3, [r1, #4]
 8006450:	4638      	mov	r0, r7
 8006452:	f104 060b 	add.w	r6, r4, #11
 8006456:	f000 f8cf 	bl	80065f8 <__malloc_unlock>
 800645a:	f026 0607 	bic.w	r6, r6, #7
 800645e:	1d23      	adds	r3, r4, #4
 8006460:	1af2      	subs	r2, r6, r3
 8006462:	d0b6      	beq.n	80063d2 <_malloc_r+0x22>
 8006464:	1b9b      	subs	r3, r3, r6
 8006466:	50a3      	str	r3, [r4, r2]
 8006468:	e7b3      	b.n	80063d2 <_malloc_r+0x22>
 800646a:	6862      	ldr	r2, [r4, #4]
 800646c:	42a3      	cmp	r3, r4
 800646e:	bf0c      	ite	eq
 8006470:	6032      	streq	r2, [r6, #0]
 8006472:	605a      	strne	r2, [r3, #4]
 8006474:	e7ec      	b.n	8006450 <_malloc_r+0xa0>
 8006476:	4623      	mov	r3, r4
 8006478:	6864      	ldr	r4, [r4, #4]
 800647a:	e7b2      	b.n	80063e2 <_malloc_r+0x32>
 800647c:	4634      	mov	r4, r6
 800647e:	6876      	ldr	r6, [r6, #4]
 8006480:	e7b9      	b.n	80063f6 <_malloc_r+0x46>
 8006482:	230c      	movs	r3, #12
 8006484:	603b      	str	r3, [r7, #0]
 8006486:	4638      	mov	r0, r7
 8006488:	f000 f8b6 	bl	80065f8 <__malloc_unlock>
 800648c:	e7a1      	b.n	80063d2 <_malloc_r+0x22>
 800648e:	6025      	str	r5, [r4, #0]
 8006490:	e7de      	b.n	8006450 <_malloc_r+0xa0>
 8006492:	bf00      	nop
 8006494:	24000210 	.word	0x24000210

08006498 <_sbrk_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4d06      	ldr	r5, [pc, #24]	; (80064b4 <_sbrk_r+0x1c>)
 800649c:	2300      	movs	r3, #0
 800649e:	4604      	mov	r4, r0
 80064a0:	4608      	mov	r0, r1
 80064a2:	602b      	str	r3, [r5, #0]
 80064a4:	f7fa fd7c 	bl	8000fa0 <_sbrk>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d102      	bne.n	80064b2 <_sbrk_r+0x1a>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	b103      	cbz	r3, 80064b2 <_sbrk_r+0x1a>
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	bd38      	pop	{r3, r4, r5, pc}
 80064b4:	24000218 	.word	0x24000218

080064b8 <__sread>:
 80064b8:	b510      	push	{r4, lr}
 80064ba:	460c      	mov	r4, r1
 80064bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064c0:	f000 f8a0 	bl	8006604 <_read_r>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	bfab      	itete	ge
 80064c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064ca:	89a3      	ldrhlt	r3, [r4, #12]
 80064cc:	181b      	addge	r3, r3, r0
 80064ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064d2:	bfac      	ite	ge
 80064d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80064d6:	81a3      	strhlt	r3, [r4, #12]
 80064d8:	bd10      	pop	{r4, pc}

080064da <__swrite>:
 80064da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064de:	461f      	mov	r7, r3
 80064e0:	898b      	ldrh	r3, [r1, #12]
 80064e2:	05db      	lsls	r3, r3, #23
 80064e4:	4605      	mov	r5, r0
 80064e6:	460c      	mov	r4, r1
 80064e8:	4616      	mov	r6, r2
 80064ea:	d505      	bpl.n	80064f8 <__swrite+0x1e>
 80064ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f0:	2302      	movs	r3, #2
 80064f2:	2200      	movs	r2, #0
 80064f4:	f000 f868 	bl	80065c8 <_lseek_r>
 80064f8:	89a3      	ldrh	r3, [r4, #12]
 80064fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006502:	81a3      	strh	r3, [r4, #12]
 8006504:	4632      	mov	r2, r6
 8006506:	463b      	mov	r3, r7
 8006508:	4628      	mov	r0, r5
 800650a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800650e:	f000 b817 	b.w	8006540 <_write_r>

08006512 <__sseek>:
 8006512:	b510      	push	{r4, lr}
 8006514:	460c      	mov	r4, r1
 8006516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800651a:	f000 f855 	bl	80065c8 <_lseek_r>
 800651e:	1c43      	adds	r3, r0, #1
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	bf15      	itete	ne
 8006524:	6560      	strne	r0, [r4, #84]	; 0x54
 8006526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800652a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800652e:	81a3      	strheq	r3, [r4, #12]
 8006530:	bf18      	it	ne
 8006532:	81a3      	strhne	r3, [r4, #12]
 8006534:	bd10      	pop	{r4, pc}

08006536 <__sclose>:
 8006536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800653a:	f000 b813 	b.w	8006564 <_close_r>
	...

08006540 <_write_r>:
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	4d07      	ldr	r5, [pc, #28]	; (8006560 <_write_r+0x20>)
 8006544:	4604      	mov	r4, r0
 8006546:	4608      	mov	r0, r1
 8006548:	4611      	mov	r1, r2
 800654a:	2200      	movs	r2, #0
 800654c:	602a      	str	r2, [r5, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	f7fa fcd5 	bl	8000efe <_write>
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	d102      	bne.n	800655e <_write_r+0x1e>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	b103      	cbz	r3, 800655e <_write_r+0x1e>
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	bd38      	pop	{r3, r4, r5, pc}
 8006560:	24000218 	.word	0x24000218

08006564 <_close_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4d06      	ldr	r5, [pc, #24]	; (8006580 <_close_r+0x1c>)
 8006568:	2300      	movs	r3, #0
 800656a:	4604      	mov	r4, r0
 800656c:	4608      	mov	r0, r1
 800656e:	602b      	str	r3, [r5, #0]
 8006570:	f7fa fce1 	bl	8000f36 <_close>
 8006574:	1c43      	adds	r3, r0, #1
 8006576:	d102      	bne.n	800657e <_close_r+0x1a>
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	b103      	cbz	r3, 800657e <_close_r+0x1a>
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	bd38      	pop	{r3, r4, r5, pc}
 8006580:	24000218 	.word	0x24000218

08006584 <_fstat_r>:
 8006584:	b538      	push	{r3, r4, r5, lr}
 8006586:	4d07      	ldr	r5, [pc, #28]	; (80065a4 <_fstat_r+0x20>)
 8006588:	2300      	movs	r3, #0
 800658a:	4604      	mov	r4, r0
 800658c:	4608      	mov	r0, r1
 800658e:	4611      	mov	r1, r2
 8006590:	602b      	str	r3, [r5, #0]
 8006592:	f7fa fcdc 	bl	8000f4e <_fstat>
 8006596:	1c43      	adds	r3, r0, #1
 8006598:	d102      	bne.n	80065a0 <_fstat_r+0x1c>
 800659a:	682b      	ldr	r3, [r5, #0]
 800659c:	b103      	cbz	r3, 80065a0 <_fstat_r+0x1c>
 800659e:	6023      	str	r3, [r4, #0]
 80065a0:	bd38      	pop	{r3, r4, r5, pc}
 80065a2:	bf00      	nop
 80065a4:	24000218 	.word	0x24000218

080065a8 <_isatty_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4d06      	ldr	r5, [pc, #24]	; (80065c4 <_isatty_r+0x1c>)
 80065ac:	2300      	movs	r3, #0
 80065ae:	4604      	mov	r4, r0
 80065b0:	4608      	mov	r0, r1
 80065b2:	602b      	str	r3, [r5, #0]
 80065b4:	f7fa fcdb 	bl	8000f6e <_isatty>
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	d102      	bne.n	80065c2 <_isatty_r+0x1a>
 80065bc:	682b      	ldr	r3, [r5, #0]
 80065be:	b103      	cbz	r3, 80065c2 <_isatty_r+0x1a>
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
 80065c4:	24000218 	.word	0x24000218

080065c8 <_lseek_r>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	4d07      	ldr	r5, [pc, #28]	; (80065e8 <_lseek_r+0x20>)
 80065cc:	4604      	mov	r4, r0
 80065ce:	4608      	mov	r0, r1
 80065d0:	4611      	mov	r1, r2
 80065d2:	2200      	movs	r2, #0
 80065d4:	602a      	str	r2, [r5, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	f7fa fcd4 	bl	8000f84 <_lseek>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	d102      	bne.n	80065e6 <_lseek_r+0x1e>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	b103      	cbz	r3, 80065e6 <_lseek_r+0x1e>
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	bd38      	pop	{r3, r4, r5, pc}
 80065e8:	24000218 	.word	0x24000218

080065ec <__malloc_lock>:
 80065ec:	4801      	ldr	r0, [pc, #4]	; (80065f4 <__malloc_lock+0x8>)
 80065ee:	f7ff be0b 	b.w	8006208 <__retarget_lock_acquire_recursive>
 80065f2:	bf00      	nop
 80065f4:	2400020c 	.word	0x2400020c

080065f8 <__malloc_unlock>:
 80065f8:	4801      	ldr	r0, [pc, #4]	; (8006600 <__malloc_unlock+0x8>)
 80065fa:	f7ff be06 	b.w	800620a <__retarget_lock_release_recursive>
 80065fe:	bf00      	nop
 8006600:	2400020c 	.word	0x2400020c

08006604 <_read_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4d07      	ldr	r5, [pc, #28]	; (8006624 <_read_r+0x20>)
 8006608:	4604      	mov	r4, r0
 800660a:	4608      	mov	r0, r1
 800660c:	4611      	mov	r1, r2
 800660e:	2200      	movs	r2, #0
 8006610:	602a      	str	r2, [r5, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	f7fa fc56 	bl	8000ec4 <_read>
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d102      	bne.n	8006622 <_read_r+0x1e>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	b103      	cbz	r3, 8006622 <_read_r+0x1e>
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	24000218 	.word	0x24000218

08006628 <_init>:
 8006628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662a:	bf00      	nop
 800662c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800662e:	bc08      	pop	{r3}
 8006630:	469e      	mov	lr, r3
 8006632:	4770      	bx	lr

08006634 <_fini>:
 8006634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006636:	bf00      	nop
 8006638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800663a:	bc08      	pop	{r3}
 800663c:	469e      	mov	lr, r3
 800663e:	4770      	bx	lr
