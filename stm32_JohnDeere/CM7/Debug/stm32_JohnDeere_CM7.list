
stm32_JohnDeere_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012600  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed0  080128a0  080128a0  000228a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013770  08013770  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08013770  08013770  00023770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013778  08013778  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013778  08013778  00023778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801377c  0801377c  0002377c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  08013780  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052fc  240001e8  08013964  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240054e4  08013964  000354e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030212  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002daba  00000000  00000000  00030255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b14  00000000  00000000  0005dd0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022c0  00000000  00000000  00063828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ac9  00000000  00000000  00065ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000428ae  00000000  00000000  000675b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d18b  00000000  00000000  000a9e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a3ccd  00000000  00000000  000d6fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a488  00000000  00000000  0027acb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00285140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012888 	.word	0x08012888

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	08012888 	.word	0x08012888

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemInit+0xfc>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <SystemInit+0xfc>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0xfc>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <SystemInit+0xfc>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	2b06      	cmp	r3, #6
 80006b6:	d807      	bhi.n	80006c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemInit+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x100>)
 80006c2:	f043 0307 	orr.w	r3, r3, #7
 80006c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <SystemInit+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <SystemInit+0x104>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x104>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <SystemInit+0x104>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	492c      	ldr	r1, [pc, #176]	; (8000790 <SystemInit+0x104>)
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemInit+0x108>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemInit+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <SystemInit+0x100>)
 80006fc:	f043 0307 	orr.w	r3, r3, #7
 8000700:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemInit+0x104>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemInit+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemInit+0x104>)
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <SystemInit+0x10c>)
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <SystemInit+0x104>)
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <SystemInit+0x110>)
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <SystemInit+0x104>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <SystemInit+0x114>)
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <SystemInit+0x104>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <SystemInit+0x114>)
 8000730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <SystemInit+0x104>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <SystemInit+0x114>)
 800073c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <SystemInit+0x104>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <SystemInit+0x104>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <SystemInit+0x104>)
 8000752:	2200      	movs	r2, #0
 8000754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x118>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <SystemInit+0x118>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x11c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x120>)
 8000768:	4013      	ands	r3, r2
 800076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076e:	d202      	bcs.n	8000776 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SystemInit+0x124>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0x128>)
 8000778:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800077c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	52002000 	.word	0x52002000
 8000790:	58024400 	.word	0x58024400
 8000794:	eaf6ed7f 	.word	0xeaf6ed7f
 8000798:	02020200 	.word	0x02020200
 800079c:	01ff0000 	.word	0x01ff0000
 80007a0:	01010280 	.word	0x01010280
 80007a4:	580000c0 	.word	0x580000c0
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	ffff0000 	.word	0xffff0000
 80007b0:	51008108 	.word	0x51008108
 80007b4:	52004000 	.word	0x52004000

080007b8 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <NRF24_DelayMicroSeconds+0x3c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <NRF24_DelayMicroSeconds+0x40>)
 80007ca:	fba2 2303 	umull	r2, r3, r2, r3
 80007ce:	0c9a      	lsrs	r2, r3, #18
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	fb02 f303 	mul.w	r3, r2, r3
 80007d6:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007d8:	bf00      	nop
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	60fa      	str	r2, [r7, #12]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1fa      	bne.n	80007da <NRF24_DelayMicroSeconds+0x22>
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	24000000 	.word	0x24000000
 80007f8:	165e9f81 	.word	0x165e9f81

080007fc <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d008      	beq.n	800081c <NRF24_csn+0x20>
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <NRF24_csn+0x38>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <NRF24_csn+0x3c>)
 8000810:	8811      	ldrh	r1, [r2, #0]
 8000812:	2201      	movs	r2, #1
 8000814:	4618      	mov	r0, r3
 8000816:	f005 fdcf 	bl	80063b8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800081a:	e007      	b.n	800082c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <NRF24_csn+0x38>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a05      	ldr	r2, [pc, #20]	; (8000838 <NRF24_csn+0x3c>)
 8000822:	8811      	ldrh	r1, [r2, #0]
 8000824:	2200      	movs	r2, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f005 fdc6 	bl	80063b8 <HAL_GPIO_WritePin>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	24000214 	.word	0x24000214
 8000838:	24000218 	.word	0x24000218

0800083c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d008      	beq.n	800085c <NRF24_ce+0x20>
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <NRF24_ce+0x38>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <NRF24_ce+0x3c>)
 8000850:	8811      	ldrh	r1, [r2, #0]
 8000852:	2201      	movs	r2, #1
 8000854:	4618      	mov	r0, r3
 8000856:	f005 fdaf 	bl	80063b8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800085a:	e007      	b.n	800086c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <NRF24_ce+0x38>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a05      	ldr	r2, [pc, #20]	; (8000878 <NRF24_ce+0x3c>)
 8000862:	8811      	ldrh	r1, [r2, #0]
 8000864:	2200      	movs	r2, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f005 fda6 	bl	80063b8 <HAL_GPIO_WritePin>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	24000214 	.word	0x24000214
 8000878:	2400021a 	.word	0x2400021a

0800087c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff ffb8 	bl	80007fc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	f003 031f 	and.w	r3, r3, #31
 8000892:	b2db      	uxtb	r3, r3
 8000894:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000896:	f107 010c 	add.w	r1, r7, #12
 800089a:	2364      	movs	r3, #100	; 0x64
 800089c:	2201      	movs	r2, #1
 800089e:	480a      	ldr	r0, [pc, #40]	; (80008c8 <NRF24_read_register+0x4c>)
 80008a0:	f008 fa6e 	bl	8008d80 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	1c59      	adds	r1, r3, #1
 80008aa:	2364      	movs	r3, #100	; 0x64
 80008ac:	2201      	movs	r2, #1
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <NRF24_read_register+0x4c>)
 80008b0:	f008 fc58 	bl	8009164 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008b4:	7b7b      	ldrb	r3, [r7, #13]
 80008b6:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008b8:	2001      	movs	r0, #1
 80008ba:	f7ff ff9f 	bl	80007fc <NRF24_csn>
	return retData;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2400021c 	.word	0x2400021c

080008cc <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	6039      	str	r1, [r7, #0]
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	4613      	mov	r3, r2
 80008da:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff ff8d 	bl	80007fc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	f003 031f 	and.w	r3, r3, #31
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008ec:	f107 010c 	add.w	r1, r7, #12
 80008f0:	2364      	movs	r3, #100	; 0x64
 80008f2:	2201      	movs	r2, #1
 80008f4:	4808      	ldr	r0, [pc, #32]	; (8000918 <NRF24_read_registerN+0x4c>)
 80008f6:	f008 fa43 	bl	8008d80 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80008fa:	79bb      	ldrb	r3, [r7, #6]
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	2364      	movs	r3, #100	; 0x64
 8000900:	6839      	ldr	r1, [r7, #0]
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <NRF24_read_registerN+0x4c>)
 8000904:	f008 fc2e 	bl	8009164 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000908:	2001      	movs	r0, #1
 800090a:	f7ff ff77 	bl	80007fc <NRF24_csn>
}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2400021c 	.word	0x2400021c

0800091c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	460a      	mov	r2, r1
 8000926:	71fb      	strb	r3, [r7, #7]
 8000928:	4613      	mov	r3, r2
 800092a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff ff65 	bl	80007fc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	f043 0320 	orr.w	r3, r3, #32
 8000938:	b2db      	uxtb	r3, r3
 800093a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800093c:	79bb      	ldrb	r3, [r7, #6]
 800093e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000940:	f107 010c 	add.w	r1, r7, #12
 8000944:	2364      	movs	r3, #100	; 0x64
 8000946:	2202      	movs	r2, #2
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <NRF24_write_register+0x40>)
 800094a:	f008 fa19 	bl	8008d80 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff ff54 	bl	80007fc <NRF24_csn>
}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2400021c 	.word	0x2400021c

08000960 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	71fb      	strb	r3, [r7, #7]
 800096c:	4613      	mov	r3, r2
 800096e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff ff43 	bl	80007fc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	b2db      	uxtb	r3, r3
 800097e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000980:	f107 010c 	add.w	r1, r7, #12
 8000984:	2364      	movs	r3, #100	; 0x64
 8000986:	2201      	movs	r2, #1
 8000988:	4808      	ldr	r0, [pc, #32]	; (80009ac <NRF24_write_registerN+0x4c>)
 800098a:	f008 f9f9 	bl	8008d80 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800098e:	79bb      	ldrb	r3, [r7, #6]
 8000990:	b29a      	uxth	r2, r3
 8000992:	2364      	movs	r3, #100	; 0x64
 8000994:	6839      	ldr	r1, [r7, #0]
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <NRF24_write_registerN+0x4c>)
 8000998:	f008 f9f2 	bl	8008d80 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800099c:	2001      	movs	r0, #1
 800099e:	f7ff ff2d 	bl	80007fc <NRF24_csn>
}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2400021c 	.word	0x2400021c

080009b0 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009bc:	f000 fa0a 	bl	8000dd4 <NRF24_getPayloadSize>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	78fb      	ldrb	r3, [r7, #3]
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d303      	bcc.n	80009d2 <NRF24_read_payload+0x22>
 80009ca:	f000 fa03 	bl	8000dd4 <NRF24_getPayloadSize>
 80009ce:	4603      	mov	r3, r0
 80009d0:	e000      	b.n	80009d4 <NRF24_read_payload+0x24>
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff ff10 	bl	80007fc <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009dc:	2361      	movs	r3, #97	; 0x61
 80009de:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e0:	f107 010e 	add.w	r1, r7, #14
 80009e4:	2364      	movs	r3, #100	; 0x64
 80009e6:	2201      	movs	r2, #1
 80009e8:	4808      	ldr	r0, [pc, #32]	; (8000a0c <NRF24_read_payload+0x5c>)
 80009ea:	f008 f9c9 	bl	8008d80 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	2364      	movs	r3, #100	; 0x64
 80009f4:	6879      	ldr	r1, [r7, #4]
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <NRF24_read_payload+0x5c>)
 80009f8:	f008 fbb4 	bl	8009164 <HAL_SPI_Receive>
	NRF24_csn(1);
 80009fc:	2001      	movs	r0, #1
 80009fe:	f7ff fefd 	bl	80007fc <NRF24_csn>
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2400021c 	.word	0x2400021c

08000a10 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a14:	21ff      	movs	r1, #255	; 0xff
 8000a16:	20e1      	movs	r0, #225	; 0xe1
 8000a18:	f7ff ff80 	bl	800091c <NRF24_write_register>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a24:	21ff      	movs	r1, #255	; 0xff
 8000a26:	20e2      	movs	r0, #226	; 0xe2
 8000a28:	f7ff ff78 	bl	800091c <NRF24_write_register>
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a36:	2007      	movs	r0, #7
 8000a38:	f7ff ff20 	bl	800087c <NRF24_read_register>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a40:	79fb      	ldrb	r3, [r7, #7]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b084      	sub	sp, #16
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	61fb      	str	r3, [r7, #28]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	807b      	strh	r3, [r7, #2]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a60:	4b66      	ldr	r3, [pc, #408]	; (8000bfc <NRF24_begin+0x1b0>)
 8000a62:	4618      	mov	r0, r3
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	2288      	movs	r2, #136	; 0x88
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f00e ffb3 	bl	800f9d6 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a70:	4a63      	ldr	r2, [pc, #396]	; (8000c00 <NRF24_begin+0x1b4>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a76:	4a63      	ldr	r2, [pc, #396]	; (8000c04 <NRF24_begin+0x1b8>)
 8000a78:	887b      	ldrh	r3, [r7, #2]
 8000a7a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a7c:	4a62      	ldr	r2, [pc, #392]	; (8000c08 <NRF24_begin+0x1bc>)
 8000a7e:	883b      	ldrh	r3, [r7, #0]
 8000a80:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a82:	2001      	movs	r0, #1
 8000a84:	f7ff feba 	bl	80007fc <NRF24_csn>
	NRF24_ce(0);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff fed7 	bl	800083c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a8e:	2005      	movs	r0, #5
 8000a90:	f004 fc56 	bl	8005340 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a94:	2108      	movs	r1, #8
 8000a96:	2000      	movs	r0, #0
 8000a98:	f7ff ff40 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000a9c:	213f      	movs	r1, #63	; 0x3f
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f7ff ff3c 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aa4:	2103      	movs	r1, #3
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f7ff ff38 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2003      	movs	r0, #3
 8000ab0:	f7ff ff34 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2004      	movs	r0, #4
 8000ab8:	f7ff ff30 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000abc:	2102      	movs	r1, #2
 8000abe:	2005      	movs	r0, #5
 8000ac0:	f7ff ff2c 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000ac4:	210f      	movs	r1, #15
 8000ac6:	2006      	movs	r0, #6
 8000ac8:	f7ff ff28 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000acc:	210e      	movs	r1, #14
 8000ace:	2007      	movs	r0, #7
 8000ad0:	f7ff ff24 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2008      	movs	r0, #8
 8000ad8:	f7ff ff20 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2009      	movs	r0, #9
 8000ae0:	f7ff ff1c 	bl	800091c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000ae4:	23e7      	movs	r3, #231	; 0xe7
 8000ae6:	733b      	strb	r3, [r7, #12]
 8000ae8:	23e7      	movs	r3, #231	; 0xe7
 8000aea:	72fb      	strb	r3, [r7, #11]
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	72bb      	strb	r3, [r7, #10]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	727b      	strb	r3, [r7, #9]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	2205      	movs	r2, #5
 8000afe:	4619      	mov	r1, r3
 8000b00:	200a      	movs	r0, #10
 8000b02:	f7ff ff2d 	bl	8000960 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000b06:	23c2      	movs	r3, #194	; 0xc2
 8000b08:	733b      	strb	r3, [r7, #12]
 8000b0a:	23c2      	movs	r3, #194	; 0xc2
 8000b0c:	72fb      	strb	r3, [r7, #11]
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	72bb      	strb	r3, [r7, #10]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	727b      	strb	r3, [r7, #9]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	2205      	movs	r2, #5
 8000b20:	4619      	mov	r1, r3
 8000b22:	200b      	movs	r0, #11
 8000b24:	f7ff ff1c 	bl	8000960 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b28:	21c3      	movs	r1, #195	; 0xc3
 8000b2a:	200c      	movs	r0, #12
 8000b2c:	f7ff fef6 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b30:	21c4      	movs	r1, #196	; 0xc4
 8000b32:	200d      	movs	r0, #13
 8000b34:	f7ff fef2 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b38:	21c5      	movs	r1, #197	; 0xc5
 8000b3a:	200e      	movs	r0, #14
 8000b3c:	f7ff feee 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b40:	21c6      	movs	r1, #198	; 0xc6
 8000b42:	200f      	movs	r0, #15
 8000b44:	f7ff feea 	bl	800091c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000b48:	23e7      	movs	r3, #231	; 0xe7
 8000b4a:	733b      	strb	r3, [r7, #12]
 8000b4c:	23e7      	movs	r3, #231	; 0xe7
 8000b4e:	72fb      	strb	r3, [r7, #11]
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	72bb      	strb	r3, [r7, #10]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	727b      	strb	r3, [r7, #9]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	2205      	movs	r2, #5
 8000b62:	4619      	mov	r1, r3
 8000b64:	2010      	movs	r0, #16
 8000b66:	f7ff fefb 	bl	8000960 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2011      	movs	r0, #17
 8000b6e:	f7ff fed5 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2012      	movs	r0, #18
 8000b76:	f7ff fed1 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2013      	movs	r0, #19
 8000b7e:	f7ff fecd 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2014      	movs	r0, #20
 8000b86:	f7ff fec9 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2015      	movs	r0, #21
 8000b8e:	f7ff fec5 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2016      	movs	r0, #22
 8000b96:	f7ff fec1 	bl	800091c <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000b9a:	f000 fa7d 	bl	8001098 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	201c      	movs	r0, #28
 8000ba2:	f7ff febb 	bl	800091c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201d      	movs	r0, #29
 8000baa:	f7ff feb7 	bl	800091c <NRF24_write_register>
	printRadioSettings();
 8000bae:	f000 fa8d 	bl	80010cc <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	200f      	movs	r0, #15
 8000bb6:	f000 f8c5 	bl	8000d44 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bba:	2003      	movs	r0, #3
 8000bbc:	f000 f97d 	bl	8000eba <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f000 f9b3 	bl	8000f2c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f000 f9f6 	bl	8000fb8 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bcc:	f000 f948 	bl	8000e60 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd0:	2020      	movs	r0, #32
 8000bd2:	f000 f8e7 	bl	8000da4 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000bd6:	f000 fa56 	bl	8001086 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000bda:	204c      	movs	r0, #76	; 0x4c
 8000bdc:	f000 f8cd 	bl	8000d7a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be0:	f7ff ff16 	bl	8000a10 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000be4:	f7ff ff1c 	bl	8000a20 <NRF24_flush_rx>

	NRF24_powerDown();
 8000be8:	f000 fa0e 	bl	8001008 <NRF24_powerDown>

}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bf6:	b002      	add	sp, #8
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	2400021c 	.word	0x2400021c
 8000c00:	24000214 	.word	0x24000214
 8000c04:	24000218 	.word	0x24000218
 8000c08:	2400021a 	.word	0x2400021a

08000c0c <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff fe33 	bl	800087c <NRF24_read_register>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f043 0303 	orr.w	r3, r3, #3
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	4619      	mov	r1, r3
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff fe7b 	bl	800091c <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <NRF24_startListening+0x48>)
 8000c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	d004      	beq.n	8000c3a <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c30:	2205      	movs	r2, #5
 8000c32:	4908      	ldr	r1, [pc, #32]	; (8000c54 <NRF24_startListening+0x48>)
 8000c34:	200a      	movs	r0, #10
 8000c36:	f7ff fe93 	bl	8000960 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000c3a:	f7ff fee9 	bl	8000a10 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c3e:	f7ff feef 	bl	8000a20 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c42:	2001      	movs	r0, #1
 8000c44:	f7ff fdfa 	bl	800083c <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c48:	2096      	movs	r0, #150	; 0x96
 8000c4a:	f7ff fdb5 	bl	80007b8 <NRF24_DelayMicroSeconds>
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	24000208 	.word	0x24000208

08000c58 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f000 f9e2 	bl	8001026 <NRF24_availablePipe>
 8000c62:	4603      	mov	r3, r0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	4619      	mov	r1, r3
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff fe99 	bl	80009b0 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c7e:	2017      	movs	r0, #23
 8000c80:	f7ff fdfc 	bl	800087c <NRF24_read_register>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c8c:	f7ff fec8 	bl	8000a20 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c90:	f000 f8ac 	bl	8000dec <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bf14      	ite	ne
 8000c9a:	2301      	movne	r3, #1
 8000c9c:	2300      	moveq	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4601      	mov	r1, r0
 8000cb0:	e9c7 2300 	strd	r2, r3, [r7]
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d104      	bne.n	8000cc8 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cc2:	491c      	ldr	r1, [pc, #112]	; (8000d34 <NRF24_openReadingPipe+0x8c>)
 8000cc4:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d82d      	bhi.n	8000d2a <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d808      	bhi.n	8000ce6 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <NRF24_openReadingPipe+0x90>)
 8000cd8:	5cd3      	ldrb	r3, [r2, r3]
 8000cda:	4639      	mov	r1, r7
 8000cdc:	2205      	movs	r2, #5
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fe3e 	bl	8000960 <NRF24_write_registerN>
 8000ce4:	e007      	b.n	8000cf6 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <NRF24_openReadingPipe+0x90>)
 8000cea:	5cd3      	ldrb	r3, [r2, r3]
 8000cec:	4639      	mov	r1, r7
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fe35 	bl	8000960 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <NRF24_openReadingPipe+0x94>)
 8000cfa:	5cd3      	ldrb	r3, [r2, r3]
 8000cfc:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <NRF24_openReadingPipe+0x98>)
 8000cfe:	7812      	ldrb	r2, [r2, #0]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fe0a 	bl	800091c <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d08:	2002      	movs	r0, #2
 8000d0a:	f7ff fdb7 	bl	800087c <NRF24_read_register>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b25a      	sxtb	r2, r3
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	2101      	movs	r1, #1
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b25b      	sxtb	r3, r3
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4619      	mov	r1, r3
 8000d24:	2002      	movs	r0, #2
 8000d26:	f7ff fdf9 	bl	800091c <NRF24_write_register>
	}

}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	24000208 	.word	0x24000208
 8000d38:	08012ff4 	.word	0x08012ff4
 8000d3c:	08012ffc 	.word	0x08012ffc
 8000d40:	24000210 	.word	0x24000210

08000d44 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	4613      	mov	r3, r2
 8000d52:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	011b      	lsls	r3, r3, #4
 8000d58:	b25a      	sxtb	r2, r3
 8000d5a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	b25b      	sxtb	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	2004      	movs	r0, #4
 8000d6e:	f7ff fdd5 	bl	800091c <NRF24_write_register>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d84:	237f      	movs	r3, #127	; 0x7f
 8000d86:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d88:	7bfa      	ldrb	r2, [r7, #15]
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	bf28      	it	cs
 8000d90:	4613      	movcs	r3, r2
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	4619      	mov	r1, r3
 8000d96:	2005      	movs	r0, #5
 8000d98:	f7ff fdc0 	bl	800091c <NRF24_write_register>
}
 8000d9c:	bf00      	nop
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000dae:	2320      	movs	r3, #32
 8000db0:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4293      	cmp	r3, r2
 8000db8:	bf28      	it	cs
 8000dba:	4613      	movcs	r3, r2
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <NRF24_setPayloadSize+0x2c>)
 8000dc0:	701a      	strb	r2, [r3, #0]
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	24000210 	.word	0x24000210

08000dd4 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
	return payload_size;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <NRF24_getPayloadSize+0x14>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	24000210 	.word	0x24000210

08000dec <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df0:	2060      	movs	r0, #96	; 0x60
 8000df2:	f7ff fd43 	bl	800087c <NRF24_read_register>
 8000df6:	4603      	mov	r3, r0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <NRF24_enableDynamicPayloads>:
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
}
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e00:	201d      	movs	r0, #29
 8000e02:	f7ff fd3b 	bl	800087c <NRF24_read_register>
 8000e06:	4603      	mov	r3, r0
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4619      	mov	r1, r3
 8000e10:	201d      	movs	r0, #29
 8000e12:	f7ff fd83 	bl	800091c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e16:	201d      	movs	r0, #29
 8000e18:	f7ff fd30 	bl	800087c <NRF24_read_register>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10c      	bne.n	8000e3c <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e22:	f000 f939 	bl	8001098 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e26:	201d      	movs	r0, #29
 8000e28:	f7ff fd28 	bl	800087c <NRF24_read_register>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	4619      	mov	r1, r3
 8000e36:	201d      	movs	r0, #29
 8000e38:	f7ff fd70 	bl	800091c <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000e3c:	201c      	movs	r0, #28
 8000e3e:	f7ff fd1d 	bl	800087c <NRF24_read_register>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	201c      	movs	r0, #28
 8000e4e:	f7ff fd65 	bl	800091c <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000e52:	4b02      	ldr	r3, [pc, #8]	; (8000e5c <NRF24_enableDynamicPayloads+0x60>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	24000211 	.word	0x24000211

08000e60 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000e64:	201d      	movs	r0, #29
 8000e66:	f7ff fd09 	bl	800087c <NRF24_read_register>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f023 0304 	bic.w	r3, r3, #4
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4619      	mov	r1, r3
 8000e74:	201d      	movs	r0, #29
 8000e76:	f7ff fd51 	bl	800091c <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	201c      	movs	r0, #28
 8000e7e:	f7ff fd4d 	bl	800091c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e82:	4b02      	ldr	r3, [pc, #8]	; (8000e8c <NRF24_disableDynamicPayloads+0x2c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	24000211 	.word	0x24000211

08000e90 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d004      	beq.n	8000eaa <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000ea0:	213f      	movs	r1, #63	; 0x3f
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff fd3a 	bl	800091c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000ea8:	e003      	b.n	8000eb2 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2001      	movs	r0, #1
 8000eae:	f7ff fd35 	bl	800091c <NRF24_write_register>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b084      	sub	sp, #16
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000ec4:	2006      	movs	r0, #6
 8000ec6:	f7ff fcd9 	bl	800087c <NRF24_read_register>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	f023 0306 	bic.w	r3, r3, #6
 8000ed4:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d104      	bne.n	8000ee6 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	f043 0306 	orr.w	r3, r3, #6
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e019      	b.n	8000f1a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d104      	bne.n	8000ef6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e011      	b.n	8000f1a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d104      	bne.n	8000f06 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	f043 0302 	orr.w	r3, r3, #2
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e009      	b.n	8000f1a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d006      	beq.n	8000f1a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d103      	bne.n	8000f1a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	f043 0306 	orr.w	r3, r3, #6
 8000f18:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	2006      	movs	r0, #6
 8000f20:	f7ff fcfc 	bl	800091c <NRF24_write_register>
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f36:	2300      	movs	r3, #0
 8000f38:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f3a:	2006      	movs	r0, #6
 8000f3c:	f7ff fc9e 	bl	800087c <NRF24_read_register>
 8000f40:	4603      	mov	r3, r0
 8000f42:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <NRF24_setDataRate+0x88>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000f4a:	7bbb      	ldrb	r3, [r7, #14]
 8000f4c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f50:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d107      	bne.n	8000f68 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <NRF24_setDataRate+0x88>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	f043 0320 	orr.w	r3, r3, #32
 8000f64:	73bb      	strb	r3, [r7, #14]
 8000f66:	e00d      	b.n	8000f84 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d107      	bne.n	8000f7e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <NRF24_setDataRate+0x88>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	f043 0308 	orr.w	r3, r3, #8
 8000f7a:	73bb      	strb	r3, [r7, #14]
 8000f7c:	e002      	b.n	8000f84 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <NRF24_setDataRate+0x88>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f84:	7bbb      	ldrb	r3, [r7, #14]
 8000f86:	4619      	mov	r1, r3
 8000f88:	2006      	movs	r0, #6
 8000f8a:	f7ff fcc7 	bl	800091c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000f8e:	2006      	movs	r0, #6
 8000f90:	f7ff fc74 	bl	800087c <NRF24_read_register>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d102      	bne.n	8000fa4 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e002      	b.n	8000faa <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <NRF24_setDataRate+0x88>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	24000212 	.word	0x24000212

08000fb8 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f7ff fc5a 	bl	800087c <NRF24_read_register>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f023 030c 	bic.w	r3, r3, #12
 8000fce:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00f      	beq.n	8000ff6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d104      	bne.n	8000fe6 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	f043 0308 	orr.w	r3, r3, #8
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e007      	b.n	8000ff6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	f043 0308 	orr.w	r3, r3, #8
 8000fec:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff fc8e 	bl	800091c <NRF24_write_register>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff fc35 	bl	800087c <NRF24_read_register>
 8001012:	4603      	mov	r3, r0
 8001014:	f023 0302 	bic.w	r3, r3, #2
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4619      	mov	r1, r3
 800101c:	2000      	movs	r0, #0
 800101e:	f7ff fc7d 	bl	800091c <NRF24_write_register>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}

08001026 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800102e:	f7ff fcff 	bl	8000a30 <NRF24_get_status>
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800103c:	2b00      	cmp	r3, #0
 800103e:	bf14      	ite	ne
 8001040:	2301      	movne	r3, #1
 8001042:	2300      	moveq	r3, #0
 8001044:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d017      	beq.n	800107c <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d007      	beq.n	8001062 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	085b      	lsrs	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	b2da      	uxtb	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001062:	2140      	movs	r1, #64	; 0x40
 8001064:	2007      	movs	r0, #7
 8001066:	f7ff fc59 	bl	800091c <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001074:	2120      	movs	r1, #32
 8001076:	2007      	movs	r0, #7
 8001078:	f7ff fc50 	bl	800091c <NRF24_write_register>
    }
  }
  return result;
 800107c:	7bbb      	ldrb	r3, [r7, #14]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800108a:	2170      	movs	r1, #112	; 0x70
 800108c:	2007      	movs	r0, #7
 800108e:	f7ff fc45 	bl	800091c <NRF24_write_register>
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff fbac 	bl	80007fc <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80010a4:	2350      	movs	r3, #80	; 0x50
 80010a6:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80010a8:	2373      	movs	r3, #115	; 0x73
 80010aa:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80010ac:	1d39      	adds	r1, r7, #4
 80010ae:	2364      	movs	r3, #100	; 0x64
 80010b0:	2202      	movs	r2, #2
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <NRF24_ACTIVATE_cmd+0x30>)
 80010b4:	f007 fe64 	bl	8008d80 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f7ff fb9f 	bl	80007fc <NRF24_csn>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2400021c 	.word	0x2400021c

080010cc <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80010cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ce:	b0a1      	sub	sp, #132	; 0x84
 80010d0:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	49c3      	ldr	r1, [pc, #780]	; (80013e4 <printRadioSettings+0x318>)
 80010d8:	4618      	mov	r0, r3
 80010da:	f00e faaf 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f94c 	bl	8000380 <strlen>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	f107 0108 	add.w	r1, r7, #8
 80010f0:	230a      	movs	r3, #10
 80010f2:	48bd      	ldr	r0, [pc, #756]	; (80013e8 <printRadioSettings+0x31c>)
 80010f4:	f009 fdc8 	bl	800ac88 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff fbbf 	bl	800087c <NRF24_read_register>
 80010fe:	4603      	mov	r3, r0
 8001100:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8001104:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	2b00      	cmp	r3, #0
 800110e:	d013      	beq.n	8001138 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001110:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <printRadioSettings+0x5e>
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	49b2      	ldr	r1, [pc, #712]	; (80013ec <printRadioSettings+0x320>)
 8001122:	4618      	mov	r0, r3
 8001124:	f00e fa8a 	bl	800f63c <siprintf>
 8001128:	e00c      	b.n	8001144 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	49b0      	ldr	r1, [pc, #704]	; (80013f0 <printRadioSettings+0x324>)
 8001130:	4618      	mov	r0, r3
 8001132:	f00e fa83 	bl	800f63c <siprintf>
 8001136:	e005      	b.n	8001144 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	49ad      	ldr	r1, [pc, #692]	; (80013f4 <printRadioSettings+0x328>)
 800113e:	4618      	mov	r0, r3
 8001140:	f00e fa7c 	bl	800f63c <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001144:	f107 0308 	add.w	r3, r7, #8
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f919 	bl	8000380 <strlen>
 800114e:	4603      	mov	r3, r0
 8001150:	b29a      	uxth	r2, r3
 8001152:	f107 0108 	add.w	r1, r7, #8
 8001156:	230a      	movs	r3, #10
 8001158:	48a3      	ldr	r0, [pc, #652]	; (80013e8 <printRadioSettings+0x31c>)
 800115a:	f009 fd95 	bl	800ac88 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800115e:	2001      	movs	r0, #1
 8001160:	f7ff fb8c 	bl	800087c <NRF24_read_register>
 8001164:	4603      	mov	r3, r0
 8001166:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800116a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800116e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001172:	2b00      	cmp	r3, #0
 8001174:	bfcc      	ite	gt
 8001176:	2301      	movgt	r3, #1
 8001178:	2300      	movle	r3, #0
 800117a:	b2db      	uxtb	r3, r3
 800117c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800117e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001182:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001186:	2b00      	cmp	r3, #0
 8001188:	bfcc      	ite	gt
 800118a:	2301      	movgt	r3, #1
 800118c:	2300      	movle	r3, #0
 800118e:	b2db      	uxtb	r3, r3
 8001190:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001192:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001196:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800119a:	2b00      	cmp	r3, #0
 800119c:	bfcc      	ite	gt
 800119e:	2301      	movgt	r3, #1
 80011a0:	2300      	movle	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011aa:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	bfcc      	ite	gt
 80011b2:	2301      	movgt	r3, #1
 80011b4:	2300      	movle	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011be:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	bfcc      	ite	gt
 80011c6:	2301      	movgt	r3, #1
 80011c8:	2300      	movle	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011d2:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bfcc      	ite	gt
 80011da:	2301      	movgt	r3, #1
 80011dc:	2300      	movle	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f107 0008 	add.w	r0, r7, #8
 80011e4:	9303      	str	r3, [sp, #12]
 80011e6:	9402      	str	r4, [sp, #8]
 80011e8:	9101      	str	r1, [sp, #4]
 80011ea:	9200      	str	r2, [sp, #0]
 80011ec:	4633      	mov	r3, r6
 80011ee:	462a      	mov	r2, r5
 80011f0:	4981      	ldr	r1, [pc, #516]	; (80013f8 <printRadioSettings+0x32c>)
 80011f2:	f00e fa23 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f8c0 	bl	8000380 <strlen>
 8001200:	4603      	mov	r3, r0
 8001202:	b29a      	uxth	r2, r3
 8001204:	f107 0108 	add.w	r1, r7, #8
 8001208:	230a      	movs	r3, #10
 800120a:	4877      	ldr	r0, [pc, #476]	; (80013e8 <printRadioSettings+0x31c>)
 800120c:	f009 fd3c 	bl	800ac88 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001210:	2002      	movs	r0, #2
 8001212:	f7ff fb33 	bl	800087c <NRF24_read_register>
 8001216:	4603      	mov	r3, r0
 8001218:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800121c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001220:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001224:	2b00      	cmp	r3, #0
 8001226:	bfcc      	ite	gt
 8001228:	2301      	movgt	r3, #1
 800122a:	2300      	movle	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001230:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001234:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001238:	2b00      	cmp	r3, #0
 800123a:	bfcc      	ite	gt
 800123c:	2301      	movgt	r3, #1
 800123e:	2300      	movle	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001244:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001248:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800124c:	2b00      	cmp	r3, #0
 800124e:	bfcc      	ite	gt
 8001250:	2301      	movgt	r3, #1
 8001252:	2300      	movle	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001258:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800125c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001260:	2b00      	cmp	r3, #0
 8001262:	bfcc      	ite	gt
 8001264:	2301      	movgt	r3, #1
 8001266:	2300      	movle	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800126c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001270:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001274:	2b00      	cmp	r3, #0
 8001276:	bfcc      	ite	gt
 8001278:	2301      	movgt	r3, #1
 800127a:	2300      	movle	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001280:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001284:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001288:	2b00      	cmp	r3, #0
 800128a:	bfcc      	ite	gt
 800128c:	2301      	movgt	r3, #1
 800128e:	2300      	movle	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f107 0008 	add.w	r0, r7, #8
 8001296:	9303      	str	r3, [sp, #12]
 8001298:	9402      	str	r4, [sp, #8]
 800129a:	9101      	str	r1, [sp, #4]
 800129c:	9200      	str	r2, [sp, #0]
 800129e:	4633      	mov	r3, r6
 80012a0:	462a      	mov	r2, r5
 80012a2:	4956      	ldr	r1, [pc, #344]	; (80013fc <printRadioSettings+0x330>)
 80012a4:	f00e f9ca 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f867 	bl	8000380 <strlen>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	f107 0108 	add.w	r1, r7, #8
 80012ba:	230a      	movs	r3, #10
 80012bc:	484a      	ldr	r0, [pc, #296]	; (80013e8 <printRadioSettings+0x31c>)
 80012be:	f009 fce3 	bl	800ac88 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80012c2:	2003      	movs	r0, #3
 80012c4:	f7ff fada 	bl	800087c <NRF24_read_register>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80012d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012d6:	3302      	adds	r3, #2
 80012d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80012dc:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	4946      	ldr	r1, [pc, #280]	; (8001400 <printRadioSettings+0x334>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f00e f9a8 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f845 	bl	8000380 <strlen>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	f107 0108 	add.w	r1, r7, #8
 80012fe:	230a      	movs	r3, #10
 8001300:	4839      	ldr	r0, [pc, #228]	; (80013e8 <printRadioSettings+0x31c>)
 8001302:	f009 fcc1 	bl	800ac88 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001306:	2005      	movs	r0, #5
 8001308:	f7ff fab8 	bl	800087c <NRF24_read_register>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001312:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	4939      	ldr	r1, [pc, #228]	; (8001404 <printRadioSettings+0x338>)
 8001320:	4618      	mov	r0, r3
 8001322:	f00e f98b 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f828 	bl	8000380 <strlen>
 8001330:	4603      	mov	r3, r0
 8001332:	b29a      	uxth	r2, r3
 8001334:	f107 0108 	add.w	r1, r7, #8
 8001338:	230a      	movs	r3, #10
 800133a:	482b      	ldr	r0, [pc, #172]	; (80013e8 <printRadioSettings+0x31c>)
 800133c:	f009 fca4 	bl	800ac88 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001340:	2006      	movs	r0, #6
 8001342:	f7ff fa9b 	bl	800087c <NRF24_read_register>
 8001346:	4603      	mov	r3, r0
 8001348:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800134c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	2b00      	cmp	r3, #0
 8001356:	d006      	beq.n	8001366 <printRadioSettings+0x29a>
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	492a      	ldr	r1, [pc, #168]	; (8001408 <printRadioSettings+0x33c>)
 800135e:	4618      	mov	r0, r3
 8001360:	f00e f96c 	bl	800f63c <siprintf>
 8001364:	e005      	b.n	8001372 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001366:	f107 0308 	add.w	r3, r7, #8
 800136a:	4928      	ldr	r1, [pc, #160]	; (800140c <printRadioSettings+0x340>)
 800136c:	4618      	mov	r0, r3
 800136e:	f00e f965 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f802 	bl	8000380 <strlen>
 800137c:	4603      	mov	r3, r0
 800137e:	b29a      	uxth	r2, r3
 8001380:	f107 0108 	add.w	r1, r7, #8
 8001384:	230a      	movs	r3, #10
 8001386:	4818      	ldr	r0, [pc, #96]	; (80013e8 <printRadioSettings+0x31c>)
 8001388:	f009 fc7e 	bl	800ac88 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 800138c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001390:	f003 0306 	and.w	r3, r3, #6
 8001394:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001398:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800139c:	085b      	lsrs	r3, r3, #1
 800139e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80013a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d106      	bne.n	80013b8 <printRadioSettings+0x2ec>
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	4918      	ldr	r1, [pc, #96]	; (8001410 <printRadioSettings+0x344>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f00e f943 	bl	800f63c <siprintf>
 80013b6:	e03b      	b.n	8001430 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80013b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d106      	bne.n	80013ce <printRadioSettings+0x302>
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	4913      	ldr	r1, [pc, #76]	; (8001414 <printRadioSettings+0x348>)
 80013c6:	4618      	mov	r0, r3
 80013c8:	f00e f938 	bl	800f63c <siprintf>
 80013cc:	e030      	b.n	8001430 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80013ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d122      	bne.n	800141c <printRadioSettings+0x350>
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	490f      	ldr	r1, [pc, #60]	; (8001418 <printRadioSettings+0x34c>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f00e f92d 	bl	800f63c <siprintf>
 80013e2:	e025      	b.n	8001430 <printRadioSettings+0x364>
 80013e4:	080128a0 	.word	0x080128a0
 80013e8:	240002a4 	.word	0x240002a4
 80013ec:	080128d4 	.word	0x080128d4
 80013f0:	080128f0 	.word	0x080128f0
 80013f4:	0801290c 	.word	0x0801290c
 80013f8:	08012920 	.word	0x08012920
 80013fc:	08012964 	.word	0x08012964
 8001400:	080129b0 	.word	0x080129b0
 8001404:	080129cc 	.word	0x080129cc
 8001408:	080129e0 	.word	0x080129e0
 800140c:	080129f8 	.word	0x080129f8
 8001410:	08012a10 	.word	0x08012a10
 8001414:	08012a24 	.word	0x08012a24
 8001418:	08012a38 	.word	0x08012a38
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 800141c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001420:	2b03      	cmp	r3, #3
 8001422:	d105      	bne.n	8001430 <printRadioSettings+0x364>
 8001424:	f107 0308 	add.w	r3, r7, #8
 8001428:	49d7      	ldr	r1, [pc, #860]	; (8001788 <printRadioSettings+0x6bc>)
 800142a:	4618      	mov	r0, r3
 800142c:	f00e f906 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	4618      	mov	r0, r3
 8001436:	f7fe ffa3 	bl	8000380 <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	b29a      	uxth	r2, r3
 800143e:	f107 0108 	add.w	r1, r7, #8
 8001442:	230a      	movs	r3, #10
 8001444:	48d1      	ldr	r0, [pc, #836]	; (800178c <printRadioSettings+0x6c0>)
 8001446:	f009 fc1f 	bl	800ac88 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800144a:	463b      	mov	r3, r7
 800144c:	2205      	movs	r2, #5
 800144e:	4619      	mov	r1, r3
 8001450:	200a      	movs	r0, #10
 8001452:	f7ff fa3b 	bl	80008cc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001456:	793b      	ldrb	r3, [r7, #4]
 8001458:	461c      	mov	r4, r3
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	461d      	mov	r5, r3
 800145e:	78bb      	ldrb	r3, [r7, #2]
 8001460:	787a      	ldrb	r2, [r7, #1]
 8001462:	7839      	ldrb	r1, [r7, #0]
 8001464:	f107 0008 	add.w	r0, r7, #8
 8001468:	9102      	str	r1, [sp, #8]
 800146a:	9201      	str	r2, [sp, #4]
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	462b      	mov	r3, r5
 8001470:	4622      	mov	r2, r4
 8001472:	49c7      	ldr	r1, [pc, #796]	; (8001790 <printRadioSettings+0x6c4>)
 8001474:	f00e f8e2 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe ff7f 	bl	8000380 <strlen>
 8001482:	4603      	mov	r3, r0
 8001484:	b29a      	uxth	r2, r3
 8001486:	f107 0108 	add.w	r1, r7, #8
 800148a:	230a      	movs	r3, #10
 800148c:	48bf      	ldr	r0, [pc, #764]	; (800178c <printRadioSettings+0x6c0>)
 800148e:	f009 fbfb 	bl	800ac88 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001492:	463b      	mov	r3, r7
 8001494:	2205      	movs	r2, #5
 8001496:	4619      	mov	r1, r3
 8001498:	200b      	movs	r0, #11
 800149a:	f7ff fa17 	bl	80008cc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800149e:	793b      	ldrb	r3, [r7, #4]
 80014a0:	461c      	mov	r4, r3
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	461d      	mov	r5, r3
 80014a6:	78bb      	ldrb	r3, [r7, #2]
 80014a8:	787a      	ldrb	r2, [r7, #1]
 80014aa:	7839      	ldrb	r1, [r7, #0]
 80014ac:	f107 0008 	add.w	r0, r7, #8
 80014b0:	9102      	str	r1, [sp, #8]
 80014b2:	9201      	str	r2, [sp, #4]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	462b      	mov	r3, r5
 80014b8:	4622      	mov	r2, r4
 80014ba:	49b6      	ldr	r1, [pc, #728]	; (8001794 <printRadioSettings+0x6c8>)
 80014bc:	f00e f8be 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe ff5b 	bl	8000380 <strlen>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	f107 0108 	add.w	r1, r7, #8
 80014d2:	230a      	movs	r3, #10
 80014d4:	48ad      	ldr	r0, [pc, #692]	; (800178c <printRadioSettings+0x6c0>)
 80014d6:	f009 fbd7 	bl	800ac88 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80014da:	463b      	mov	r3, r7
 80014dc:	2201      	movs	r2, #1
 80014de:	4619      	mov	r1, r3
 80014e0:	200c      	movs	r0, #12
 80014e2:	f7ff f9f3 	bl	80008cc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014e6:	783b      	ldrb	r3, [r7, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	f107 0308 	add.w	r3, r7, #8
 80014ee:	49aa      	ldr	r1, [pc, #680]	; (8001798 <printRadioSettings+0x6cc>)
 80014f0:	4618      	mov	r0, r3
 80014f2:	f00e f8a3 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe ff40 	bl	8000380 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	f107 0108 	add.w	r1, r7, #8
 8001508:	230a      	movs	r3, #10
 800150a:	48a0      	ldr	r0, [pc, #640]	; (800178c <printRadioSettings+0x6c0>)
 800150c:	f009 fbbc 	bl	800ac88 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001510:	463b      	mov	r3, r7
 8001512:	2201      	movs	r2, #1
 8001514:	4619      	mov	r1, r3
 8001516:	200d      	movs	r0, #13
 8001518:	f7ff f9d8 	bl	80008cc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800151c:	783b      	ldrb	r3, [r7, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	499d      	ldr	r1, [pc, #628]	; (800179c <printRadioSettings+0x6d0>)
 8001526:	4618      	mov	r0, r3
 8001528:	f00e f888 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800152c:	f107 0308 	add.w	r3, r7, #8
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe ff25 	bl	8000380 <strlen>
 8001536:	4603      	mov	r3, r0
 8001538:	b29a      	uxth	r2, r3
 800153a:	f107 0108 	add.w	r1, r7, #8
 800153e:	230a      	movs	r3, #10
 8001540:	4892      	ldr	r0, [pc, #584]	; (800178c <printRadioSettings+0x6c0>)
 8001542:	f009 fba1 	bl	800ac88 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001546:	463b      	mov	r3, r7
 8001548:	2201      	movs	r2, #1
 800154a:	4619      	mov	r1, r3
 800154c:	200e      	movs	r0, #14
 800154e:	f7ff f9bd 	bl	80008cc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001552:	783b      	ldrb	r3, [r7, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	4991      	ldr	r1, [pc, #580]	; (80017a0 <printRadioSettings+0x6d4>)
 800155c:	4618      	mov	r0, r3
 800155e:	f00e f86d 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe ff0a 	bl	8000380 <strlen>
 800156c:	4603      	mov	r3, r0
 800156e:	b29a      	uxth	r2, r3
 8001570:	f107 0108 	add.w	r1, r7, #8
 8001574:	230a      	movs	r3, #10
 8001576:	4885      	ldr	r0, [pc, #532]	; (800178c <printRadioSettings+0x6c0>)
 8001578:	f009 fb86 	bl	800ac88 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800157c:	463b      	mov	r3, r7
 800157e:	2201      	movs	r2, #1
 8001580:	4619      	mov	r1, r3
 8001582:	200f      	movs	r0, #15
 8001584:	f7ff f9a2 	bl	80008cc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001588:	783b      	ldrb	r3, [r7, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	4984      	ldr	r1, [pc, #528]	; (80017a4 <printRadioSettings+0x6d8>)
 8001592:	4618      	mov	r0, r3
 8001594:	f00e f852 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001598:	f107 0308 	add.w	r3, r7, #8
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe feef 	bl	8000380 <strlen>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	f107 0108 	add.w	r1, r7, #8
 80015aa:	230a      	movs	r3, #10
 80015ac:	4877      	ldr	r0, [pc, #476]	; (800178c <printRadioSettings+0x6c0>)
 80015ae:	f009 fb6b 	bl	800ac88 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80015b2:	463b      	mov	r3, r7
 80015b4:	2205      	movs	r2, #5
 80015b6:	4619      	mov	r1, r3
 80015b8:	2010      	movs	r0, #16
 80015ba:	f7ff f987 	bl	80008cc <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015be:	793b      	ldrb	r3, [r7, #4]
 80015c0:	461c      	mov	r4, r3
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	461d      	mov	r5, r3
 80015c6:	78bb      	ldrb	r3, [r7, #2]
 80015c8:	787a      	ldrb	r2, [r7, #1]
 80015ca:	7839      	ldrb	r1, [r7, #0]
 80015cc:	f107 0008 	add.w	r0, r7, #8
 80015d0:	9102      	str	r1, [sp, #8]
 80015d2:	9201      	str	r2, [sp, #4]
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	462b      	mov	r3, r5
 80015d8:	4622      	mov	r2, r4
 80015da:	4973      	ldr	r1, [pc, #460]	; (80017a8 <printRadioSettings+0x6dc>)
 80015dc:	f00e f82e 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe fecb 	bl	8000380 <strlen>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	f107 0108 	add.w	r1, r7, #8
 80015f2:	230a      	movs	r3, #10
 80015f4:	4865      	ldr	r0, [pc, #404]	; (800178c <printRadioSettings+0x6c0>)
 80015f6:	f009 fb47 	bl	800ac88 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80015fa:	2011      	movs	r0, #17
 80015fc:	f7ff f93e 	bl	800087c <NRF24_read_register>
 8001600:	4603      	mov	r3, r0
 8001602:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001606:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800160a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	4966      	ldr	r1, [pc, #408]	; (80017ac <printRadioSettings+0x6e0>)
 8001614:	4618      	mov	r0, r3
 8001616:	f00e f811 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe feae 	bl	8000380 <strlen>
 8001624:	4603      	mov	r3, r0
 8001626:	b29a      	uxth	r2, r3
 8001628:	f107 0108 	add.w	r1, r7, #8
 800162c:	230a      	movs	r3, #10
 800162e:	4857      	ldr	r0, [pc, #348]	; (800178c <printRadioSettings+0x6c0>)
 8001630:	f009 fb2a 	bl	800ac88 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8001634:	2012      	movs	r0, #18
 8001636:	f7ff f921 	bl	800087c <NRF24_read_register>
 800163a:	4603      	mov	r3, r0
 800163c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001640:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001644:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	4958      	ldr	r1, [pc, #352]	; (80017b0 <printRadioSettings+0x6e4>)
 800164e:	4618      	mov	r0, r3
 8001650:	f00d fff4 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe fe91 	bl	8000380 <strlen>
 800165e:	4603      	mov	r3, r0
 8001660:	b29a      	uxth	r2, r3
 8001662:	f107 0108 	add.w	r1, r7, #8
 8001666:	230a      	movs	r3, #10
 8001668:	4848      	ldr	r0, [pc, #288]	; (800178c <printRadioSettings+0x6c0>)
 800166a:	f009 fb0d 	bl	800ac88 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 800166e:	2013      	movs	r0, #19
 8001670:	f7ff f904 	bl	800087c <NRF24_read_register>
 8001674:	4603      	mov	r3, r0
 8001676:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800167a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800167e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	494b      	ldr	r1, [pc, #300]	; (80017b4 <printRadioSettings+0x6e8>)
 8001688:	4618      	mov	r0, r3
 800168a:	f00d ffd7 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800168e:	f107 0308 	add.w	r3, r7, #8
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fe74 	bl	8000380 <strlen>
 8001698:	4603      	mov	r3, r0
 800169a:	b29a      	uxth	r2, r3
 800169c:	f107 0108 	add.w	r1, r7, #8
 80016a0:	230a      	movs	r3, #10
 80016a2:	483a      	ldr	r0, [pc, #232]	; (800178c <printRadioSettings+0x6c0>)
 80016a4:	f009 faf0 	bl	800ac88 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80016a8:	2014      	movs	r0, #20
 80016aa:	f7ff f8e7 	bl	800087c <NRF24_read_register>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	493d      	ldr	r1, [pc, #244]	; (80017b8 <printRadioSettings+0x6ec>)
 80016c2:	4618      	mov	r0, r3
 80016c4:	f00d ffba 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe fe57 	bl	8000380 <strlen>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	f107 0108 	add.w	r1, r7, #8
 80016da:	230a      	movs	r3, #10
 80016dc:	482b      	ldr	r0, [pc, #172]	; (800178c <printRadioSettings+0x6c0>)
 80016de:	f009 fad3 	bl	800ac88 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80016e2:	2015      	movs	r0, #21
 80016e4:	f7ff f8ca 	bl	800087c <NRF24_read_register>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	4930      	ldr	r1, [pc, #192]	; (80017bc <printRadioSettings+0x6f0>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00d ff9d 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe fe3a 	bl	8000380 <strlen>
 800170c:	4603      	mov	r3, r0
 800170e:	b29a      	uxth	r2, r3
 8001710:	f107 0108 	add.w	r1, r7, #8
 8001714:	230a      	movs	r3, #10
 8001716:	481d      	ldr	r0, [pc, #116]	; (800178c <printRadioSettings+0x6c0>)
 8001718:	f009 fab6 	bl	800ac88 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 800171c:	2016      	movs	r0, #22
 800171e:	f7ff f8ad 	bl	800087c <NRF24_read_register>
 8001722:	4603      	mov	r3, r0
 8001724:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001728:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800172c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	4922      	ldr	r1, [pc, #136]	; (80017c0 <printRadioSettings+0x6f4>)
 8001736:	4618      	mov	r0, r3
 8001738:	f00d ff80 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fe1d 	bl	8000380 <strlen>
 8001746:	4603      	mov	r3, r0
 8001748:	b29a      	uxth	r2, r3
 800174a:	f107 0108 	add.w	r1, r7, #8
 800174e:	230a      	movs	r3, #10
 8001750:	480e      	ldr	r0, [pc, #56]	; (800178c <printRadioSettings+0x6c0>)
 8001752:	f009 fa99 	bl	800ac88 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001756:	201c      	movs	r0, #28
 8001758:	f7ff f890 	bl	800087c <NRF24_read_register>
 800175c:	4603      	mov	r3, r0
 800175e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001762:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001766:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800176a:	2b00      	cmp	r3, #0
 800176c:	bfcc      	ite	gt
 800176e:	2301      	movgt	r3, #1
 8001770:	2300      	movle	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001776:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800177a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800177e:	2b00      	cmp	r3, #0
 8001780:	bfcc      	ite	gt
 8001782:	2301      	movgt	r3, #1
 8001784:	2300      	movle	r3, #0
 8001786:	e01d      	b.n	80017c4 <printRadioSettings+0x6f8>
 8001788:	08012a4c 	.word	0x08012a4c
 800178c:	240002a4 	.word	0x240002a4
 8001790:	08012a60 	.word	0x08012a60
 8001794:	08012a90 	.word	0x08012a90
 8001798:	08012ac0 	.word	0x08012ac0
 800179c:	08012ae8 	.word	0x08012ae8
 80017a0:	08012b10 	.word	0x08012b10
 80017a4:	08012b38 	.word	0x08012b38
 80017a8:	08012b60 	.word	0x08012b60
 80017ac:	08012b8c 	.word	0x08012b8c
 80017b0:	08012ba8 	.word	0x08012ba8
 80017b4:	08012bc4 	.word	0x08012bc4
 80017b8:	08012be0 	.word	0x08012be0
 80017bc:	08012bfc 	.word	0x08012bfc
 80017c0:	08012c18 	.word	0x08012c18
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017cc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bfcc      	ite	gt
 80017d4:	2301      	movgt	r3, #1
 80017d6:	2300      	movle	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bfcc      	ite	gt
 80017e8:	2301      	movgt	r3, #1
 80017ea:	2300      	movle	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017f4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bfcc      	ite	gt
 80017fc:	2301      	movgt	r3, #1
 80017fe:	2300      	movle	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001804:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001808:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800180c:	2b00      	cmp	r3, #0
 800180e:	bfcc      	ite	gt
 8001810:	2301      	movgt	r3, #1
 8001812:	2300      	movle	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f107 0008 	add.w	r0, r7, #8
 800181a:	9303      	str	r3, [sp, #12]
 800181c:	9402      	str	r4, [sp, #8]
 800181e:	9101      	str	r1, [sp, #4]
 8001820:	9200      	str	r2, [sp, #0]
 8001822:	4633      	mov	r3, r6
 8001824:	462a      	mov	r2, r5
 8001826:	4936      	ldr	r1, [pc, #216]	; (8001900 <printRadioSettings+0x834>)
 8001828:	f00d ff08 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fda5 	bl	8000380 <strlen>
 8001836:	4603      	mov	r3, r0
 8001838:	b29a      	uxth	r2, r3
 800183a:	f107 0108 	add.w	r1, r7, #8
 800183e:	230a      	movs	r3, #10
 8001840:	4830      	ldr	r0, [pc, #192]	; (8001904 <printRadioSettings+0x838>)
 8001842:	f009 fa21 	bl	800ac88 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001846:	201d      	movs	r0, #29
 8001848:	f7ff f818 	bl	800087c <NRF24_read_register>
 800184c:	4603      	mov	r3, r0
 800184e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001852:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	d006      	beq.n	800186c <printRadioSettings+0x7a0>
 800185e:	f107 0308 	add.w	r3, r7, #8
 8001862:	4929      	ldr	r1, [pc, #164]	; (8001908 <printRadioSettings+0x83c>)
 8001864:	4618      	mov	r0, r3
 8001866:	f00d fee9 	bl	800f63c <siprintf>
 800186a:	e005      	b.n	8001878 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800186c:	f107 0308 	add.w	r3, r7, #8
 8001870:	4926      	ldr	r1, [pc, #152]	; (800190c <printRadioSettings+0x840>)
 8001872:	4618      	mov	r0, r3
 8001874:	f00d fee2 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001878:	f107 0308 	add.w	r3, r7, #8
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fd7f 	bl	8000380 <strlen>
 8001882:	4603      	mov	r3, r0
 8001884:	b29a      	uxth	r2, r3
 8001886:	f107 0108 	add.w	r1, r7, #8
 800188a:	230a      	movs	r3, #10
 800188c:	481d      	ldr	r0, [pc, #116]	; (8001904 <printRadioSettings+0x838>)
 800188e:	f009 f9fb 	bl	800ac88 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001892:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d006      	beq.n	80018ac <printRadioSettings+0x7e0>
 800189e:	f107 0308 	add.w	r3, r7, #8
 80018a2:	491b      	ldr	r1, [pc, #108]	; (8001910 <printRadioSettings+0x844>)
 80018a4:	4618      	mov	r0, r3
 80018a6:	f00d fec9 	bl	800f63c <siprintf>
 80018aa:	e005      	b.n	80018b8 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80018ac:	f107 0308 	add.w	r3, r7, #8
 80018b0:	4918      	ldr	r1, [pc, #96]	; (8001914 <printRadioSettings+0x848>)
 80018b2:	4618      	mov	r0, r3
 80018b4:	f00d fec2 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018b8:	f107 0308 	add.w	r3, r7, #8
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fd5f 	bl	8000380 <strlen>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	f107 0108 	add.w	r1, r7, #8
 80018ca:	230a      	movs	r3, #10
 80018cc:	480d      	ldr	r0, [pc, #52]	; (8001904 <printRadioSettings+0x838>)
 80018ce:	f009 f9db 	bl	800ac88 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	4910      	ldr	r1, [pc, #64]	; (8001918 <printRadioSettings+0x84c>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f00d feaf 	bl	800f63c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fd4c 	bl	8000380 <strlen>
 80018e8:	4603      	mov	r3, r0
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	f107 0108 	add.w	r1, r7, #8
 80018f0:	230a      	movs	r3, #10
 80018f2:	4804      	ldr	r0, [pc, #16]	; (8001904 <printRadioSettings+0x838>)
 80018f4:	f009 f9c8 	bl	800ac88 <HAL_UART_Transmit>
}
 80018f8:	bf00      	nop
 80018fa:	3774      	adds	r7, #116	; 0x74
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001900:	08012c34 	.word	0x08012c34
 8001904:	240002a4 	.word	0x240002a4
 8001908:	08012c80 	.word	0x08012c80
 800190c:	08012c98 	.word	0x08012c98
 8001910:	08012cb0 	.word	0x08012cb0
 8001914:	08012ccc 	.word	0x08012ccc
 8001918:	080128a0 	.word	0x080128a0

0800191c <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 800191c:	b084      	sub	sp, #16
 800191e:	b580      	push	{r7, lr}
 8001920:	af00      	add	r7, sp, #0
 8001922:	f107 0c08 	add.w	ip, r7, #8
 8001926:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <nrf24_DebugUART_Init+0x2c>)
 800192c:	4618      	mov	r0, r3
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	2290      	movs	r2, #144	; 0x90
 8001934:	4619      	mov	r1, r3
 8001936:	f00e f84e 	bl	800f9d6 <memcpy>
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001942:	b004      	add	sp, #16
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	240002a4 	.word	0x240002a4

0800194c <mySetupNRF24>:
//********** My Function ************//
//Collects setup NRF24 functions
//Group Port, CSN Pin, CE Pin, SPI handle, UART handle, channel, address, speed
void mySetupNRF24(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin,
		SPI_HandleTypeDef nrfSPI,UART_HandleTypeDef nrf24Uart,
		uint8_t channel, uint64_t address, rf24_datarate_e speed){
 800194c:	b082      	sub	sp, #8
 800194e:	b5b0      	push	{r4, r5, r7, lr}
 8001950:	b0a4      	sub	sp, #144	; 0x90
 8001952:	af22      	add	r7, sp, #136	; 0x88
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	803b      	strh	r3, [r7, #0]
	NRF24_begin(nrf24PORT,nrfCSN_Pin,nrfCE_Pin,nrfSPI);
 8001960:	883d      	ldrh	r5, [r7, #0]
 8001962:	887c      	ldrh	r4, [r7, #2]
 8001964:	4668      	mov	r0, sp
 8001966:	f107 0320 	add.w	r3, r7, #32
 800196a:	2284      	movs	r2, #132	; 0x84
 800196c:	4619      	mov	r1, r3
 800196e:	f00e f832 	bl	800f9d6 <memcpy>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	462a      	mov	r2, r5
 8001976:	4621      	mov	r1, r4
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff f867 	bl	8000a4c <NRF24_begin>
	nrf24_DebugUART_Init(nrf24Uart);
 800197e:	4668      	mov	r0, sp
 8001980:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001984:	2280      	movs	r2, #128	; 0x80
 8001986:	4619      	mov	r1, r3
 8001988:	f00e f825 	bl	800f9d6 <memcpy>
 800198c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001990:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001992:	f7ff ffc3 	bl	800191c <nrf24_DebugUART_Init>
	//NRF24_setAutoAck(true);
	NRF24_setAutoAck(false);
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff fa7a 	bl	8000e90 <NRF24_setAutoAck>
	NRF24_setChannel(channel);
 800199c:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff f9ea 	bl	8000d7a <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 80019a6:	2020      	movs	r0, #32
 80019a8:	f7ff f9fc 	bl	8000da4 <NRF24_setPayloadSize>
	NRF24_openReadingPipe(0, address);
 80019ac:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80019b0:	2000      	movs	r0, #0
 80019b2:	f7ff f979 	bl	8000ca8 <NRF24_openReadingPipe>
	NRF24_enableDynamicPayloads();
 80019b6:	f7ff fa21 	bl	8000dfc <NRF24_enableDynamicPayloads>
	//NRF24_enableAckPayload();
	NRF24_setDataRate(speed);
 80019ba:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fab4 	bl	8000f2c <NRF24_setDataRate>
	printRadioSettings();
 80019c4:	f7ff fb82 	bl	80010cc <printRadioSettings>
	NRF24_startListening();
 80019c8:	f7ff f920 	bl	8000c0c <NRF24_startListening>
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80019d6:	b002      	add	sp, #8
 80019d8:	4770      	bx	lr

080019da <myReadData>:

//Read Data
void myReadData(uint8_t* myRxData){
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  if(NRF24_available()){
 80019e2:	f7ff f939 	bl	8000c58 <NRF24_available>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00b      	beq.n	8001a04 <myReadData+0x2a>
			NRF24_read(myRxData, 32);
 80019ec:	2120      	movs	r1, #32
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff f93a 	bl	8000c68 <NRF24_read>
//			NRF24_writeAckPayload(1, myAckPayload, 32); //Sends acknowledgement to receiver
			myRxData[32] = '\r';
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3320      	adds	r3, #32
 80019f8:	220d      	movs	r2, #13
 80019fa:	701a      	strb	r2, [r3, #0]
			myRxData[32+1] = '\n';
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3321      	adds	r3, #33	; 0x21
 8001a00:	220a      	movs	r2, #10
 8001a02:	701a      	strb	r2, [r3, #0]
//			HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, 32+2, 10); //Problem with printf
		}
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	0000      	movs	r0, r0
	...

08001a10 <setPwmS>:
	htimN.Instance->CCR1 = ccr;


}

void setPwmS(struct escValues *escValues){
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	double ccr;
	double pwmPeriodInSeconds; //Fix from setPwmS

	escValues->minPulseWidth = MY_SATURATE(escValues->minPulseWidth,escValues->pwmPeriod);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a20:	429a      	cmp	r2, r3
 8001a22:	bf28      	it	cs
 8001a24:	461a      	movcs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	64da      	str	r2, [r3, #76]	; 0x4c
	escValues->maxPulseWidth = MY_SATURATE(escValues->maxPulseWidth,escValues->pwmPeriod);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a32:	429a      	cmp	r2, r3
 8001a34:	bf28      	it	cs
 8001a36:	461a      	movcs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	651a      	str	r2, [r3, #80]	; 0x50
	escValues->percentage = MY_SATURATE(escValues->percentage, escValues->resolution);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a44:	429a      	cmp	r2, r3
 8001a46:	bf28      	it	cs
 8001a48:	461a      	movcs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	65da      	str	r2, [r3, #92]	; 0x5c

	escValues->pulseWidth =  ( ( (escValues->maxPulseWidth - escValues->minPulseWidth)/escValues->resolution ) * escValues->percentage ) + escValues->minPulseWidth;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	1ad2      	subs	r2, r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a64:	fb03 f202 	mul.w	r2, r3, r2
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6c:	4413      	add	r3, r2
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

	escValues->pulseWidth = escValues->pulseWidth/1e6;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8001a82:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001ae8 <setPwmS+0xd8>
 8001a86:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	pwmPeriodInSeconds = escValues->pwmPeriod/1e6;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001a9c:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001ae8 <setPwmS+0xd8>
 8001aa0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aa4:	ed87 7b04 	vstr	d7, [r7, #16]

	ccr = (escValues->pulseWidth * escValues->htimN.Init.Period) / pwmPeriodInSeconds;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001aba:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001abe:	ed97 6b04 	vldr	d6, [r7, #16]
 8001ac2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ac6:	ed87 7b02 	vstr	d7, [r7, #8]
	escValues->htimN.Instance->CCR1 = ccr;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	ed97 7b02 	vldr	d7, [r7, #8]
 8001ad2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ad6:	ee17 2a90 	vmov	r2, s15
 8001ada:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001adc:	bf00      	nop
 8001ade:	371c      	adds	r7, #28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	00000000 	.word	0x00000000
 8001aec:	412e8480 	.word	0x412e8480

08001af0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001af4:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001af6:	4a33      	ldr	r2, [pc, #204]	; (8001bc4 <MX_FDCAN1_Init+0xd4>)
 8001af8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001afa:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001b00:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001b06:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001b12:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8001b18:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8001b1e:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b20:	2208      	movs	r2, #8
 8001b22:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x3F;
 8001b24:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b26:	223f      	movs	r2, #63	; 0x3f
 8001b28:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8001b2a:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001b3c:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001b42:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001b48:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001b54:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8001b5a:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001b60:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b62:	2204      	movs	r2, #4
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001b66:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b6e:	2204      	movs	r2, #4
 8001b70:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b98:	2204      	movs	r2, #4
 8001b9a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001b9c:	4808      	ldr	r0, [pc, #32]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001b9e:	f003 fce3 	bl	8005568 <HAL_FDCAN_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001ba8:	f001 fbae 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001bac:	4804      	ldr	r0, [pc, #16]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001bae:	f003 feb9 	bl	8005924 <HAL_FDCAN_Start>
	}
	/* Start Error */

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <MX_FDCAN1_Init+0xd0>)
 8001bb8:	f004 f84e 	bl	8005c58 <HAL_FDCAN_ActivateNotification>
	}
	/* Notification Error */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	24000334 	.word	0x24000334
 8001bc4:	4000a000 	.word	0x4000a000

08001bc8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b0b8      	sub	sp, #224	; 0xe0
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	22bc      	movs	r2, #188	; 0xbc
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f00d fe1f 	bl	800f82c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a25      	ldr	r2, [pc, #148]	; (8001c88 <HAL_FDCAN_MspInit+0xc0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d142      	bne.n	8001c7e <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001bf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bfc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001bfe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c02:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c04:	f107 0310 	add.w	r3, r7, #16
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f005 fc4b 	bl	80074a4 <HAL_RCCEx_PeriphCLKConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001c14:	f001 fb78 	bl	8003308 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <HAL_FDCAN_MspInit+0xc4>)
 8001c1a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c1e:	4a1b      	ldr	r2, [pc, #108]	; (8001c8c <HAL_FDCAN_MspInit+0xc4>)
 8001c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c24:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_FDCAN_MspInit+0xc4>)
 8001c2a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_FDCAN_MspInit+0xc4>)
 8001c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3c:	4a13      	ldr	r2, [pc, #76]	; (8001c8c <HAL_FDCAN_MspInit+0xc4>)
 8001c3e:	f043 0308 	orr.w	r3, r3, #8
 8001c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_FDCAN_MspInit+0xc4>)
 8001c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c54:	2303      	movs	r3, #3
 8001c56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c6c:	2309      	movs	r3, #9
 8001c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c76:	4619      	mov	r1, r3
 8001c78:	4805      	ldr	r0, [pc, #20]	; (8001c90 <HAL_FDCAN_MspInit+0xc8>)
 8001c7a:	f004 f9ed 	bl	8006058 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001c7e:	bf00      	nop
 8001c80:	37e0      	adds	r7, #224	; 0xe0
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	4000a000 	.word	0x4000a000
 8001c8c:	58024400 	.word	0x58024400
 8001c90:	58020c00 	.word	0x58020c00

08001c94 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8001c98:	481b      	ldr	r0, [pc, #108]	; (8001d08 <MX_FREERTOS_Init+0x74>)
 8001c9a:	f00a f9d6 	bl	800c04a <osMutexNew>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a1a      	ldr	r2, [pc, #104]	; (8001d0c <MX_FREERTOS_Init+0x78>)
 8001ca2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001ca4:	4a1a      	ldr	r2, [pc, #104]	; (8001d10 <MX_FREERTOS_Init+0x7c>)
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	481a      	ldr	r0, [pc, #104]	; (8001d14 <MX_FREERTOS_Init+0x80>)
 8001caa:	f00a f921 	bl	800bef0 <osThreadNew>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <MX_FREERTOS_Init+0x84>)
 8001cb2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  // blinkGreenTaskHandle = osThreadNew(blinkGreenTask, NULL, &blinkGreenTask_attributes);
  blinkGreenTaskHandle = osThreadNew(blinkGreenTask, NULL, &blinkGreenTask_attributes);
 8001cb4:	4a19      	ldr	r2, [pc, #100]	; (8001d1c <MX_FREERTOS_Init+0x88>)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4819      	ldr	r0, [pc, #100]	; (8001d20 <MX_FREERTOS_Init+0x8c>)
 8001cba:	f00a f919 	bl	800bef0 <osThreadNew>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <MX_FREERTOS_Init+0x90>)
 8001cc2:	6013      	str	r3, [r2, #0]
  servoTaskHandle = osThreadNew(servoTask, NULL, &servoTaskHandle_attributes);
 8001cc4:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <MX_FREERTOS_Init+0x94>)
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4818      	ldr	r0, [pc, #96]	; (8001d2c <MX_FREERTOS_Init+0x98>)
 8001cca:	f00a f911 	bl	800bef0 <osThreadNew>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <MX_FREERTOS_Init+0x9c>)
 8001cd2:	6013      	str	r3, [r2, #0]
  escTaskHandle = osThreadNew(escTask, NULL, &escTaskHandle_attributes);
 8001cd4:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <MX_FREERTOS_Init+0xa0>)
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4817      	ldr	r0, [pc, #92]	; (8001d38 <MX_FREERTOS_Init+0xa4>)
 8001cda:	f00a f909 	bl	800bef0 <osThreadNew>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4a16      	ldr	r2, [pc, #88]	; (8001d3c <MX_FREERTOS_Init+0xa8>)
 8001ce2:	6013      	str	r3, [r2, #0]
  radioTaskHandle = osThreadNew(radioTask, NULL, &radioTaskHandle_attributes);
 8001ce4:	4a16      	ldr	r2, [pc, #88]	; (8001d40 <MX_FREERTOS_Init+0xac>)
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4816      	ldr	r0, [pc, #88]	; (8001d44 <MX_FREERTOS_Init+0xb0>)
 8001cea:	f00a f901 	bl	800bef0 <osThreadNew>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <MX_FREERTOS_Init+0xb4>)
 8001cf2:	6013      	str	r3, [r2, #0]
  wpTaskHandle = osThreadNew(wpTask, NULL, &wpTaskHandle_attributes);
 8001cf4:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <MX_FREERTOS_Init+0xb8>)
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4815      	ldr	r0, [pc, #84]	; (8001d50 <MX_FREERTOS_Init+0xbc>)
 8001cfa:	f00a f8f9 	bl	800bef0 <osThreadNew>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <MX_FREERTOS_Init+0xc0>)
 8001d02:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	0801316c 	.word	0x0801316c
 8001d0c:	240006e4 	.word	0x240006e4
 8001d10:	08013148 	.word	0x08013148
 8001d14:	08001d59 	.word	0x08001d59
 8001d18:	240006e0 	.word	0x240006e0
 8001d1c:	08013004 	.word	0x08013004
 8001d20:	08001d6d 	.word	0x08001d6d
 8001d24:	240006bc 	.word	0x240006bc
 8001d28:	08013070 	.word	0x08013070
 8001d2c:	08002291 	.word	0x08002291
 8001d30:	240006c8 	.word	0x240006c8
 8001d34:	0801304c 	.word	0x0801304c
 8001d38:	08002151 	.word	0x08002151
 8001d3c:	240006c4 	.word	0x240006c4
 8001d40:	08013100 	.word	0x08013100
 8001d44:	08001d99 	.word	0x08001d99
 8001d48:	240006d8 	.word	0x240006d8
 8001d4c:	08013124 	.word	0x08013124
 8001d50:	08001f11 	.word	0x08001f11
 8001d54:	240006dc 	.word	0x240006dc

08001d58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8001d60:	f242 7010 	movw	r0, #10000	; 0x2710
 8001d64:	f00a f956 	bl	800c014 <osDelay>
 8001d68:	e7fa      	b.n	8001d60 <StartDefaultTask+0x8>
	...

08001d6c <blinkGreenTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void blinkGreenTask(void *argument)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_yellow_GPIO_Port,LD2_yellow_Pin);
 8001d74:	2102      	movs	r1, #2
 8001d76:	4806      	ldr	r0, [pc, #24]	; (8001d90 <blinkGreenTask+0x24>)
 8001d78:	f004 fb37 	bl	80063ea <HAL_GPIO_TogglePin>
	for(;;)
	{
		HAL_GPIO_TogglePin(LD1_Green_GPIO_Port,LD1_Green_Pin);
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <blinkGreenTask+0x28>)
 8001d80:	f004 fb33 	bl	80063ea <HAL_GPIO_TogglePin>
		osDelay(500);
 8001d84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d88:	f00a f944 	bl	800c014 <osDelay>
		HAL_GPIO_TogglePin(LD1_Green_GPIO_Port,LD1_Green_Pin);
 8001d8c:	e7f6      	b.n	8001d7c <blinkGreenTask+0x10>
 8001d8e:	bf00      	nop
 8001d90:	58021000 	.word	0x58021000
 8001d94:	58020400 	.word	0x58020400

08001d98 <radioTask>:
	}
}

void radioTask(void *argument) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	ed2d 8b02 	vpush	{d8}
 8001d9e:	b08e      	sub	sp, #56	; 0x38
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  float dt = 0.1;
 8001da4:	4b52      	ldr	r3, [pc, #328]	; (8001ef0 <radioTask+0x158>)
 8001da6:	62bb      	str	r3, [r7, #40]	; 0x28
  float real_x = 0.0;
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	637b      	str	r3, [r7, #52]	; 0x34
  float real_y = 0.0;
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	633b      	str	r3, [r7, #48]	; 0x30
  float init_x = real_x;
 8001db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
  float init_y = real_y;
 8001db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dba:	623b      	str	r3, [r7, #32]
  float vx = 0.1;
 8001dbc:	4b4c      	ldr	r3, [pc, #304]	; (8001ef0 <radioTask+0x158>)
 8001dbe:	61fb      	str	r3, [r7, #28]
  float vy = 0.1;
 8001dc0:	4b4b      	ldr	r3, [pc, #300]	; (8001ef0 <radioTask+0x158>)
 8001dc2:	61bb      	str	r3, [r7, #24]
  float meas_variance = 0.1 * 0.1;
 8001dc4:	4b4b      	ldr	r3, [pc, #300]	; (8001ef4 <radioTask+0x15c>)
 8001dc6:	617b      	str	r3, [r7, #20]
  float accel_var_x = 0.1;
 8001dc8:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <radioTask+0x158>)
 8001dca:	613b      	str	r3, [r7, #16]
  float accel_var_y = 0.1;
 8001dcc:	4b48      	ldr	r3, [pc, #288]	; (8001ef0 <radioTask+0x158>)
 8001dce:	60fb      	str	r3, [r7, #12]
  initKalman(&kf, init_x, init_y, vx, vy, accel_var_x, accel_var_y);
 8001dd0:	edd7 2a03 	vldr	s5, [r7, #12]
 8001dd4:	ed97 2a04 	vldr	s4, [r7, #16]
 8001dd8:	edd7 1a06 	vldr	s3, [r7, #24]
 8001ddc:	ed97 1a07 	vldr	s2, [r7, #28]
 8001de0:	edd7 0a08 	vldr	s1, [r7, #32]
 8001de4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001de8:	4843      	ldr	r0, [pc, #268]	; (8001ef8 <radioTask+0x160>)
 8001dea:	f000 fd69 	bl	80028c0 <initKalman>
  int counter = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(;;)
	{
		// osMutexWait(myMutex01Handle, osWaitForever); //Setting up Radio
		vx = speed * cos(M_PI / 180 * mpu.pose[2]);
 8001df2:	4b42      	ldr	r3, [pc, #264]	; (8001efc <radioTask+0x164>)
 8001df4:	edd3 7a00 	vldr	s15, [r3]
 8001df8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001dfc:	4b40      	ldr	r3, [pc, #256]	; (8001f00 <radioTask+0x168>)
 8001dfe:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001e02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e06:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8001ee8 <radioTask+0x150>
 8001e0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e0e:	eeb0 0b47 	vmov.f64	d0, d7
 8001e12:	f00f fd45 	bl	80118a0 <cos>
 8001e16:	eeb0 7b40 	vmov.f64	d7, d0
 8001e1a:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001e1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e22:	edc7 7a07 	vstr	s15, [r7, #28]
		vy = speed * sin(M_PI / 180 * mpu.pose[2]);
 8001e26:	4b35      	ldr	r3, [pc, #212]	; (8001efc <radioTask+0x164>)
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001e30:	4b33      	ldr	r3, [pc, #204]	; (8001f00 <radioTask+0x168>)
 8001e32:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001e36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e3a:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001ee8 <radioTask+0x150>
 8001e3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e42:	eeb0 0b47 	vmov.f64	d0, d7
 8001e46:	f00f fd77 	bl	8011938 <sin>
 8001e4a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e4e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001e52:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e56:	edc7 7a06 	vstr	s15, [r7, #24]
		// osMutexRelease(myMutex01Handle);

	    real_x += dt * vx;
 8001e5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001e5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e66:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	    real_y +=  dt * vy;
 8001e72:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001e76:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e86:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// osMutexWait(myMutex01Handle, osWaitForever);
		predict(&kf, dt);
 8001e8a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001e8e:	481a      	ldr	r0, [pc, #104]	; (8001ef8 <radioTask+0x160>)
 8001e90:	f000 fd7c 	bl	800298c <predict>
//		if(real_x != dataCam.x || real_y != dataCam.y){
//			real_x = dataCam.x;
//			real_y = dataCam.y;
//			update(&kf, real_x, real_y, meas_variance);
//		}
		if(counter % 10 == 0)
 8001e94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <radioTask+0x16c>)
 8001e98:	fb83 2301 	smull	r2, r3, r3, r1
 8001e9c:	109a      	asrs	r2, r3, #2
 8001e9e:	17cb      	asrs	r3, r1, #31
 8001ea0:	1ad2      	subs	r2, r2, r3
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	1aca      	subs	r2, r1, r3
 8001eac:	2a00      	cmp	r2, #0
 8001eae:	d108      	bne.n	8001ec2 <radioTask+0x12a>
		      update(&kf, real_x, real_y, meas_variance);
 8001eb0:	ed97 1a05 	vldr	s2, [r7, #20]
 8001eb4:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8001eb8:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001ebc:	480e      	ldr	r0, [pc, #56]	; (8001ef8 <radioTask+0x160>)
 8001ebe:	f000 fe31 	bl	8002b24 <update>
		counter++;
 8001ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c

		// osMutexRelease(myMutex01Handle);
		// printf("Real: %3.3f, %3.3f || Estimated: %3.3f, %3.3f || V: %3.3f, %3.3f || Psi: %3.3f \r\n",
		// real_x, real_y, kf.x[0], kf.y[0], vx, vy, mpu.pose[2]);
		osDelay(dt * 1000);
 8001ec8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ecc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001f08 <radioTask+0x170>
 8001ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ed8:	ee17 0a90 	vmov	r0, s15
 8001edc:	f00a f89a 	bl	800c014 <osDelay>
		vx = speed * cos(M_PI / 180 * mpu.pose[2]);
 8001ee0:	e787      	b.n	8001df2 <radioTask+0x5a>
 8001ee2:	bf00      	nop
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	a2529d39 	.word	0xa2529d39
 8001eec:	3f91df46 	.word	0x3f91df46
 8001ef0:	3dcccccd 	.word	0x3dcccccd
 8001ef4:	3c23d70a 	.word	0x3c23d70a
 8001ef8:	240004e8 	.word	0x240004e8
 8001efc:	240004e4 	.word	0x240004e4
 8001f00:	240003d4 	.word	0x240003d4
 8001f04:	66666667 	.word	0x66666667
 8001f08:	447a0000 	.word	0x447a0000
 8001f0c:	00000000 	.word	0x00000000

08001f10 <wpTask>:
	}
}

void wpTask(void *argument) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  init_waypoint_buffer(&wp_buf);
 8001f18:	4825      	ldr	r0, [pc, #148]	; (8001fb0 <wpTask+0xa0>)
 8001f1a:	f003 f8df 	bl	80050dc <init_waypoint_buffer>
  add_wp(&wp_buf, 0, 0);
 8001f1e:	eddf 0a25 	vldr	s1, [pc, #148]	; 8001fb4 <wpTask+0xa4>
 8001f22:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8001fb4 <wpTask+0xa4>
 8001f26:	4822      	ldr	r0, [pc, #136]	; (8001fb0 <wpTask+0xa0>)
 8001f28:	f003 f8e4 	bl	80050f4 <add_wp>
  add_wp(&wp_buf, 4, 0);
 8001f2c:	eddf 0a21 	vldr	s1, [pc, #132]	; 8001fb4 <wpTask+0xa4>
 8001f30:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001f34:	481e      	ldr	r0, [pc, #120]	; (8001fb0 <wpTask+0xa0>)
 8001f36:	f003 f8dd 	bl	80050f4 <add_wp>
  add_wp(&wp_buf, 1, 2);
 8001f3a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001f3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001f42:	481b      	ldr	r0, [pc, #108]	; (8001fb0 <wpTask+0xa0>)
 8001f44:	f003 f8d6 	bl	80050f4 <add_wp>
  add_wp(&wp_buf, 0, 0);
 8001f48:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8001fb4 <wpTask+0xa4>
 8001f4c:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001fb4 <wpTask+0xa4>
 8001f50:	4817      	ldr	r0, [pc, #92]	; (8001fb0 <wpTask+0xa0>)
 8001f52:	f003 f8cf 	bl	80050f4 <add_wp>
  float dt = 0.1;
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <wpTask+0xa8>)
 8001f58:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
    if(stanley.e_a < 0.2 && stanley.e_a > 0.0)
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <wpTask+0xac>)
 8001f5c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f64:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001fa8 <wpTask+0x98>
 8001f68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f70:	d50a      	bpl.n	8001f88 <wpTask+0x78>
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <wpTask+0xac>)
 8001f74:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f80:	dd02      	ble.n	8001f88 <wpTask+0x78>
      to_next(&wp_buf);
 8001f82:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <wpTask+0xa0>)
 8001f84:	f003 f8ea 	bl	800515c <to_next>
    // osMutexWait(myMutex01Handle, osWaitForever);
    
    // osMutexRelease(myMutex01Handle);
		osDelay(dt * 1000);
 8001f88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f8c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001fc0 <wpTask+0xb0>
 8001f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f98:	ee17 0a90 	vmov	r0, s15
 8001f9c:	f00a f83a 	bl	800c014 <osDelay>
    if(stanley.e_a < 0.2 && stanley.e_a > 0.0)
 8001fa0:	e7db      	b.n	8001f5a <wpTask+0x4a>
 8001fa2:	bf00      	nop
 8001fa4:	f3af 8000 	nop.w
 8001fa8:	9999999a 	.word	0x9999999a
 8001fac:	3fc99999 	.word	0x3fc99999
 8001fb0:	24000520 	.word	0x24000520
 8001fb4:	00000000 	.word	0x00000000
 8001fb8:	3dcccccd 	.word	0x3dcccccd
 8001fbc:	24000494 	.word	0x24000494
 8001fc0:	447a0000 	.word	0x447a0000

08001fc4 <imuTask>:
	}
}

void imuTask(void *argument)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b090      	sub	sp, #64	; 0x40
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	  char axisLabel[3] = {'X','Y','Z'}; //Var for printing labels
 8001fcc:	4a4d      	ldr	r2, [pc, #308]	; (8002104 <imuTask+0x140>)
 8001fce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	8019      	strh	r1, [r3, #0]
 8001fd8:	3302      	adds	r3, #2
 8001fda:	0c12      	lsrs	r2, r2, #16
 8001fdc:	701a      	strb	r2, [r3, #0]
	  printf("Initiating IMU...\r\n"); //Initiating MPU9250
 8001fde:	484a      	ldr	r0, [pc, #296]	; (8002108 <imuTask+0x144>)
 8001fe0:	f00d fb24 	bl	800f62c <puts>
	  initMPU9250(&mpu, AFS_2G, GFS_250DPS, M_8Hz);
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4848      	ldr	r0, [pc, #288]	; (800210c <imuTask+0x148>)
 8001fec:	f001 f991 	bl	8003312 <initMPU9250>

	  printf("Calibrating IMU...\r\n");
 8001ff0:	4847      	ldr	r0, [pc, #284]	; (8002110 <imuTask+0x14c>)
 8001ff2:	f00d fb1b 	bl	800f62c <puts>
	  float accelBias[3], gyroBias[3]; //Calibrating and Printing Biases MPU9250
	  calibrateMPU9250(gyroBias, accelBias);
 8001ff6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ffa:	f107 0318 	add.w	r3, r7, #24
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f001 fa53 	bl	80034ac <calibrateMPU9250>
	  printf("AccBias {");
 8002006:	4843      	ldr	r0, [pc, #268]	; (8002114 <imuTask+0x150>)
 8002008:	f00d faaa 	bl	800f560 <iprintf>
	  for(int i=0; i<3; i++){
 800200c:	2300      	movs	r3, #0
 800200e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002010:	e016      	b.n	8002040 <imuTask+0x7c>
		  printf(" %c %.3f ",axisLabel[i],gyroBias[i]);
 8002012:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002018:	4413      	add	r3, r2
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	3340      	adds	r3, #64	; 0x40
 8002024:	443b      	add	r3, r7
 8002026:	3b28      	subs	r3, #40	; 0x28
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002030:	ec53 2b17 	vmov	r2, r3, d7
 8002034:	4838      	ldr	r0, [pc, #224]	; (8002118 <imuTask+0x154>)
 8002036:	f00d fa93 	bl	800f560 <iprintf>
	  for(int i=0; i<3; i++){
 800203a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203c:	3301      	adds	r3, #1
 800203e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002042:	2b02      	cmp	r3, #2
 8002044:	dde5      	ble.n	8002012 <imuTask+0x4e>
	  }
	  printf("} GyroBias{");
 8002046:	4835      	ldr	r0, [pc, #212]	; (800211c <imuTask+0x158>)
 8002048:	f00d fa8a 	bl	800f560 <iprintf>
	  for(int i=0; i<3; i++){
 800204c:	2300      	movs	r3, #0
 800204e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002050:	e016      	b.n	8002080 <imuTask+0xbc>
		  printf(" %c %.3f ",axisLabel[i],accelBias[i]);
 8002052:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002058:	4413      	add	r3, r2
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	3340      	adds	r3, #64	; 0x40
 8002064:	443b      	add	r3, r7
 8002066:	3b1c      	subs	r3, #28
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002070:	ec53 2b17 	vmov	r2, r3, d7
 8002074:	4828      	ldr	r0, [pc, #160]	; (8002118 <imuTask+0x154>)
 8002076:	f00d fa73 	bl	800f560 <iprintf>
	  for(int i=0; i<3; i++){
 800207a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800207c:	3301      	adds	r3, #1
 800207e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002082:	2b02      	cmp	r3, #2
 8002084:	dde5      	ble.n	8002052 <imuTask+0x8e>
	  }
	  printf("}\r\n");
 8002086:	4826      	ldr	r0, [pc, #152]	; (8002120 <imuTask+0x15c>)
 8002088:	f00d fad0 	bl	800f62c <puts>

	  printf("Starting IMU...\r\n");
 800208c:	4825      	ldr	r0, [pc, #148]	; (8002124 <imuTask+0x160>)
 800208e:	f00d facd 	bl	800f62c <puts>
	  float initPose[] = {0,0,0};
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
	  setPose(&mpu, initPose);
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	4619      	mov	r1, r3
 80020aa:	4818      	ldr	r0, [pc, #96]	; (800210c <imuTask+0x148>)
 80020ac:	f001 ff24 	bl	8003ef8 <setPose>

    stanleyTaskHandle = osThreadNew(stanleyTask, NULL, &stanleyTaskHandle_attributes);
 80020b0:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <imuTask+0x164>)
 80020b2:	2100      	movs	r1, #0
 80020b4:	481d      	ldr	r0, [pc, #116]	; (800212c <imuTask+0x168>)
 80020b6:	f009 ff1b 	bl	800bef0 <osThreadNew>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4a1c      	ldr	r2, [pc, #112]	; (8002130 <imuTask+0x16c>)
 80020be:	6013      	str	r3, [r2, #0]
	wirelessTaskHandle = osThreadNew(wirelessTask, NULL, &wirelessTaskHandle_attributes);
 80020c0:	4a1c      	ldr	r2, [pc, #112]	; (8002134 <imuTask+0x170>)
 80020c2:	2100      	movs	r1, #0
 80020c4:	481c      	ldr	r0, [pc, #112]	; (8002138 <imuTask+0x174>)
 80020c6:	f009 ff13 	bl	800bef0 <osThreadNew>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4a1b      	ldr	r2, [pc, #108]	; (800213c <imuTask+0x178>)
 80020ce:	6013      	str	r3, [r2, #0]

    float dt = 0.1;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <imuTask+0x17c>)
 80020d2:	637b      	str	r3, [r7, #52]	; 0x34
	for(;;)
	{
		// osMutexWait(myMutex01Handle, osWaitForever); //Setting up Radio
		updateData(&mpu, dt, speed); //Printing with func from header file
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <imuTask+0x180>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	eef0 0a67 	vmov.f32	s1, s15
 80020de:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80020e2:	480a      	ldr	r0, [pc, #40]	; (800210c <imuTask+0x148>)
 80020e4:	f001 fd54 	bl	8003b90 <updateData>
		// for(int i = 0; i<3;i++){
		//    printf("{%05.1f}",mpu.pose[i]);
		// }
		// printf("\r\n");
    // osMutexRelease(myMutex01Handle);
		osDelay(dt * 1000);
 80020e8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80020ec:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002148 <imuTask+0x184>
 80020f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020f8:	ee17 0a90 	vmov	r0, s15
 80020fc:	f009 ff8a 	bl	800c014 <osDelay>
		updateData(&mpu, dt, speed); //Printing with func from header file
 8002100:	e7e8      	b.n	80020d4 <imuTask+0x110>
 8002102:	bf00      	nop
 8002104:	08012ec4 	.word	0x08012ec4
 8002108:	08012e60 	.word	0x08012e60
 800210c:	240003d4 	.word	0x240003d4
 8002110:	08012e74 	.word	0x08012e74
 8002114:	08012e88 	.word	0x08012e88
 8002118:	08012e94 	.word	0x08012e94
 800211c:	08012ea0 	.word	0x08012ea0
 8002120:	08012eac 	.word	0x08012eac
 8002124:	08012eb0 	.word	0x08012eb0
 8002128:	08013094 	.word	0x08013094
 800212c:	080023b9 	.word	0x080023b9
 8002130:	240006cc 	.word	0x240006cc
 8002134:	080130b8 	.word	0x080130b8
 8002138:	080025a1 	.word	0x080025a1
 800213c:	240006d0 	.word	0x240006d0
 8002140:	3dcccccd 	.word	0x3dcccccd
 8002144:	240004e4 	.word	0x240004e4
 8002148:	447a0000 	.word	0x447a0000
 800214c:	00000000 	.word	0x00000000

08002150 <escTask>:
	}
}

void escTask(void *argument){
 8002150:	b580      	push	{r7, lr}
 8002152:	b0a2      	sub	sp, #136	; 0x88
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Staring Timer 3
 8002158:	2100      	movs	r1, #0
 800215a:	4847      	ldr	r0, [pc, #284]	; (8002278 <escTask+0x128>)
 800215c:	f007 fd68 	bl	8009c30 <HAL_TIM_PWM_Start>
	int minPulseWidthEsc = 1000; //Range for right and left Esc
 8002160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int maxPulseWidthEsc = 1500;
 8002168:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800216c:	67fb      	str	r3, [r7, #124]	; 0x7c
	unsigned int pwmPeriod = 20000;
 800216e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002172:	67bb      	str	r3, [r7, #120]	; 0x78
	int resolution = 100;
 8002174:	2364      	movs	r3, #100	; 0x64
 8002176:	677b      	str	r3, [r7, #116]	; 0x74
	struct escValues escValues = {htim2, minPulseWidthEsc, //Struct Containing all
 8002178:	f107 0308 	add.w	r3, r7, #8
 800217c:	2268      	movs	r2, #104	; 0x68
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f00d fb53 	bl	800f82c <memset>
 8002186:	4a3c      	ldr	r2, [pc, #240]	; (8002278 <escTask+0x128>)
 8002188:	f107 0308 	add.w	r3, r7, #8
 800218c:	4611      	mov	r1, r2
 800218e:	224c      	movs	r2, #76	; 0x4c
 8002190:	4618      	mov	r0, r3
 8002192:	f00d fc20 	bl	800f9d6 <memcpy>
 8002196:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800219a:	657b      	str	r3, [r7, #84]	; 0x54
 800219c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800219e:	65bb      	str	r3, [r7, #88]	; 0x58
 80021a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021a6:	663b      	str	r3, [r7, #96]	; 0x60
	maxPulseWidthEsc, pwmPeriod, resolution};	  	 //PWM Variables for Esc

  // Calibration
  int i = 100;
 80021a8:	2364      	movs	r3, #100	; 0x64
 80021aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  int dt = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	673b      	str	r3, [r7, #112]	; 0x70
  do{
	  setPwmS(&escValues);
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fc2a 	bl	8001a10 <setPwmS>
	  escValues.percentage=(unsigned int)i;
 80021bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021c0:	667b      	str	r3, [r7, #100]	; 0x64
	  HAL_Delay(10);
 80021c2:	200a      	movs	r0, #10
 80021c4:	f003 f8bc 	bl	8005340 <HAL_Delay>
	  i=i-dt;
 80021c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80021cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  }while(i > 50);
 80021d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021d8:	2b32      	cmp	r3, #50	; 0x32
 80021da:	dcea      	bgt.n	80021b2 <escTask+0x62>

  minPulseWidthEsc = 1500;
 80021dc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80021e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  maxPulseWidthEsc = 2000;
 80021e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80021e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  escValues.maxPulseWidth = maxPulseWidthEsc;
 80021ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ec:	65bb      	str	r3, [r7, #88]	; 0x58
  escValues.minPulseWidth = minPulseWidthEsc;
 80021ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021f2:	657b      	str	r3, [r7, #84]	; 0x54

  imuTaskHandle = osThreadNew(imuTask, NULL, &imuTaskHandle_attributes);
 80021f4:	4a21      	ldr	r2, [pc, #132]	; (800227c <escTask+0x12c>)
 80021f6:	2100      	movs	r1, #0
 80021f8:	4821      	ldr	r0, [pc, #132]	; (8002280 <escTask+0x130>)
 80021fa:	f009 fe79 	bl	800bef0 <osThreadNew>
 80021fe:	4603      	mov	r3, r0
 8002200:	4a20      	ldr	r2, [pc, #128]	; (8002284 <escTask+0x134>)
 8002202:	6013      	str	r3, [r2, #0]

	escValues.percentage = 50;
 8002204:	2332      	movs	r3, #50	; 0x32
 8002206:	667b      	str	r3, [r7, #100]	; 0x64
	setPwmS(&escValues);
 8002208:	f107 0308 	add.w	r3, r7, #8
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fbff 	bl	8001a10 <setPwmS>
	for(;;){
    if(wp_buf.to == wp_buf.size - 1 && (stanley.e_a < 0.1 || stanley.e_a > -0.1)){
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <escTask+0x138>)
 8002214:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <escTask+0x138>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	3b01      	subs	r3, #1
 800221e:	429a      	cmp	r2, r3
 8002220:	d11e      	bne.n	8002260 <escTask+0x110>
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <escTask+0x13c>)
 8002224:	edd3 7a06 	vldr	s15, [r3, #24]
 8002228:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800222c:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8002268 <escTask+0x118>
 8002230:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002238:	d40b      	bmi.n	8002252 <escTask+0x102>
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <escTask+0x13c>)
 800223c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002240:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002244:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8002270 <escTask+0x120>
 8002248:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800224c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002250:	dd06      	ble.n	8002260 <escTask+0x110>
      escValues.percentage = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	667b      	str	r3, [r7, #100]	; 0x64
      setPwmS(&escValues);
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fbd8 	bl	8001a10 <setPwmS>
    }
    osDelay(100);
 8002260:	2064      	movs	r0, #100	; 0x64
 8002262:	f009 fed7 	bl	800c014 <osDelay>
    if(wp_buf.to == wp_buf.size - 1 && (stanley.e_a < 0.1 || stanley.e_a > -0.1)){
 8002266:	e7d4      	b.n	8002212 <escTask+0xc2>
 8002268:	9999999a 	.word	0x9999999a
 800226c:	3fb99999 	.word	0x3fb99999
 8002270:	9999999a 	.word	0x9999999a
 8002274:	bfb99999 	.word	0xbfb99999
 8002278:	24000884 	.word	0x24000884
 800227c:	08013028 	.word	0x08013028
 8002280:	08001fc5 	.word	0x08001fc5
 8002284:	240006c0 	.word	0x240006c0
 8002288:	24000520 	.word	0x24000520
 800228c:	24000494 	.word	0x24000494

08002290 <servoTask>:
	}
}

void servoTask(void *argument){
 8002290:	b580      	push	{r7, lr}
 8002292:	b0a6      	sub	sp, #152	; 0x98
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Staring Timer 3
 8002298:	2100      	movs	r1, #0
 800229a:	4840      	ldr	r0, [pc, #256]	; (800239c <servoTask+0x10c>)
 800229c:	f007 fcc8 	bl	8009c30 <HAL_TIM_PWM_Start>
  int minPulseWidthServo = 1000; //Range for right and left Servo
 80022a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int maxPulseWidthServo = 2000;
 80022a8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80022ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  unsigned int pwmPeriod = 20000;
 80022b0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80022b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  int resolution = 100;
 80022b8:	2364      	movs	r3, #100	; 0x64
 80022ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  struct escValues servoValues = {htim3, minPulseWidthServo, //Struct Containing all
 80022be:	f107 0318 	add.w	r3, r7, #24
 80022c2:	2268      	movs	r2, #104	; 0x68
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f00d fab0 	bl	800f82c <memset>
 80022cc:	4a33      	ldr	r2, [pc, #204]	; (800239c <servoTask+0x10c>)
 80022ce:	f107 0318 	add.w	r3, r7, #24
 80022d2:	4611      	mov	r1, r2
 80022d4:	224c      	movs	r2, #76	; 0x4c
 80022d6:	4618      	mov	r0, r3
 80022d8:	f00d fb7d 	bl	800f9d6 <memcpy>
 80022dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022e0:	667b      	str	r3, [r7, #100]	; 0x64
 80022e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80022e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022f2:	673b      	str	r3, [r7, #112]	; 0x70
  maxPulseWidthServo, pwmPeriod, resolution};	  	 //PWM Variables for Servo
  
  float in[2] = {st_saturation_limits[1], st_saturation_limits[0]}; // min, max delta values
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <servoTask+0x110>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <servoTask+0x110>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	617b      	str	r3, [r7, #20]
  float out[2] = {90, 10}; // min, max percentage values
 8002300:	4a28      	ldr	r2, [pc, #160]	; (80023a4 <servoTask+0x114>)
 8002302:	f107 0308 	add.w	r3, r7, #8
 8002306:	e892 0003 	ldmia.w	r2, {r0, r1}
 800230a:	e883 0003 	stmia.w	r3, {r0, r1}
  float slope = (float)((out[1] - out[0]) / (in[1] - in[0]));
 800230e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002312:	edd7 7a02 	vldr	s15, [r7, #8]
 8002316:	ee77 6a67 	vsub.f32	s13, s14, s15
 800231a:	ed97 7a05 	vldr	s14, [r7, #20]
 800231e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002322:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800232a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80

  uint8_t last_steer = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  servoValues.percentage = 50;
 8002334:	2332      	movs	r3, #50	; 0x32
 8002336:	677b      	str	r3, [r7, #116]	; 0x74
  setPwmS(&servoValues);
 8002338:	f107 0318 	add.w	r3, r7, #24
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fb67 	bl	8001a10 <setPwmS>

  canTaskHandle = osThreadNew(canTask, NULL, &canTaskHandle_attributes);
 8002342:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <servoTask+0x118>)
 8002344:	2100      	movs	r1, #0
 8002346:	4819      	ldr	r0, [pc, #100]	; (80023ac <servoTask+0x11c>)
 8002348:	f009 fdd2 	bl	800bef0 <osThreadNew>
 800234c:	4603      	mov	r3, r0
 800234e:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <servoTask+0x120>)
 8002350:	6013      	str	r3, [r2, #0]

	for(;;){
     servoValues.percentage = (int) ( (out[0] + (slope * (stanley.delta - in[0]))));
 8002352:	ed97 7a02 	vldr	s14, [r7, #8]
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <servoTask+0x124>)
 8002358:	edd3 6a02 	vldr	s13, [r3, #8]
 800235c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002360:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002364:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002374:	ee17 3a90 	vmov	r3, s15
 8002378:	677b      	str	r3, [r7, #116]	; 0x74
//    osMutexWait(myMutex01Handle, osWaitForever);
//	 printf("Y {%u}",servoValues.percentage);
     if(servoValues.percentage != last_steer){
 800237a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800237c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002380:	429a      	cmp	r2, r3
 8002382:	d004      	beq.n	800238e <servoTask+0xfe>
    	 setPwmS(&servoValues);
 8002384:	f107 0318 	add.w	r3, r7, #24
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fb41 	bl	8001a10 <setPwmS>
//    	 printf("servo{%u},last{%u},est:%3.3f",servoValues.percentage, last_steer,
//    			 (out[0] + (slope * (stanley.delta - in[0])))
//				 );
     }
//    osMutexRelease(myMutex01Handle);
     last_steer = servoValues.percentage;
 800238e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002390:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    osDelay(100);
 8002394:	2064      	movs	r0, #100	; 0x64
 8002396:	f009 fe3d 	bl	800c014 <osDelay>
     servoValues.percentage = (int) ( (out[0] + (slope * (stanley.delta - in[0]))));
 800239a:	e7da      	b.n	8002352 <servoTask+0xc2>
 800239c:	240008d0 	.word	0x240008d0
 80023a0:	24000008 	.word	0x24000008
 80023a4:	08012ec8 	.word	0x08012ec8
 80023a8:	080130dc 	.word	0x080130dc
 80023ac:	080026a1 	.word	0x080026a1
 80023b0:	240006d4 	.word	0x240006d4
 80023b4:	24000494 	.word	0x24000494

080023b8 <stanleyTask>:
	}
}

void stanleyTask(void *argument){
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b09c      	sub	sp, #112	; 0x70
 80023bc:	af0e      	add	r7, sp, #56	; 0x38
 80023be:	6078      	str	r0, [r7, #4]
  float st_k = 1; // Gain
 80023c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023c4:	637b      	str	r3, [r7, #52]	; 0x34
  float st_k_soft = 0.01; // Soft gain
 80023c6:	4b6c      	ldr	r3, [pc, #432]	; (8002578 <stanleyTask+0x1c0>)
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t precision = 10; // Result's float resolution
 80023ca:	230a      	movs	r3, #10
 80023cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  // Control signals
  float vel = 0;
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28

  // Vehicle pose
  struct Point vehicle_pos = {0, 0};
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
  float psi = 0;
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24

  // Path
  struct Point p1;
  struct Point p2;

  p1.x = 0;
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
  p1.y = 0;
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
  p2.x = 10;
 80023f4:	4b61      	ldr	r3, [pc, #388]	; (800257c <stanleyTask+0x1c4>)
 80023f6:	60fb      	str	r3, [r7, #12]
  p2.y = 0;
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]

  initStanley(&stanley,st_saturation_limits, st_k, st_k_soft);
 80023fe:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8002402:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8002406:	495e      	ldr	r1, [pc, #376]	; (8002580 <stanleyTask+0x1c8>)
 8002408:	485e      	ldr	r0, [pc, #376]	; (8002584 <stanleyTask+0x1cc>)
 800240a:	f002 f82b 	bl	8004464 <initStanley>

  // servoTaskHandle = osThreadNew(servoTask, NULL, &servoTaskHandle_attributes);
  
	for(;;){
    vehicle_pos.x = kf.x[0];
 800240e:	4b5e      	ldr	r3, [pc, #376]	; (8002588 <stanleyTask+0x1d0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	61fb      	str	r3, [r7, #28]
    vehicle_pos.y = kf.y[0];
 8002414:	4b5c      	ldr	r3, [pc, #368]	; (8002588 <stanleyTask+0x1d0>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	623b      	str	r3, [r7, #32]

    if(wp_buf.size > 2){
 800241a:	4b5c      	ldr	r3, [pc, #368]	; (800258c <stanleyTask+0x1d4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b02      	cmp	r3, #2
 8002420:	dd23      	ble.n	800246a <stanleyTask+0xb2>
      p1.x = wp_buf.wp_buf[wp_buf.from].x;
 8002422:	4b5a      	ldr	r3, [pc, #360]	; (800258c <stanleyTask+0x1d4>)
 8002424:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8002428:	4a58      	ldr	r2, [pc, #352]	; (800258c <stanleyTask+0x1d4>)
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	3304      	adds	r3, #4
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	617b      	str	r3, [r7, #20]
      p1.y = wp_buf.wp_buf[wp_buf.from].y;
 8002434:	4b55      	ldr	r3, [pc, #340]	; (800258c <stanleyTask+0x1d4>)
 8002436:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800243a:	4a54      	ldr	r2, [pc, #336]	; (800258c <stanleyTask+0x1d4>)
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	3308      	adds	r3, #8
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	61bb      	str	r3, [r7, #24]
      p2.x = wp_buf.wp_buf[wp_buf.to].x;
 8002446:	4b51      	ldr	r3, [pc, #324]	; (800258c <stanleyTask+0x1d4>)
 8002448:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800244c:	4a4f      	ldr	r2, [pc, #316]	; (800258c <stanleyTask+0x1d4>)
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	3304      	adds	r3, #4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60fb      	str	r3, [r7, #12]
      p2.y = wp_buf.wp_buf[wp_buf.to].y;
 8002458:	4b4c      	ldr	r3, [pc, #304]	; (800258c <stanleyTask+0x1d4>)
 800245a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800245e:	4a4b      	ldr	r2, [pc, #300]	; (800258c <stanleyTask+0x1d4>)
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	3308      	adds	r3, #8
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	613b      	str	r3, [r7, #16]
    }
    psi = mpu.pose[2] * M_PI / 180;
 800246a:	4b49      	ldr	r3, [pc, #292]	; (8002590 <stanleyTask+0x1d8>)
 800246c:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8002470:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002474:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002568 <stanleyTask+0x1b0>
 8002478:	ee27 6b06 	vmul.f64	d6, d7, d6
 800247c:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8002570 <stanleyTask+0x1b8>
 8002480:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002484:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002488:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	// osMutexWait(myMutex01Handle, osWaitForever); //Setting up Radio
    vel = speed;
 800248c:	4b41      	ldr	r3, [pc, #260]	; (8002594 <stanleyTask+0x1dc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
	// osMutexRelease(myMutex01Handle);
    calculateCrosstrackError(&stanley, &vehicle_pos, &p1, &p2);
 8002492:	f107 030c 	add.w	r3, r7, #12
 8002496:	f107 0214 	add.w	r2, r7, #20
 800249a:	f107 011c 	add.w	r1, r7, #28
 800249e:	4839      	ldr	r0, [pc, #228]	; (8002584 <stanleyTask+0x1cc>)
 80024a0:	f002 f802 	bl	80044a8 <calculateCrosstrackError>
    setYawAngle(&stanley, psi);
 80024a4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80024a8:	4836      	ldr	r0, [pc, #216]	; (8002584 <stanleyTask+0x1cc>)
 80024aa:	f002 f9b3 	bl	8004814 <setYawAngle>
    calculateSteering(&stanley, vel, precision);
 80024ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024b2:	4619      	mov	r1, r3
 80024b4:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80024b8:	4832      	ldr	r0, [pc, #200]	; (8002584 <stanleyTask+0x1cc>)
 80024ba:	f002 f9bd 	bl	8004838 <calculateSteering>
//	}
//	printf(" Delta: {%05.1f}",stanley.delta * 180 / M_PI);
//	printf("\r\n");
    printf("Pose{x: %3.1f, y: %3.1f, psi: %3.1f}, WP{x: %5.1f, y: %5.1f}, Delta{%3.1f},"
    		"E{%3.1f}, S{%3.3f}\r\n",
      kf.x[0], kf.y[0], mpu.pose[2], 
 80024be:	4b32      	ldr	r3, [pc, #200]	; (8002588 <stanleyTask+0x1d0>)
 80024c0:	edd3 7a00 	vldr	s15, [r3]
    printf("Pose{x: %3.1f, y: %3.1f, psi: %3.1f}, WP{x: %5.1f, y: %5.1f}, Delta{%3.1f},"
 80024c4:	eeb7 0ae7 	vcvt.f64.f32	d0, s15
      kf.x[0], kf.y[0], mpu.pose[2], 
 80024c8:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <stanleyTask+0x1d0>)
 80024ca:	edd3 7a02 	vldr	s15, [r3, #8]
    printf("Pose{x: %3.1f, y: %3.1f, psi: %3.1f}, WP{x: %5.1f, y: %5.1f}, Delta{%3.1f},"
 80024ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
      kf.x[0], kf.y[0], mpu.pose[2], 
 80024d2:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <stanleyTask+0x1d8>)
 80024d4:	edd3 6a2f 	vldr	s13, [r3, #188]	; 0xbc
    printf("Pose{x: %3.1f, y: %3.1f, psi: %3.1f}, WP{x: %5.1f, y: %5.1f}, Delta{%3.1f},"
 80024d8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
      wp_buf.wp_buf[wp_buf.to].x, wp_buf.wp_buf[wp_buf.to].y, 
 80024dc:	4b2b      	ldr	r3, [pc, #172]	; (800258c <stanleyTask+0x1d4>)
 80024de:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80024e2:	4a2a      	ldr	r2, [pc, #168]	; (800258c <stanleyTask+0x1d4>)
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4413      	add	r3, r2
 80024e8:	3304      	adds	r3, #4
 80024ea:	edd3 5a00 	vldr	s11, [r3]
    printf("Pose{x: %3.1f, y: %3.1f, psi: %3.1f}, WP{x: %5.1f, y: %5.1f}, Delta{%3.1f},"
 80024ee:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
      wp_buf.wp_buf[wp_buf.to].x, wp_buf.wp_buf[wp_buf.to].y, 
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <stanleyTask+0x1d4>)
 80024f4:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80024f8:	4a24      	ldr	r2, [pc, #144]	; (800258c <stanleyTask+0x1d4>)
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	3308      	adds	r3, #8
 8002500:	edd3 4a00 	vldr	s9, [r3]
    printf("Pose{x: %3.1f, y: %3.1f, psi: %3.1f}, WP{x: %5.1f, y: %5.1f}, Delta{%3.1f},"
 8002504:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
      (stanley.delta * 180 / M_PI), stanley.e_a, speed);
 8002508:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <stanleyTask+0x1cc>)
 800250a:	edd3 3a02 	vldr	s7, [r3, #8]
 800250e:	ed9f 3a22 	vldr	s6, [pc, #136]	; 8002598 <stanleyTask+0x1e0>
 8002512:	ee63 3a83 	vmul.f32	s7, s7, s6
 8002516:	eeb7 2ae3 	vcvt.f64.f32	d2, s7
    printf("Pose{x: %3.1f, y: %3.1f, psi: %3.1f}, WP{x: %5.1f, y: %5.1f}, Delta{%3.1f},"
 800251a:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8002568 <stanleyTask+0x1b0>
 800251e:	ee82 3b01 	vdiv.f64	d3, d2, d1
      (stanley.delta * 180 / M_PI), stanley.e_a, speed);
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <stanleyTask+0x1cc>)
 8002524:	edd3 2a06 	vldr	s5, [r3, #24]
    printf("Pose{x: %3.1f, y: %3.1f, psi: %3.1f}, WP{x: %5.1f, y: %5.1f}, Delta{%3.1f},"
 8002528:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <stanleyTask+0x1dc>)
 800252e:	edd3 1a00 	vldr	s3, [r3]
 8002532:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8002536:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 800253a:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 800253e:	ed8d 3b08 	vstr	d3, [sp, #32]
 8002542:	ed8d 4b06 	vstr	d4, [sp, #24]
 8002546:	ed8d 5b04 	vstr	d5, [sp, #16]
 800254a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800254e:	ed8d 7b00 	vstr	d7, [sp]
 8002552:	ec53 2b10 	vmov	r2, r3, d0
 8002556:	4811      	ldr	r0, [pc, #68]	; (800259c <stanleyTask+0x1e4>)
 8002558:	f00d f802 	bl	800f560 <iprintf>
    // osMutexRelease(myMutex01Handle);
    osDelay(100);
 800255c:	2064      	movs	r0, #100	; 0x64
 800255e:	f009 fd59 	bl	800c014 <osDelay>
    vehicle_pos.x = kf.x[0];
 8002562:	e754      	b.n	800240e <stanleyTask+0x56>
 8002564:	f3af 8000 	nop.w
 8002568:	54442d18 	.word	0x54442d18
 800256c:	400921fb 	.word	0x400921fb
 8002570:	00000000 	.word	0x00000000
 8002574:	40668000 	.word	0x40668000
 8002578:	3c23d70a 	.word	0x3c23d70a
 800257c:	41200000 	.word	0x41200000
 8002580:	24000008 	.word	0x24000008
 8002584:	24000494 	.word	0x24000494
 8002588:	240004e8 	.word	0x240004e8
 800258c:	24000520 	.word	0x24000520
 8002590:	240003d4 	.word	0x240003d4
 8002594:	240004e4 	.word	0x240004e4
 8002598:	43340000 	.word	0x43340000
 800259c:	08012ed0 	.word	0x08012ed0

080025a0 <wirelessTask>:
	}
}

void wirelessTask(void *argument){
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b0d5      	sub	sp, #340	; 0x154
 80025a4:	af4a      	add	r7, sp, #296	; 0x128
 80025a6:	6078      	str	r0, [r7, #4]
	uint64_t RxpipeAddrs = 0x11223344AA; //Address of sender
 80025a8:	a33b      	add	r3, pc, #236	; (adr r3, 8002698 <wirelessTask+0xf8>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	e9c7 2308 	strd	r2, r3, [r7, #32]

	// osMutexWait(myMutex01Handle, osWaitForever); //Setting up Radio
	mySetupNRF24(nrf_CSN_PORT, nrf_CSN_PIN, nrf_CE_PIN,
 80025b2:	4c31      	ldr	r4, [pc, #196]	; (8002678 <wirelessTask+0xd8>)
 80025b4:	2301      	movs	r3, #1
 80025b6:	9348      	str	r3, [sp, #288]	; 0x120
 80025b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025bc:	e9cd 2346 	strd	r2, r3, [sp, #280]	; 0x118
 80025c0:	2334      	movs	r3, #52	; 0x34
 80025c2:	9345      	str	r3, [sp, #276]	; 0x114
 80025c4:	4a2d      	ldr	r2, [pc, #180]	; (800267c <wirelessTask+0xdc>)
 80025c6:	ab21      	add	r3, sp, #132	; 0x84
 80025c8:	4611      	mov	r1, r2
 80025ca:	2290      	movs	r2, #144	; 0x90
 80025cc:	4618      	mov	r0, r3
 80025ce:	f00d fa02 	bl	800f9d6 <memcpy>
 80025d2:	4668      	mov	r0, sp
 80025d4:	1d23      	adds	r3, r4, #4
 80025d6:	2284      	movs	r2, #132	; 0x84
 80025d8:	4619      	mov	r1, r3
 80025da:	f00d f9fc 	bl	800f9d6 <memcpy>
 80025de:	6823      	ldr	r3, [r4, #0]
 80025e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e8:	4825      	ldr	r0, [pc, #148]	; (8002680 <wirelessTask+0xe0>)
 80025ea:	f7ff f9af 	bl	800194c <mySetupNRF24>
			  hspi2,huart3,52, RxpipeAddrs, 1);
	// osMutexRelease(myMutex01Handle);

	int maxX = 100; //Max and min values
 80025ee:	2364      	movs	r3, #100	; 0x64
 80025f0:	61fb      	str	r3, [r7, #28]
	int minX = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
	int maxY = 100;
 80025f6:	2364      	movs	r3, #100	; 0x64
 80025f8:	617b      	str	r3, [r7, #20]
	int minY = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
	int maxA = 360;
 80025fe:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002602:	60fb      	str	r3, [r7, #12]
	int minA = 360;
 8002604:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002608:	60bb      	str	r3, [r7, #8]

	stanleyTaskHandle = osThreadNew(stanleyTask, NULL, &stanleyTaskHandle_attributes);
 800260a:	4a1e      	ldr	r2, [pc, #120]	; (8002684 <wirelessTask+0xe4>)
 800260c:	2100      	movs	r1, #0
 800260e:	481e      	ldr	r0, [pc, #120]	; (8002688 <wirelessTask+0xe8>)
 8002610:	f009 fc6e 	bl	800bef0 <osThreadNew>
 8002614:	4603      	mov	r3, r0
 8002616:	4a1d      	ldr	r2, [pc, #116]	; (800268c <wirelessTask+0xec>)
 8002618:	6013      	str	r3, [r2, #0]

	for(;;){
		myReadData(myRxData);
 800261a:	481d      	ldr	r0, [pc, #116]	; (8002690 <wirelessTask+0xf0>)
 800261c:	f7ff f9dd 	bl	80019da <myReadData>
		dataCam.x = (uint16_t)myRxData[0] << 8 | myRxData[1];
 8002620:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <wirelessTask+0xf0>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	b21a      	sxth	r2, r3
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <wirelessTask+0xf0>)
 800262a:	785b      	ldrb	r3, [r3, #1]
 800262c:	b21b      	sxth	r3, r3
 800262e:	4313      	orrs	r3, r2
 8002630:	b21b      	sxth	r3, r3
 8002632:	b29a      	uxth	r2, r3
 8002634:	4b17      	ldr	r3, [pc, #92]	; (8002694 <wirelessTask+0xf4>)
 8002636:	801a      	strh	r2, [r3, #0]
		dataCam.y = (uint16_t)myRxData[2] << 8 | myRxData[3];
 8002638:	4b15      	ldr	r3, [pc, #84]	; (8002690 <wirelessTask+0xf0>)
 800263a:	789b      	ldrb	r3, [r3, #2]
 800263c:	021b      	lsls	r3, r3, #8
 800263e:	b21a      	sxth	r2, r3
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <wirelessTask+0xf0>)
 8002642:	78db      	ldrb	r3, [r3, #3]
 8002644:	b21b      	sxth	r3, r3
 8002646:	4313      	orrs	r3, r2
 8002648:	b21b      	sxth	r3, r3
 800264a:	b29a      	uxth	r2, r3
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <wirelessTask+0xf4>)
 800264e:	805a      	strh	r2, [r3, #2]
		dataCam.theta = (uint16_t)myRxData[4] << 8 | myRxData[5];
 8002650:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <wirelessTask+0xf0>)
 8002652:	791b      	ldrb	r3, [r3, #4]
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	b21a      	sxth	r2, r3
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <wirelessTask+0xf0>)
 800265a:	795b      	ldrb	r3, [r3, #5]
 800265c:	b21b      	sxth	r3, r3
 800265e:	4313      	orrs	r3, r2
 8002660:	b21b      	sxth	r3, r3
 8002662:	b29a      	uxth	r2, r3
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <wirelessTask+0xf4>)
 8002666:	809a      	strh	r2, [r3, #4]
//		}
//		printf("%x%x %x%x %x%x",myRxData[0],myRxData[1],myRxData[2],myRxData[3],myRxData[4],myRxData[5]);
//		printf("\r\n");
//		printf("X:%d Y:%d Angle:%d\r\n",dataCam.x,dataCam.y,dataCam.theta);
//		printf("\r\n");
		osDelay(1000);
 8002668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800266c:	f009 fcd2 	bl	800c014 <osDelay>
		myReadData(myRxData);
 8002670:	e7d3      	b.n	800261a <wirelessTask+0x7a>
 8002672:	bf00      	nop
 8002674:	f3af 8000 	nop.w
 8002678:	24000770 	.word	0x24000770
 800267c:	2400091c 	.word	0x2400091c
 8002680:	58020c00 	.word	0x58020c00
 8002684:	08013094 	.word	0x08013094
 8002688:	080023b9 	.word	0x080023b9
 800268c:	240006cc 	.word	0x240006cc
 8002690:	240004bc 	.word	0x240004bc
 8002694:	240004dc 	.word	0x240004dc
 8002698:	223344aa 	.word	0x223344aa
 800269c:	00000011 	.word	0x00000011

080026a0 <canTask>:
	}
}

void canTask(void *argument){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b094      	sub	sp, #80	; 0x50
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
//	float speed=1.3;
	uint8_t m;
	float loc_speed;

	printf("Starting CAN...\r\n");
 80026a8:	480f      	ldr	r0, [pc, #60]	; (80026e8 <canTask+0x48>)
 80026aa:	f00c ffbf 	bl	800f62c <puts>
	for(;;){
		// osMutexWait(myMutex01Handle, osWaitForever); //Setting up Radio
		readSpeed(&hfdcan1, &RxHeader, bf, RxData, &m, &loc_speed);
 80026ae:	f107 0214 	add.w	r2, r7, #20
 80026b2:	f107 0120 	add.w	r1, r7, #32
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	f107 0313 	add.w	r3, r7, #19
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	4613      	mov	r3, r2
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	4809      	ldr	r0, [pc, #36]	; (80026ec <canTask+0x4c>)
 80026c8:	f001 fc38 	bl	8003f3c <readSpeed>
		speed = loc_speed / 10;
 80026cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80026d0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80026d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <canTask+0x50>)
 80026da:	edc3 7a00 	vstr	s15, [r3]
//		for(int i=0;i<8;i++){
//			printf("%x",RxData[i]);
//		}
////		speed = (float)loc_sp;
//		printf("} %3.3f, CAN: %3.3f \r\n",speed, speed);
		osDelay(100);
 80026de:	2064      	movs	r0, #100	; 0x64
 80026e0:	f009 fc98 	bl	800c014 <osDelay>
		readSpeed(&hfdcan1, &RxHeader, bf, RxData, &m, &loc_speed);
 80026e4:	e7e3      	b.n	80026ae <canTask+0xe>
 80026e6:	bf00      	nop
 80026e8:	08012f30 	.word	0x08012f30
 80026ec:	24000334 	.word	0x24000334
 80026f0:	240004e4 	.word	0x240004e4

080026f4 <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08c      	sub	sp, #48	; 0x30
 80026f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fa:	f107 031c 	add.w	r3, r7, #28
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	60da      	str	r2, [r3, #12]
 8002708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800270a:	4b67      	ldr	r3, [pc, #412]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 800270c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002710:	4a65      	ldr	r2, [pc, #404]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800271a:	4b63      	ldr	r3, [pc, #396]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 800271c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002728:	4b5f      	ldr	r3, [pc, #380]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 800272a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800272e:	4a5e      	ldr	r2, [pc, #376]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 8002730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002738:	4b5b      	ldr	r3, [pc, #364]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 800273a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800273e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	4b58      	ldr	r3, [pc, #352]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 8002748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800274c:	4a56      	ldr	r2, [pc, #344]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002756:	4b54      	ldr	r3, [pc, #336]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 8002758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002764:	4b50      	ldr	r3, [pc, #320]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 8002766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800276a:	4a4f      	ldr	r2, [pc, #316]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002774:	4b4c      	ldr	r3, [pc, #304]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 8002776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002782:	4b49      	ldr	r3, [pc, #292]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 8002784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002788:	4a47      	ldr	r2, [pc, #284]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 800278a:	f043 0308 	orr.w	r3, r3, #8
 800278e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002792:	4b45      	ldr	r3, [pc, #276]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 8002794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027a0:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 80027a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a6:	4a40      	ldr	r2, [pc, #256]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 80027a8:	f043 0310 	orr.w	r3, r3, #16
 80027ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027b0:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <MX_GPIO_Init+0x1b4>)
 80027b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	607b      	str	r3, [r7, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80027be:	2200      	movs	r2, #0
 80027c0:	2110      	movs	r1, #16
 80027c2:	483a      	ldr	r0, [pc, #232]	; (80028ac <MX_GPIO_Init+0x1b8>)
 80027c4:	f003 fdf8 	bl	80063b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_Green_GPIO_Port, LD1_Green_Pin, GPIO_PIN_RESET);
 80027c8:	2200      	movs	r2, #0
 80027ca:	2101      	movs	r1, #1
 80027cc:	4838      	ldr	r0, [pc, #224]	; (80028b0 <MX_GPIO_Init+0x1bc>)
 80027ce:	f003 fdf3 	bl	80063b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80027d2:	2200      	movs	r2, #0
 80027d4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80027d8:	4836      	ldr	r0, [pc, #216]	; (80028b4 <MX_GPIO_Init+0x1c0>)
 80027da:	f003 fded 	bl	80063b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_Pin_GPIO_Port, CSN_Pin_Pin, GPIO_PIN_RESET);
 80027de:	2200      	movs	r2, #0
 80027e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027e4:	4834      	ldr	r0, [pc, #208]	; (80028b8 <MX_GPIO_Init+0x1c4>)
 80027e6:	f003 fde7 	bl	80063b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_yellow_GPIO_Port, LD2_yellow_Pin, GPIO_PIN_RESET);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2102      	movs	r1, #2
 80027ee:	4833      	ldr	r0, [pc, #204]	; (80028bc <MX_GPIO_Init+0x1c8>)
 80027f0:	f003 fde2 	bl	80063b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80027f4:	2310      	movs	r3, #16
 80027f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f8:	2301      	movs	r3, #1
 80027fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	2300      	movs	r3, #0
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002804:	f107 031c 	add.w	r3, r7, #28
 8002808:	4619      	mov	r1, r3
 800280a:	4828      	ldr	r0, [pc, #160]	; (80028ac <MX_GPIO_Init+0x1b8>)
 800280c:	f003 fc24 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Green_Pin;
 8002810:	2301      	movs	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002814:	2301      	movs	r3, #1
 8002816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281c:	2300      	movs	r3, #0
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_Green_GPIO_Port, &GPIO_InitStruct);
 8002820:	f107 031c 	add.w	r3, r7, #28
 8002824:	4619      	mov	r1, r3
 8002826:	4822      	ldr	r0, [pc, #136]	; (80028b0 <MX_GPIO_Init+0x1bc>)
 8002828:	f003 fc16 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800282c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002832:	2301      	movs	r3, #1
 8002834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283a:	2300      	movs	r3, #0
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800283e:	f107 031c 	add.w	r3, r7, #28
 8002842:	4619      	mov	r1, r3
 8002844:	481b      	ldr	r0, [pc, #108]	; (80028b4 <MX_GPIO_Init+0x1c0>)
 8002846:	f003 fc07 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin_Pin;
 800284a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800284e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002850:	2301      	movs	r3, #1
 8002852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CSN_Pin_GPIO_Port, &GPIO_InitStruct);
 800285c:	f107 031c 	add.w	r3, r7, #28
 8002860:	4619      	mov	r1, r3
 8002862:	4815      	ldr	r0, [pc, #84]	; (80028b8 <MX_GPIO_Init+0x1c4>)
 8002864:	f003 fbf8 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin_Pin;
 8002868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800286c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800286e:	2300      	movs	r3, #0
 8002870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CE_Pin_GPIO_Port, &GPIO_InitStruct);
 8002876:	f107 031c 	add.w	r3, r7, #28
 800287a:	4619      	mov	r1, r3
 800287c:	480e      	ldr	r0, [pc, #56]	; (80028b8 <MX_GPIO_Init+0x1c4>)
 800287e:	f003 fbeb 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_yellow_Pin;
 8002882:	2302      	movs	r3, #2
 8002884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002886:	2301      	movs	r3, #1
 8002888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_yellow_GPIO_Port, &GPIO_InitStruct);
 8002892:	f107 031c 	add.w	r3, r7, #28
 8002896:	4619      	mov	r1, r3
 8002898:	4808      	ldr	r0, [pc, #32]	; (80028bc <MX_GPIO_Init+0x1c8>)
 800289a:	f003 fbdd 	bl	8006058 <HAL_GPIO_Init>

}
 800289e:	bf00      	nop
 80028a0:	3730      	adds	r7, #48	; 0x30
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	58024400 	.word	0x58024400
 80028ac:	58020000 	.word	0x58020000
 80028b0:	58020400 	.word	0x58020400
 80028b4:	58020c00 	.word	0x58020c00
 80028b8:	58020800 	.word	0x58020800
 80028bc:	58021000 	.word	0x58021000

080028c0 <initKalman>:
#include "myprintf.h"

void initKalman(struct KF * kf, 
    float initial_x, float initial_y,
    float initial_vx, float initial_vy,
    float accel_var_x, float accel_var_y) {
 80028c0:	b490      	push	{r4, r7}
 80028c2:	b08e      	sub	sp, #56	; 0x38
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	61f8      	str	r0, [r7, #28]
 80028c8:	ed87 0a06 	vstr	s0, [r7, #24]
 80028cc:	edc7 0a05 	vstr	s1, [r7, #20]
 80028d0:	ed87 1a04 	vstr	s2, [r7, #16]
 80028d4:	edc7 1a03 	vstr	s3, [r7, #12]
 80028d8:	ed87 2a02 	vstr	s4, [r7, #8]
 80028dc:	edc7 2a01 	vstr	s5, [r7, #4]
    float I[2][2] = {{1.0,0.0},{0.0,1.0}};
 80028e0:	4b29      	ldr	r3, [pc, #164]	; (8002988 <initKalman+0xc8>)
 80028e2:	f107 0420 	add.w	r4, r7, #32
 80028e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    kf->x[0] = initial_x;
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	601a      	str	r2, [r3, #0]
    kf->x[1] = initial_vx;
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	605a      	str	r2, [r3, #4]
    kf->y[0] = initial_y;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	609a      	str	r2, [r3, #8]
    kf->y[1] = initial_vy;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	60da      	str	r2, [r3, #12]
    kf->accel_variance_x = accel_var_x;
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	611a      	str	r2, [r3, #16]
    kf->accel_variance_y = accel_var_y;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	615a      	str	r2, [r3, #20]

    for(int i = 0 ; i < 2 ; i++){
 8002910:	2300      	movs	r3, #0
 8002912:	637b      	str	r3, [r7, #52]	; 0x34
 8002914:	e02f      	b.n	8002976 <initKalman+0xb6>
        for(int j = 0 ; j < 2 ; j++){
 8002916:	2300      	movs	r3, #0
 8002918:	633b      	str	r3, [r7, #48]	; 0x30
 800291a:	e026      	b.n	800296a <initKalman+0xaa>
            kf->Px[i][j] = I[i][j];
 800291c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291e:	005a      	lsls	r2, r3, #1
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	3338      	adds	r3, #56	; 0x38
 8002928:	443b      	add	r3, r7
 800292a:	3b18      	subs	r3, #24
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	69f9      	ldr	r1, [r7, #28]
 8002930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002932:	0058      	lsls	r0, r3, #1
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	4403      	add	r3, r0
 8002938:	3306      	adds	r3, #6
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	601a      	str	r2, [r3, #0]
            kf->Py[i][j] = I[i][j];
 8002940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002942:	005a      	lsls	r2, r3, #1
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	3338      	adds	r3, #56	; 0x38
 800294c:	443b      	add	r3, r7
 800294e:	3b18      	subs	r3, #24
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	69f9      	ldr	r1, [r7, #28]
 8002954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002956:	0058      	lsls	r0, r3, #1
 8002958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295a:	4403      	add	r3, r0
 800295c:	330a      	adds	r3, #10
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	601a      	str	r2, [r3, #0]
        for(int j = 0 ; j < 2 ; j++){
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	3301      	adds	r3, #1
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	2b01      	cmp	r3, #1
 800296e:	ddd5      	ble.n	800291c <initKalman+0x5c>
    for(int i = 0 ; i < 2 ; i++){
 8002970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002972:	3301      	adds	r3, #1
 8002974:	637b      	str	r3, [r7, #52]	; 0x34
 8002976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002978:	2b01      	cmp	r3, #1
 800297a:	ddcc      	ble.n	8002916 <initKalman+0x56>
        }
    }
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3738      	adds	r7, #56	; 0x38
 8002982:	46bd      	mov	sp, r7
 8002984:	bc90      	pop	{r4, r7}
 8002986:	4770      	bx	lr
 8002988:	08012f44 	.word	0x08012f44

0800298c <predict>:

void predict(struct KF * kf, float dt) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b0aa      	sub	sp, #168	; 0xa8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	ed87 0a00 	vstr	s0, [r7]
    float F[2][2] = {{1, dt}, {0, 1}};
 8002998:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800299c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029ae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80029b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float G[2] = {0.5 * dt * dt, dt};
 80029b6:	edd7 7a00 	vldr	s15, [r7]
 80029ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029be:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80029c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80029c6:	edd7 7a00 	vldr	s15, [r7]
 80029ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80029d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80029d6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    // x = F * x
    float x_new[2];
    float y_new[2];
    dotV(kf->x, F, x_new);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80029e6:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 fa4a 	bl	8002e84 <dotV>
    dotV(kf->y, F, y_new);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3308      	adds	r3, #8
 80029f4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80029f8:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fa41 	bl	8002e84 <dotV>
    copy(x_new, kf->x);
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 faa6 	bl	8002f5c <copy>
    copy(y_new, kf->y);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f103 0208 	add.w	r2, r3, #8
 8002a16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fa9d 	bl	8002f5c <copy>
    float temp2_y[2][2];
    float FPx[2][2];
    float FPy[2][2];

    // FP = F * P
    dot(F, kf->Px, FPx);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f103 0118 	add.w	r1, r3, #24
 8002a28:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002a2c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 f9cd 	bl	8002dd0 <dot>
    dot(F, kf->Py, FPy);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002a3c:	f107 021c 	add.w	r2, r7, #28
 8002a40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 f9c3 	bl	8002dd0 <dot>

    // P = FP * Ft
    float Ft[2][2];
    trans(F, Ft);
 8002a4a:	f107 020c 	add.w	r2, r7, #12
 8002a4e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fae5 	bl	8003024 <trans>
    dot(FPx, Ft, kf->Px);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f103 0218 	add.w	r2, r3, #24
 8002a60:	f107 010c 	add.w	r1, r7, #12
 8002a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 f9b1 	bl	8002dd0 <dot>
    dot(FPy, Ft, kf->Py);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002a74:	f107 010c 	add.w	r1, r7, #12
 8002a78:	f107 031c 	add.w	r3, r7, #28
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 f9a7 	bl	8002dd0 <dot>

    // G * Gt
    float GGt = G[0] * G[0] + G[1] * G[1];
 8002a82:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002a86:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002a8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a8e:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8002a92:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

    // P = P + GGt * accel_variance
    kf->Px[0][0] += GGt * kf->accel_variance_x;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	ed93 7a06 	vldr	s14, [r3, #24]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	edd3 6a04 	vldr	s13, [r3, #16]
 8002aae:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002ab2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	edc3 7a06 	vstr	s15, [r3, #24]
    kf->Px[1][1] += GGt * kf->accel_variance_x;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	edd3 6a04 	vldr	s13, [r3, #16]
 8002acc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002ad0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    kf->Py[0][0] += GGt * kf->accel_variance_y;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	edd3 6a05 	vldr	s13, [r3, #20]
 8002aea:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002aee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    kf->Py[1][1] += GGt * kf->accel_variance_y;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b08:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8002b1a:	bf00      	nop
 8002b1c:	37a8      	adds	r7, #168	; 0xa8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <update>:

void update(struct KF * kf, float meas_value_x, float meas_value_y, float meas_variance) {
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b0ad      	sub	sp, #180	; 0xb4
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b30:	edc7 0a01 	vstr	s1, [r7, #4]
 8002b34:	ed87 1a00 	vstr	s2, [r7]
    float H[2] = {1, 0};
 8002b38:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    // Y = z - H * x
    float Yx = meas_value_x - H[0] * kf->x[0] - H[1] * kf->x[1];
 8002b48:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b56:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b5e:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b70:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
    float Yy = meas_value_y - H[0] * kf->y[0] - H[1] * kf->y[1];
 8002b74:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b82:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b8a:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

    // S = H * P * Ht + R
    float Hpx[2];
    float Hpy[2];
    dotV(H, kf->Px, Hpx);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f103 0118 	add.w	r1, r3, #24
 8002ba6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002baa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f968 	bl	8002e84 <dotV>
    dotV(H, kf->Py, Hpy);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002bba:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002bbe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f95e 	bl	8002e84 <dotV>
    
    float Sx = Hpx[0]*H[0] + Hpx[1]*H[1] + meas_variance;
 8002bc8:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002bcc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd4:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8002bd8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be4:	ed97 7a00 	vldr	s14, [r7]
 8002be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bec:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
    float Sy = Hpy[0]*H[0] + Hpy[1]*H[1] + meas_variance;
 8002bf0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002bf4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bfc:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8002c00:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c0c:	ed97 7a00 	vldr	s14, [r7]
 8002c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c14:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
    // K = P * Ht * S^-1
    float Kx[2];
    float Ky[2];
    float PHtx[2];
    float PHty[2];
    dotV(H, kf->Px, PHtx);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f103 0118 	add.w	r1, r3, #24
 8002c1e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002c22:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f92c 	bl	8002e84 <dotV>
    dotV(H, kf->Py, PHty);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002c32:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c36:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f922 	bl	8002e84 <dotV>
    dotS(1/Sx, PHtx, Kx);
 8002c40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c44:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002c48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c4c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002c50:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c54:	4611      	mov	r1, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	eeb0 0a47 	vmov.f32	s0, s14
 8002c5c:	f000 f957 	bl	8002f0e <dotS>
    dotS(1/Sy, PHty, Ky);
 8002c60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c64:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002c68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c6c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002c70:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	eeb0 0a47 	vmov.f32	s0, s14
 8002c7c:	f000 f947 	bl	8002f0e <dotS>

    // x = x + K * y
    kf->x[0] = kf->x[0] + Kx[0] * Yx;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	ed93 7a00 	vldr	s14, [r3]
 8002c86:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8002c8a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	edc3 7a00 	vstr	s15, [r3]
    kf->x[1] = kf->x[1] + Kx[1] * Yx;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ca2:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002ca6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	edc3 7a01 	vstr	s15, [r3, #4]
    kf->y[0] = kf->y[0] + Ky[0] * Yy;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cbe:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8002cc2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002cc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->y[1] = kf->y[1] + Ky[1] * Yy;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	ed93 7a03 	vldr	s14, [r3, #12]
 8002cda:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8002cde:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002ce2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	edc3 7a03 	vstr	s15, [r3, #12]

    // P = (I - K * H) * P
    float I[2][2] = {{1 , 0} , {0 , 1}};
 8002cf0:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <update+0x2a8>)
 8002cf2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002cf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    float KHx = Kx[0] * H[0] + Kx[1] * H[1];
 8002cfc:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002d00:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d08:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002d0c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002d10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d18:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float KHy = Ky[0] * H[0] + Ky[1] * H[1];
 8002d1c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002d20:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002d24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d28:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8002d2c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d38:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

    float IKHx[2][2];
    float IKHy[2][2];
    sumS(KHx, I, IKHx);
 8002d3c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002d40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	ed97 0a27 	vldr	s0, [r7, #156]	; 0x9c
 8002d4c:	f000 f934 	bl	8002fb8 <sumS>
    sumS(KHy, I, IKHy);
 8002d50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002d54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8002d60:	f000 f92a 	bl	8002fb8 <sumS>

    float Px_t[2][2];
    float Py_t[2][2];

    dot(IKHx, kf->Px, Px_t);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f103 0118 	add.w	r1, r3, #24
 8002d6a:	f107 0220 	add.w	r2, r7, #32
 8002d6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 f82c 	bl	8002dd0 <dot>
    dot(IKHy, kf->Py, Py_t);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002d7e:	f107 0210 	add.w	r2, r7, #16
 8002d82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 f822 	bl	8002dd0 <dot>
    copy(Px_t, kf->Px);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f103 0218 	add.w	r2, r3, #24
 8002d92:	f107 0320 	add.w	r3, r7, #32
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 f8df 	bl	8002f5c <copy>
    copy(Py_t, kf->Py);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002da4:	f107 0310 	add.w	r3, r7, #16
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 f8d6 	bl	8002f5c <copy>
    sat(kf->Px);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	3318      	adds	r3, #24
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 f963 	bl	8003080 <sat>
    sat(kf->Py);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	3328      	adds	r3, #40	; 0x28
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f95e 	bl	8003080 <sat>
}
 8002dc4:	bf00      	nop
 8002dc6:	37b4      	adds	r7, #180	; 0xb4
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd90      	pop	{r4, r7, pc}
 8002dcc:	08012f44 	.word	0x08012f44

08002dd0 <dot>:

void dot(float a[2][2], float b[2][2], float r[2][2]){
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 2; ++i) {
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	e046      	b.n	8002e70 <dot+0xa0>
        for (int j = 0; j < 2; ++j) {
 8002de2:	2300      	movs	r3, #0
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	e03d      	b.n	8002e64 <dot+0x94>
            r[i][j] = 0.0;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	441a      	add	r2, r3
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 2; ++k) {
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	e02a      	b.n	8002e58 <dot+0x88>
                r[i][j] += a[i][k] * b[k][j];
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	441a      	add	r2, r3
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	ed93 7a00 	vldr	s14, [r3]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	441a      	add	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	edd3 6a00 	vldr	s13, [r3]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	441a      	add	r2, r3
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	edd3 7a00 	vldr	s15, [r3]
 8002e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	441a      	add	r2, r3
 8002e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 2; ++k) {
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3301      	adds	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	ddd1      	ble.n	8002e02 <dot+0x32>
        for (int j = 0; j < 2; ++j) {
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	3301      	adds	r3, #1
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	ddbe      	ble.n	8002de8 <dot+0x18>
    for (int i = 0; i < 2; ++i) {
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	61fb      	str	r3, [r7, #28]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	ddb5      	ble.n	8002de2 <dot+0x12>
            }
        }
    }
}
 8002e76:	bf00      	nop
 8002e78:	bf00      	nop
 8002e7a:	3724      	adds	r7, #36	; 0x24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <dotV>:

void dotV(float a[2], float b[2][2], float r[2]){
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 2; ++i) {
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	e031      	b.n	8002efa <dotV+0x76>
        r[i] = 0;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 2; ++j) {
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	e021      	b.n	8002eee <dotV+0x6a>
            r[i] += b[i][j] * a[j];
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	ed93 7a00 	vldr	s14, [r3]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	441a      	add	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	edd3 6a00 	vldr	s13, [r3]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	edd3 7a00 	vldr	s15, [r3]
 8002ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee4:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 2; ++j) {
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	3301      	adds	r3, #1
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	ddda      	ble.n	8002eaa <dotV+0x26>
    for (int i = 0; i < 2; ++i) {
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	ddca      	ble.n	8002e96 <dotV+0x12>
        }
    }
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <dotS>:

void dotS(float a, float b[2], float r[2]){
 8002f0e:	b480      	push	{r7}
 8002f10:	b087      	sub	sp, #28
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	ed87 0a03 	vstr	s0, [r7, #12]
 8002f18:	60b8      	str	r0, [r7, #8]
 8002f1a:	6079      	str	r1, [r7, #4]
    for (int i = 0; i < 2; ++i) {
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	e012      	b.n	8002f48 <dotS+0x3a>
        r[i] = b[i]*a;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	4413      	add	r3, r2
 8002f2a:	ed93 7a00 	vldr	s14, [r3]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 2; ++i) {
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	3301      	adds	r3, #1
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	dde9      	ble.n	8002f22 <dotS+0x14>
    }
}
 8002f4e:	bf00      	nop
 8002f50:	bf00      	nop
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <copy>:

void copy(float a[2][2], float r[2][2]){
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
    for(int i = 0 ; i < 2 ; i++){
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	e01b      	b.n	8002fa4 <copy+0x48>
        for(int j = 0 ; j < 2 ; j++){
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	e012      	b.n	8002f98 <copy+0x3c>
            r[i][j] = a[i][j];
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	441a      	add	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	6839      	ldr	r1, [r7, #0]
 8002f80:	4419      	add	r1, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	601a      	str	r2, [r3, #0]
        for(int j = 0 ; j < 2 ; j++){
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	3301      	adds	r3, #1
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	dde9      	ble.n	8002f72 <copy+0x16>
    for(int i = 0 ; i < 2 ; i++){
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	dde0      	ble.n	8002f6c <copy+0x10>
        }
    }
}
 8002faa:	bf00      	nop
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <sumS>:

void sumS(float a, float b[2][2],  float r[2][2]){
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	ed87 0a03 	vstr	s0, [r7, #12]
 8002fc2:	60b8      	str	r0, [r7, #8]
 8002fc4:	6079      	str	r1, [r7, #4]
    for(int i = 0 ; i < 2 ; i++){
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	e021      	b.n	8003010 <sumS+0x58>
        for(int j = 0 ; j < 2 ; j++){
 8002fcc:	2300      	movs	r3, #0
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	e018      	b.n	8003004 <sumS+0x4c>
            r[i][j] = b[i][j] + a;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	441a      	add	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	ed93 7a00 	vldr	s14, [r3]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	441a      	add	r2, r3
 8002fec:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0 ; j < 2 ; j++){
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	3301      	adds	r3, #1
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b01      	cmp	r3, #1
 8003008:	dde3      	ble.n	8002fd2 <sumS+0x1a>
    for(int i = 0 ; i < 2 ; i++){
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	3301      	adds	r3, #1
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b01      	cmp	r3, #1
 8003014:	ddda      	ble.n	8002fcc <sumS+0x14>
        }
    }
}
 8003016:	bf00      	nop
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <trans>:

void trans(float a[2][2], float r[2][2]){
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
    for(int i = 0 ; i < 2 ; i++){
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e01b      	b.n	800306c <trans+0x48>
        for(int j = 0 ; j < 2 ; j++){
 8003034:	2300      	movs	r3, #0
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	e012      	b.n	8003060 <trans+0x3c>
            r[i][j] = a[j][i];
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	441a      	add	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	6839      	ldr	r1, [r7, #0]
 8003048:	4419      	add	r1, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	601a      	str	r2, [r3, #0]
        for(int j = 0 ; j < 2 ; j++){
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	3301      	adds	r3, #1
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b01      	cmp	r3, #1
 8003064:	dde9      	ble.n	800303a <trans+0x16>
    for(int i = 0 ; i < 2 ; i++){
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3301      	adds	r3, #1
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b01      	cmp	r3, #1
 8003070:	dde0      	ble.n	8003034 <trans+0x10>
        }
    }
}
 8003072:	bf00      	nop
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <sat>:

void sat(float r[2][2]){
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
    float sat[2] = {10000.0, -10000.0};
 8003088:	4a31      	ldr	r2, [pc, #196]	; (8003150 <sat+0xd0>)
 800308a:	f107 0308 	add.w	r3, r7, #8
 800308e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003092:	e883 0003 	stmia.w	r3, {r0, r1}
    for(int i = 0 ; i < 2 ; i++){
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	e04f      	b.n	800313c <sat+0xbc>
        for(int j = 0 ; j < 2 ; j++){
 800309c:	2300      	movs	r3, #0
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	e046      	b.n	8003130 <sat+0xb0>
            r[i][j] = r[i][j] < sat[1] ? sat[1] : r[i][j];
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	441a      	add	r2, r3
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	ed93 7a00 	vldr	s14, [r3]
 80030b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80030b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c0:	d501      	bpl.n	80030c6 <sat+0x46>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	e007      	b.n	80030d6 <sat+0x56>
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	441a      	add	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	00d2      	lsls	r2, r2, #3
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4411      	add	r1, r2
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	0092      	lsls	r2, r2, #2
 80030e2:	440a      	add	r2, r1
 80030e4:	6013      	str	r3, [r2, #0]
            r[i][j] = r[i][j] > sat[0] ? sat[0] : r[i][j];
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	441a      	add	r2, r3
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	ed93 7a00 	vldr	s14, [r3]
 80030f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80030fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003104:	dd01      	ble.n	800310a <sat+0x8a>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	e007      	b.n	800311a <sat+0x9a>
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	441a      	add	r2, r3
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	00d2      	lsls	r2, r2, #3
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4411      	add	r1, r2
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	0092      	lsls	r2, r2, #2
 8003126:	440a      	add	r2, r1
 8003128:	6013      	str	r3, [r2, #0]
        for(int j = 0 ; j < 2 ; j++){
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	3301      	adds	r3, #1
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	2b01      	cmp	r3, #1
 8003134:	ddb5      	ble.n	80030a2 <sat+0x22>
    for(int i = 0 ; i < 2 ; i++){
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	3301      	adds	r3, #1
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b01      	cmp	r3, #1
 8003140:	ddac      	ble.n	800309c <sat+0x1c>
        }
    }
}
 8003142:	bf00      	nop
 8003144:	bf00      	nop
 8003146:	371c      	adds	r7, #28
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	08012f54 	.word	0x08012f54

08003154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800315a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800315e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8003160:	bf00      	nop
 8003162:	4b2a      	ldr	r3, [pc, #168]	; (800320c <main+0xb8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d004      	beq.n	8003178 <main+0x24>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	1e5a      	subs	r2, r3, #1
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	dcf4      	bgt.n	8003162 <main+0xe>
  if ( timeout < 0 )
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	da01      	bge.n	8003182 <main+0x2e>
  {
  Error_Handler();
 800317e:	f000 f8c3 	bl	8003308 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003182:	f002 f84b 	bl	800521c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003186:	f000 f843 	bl	8003210 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800318a:	4b20      	ldr	r3, [pc, #128]	; (800320c <main+0xb8>)
 800318c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003190:	4a1e      	ldr	r2, [pc, #120]	; (800320c <main+0xb8>)
 8003192:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003196:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800319a:	4b1c      	ldr	r3, [pc, #112]	; (800320c <main+0xb8>)
 800319c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80031a8:	2000      	movs	r0, #0
 80031aa:	f003 f939 	bl	8006420 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80031ae:	2100      	movs	r1, #0
 80031b0:	2000      	movs	r0, #0
 80031b2:	f003 f94f 	bl	8006454 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80031b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031ba:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80031bc:	bf00      	nop
 80031be:	4b13      	ldr	r3, [pc, #76]	; (800320c <main+0xb8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d104      	bne.n	80031d4 <main+0x80>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	1e5a      	subs	r2, r3, #1
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	dcf4      	bgt.n	80031be <main+0x6a>
if ( timeout < 0 )
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	da01      	bge.n	80031de <main+0x8a>
{
Error_Handler();
 80031da:	f000 f895 	bl	8003308 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031de:	f7ff fa89 	bl	80026f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80031e2:	f000 feeb 	bl	8003fbc <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80031e6:	f001 fec7 	bl	8004f78 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 80031ea:	f000 ff3f 	bl	800406c <MX_SPI2_Init>
  MX_TIM2_Init();
 80031ee:	f001 fd3d 	bl	8004c6c <MX_TIM2_Init>
  MX_TIM3_Init();
 80031f2:	f001 fdb1 	bl	8004d58 <MX_TIM3_Init>
  MX_SPI3_Init();
 80031f6:	f000 ff8f 	bl	8004118 <MX_SPI3_Init>
  MX_FDCAN1_Init();
 80031fa:	f7fe fc79 	bl	8001af0 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80031fe:	f008 fe2d 	bl	800be5c <osKernelInitialize>
  MX_FREERTOS_Init();
 8003202:	f7fe fd47 	bl	8001c94 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003206:	f008 fe4d 	bl	800bea4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800320a:	e7fe      	b.n	800320a <main+0xb6>
 800320c:	58024400 	.word	0x58024400

08003210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b09c      	sub	sp, #112	; 0x70
 8003214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800321a:	224c      	movs	r2, #76	; 0x4c
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f00c fb04 	bl	800f82c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003224:	1d3b      	adds	r3, r7, #4
 8003226:	2220      	movs	r2, #32
 8003228:	2100      	movs	r1, #0
 800322a:	4618      	mov	r0, r3
 800322c:	f00c fafe 	bl	800f82c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8003230:	2004      	movs	r0, #4
 8003232:	f003 f923 	bl	800647c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003236:	2300      	movs	r3, #0
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	4b31      	ldr	r3, [pc, #196]	; (8003300 <SystemClock_Config+0xf0>)
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	4a30      	ldr	r2, [pc, #192]	; (8003300 <SystemClock_Config+0xf0>)
 8003240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003244:	6193      	str	r3, [r2, #24]
 8003246:	4b2e      	ldr	r3, [pc, #184]	; (8003300 <SystemClock_Config+0xf0>)
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	4b2c      	ldr	r3, [pc, #176]	; (8003304 <SystemClock_Config+0xf4>)
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	4a2b      	ldr	r2, [pc, #172]	; (8003304 <SystemClock_Config+0xf4>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800325c:	4b29      	ldr	r3, [pc, #164]	; (8003304 <SystemClock_Config+0xf4>)
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003268:	bf00      	nop
 800326a:	4b25      	ldr	r3, [pc, #148]	; (8003300 <SystemClock_Config+0xf0>)
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003276:	d1f8      	bne.n	800326a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003278:	2302      	movs	r3, #2
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800327c:	2301      	movs	r3, #1
 800327e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003280:	2340      	movs	r3, #64	; 0x40
 8003282:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003284:	2302      	movs	r3, #2
 8003286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003288:	2300      	movs	r3, #0
 800328a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800328c:	2304      	movs	r3, #4
 800328e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8003290:	233c      	movs	r3, #60	; 0x3c
 8003292:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003294:	2302      	movs	r3, #2
 8003296:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 8003298:	2318      	movs	r3, #24
 800329a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800329c:	2302      	movs	r3, #2
 800329e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80032a0:	230c      	movs	r3, #12
 80032a2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80032a4:	2300      	movs	r3, #0
 80032a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032b0:	4618      	mov	r0, r3
 80032b2:	f003 f93d 	bl	8006530 <HAL_RCC_OscConfig>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80032bc:	f000 f824 	bl	8003308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032c0:	233f      	movs	r3, #63	; 0x3f
 80032c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032c4:	2303      	movs	r3, #3
 80032c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80032cc:	2308      	movs	r3, #8
 80032ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80032d0:	2340      	movs	r3, #64	; 0x40
 80032d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80032d4:	2340      	movs	r3, #64	; 0x40
 80032d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80032d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80032de:	2340      	movs	r3, #64	; 0x40
 80032e0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	2104      	movs	r1, #4
 80032e6:	4618      	mov	r0, r3
 80032e8:	f003 fd50 	bl	8006d8c <HAL_RCC_ClockConfig>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80032f2:	f000 f809 	bl	8003308 <Error_Handler>
  }
}
 80032f6:	bf00      	nop
 80032f8:	3770      	adds	r7, #112	; 0x70
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	58024800 	.word	0x58024800
 8003304:	58000400 	.word	0x58000400

08003308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800330c:	b672      	cpsid	i
}
 800330e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003310:	e7fe      	b.n	8003310 <Error_Handler+0x8>

08003312 <initMPU9250>:
#include "spi.h"
#include "stm32h7xx_hal.h"
#include "myprintf.h"

void initMPU9250(struct mpu9250 * mpu9250, uint8_t Ascale, uint8_t Gscale, uint8_t sampleRate)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b086      	sub	sp, #24
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	4608      	mov	r0, r1
 800331c:	4611      	mov	r1, r2
 800331e:	461a      	mov	r2, r3
 8003320:	4603      	mov	r3, r0
 8003322:	70fb      	strb	r3, [r7, #3]
 8003324:	460b      	mov	r3, r1
 8003326:	70bb      	strb	r3, [r7, #2]
 8003328:	4613      	mov	r3, r2
 800332a:	707b      	strb	r3, [r7, #1]
  for (int i = 0 ; i < 3 ; i++){
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e040      	b.n	80033b4 <initMPU9250+0xa2>
    for(int j = 0 ; j < filt_size ; j++){
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	e01d      	b.n	8003374 <initMPU9250+0x62>
      mpu9250->accBuff[i][j] = 0;
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4413      	add	r3, r2
 8003346:	330e      	adds	r3, #14
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
      mpu9250->gyroBuff[i][j] = 0;
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4413      	add	r3, r2
 8003360:	331c      	adds	r3, #28
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	3304      	adds	r3, #4
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
    for(int j = 0 ; j < filt_size ; j++){
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	3301      	adds	r3, #1
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b04      	cmp	r3, #4
 8003378:	ddde      	ble.n	8003338 <initMPU9250+0x26>
    }
    mpu9250->acc[i] = 0;
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	3306      	adds	r3, #6
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	3304      	adds	r3, #4
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
    mpu9250->gyro[i] = 0;
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	330a      	adds	r3, #10
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
    mpu9250->pose[i] = 0;
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	332c      	adds	r3, #44	; 0x2c
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	3304      	adds	r3, #4
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
  for (int i = 0 ; i < 3 ; i++){
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	3301      	adds	r3, #1
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	ddbb      	ble.n	8003332 <initMPU9250+0x20>
  }

  mpu9250->buffPointer = 0;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	uint8_t c;
 // wake up device
  mpu9250_write_reg(PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80033c2:	2100      	movs	r1, #0
 80033c4:	206b      	movs	r0, #107	; 0x6b
 80033c6:	f000 fff9 	bl	80043bc <mpu9250_write_reg>
  HAL_Delay(100); // Wait for all registers to reset
 80033ca:	2064      	movs	r0, #100	; 0x64
 80033cc:	f001 ffb8 	bl	8005340 <HAL_Delay>

 // get stable time source
  mpu9250_write_reg(PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 80033d0:	2101      	movs	r1, #1
 80033d2:	206b      	movs	r0, #107	; 0x6b
 80033d4:	f000 fff2 	bl	80043bc <mpu9250_write_reg>
  HAL_Delay(200);
 80033d8:	20c8      	movs	r0, #200	; 0xc8
 80033da:	f001 ffb1 	bl	8005340 <HAL_Delay>
 // Disable FSYNC and set thermometer and gyro bandwidth to 41 and 42 Hz, respectively;
 // minimum HAL_HAL_Delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
 // be higher than 1 / 0.0059 = 170 Hz
 // DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
 // With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
  mpu9250_write_reg(CONFIG, 0x03);
 80033de:	2103      	movs	r1, #3
 80033e0:	201a      	movs	r0, #26
 80033e2:	f000 ffeb 	bl	80043bc <mpu9250_write_reg>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  mpu9250_write_reg(SMPLRT_DIV, sampleRate);  // Use a 200 Hz rate; a rate consistent with the filter update rate
 80033e6:	787b      	ldrb	r3, [r7, #1]
 80033e8:	4619      	mov	r1, r3
 80033ea:	2019      	movs	r0, #25
 80033ec:	f000 ffe6 	bl	80043bc <mpu9250_write_reg>
                                                       // determined inset in CONFIG above

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  mpu9250_read_reg(GYRO_CONFIG, &c,sizeof(c)); // get current GYRO_CONFIG register value
 80033f0:	f107 030f 	add.w	r3, r7, #15
 80033f4:	2201      	movs	r2, #1
 80033f6:	4619      	mov	r1, r3
 80033f8:	201b      	movs	r0, #27
 80033fa:	f001 f805 	bl	8004408 <mpu9250_read_reg>
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	f023 0302 	bic.w	r3, r3, #2
 8003404:	b2db      	uxtb	r3, r3
 8003406:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x18; // Clear AFS bits [4:3]
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	f023 0318 	bic.w	r3, r3, #24
 800340e:	b2db      	uxtb	r3, r3
 8003410:	73fb      	strb	r3, [r7, #15]
  c = c | Gscale << 3; // Set full scale range for the gyro
 8003412:	78bb      	ldrb	r3, [r7, #2]
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	b25a      	sxtb	r2, r3
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	b25b      	sxtb	r3, r3
 800341c:	4313      	orrs	r3, r2
 800341e:	b25b      	sxtb	r3, r3
 8003420:	b2db      	uxtb	r3, r3
 8003422:	73fb      	strb	r3, [r7, #15]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
  mpu9250_write_reg(GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	4619      	mov	r1, r3
 8003428:	201b      	movs	r0, #27
 800342a:	f000 ffc7 	bl	80043bc <mpu9250_write_reg>

 // Set accelerometer full-scale range configuration
  mpu9250_read_reg(ACCEL_CONFIG, &c, sizeof(c)); // get current ACCEL_CONFIG register value
 800342e:	f107 030f 	add.w	r3, r7, #15
 8003432:	2201      	movs	r2, #1
 8003434:	4619      	mov	r1, r3
 8003436:	201c      	movs	r0, #28
 8003438:	f000 ffe6 	bl	8004408 <mpu9250_read_reg>
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	f023 0318 	bic.w	r3, r3, #24
 8003442:	b2db      	uxtb	r3, r3
 8003444:	73fb      	strb	r3, [r7, #15]
  c = c | Ascale << 3; // Set full scale range for the accelerometer
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	b25a      	sxtb	r2, r3
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	b25b      	sxtb	r3, r3
 8003450:	4313      	orrs	r3, r2
 8003452:	b25b      	sxtb	r3, r3
 8003454:	b2db      	uxtb	r3, r3
 8003456:	73fb      	strb	r3, [r7, #15]
  mpu9250_write_reg(ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	4619      	mov	r1, r3
 800345c:	201c      	movs	r0, #28
 800345e:	f000 ffad 	bl	80043bc <mpu9250_write_reg>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  mpu9250_read_reg(ACCEL_CONFIG2, &c, sizeof(c)); // get current ACCEL_CONFIG2 register value
 8003462:	f107 030f 	add.w	r3, r7, #15
 8003466:	2201      	movs	r2, #1
 8003468:	4619      	mov	r1, r3
 800346a:	201d      	movs	r0, #29
 800346c:	f000 ffcc 	bl	8004408 <mpu9250_read_reg>
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	f023 030f 	bic.w	r3, r3, #15
 8003476:	b2db      	uxtb	r3, r3
 8003478:	73fb      	strb	r3, [r7, #15]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	f043 0303 	orr.w	r3, r3, #3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	73fb      	strb	r3, [r7, #15]
  mpu9250_write_reg(ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	4619      	mov	r1, r3
 8003488:	201d      	movs	r0, #29
 800348a:	f000 ff97 	bl	80043bc <mpu9250_write_reg>
  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
  // clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
//   mpu9250_write_reg(INT_PIN_CFG, 0x22);
   mpu9250_write_reg(INT_PIN_CFG, 0x12);  // INT is 50 microsecond pulse and any read to clear
 800348e:	2112      	movs	r1, #18
 8003490:	2037      	movs	r0, #55	; 0x37
 8003492:	f000 ff93 	bl	80043bc <mpu9250_write_reg>
   mpu9250_write_reg(INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8003496:	2101      	movs	r1, #1
 8003498:	2038      	movs	r0, #56	; 0x38
 800349a:	f000 ff8f 	bl	80043bc <mpu9250_write_reg>
   HAL_Delay(100);
 800349e:	2064      	movs	r0, #100	; 0x64
 80034a0:	f001 ff4e 	bl	8005340 <HAL_Delay>
}
 80034a4:	bf00      	nop
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <calibrateMPU9250>:

void calibrateMPU9250(float * dest1, float * dest2)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b098      	sub	sp, #96	; 0x60
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 80034b6:	2300      	movs	r3, #0
 80034b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80034ba:	2300      	movs	r3, #0
 80034bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034be:	2300      	movs	r3, #0
 80034c0:	643b      	str	r3, [r7, #64]	; 0x40
 80034c2:	2300      	movs	r3, #0
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c6:	2300      	movs	r3, #0
 80034c8:	633b      	str	r3, [r7, #48]	; 0x30
 80034ca:	2300      	movs	r3, #0
 80034cc:	637b      	str	r3, [r7, #52]	; 0x34

 // reset device
  mpu9250_write_reg(PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80034ce:	2180      	movs	r1, #128	; 0x80
 80034d0:	206b      	movs	r0, #107	; 0x6b
 80034d2:	f000 ff73 	bl	80043bc <mpu9250_write_reg>
  HAL_Delay(100);
 80034d6:	2064      	movs	r0, #100	; 0x64
 80034d8:	f001 ff32 	bl	8005340 <HAL_Delay>

 // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
 // else use the internal oscillator, bits 2:0 = 001
  mpu9250_write_reg(PWR_MGMT_1, 0x01);
 80034dc:	2101      	movs	r1, #1
 80034de:	206b      	movs	r0, #107	; 0x6b
 80034e0:	f000 ff6c 	bl	80043bc <mpu9250_write_reg>
  mpu9250_write_reg(PWR_MGMT_2, 0x00);
 80034e4:	2100      	movs	r1, #0
 80034e6:	206c      	movs	r0, #108	; 0x6c
 80034e8:	f000 ff68 	bl	80043bc <mpu9250_write_reg>
  HAL_Delay(200);
 80034ec:	20c8      	movs	r0, #200	; 0xc8
 80034ee:	f001 ff27 	bl	8005340 <HAL_Delay>

// Configure device for bias calculation
  mpu9250_write_reg(INT_ENABLE, 0x00);   // Disable all interrupts
 80034f2:	2100      	movs	r1, #0
 80034f4:	2038      	movs	r0, #56	; 0x38
 80034f6:	f000 ff61 	bl	80043bc <mpu9250_write_reg>
  mpu9250_write_reg(FIFO_EN, 0x00);      // Disable FIFO
 80034fa:	2100      	movs	r1, #0
 80034fc:	2023      	movs	r0, #35	; 0x23
 80034fe:	f000 ff5d 	bl	80043bc <mpu9250_write_reg>
  mpu9250_write_reg(PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8003502:	2100      	movs	r1, #0
 8003504:	206b      	movs	r0, #107	; 0x6b
 8003506:	f000 ff59 	bl	80043bc <mpu9250_write_reg>
  mpu9250_write_reg(I2C_MST_CTRL, 0x00); // Disable I2C master
 800350a:	2100      	movs	r1, #0
 800350c:	2024      	movs	r0, #36	; 0x24
 800350e:	f000 ff55 	bl	80043bc <mpu9250_write_reg>
  mpu9250_write_reg(USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8003512:	2100      	movs	r1, #0
 8003514:	206a      	movs	r0, #106	; 0x6a
 8003516:	f000 ff51 	bl	80043bc <mpu9250_write_reg>
  mpu9250_write_reg(USER_CTRL, 0x0C);    // Reset FIFO and DMP
 800351a:	210c      	movs	r1, #12
 800351c:	206a      	movs	r0, #106	; 0x6a
 800351e:	f000 ff4d 	bl	80043bc <mpu9250_write_reg>
  HAL_Delay(15);
 8003522:	200f      	movs	r0, #15
 8003524:	f001 ff0c 	bl	8005340 <HAL_Delay>

// Configure MPU6050 gyro and accelerometer for bias calculation
  mpu9250_write_reg(CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8003528:	2101      	movs	r1, #1
 800352a:	201a      	movs	r0, #26
 800352c:	f000 ff46 	bl	80043bc <mpu9250_write_reg>
  mpu9250_write_reg(SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8003530:	2100      	movs	r1, #0
 8003532:	2019      	movs	r0, #25
 8003534:	f000 ff42 	bl	80043bc <mpu9250_write_reg>
  mpu9250_write_reg(GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8003538:	2100      	movs	r1, #0
 800353a:	201b      	movs	r0, #27
 800353c:	f000 ff3e 	bl	80043bc <mpu9250_write_reg>
  mpu9250_write_reg(ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8003540:	2100      	movs	r1, #0
 8003542:	201c      	movs	r0, #28
 8003544:	f000 ff3a 	bl	80043bc <mpu9250_write_reg>

  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8003548:	2383      	movs	r3, #131	; 0x83
 800354a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 800354e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003552:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
  mpu9250_write_reg(USER_CTRL, 0x40);   // Enable FIFO
 8003556:	2140      	movs	r1, #64	; 0x40
 8003558:	206a      	movs	r0, #106	; 0x6a
 800355a:	f000 ff2f 	bl	80043bc <mpu9250_write_reg>
  mpu9250_write_reg(FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 800355e:	2178      	movs	r1, #120	; 0x78
 8003560:	2023      	movs	r0, #35	; 0x23
 8003562:	f000 ff2b 	bl	80043bc <mpu9250_write_reg>
  HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8003566:	2028      	movs	r0, #40	; 0x28
 8003568:	f001 feea 	bl	8005340 <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  mpu9250_write_reg(FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 800356c:	2100      	movs	r1, #0
 800356e:	2023      	movs	r0, #35	; 0x23
 8003570:	f000 ff24 	bl	80043bc <mpu9250_write_reg>
  mpu9250_read_reg(FIFO_COUNTH,  &data[0], 2); // read FIFO sample count
 8003574:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003578:	2202      	movs	r2, #2
 800357a:	4619      	mov	r1, r3
 800357c:	2072      	movs	r0, #114	; 0x72
 800357e:	f000 ff43 	bl	8004408 <mpu9250_read_reg>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8003582:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	b21a      	sxth	r2, r3
 800358a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800358e:	b21b      	sxth	r3, r3
 8003590:	4313      	orrs	r3, r2
 8003592:	b21b      	sxth	r3, r3
 8003594:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8003598:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800359c:	4ac0      	ldr	r2, [pc, #768]	; (80038a0 <calibrateMPU9250+0x3f4>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	08db      	lsrs	r3, r3, #3
 80035a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

  for (ii = 0; ii < packet_count; ii++) {
 80035a8:	2300      	movs	r3, #0
 80035aa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80035ae:	e071      	b.n	8003694 <calibrateMPU9250+0x1e8>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 80035b0:	2300      	movs	r3, #0
 80035b2:	82bb      	strh	r3, [r7, #20]
 80035b4:	2300      	movs	r3, #0
 80035b6:	82fb      	strh	r3, [r7, #22]
 80035b8:	2300      	movs	r3, #0
 80035ba:	833b      	strh	r3, [r7, #24]
 80035bc:	2300      	movs	r3, #0
 80035be:	81bb      	strh	r3, [r7, #12]
 80035c0:	2300      	movs	r3, #0
 80035c2:	81fb      	strh	r3, [r7, #14]
 80035c4:	2300      	movs	r3, #0
 80035c6:	823b      	strh	r3, [r7, #16]
    mpu9250_read_reg(FIFO_R_W,  &data[0], 12); // read data for averaging
 80035c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80035cc:	220c      	movs	r2, #12
 80035ce:	4619      	mov	r1, r3
 80035d0:	2074      	movs	r0, #116	; 0x74
 80035d2:	f000 ff19 	bl	8004408 <mpu9250_read_reg>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80035d6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80035da:	021b      	lsls	r3, r3, #8
 80035dc:	b21a      	sxth	r2, r3
 80035de:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80035e2:	b21b      	sxth	r3, r3
 80035e4:	4313      	orrs	r3, r2
 80035e6:	b21b      	sxth	r3, r3
 80035e8:	82bb      	strh	r3, [r7, #20]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 80035ea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	b21a      	sxth	r2, r3
 80035f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80035f6:	b21b      	sxth	r3, r3
 80035f8:	4313      	orrs	r3, r2
 80035fa:	b21b      	sxth	r3, r3
 80035fc:	82fb      	strh	r3, [r7, #22]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 80035fe:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	b21a      	sxth	r2, r3
 8003606:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800360a:	b21b      	sxth	r3, r3
 800360c:	4313      	orrs	r3, r2
 800360e:	b21b      	sxth	r3, r3
 8003610:	833b      	strh	r3, [r7, #24]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8003612:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	b21a      	sxth	r2, r3
 800361a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800361e:	b21b      	sxth	r3, r3
 8003620:	4313      	orrs	r3, r2
 8003622:	b21b      	sxth	r3, r3
 8003624:	81bb      	strh	r3, [r7, #12]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8003626:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	b21a      	sxth	r2, r3
 800362e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003632:	b21b      	sxth	r3, r3
 8003634:	4313      	orrs	r3, r2
 8003636:	b21b      	sxth	r3, r3
 8003638:	81fb      	strh	r3, [r7, #14]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 800363a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	b21a      	sxth	r2, r3
 8003642:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003646:	b21b      	sxth	r3, r3
 8003648:	4313      	orrs	r3, r2
 800364a:	b21b      	sxth	r3, r3
 800364c:	823b      	strh	r3, [r7, #16]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003650:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003654:	4413      	add	r3, r2
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] += (int32_t) accel_temp[1];
 8003658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800365e:	4413      	add	r3, r2
 8003660:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] += (int32_t) accel_temp[2];
 8003662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003664:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003668:	4413      	add	r3, r2
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003672:	4413      	add	r3, r2
 8003674:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 8003676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003678:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800367c:	4413      	add	r3, r2
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8003680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003682:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003686:	4413      	add	r3, r2
 8003688:	643b      	str	r3, [r7, #64]	; 0x40
  for (ii = 0; ii < packet_count; ii++) {
 800368a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800368e:	3301      	adds	r3, #1
 8003690:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003694:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003698:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800369c:	429a      	cmp	r2, r3
 800369e:	d387      	bcc.n	80035b0 <calibrateMPU9250+0x104>

  }

    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 80036a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80036a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] /= (int32_t) packet_count;
 80036ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80036b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80036b6:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] /= (int32_t) packet_count;
 80036b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80036be:	fb92 f3f3 	sdiv	r3, r2, r3
 80036c2:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  /= (int32_t) packet_count;
 80036c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80036ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80036ce:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  /= (int32_t) packet_count;
 80036d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80036d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80036da:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  /= (int32_t) packet_count;
 80036dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80036e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80036e6:	643b      	str	r3, [r7, #64]	; 0x40

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80036e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	dd05      	ble.n	80036fa <calibrateMPU9250+0x24e>
 80036ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
 80036f8:	e004      	b.n	8003704 <calibrateMPU9250+0x258>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 80036fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036fc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003700:	4413      	add	r3, r2
 8003702:	637b      	str	r3, [r7, #52]	; 0x34

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8003704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003706:	425b      	negs	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	da00      	bge.n	800370e <calibrateMPU9250+0x262>
 800370c:	3303      	adds	r3, #3
 800370e:	109b      	asrs	r3, r3, #2
 8003710:	121b      	asrs	r3, r3, #8
 8003712:	b2db      	uxtb	r3, r3
 8003714:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8003718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371a:	425b      	negs	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	da00      	bge.n	8003722 <calibrateMPU9250+0x276>
 8003720:	3303      	adds	r3, #3
 8003722:	109b      	asrs	r3, r3, #2
 8003724:	b2db      	uxtb	r3, r3
 8003726:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 800372a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372c:	425b      	negs	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	da00      	bge.n	8003734 <calibrateMPU9250+0x288>
 8003732:	3303      	adds	r3, #3
 8003734:	109b      	asrs	r3, r3, #2
 8003736:	121b      	asrs	r3, r3, #8
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 800373e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003740:	425b      	negs	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	da00      	bge.n	8003748 <calibrateMPU9250+0x29c>
 8003746:	3303      	adds	r3, #3
 8003748:	109b      	asrs	r3, r3, #2
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8003750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003752:	425b      	negs	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	da00      	bge.n	800375a <calibrateMPU9250+0x2ae>
 8003758:	3303      	adds	r3, #3
 800375a:	109b      	asrs	r3, r3, #2
 800375c:	121b      	asrs	r3, r3, #8
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8003764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003766:	425b      	negs	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	da00      	bge.n	800376e <calibrateMPU9250+0x2c2>
 800376c:	3303      	adds	r3, #3
 800376e:	109b      	asrs	r3, r3, #2
 8003770:	b2db      	uxtb	r3, r3
 8003772:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

// Push gyro biases to hardware registers
  mpu9250_write_reg(XG_OFFSET_H, data[0]);
 8003776:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800377a:	4619      	mov	r1, r3
 800377c:	2013      	movs	r0, #19
 800377e:	f000 fe1d 	bl	80043bc <mpu9250_write_reg>
  mpu9250_write_reg(XG_OFFSET_L, data[1]);
 8003782:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003786:	4619      	mov	r1, r3
 8003788:	2014      	movs	r0, #20
 800378a:	f000 fe17 	bl	80043bc <mpu9250_write_reg>
  mpu9250_write_reg(YG_OFFSET_H, data[2]);
 800378e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003792:	4619      	mov	r1, r3
 8003794:	2015      	movs	r0, #21
 8003796:	f000 fe11 	bl	80043bc <mpu9250_write_reg>
  mpu9250_write_reg(YG_OFFSET_L, data[3]);
 800379a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800379e:	4619      	mov	r1, r3
 80037a0:	2016      	movs	r0, #22
 80037a2:	f000 fe0b 	bl	80043bc <mpu9250_write_reg>
  mpu9250_write_reg(ZG_OFFSET_H, data[4]);
 80037a6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80037aa:	4619      	mov	r1, r3
 80037ac:	2017      	movs	r0, #23
 80037ae:	f000 fe05 	bl	80043bc <mpu9250_write_reg>
  mpu9250_write_reg(ZG_OFFSET_L, data[5]);
 80037b2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80037b6:	4619      	mov	r1, r3
 80037b8:	2018      	movs	r0, #24
 80037ba:	f000 fdff 	bl	80043bc <mpu9250_write_reg>

// Output scaled gyro biases for display in the main program
  dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 80037be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c0:	ee07 3a90 	vmov	s15, r3
 80037c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037c8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80037cc:	ee07 3a90 	vmov	s15, r3
 80037d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	edc3 7a00 	vstr	s15, [r3]
  dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 80037de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e0:	ee07 3a90 	vmov	s15, r3
 80037e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037e8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80037ec:	ee07 3a90 	vmov	s15, r3
 80037f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3304      	adds	r3, #4
 80037f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037fc:	edc3 7a00 	vstr	s15, [r3]
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8003800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003802:	ee07 3a90 	vmov	s15, r3
 8003806:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800380a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800380e:	ee07 3a90 	vmov	s15, r3
 8003812:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3308      	adds	r3, #8
 800381a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800381e:	edc3 7a00 	vstr	s15, [r3]
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 8003822:	2300      	movs	r3, #0
 8003824:	623b      	str	r3, [r7, #32]
 8003826:	2300      	movs	r3, #0
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
 800382a:	2300      	movs	r3, #0
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
  mpu9250_read_reg(XA_OFFSET_H, &data[0] ,2); // Read factory accelerometer trim values
 800382e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003832:	2202      	movs	r2, #2
 8003834:	4619      	mov	r1, r3
 8003836:	2077      	movs	r0, #119	; 0x77
 8003838:	f000 fde6 	bl	8004408 <mpu9250_read_reg>
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 800383c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003846:	4313      	orrs	r3, r2
 8003848:	623b      	str	r3, [r7, #32]
  mpu9250_read_reg(YA_OFFSET_H, &data[0], 2);
 800384a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800384e:	2202      	movs	r2, #2
 8003850:	4619      	mov	r1, r3
 8003852:	207a      	movs	r0, #122	; 0x7a
 8003854:	f000 fdd8 	bl	8004408 <mpu9250_read_reg>
  accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8003858:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800385c:	021b      	lsls	r3, r3, #8
 800385e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003862:	4313      	orrs	r3, r2
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
  mpu9250_read_reg(ZA_OFFSET_H,  &data[0], 2);
 8003866:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800386a:	2202      	movs	r2, #2
 800386c:	4619      	mov	r1, r3
 800386e:	207d      	movs	r0, #125	; 0x7d
 8003870:	f000 fdca 	bl	8004408 <mpu9250_read_reg>
  accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8003874:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003878:	021b      	lsls	r3, r3, #8
 800387a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800387e:	4313      	orrs	r3, r2
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8003882:	2301      	movs	r3, #1
 8003884:	653b      	str	r3, [r7, #80]	; 0x50
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8003886:	4a07      	ldr	r2, [pc, #28]	; (80038a4 <calibrateMPU9250+0x3f8>)
 8003888:	f107 031c 	add.w	r3, r7, #28
 800388c:	6812      	ldr	r2, [r2, #0]
 800388e:	4611      	mov	r1, r2
 8003890:	8019      	strh	r1, [r3, #0]
 8003892:	3302      	adds	r3, #2
 8003894:	0c12      	lsrs	r2, r2, #16
 8003896:	701a      	strb	r2, [r3, #0]

  for(ii = 0; ii < 3; ii++) {
 8003898:	2300      	movs	r3, #0
 800389a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800389e:	e01b      	b.n	80038d8 <calibrateMPU9250+0x42c>
 80038a0:	aaaaaaab 	.word	0xaaaaaaab
 80038a4:	08012f5c 	.word	0x08012f5c
    if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 80038a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	3360      	adds	r3, #96	; 0x60
 80038b0:	443b      	add	r3, r7
 80038b2:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80038b6:	461a      	mov	r2, r3
 80038b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d006      	beq.n	80038ce <calibrateMPU9250+0x422>
 80038c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80038c4:	3360      	adds	r3, #96	; 0x60
 80038c6:	443b      	add	r3, r7
 80038c8:	2201      	movs	r2, #1
 80038ca:	f803 2c44 	strb.w	r2, [r3, #-68]
  for(ii = 0; ii < 3; ii++) {
 80038ce:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80038d2:	3301      	adds	r3, #1
 80038d4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80038d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d9e3      	bls.n	80038a8 <calibrateMPU9250+0x3fc>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80038e0:	6a3a      	ldr	r2, [r7, #32]
 80038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	da00      	bge.n	80038ea <calibrateMPU9250+0x43e>
 80038e8:	3307      	adds	r3, #7
 80038ea:	10db      	asrs	r3, r3, #3
 80038ec:	425b      	negs	r3, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	623b      	str	r3, [r7, #32]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 80038f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	da00      	bge.n	80038fc <calibrateMPU9250+0x450>
 80038fa:	3307      	adds	r3, #7
 80038fc:	10db      	asrs	r3, r3, #3
 80038fe:	425b      	negs	r3, r3
 8003900:	4413      	add	r3, r2
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
  accel_bias_reg[2] -= (accel_bias[2]/8);
 8003904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003908:	2b00      	cmp	r3, #0
 800390a:	da00      	bge.n	800390e <calibrateMPU9250+0x462>
 800390c:	3307      	adds	r3, #7
 800390e:	10db      	asrs	r3, r3, #3
 8003910:	425b      	negs	r3, r3
 8003912:	4413      	add	r3, r2
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	121b      	asrs	r3, r3, #8
 800391a:	b2db      	uxtb	r3, r3
 800391c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (accel_bias_reg[0])      & 0xFF;
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003928:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800392c:	7f3b      	ldrb	r3, [r7, #28]
 800392e:	4313      	orrs	r3, r2
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	121b      	asrs	r3, r3, #8
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003948:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800394c:	7f7b      	ldrb	r3, [r7, #29]
 800394e:	4313      	orrs	r3, r2
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	121b      	asrs	r3, r3, #8
 800395a:	b2db      	uxtb	r3, r3
 800395c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (accel_bias_reg[2])      & 0xFF;
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003968:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800396c:	7fbb      	ldrb	r3, [r7, #30]
 800396e:	4313      	orrs	r3, r2
 8003970:	b2db      	uxtb	r3, r3
 8003972:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
//  mpu9250_write_reg(YA_OFFSET_L, data[3]);
//  mpu9250_write_reg(ZA_OFFSET_H, data[4]);
//  mpu9250_write_reg(ZA_OFFSET_L, data[5]);

// Output scaled accelerometer biases for display in the main program
   dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	ee07 3a90 	vmov	s15, r3
 800397c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003980:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003984:	ee07 3a90 	vmov	s15, r3
 8003988:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800398c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	edc3 7a00 	vstr	s15, [r3]
   dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	ee07 3a90 	vmov	s15, r3
 800399c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039a0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80039a4:	ee07 3a90 	vmov	s15, r3
 80039a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	3304      	adds	r3, #4
 80039b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039b4:	edc3 7a00 	vstr	s15, [r3]
   dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 80039b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039c2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	3308      	adds	r3, #8
 80039d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039d6:	edc3 7a00 	vstr	s15, [r3]
}
 80039da:	bf00      	nop
 80039dc:	3760      	adds	r7, #96	; 0x60
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop

080039e4 <readMPU9250Data>:

void readMPU9250Data(int16_t * destination)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint8_t rawData[14];  // x/y/z accel register data stored here
  mpu9250_read_reg(ACCEL_XOUT_H ,rawData, 14);  // Read the 14 raw data registers into data array
 80039ec:	f107 0308 	add.w	r3, r7, #8
 80039f0:	220e      	movs	r2, #14
 80039f2:	4619      	mov	r1, r3
 80039f4:	203b      	movs	r0, #59	; 0x3b
 80039f6:	f000 fd07 	bl	8004408 <mpu9250_read_reg>
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
 80039fa:	7a3b      	ldrb	r3, [r7, #8]
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	b21a      	sxth	r2, r3
 8003a00:	7a7b      	ldrb	r3, [r7, #9]
 8003a02:	b21b      	sxth	r3, r3
 8003a04:	4313      	orrs	r3, r2
 8003a06:	b21a      	sxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
 8003a0c:	7abb      	ldrb	r3, [r7, #10]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	b219      	sxth	r1, r3
 8003a12:	7afb      	ldrb	r3, [r7, #11]
 8003a14:	b21a      	sxth	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3302      	adds	r3, #2
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	b212      	sxth	r2, r2
 8003a1e:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
 8003a20:	7b3b      	ldrb	r3, [r7, #12]
 8003a22:	021b      	lsls	r3, r3, #8
 8003a24:	b219      	sxth	r1, r3
 8003a26:	7b7b      	ldrb	r3, [r7, #13]
 8003a28:	b21a      	sxth	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	b212      	sxth	r2, r2
 8003a32:	801a      	strh	r2, [r3, #0]
  destination[3] = ((int16_t)rawData[6] << 8) | rawData[7] ;
 8003a34:	7bbb      	ldrb	r3, [r7, #14]
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	b219      	sxth	r1, r3
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	b21a      	sxth	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3306      	adds	r3, #6
 8003a42:	430a      	orrs	r2, r1
 8003a44:	b212      	sxth	r2, r2
 8003a46:	801a      	strh	r2, [r3, #0]
  destination[4] = ((int16_t)rawData[8] << 8) | rawData[9] ;
 8003a48:	7c3b      	ldrb	r3, [r7, #16]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	b219      	sxth	r1, r3
 8003a4e:	7c7b      	ldrb	r3, [r7, #17]
 8003a50:	b21a      	sxth	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3308      	adds	r3, #8
 8003a56:	430a      	orrs	r2, r1
 8003a58:	b212      	sxth	r2, r2
 8003a5a:	801a      	strh	r2, [r3, #0]
  destination[5] = ((int16_t)rawData[10] << 8) | rawData[11] ;
 8003a5c:	7cbb      	ldrb	r3, [r7, #18]
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	b219      	sxth	r1, r3
 8003a62:	7cfb      	ldrb	r3, [r7, #19]
 8003a64:	b21a      	sxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	330a      	adds	r3, #10
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	b212      	sxth	r2, r2
 8003a6e:	801a      	strh	r2, [r3, #0]
  destination[6] = ((int16_t)rawData[12] << 8) | rawData[13] ;
 8003a70:	7d3b      	ldrb	r3, [r7, #20]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	b219      	sxth	r1, r3
 8003a76:	7d7b      	ldrb	r3, [r7, #21]
 8003a78:	b21a      	sxth	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	b212      	sxth	r2, r2
 8003a82:	801a      	strh	r2, [r3, #0]
}
 8003a84:	bf00      	nop
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <getGres>:

float getGres(struct mpu9250 * mpu9250) {
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint8_t Gscale = mpu9250->Gscale;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	785b      	ldrb	r3, [r3, #1]
 8003a98:	73fb      	strb	r3, [r7, #15]
  switch (Gscale)
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d823      	bhi.n	8003ae8 <getGres+0x5c>
 8003aa0:	a201      	add	r2, pc, #4	; (adr r2, 8003aa8 <getGres+0x1c>)
 8003aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa6:	bf00      	nop
 8003aa8:	08003ab9 	.word	0x08003ab9
 8003aac:	08003ac5 	.word	0x08003ac5
 8003ab0:	08003ad1 	.word	0x08003ad1
 8003ab4:	08003add 	.word	0x08003add
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
    case GFS_250DPS:
    		mpu9250->_gRes = 250.0/32768.0;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a11      	ldr	r2, [pc, #68]	; (8003b00 <getGres+0x74>)
 8003abc:	609a      	str	r2, [r3, #8]
          return mpu9250->_gRes;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	e013      	b.n	8003aec <getGres+0x60>
          break;
    case GFS_500DPS:
    		mpu9250->_gRes = 500.0/32768.0;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a0f      	ldr	r2, [pc, #60]	; (8003b04 <getGres+0x78>)
 8003ac8:	609a      	str	r2, [r3, #8]
          return mpu9250->_gRes;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	e00d      	b.n	8003aec <getGres+0x60>
          break;
    case GFS_1000DPS:
    		mpu9250->_gRes = 1000.0/32768.0;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a0d      	ldr	r2, [pc, #52]	; (8003b08 <getGres+0x7c>)
 8003ad4:	609a      	str	r2, [r3, #8]
         return mpu9250->_gRes;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	e007      	b.n	8003aec <getGres+0x60>
         break;
    case GFS_2000DPS:
    		mpu9250->_gRes = 2000.0/32768.0;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a0b      	ldr	r2, [pc, #44]	; (8003b0c <getGres+0x80>)
 8003ae0:	609a      	str	r2, [r3, #8]
         return mpu9250->_gRes;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	e001      	b.n	8003aec <getGres+0x60>
         break;
  }
  return 0.0;
 8003ae8:	f04f 0300 	mov.w	r3, #0
}
 8003aec:	ee07 3a90 	vmov	s15, r3
 8003af0:	eeb0 0a67 	vmov.f32	s0, s15
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	3bfa0000 	.word	0x3bfa0000
 8003b04:	3c7a0000 	.word	0x3c7a0000
 8003b08:	3cfa0000 	.word	0x3cfa0000
 8003b0c:	3d7a0000 	.word	0x3d7a0000

08003b10 <getAres>:

float getAres(struct mpu9250 * mpu9250) {
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint8_t Ascale = mpu9250->Ascale;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	73fb      	strb	r3, [r7, #15]
  switch (Ascale)
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d827      	bhi.n	8003b74 <getAres+0x64>
 8003b24:	a201      	add	r2, pc, #4	; (adr r2, 8003b2c <getAres+0x1c>)
 8003b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2a:	bf00      	nop
 8003b2c:	08003b3d 	.word	0x08003b3d
 8003b30:	08003b4b 	.word	0x08003b4b
 8003b34:	08003b59 	.word	0x08003b59
 8003b38:	08003b67 	.word	0x08003b67
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
		 mpu9250->_aRes = 2.0f/32768.0f;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8003b42:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	e016      	b.n	8003b78 <getAres+0x68>
         break;
    case AFS_4G:
		mpu9250->_aRes = 4.0f/32768.0f;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8003b50:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	e00f      	b.n	8003b78 <getAres+0x68>
         break;
    case AFS_8G:
		mpu9250->_aRes = 8.0f/32768.0f;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8003b5e:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	e008      	b.n	8003b78 <getAres+0x68>
         break;
    case AFS_16G:
		mpu9250->_aRes = 16.0f/32768.0f;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8003b6c:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	e001      	b.n	8003b78 <getAres+0x68>
         break;
  }
  return 0.0;
 8003b74:	f04f 0300 	mov.w	r3, #0
}
 8003b78:	ee07 3a90 	vmov	s15, r3
 8003b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	0000      	movs	r0, r0
	...

08003b90 <updateData>:

void updateData(struct mpu9250 * mpu9250, float dt, float vel){
 8003b90:	b580      	push	{r7, lr}
 8003b92:	ed2d 8b02 	vpush	{d8}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ba0:	edc7 0a01 	vstr	s1, [r7, #4]
	readMPU9250Data(mpu9250->rawData);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	330c      	adds	r3, #12
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ff1b 	bl	80039e4 <readMPU9250Data>

  // Update buffers' values
	for (int i = 0; i<3; i++){
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
 8003bb2:	e023      	b.n	8003bfc <updateData+0x6c>
		mpu9250->accBuff[i][mpu9250->buffPointer] = (float)(mpu9250->rawData[i] * getAres(mpu9250));
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f7ff ffa0 	bl	8003b10 <getAres>
 8003bd0:	eef0 7a40 	vmov.f32	s15, s0
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bda:	4618      	mov	r0, r3
 8003bdc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003be0:	68f9      	ldr	r1, [r7, #12]
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	4403      	add	r3, r0
 8003bec:	330e      	adds	r3, #14
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i<3; i++){
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	ddd8      	ble.n	8003bb4 <updateData+0x24>
	}
	for (int i = 4; i<7; i++){
 8003c02:	2304      	movs	r3, #4
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	e025      	b.n	8003c54 <updateData+0xc4>
		mpu9250->gyroBuff[i-4][mpu9250->buffPointer] = (float)(mpu9250->rawData[i] * getGres(mpu9250));
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	4413      	add	r3, r2
 8003c12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f7ff ff34 	bl	8003a8c <getGres>
 8003c24:	eef0 7a40 	vmov.f32	s15, s0
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	1f1a      	subs	r2, r3, #4
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c32:	4618      	mov	r0, r3
 8003c34:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003c38:	68f9      	ldr	r1, [r7, #12]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	4403      	add	r3, r0
 8003c42:	331c      	adds	r3, #28
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	3304      	adds	r3, #4
 8003c4a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 4; i<7; i++){
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	3301      	adds	r3, #1
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	2b06      	cmp	r3, #6
 8003c58:	ddd6      	ble.n	8003c08 <updateData+0x78>
	}

	mpu9250->buffPointer = (mpu9250->buffPointer+1) % filt_size;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	4ba1      	ldr	r3, [pc, #644]	; (8003ee8 <updateData+0x358>)
 8003c64:	fb83 1302 	smull	r1, r3, r3, r2
 8003c68:	1059      	asrs	r1, r3, #1
 8003c6a:	17d3      	asrs	r3, r2, #31
 8003c6c:	1ac9      	subs	r1, r1, r3
 8003c6e:	460b      	mov	r3, r1
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	1ad1      	subs	r1, r2, r3
 8003c76:	b2ca      	uxtb	r2, r1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mpu9250->lastAngVel = mpu9250->gyro[2];
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  // Calculate moving average's new iteration
	for(int i = 0 ; i < 3 ; i++){
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	e07d      	b.n	8003d8a <updateData+0x1fa>
		mpu9250->acc[i] = 0;
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	3306      	adds	r3, #6
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	3304      	adds	r3, #4
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
		mpu9250->gyro[i] = 0;
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	330a      	adds	r3, #10
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < filt_size ; j++){
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	e03d      	b.n	8003d32 <updateData+0x1a2>
			mpu9250->acc[i]+= mpu9250->accBuff[i][j];
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	3306      	adds	r3, #6
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	ed93 7a00 	vldr	s14, [r3]
 8003cc6:	68f9      	ldr	r1, [r7, #12]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	330e      	adds	r3, #14
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	edd3 7a00 	vldr	s15, [r3]
 8003cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	3306      	adds	r3, #6
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	3304      	adds	r3, #4
 8003cee:	edc3 7a00 	vstr	s15, [r3]
			mpu9250->gyro[i]+= mpu9250->gyroBuff[i][j];
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	330a      	adds	r3, #10
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	ed93 7a00 	vldr	s14, [r3]
 8003d00:	68f9      	ldr	r1, [r7, #12]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	331c      	adds	r3, #28
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	3304      	adds	r3, #4
 8003d16:	edd3 7a00 	vldr	s15, [r3]
 8003d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	330a      	adds	r3, #10
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	edc3 7a00 	vstr	s15, [r3]
		for(int j = 0 ; j < filt_size ; j++){
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	ddbe      	ble.n	8003cb6 <updateData+0x126>
		}
		mpu9250->acc[i]/= filt_size;
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	3306      	adds	r3, #6
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	3304      	adds	r3, #4
 8003d44:	ed93 7a00 	vldr	s14, [r3]
 8003d48:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003d4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	3306      	adds	r3, #6
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	edc3 7a00 	vstr	s15, [r3]
		mpu9250->gyro[i]/= filt_size;
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	330a      	adds	r3, #10
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	ed93 7a00 	vldr	s14, [r3]
 8003d6e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003d72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	330a      	adds	r3, #10
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0 ; i < 3 ; i++){
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	3301      	adds	r3, #1
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	f77f af7e 	ble.w	8003c8e <updateData+0xfe>
	}

  // Update orientation
	// 1.1 = gyroscope's error
	mpu9250->pose[2] += 1.1* dt * (mpu9250->gyro[2] + mpu9250->lastAngVel) / 2;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003d98:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003d9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003da0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003da4:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8003ed8 <updateData+0x348>
 8003da8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8003db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dc0:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003dc4:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8003dc8:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8003dcc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003dd0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	if(mpu9250->pose[2] < -180)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003de0:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8003eec <updateData+0x35c>
 8003de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dec:	d50a      	bpl.n	8003e04 <updateData+0x274>
		mpu9250->pose[2] += 360;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003df4:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003ef0 <updateData+0x360>
 8003df8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
 8003e02:	e013      	b.n	8003e2c <updateData+0x29c>
	else if(mpu9250->pose[2] > 180)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003e0a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003ef4 <updateData+0x364>
 8003e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e16:	dd09      	ble.n	8003e2c <updateData+0x29c>
		mpu9250->pose[2] -= 360;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003e1e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003ef0 <updateData+0x360>
 8003e22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

  //Update position
  mpu9250->pose[0] += cos(M_PI/180 * mpu9250->pose[2]) * dt * vel;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8003e32:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003e3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e40:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8003ee0 <updateData+0x350>
 8003e44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003e48:	eeb0 0b47 	vmov.f64	d0, d7
 8003e4c:	f00d fd28 	bl	80118a0 <cos>
 8003e50:	eeb0 6b40 	vmov.f64	d6, d0
 8003e54:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e5c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003e60:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003e6c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003e70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
  mpu9250->pose[1] += sin(M_PI/180 * mpu9250->pose[2]) * dt * vel;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003e80:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003e8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e8e:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8003ee0 <updateData+0x350>
 8003e92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003e96:	eeb0 0b47 	vmov.f64	d0, d7
 8003e9a:	f00d fd4d 	bl	8011938 <sin>
 8003e9e:	eeb0 6b40 	vmov.f64	d6, d0
 8003ea2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ea6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003eaa:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003eae:	edd7 7a01 	vldr	s15, [r7, #4]
 8003eb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003eb6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003eba:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003ebe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
}
 8003ec8:	bf00      	nop
 8003eca:	3720      	adds	r7, #32
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	ecbd 8b02 	vpop	{d8}
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	f3af 8000 	nop.w
 8003ed8:	9999999a 	.word	0x9999999a
 8003edc:	3ff19999 	.word	0x3ff19999
 8003ee0:	a2529d39 	.word	0xa2529d39
 8003ee4:	3f91df46 	.word	0x3f91df46
 8003ee8:	66666667 	.word	0x66666667
 8003eec:	c3340000 	.word	0xc3340000
 8003ef0:	43b40000 	.word	0x43b40000
 8003ef4:	43340000 	.word	0x43340000

08003ef8 <setPose>:

void setPose(struct mpu9250 * mpu9250, float *pos){
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
	for(int i = 0 ; i < 3 ; i++){
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	e00e      	b.n	8003f26 <setPose+0x2e>
		mpu9250->pose[i] = pos[i];
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	4413      	add	r3, r2
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	332c      	adds	r3, #44	; 0x2c
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < 3 ; i++){
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3301      	adds	r3, #1
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	dded      	ble.n	8003f08 <setPose+0x10>
	}
}
 8003f2c:	bf00      	nop
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
	...

08003f3c <readSpeed>:
 */

#include "myCAN.h"

void readSpeed(FDCAN_HandleTypeDef *hfdcan, FDCAN_RxHeaderTypeDef *pRxHeader,
		union BytesFloat bf, uint8_t *pRxData, uint8_t *m, float *sp){
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]
	uint8_t m2;
	m2 = HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, pRxHeader, pRxData);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	2140      	movs	r1, #64	; 0x40
 8003f50:	4810      	ldr	r0, [pc, #64]	; (8003f94 <readSpeed+0x58>)
 8003f52:	f001 fd13 	bl	800597c <HAL_FDCAN_GetRxMessage>
 8003f56:	4603      	mov	r3, r0
 8003f58:	74fb      	strb	r3, [r7, #19]
	*m = m2;
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	7cfa      	ldrb	r2, [r7, #19]
 8003f5e:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < sizeof(float); i++) {
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	e00c      	b.n	8003f80 <readSpeed+0x44>
		uint8_t receivedByte = pRxData[i];
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	74bb      	strb	r3, [r7, #18]
		bf.byteValue[i] = receivedByte;
 8003f70:	1d3a      	adds	r2, r7, #4
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	4413      	add	r3, r2
 8003f76:	7cba      	ldrb	r2, [r7, #18]
 8003f78:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < sizeof(float); i++) {
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	d9ef      	bls.n	8003f66 <readSpeed+0x2a>
	}

	*sp = bf.floatValue;
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	601a      	str	r2, [r3, #0]

	// return m;
}
 8003f8c:	bf00      	nop
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	24000334 	.word	0x24000334

08003f98 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003fa0:	1d39      	adds	r1, r7, #4
 8003fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	4803      	ldr	r0, [pc, #12]	; (8003fb8 <__io_putchar+0x20>)
 8003faa:	f006 fe6d 	bl	800ac88 <HAL_UART_Transmit>
  return ch;
 8003fae:	687b      	ldr	r3, [r7, #4]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	2400091c 	.word	0x2400091c

08003fbc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003fc0:	4b28      	ldr	r3, [pc, #160]	; (8004064 <MX_SPI1_Init+0xa8>)
 8003fc2:	4a29      	ldr	r2, [pc, #164]	; (8004068 <MX_SPI1_Init+0xac>)
 8003fc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003fc6:	4b27      	ldr	r3, [pc, #156]	; (8004064 <MX_SPI1_Init+0xa8>)
 8003fc8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003fcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003fce:	4b25      	ldr	r3, [pc, #148]	; (8004064 <MX_SPI1_Init+0xa8>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fd4:	4b23      	ldr	r3, [pc, #140]	; (8004064 <MX_SPI1_Init+0xa8>)
 8003fd6:	2207      	movs	r2, #7
 8003fd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003fda:	4b22      	ldr	r3, [pc, #136]	; (8004064 <MX_SPI1_Init+0xa8>)
 8003fdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fe0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003fe2:	4b20      	ldr	r3, [pc, #128]	; (8004064 <MX_SPI1_Init+0xa8>)
 8003fe4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fe8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003fea:	4b1e      	ldr	r3, [pc, #120]	; (8004064 <MX_SPI1_Init+0xa8>)
 8003fec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003ff0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003ff2:	4b1c      	ldr	r3, [pc, #112]	; (8004064 <MX_SPI1_Init+0xa8>)
 8003ff4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003ff8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ffa:	4b1a      	ldr	r3, [pc, #104]	; (8004064 <MX_SPI1_Init+0xa8>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004000:	4b18      	ldr	r3, [pc, #96]	; (8004064 <MX_SPI1_Init+0xa8>)
 8004002:	2200      	movs	r2, #0
 8004004:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004006:	4b17      	ldr	r3, [pc, #92]	; (8004064 <MX_SPI1_Init+0xa8>)
 8004008:	2200      	movs	r2, #0
 800400a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800400c:	4b15      	ldr	r3, [pc, #84]	; (8004064 <MX_SPI1_Init+0xa8>)
 800400e:	2200      	movs	r2, #0
 8004010:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004012:	4b14      	ldr	r3, [pc, #80]	; (8004064 <MX_SPI1_Init+0xa8>)
 8004014:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004018:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800401a:	4b12      	ldr	r3, [pc, #72]	; (8004064 <MX_SPI1_Init+0xa8>)
 800401c:	2200      	movs	r2, #0
 800401e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004020:	4b10      	ldr	r3, [pc, #64]	; (8004064 <MX_SPI1_Init+0xa8>)
 8004022:	2200      	movs	r2, #0
 8004024:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004026:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <MX_SPI1_Init+0xa8>)
 8004028:	2200      	movs	r2, #0
 800402a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800402c:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <MX_SPI1_Init+0xa8>)
 800402e:	2200      	movs	r2, #0
 8004030:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004032:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <MX_SPI1_Init+0xa8>)
 8004034:	2200      	movs	r2, #0
 8004036:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004038:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <MX_SPI1_Init+0xa8>)
 800403a:	2200      	movs	r2, #0
 800403c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800403e:	4b09      	ldr	r3, [pc, #36]	; (8004064 <MX_SPI1_Init+0xa8>)
 8004040:	2200      	movs	r2, #0
 8004042:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004044:	4b07      	ldr	r3, [pc, #28]	; (8004064 <MX_SPI1_Init+0xa8>)
 8004046:	2200      	movs	r2, #0
 8004048:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <MX_SPI1_Init+0xa8>)
 800404c:	2200      	movs	r2, #0
 800404e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004050:	4804      	ldr	r0, [pc, #16]	; (8004064 <MX_SPI1_Init+0xa8>)
 8004052:	f004 fd8f 	bl	8008b74 <HAL_SPI_Init>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 800405c:	f7ff f954 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004060:	bf00      	nop
 8004062:	bd80      	pop	{r7, pc}
 8004064:	240006e8 	.word	0x240006e8
 8004068:	40013000 	.word	0x40013000

0800406c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004070:	4b27      	ldr	r3, [pc, #156]	; (8004110 <MX_SPI2_Init+0xa4>)
 8004072:	4a28      	ldr	r2, [pc, #160]	; (8004114 <MX_SPI2_Init+0xa8>)
 8004074:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004076:	4b26      	ldr	r3, [pc, #152]	; (8004110 <MX_SPI2_Init+0xa4>)
 8004078:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800407c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800407e:	4b24      	ldr	r3, [pc, #144]	; (8004110 <MX_SPI2_Init+0xa4>)
 8004080:	2200      	movs	r2, #0
 8004082:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004084:	4b22      	ldr	r3, [pc, #136]	; (8004110 <MX_SPI2_Init+0xa4>)
 8004086:	2207      	movs	r2, #7
 8004088:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800408a:	4b21      	ldr	r3, [pc, #132]	; (8004110 <MX_SPI2_Init+0xa4>)
 800408c:	2200      	movs	r2, #0
 800408e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004090:	4b1f      	ldr	r3, [pc, #124]	; (8004110 <MX_SPI2_Init+0xa4>)
 8004092:	2200      	movs	r2, #0
 8004094:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004096:	4b1e      	ldr	r3, [pc, #120]	; (8004110 <MX_SPI2_Init+0xa4>)
 8004098:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800409c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800409e:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <MX_SPI2_Init+0xa4>)
 80040a0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80040a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040a6:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <MX_SPI2_Init+0xa4>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040ac:	4b18      	ldr	r3, [pc, #96]	; (8004110 <MX_SPI2_Init+0xa4>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040b2:	4b17      	ldr	r3, [pc, #92]	; (8004110 <MX_SPI2_Init+0xa4>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80040b8:	4b15      	ldr	r3, [pc, #84]	; (8004110 <MX_SPI2_Init+0xa4>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80040be:	4b14      	ldr	r3, [pc, #80]	; (8004110 <MX_SPI2_Init+0xa4>)
 80040c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80040c4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80040c6:	4b12      	ldr	r3, [pc, #72]	; (8004110 <MX_SPI2_Init+0xa4>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80040cc:	4b10      	ldr	r3, [pc, #64]	; (8004110 <MX_SPI2_Init+0xa4>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80040d2:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <MX_SPI2_Init+0xa4>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80040d8:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <MX_SPI2_Init+0xa4>)
 80040da:	2200      	movs	r2, #0
 80040dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80040de:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <MX_SPI2_Init+0xa4>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80040e4:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <MX_SPI2_Init+0xa4>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80040ea:	4b09      	ldr	r3, [pc, #36]	; (8004110 <MX_SPI2_Init+0xa4>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <MX_SPI2_Init+0xa4>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80040f6:	4b06      	ldr	r3, [pc, #24]	; (8004110 <MX_SPI2_Init+0xa4>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040fc:	4804      	ldr	r0, [pc, #16]	; (8004110 <MX_SPI2_Init+0xa4>)
 80040fe:	f004 fd39 	bl	8008b74 <HAL_SPI_Init>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8004108:	f7ff f8fe 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800410c:	bf00      	nop
 800410e:	bd80      	pop	{r7, pc}
 8004110:	24000770 	.word	0x24000770
 8004114:	40003800 	.word	0x40003800

08004118 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800411c:	4b27      	ldr	r3, [pc, #156]	; (80041bc <MX_SPI3_Init+0xa4>)
 800411e:	4a28      	ldr	r2, [pc, #160]	; (80041c0 <MX_SPI3_Init+0xa8>)
 8004120:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004122:	4b26      	ldr	r3, [pc, #152]	; (80041bc <MX_SPI3_Init+0xa4>)
 8004124:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004128:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800412a:	4b24      	ldr	r3, [pc, #144]	; (80041bc <MX_SPI3_Init+0xa4>)
 800412c:	2200      	movs	r2, #0
 800412e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004130:	4b22      	ldr	r3, [pc, #136]	; (80041bc <MX_SPI3_Init+0xa4>)
 8004132:	2207      	movs	r2, #7
 8004134:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004136:	4b21      	ldr	r3, [pc, #132]	; (80041bc <MX_SPI3_Init+0xa4>)
 8004138:	2200      	movs	r2, #0
 800413a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800413c:	4b1f      	ldr	r3, [pc, #124]	; (80041bc <MX_SPI3_Init+0xa4>)
 800413e:	2200      	movs	r2, #0
 8004140:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004142:	4b1e      	ldr	r3, [pc, #120]	; (80041bc <MX_SPI3_Init+0xa4>)
 8004144:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004148:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800414a:	4b1c      	ldr	r3, [pc, #112]	; (80041bc <MX_SPI3_Init+0xa4>)
 800414c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8004150:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004152:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <MX_SPI3_Init+0xa4>)
 8004154:	2200      	movs	r2, #0
 8004156:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004158:	4b18      	ldr	r3, [pc, #96]	; (80041bc <MX_SPI3_Init+0xa4>)
 800415a:	2200      	movs	r2, #0
 800415c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800415e:	4b17      	ldr	r3, [pc, #92]	; (80041bc <MX_SPI3_Init+0xa4>)
 8004160:	2200      	movs	r2, #0
 8004162:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8004164:	4b15      	ldr	r3, [pc, #84]	; (80041bc <MX_SPI3_Init+0xa4>)
 8004166:	2200      	movs	r2, #0
 8004168:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800416a:	4b14      	ldr	r3, [pc, #80]	; (80041bc <MX_SPI3_Init+0xa4>)
 800416c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004170:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004172:	4b12      	ldr	r3, [pc, #72]	; (80041bc <MX_SPI3_Init+0xa4>)
 8004174:	2200      	movs	r2, #0
 8004176:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004178:	4b10      	ldr	r3, [pc, #64]	; (80041bc <MX_SPI3_Init+0xa4>)
 800417a:	2200      	movs	r2, #0
 800417c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800417e:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <MX_SPI3_Init+0xa4>)
 8004180:	2200      	movs	r2, #0
 8004182:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004184:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <MX_SPI3_Init+0xa4>)
 8004186:	2200      	movs	r2, #0
 8004188:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800418a:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <MX_SPI3_Init+0xa4>)
 800418c:	2200      	movs	r2, #0
 800418e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004190:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <MX_SPI3_Init+0xa4>)
 8004192:	2200      	movs	r2, #0
 8004194:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <MX_SPI3_Init+0xa4>)
 8004198:	2200      	movs	r2, #0
 800419a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800419c:	4b07      	ldr	r3, [pc, #28]	; (80041bc <MX_SPI3_Init+0xa4>)
 800419e:	2200      	movs	r2, #0
 80041a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80041a2:	4b06      	ldr	r3, [pc, #24]	; (80041bc <MX_SPI3_Init+0xa4>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80041a8:	4804      	ldr	r0, [pc, #16]	; (80041bc <MX_SPI3_Init+0xa4>)
 80041aa:	f004 fce3 	bl	8008b74 <HAL_SPI_Init>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80041b4:	f7ff f8a8 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80041b8:	bf00      	nop
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	240007f8 	.word	0x240007f8
 80041c0:	40003c00 	.word	0x40003c00

080041c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b0bc      	sub	sp, #240	; 0xf0
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	60da      	str	r2, [r3, #12]
 80041da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041dc:	f107 0320 	add.w	r3, r7, #32
 80041e0:	22bc      	movs	r2, #188	; 0xbc
 80041e2:	2100      	movs	r1, #0
 80041e4:	4618      	mov	r0, r3
 80041e6:	f00b fb21 	bl	800f82c <memset>
  if(spiHandle->Instance==SPI1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a6d      	ldr	r2, [pc, #436]	; (80043a4 <HAL_SPI_MspInit+0x1e0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d142      	bne.n	800427a <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80041f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041f8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041fe:	f107 0320 	add.w	r3, r7, #32
 8004202:	4618      	mov	r0, r3
 8004204:	f003 f94e 	bl	80074a4 <HAL_RCCEx_PeriphCLKConfig>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800420e:	f7ff f87b 	bl	8003308 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004212:	4b65      	ldr	r3, [pc, #404]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 8004214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004218:	4a63      	ldr	r2, [pc, #396]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 800421a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800421e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004222:	4b61      	ldr	r3, [pc, #388]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 8004224:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004230:	4b5d      	ldr	r3, [pc, #372]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 8004232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004236:	4a5c      	ldr	r2, [pc, #368]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 8004238:	f043 0302 	orr.w	r3, r3, #2
 800423c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004240:	4b59      	ldr	r3, [pc, #356]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 8004242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800424e:	2338      	movs	r3, #56	; 0x38
 8004250:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004254:	2302      	movs	r3, #2
 8004256:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425a:	2300      	movs	r3, #0
 800425c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004266:	2305      	movs	r3, #5
 8004268:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800426c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004270:	4619      	mov	r1, r3
 8004272:	484e      	ldr	r0, [pc, #312]	; (80043ac <HAL_SPI_MspInit+0x1e8>)
 8004274:	f001 fef0 	bl	8006058 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004278:	e090      	b.n	800439c <HAL_SPI_MspInit+0x1d8>
  else if(spiHandle->Instance==SPI2)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a4c      	ldr	r2, [pc, #304]	; (80043b0 <HAL_SPI_MspInit+0x1ec>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d143      	bne.n	800430c <HAL_SPI_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8004284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004288:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800428a:	2300      	movs	r3, #0
 800428c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800428e:	f107 0320 	add.w	r3, r7, #32
 8004292:	4618      	mov	r0, r3
 8004294:	f003 f906 	bl	80074a4 <HAL_RCCEx_PeriphCLKConfig>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_SPI_MspInit+0xde>
      Error_Handler();
 800429e:	f7ff f833 	bl	8003308 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80042a2:	4b41      	ldr	r3, [pc, #260]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 80042a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042a8:	4a3f      	ldr	r2, [pc, #252]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 80042aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042b2:	4b3d      	ldr	r3, [pc, #244]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 80042b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042c0:	4b39      	ldr	r3, [pc, #228]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 80042c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042c6:	4a38      	ldr	r2, [pc, #224]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 80042c8:	f043 0302 	orr.w	r3, r3, #2
 80042cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042d0:	4b35      	ldr	r3, [pc, #212]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 80042d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80042de:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80042e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e6:	2302      	movs	r3, #2
 80042e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f2:	2300      	movs	r3, #0
 80042f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042f8:	2305      	movs	r3, #5
 80042fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004302:	4619      	mov	r1, r3
 8004304:	4829      	ldr	r0, [pc, #164]	; (80043ac <HAL_SPI_MspInit+0x1e8>)
 8004306:	f001 fea7 	bl	8006058 <HAL_GPIO_Init>
}
 800430a:	e047      	b.n	800439c <HAL_SPI_MspInit+0x1d8>
  else if(spiHandle->Instance==SPI3)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a28      	ldr	r2, [pc, #160]	; (80043b4 <HAL_SPI_MspInit+0x1f0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d142      	bne.n	800439c <HAL_SPI_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800431a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800431c:	2300      	movs	r3, #0
 800431e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004320:	f107 0320 	add.w	r3, r7, #32
 8004324:	4618      	mov	r0, r3
 8004326:	f003 f8bd 	bl	80074a4 <HAL_RCCEx_PeriphCLKConfig>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_SPI_MspInit+0x170>
      Error_Handler();
 8004330:	f7fe ffea 	bl	8003308 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004334:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 8004336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800433a:	4a1b      	ldr	r2, [pc, #108]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 800433c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004340:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004344:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 8004346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800434a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 8004354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004358:	4a13      	ldr	r2, [pc, #76]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 800435a:	f043 0304 	orr.w	r3, r3, #4
 800435e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004362:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <HAL_SPI_MspInit+0x1e4>)
 8004364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004370:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004374:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004378:	2302      	movs	r3, #2
 800437a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437e:	2300      	movs	r3, #0
 8004380:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004384:	2300      	movs	r3, #0
 8004386:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800438a:	2306      	movs	r3, #6
 800438c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004390:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004394:	4619      	mov	r1, r3
 8004396:	4808      	ldr	r0, [pc, #32]	; (80043b8 <HAL_SPI_MspInit+0x1f4>)
 8004398:	f001 fe5e 	bl	8006058 <HAL_GPIO_Init>
}
 800439c:	bf00      	nop
 800439e:	37f0      	adds	r7, #240	; 0xf0
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40013000 	.word	0x40013000
 80043a8:	58024400 	.word	0x58024400
 80043ac:	58020400 	.word	0x58020400
 80043b0:	40003800 	.word	0x40003800
 80043b4:	40003c00 	.word	0x40003c00
 80043b8:	58020800 	.word	0x58020800

080043bc <mpu9250_write_reg>:
  }
}

/* USER CODE BEGIN 1 */
void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	4603      	mov	r3, r0
 80043c4:	460a      	mov	r2, r1
 80043c6:	71fb      	strb	r3, [r7, #7]
 80043c8:	4613      	mov	r3, r2
 80043ca:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80043cc:	2200      	movs	r2, #0
 80043ce:	2110      	movs	r1, #16
 80043d0:	480b      	ldr	r0, [pc, #44]	; (8004400 <mpu9250_write_reg+0x44>)
 80043d2:	f001 fff1 	bl	80063b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 80043d6:	1df9      	adds	r1, r7, #7
 80043d8:	2364      	movs	r3, #100	; 0x64
 80043da:	2201      	movs	r2, #1
 80043dc:	4809      	ldr	r0, [pc, #36]	; (8004404 <mpu9250_write_reg+0x48>)
 80043de:	f004 fccf 	bl	8008d80 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 80043e2:	1db9      	adds	r1, r7, #6
 80043e4:	2364      	movs	r3, #100	; 0x64
 80043e6:	2201      	movs	r2, #1
 80043e8:	4806      	ldr	r0, [pc, #24]	; (8004404 <mpu9250_write_reg+0x48>)
 80043ea:	f004 fcc9 	bl	8008d80 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80043ee:	2201      	movs	r2, #1
 80043f0:	2110      	movs	r1, #16
 80043f2:	4803      	ldr	r0, [pc, #12]	; (8004400 <mpu9250_write_reg+0x44>)
 80043f4:	f001 ffe0 	bl	80063b8 <HAL_GPIO_WritePin>
}
 80043f8:	bf00      	nop
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	58020000 	.word	0x58020000
 8004404:	240006e8 	.word	0x240006e8

08004408 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	6039      	str	r1, [r7, #0]
 8004412:	71fb      	strb	r3, [r7, #7]
 8004414:	4613      	mov	r3, r2
 8004416:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800441e:	b2db      	uxtb	r3, r3
 8004420:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8004422:	2200      	movs	r2, #0
 8004424:	2110      	movs	r1, #16
 8004426:	480d      	ldr	r0, [pc, #52]	; (800445c <mpu9250_read_reg+0x54>)
 8004428:	f001 ffc6 	bl	80063b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 800442c:	f107 010f 	add.w	r1, r7, #15
 8004430:	2364      	movs	r3, #100	; 0x64
 8004432:	2201      	movs	r2, #1
 8004434:	480a      	ldr	r0, [pc, #40]	; (8004460 <mpu9250_read_reg+0x58>)
 8004436:	f004 fca3 	bl	8008d80 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, len, 100);
 800443a:	79bb      	ldrb	r3, [r7, #6]
 800443c:	b29a      	uxth	r2, r3
 800443e:	2364      	movs	r3, #100	; 0x64
 8004440:	6839      	ldr	r1, [r7, #0]
 8004442:	4807      	ldr	r0, [pc, #28]	; (8004460 <mpu9250_read_reg+0x58>)
 8004444:	f004 fe8e 	bl	8009164 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8004448:	2201      	movs	r2, #1
 800444a:	2110      	movs	r1, #16
 800444c:	4803      	ldr	r0, [pc, #12]	; (800445c <mpu9250_read_reg+0x54>)
 800444e:	f001 ffb3 	bl	80063b8 <HAL_GPIO_WritePin>
}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	58020000 	.word	0x58020000
 8004460:	240006e8 	.word	0x240006e8

08004464 <initStanley>:
 * */

#include "stanley_controller.h"

void initStanley(struct Stanley * stanley, float *delta_sat, float k, float k_soft)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004472:	edc7 0a00 	vstr	s1, [r7]
    stanley->sat[0] = delta_sat[0];
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	601a      	str	r2, [r3, #0]
    stanley->sat[1] = delta_sat[1];
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	605a      	str	r2, [r3, #4]
    stanley->psi = 0;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	60da      	str	r2, [r3, #12]
    stanley->k = k;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	611a      	str	r2, [r3, #16]
    stanley->k_soft = k_soft;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	615a      	str	r2, [r3, #20]
}
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
	...

080044a8 <calculateCrosstrackError>:

void calculateCrosstrackError(struct Stanley * stanley, struct Point * vehicle_pos, struct Point * p1, struct Point * p2){
 80044a8:	b580      	push	{r7, lr}
 80044aa:	ed2d 8b04 	vpush	{d8-d9}
 80044ae:	b08c      	sub	sp, #48	; 0x30
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
    float b;
    float c;
    float xp;
    float yp;

    float ex = p2->x - p1->x;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	ed93 7a00 	vldr	s14, [r3]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	edd3 7a00 	vldr	s15, [r3]
 80044c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044ca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float ey = p2->y - p1->y;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80044da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044de:	edc7 7a08 	vstr	s15, [r7, #32]

    // Angle of path frame
    stanley->ak = atan2(ey,ex);
 80044e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80044e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80044ea:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80044ee:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80044f2:	eeb0 1b46 	vmov.f64	d1, d6
 80044f6:	eeb0 0b47 	vmov.f64	d0, d7
 80044fa:	f00d f9cd 	bl	8011898 <atan2>
 80044fe:	eeb0 7b40 	vmov.f64	d7, d0
 8004502:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    if(isnormal(ex) && isnormal(ey)){
 800450c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004510:	eef0 7ae7 	vabs.f32	s15, s15
 8004514:	ed9f 7abd 	vldr	s14, [pc, #756]	; 800480c <calculateCrosstrackError+0x364>
 8004518:	eef4 7a47 	vcmp.f32	s15, s14
 800451c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004520:	bf8c      	ite	hi
 8004522:	2301      	movhi	r3, #1
 8004524:	2300      	movls	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	f083 0301 	eor.w	r3, r3, #1
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	b2da      	uxtb	r2, r3
 8004534:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004538:	eef0 7ae7 	vabs.f32	s15, s15
 800453c:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8004810 <calculateCrosstrackError+0x368>
 8004540:	eef4 7a47 	vcmp.f32	s15, s14
 8004544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004548:	bfb4      	ite	lt
 800454a:	2301      	movlt	r3, #1
 800454c:	2300      	movge	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f083 0301 	eor.w	r3, r3, #1
 8004554:	b2db      	uxtb	r3, r3
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	b2db      	uxtb	r3, r3
 800455c:	4013      	ands	r3, r2
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d074      	beq.n	800464e <calculateCrosstrackError+0x1a6>
 8004564:	edd7 7a08 	vldr	s15, [r7, #32]
 8004568:	eef0 7ae7 	vabs.f32	s15, s15
 800456c:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 800480c <calculateCrosstrackError+0x364>
 8004570:	eef4 7a47 	vcmp.f32	s15, s14
 8004574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004578:	bf8c      	ite	hi
 800457a:	2301      	movhi	r3, #1
 800457c:	2300      	movls	r3, #0
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f083 0301 	eor.w	r3, r3, #1
 8004584:	b2db      	uxtb	r3, r3
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	b2da      	uxtb	r2, r3
 800458c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004590:	eef0 7ae7 	vabs.f32	s15, s15
 8004594:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8004810 <calculateCrosstrackError+0x368>
 8004598:	eef4 7a47 	vcmp.f32	s15, s14
 800459c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a0:	bfb4      	ite	lt
 80045a2:	2301      	movlt	r3, #1
 80045a4:	2300      	movge	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f083 0301 	eor.w	r3, r3, #1
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	4013      	ands	r3, r2
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d048      	beq.n	800464e <calculateCrosstrackError+0x1a6>
        // Slope of path
        m1 = ex/ey;
 80045bc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80045c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80045c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045c8:	edc7 7a07 	vstr	s15, [r7, #28]
        b = p2->x - m1*p2->y;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	ed93 7a00 	vldr	s14, [r3]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80045d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80045dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045e4:	edc7 7a06 	vstr	s15, [r7, #24]

        // Slope of normal line to the path
        m2 = -1/m1;
 80045e8:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80045ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80045f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045f4:	edc7 7a05 	vstr	s15, [r7, #20]
        c = vehicle_pos->x - m2*vehicle_pos->y;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	ed93 7a00 	vldr	s14, [r3]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	edd3 6a01 	vldr	s13, [r3, #4]
 8004604:	edd7 7a05 	vldr	s15, [r7, #20]
 8004608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800460c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004610:	edc7 7a04 	vstr	s15, [r7, #16]

        // Obtain intersection point
        yp = (c - b)/(m1 - m2);
 8004614:	ed97 7a04 	vldr	s14, [r7, #16]
 8004618:	edd7 7a06 	vldr	s15, [r7, #24]
 800461c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004620:	ed97 7a07 	vldr	s14, [r7, #28]
 8004624:	edd7 7a05 	vldr	s15, [r7, #20]
 8004628:	ee37 7a67 	vsub.f32	s14, s14, s15
 800462c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004630:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        xp = m1*yp + b;
 8004634:	ed97 7a07 	vldr	s14, [r7, #28]
 8004638:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800463c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004640:	ed97 7a06 	vldr	s14, [r7, #24]
 8004644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004648:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800464c:	e06f      	b.n	800472e <calculateCrosstrackError+0x286>

    } else {
        if(!isnormal(ex)){
 800464e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004652:	eef0 7ae7 	vabs.f32	s15, s15
 8004656:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800480c <calculateCrosstrackError+0x364>
 800465a:	eef4 7a47 	vcmp.f32	s15, s14
 800465e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004662:	bf8c      	ite	hi
 8004664:	2301      	movhi	r3, #1
 8004666:	2300      	movls	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f083 0301 	eor.w	r3, r3, #1
 800466e:	b2db      	uxtb	r3, r3
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	b2db      	uxtb	r3, r3
 8004676:	f083 0301 	eor.w	r3, r3, #1
 800467a:	b2da      	uxtb	r2, r3
 800467c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004680:	eef0 7ae7 	vabs.f32	s15, s15
 8004684:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8004810 <calculateCrosstrackError+0x368>
 8004688:	eef4 7a47 	vcmp.f32	s15, s14
 800468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004690:	bfb4      	ite	lt
 8004692:	2301      	movlt	r3, #1
 8004694:	2300      	movge	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f083 0301 	eor.w	r3, r3, #1
 800469c:	b2db      	uxtb	r3, r3
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f083 0301 	eor.w	r3, r3, #1
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	4313      	orrs	r3, r2
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <calculateCrosstrackError+0x216>
            yp = vehicle_pos->y;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	62bb      	str	r3, [r7, #40]	; 0x28
            xp = p2->x; // or x1
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        if(!isnormal(ey)){
 80046be:	edd7 7a08 	vldr	s15, [r7, #32]
 80046c2:	eef0 7ae7 	vabs.f32	s15, s15
 80046c6:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800480c <calculateCrosstrackError+0x364>
 80046ca:	eef4 7a47 	vcmp.f32	s15, s14
 80046ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d2:	bf8c      	ite	hi
 80046d4:	2301      	movhi	r3, #1
 80046d6:	2300      	movls	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	f083 0301 	eor.w	r3, r3, #1
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f083 0301 	eor.w	r3, r3, #1
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80046f0:	eef0 7ae7 	vabs.f32	s15, s15
 80046f4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004810 <calculateCrosstrackError+0x368>
 80046f8:	eef4 7a47 	vcmp.f32	s15, s14
 80046fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004700:	bfb4      	ite	lt
 8004702:	2301      	movlt	r3, #1
 8004704:	2300      	movge	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	f083 0301 	eor.w	r3, r3, #1
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f083 0301 	eor.w	r3, r3, #1
 8004718:	b2db      	uxtb	r3, r3
 800471a:	4313      	orrs	r3, r2
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <calculateCrosstrackError+0x286>
            yp = p2->y; // or y1
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	62bb      	str	r3, [r7, #40]	; 0x28
            xp = vehicle_pos->x;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    // Along-track and crosstrack errors in path frame
    stanley->e_a = (p2->x - xp) * cos(stanley->ak) + (p2->y - yp) * sin(stanley->ak); // along-track error
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	ed93 7a00 	vldr	s14, [r3]
 8004734:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800473c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004746:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800474a:	eeb0 0b47 	vmov.f64	d0, d7
 800474e:	f00d f8a7 	bl	80118a0 <cos>
 8004752:	eeb0 7b40 	vmov.f64	d7, d0
 8004756:	ee28 8b07 	vmul.f64	d8, d8, d7
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004760:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004768:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004772:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004776:	eeb0 0b47 	vmov.f64	d0, d7
 800477a:	f00d f8dd 	bl	8011938 <sin>
 800477e:	eeb0 7b40 	vmov.f64	d7, d0
 8004782:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004786:	ee38 7b07 	vadd.f64	d7, d8, d7
 800478a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	edc3 7a06 	vstr	s15, [r3, #24]
    stanley->e_c = -(vehicle_pos->x - xp) * sin(stanley->ak) + (vehicle_pos->y - yp) * cos(stanley->ak); // crosstrack error
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	ed93 7a00 	vldr	s14, [r3]
 800479a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800479e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047a2:	eef1 7a67 	vneg.f32	s15, s15
 80047a6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80047b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047b4:	eeb0 0b47 	vmov.f64	d0, d7
 80047b8:	f00d f8be 	bl	8011938 <sin>
 80047bc:	eeb0 7b40 	vmov.f64	d7, d0
 80047c0:	ee28 8b07 	vmul.f64	d8, d8, d7
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80047ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80047ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047d2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80047dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047e0:	eeb0 0b47 	vmov.f64	d0, d7
 80047e4:	f00d f85c 	bl	80118a0 <cos>
 80047e8:	eeb0 7b40 	vmov.f64	d7, d0
 80047ec:	ee29 7b07 	vmul.f64	d7, d9, d7
 80047f0:	ee38 7b07 	vadd.f64	d7, d8, d7
 80047f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80047fe:	bf00      	nop
 8004800:	3730      	adds	r7, #48	; 0x30
 8004802:	46bd      	mov	sp, r7
 8004804:	ecbd 8b04 	vpop	{d8-d9}
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	7f7fffff 	.word	0x7f7fffff
 8004810:	00800000 	.word	0x00800000

08004814 <setYawAngle>:

void setYawAngle(struct Stanley * stanley, float psi){
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	ed87 0a00 	vstr	s0, [r7]
    stanley->psi = psi;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	60da      	str	r2, [r3, #12]
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	0000      	movs	r0, r0
 8004834:	0000      	movs	r0, r0
	...

08004838 <calculateSteering>:

void calculateSteering(struct Stanley * stanley, float vel, uint8_t precision){
 8004838:	b580      	push	{r7, lr}
 800483a:	ed2d 8b02 	vpush	{d8}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	ed87 0a02 	vstr	s0, [r7, #8]
 8004848:	460b      	mov	r3, r1
 800484a:	71fb      	strb	r3, [r7, #7]
    stanley->vel = vel;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	621a      	str	r2, [r3, #32]

    // PI error fixed due to rounding in ak_ angle when the path is vertical that makes it greater than M_PI
    double PI = M_PI + 1e-3;
 8004852:	a381      	add	r3, pc, #516	; (adr r3, 8004a58 <calculateSteering+0x220>)
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if(stanley->ak >= PI/2 && stanley->ak <=  PI && stanley->psi <= -PI/2 && stanley->psi >= - PI){
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004862:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004866:	ed97 5b06 	vldr	d5, [r7, #24]
 800486a:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800486e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004872:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487a:	db3c      	blt.n	80048f6 <calculateSteering+0xbe>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004882:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004886:	ed97 6b06 	vldr	d6, [r7, #24]
 800488a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800488e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004892:	db30      	blt.n	80048f6 <calculateSteering+0xbe>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	edd3 7a03 	vldr	s15, [r3, #12]
 800489a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800489e:	ed97 7b06 	vldr	d7, [r7, #24]
 80048a2:	eeb1 5b47 	vneg.f64	d5, d7
 80048a6:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80048aa:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80048ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80048b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b6:	d81e      	bhi.n	80048f6 <calculateSteering+0xbe>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80048be:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80048c2:	ed97 7b06 	vldr	d7, [r7, #24]
 80048c6:	eeb1 7b47 	vneg.f64	d7, d7
 80048ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80048ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d2:	db10      	blt.n	80048f6 <calculateSteering+0xbe>
        stanley->psi = stanley->psi + PI*2;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80048da:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80048de:	ed97 7b06 	vldr	d7, [r7, #24]
 80048e2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80048e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80048ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	edc3 7a03 	vstr	s15, [r3, #12]
 80048f4:	e04b      	b.n	800498e <calculateSteering+0x156>
    } else if (stanley->ak < -PI/2 && stanley->ak > - PI && stanley->psi > PI/2 && stanley->psi <  PI){
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80048fc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004900:	ed97 7b06 	vldr	d7, [r7, #24]
 8004904:	eeb1 5b47 	vneg.f64	d5, d7
 8004908:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800490c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004910:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004918:	d539      	bpl.n	800498e <calculateSteering+0x156>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004920:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004924:	ed97 7b06 	vldr	d7, [r7, #24]
 8004928:	eeb1 7b47 	vneg.f64	d7, d7
 800492c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004934:	dd2b      	ble.n	800498e <calculateSteering+0x156>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	edd3 7a03 	vldr	s15, [r3, #12]
 800493c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004940:	ed97 5b06 	vldr	d5, [r7, #24]
 8004944:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004948:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800494c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004954:	dd1b      	ble.n	800498e <calculateSteering+0x156>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	edd3 7a03 	vldr	s15, [r3, #12]
 800495c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004960:	ed97 6b06 	vldr	d6, [r7, #24]
 8004964:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496c:	dd0f      	ble.n	800498e <calculateSteering+0x156>
        stanley->psi = stanley->psi - PI*2;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	edd3 7a03 	vldr	s15, [r3, #12]
 8004974:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004978:	ed97 7b06 	vldr	d7, [r7, #24]
 800497c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004980:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004984:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    float phi = stanley->psi - stanley->ak;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	ed93 7a03 	vldr	s14, [r3, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800499a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800499e:	edc7 7a05 	vstr	s15, [r7, #20]
    stanley->delta = phi + atan2(stanley->k*stanley->e_c,stanley->k_soft + stanley->vel);
 80049a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80049a6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	ed93 7a04 	vldr	s14, [r3, #16]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80049b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	ed93 6a05 	vldr	s12, [r3, #20]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	edd3 6a08 	vldr	s13, [r3, #32]
 80049ca:	ee76 6a26 	vadd.f32	s13, s12, s13
 80049ce:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80049d2:	eeb0 1b46 	vmov.f64	d1, d6
 80049d6:	eeb0 0b47 	vmov.f64	d0, d7
 80049da:	f00c ff5d 	bl	8011898 <atan2>
 80049de:	eeb0 7b40 	vmov.f64	d7, d0
 80049e2:	ee38 7b07 	vadd.f64	d7, d8, d7
 80049e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	edc3 7a02 	vstr	s15, [r3, #8]

    // You want to reduce psi by delta so ...
    stanley->delta = -stanley->delta;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80049f6:	eef1 7a67 	vneg.f32	s15, s15
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	edc3 7a02 	vstr	s15, [r3, #8]

    stanley->delta = stanley->delta < stanley->sat[1] ? stanley->sat[1] : stanley->delta;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a14:	d502      	bpl.n	8004a1c <calculateSteering+0x1e4>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	e001      	b.n	8004a20 <calculateSteering+0x1e8>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	6093      	str	r3, [r2, #8]
    stanley->delta = stanley->delta > stanley->sat[0] ? stanley->sat[0] : stanley->delta;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	edd3 7a00 	vldr	s15, [r3]
 8004a30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a38:	dd02      	ble.n	8004a40 <calculateSteering+0x208>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	e001      	b.n	8004a44 <calculateSteering+0x20c>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	6093      	str	r3, [r2, #8]
 8004a48:	bf00      	nop
 8004a4a:	3720      	adds	r7, #32
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	ecbd 8b02 	vpop	{d8}
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	f3af 8000 	nop.w
 8004a58:	9dfe8b4d 	.word	0x9dfe8b4d
 8004a5c:	40092407 	.word	0x40092407

08004a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a66:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <HAL_MspInit+0x38>)
 8004a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a6c:	4a0a      	ldr	r2, [pc, #40]	; (8004a98 <HAL_MspInit+0x38>)
 8004a6e:	f043 0302 	orr.w	r3, r3, #2
 8004a72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004a76:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <HAL_MspInit+0x38>)
 8004a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	607b      	str	r3, [r7, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a84:	2200      	movs	r2, #0
 8004a86:	210f      	movs	r1, #15
 8004a88:	f06f 0001 	mvn.w	r0, #1
 8004a8c:	f000 fd45 	bl	800551a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	58024400 	.word	0x58024400

08004a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004aa0:	e7fe      	b.n	8004aa0 <NMI_Handler+0x4>

08004aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004aa6:	e7fe      	b.n	8004aa6 <HardFault_Handler+0x4>

08004aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004aac:	e7fe      	b.n	8004aac <MemManage_Handler+0x4>

08004aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ab2:	e7fe      	b.n	8004ab2 <BusFault_Handler+0x4>

08004ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ab8:	e7fe      	b.n	8004ab8 <UsageFault_Handler+0x4>

08004aba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004aba:	b480      	push	{r7}
 8004abc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004abe:	bf00      	nop
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004acc:	f000 fc18 	bl	8005300 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004ad0:	f009 fc1c 	bl	800e30c <xTaskGetSchedulerState>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d001      	beq.n	8004ade <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004ada:	f007 ffcd 	bl	800ca78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	af00      	add	r7, sp, #0
	return 1;
 8004ae6:	2301      	movs	r3, #1
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <_kill>:

int _kill(int pid, int sig)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b082      	sub	sp, #8
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004afc:	f00a ff3e 	bl	800f97c <__errno>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2216      	movs	r2, #22
 8004b04:	601a      	str	r2, [r3, #0]
	return -1;
 8004b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <_exit>:

void _exit (int status)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004b1a:	f04f 31ff 	mov.w	r1, #4294967295
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff ffe7 	bl	8004af2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004b24:	e7fe      	b.n	8004b24 <_exit+0x12>

08004b26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b086      	sub	sp, #24
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	e00a      	b.n	8004b4e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004b38:	f3af 8000 	nop.w
 8004b3c:	4601      	mov	r1, r0
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	60ba      	str	r2, [r7, #8]
 8004b44:	b2ca      	uxtb	r2, r1
 8004b46:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	dbf0      	blt.n	8004b38 <_read+0x12>
	}

return len;
 8004b56:	687b      	ldr	r3, [r7, #4]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e009      	b.n	8004b86 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	60ba      	str	r2, [r7, #8]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fa0c 	bl	8003f98 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	3301      	adds	r3, #1
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	dbf1      	blt.n	8004b72 <_write+0x12>
	}
	return len;
 8004b8e:	687b      	ldr	r3, [r7, #4]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <_close>:

int _close(int file)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	return -1;
 8004ba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bc0:	605a      	str	r2, [r3, #4]
	return 0;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <_isatty>:

int _isatty(int file)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
	return 1;
 8004bd8:	2301      	movs	r3, #1
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
	return 0;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c08:	4a14      	ldr	r2, [pc, #80]	; (8004c5c <_sbrk+0x5c>)
 8004c0a:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <_sbrk+0x60>)
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c14:	4b13      	ldr	r3, [pc, #76]	; (8004c64 <_sbrk+0x64>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d102      	bne.n	8004c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c1c:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <_sbrk+0x64>)
 8004c1e:	4a12      	ldr	r2, [pc, #72]	; (8004c68 <_sbrk+0x68>)
 8004c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c22:	4b10      	ldr	r3, [pc, #64]	; (8004c64 <_sbrk+0x64>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4413      	add	r3, r2
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d207      	bcs.n	8004c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c30:	f00a fea4 	bl	800f97c <__errno>
 8004c34:	4603      	mov	r3, r0
 8004c36:	220c      	movs	r2, #12
 8004c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3e:	e009      	b.n	8004c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c40:	4b08      	ldr	r3, [pc, #32]	; (8004c64 <_sbrk+0x64>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c46:	4b07      	ldr	r3, [pc, #28]	; (8004c64 <_sbrk+0x64>)
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	4a05      	ldr	r2, [pc, #20]	; (8004c64 <_sbrk+0x64>)
 8004c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c52:	68fb      	ldr	r3, [r7, #12]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	24080000 	.word	0x24080000
 8004c60:	00000400 	.word	0x00000400
 8004c64:	24000880 	.word	0x24000880
 8004c68:	240054e8 	.word	0x240054e8

08004c6c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08e      	sub	sp, #56	; 0x38
 8004c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	605a      	str	r2, [r3, #4]
 8004c7c:	609a      	str	r2, [r3, #8]
 8004c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c80:	f107 031c 	add.w	r3, r7, #28
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	605a      	str	r2, [r3, #4]
 8004c8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c8c:	463b      	mov	r3, r7
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	605a      	str	r2, [r3, #4]
 8004c94:	609a      	str	r2, [r3, #8]
 8004c96:	60da      	str	r2, [r3, #12]
 8004c98:	611a      	str	r2, [r3, #16]
 8004c9a:	615a      	str	r2, [r3, #20]
 8004c9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004c9e:	4b2d      	ldr	r3, [pc, #180]	; (8004d54 <MX_TIM2_Init+0xe8>)
 8004ca0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ca4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8004ca6:	4b2b      	ldr	r3, [pc, #172]	; (8004d54 <MX_TIM2_Init+0xe8>)
 8004ca8:	2248      	movs	r2, #72	; 0x48
 8004caa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cac:	4b29      	ldr	r3, [pc, #164]	; (8004d54 <MX_TIM2_Init+0xe8>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004cb2:	4b28      	ldr	r3, [pc, #160]	; (8004d54 <MX_TIM2_Init+0xe8>)
 8004cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cba:	4b26      	ldr	r3, [pc, #152]	; (8004d54 <MX_TIM2_Init+0xe8>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004cc0:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <MX_TIM2_Init+0xe8>)
 8004cc2:	2280      	movs	r2, #128	; 0x80
 8004cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004cc6:	4823      	ldr	r0, [pc, #140]	; (8004d54 <MX_TIM2_Init+0xe8>)
 8004cc8:	f004 fef9 	bl	8009abe <HAL_TIM_Base_Init>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004cd2:	f7fe fb19 	bl	8003308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cda:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004cdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	481c      	ldr	r0, [pc, #112]	; (8004d54 <MX_TIM2_Init+0xe8>)
 8004ce4:	f005 f9c6 	bl	800a074 <HAL_TIM_ConfigClockSource>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004cee:	f7fe fb0b 	bl	8003308 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004cf2:	4818      	ldr	r0, [pc, #96]	; (8004d54 <MX_TIM2_Init+0xe8>)
 8004cf4:	f004 ff3a 	bl	8009b6c <HAL_TIM_PWM_Init>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004cfe:	f7fe fb03 	bl	8003308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d0a:	f107 031c 	add.w	r3, r7, #28
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4810      	ldr	r0, [pc, #64]	; (8004d54 <MX_TIM2_Init+0xe8>)
 8004d12:	f005 fedb 	bl	800aacc <HAL_TIMEx_MasterConfigSynchronization>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004d1c:	f7fe faf4 	bl	8003308 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d20:	2360      	movs	r3, #96	; 0x60
 8004d22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d30:	463b      	mov	r3, r7
 8004d32:	2200      	movs	r2, #0
 8004d34:	4619      	mov	r1, r3
 8004d36:	4807      	ldr	r0, [pc, #28]	; (8004d54 <MX_TIM2_Init+0xe8>)
 8004d38:	f005 f888 	bl	8009e4c <HAL_TIM_PWM_ConfigChannel>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004d42:	f7fe fae1 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004d46:	4803      	ldr	r0, [pc, #12]	; (8004d54 <MX_TIM2_Init+0xe8>)
 8004d48:	f000 f8b6 	bl	8004eb8 <HAL_TIM_MspPostInit>

}
 8004d4c:	bf00      	nop
 8004d4e:	3738      	adds	r7, #56	; 0x38
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	24000884 	.word	0x24000884

08004d58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08e      	sub	sp, #56	; 0x38
 8004d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	605a      	str	r2, [r3, #4]
 8004d68:	609a      	str	r2, [r3, #8]
 8004d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d6c:	f107 031c 	add.w	r3, r7, #28
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	605a      	str	r2, [r3, #4]
 8004d76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d78:	463b      	mov	r3, r7
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	605a      	str	r2, [r3, #4]
 8004d80:	609a      	str	r2, [r3, #8]
 8004d82:	60da      	str	r2, [r3, #12]
 8004d84:	611a      	str	r2, [r3, #16]
 8004d86:	615a      	str	r2, [r3, #20]
 8004d88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004d8a:	4b2d      	ldr	r3, [pc, #180]	; (8004e40 <MX_TIM3_Init+0xe8>)
 8004d8c:	4a2d      	ldr	r2, [pc, #180]	; (8004e44 <MX_TIM3_Init+0xec>)
 8004d8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8004d90:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <MX_TIM3_Init+0xe8>)
 8004d92:	2248      	movs	r2, #72	; 0x48
 8004d94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d96:	4b2a      	ldr	r3, [pc, #168]	; (8004e40 <MX_TIM3_Init+0xe8>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004d9c:	4b28      	ldr	r3, [pc, #160]	; (8004e40 <MX_TIM3_Init+0xe8>)
 8004d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004da2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004da4:	4b26      	ldr	r3, [pc, #152]	; (8004e40 <MX_TIM3_Init+0xe8>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004daa:	4b25      	ldr	r3, [pc, #148]	; (8004e40 <MX_TIM3_Init+0xe8>)
 8004dac:	2280      	movs	r2, #128	; 0x80
 8004dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004db0:	4823      	ldr	r0, [pc, #140]	; (8004e40 <MX_TIM3_Init+0xe8>)
 8004db2:	f004 fe84 	bl	8009abe <HAL_TIM_Base_Init>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004dbc:	f7fe faa4 	bl	8003308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004dca:	4619      	mov	r1, r3
 8004dcc:	481c      	ldr	r0, [pc, #112]	; (8004e40 <MX_TIM3_Init+0xe8>)
 8004dce:	f005 f951 	bl	800a074 <HAL_TIM_ConfigClockSource>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004dd8:	f7fe fa96 	bl	8003308 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004ddc:	4818      	ldr	r0, [pc, #96]	; (8004e40 <MX_TIM3_Init+0xe8>)
 8004dde:	f004 fec5 	bl	8009b6c <HAL_TIM_PWM_Init>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004de8:	f7fe fa8e 	bl	8003308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dec:	2300      	movs	r3, #0
 8004dee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004df0:	2300      	movs	r3, #0
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004df4:	f107 031c 	add.w	r3, r7, #28
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4811      	ldr	r0, [pc, #68]	; (8004e40 <MX_TIM3_Init+0xe8>)
 8004dfc:	f005 fe66 	bl	800aacc <HAL_TIMEx_MasterConfigSynchronization>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004e06:	f7fe fa7f 	bl	8003308 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e0a:	2360      	movs	r3, #96	; 0x60
 8004e0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e1a:	463b      	mov	r3, r7
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4807      	ldr	r0, [pc, #28]	; (8004e40 <MX_TIM3_Init+0xe8>)
 8004e22:	f005 f813 	bl	8009e4c <HAL_TIM_PWM_ConfigChannel>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004e2c:	f7fe fa6c 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004e30:	4803      	ldr	r0, [pc, #12]	; (8004e40 <MX_TIM3_Init+0xe8>)
 8004e32:	f000 f841 	bl	8004eb8 <HAL_TIM_MspPostInit>

}
 8004e36:	bf00      	nop
 8004e38:	3738      	adds	r7, #56	; 0x38
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	240008d0 	.word	0x240008d0
 8004e44:	40000400 	.word	0x40000400

08004e48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e58:	d10f      	bne.n	8004e7a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e5a:	4b15      	ldr	r3, [pc, #84]	; (8004eb0 <HAL_TIM_Base_MspInit+0x68>)
 8004e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e60:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <HAL_TIM_Base_MspInit+0x68>)
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e6a:	4b11      	ldr	r3, [pc, #68]	; (8004eb0 <HAL_TIM_Base_MspInit+0x68>)
 8004e6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004e78:	e013      	b.n	8004ea2 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM3)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a0d      	ldr	r2, [pc, #52]	; (8004eb4 <HAL_TIM_Base_MspInit+0x6c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d10e      	bne.n	8004ea2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e84:	4b0a      	ldr	r3, [pc, #40]	; (8004eb0 <HAL_TIM_Base_MspInit+0x68>)
 8004e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e8a:	4a09      	ldr	r2, [pc, #36]	; (8004eb0 <HAL_TIM_Base_MspInit+0x68>)
 8004e8c:	f043 0302 	orr.w	r3, r3, #2
 8004e90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e94:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <HAL_TIM_Base_MspInit+0x68>)
 8004e96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	60bb      	str	r3, [r7, #8]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
}
 8004ea2:	bf00      	nop
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	58024400 	.word	0x58024400
 8004eb4:	40000400 	.word	0x40000400

08004eb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08a      	sub	sp, #40	; 0x28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec0:	f107 0314 	add.w	r3, r7, #20
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	605a      	str	r2, [r3, #4]
 8004eca:	609a      	str	r2, [r3, #8]
 8004ecc:	60da      	str	r2, [r3, #12]
 8004ece:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed8:	d120      	bne.n	8004f1c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eda:	4b24      	ldr	r3, [pc, #144]	; (8004f6c <HAL_TIM_MspPostInit+0xb4>)
 8004edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ee0:	4a22      	ldr	r2, [pc, #136]	; (8004f6c <HAL_TIM_MspPostInit+0xb4>)
 8004ee2:	f043 0301 	orr.w	r3, r3, #1
 8004ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004eea:	4b20      	ldr	r3, [pc, #128]	; (8004f6c <HAL_TIM_MspPostInit+0xb4>)
 8004eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004efe:	2302      	movs	r3, #2
 8004f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f06:	2300      	movs	r3, #0
 8004f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f0e:	f107 0314 	add.w	r3, r7, #20
 8004f12:	4619      	mov	r1, r3
 8004f14:	4816      	ldr	r0, [pc, #88]	; (8004f70 <HAL_TIM_MspPostInit+0xb8>)
 8004f16:	f001 f89f 	bl	8006058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004f1a:	e023      	b.n	8004f64 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a14      	ldr	r2, [pc, #80]	; (8004f74 <HAL_TIM_MspPostInit+0xbc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d11e      	bne.n	8004f64 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f26:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <HAL_TIM_MspPostInit+0xb4>)
 8004f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f2c:	4a0f      	ldr	r2, [pc, #60]	; (8004f6c <HAL_TIM_MspPostInit+0xb4>)
 8004f2e:	f043 0301 	orr.w	r3, r3, #1
 8004f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f36:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <HAL_TIM_MspPostInit+0xb4>)
 8004f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004f44:	2340      	movs	r3, #64	; 0x40
 8004f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f50:	2300      	movs	r3, #0
 8004f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f54:	2302      	movs	r3, #2
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f58:	f107 0314 	add.w	r3, r7, #20
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4804      	ldr	r0, [pc, #16]	; (8004f70 <HAL_TIM_MspPostInit+0xb8>)
 8004f60:	f001 f87a 	bl	8006058 <HAL_GPIO_Init>
}
 8004f64:	bf00      	nop
 8004f66:	3728      	adds	r7, #40	; 0x28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	58024400 	.word	0x58024400
 8004f70:	58020000 	.word	0x58020000
 8004f74:	40000400 	.word	0x40000400

08004f78 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004f7c:	4b22      	ldr	r3, [pc, #136]	; (8005008 <MX_USART3_UART_Init+0x90>)
 8004f7e:	4a23      	ldr	r2, [pc, #140]	; (800500c <MX_USART3_UART_Init+0x94>)
 8004f80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004f82:	4b21      	ldr	r3, [pc, #132]	; (8005008 <MX_USART3_UART_Init+0x90>)
 8004f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004f8a:	4b1f      	ldr	r3, [pc, #124]	; (8005008 <MX_USART3_UART_Init+0x90>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004f90:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <MX_USART3_UART_Init+0x90>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004f96:	4b1c      	ldr	r3, [pc, #112]	; (8005008 <MX_USART3_UART_Init+0x90>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004f9c:	4b1a      	ldr	r3, [pc, #104]	; (8005008 <MX_USART3_UART_Init+0x90>)
 8004f9e:	220c      	movs	r2, #12
 8004fa0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fa2:	4b19      	ldr	r3, [pc, #100]	; (8005008 <MX_USART3_UART_Init+0x90>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fa8:	4b17      	ldr	r3, [pc, #92]	; (8005008 <MX_USART3_UART_Init+0x90>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fae:	4b16      	ldr	r3, [pc, #88]	; (8005008 <MX_USART3_UART_Init+0x90>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004fb4:	4b14      	ldr	r3, [pc, #80]	; (8005008 <MX_USART3_UART_Init+0x90>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fba:	4b13      	ldr	r3, [pc, #76]	; (8005008 <MX_USART3_UART_Init+0x90>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004fc0:	4811      	ldr	r0, [pc, #68]	; (8005008 <MX_USART3_UART_Init+0x90>)
 8004fc2:	f005 fe11 	bl	800abe8 <HAL_UART_Init>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004fcc:	f7fe f99c 	bl	8003308 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	480d      	ldr	r0, [pc, #52]	; (8005008 <MX_USART3_UART_Init+0x90>)
 8004fd4:	f006 fe44 	bl	800bc60 <HAL_UARTEx_SetTxFifoThreshold>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004fde:	f7fe f993 	bl	8003308 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4808      	ldr	r0, [pc, #32]	; (8005008 <MX_USART3_UART_Init+0x90>)
 8004fe6:	f006 fe79 	bl	800bcdc <HAL_UARTEx_SetRxFifoThreshold>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004ff0:	f7fe f98a 	bl	8003308 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004ff4:	4804      	ldr	r0, [pc, #16]	; (8005008 <MX_USART3_UART_Init+0x90>)
 8004ff6:	f006 fdfa 	bl	800bbee <HAL_UARTEx_DisableFifoMode>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005000:	f7fe f982 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005004:	bf00      	nop
 8005006:	bd80      	pop	{r7, pc}
 8005008:	2400091c 	.word	0x2400091c
 800500c:	40004800 	.word	0x40004800

08005010 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b0b8      	sub	sp, #224	; 0xe0
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005018:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	605a      	str	r2, [r3, #4]
 8005022:	609a      	str	r2, [r3, #8]
 8005024:	60da      	str	r2, [r3, #12]
 8005026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005028:	f107 0310 	add.w	r3, r7, #16
 800502c:	22bc      	movs	r2, #188	; 0xbc
 800502e:	2100      	movs	r1, #0
 8005030:	4618      	mov	r0, r3
 8005032:	f00a fbfb 	bl	800f82c <memset>
  if(uartHandle->Instance==USART3)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a25      	ldr	r2, [pc, #148]	; (80050d0 <HAL_UART_MspInit+0xc0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d142      	bne.n	80050c6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005040:	2302      	movs	r3, #2
 8005042:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005044:	2300      	movs	r3, #0
 8005046:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800504a:	f107 0310 	add.w	r3, r7, #16
 800504e:	4618      	mov	r0, r3
 8005050:	f002 fa28 	bl	80074a4 <HAL_RCCEx_PeriphCLKConfig>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800505a:	f7fe f955 	bl	8003308 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800505e:	4b1d      	ldr	r3, [pc, #116]	; (80050d4 <HAL_UART_MspInit+0xc4>)
 8005060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005064:	4a1b      	ldr	r2, [pc, #108]	; (80050d4 <HAL_UART_MspInit+0xc4>)
 8005066:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800506a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800506e:	4b19      	ldr	r3, [pc, #100]	; (80050d4 <HAL_UART_MspInit+0xc4>)
 8005070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005074:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800507c:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <HAL_UART_MspInit+0xc4>)
 800507e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005082:	4a14      	ldr	r2, [pc, #80]	; (80050d4 <HAL_UART_MspInit+0xc4>)
 8005084:	f043 0308 	orr.w	r3, r3, #8
 8005088:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800508c:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <HAL_UART_MspInit+0xc4>)
 800508e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	60bb      	str	r3, [r7, #8]
 8005098:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800509a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800509e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a2:	2302      	movs	r3, #2
 80050a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a8:	2300      	movs	r3, #0
 80050aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ae:	2300      	movs	r3, #0
 80050b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80050b4:	2307      	movs	r3, #7
 80050b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80050be:	4619      	mov	r1, r3
 80050c0:	4805      	ldr	r0, [pc, #20]	; (80050d8 <HAL_UART_MspInit+0xc8>)
 80050c2:	f000 ffc9 	bl	8006058 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80050c6:	bf00      	nop
 80050c8:	37e0      	adds	r7, #224	; 0xe0
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40004800 	.word	0x40004800
 80050d4:	58024400 	.word	0x58024400
 80050d8:	58020c00 	.word	0x58020c00

080050dc <init_waypoint_buffer>:
#include "waypoints.h"
#include <stdio.h>

void init_waypoint_buffer(struct waypoint_buffer * wp_buf) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
    clean(wp_buf);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f859 	bl	800519c <clean>
}
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <add_wp>:

void add_wp(struct waypoint_buffer * wp_buf, float x, float y) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8005100:	edc7 0a01 	vstr	s1, [r7, #4]
    if (wp_buf->size < MAX_WP) {
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b31      	cmp	r3, #49	; 0x31
 800510a:	dc1d      	bgt.n	8005148 <add_wp+0x54>
        struct waypoint wp = {x, y};
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	617b      	str	r3, [r7, #20]
        wp_buf->wp_buf[wp_buf->size] = wp;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4413      	add	r3, r2
 800511e:	3304      	adds	r3, #4
 8005120:	f107 0210 	add.w	r2, r7, #16
 8005124:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005128:	e883 0003 	stmia.w	r3, {r0, r1}
        wp_buf->size++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	601a      	str	r2, [r3, #0]
        if(wp_buf->size == 2)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d107      	bne.n	800514e <add_wp+0x5a>
            wp_buf->to = 1;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    } else {
        printf("Error: Waypoint buffer is full.\n");
    }
}
 8005146:	e002      	b.n	800514e <add_wp+0x5a>
        printf("Error: Waypoint buffer is full.\n");
 8005148:	4803      	ldr	r0, [pc, #12]	; (8005158 <add_wp+0x64>)
 800514a:	f00a fa6f 	bl	800f62c <puts>
}
 800514e:	bf00      	nop
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	08012f60 	.word	0x08012f60

0800515c <to_next>:

void to_next(struct waypoint_buffer * wp_buf) {
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
    if (wp_buf->to < wp_buf->size - 1) {
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3b01      	subs	r3, #1
 8005170:	429a      	cmp	r2, r3
 8005172:	da0d      	bge.n	8005190 <to_next+0x34>
        wp_buf->from++;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
        wp_buf->to++;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    }
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <clean>:

void clean(struct waypoint_buffer * wp_buf){
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
    wp_buf->size = 0;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
    wp_buf->from = 0;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    wp_buf->to = 0;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
	...

080051c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80051c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005200 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80051cc:	f7fb fa5e 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051d0:	480c      	ldr	r0, [pc, #48]	; (8005204 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80051d2:	490d      	ldr	r1, [pc, #52]	; (8005208 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80051d4:	4a0d      	ldr	r2, [pc, #52]	; (800520c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80051d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051d8:	e002      	b.n	80051e0 <LoopCopyDataInit>

080051da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051de:	3304      	adds	r3, #4

080051e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051e4:	d3f9      	bcc.n	80051da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051e6:	4a0a      	ldr	r2, [pc, #40]	; (8005210 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80051e8:	4c0a      	ldr	r4, [pc, #40]	; (8005214 <LoopFillZerobss+0x22>)
  movs r3, #0
 80051ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051ec:	e001      	b.n	80051f2 <LoopFillZerobss>

080051ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051f0:	3204      	adds	r2, #4

080051f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051f4:	d3fb      	bcc.n	80051ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80051f6:	f00a fbc7 	bl	800f988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80051fa:	f7fd ffab 	bl	8003154 <main>
  bx  lr
 80051fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005200:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005204:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005208:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 800520c:	08013780 	.word	0x08013780
  ldr r2, =_sbss
 8005210:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8005214:	240054e4 	.word	0x240054e4

08005218 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005218:	e7fe      	b.n	8005218 <ADC3_IRQHandler>
	...

0800521c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005222:	2003      	movs	r0, #3
 8005224:	f000 f96e 	bl	8005504 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005228:	f001 ff66 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 800522c:	4602      	mov	r2, r0
 800522e:	4b15      	ldr	r3, [pc, #84]	; (8005284 <HAL_Init+0x68>)
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	0a1b      	lsrs	r3, r3, #8
 8005234:	f003 030f 	and.w	r3, r3, #15
 8005238:	4913      	ldr	r1, [pc, #76]	; (8005288 <HAL_Init+0x6c>)
 800523a:	5ccb      	ldrb	r3, [r1, r3]
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	fa22 f303 	lsr.w	r3, r2, r3
 8005244:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005246:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <HAL_Init+0x68>)
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	4a0e      	ldr	r2, [pc, #56]	; (8005288 <HAL_Init+0x6c>)
 8005250:	5cd3      	ldrb	r3, [r2, r3]
 8005252:	f003 031f 	and.w	r3, r3, #31
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	fa22 f303 	lsr.w	r3, r2, r3
 800525c:	4a0b      	ldr	r2, [pc, #44]	; (800528c <HAL_Init+0x70>)
 800525e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005260:	4a0b      	ldr	r2, [pc, #44]	; (8005290 <HAL_Init+0x74>)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005266:	200f      	movs	r0, #15
 8005268:	f000 f814 	bl	8005294 <HAL_InitTick>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e002      	b.n	800527c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005276:	f7ff fbf3 	bl	8004a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	58024400 	.word	0x58024400
 8005288:	08012fe4 	.word	0x08012fe4
 800528c:	24000004 	.word	0x24000004
 8005290:	24000000 	.word	0x24000000

08005294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800529c:	4b15      	ldr	r3, [pc, #84]	; (80052f4 <HAL_InitTick+0x60>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e021      	b.n	80052ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80052a8:	4b13      	ldr	r3, [pc, #76]	; (80052f8 <HAL_InitTick+0x64>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <HAL_InitTick+0x60>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	4619      	mov	r1, r3
 80052b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80052ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f945 	bl	800554e <HAL_SYSTICK_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e00e      	b.n	80052ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b0f      	cmp	r3, #15
 80052d2:	d80a      	bhi.n	80052ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052d4:	2200      	movs	r2, #0
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	f04f 30ff 	mov.w	r0, #4294967295
 80052dc:	f000 f91d 	bl	800551a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80052e0:	4a06      	ldr	r2, [pc, #24]	; (80052fc <HAL_InitTick+0x68>)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e000      	b.n	80052ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	24000014 	.word	0x24000014
 80052f8:	24000000 	.word	0x24000000
 80052fc:	24000010 	.word	0x24000010

08005300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <HAL_IncTick+0x20>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <HAL_IncTick+0x24>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4413      	add	r3, r2
 8005310:	4a04      	ldr	r2, [pc, #16]	; (8005324 <HAL_IncTick+0x24>)
 8005312:	6013      	str	r3, [r2, #0]
}
 8005314:	bf00      	nop
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	24000014 	.word	0x24000014
 8005324:	240009ac 	.word	0x240009ac

08005328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  return uwTick;
 800532c:	4b03      	ldr	r3, [pc, #12]	; (800533c <HAL_GetTick+0x14>)
 800532e:	681b      	ldr	r3, [r3, #0]
}
 8005330:	4618      	mov	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	240009ac 	.word	0x240009ac

08005340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005348:	f7ff ffee 	bl	8005328 <HAL_GetTick>
 800534c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005358:	d005      	beq.n	8005366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800535a:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <HAL_Delay+0x44>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005366:	bf00      	nop
 8005368:	f7ff ffde 	bl	8005328 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	429a      	cmp	r2, r3
 8005376:	d8f7      	bhi.n	8005368 <HAL_Delay+0x28>
  {
  }
}
 8005378:	bf00      	nop
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	24000014 	.word	0x24000014

08005388 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800538c:	4b03      	ldr	r3, [pc, #12]	; (800539c <HAL_GetREVID+0x14>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	0c1b      	lsrs	r3, r3, #16
}
 8005392:	4618      	mov	r0, r3
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	5c001000 	.word	0x5c001000

080053a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053b0:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <__NVIC_SetPriorityGrouping+0x40>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053bc:	4013      	ands	r3, r2
 80053be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80053c8:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <__NVIC_SetPriorityGrouping+0x44>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053ce:	4a04      	ldr	r2, [pc, #16]	; (80053e0 <__NVIC_SetPriorityGrouping+0x40>)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	60d3      	str	r3, [r2, #12]
}
 80053d4:	bf00      	nop
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	e000ed00 	.word	0xe000ed00
 80053e4:	05fa0000 	.word	0x05fa0000

080053e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053ec:	4b04      	ldr	r3, [pc, #16]	; (8005400 <__NVIC_GetPriorityGrouping+0x18>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	0a1b      	lsrs	r3, r3, #8
 80053f2:	f003 0307 	and.w	r3, r3, #7
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	e000ed00 	.word	0xe000ed00

08005404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	6039      	str	r1, [r7, #0]
 800540e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005414:	2b00      	cmp	r3, #0
 8005416:	db0a      	blt.n	800542e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	b2da      	uxtb	r2, r3
 800541c:	490c      	ldr	r1, [pc, #48]	; (8005450 <__NVIC_SetPriority+0x4c>)
 800541e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005422:	0112      	lsls	r2, r2, #4
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	440b      	add	r3, r1
 8005428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800542c:	e00a      	b.n	8005444 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	4908      	ldr	r1, [pc, #32]	; (8005454 <__NVIC_SetPriority+0x50>)
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	3b04      	subs	r3, #4
 800543c:	0112      	lsls	r2, r2, #4
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	440b      	add	r3, r1
 8005442:	761a      	strb	r2, [r3, #24]
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	e000e100 	.word	0xe000e100
 8005454:	e000ed00 	.word	0xe000ed00

08005458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005458:	b480      	push	{r7}
 800545a:	b089      	sub	sp, #36	; 0x24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f1c3 0307 	rsb	r3, r3, #7
 8005472:	2b04      	cmp	r3, #4
 8005474:	bf28      	it	cs
 8005476:	2304      	movcs	r3, #4
 8005478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	3304      	adds	r3, #4
 800547e:	2b06      	cmp	r3, #6
 8005480:	d902      	bls.n	8005488 <NVIC_EncodePriority+0x30>
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	3b03      	subs	r3, #3
 8005486:	e000      	b.n	800548a <NVIC_EncodePriority+0x32>
 8005488:	2300      	movs	r3, #0
 800548a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800548c:	f04f 32ff 	mov.w	r2, #4294967295
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	43da      	mvns	r2, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	401a      	ands	r2, r3
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054a0:	f04f 31ff 	mov.w	r1, #4294967295
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	fa01 f303 	lsl.w	r3, r1, r3
 80054aa:	43d9      	mvns	r1, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054b0:	4313      	orrs	r3, r2
         );
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3724      	adds	r7, #36	; 0x24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054d0:	d301      	bcc.n	80054d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054d2:	2301      	movs	r3, #1
 80054d4:	e00f      	b.n	80054f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054d6:	4a0a      	ldr	r2, [pc, #40]	; (8005500 <SysTick_Config+0x40>)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3b01      	subs	r3, #1
 80054dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054de:	210f      	movs	r1, #15
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295
 80054e4:	f7ff ff8e 	bl	8005404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054e8:	4b05      	ldr	r3, [pc, #20]	; (8005500 <SysTick_Config+0x40>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054ee:	4b04      	ldr	r3, [pc, #16]	; (8005500 <SysTick_Config+0x40>)
 80054f0:	2207      	movs	r2, #7
 80054f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	e000e010 	.word	0xe000e010

08005504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff ff47 	bl	80053a0 <__NVIC_SetPriorityGrouping>
}
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b086      	sub	sp, #24
 800551e:	af00      	add	r7, sp, #0
 8005520:	4603      	mov	r3, r0
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
 8005526:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005528:	f7ff ff5e 	bl	80053e8 <__NVIC_GetPriorityGrouping>
 800552c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	6978      	ldr	r0, [r7, #20]
 8005534:	f7ff ff90 	bl	8005458 <NVIC_EncodePriority>
 8005538:	4602      	mov	r2, r0
 800553a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800553e:	4611      	mov	r1, r2
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff ff5f 	bl	8005404 <__NVIC_SetPriority>
}
 8005546:	bf00      	nop
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff ffb2 	bl	80054c0 <SysTick_Config>
 800555c:	4603      	mov	r3, r0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b098      	sub	sp, #96	; 0x60
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005570:	4a84      	ldr	r2, [pc, #528]	; (8005784 <HAL_FDCAN_Init+0x21c>)
 8005572:	f107 030c 	add.w	r3, r7, #12
 8005576:	4611      	mov	r1, r2
 8005578:	224c      	movs	r2, #76	; 0x4c
 800557a:	4618      	mov	r0, r3
 800557c:	f00a fa2b 	bl	800f9d6 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e1c6      	b.n	8005918 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a7e      	ldr	r2, [pc, #504]	; (8005788 <HAL_FDCAN_Init+0x220>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d106      	bne.n	80055a2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800559c:	461a      	mov	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fc fb06 	bl	8001bc8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0210 	bic.w	r2, r2, #16
 80055ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055cc:	f7ff feac 	bl	8005328 <HAL_GetTick>
 80055d0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80055d2:	e014      	b.n	80055fe <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80055d4:	f7ff fea8 	bl	8005328 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b0a      	cmp	r3, #10
 80055e0:	d90d      	bls.n	80055fe <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055e8:	f043 0201 	orr.w	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2203      	movs	r2, #3
 80055f6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e18c      	b.n	8005918 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b08      	cmp	r3, #8
 800560a:	d0e3      	beq.n	80055d4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0201 	orr.w	r2, r2, #1
 800561a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800561c:	f7ff fe84 	bl	8005328 <HAL_GetTick>
 8005620:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005622:	e014      	b.n	800564e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005624:	f7ff fe80 	bl	8005328 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b0a      	cmp	r3, #10
 8005630:	d90d      	bls.n	800564e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005638:	f043 0201 	orr.w	r2, r3, #1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2203      	movs	r2, #3
 8005646:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e164      	b.n	8005918 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0e3      	beq.n	8005624 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0202 	orr.w	r2, r2, #2
 800566a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	7c1b      	ldrb	r3, [r3, #16]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d108      	bne.n	8005686 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005682:	619a      	str	r2, [r3, #24]
 8005684:	e007      	b.n	8005696 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005694:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	7c5b      	ldrb	r3, [r3, #17]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d108      	bne.n	80056b0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699a      	ldr	r2, [r3, #24]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056ac:	619a      	str	r2, [r3, #24]
 80056ae:	e007      	b.n	80056c0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056be:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	7c9b      	ldrb	r3, [r3, #18]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d108      	bne.n	80056da <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056d6:	619a      	str	r2, [r3, #24]
 80056d8:	e007      	b.n	80056ea <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056e8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800570e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0210 	bic.w	r2, r2, #16
 800571e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d108      	bne.n	800573a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0204 	orr.w	r2, r2, #4
 8005736:	619a      	str	r2, [r3, #24]
 8005738:	e030      	b.n	800579c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d02c      	beq.n	800579c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d020      	beq.n	800578c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	699a      	ldr	r2, [r3, #24]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005758:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0210 	orr.w	r2, r2, #16
 8005768:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	2b03      	cmp	r3, #3
 8005770:	d114      	bne.n	800579c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	699a      	ldr	r2, [r3, #24]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0220 	orr.w	r2, r2, #32
 8005780:	619a      	str	r2, [r3, #24]
 8005782:	e00b      	b.n	800579c <HAL_FDCAN_Init+0x234>
 8005784:	08012f80 	.word	0x08012f80
 8005788:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0220 	orr.w	r2, r2, #32
 800579a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057ac:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80057b4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	3b01      	subs	r3, #1
 80057be:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80057c4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80057c6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d0:	d115      	bne.n	80057fe <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	3b01      	subs	r3, #1
 80057de:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80057e0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e6:	3b01      	subs	r3, #1
 80057e8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80057ea:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	3b01      	subs	r3, #1
 80057f4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80057fa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80057fc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005824:	4413      	add	r3, r2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d011      	beq.n	800584e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005832:	f023 0107 	bic.w	r1, r3, #7
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	3360      	adds	r3, #96	; 0x60
 800583e:	443b      	add	r3, r7
 8005840:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d011      	beq.n	800587a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800585e:	f023 0107 	bic.w	r1, r3, #7
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	3360      	adds	r3, #96	; 0x60
 800586a:	443b      	add	r3, r7
 800586c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587e:	2b00      	cmp	r3, #0
 8005880:	d012      	beq.n	80058a8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800588a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	3360      	adds	r3, #96	; 0x60
 8005896:	443b      	add	r3, r7
 8005898:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800589c:	011a      	lsls	r2, r3, #4
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d012      	beq.n	80058d6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80058b8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	3360      	adds	r3, #96	; 0x60
 80058c4:	443b      	add	r3, r7
 80058c6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80058ca:	021a      	lsls	r2, r3, #8
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a11      	ldr	r2, [pc, #68]	; (8005920 <HAL_FDCAN_Init+0x3b8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d107      	bne.n	80058f0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f022 0203 	bic.w	r2, r2, #3
 80058ee:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fa1f 	bl	8005d4c <FDCAN_CalcultateRamBlockAddresses>
 800590e:	4603      	mov	r3, r0
 8005910:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005914:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005918:	4618      	mov	r0, r3
 800591a:	3760      	adds	r7, #96	; 0x60
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	4000a000 	.word	0x4000a000

08005924 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	d111      	bne.n	800595c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0201 	bic.w	r2, r2, #1
 800594e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	e008      	b.n	800596e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005962:	f043 0204 	orr.w	r2, r3, #4
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
  }
}
 800596e:	4618      	mov	r0, r3
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
	...

0800597c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800597c:	b480      	push	{r7}
 800597e:	b08b      	sub	sp, #44	; 0x2c
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005994:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005996:	7efb      	ldrb	r3, [r7, #27]
 8005998:	2b02      	cmp	r3, #2
 800599a:	f040 814b 	bne.w	8005c34 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	2b40      	cmp	r3, #64	; 0x40
 80059a2:	d14d      	bne.n	8005a40 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d109      	bne.n	80059c8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059ba:	f043 0220 	orr.w	r2, r3, #32
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e13e      	b.n	8005c46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e12c      	b.n	8005c46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059f4:	0e1b      	lsrs	r3, r3, #24
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d10b      	bne.n	8005a16 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a06:	0fdb      	lsrs	r3, r3, #31
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a10:	d101      	bne.n	8005a16 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005a12:	2301      	movs	r3, #1
 8005a14:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a1e:	0a1b      	lsrs	r3, r3, #8
 8005a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a32:	69f9      	ldr	r1, [r7, #28]
 8005a34:	fb01 f303 	mul.w	r3, r1, r3
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3e:	e069      	b.n	8005b14 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b41      	cmp	r3, #65	; 0x41
 8005a44:	d14d      	bne.n	8005ae2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a5c:	f043 0220 	orr.w	r2, r3, #32
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e0ed      	b.n	8005c46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d109      	bne.n	8005a8e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e0db      	b.n	8005c46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a96:	0e1b      	lsrs	r3, r3, #24
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d10b      	bne.n	8005ab8 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005aa8:	0fdb      	lsrs	r3, r3, #31
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ab2:	d101      	bne.n	8005ab8 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ac0:	0a1b      	lsrs	r3, r3, #8
 8005ac2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	4413      	add	r3, r2
 8005aca:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad4:	69f9      	ldr	r1, [r7, #28]
 8005ad6:	fb01 f303 	mul.w	r3, r1, r3
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae0:	e018      	b.n	8005b14 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d309      	bcc.n	8005b00 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005af2:	f043 0220 	orr.w	r2, r3, #32
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e0a2      	b.n	8005c46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	fb01 f303 	mul.w	r3, r1, r3
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d107      	bne.n	8005b38 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	0c9b      	lsrs	r3, r3, #18
 8005b2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	e005      	b.n	8005b44 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	3304      	adds	r3, #4
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	0e1b      	lsrs	r3, r3, #24
 8005b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	0fda      	lsrs	r2, r3, #31
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	3304      	adds	r3, #4
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	623b      	str	r3, [r7, #32]
 8005bb6:	e00a      	b.n	8005bce <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	441a      	add	r2, r3
 8005bbe:	6839      	ldr	r1, [r7, #0]
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	440b      	add	r3, r1
 8005bc4:	7812      	ldrb	r2, [r2, #0]
 8005bc6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	623b      	str	r3, [r7, #32]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	0c1b      	lsrs	r3, r3, #16
 8005bd4:	4a1f      	ldr	r2, [pc, #124]	; (8005c54 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8005bd6:	5cd3      	ldrb	r3, [r2, r3]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d3eb      	bcc.n	8005bb8 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2b40      	cmp	r3, #64	; 0x40
 8005be4:	d105      	bne.n	8005bf2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005bf0:	e01e      	b.n	8005c30 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b41      	cmp	r3, #65	; 0x41
 8005bf6:	d105      	bne.n	8005c04 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8005c02:	e015      	b.n	8005c30 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b1f      	cmp	r3, #31
 8005c08:	d808      	bhi.n	8005c1c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2101      	movs	r1, #1
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	fa01 f202 	lsl.w	r2, r1, r2
 8005c16:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8005c1a:	e009      	b.n	8005c30 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f003 021f 	and.w	r2, r3, #31
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2101      	movs	r1, #1
 8005c28:	fa01 f202 	lsl.w	r2, r1, r2
 8005c2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	e008      	b.n	8005c46 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c3a:	f043 0208 	orr.w	r2, r3, #8
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
  }
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	372c      	adds	r7, #44	; 0x2c
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	0801317c 	.word	0x0801317c

08005c58 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005c6a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005c6c:	7dfb      	ldrb	r3, [r7, #23]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d002      	beq.n	8005c78 <HAL_FDCAN_ActivateNotification+0x20>
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d155      	bne.n	8005d24 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	4013      	ands	r3, r2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d108      	bne.n	8005c98 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0201 	orr.w	r2, r2, #1
 8005c94:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c96:	e014      	b.n	8005cc2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d108      	bne.n	8005cba <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0202 	orr.w	r2, r2, #2
 8005cb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8005cb8:	e003      	b.n	8005cc2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d009      	beq.n	8005ce0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d009      	beq.n	8005cfe <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <HAL_FDCAN_ActivateNotification+0xec>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	6812      	ldr	r2, [r2, #0]
 8005d0e:	430b      	orrs	r3, r1
 8005d10:	6553      	str	r3, [r2, #84]	; 0x54
 8005d12:	4b0d      	ldr	r3, [pc, #52]	; (8005d48 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005d14:	695a      	ldr	r2, [r3, #20]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	0f9b      	lsrs	r3, r3, #30
 8005d1a:	490b      	ldr	r1, [pc, #44]	; (8005d48 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	e008      	b.n	8005d36 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d2a:	f043 0202 	orr.w	r2, r3, #2
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
  }
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	3fcfffff 	.word	0x3fcfffff
 8005d48:	4000a800 	.word	0x4000a800

08005d4c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d58:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005d62:	4ba7      	ldr	r3, [pc, #668]	; (8006000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	0091      	lsls	r1, r2, #2
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	6812      	ldr	r2, [r2, #0]
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d7c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	041a      	lsls	r2, r3, #16
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	4413      	add	r3, r2
 8005d98:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005da2:	4b97      	ldr	r3, [pc, #604]	; (8006000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	0091      	lsls	r1, r2, #2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	430b      	orrs	r3, r1
 8005db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc4:	041a      	lsls	r2, r3, #16
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	4413      	add	r3, r2
 8005dda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005de4:	4b86      	ldr	r3, [pc, #536]	; (8006000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005de6:	4013      	ands	r3, r2
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	0091      	lsls	r1, r2, #2
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6812      	ldr	r2, [r2, #0]
 8005df0:	430b      	orrs	r3, r1
 8005df2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005dfe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	041a      	lsls	r2, r3, #16
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e1a:	fb02 f303 	mul.w	r3, r2, r3
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	4413      	add	r3, r2
 8005e22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005e2c:	4b74      	ldr	r3, [pc, #464]	; (8006000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e2e:	4013      	ands	r3, r2
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	0091      	lsls	r1, r2, #2
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	6812      	ldr	r2, [r2, #0]
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e46:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e4e:	041a      	lsls	r2, r3, #16
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005e62:	fb02 f303 	mul.w	r3, r2, r3
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	4413      	add	r3, r2
 8005e6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005e74:	4b62      	ldr	r3, [pc, #392]	; (8006000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e76:	4013      	ands	r3, r2
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	0091      	lsls	r1, r2, #2
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6812      	ldr	r2, [r2, #0]
 8005e80:	430b      	orrs	r3, r1
 8005e82:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005e8e:	fb02 f303 	mul.w	r3, r2, r3
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	4413      	add	r3, r2
 8005e96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005ea0:	4b57      	ldr	r3, [pc, #348]	; (8006000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	0091      	lsls	r1, r2, #2
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6812      	ldr	r2, [r2, #0]
 8005eac:	430b      	orrs	r3, r1
 8005eae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005eba:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec2:	041a      	lsls	r2, r3, #16
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005ee2:	4b47      	ldr	r3, [pc, #284]	; (8006000 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	0091      	lsls	r1, r2, #2
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6812      	ldr	r2, [r2, #0]
 8005eee:	430b      	orrs	r3, r1
 8005ef0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005efc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f04:	041a      	lsls	r2, r3, #16
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005f18:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f20:	061a      	lsls	r2, r3, #24
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f30:	4b34      	ldr	r3, [pc, #208]	; (8006004 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005f32:	4413      	add	r3, r2
 8005f34:	009a      	lsls	r2, r3, #2
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	441a      	add	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	441a      	add	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005f66:	fb01 f303 	mul.w	r3, r1, r3
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	441a      	add	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f7a:	6879      	ldr	r1, [r7, #4]
 8005f7c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005f7e:	fb01 f303 	mul.w	r3, r1, r3
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	441a      	add	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005f96:	fb01 f303 	mul.w	r3, r1, r3
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	441a      	add	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	441a      	add	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005fc6:	fb01 f303 	mul.w	r3, r1, r3
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	441a      	add	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005fe2:	fb01 f303 	mul.w	r3, r1, r3
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	441a      	add	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff6:	4a04      	ldr	r2, [pc, #16]	; (8006008 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d915      	bls.n	8006028 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005ffc:	e006      	b.n	800600c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005ffe:	bf00      	nop
 8006000:	ffff0003 	.word	0xffff0003
 8006004:	10002b00 	.word	0x10002b00
 8006008:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006012:	f043 0220 	orr.w	r2, r3, #32
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2203      	movs	r2, #3
 8006020:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e010      	b.n	800604a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	e005      	b.n	800603c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3304      	adds	r3, #4
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	429a      	cmp	r2, r3
 8006046:	d3f3      	bcc.n	8006030 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop

08006058 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006058:	b480      	push	{r7}
 800605a:	b089      	sub	sp, #36	; 0x24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006062:	2300      	movs	r3, #0
 8006064:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006066:	4b89      	ldr	r3, [pc, #548]	; (800628c <HAL_GPIO_Init+0x234>)
 8006068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800606a:	e194      	b.n	8006396 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	2101      	movs	r1, #1
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	fa01 f303 	lsl.w	r3, r1, r3
 8006078:	4013      	ands	r3, r2
 800607a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 8186 	beq.w	8006390 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f003 0303 	and.w	r3, r3, #3
 800608c:	2b01      	cmp	r3, #1
 800608e:	d005      	beq.n	800609c <HAL_GPIO_Init+0x44>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f003 0303 	and.w	r3, r3, #3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d130      	bne.n	80060fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	2203      	movs	r2, #3
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	43db      	mvns	r3, r3
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	4013      	ands	r3, r2
 80060b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	68da      	ldr	r2, [r3, #12]
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060d2:	2201      	movs	r2, #1
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	fa02 f303 	lsl.w	r3, r2, r3
 80060da:	43db      	mvns	r3, r3
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	4013      	ands	r3, r2
 80060e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	091b      	lsrs	r3, r3, #4
 80060e8:	f003 0201 	and.w	r2, r3, #1
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	2b03      	cmp	r3, #3
 8006108:	d017      	beq.n	800613a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	2203      	movs	r2, #3
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	43db      	mvns	r3, r3
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	4013      	ands	r3, r2
 8006120:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	fa02 f303 	lsl.w	r3, r2, r3
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	4313      	orrs	r3, r2
 8006132:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d123      	bne.n	800618e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	08da      	lsrs	r2, r3, #3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3208      	adds	r2, #8
 800614e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	220f      	movs	r2, #15
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	43db      	mvns	r3, r3
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	4013      	ands	r3, r2
 8006168:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	691a      	ldr	r2, [r3, #16]
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	fa02 f303 	lsl.w	r3, r2, r3
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	4313      	orrs	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	08da      	lsrs	r2, r3, #3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	3208      	adds	r2, #8
 8006188:	69b9      	ldr	r1, [r7, #24]
 800618a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	2203      	movs	r2, #3
 800619a:	fa02 f303 	lsl.w	r3, r2, r3
 800619e:	43db      	mvns	r3, r3
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	4013      	ands	r3, r2
 80061a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f003 0203 	and.w	r2, r3, #3
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 80e0 	beq.w	8006390 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061d0:	4b2f      	ldr	r3, [pc, #188]	; (8006290 <HAL_GPIO_Init+0x238>)
 80061d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061d6:	4a2e      	ldr	r2, [pc, #184]	; (8006290 <HAL_GPIO_Init+0x238>)
 80061d8:	f043 0302 	orr.w	r3, r3, #2
 80061dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80061e0:	4b2b      	ldr	r3, [pc, #172]	; (8006290 <HAL_GPIO_Init+0x238>)
 80061e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061ee:	4a29      	ldr	r2, [pc, #164]	; (8006294 <HAL_GPIO_Init+0x23c>)
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	089b      	lsrs	r3, r3, #2
 80061f4:	3302      	adds	r3, #2
 80061f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	220f      	movs	r2, #15
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	43db      	mvns	r3, r3
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	4013      	ands	r3, r2
 8006210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a20      	ldr	r2, [pc, #128]	; (8006298 <HAL_GPIO_Init+0x240>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d052      	beq.n	80062c0 <HAL_GPIO_Init+0x268>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a1f      	ldr	r2, [pc, #124]	; (800629c <HAL_GPIO_Init+0x244>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d031      	beq.n	8006286 <HAL_GPIO_Init+0x22e>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a1e      	ldr	r2, [pc, #120]	; (80062a0 <HAL_GPIO_Init+0x248>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d02b      	beq.n	8006282 <HAL_GPIO_Init+0x22a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a1d      	ldr	r2, [pc, #116]	; (80062a4 <HAL_GPIO_Init+0x24c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d025      	beq.n	800627e <HAL_GPIO_Init+0x226>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a1c      	ldr	r2, [pc, #112]	; (80062a8 <HAL_GPIO_Init+0x250>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d01f      	beq.n	800627a <HAL_GPIO_Init+0x222>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a1b      	ldr	r2, [pc, #108]	; (80062ac <HAL_GPIO_Init+0x254>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d019      	beq.n	8006276 <HAL_GPIO_Init+0x21e>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a1a      	ldr	r2, [pc, #104]	; (80062b0 <HAL_GPIO_Init+0x258>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d013      	beq.n	8006272 <HAL_GPIO_Init+0x21a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a19      	ldr	r2, [pc, #100]	; (80062b4 <HAL_GPIO_Init+0x25c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00d      	beq.n	800626e <HAL_GPIO_Init+0x216>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a18      	ldr	r2, [pc, #96]	; (80062b8 <HAL_GPIO_Init+0x260>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d007      	beq.n	800626a <HAL_GPIO_Init+0x212>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a17      	ldr	r2, [pc, #92]	; (80062bc <HAL_GPIO_Init+0x264>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d101      	bne.n	8006266 <HAL_GPIO_Init+0x20e>
 8006262:	2309      	movs	r3, #9
 8006264:	e02d      	b.n	80062c2 <HAL_GPIO_Init+0x26a>
 8006266:	230a      	movs	r3, #10
 8006268:	e02b      	b.n	80062c2 <HAL_GPIO_Init+0x26a>
 800626a:	2308      	movs	r3, #8
 800626c:	e029      	b.n	80062c2 <HAL_GPIO_Init+0x26a>
 800626e:	2307      	movs	r3, #7
 8006270:	e027      	b.n	80062c2 <HAL_GPIO_Init+0x26a>
 8006272:	2306      	movs	r3, #6
 8006274:	e025      	b.n	80062c2 <HAL_GPIO_Init+0x26a>
 8006276:	2305      	movs	r3, #5
 8006278:	e023      	b.n	80062c2 <HAL_GPIO_Init+0x26a>
 800627a:	2304      	movs	r3, #4
 800627c:	e021      	b.n	80062c2 <HAL_GPIO_Init+0x26a>
 800627e:	2303      	movs	r3, #3
 8006280:	e01f      	b.n	80062c2 <HAL_GPIO_Init+0x26a>
 8006282:	2302      	movs	r3, #2
 8006284:	e01d      	b.n	80062c2 <HAL_GPIO_Init+0x26a>
 8006286:	2301      	movs	r3, #1
 8006288:	e01b      	b.n	80062c2 <HAL_GPIO_Init+0x26a>
 800628a:	bf00      	nop
 800628c:	58000080 	.word	0x58000080
 8006290:	58024400 	.word	0x58024400
 8006294:	58000400 	.word	0x58000400
 8006298:	58020000 	.word	0x58020000
 800629c:	58020400 	.word	0x58020400
 80062a0:	58020800 	.word	0x58020800
 80062a4:	58020c00 	.word	0x58020c00
 80062a8:	58021000 	.word	0x58021000
 80062ac:	58021400 	.word	0x58021400
 80062b0:	58021800 	.word	0x58021800
 80062b4:	58021c00 	.word	0x58021c00
 80062b8:	58022000 	.word	0x58022000
 80062bc:	58022400 	.word	0x58022400
 80062c0:	2300      	movs	r3, #0
 80062c2:	69fa      	ldr	r2, [r7, #28]
 80062c4:	f002 0203 	and.w	r2, r2, #3
 80062c8:	0092      	lsls	r2, r2, #2
 80062ca:	4093      	lsls	r3, r2
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062d2:	4938      	ldr	r1, [pc, #224]	; (80063b4 <HAL_GPIO_Init+0x35c>)
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	089b      	lsrs	r3, r3, #2
 80062d8:	3302      	adds	r3, #2
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	43db      	mvns	r3, r3
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	4013      	ands	r3, r2
 80062f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	4313      	orrs	r3, r2
 8006304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006306:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800630e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	43db      	mvns	r3, r3
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	4013      	ands	r3, r2
 800631e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	4313      	orrs	r3, r2
 8006332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006334:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	43db      	mvns	r3, r3
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	4013      	ands	r3, r2
 800634a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	4313      	orrs	r3, r2
 800635e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	43db      	mvns	r3, r3
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	4013      	ands	r3, r2
 8006374:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	3301      	adds	r3, #1
 8006394:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	fa22 f303 	lsr.w	r3, r2, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f47f ae63 	bne.w	800606c <HAL_GPIO_Init+0x14>
  }
}
 80063a6:	bf00      	nop
 80063a8:	bf00      	nop
 80063aa:	3724      	adds	r7, #36	; 0x24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr
 80063b4:	58000400 	.word	0x58000400

080063b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	807b      	strh	r3, [r7, #2]
 80063c4:	4613      	mov	r3, r2
 80063c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063c8:	787b      	ldrb	r3, [r7, #1]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063ce:	887a      	ldrh	r2, [r7, #2]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80063d4:	e003      	b.n	80063de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063d6:	887b      	ldrh	r3, [r7, #2]
 80063d8:	041a      	lsls	r2, r3, #16
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	619a      	str	r2, [r3, #24]
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	460b      	mov	r3, r1
 80063f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80063fc:	887a      	ldrh	r2, [r7, #2]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4013      	ands	r3, r2
 8006402:	041a      	lsls	r2, r3, #16
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	43d9      	mvns	r1, r3
 8006408:	887b      	ldrh	r3, [r7, #2]
 800640a:	400b      	ands	r3, r1
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	619a      	str	r2, [r3, #24]
}
 8006412:	bf00      	nop
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006428:	4a08      	ldr	r2, [pc, #32]	; (800644c <HAL_HSEM_FastTake+0x2c>)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3320      	adds	r3, #32
 800642e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006432:	4a07      	ldr	r2, [pc, #28]	; (8006450 <HAL_HSEM_FastTake+0x30>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d101      	bne.n	800643c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	e000      	b.n	800643e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	58026400 	.word	0x58026400
 8006450:	80000300 	.word	0x80000300

08006454 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800645e:	4906      	ldr	r1, [pc, #24]	; (8006478 <HAL_HSEM_Release+0x24>)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	58026400 	.word	0x58026400

0800647c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006484:	4b29      	ldr	r3, [pc, #164]	; (800652c <HAL_PWREx_ConfigSupply+0xb0>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f003 0307 	and.w	r3, r3, #7
 800648c:	2b06      	cmp	r3, #6
 800648e:	d00a      	beq.n	80064a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006490:	4b26      	ldr	r3, [pc, #152]	; (800652c <HAL_PWREx_ConfigSupply+0xb0>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	429a      	cmp	r2, r3
 800649c:	d001      	beq.n	80064a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e040      	b.n	8006524 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e03e      	b.n	8006524 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80064a6:	4b21      	ldr	r3, [pc, #132]	; (800652c <HAL_PWREx_ConfigSupply+0xb0>)
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80064ae:	491f      	ldr	r1, [pc, #124]	; (800652c <HAL_PWREx_ConfigSupply+0xb0>)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80064b6:	f7fe ff37 	bl	8005328 <HAL_GetTick>
 80064ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064bc:	e009      	b.n	80064d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80064be:	f7fe ff33 	bl	8005328 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064cc:	d901      	bls.n	80064d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e028      	b.n	8006524 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064d2:	4b16      	ldr	r3, [pc, #88]	; (800652c <HAL_PWREx_ConfigSupply+0xb0>)
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064de:	d1ee      	bne.n	80064be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b1e      	cmp	r3, #30
 80064e4:	d008      	beq.n	80064f8 <HAL_PWREx_ConfigSupply+0x7c>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b2e      	cmp	r3, #46	; 0x2e
 80064ea:	d005      	beq.n	80064f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b1d      	cmp	r3, #29
 80064f0:	d002      	beq.n	80064f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b2d      	cmp	r3, #45	; 0x2d
 80064f6:	d114      	bne.n	8006522 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80064f8:	f7fe ff16 	bl	8005328 <HAL_GetTick>
 80064fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80064fe:	e009      	b.n	8006514 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006500:	f7fe ff12 	bl	8005328 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800650e:	d901      	bls.n	8006514 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e007      	b.n	8006524 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006514:	4b05      	ldr	r3, [pc, #20]	; (800652c <HAL_PWREx_ConfigSupply+0xb0>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800651c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006520:	d1ee      	bne.n	8006500 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	58024800 	.word	0x58024800

08006530 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08c      	sub	sp, #48	; 0x30
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d102      	bne.n	8006544 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f000 bc1d 	b.w	8006d7e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 8087 	beq.w	8006660 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006552:	4b99      	ldr	r3, [pc, #612]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800655a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800655c:	4b96      	ldr	r3, [pc, #600]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 800655e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006560:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006564:	2b10      	cmp	r3, #16
 8006566:	d007      	beq.n	8006578 <HAL_RCC_OscConfig+0x48>
 8006568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656a:	2b18      	cmp	r3, #24
 800656c:	d110      	bne.n	8006590 <HAL_RCC_OscConfig+0x60>
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	f003 0303 	and.w	r3, r3, #3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d10b      	bne.n	8006590 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006578:	4b8f      	ldr	r3, [pc, #572]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d06c      	beq.n	800665e <HAL_RCC_OscConfig+0x12e>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d168      	bne.n	800665e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e3f6      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006598:	d106      	bne.n	80065a8 <HAL_RCC_OscConfig+0x78>
 800659a:	4b87      	ldr	r3, [pc, #540]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a86      	ldr	r2, [pc, #536]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80065a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	e02e      	b.n	8006606 <HAL_RCC_OscConfig+0xd6>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10c      	bne.n	80065ca <HAL_RCC_OscConfig+0x9a>
 80065b0:	4b81      	ldr	r3, [pc, #516]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a80      	ldr	r2, [pc, #512]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80065b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	4b7e      	ldr	r3, [pc, #504]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a7d      	ldr	r2, [pc, #500]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80065c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	e01d      	b.n	8006606 <HAL_RCC_OscConfig+0xd6>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065d2:	d10c      	bne.n	80065ee <HAL_RCC_OscConfig+0xbe>
 80065d4:	4b78      	ldr	r3, [pc, #480]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a77      	ldr	r2, [pc, #476]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80065da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	4b75      	ldr	r3, [pc, #468]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a74      	ldr	r2, [pc, #464]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80065e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	e00b      	b.n	8006606 <HAL_RCC_OscConfig+0xd6>
 80065ee:	4b72      	ldr	r3, [pc, #456]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a71      	ldr	r2, [pc, #452]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80065f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	4b6f      	ldr	r3, [pc, #444]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a6e      	ldr	r2, [pc, #440]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 8006600:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006604:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d013      	beq.n	8006636 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660e:	f7fe fe8b 	bl	8005328 <HAL_GetTick>
 8006612:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006614:	e008      	b.n	8006628 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006616:	f7fe fe87 	bl	8005328 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b64      	cmp	r3, #100	; 0x64
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e3aa      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006628:	4b63      	ldr	r3, [pc, #396]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0f0      	beq.n	8006616 <HAL_RCC_OscConfig+0xe6>
 8006634:	e014      	b.n	8006660 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006636:	f7fe fe77 	bl	8005328 <HAL_GetTick>
 800663a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800663c:	e008      	b.n	8006650 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800663e:	f7fe fe73 	bl	8005328 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b64      	cmp	r3, #100	; 0x64
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e396      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006650:	4b59      	ldr	r3, [pc, #356]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1f0      	bne.n	800663e <HAL_RCC_OscConfig+0x10e>
 800665c:	e000      	b.n	8006660 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800665e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 80cb 	beq.w	8006804 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800666e:	4b52      	ldr	r3, [pc, #328]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006676:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006678:	4b4f      	ldr	r3, [pc, #316]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 800667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d007      	beq.n	8006694 <HAL_RCC_OscConfig+0x164>
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	2b18      	cmp	r3, #24
 8006688:	d156      	bne.n	8006738 <HAL_RCC_OscConfig+0x208>
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	f003 0303 	and.w	r3, r3, #3
 8006690:	2b00      	cmp	r3, #0
 8006692:	d151      	bne.n	8006738 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006694:	4b48      	ldr	r3, [pc, #288]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0304 	and.w	r3, r3, #4
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <HAL_RCC_OscConfig+0x17c>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e368      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066ac:	4b42      	ldr	r3, [pc, #264]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f023 0219 	bic.w	r2, r3, #25
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	493f      	ldr	r1, [pc, #252]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066be:	f7fe fe33 	bl	8005328 <HAL_GetTick>
 80066c2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066c6:	f7fe fe2f 	bl	8005328 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e352      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066d8:	4b37      	ldr	r3, [pc, #220]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0f0      	beq.n	80066c6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e4:	f7fe fe50 	bl	8005388 <HAL_GetREVID>
 80066e8:	4603      	mov	r3, r0
 80066ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d817      	bhi.n	8006722 <HAL_RCC_OscConfig+0x1f2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	2b40      	cmp	r3, #64	; 0x40
 80066f8:	d108      	bne.n	800670c <HAL_RCC_OscConfig+0x1dc>
 80066fa:	4b2f      	ldr	r3, [pc, #188]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006702:	4a2d      	ldr	r2, [pc, #180]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 8006704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006708:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800670a:	e07b      	b.n	8006804 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800670c:	4b2a      	ldr	r3, [pc, #168]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	031b      	lsls	r3, r3, #12
 800671a:	4927      	ldr	r1, [pc, #156]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 800671c:	4313      	orrs	r3, r2
 800671e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006720:	e070      	b.n	8006804 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006722:	4b25      	ldr	r3, [pc, #148]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	061b      	lsls	r3, r3, #24
 8006730:	4921      	ldr	r1, [pc, #132]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 8006732:	4313      	orrs	r3, r2
 8006734:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006736:	e065      	b.n	8006804 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d048      	beq.n	80067d2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006740:	4b1d      	ldr	r3, [pc, #116]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f023 0219 	bic.w	r2, r3, #25
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	491a      	ldr	r1, [pc, #104]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 800674e:	4313      	orrs	r3, r2
 8006750:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006752:	f7fe fde9 	bl	8005328 <HAL_GetTick>
 8006756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006758:	e008      	b.n	800676c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800675a:	f7fe fde5 	bl	8005328 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b02      	cmp	r3, #2
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e308      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800676c:	4b12      	ldr	r3, [pc, #72]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d0f0      	beq.n	800675a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006778:	f7fe fe06 	bl	8005388 <HAL_GetREVID>
 800677c:	4603      	mov	r3, r0
 800677e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006782:	4293      	cmp	r3, r2
 8006784:	d81a      	bhi.n	80067bc <HAL_RCC_OscConfig+0x28c>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	2b40      	cmp	r3, #64	; 0x40
 800678c:	d108      	bne.n	80067a0 <HAL_RCC_OscConfig+0x270>
 800678e:	4b0a      	ldr	r3, [pc, #40]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006796:	4a08      	ldr	r2, [pc, #32]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 8006798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800679c:	6053      	str	r3, [r2, #4]
 800679e:	e031      	b.n	8006804 <HAL_RCC_OscConfig+0x2d4>
 80067a0:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	031b      	lsls	r3, r3, #12
 80067ae:	4902      	ldr	r1, [pc, #8]	; (80067b8 <HAL_RCC_OscConfig+0x288>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	604b      	str	r3, [r1, #4]
 80067b4:	e026      	b.n	8006804 <HAL_RCC_OscConfig+0x2d4>
 80067b6:	bf00      	nop
 80067b8:	58024400 	.word	0x58024400
 80067bc:	4b9a      	ldr	r3, [pc, #616]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	061b      	lsls	r3, r3, #24
 80067ca:	4997      	ldr	r1, [pc, #604]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	604b      	str	r3, [r1, #4]
 80067d0:	e018      	b.n	8006804 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067d2:	4b95      	ldr	r3, [pc, #596]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a94      	ldr	r2, [pc, #592]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 80067d8:	f023 0301 	bic.w	r3, r3, #1
 80067dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067de:	f7fe fda3 	bl	8005328 <HAL_GetTick>
 80067e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067e6:	f7fe fd9f 	bl	8005328 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e2c2      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80067f8:	4b8b      	ldr	r3, [pc, #556]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1f0      	bne.n	80067e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0310 	and.w	r3, r3, #16
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 80a9 	beq.w	8006964 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006812:	4b85      	ldr	r3, [pc, #532]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800681a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800681c:	4b82      	ldr	r3, [pc, #520]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 800681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006820:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	2b08      	cmp	r3, #8
 8006826:	d007      	beq.n	8006838 <HAL_RCC_OscConfig+0x308>
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2b18      	cmp	r3, #24
 800682c:	d13a      	bne.n	80068a4 <HAL_RCC_OscConfig+0x374>
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f003 0303 	and.w	r3, r3, #3
 8006834:	2b01      	cmp	r3, #1
 8006836:	d135      	bne.n	80068a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006838:	4b7b      	ldr	r3, [pc, #492]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_RCC_OscConfig+0x320>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	2b80      	cmp	r3, #128	; 0x80
 800684a:	d001      	beq.n	8006850 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e296      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006850:	f7fe fd9a 	bl	8005388 <HAL_GetREVID>
 8006854:	4603      	mov	r3, r0
 8006856:	f241 0203 	movw	r2, #4099	; 0x1003
 800685a:	4293      	cmp	r3, r2
 800685c:	d817      	bhi.n	800688e <HAL_RCC_OscConfig+0x35e>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	2b20      	cmp	r3, #32
 8006864:	d108      	bne.n	8006878 <HAL_RCC_OscConfig+0x348>
 8006866:	4b70      	ldr	r3, [pc, #448]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800686e:	4a6e      	ldr	r2, [pc, #440]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 8006870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006874:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006876:	e075      	b.n	8006964 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006878:	4b6b      	ldr	r3, [pc, #428]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	069b      	lsls	r3, r3, #26
 8006886:	4968      	ldr	r1, [pc, #416]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 8006888:	4313      	orrs	r3, r2
 800688a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800688c:	e06a      	b.n	8006964 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800688e:	4b66      	ldr	r3, [pc, #408]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	061b      	lsls	r3, r3, #24
 800689c:	4962      	ldr	r1, [pc, #392]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068a2:	e05f      	b.n	8006964 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d042      	beq.n	8006932 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80068ac:	4b5e      	ldr	r3, [pc, #376]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a5d      	ldr	r2, [pc, #372]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 80068b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b8:	f7fe fd36 	bl	8005328 <HAL_GetTick>
 80068bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80068c0:	f7fe fd32 	bl	8005328 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e255      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068d2:	4b55      	ldr	r3, [pc, #340]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f0      	beq.n	80068c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068de:	f7fe fd53 	bl	8005388 <HAL_GetREVID>
 80068e2:	4603      	mov	r3, r0
 80068e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d817      	bhi.n	800691c <HAL_RCC_OscConfig+0x3ec>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	d108      	bne.n	8006906 <HAL_RCC_OscConfig+0x3d6>
 80068f4:	4b4c      	ldr	r3, [pc, #304]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80068fc:	4a4a      	ldr	r2, [pc, #296]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 80068fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006902:	6053      	str	r3, [r2, #4]
 8006904:	e02e      	b.n	8006964 <HAL_RCC_OscConfig+0x434>
 8006906:	4b48      	ldr	r3, [pc, #288]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	069b      	lsls	r3, r3, #26
 8006914:	4944      	ldr	r1, [pc, #272]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 8006916:	4313      	orrs	r3, r2
 8006918:	604b      	str	r3, [r1, #4]
 800691a:	e023      	b.n	8006964 <HAL_RCC_OscConfig+0x434>
 800691c:	4b42      	ldr	r3, [pc, #264]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	061b      	lsls	r3, r3, #24
 800692a:	493f      	ldr	r1, [pc, #252]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 800692c:	4313      	orrs	r3, r2
 800692e:	60cb      	str	r3, [r1, #12]
 8006930:	e018      	b.n	8006964 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006932:	4b3d      	ldr	r3, [pc, #244]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a3c      	ldr	r2, [pc, #240]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 8006938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800693c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800693e:	f7fe fcf3 	bl	8005328 <HAL_GetTick>
 8006942:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006944:	e008      	b.n	8006958 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006946:	f7fe fcef 	bl	8005328 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	2b02      	cmp	r3, #2
 8006952:	d901      	bls.n	8006958 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e212      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006958:	4b33      	ldr	r3, [pc, #204]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1f0      	bne.n	8006946 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0308 	and.w	r3, r3, #8
 800696c:	2b00      	cmp	r3, #0
 800696e:	d036      	beq.n	80069de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d019      	beq.n	80069ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006978:	4b2b      	ldr	r3, [pc, #172]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 800697a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800697c:	4a2a      	ldr	r2, [pc, #168]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 800697e:	f043 0301 	orr.w	r3, r3, #1
 8006982:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006984:	f7fe fcd0 	bl	8005328 <HAL_GetTick>
 8006988:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800698a:	e008      	b.n	800699e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800698c:	f7fe fccc 	bl	8005328 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e1ef      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800699e:	4b22      	ldr	r3, [pc, #136]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 80069a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0f0      	beq.n	800698c <HAL_RCC_OscConfig+0x45c>
 80069aa:	e018      	b.n	80069de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069ac:	4b1e      	ldr	r3, [pc, #120]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 80069ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069b0:	4a1d      	ldr	r2, [pc, #116]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 80069b2:	f023 0301 	bic.w	r3, r3, #1
 80069b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b8:	f7fe fcb6 	bl	8005328 <HAL_GetTick>
 80069bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069c0:	f7fe fcb2 	bl	8005328 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e1d5      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069d2:	4b15      	ldr	r3, [pc, #84]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 80069d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f0      	bne.n	80069c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d039      	beq.n	8006a5e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d01c      	beq.n	8006a2c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069f2:	4b0d      	ldr	r3, [pc, #52]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a0c      	ldr	r2, [pc, #48]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 80069f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069fe:	f7fe fc93 	bl	8005328 <HAL_GetTick>
 8006a02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a04:	e008      	b.n	8006a18 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a06:	f7fe fc8f 	bl	8005328 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d901      	bls.n	8006a18 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e1b2      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a18:	4b03      	ldr	r3, [pc, #12]	; (8006a28 <HAL_RCC_OscConfig+0x4f8>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0f0      	beq.n	8006a06 <HAL_RCC_OscConfig+0x4d6>
 8006a24:	e01b      	b.n	8006a5e <HAL_RCC_OscConfig+0x52e>
 8006a26:	bf00      	nop
 8006a28:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a2c:	4b9b      	ldr	r3, [pc, #620]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a9a      	ldr	r2, [pc, #616]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006a32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a38:	f7fe fc76 	bl	8005328 <HAL_GetTick>
 8006a3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a40:	f7fe fc72 	bl	8005328 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e195      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a52:	4b92      	ldr	r3, [pc, #584]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f0      	bne.n	8006a40 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 8081 	beq.w	8006b6e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a6c:	4b8c      	ldr	r3, [pc, #560]	; (8006ca0 <HAL_RCC_OscConfig+0x770>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a8b      	ldr	r2, [pc, #556]	; (8006ca0 <HAL_RCC_OscConfig+0x770>)
 8006a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a78:	f7fe fc56 	bl	8005328 <HAL_GetTick>
 8006a7c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006a80:	f7fe fc52 	bl	8005328 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b64      	cmp	r3, #100	; 0x64
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e175      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a92:	4b83      	ldr	r3, [pc, #524]	; (8006ca0 <HAL_RCC_OscConfig+0x770>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0f0      	beq.n	8006a80 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d106      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x584>
 8006aa6:	4b7d      	ldr	r3, [pc, #500]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aaa:	4a7c      	ldr	r2, [pc, #496]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006aac:	f043 0301 	orr.w	r3, r3, #1
 8006ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ab2:	e02d      	b.n	8006b10 <HAL_RCC_OscConfig+0x5e0>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10c      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x5a6>
 8006abc:	4b77      	ldr	r3, [pc, #476]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac0:	4a76      	ldr	r2, [pc, #472]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006ac2:	f023 0301 	bic.w	r3, r3, #1
 8006ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ac8:	4b74      	ldr	r3, [pc, #464]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006acc:	4a73      	ldr	r2, [pc, #460]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006ace:	f023 0304 	bic.w	r3, r3, #4
 8006ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ad4:	e01c      	b.n	8006b10 <HAL_RCC_OscConfig+0x5e0>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	2b05      	cmp	r3, #5
 8006adc:	d10c      	bne.n	8006af8 <HAL_RCC_OscConfig+0x5c8>
 8006ade:	4b6f      	ldr	r3, [pc, #444]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae2:	4a6e      	ldr	r2, [pc, #440]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006ae4:	f043 0304 	orr.w	r3, r3, #4
 8006ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8006aea:	4b6c      	ldr	r3, [pc, #432]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aee:	4a6b      	ldr	r2, [pc, #428]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006af0:	f043 0301 	orr.w	r3, r3, #1
 8006af4:	6713      	str	r3, [r2, #112]	; 0x70
 8006af6:	e00b      	b.n	8006b10 <HAL_RCC_OscConfig+0x5e0>
 8006af8:	4b68      	ldr	r3, [pc, #416]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afc:	4a67      	ldr	r2, [pc, #412]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006afe:	f023 0301 	bic.w	r3, r3, #1
 8006b02:	6713      	str	r3, [r2, #112]	; 0x70
 8006b04:	4b65      	ldr	r3, [pc, #404]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b08:	4a64      	ldr	r2, [pc, #400]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006b0a:	f023 0304 	bic.w	r3, r3, #4
 8006b0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d015      	beq.n	8006b44 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b18:	f7fe fc06 	bl	8005328 <HAL_GetTick>
 8006b1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b1e:	e00a      	b.n	8006b36 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b20:	f7fe fc02 	bl	8005328 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e123      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b36:	4b59      	ldr	r3, [pc, #356]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d0ee      	beq.n	8006b20 <HAL_RCC_OscConfig+0x5f0>
 8006b42:	e014      	b.n	8006b6e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b44:	f7fe fbf0 	bl	8005328 <HAL_GetTick>
 8006b48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b4a:	e00a      	b.n	8006b62 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b4c:	f7fe fbec 	bl	8005328 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e10d      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b62:	4b4e      	ldr	r3, [pc, #312]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1ee      	bne.n	8006b4c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 8102 	beq.w	8006d7c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b78:	4b48      	ldr	r3, [pc, #288]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b80:	2b18      	cmp	r3, #24
 8006b82:	f000 80bd 	beq.w	8006d00 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	f040 809e 	bne.w	8006ccc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b90:	4b42      	ldr	r3, [pc, #264]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a41      	ldr	r2, [pc, #260]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9c:	f7fe fbc4 	bl	8005328 <HAL_GetTick>
 8006ba0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ba4:	f7fe fbc0 	bl	8005328 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e0e3      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bb6:	4b39      	ldr	r3, [pc, #228]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1f0      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bc2:	4b36      	ldr	r3, [pc, #216]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bc6:	4b37      	ldr	r3, [pc, #220]	; (8006ca4 <HAL_RCC_OscConfig+0x774>)
 8006bc8:	4013      	ands	r3, r2
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006bd2:	0112      	lsls	r2, r2, #4
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	4931      	ldr	r1, [pc, #196]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	628b      	str	r3, [r1, #40]	; 0x28
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be0:	3b01      	subs	r3, #1
 8006be2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bea:	3b01      	subs	r3, #1
 8006bec:	025b      	lsls	r3, r3, #9
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	041b      	lsls	r3, r3, #16
 8006bfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c04:	3b01      	subs	r3, #1
 8006c06:	061b      	lsls	r3, r3, #24
 8006c08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c0c:	4923      	ldr	r1, [pc, #140]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006c12:	4b22      	ldr	r3, [pc, #136]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c16:	4a21      	ldr	r2, [pc, #132]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c18:	f023 0301 	bic.w	r3, r3, #1
 8006c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c1e:	4b1f      	ldr	r3, [pc, #124]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c22:	4b21      	ldr	r3, [pc, #132]	; (8006ca8 <HAL_RCC_OscConfig+0x778>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006c2a:	00d2      	lsls	r2, r2, #3
 8006c2c:	491b      	ldr	r1, [pc, #108]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006c32:	4b1a      	ldr	r3, [pc, #104]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	f023 020c 	bic.w	r2, r3, #12
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	4917      	ldr	r1, [pc, #92]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006c44:	4b15      	ldr	r3, [pc, #84]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	f023 0202 	bic.w	r2, r3, #2
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c50:	4912      	ldr	r1, [pc, #72]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c56:	4b11      	ldr	r3, [pc, #68]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5a:	4a10      	ldr	r2, [pc, #64]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c62:	4b0e      	ldr	r3, [pc, #56]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	4a0d      	ldr	r2, [pc, #52]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c6e:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c72:	4a0a      	ldr	r2, [pc, #40]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006c7a:	4b08      	ldr	r3, [pc, #32]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7e:	4a07      	ldr	r2, [pc, #28]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c80:	f043 0301 	orr.w	r3, r3, #1
 8006c84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c86:	4b05      	ldr	r3, [pc, #20]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a04      	ldr	r2, [pc, #16]	; (8006c9c <HAL_RCC_OscConfig+0x76c>)
 8006c8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c92:	f7fe fb49 	bl	8005328 <HAL_GetTick>
 8006c96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c98:	e011      	b.n	8006cbe <HAL_RCC_OscConfig+0x78e>
 8006c9a:	bf00      	nop
 8006c9c:	58024400 	.word	0x58024400
 8006ca0:	58024800 	.word	0x58024800
 8006ca4:	fffffc0c 	.word	0xfffffc0c
 8006ca8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cac:	f7fe fb3c 	bl	8005328 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e05f      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cbe:	4b32      	ldr	r3, [pc, #200]	; (8006d88 <HAL_RCC_OscConfig+0x858>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0f0      	beq.n	8006cac <HAL_RCC_OscConfig+0x77c>
 8006cca:	e057      	b.n	8006d7c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ccc:	4b2e      	ldr	r3, [pc, #184]	; (8006d88 <HAL_RCC_OscConfig+0x858>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a2d      	ldr	r2, [pc, #180]	; (8006d88 <HAL_RCC_OscConfig+0x858>)
 8006cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd8:	f7fe fb26 	bl	8005328 <HAL_GetTick>
 8006cdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cde:	e008      	b.n	8006cf2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ce0:	f7fe fb22 	bl	8005328 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d901      	bls.n	8006cf2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e045      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cf2:	4b25      	ldr	r3, [pc, #148]	; (8006d88 <HAL_RCC_OscConfig+0x858>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1f0      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x7b0>
 8006cfe:	e03d      	b.n	8006d7c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d00:	4b21      	ldr	r3, [pc, #132]	; (8006d88 <HAL_RCC_OscConfig+0x858>)
 8006d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d06:	4b20      	ldr	r3, [pc, #128]	; (8006d88 <HAL_RCC_OscConfig+0x858>)
 8006d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d031      	beq.n	8006d78 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f003 0203 	and.w	r2, r3, #3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d12a      	bne.n	8006d78 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	091b      	lsrs	r3, r3, #4
 8006d26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d122      	bne.n	8006d78 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d11a      	bne.n	8006d78 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	0a5b      	lsrs	r3, r3, #9
 8006d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d111      	bne.n	8006d78 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	0c1b      	lsrs	r3, r3, #16
 8006d58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d60:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d108      	bne.n	8006d78 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	0e1b      	lsrs	r3, r3, #24
 8006d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d001      	beq.n	8006d7c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3730      	adds	r7, #48	; 0x30
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	58024400 	.word	0x58024400

08006d8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e19c      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006da0:	4b8a      	ldr	r3, [pc, #552]	; (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d910      	bls.n	8006dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dae:	4b87      	ldr	r3, [pc, #540]	; (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f023 020f 	bic.w	r2, r3, #15
 8006db6:	4985      	ldr	r1, [pc, #532]	; (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dbe:	4b83      	ldr	r3, [pc, #524]	; (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d001      	beq.n	8006dd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e184      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d010      	beq.n	8006dfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	691a      	ldr	r2, [r3, #16]
 8006de0:	4b7b      	ldr	r3, [pc, #492]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d908      	bls.n	8006dfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006dec:	4b78      	ldr	r3, [pc, #480]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	4975      	ldr	r1, [pc, #468]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0308 	and.w	r3, r3, #8
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d010      	beq.n	8006e2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	695a      	ldr	r2, [r3, #20]
 8006e0e:	4b70      	ldr	r3, [pc, #448]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d908      	bls.n	8006e2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e1a:	4b6d      	ldr	r3, [pc, #436]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	496a      	ldr	r1, [pc, #424]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0310 	and.w	r3, r3, #16
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d010      	beq.n	8006e5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	699a      	ldr	r2, [r3, #24]
 8006e3c:	4b64      	ldr	r3, [pc, #400]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d908      	bls.n	8006e5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e48:	4b61      	ldr	r3, [pc, #388]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	495e      	ldr	r1, [pc, #376]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d010      	beq.n	8006e88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69da      	ldr	r2, [r3, #28]
 8006e6a:	4b59      	ldr	r3, [pc, #356]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d908      	bls.n	8006e88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006e76:	4b56      	ldr	r3, [pc, #344]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	4953      	ldr	r1, [pc, #332]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d010      	beq.n	8006eb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	4b4d      	ldr	r3, [pc, #308]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d908      	bls.n	8006eb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ea4:	4b4a      	ldr	r3, [pc, #296]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	f023 020f 	bic.w	r2, r3, #15
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	4947      	ldr	r1, [pc, #284]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d055      	beq.n	8006f6e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006ec2:	4b43      	ldr	r3, [pc, #268]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	4940      	ldr	r1, [pc, #256]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d107      	bne.n	8006eec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006edc:	4b3c      	ldr	r3, [pc, #240]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d121      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e0f6      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d107      	bne.n	8006f04 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ef4:	4b36      	ldr	r3, [pc, #216]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d115      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e0ea      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d107      	bne.n	8006f1c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f0c:	4b30      	ldr	r3, [pc, #192]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d109      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e0de      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f1c:	4b2c      	ldr	r3, [pc, #176]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e0d6      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f2c:	4b28      	ldr	r3, [pc, #160]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	f023 0207 	bic.w	r2, r3, #7
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	4925      	ldr	r1, [pc, #148]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f3e:	f7fe f9f3 	bl	8005328 <HAL_GetTick>
 8006f42:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f44:	e00a      	b.n	8006f5c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f46:	f7fe f9ef 	bl	8005328 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e0be      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f5c:	4b1c      	ldr	r3, [pc, #112]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d1eb      	bne.n	8006f46 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d010      	beq.n	8006f9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	4b14      	ldr	r3, [pc, #80]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	f003 030f 	and.w	r3, r3, #15
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d208      	bcs.n	8006f9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f8a:	4b11      	ldr	r3, [pc, #68]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	f023 020f 	bic.w	r2, r3, #15
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	490e      	ldr	r1, [pc, #56]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f9c:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 030f 	and.w	r3, r3, #15
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d214      	bcs.n	8006fd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006faa:	4b08      	ldr	r3, [pc, #32]	; (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f023 020f 	bic.w	r2, r3, #15
 8006fb2:	4906      	ldr	r1, [pc, #24]	; (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fba:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 030f 	and.w	r3, r3, #15
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d005      	beq.n	8006fd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e086      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
 8006fcc:	52002000 	.word	0x52002000
 8006fd0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d010      	beq.n	8007002 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691a      	ldr	r2, [r3, #16]
 8006fe4:	4b3f      	ldr	r3, [pc, #252]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d208      	bcs.n	8007002 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ff0:	4b3c      	ldr	r3, [pc, #240]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	4939      	ldr	r1, [pc, #228]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0308 	and.w	r3, r3, #8
 800700a:	2b00      	cmp	r3, #0
 800700c:	d010      	beq.n	8007030 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	695a      	ldr	r2, [r3, #20]
 8007012:	4b34      	ldr	r3, [pc, #208]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800701a:	429a      	cmp	r2, r3
 800701c:	d208      	bcs.n	8007030 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800701e:	4b31      	ldr	r3, [pc, #196]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	492e      	ldr	r1, [pc, #184]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 800702c:	4313      	orrs	r3, r2
 800702e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0310 	and.w	r3, r3, #16
 8007038:	2b00      	cmp	r3, #0
 800703a:	d010      	beq.n	800705e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	699a      	ldr	r2, [r3, #24]
 8007040:	4b28      	ldr	r3, [pc, #160]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007048:	429a      	cmp	r2, r3
 800704a:	d208      	bcs.n	800705e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800704c:	4b25      	ldr	r3, [pc, #148]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	4922      	ldr	r1, [pc, #136]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 800705a:	4313      	orrs	r3, r2
 800705c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d010      	beq.n	800708c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	69da      	ldr	r2, [r3, #28]
 800706e:	4b1d      	ldr	r3, [pc, #116]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007076:	429a      	cmp	r2, r3
 8007078:	d208      	bcs.n	800708c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800707a:	4b1a      	ldr	r3, [pc, #104]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	4917      	ldr	r1, [pc, #92]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007088:	4313      	orrs	r3, r2
 800708a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800708c:	f000 f834 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 8007090:	4602      	mov	r2, r0
 8007092:	4b14      	ldr	r3, [pc, #80]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	0a1b      	lsrs	r3, r3, #8
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	4912      	ldr	r1, [pc, #72]	; (80070e8 <HAL_RCC_ClockConfig+0x35c>)
 800709e:	5ccb      	ldrb	r3, [r1, r3]
 80070a0:	f003 031f 	and.w	r3, r3, #31
 80070a4:	fa22 f303 	lsr.w	r3, r2, r3
 80070a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070aa:	4b0e      	ldr	r3, [pc, #56]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	4a0d      	ldr	r2, [pc, #52]	; (80070e8 <HAL_RCC_ClockConfig+0x35c>)
 80070b4:	5cd3      	ldrb	r3, [r2, r3]
 80070b6:	f003 031f 	and.w	r3, r3, #31
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	fa22 f303 	lsr.w	r3, r2, r3
 80070c0:	4a0a      	ldr	r2, [pc, #40]	; (80070ec <HAL_RCC_ClockConfig+0x360>)
 80070c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070c4:	4a0a      	ldr	r2, [pc, #40]	; (80070f0 <HAL_RCC_ClockConfig+0x364>)
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80070ca:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <HAL_RCC_ClockConfig+0x368>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe f8e0 	bl	8005294 <HAL_InitTick>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	58024400 	.word	0x58024400
 80070e8:	08012fe4 	.word	0x08012fe4
 80070ec:	24000004 	.word	0x24000004
 80070f0:	24000000 	.word	0x24000000
 80070f4:	24000010 	.word	0x24000010

080070f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b089      	sub	sp, #36	; 0x24
 80070fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070fe:	4bb3      	ldr	r3, [pc, #716]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007106:	2b18      	cmp	r3, #24
 8007108:	f200 8155 	bhi.w	80073b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800710c:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <HAL_RCC_GetSysClockFreq+0x1c>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	08007179 	.word	0x08007179
 8007118:	080073b7 	.word	0x080073b7
 800711c:	080073b7 	.word	0x080073b7
 8007120:	080073b7 	.word	0x080073b7
 8007124:	080073b7 	.word	0x080073b7
 8007128:	080073b7 	.word	0x080073b7
 800712c:	080073b7 	.word	0x080073b7
 8007130:	080073b7 	.word	0x080073b7
 8007134:	0800719f 	.word	0x0800719f
 8007138:	080073b7 	.word	0x080073b7
 800713c:	080073b7 	.word	0x080073b7
 8007140:	080073b7 	.word	0x080073b7
 8007144:	080073b7 	.word	0x080073b7
 8007148:	080073b7 	.word	0x080073b7
 800714c:	080073b7 	.word	0x080073b7
 8007150:	080073b7 	.word	0x080073b7
 8007154:	080071a5 	.word	0x080071a5
 8007158:	080073b7 	.word	0x080073b7
 800715c:	080073b7 	.word	0x080073b7
 8007160:	080073b7 	.word	0x080073b7
 8007164:	080073b7 	.word	0x080073b7
 8007168:	080073b7 	.word	0x080073b7
 800716c:	080073b7 	.word	0x080073b7
 8007170:	080073b7 	.word	0x080073b7
 8007174:	080071ab 	.word	0x080071ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007178:	4b94      	ldr	r3, [pc, #592]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b00      	cmp	r3, #0
 8007182:	d009      	beq.n	8007198 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007184:	4b91      	ldr	r3, [pc, #580]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	08db      	lsrs	r3, r3, #3
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	4a90      	ldr	r2, [pc, #576]	; (80073d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007190:	fa22 f303 	lsr.w	r3, r2, r3
 8007194:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007196:	e111      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007198:	4b8d      	ldr	r3, [pc, #564]	; (80073d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800719a:	61bb      	str	r3, [r7, #24]
    break;
 800719c:	e10e      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800719e:	4b8d      	ldr	r3, [pc, #564]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80071a0:	61bb      	str	r3, [r7, #24]
    break;
 80071a2:	e10b      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80071a4:	4b8c      	ldr	r3, [pc, #560]	; (80073d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80071a6:	61bb      	str	r3, [r7, #24]
    break;
 80071a8:	e108      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071aa:	4b88      	ldr	r3, [pc, #544]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80071b4:	4b85      	ldr	r3, [pc, #532]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b8:	091b      	lsrs	r3, r3, #4
 80071ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80071c0:	4b82      	ldr	r3, [pc, #520]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80071ca:	4b80      	ldr	r3, [pc, #512]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ce:	08db      	lsrs	r3, r3, #3
 80071d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	fb02 f303 	mul.w	r3, r2, r3
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80e1 	beq.w	80073b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	f000 8083 	beq.w	80072fc <HAL_RCC_GetSysClockFreq+0x204>
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	f200 80a1 	bhi.w	8007340 <HAL_RCC_GetSysClockFreq+0x248>
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <HAL_RCC_GetSysClockFreq+0x114>
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d056      	beq.n	80072b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800720a:	e099      	b.n	8007340 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800720c:	4b6f      	ldr	r3, [pc, #444]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b00      	cmp	r3, #0
 8007216:	d02d      	beq.n	8007274 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007218:	4b6c      	ldr	r3, [pc, #432]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	08db      	lsrs	r3, r3, #3
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	4a6b      	ldr	r2, [pc, #428]	; (80073d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
 8007228:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	ee07 3a90 	vmov	s15, r3
 8007230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007242:	4b62      	ldr	r3, [pc, #392]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007252:	ed97 6a02 	vldr	s12, [r7, #8]
 8007256:	eddf 5a61 	vldr	s11, [pc, #388]	; 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800725a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007272:	e087      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80073e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007286:	4b51      	ldr	r3, [pc, #324]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007296:	ed97 6a02 	vldr	s12, [r7, #8]
 800729a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800729e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072b6:	e065      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80073e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ca:	4b40      	ldr	r3, [pc, #256]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072da:	ed97 6a02 	vldr	s12, [r7, #8]
 80072de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80072e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072fa:	e043      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007306:	eddf 6a38 	vldr	s13, [pc, #224]	; 80073e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800730a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800730e:	4b2f      	ldr	r3, [pc, #188]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007322:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800732a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800732e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800733e:	e021      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80073e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800734e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007352:	4b1e      	ldr	r3, [pc, #120]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007362:	ed97 6a02 	vldr	s12, [r7, #8]
 8007366:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800736a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800736e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800737a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007382:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007384:	4b11      	ldr	r3, [pc, #68]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007388:	0a5b      	lsrs	r3, r3, #9
 800738a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800738e:	3301      	adds	r3, #1
 8007390:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	ee07 3a90 	vmov	s15, r3
 8007398:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800739c:	edd7 6a07 	vldr	s13, [r7, #28]
 80073a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a8:	ee17 3a90 	vmov	r3, s15
 80073ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80073ae:	e005      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	61bb      	str	r3, [r7, #24]
    break;
 80073b4:	e002      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80073b6:	4b07      	ldr	r3, [pc, #28]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073b8:	61bb      	str	r3, [r7, #24]
    break;
 80073ba:	bf00      	nop
  }

  return sysclockfreq;
 80073bc:	69bb      	ldr	r3, [r7, #24]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3724      	adds	r7, #36	; 0x24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	58024400 	.word	0x58024400
 80073d0:	03d09000 	.word	0x03d09000
 80073d4:	003d0900 	.word	0x003d0900
 80073d8:	007a1200 	.word	0x007a1200
 80073dc:	46000000 	.word	0x46000000
 80073e0:	4c742400 	.word	0x4c742400
 80073e4:	4a742400 	.word	0x4a742400
 80073e8:	4af42400 	.word	0x4af42400

080073ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80073f2:	f7ff fe81 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 80073f6:	4602      	mov	r2, r0
 80073f8:	4b10      	ldr	r3, [pc, #64]	; (800743c <HAL_RCC_GetHCLKFreq+0x50>)
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	0a1b      	lsrs	r3, r3, #8
 80073fe:	f003 030f 	and.w	r3, r3, #15
 8007402:	490f      	ldr	r1, [pc, #60]	; (8007440 <HAL_RCC_GetHCLKFreq+0x54>)
 8007404:	5ccb      	ldrb	r3, [r1, r3]
 8007406:	f003 031f 	and.w	r3, r3, #31
 800740a:	fa22 f303 	lsr.w	r3, r2, r3
 800740e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007410:	4b0a      	ldr	r3, [pc, #40]	; (800743c <HAL_RCC_GetHCLKFreq+0x50>)
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	4a09      	ldr	r2, [pc, #36]	; (8007440 <HAL_RCC_GetHCLKFreq+0x54>)
 800741a:	5cd3      	ldrb	r3, [r2, r3]
 800741c:	f003 031f 	and.w	r3, r3, #31
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	fa22 f303 	lsr.w	r3, r2, r3
 8007426:	4a07      	ldr	r2, [pc, #28]	; (8007444 <HAL_RCC_GetHCLKFreq+0x58>)
 8007428:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800742a:	4a07      	ldr	r2, [pc, #28]	; (8007448 <HAL_RCC_GetHCLKFreq+0x5c>)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007430:	4b04      	ldr	r3, [pc, #16]	; (8007444 <HAL_RCC_GetHCLKFreq+0x58>)
 8007432:	681b      	ldr	r3, [r3, #0]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	58024400 	.word	0x58024400
 8007440:	08012fe4 	.word	0x08012fe4
 8007444:	24000004 	.word	0x24000004
 8007448:	24000000 	.word	0x24000000

0800744c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007450:	f7ff ffcc 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8007454:	4602      	mov	r2, r0
 8007456:	4b06      	ldr	r3, [pc, #24]	; (8007470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	091b      	lsrs	r3, r3, #4
 800745c:	f003 0307 	and.w	r3, r3, #7
 8007460:	4904      	ldr	r1, [pc, #16]	; (8007474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007462:	5ccb      	ldrb	r3, [r1, r3]
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800746c:	4618      	mov	r0, r3
 800746e:	bd80      	pop	{r7, pc}
 8007470:	58024400 	.word	0x58024400
 8007474:	08012fe4 	.word	0x08012fe4

08007478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800747c:	f7ff ffb6 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8007480:	4602      	mov	r2, r0
 8007482:	4b06      	ldr	r3, [pc, #24]	; (800749c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	0a1b      	lsrs	r3, r3, #8
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	4904      	ldr	r1, [pc, #16]	; (80074a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800748e:	5ccb      	ldrb	r3, [r1, r3]
 8007490:	f003 031f 	and.w	r3, r3, #31
 8007494:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007498:	4618      	mov	r0, r3
 800749a:	bd80      	pop	{r7, pc}
 800749c:	58024400 	.word	0x58024400
 80074a0:	08012fe4 	.word	0x08012fe4

080074a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80074ac:	2300      	movs	r3, #0
 80074ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80074b0:	2300      	movs	r3, #0
 80074b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d03f      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074c8:	d02a      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80074ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074ce:	d824      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80074d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074d4:	d018      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80074d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074da:	d81e      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80074e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074e4:	d007      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80074e6:	e018      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e8:	4ba3      	ldr	r3, [pc, #652]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	4aa2      	ldr	r2, [pc, #648]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80074f4:	e015      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3304      	adds	r3, #4
 80074fa:	2102      	movs	r1, #2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f001 f9d5 	bl	80088ac <RCCEx_PLL2_Config>
 8007502:	4603      	mov	r3, r0
 8007504:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007506:	e00c      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3324      	adds	r3, #36	; 0x24
 800750c:	2102      	movs	r1, #2
 800750e:	4618      	mov	r0, r3
 8007510:	f001 fa7e 	bl	8008a10 <RCCEx_PLL3_Config>
 8007514:	4603      	mov	r3, r0
 8007516:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007518:	e003      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	75fb      	strb	r3, [r7, #23]
      break;
 800751e:	e000      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d109      	bne.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007528:	4b93      	ldr	r3, [pc, #588]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800752a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800752c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007534:	4990      	ldr	r1, [pc, #576]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007536:	4313      	orrs	r3, r2
 8007538:	650b      	str	r3, [r1, #80]	; 0x50
 800753a:	e001      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753c:	7dfb      	ldrb	r3, [r7, #23]
 800753e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007548:	2b00      	cmp	r3, #0
 800754a:	d03d      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007550:	2b04      	cmp	r3, #4
 8007552:	d826      	bhi.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007554:	a201      	add	r2, pc, #4	; (adr r2, 800755c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	08007571 	.word	0x08007571
 8007560:	0800757f 	.word	0x0800757f
 8007564:	08007591 	.word	0x08007591
 8007568:	080075a9 	.word	0x080075a9
 800756c:	080075a9 	.word	0x080075a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007570:	4b81      	ldr	r3, [pc, #516]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007574:	4a80      	ldr	r2, [pc, #512]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800757a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800757c:	e015      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	3304      	adds	r3, #4
 8007582:	2100      	movs	r1, #0
 8007584:	4618      	mov	r0, r3
 8007586:	f001 f991 	bl	80088ac <RCCEx_PLL2_Config>
 800758a:	4603      	mov	r3, r0
 800758c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800758e:	e00c      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3324      	adds	r3, #36	; 0x24
 8007594:	2100      	movs	r1, #0
 8007596:	4618      	mov	r0, r3
 8007598:	f001 fa3a 	bl	8008a10 <RCCEx_PLL3_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075a0:	e003      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	75fb      	strb	r3, [r7, #23]
      break;
 80075a6:	e000      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80075a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075aa:	7dfb      	ldrb	r3, [r7, #23]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d109      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075b0:	4b71      	ldr	r3, [pc, #452]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80075b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b4:	f023 0207 	bic.w	r2, r3, #7
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075bc:	496e      	ldr	r1, [pc, #440]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	650b      	str	r3, [r1, #80]	; 0x50
 80075c2:	e001      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c4:	7dfb      	ldrb	r3, [r7, #23]
 80075c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d042      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075dc:	d02b      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80075de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e2:	d825      	bhi.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80075e4:	2bc0      	cmp	r3, #192	; 0xc0
 80075e6:	d028      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80075e8:	2bc0      	cmp	r3, #192	; 0xc0
 80075ea:	d821      	bhi.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80075ec:	2b80      	cmp	r3, #128	; 0x80
 80075ee:	d016      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80075f0:	2b80      	cmp	r3, #128	; 0x80
 80075f2:	d81d      	bhi.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80075f8:	2b40      	cmp	r3, #64	; 0x40
 80075fa:	d007      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x168>
 80075fc:	e018      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075fe:	4b5e      	ldr	r3, [pc, #376]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007602:	4a5d      	ldr	r2, [pc, #372]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007608:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800760a:	e017      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	3304      	adds	r3, #4
 8007610:	2100      	movs	r1, #0
 8007612:	4618      	mov	r0, r3
 8007614:	f001 f94a 	bl	80088ac <RCCEx_PLL2_Config>
 8007618:	4603      	mov	r3, r0
 800761a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800761c:	e00e      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3324      	adds	r3, #36	; 0x24
 8007622:	2100      	movs	r1, #0
 8007624:	4618      	mov	r0, r3
 8007626:	f001 f9f3 	bl	8008a10 <RCCEx_PLL3_Config>
 800762a:	4603      	mov	r3, r0
 800762c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800762e:	e005      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	75fb      	strb	r3, [r7, #23]
      break;
 8007634:	e002      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007636:	bf00      	nop
 8007638:	e000      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800763a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800763c:	7dfb      	ldrb	r3, [r7, #23]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d109      	bne.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007642:	4b4d      	ldr	r3, [pc, #308]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007646:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764e:	494a      	ldr	r1, [pc, #296]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007650:	4313      	orrs	r3, r2
 8007652:	650b      	str	r3, [r1, #80]	; 0x50
 8007654:	e001      	b.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007656:	7dfb      	ldrb	r3, [r7, #23]
 8007658:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007662:	2b00      	cmp	r3, #0
 8007664:	d049      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800766c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007670:	d030      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007672:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007676:	d82a      	bhi.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007678:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800767c:	d02c      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800767e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007682:	d824      	bhi.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007688:	d018      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800768a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800768e:	d81e      	bhi.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007694:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007698:	d007      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800769a:	e018      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800769c:	4b36      	ldr	r3, [pc, #216]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a0:	4a35      	ldr	r2, [pc, #212]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076a8:	e017      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3304      	adds	r3, #4
 80076ae:	2100      	movs	r1, #0
 80076b0:	4618      	mov	r0, r3
 80076b2:	f001 f8fb 	bl	80088ac <RCCEx_PLL2_Config>
 80076b6:	4603      	mov	r3, r0
 80076b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80076ba:	e00e      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3324      	adds	r3, #36	; 0x24
 80076c0:	2100      	movs	r1, #0
 80076c2:	4618      	mov	r0, r3
 80076c4:	f001 f9a4 	bl	8008a10 <RCCEx_PLL3_Config>
 80076c8:	4603      	mov	r3, r0
 80076ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076cc:	e005      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	75fb      	strb	r3, [r7, #23]
      break;
 80076d2:	e002      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80076d4:	bf00      	nop
 80076d6:	e000      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80076d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10a      	bne.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80076e0:	4b25      	ldr	r3, [pc, #148]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80076ee:	4922      	ldr	r1, [pc, #136]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	658b      	str	r3, [r1, #88]	; 0x58
 80076f4:	e001      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
 80076f8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007702:	2b00      	cmp	r3, #0
 8007704:	d04b      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800770c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007710:	d030      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007712:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007716:	d82a      	bhi.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007718:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800771c:	d02e      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800771e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007722:	d824      	bhi.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007724:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007728:	d018      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800772a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800772e:	d81e      	bhi.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007738:	d007      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800773a:	e018      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800773c:	4b0e      	ldr	r3, [pc, #56]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	4a0d      	ldr	r2, [pc, #52]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007746:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007748:	e019      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3304      	adds	r3, #4
 800774e:	2100      	movs	r1, #0
 8007750:	4618      	mov	r0, r3
 8007752:	f001 f8ab 	bl	80088ac <RCCEx_PLL2_Config>
 8007756:	4603      	mov	r3, r0
 8007758:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800775a:	e010      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3324      	adds	r3, #36	; 0x24
 8007760:	2100      	movs	r1, #0
 8007762:	4618      	mov	r0, r3
 8007764:	f001 f954 	bl	8008a10 <RCCEx_PLL3_Config>
 8007768:	4603      	mov	r3, r0
 800776a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800776c:	e007      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	75fb      	strb	r3, [r7, #23]
      break;
 8007772:	e004      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007774:	bf00      	nop
 8007776:	e002      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007778:	58024400 	.word	0x58024400
      break;
 800777c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10a      	bne.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007784:	4b99      	ldr	r3, [pc, #612]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007788:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007792:	4996      	ldr	r1, [pc, #600]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007794:	4313      	orrs	r3, r2
 8007796:	658b      	str	r3, [r1, #88]	; 0x58
 8007798:	e001      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779a:	7dfb      	ldrb	r3, [r7, #23]
 800779c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d032      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ae:	2b30      	cmp	r3, #48	; 0x30
 80077b0:	d01c      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x348>
 80077b2:	2b30      	cmp	r3, #48	; 0x30
 80077b4:	d817      	bhi.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d00c      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80077ba:	2b20      	cmp	r3, #32
 80077bc:	d813      	bhi.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d016      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80077c2:	2b10      	cmp	r3, #16
 80077c4:	d10f      	bne.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077c6:	4b89      	ldr	r3, [pc, #548]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80077c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ca:	4a88      	ldr	r2, [pc, #544]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80077cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80077d2:	e00e      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3304      	adds	r3, #4
 80077d8:	2102      	movs	r1, #2
 80077da:	4618      	mov	r0, r3
 80077dc:	f001 f866 	bl	80088ac <RCCEx_PLL2_Config>
 80077e0:	4603      	mov	r3, r0
 80077e2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80077e4:	e005      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	75fb      	strb	r3, [r7, #23]
      break;
 80077ea:	e002      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80077ec:	bf00      	nop
 80077ee:	e000      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80077f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d109      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80077f8:	4b7c      	ldr	r3, [pc, #496]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80077fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007804:	4979      	ldr	r1, [pc, #484]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007806:	4313      	orrs	r3, r2
 8007808:	64cb      	str	r3, [r1, #76]	; 0x4c
 800780a:	e001      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780c:	7dfb      	ldrb	r3, [r7, #23]
 800780e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d047      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007820:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007824:	d030      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007826:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800782a:	d82a      	bhi.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800782c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007830:	d02c      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007832:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007836:	d824      	bhi.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800783c:	d018      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800783e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007842:	d81e      	bhi.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800784c:	d007      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800784e:	e018      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007850:	4b66      	ldr	r3, [pc, #408]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007854:	4a65      	ldr	r2, [pc, #404]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800785a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800785c:	e017      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	3304      	adds	r3, #4
 8007862:	2100      	movs	r1, #0
 8007864:	4618      	mov	r0, r3
 8007866:	f001 f821 	bl	80088ac <RCCEx_PLL2_Config>
 800786a:	4603      	mov	r3, r0
 800786c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800786e:	e00e      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3324      	adds	r3, #36	; 0x24
 8007874:	2100      	movs	r1, #0
 8007876:	4618      	mov	r0, r3
 8007878:	f001 f8ca 	bl	8008a10 <RCCEx_PLL3_Config>
 800787c:	4603      	mov	r3, r0
 800787e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007880:	e005      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	75fb      	strb	r3, [r7, #23]
      break;
 8007886:	e002      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007888:	bf00      	nop
 800788a:	e000      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800788c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800788e:	7dfb      	ldrb	r3, [r7, #23]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d109      	bne.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007894:	4b55      	ldr	r3, [pc, #340]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007898:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a0:	4952      	ldr	r1, [pc, #328]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	650b      	str	r3, [r1, #80]	; 0x50
 80078a6:	e001      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a8:	7dfb      	ldrb	r3, [r7, #23]
 80078aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d049      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078c0:	d02e      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80078c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078c6:	d828      	bhi.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80078c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078cc:	d02a      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80078ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078d2:	d822      	bhi.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80078d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078d8:	d026      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80078da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078de:	d81c      	bhi.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80078e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078e4:	d010      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80078e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078ea:	d816      	bhi.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d01d      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x488>
 80078f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f4:	d111      	bne.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	3304      	adds	r3, #4
 80078fa:	2101      	movs	r1, #1
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 ffd5 	bl	80088ac <RCCEx_PLL2_Config>
 8007902:	4603      	mov	r3, r0
 8007904:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007906:	e012      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	3324      	adds	r3, #36	; 0x24
 800790c:	2101      	movs	r1, #1
 800790e:	4618      	mov	r0, r3
 8007910:	f001 f87e 	bl	8008a10 <RCCEx_PLL3_Config>
 8007914:	4603      	mov	r3, r0
 8007916:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007918:	e009      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	75fb      	strb	r3, [r7, #23]
      break;
 800791e:	e006      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007920:	bf00      	nop
 8007922:	e004      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007924:	bf00      	nop
 8007926:	e002      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007928:	bf00      	nop
 800792a:	e000      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800792c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800792e:	7dfb      	ldrb	r3, [r7, #23]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d109      	bne.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007934:	4b2d      	ldr	r3, [pc, #180]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007938:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007940:	492a      	ldr	r1, [pc, #168]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007942:	4313      	orrs	r3, r2
 8007944:	650b      	str	r3, [r1, #80]	; 0x50
 8007946:	e001      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007948:	7dfb      	ldrb	r3, [r7, #23]
 800794a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d04d      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800795e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007962:	d02e      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007964:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007968:	d828      	bhi.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x518>
 800796a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800796e:	d02a      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007974:	d822      	bhi.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007976:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800797a:	d026      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x526>
 800797c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007980:	d81c      	bhi.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007986:	d010      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800798c:	d816      	bhi.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x518>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d01d      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007992:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007996:	d111      	bne.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3304      	adds	r3, #4
 800799c:	2101      	movs	r1, #1
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 ff84 	bl	80088ac <RCCEx_PLL2_Config>
 80079a4:	4603      	mov	r3, r0
 80079a6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80079a8:	e012      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	3324      	adds	r3, #36	; 0x24
 80079ae:	2101      	movs	r1, #1
 80079b0:	4618      	mov	r0, r3
 80079b2:	f001 f82d 	bl	8008a10 <RCCEx_PLL3_Config>
 80079b6:	4603      	mov	r3, r0
 80079b8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80079ba:	e009      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]
      break;
 80079c0:	e006      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80079c2:	bf00      	nop
 80079c4:	e004      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80079c6:	bf00      	nop
 80079c8:	e002      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80079ca:	bf00      	nop
 80079cc:	e000      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80079ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10c      	bne.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80079d6:	4b05      	ldr	r3, [pc, #20]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80079d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80079e4:	4901      	ldr	r1, [pc, #4]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	658b      	str	r3, [r1, #88]	; 0x58
 80079ea:	e003      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80079ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
 80079f2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d02f      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a08:	d00e      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a0e:	d814      	bhi.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d015      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007a14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a18:	d10f      	bne.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a1a:	4baf      	ldr	r3, [pc, #700]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1e:	4aae      	ldr	r2, [pc, #696]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007a26:	e00c      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 ff3c 	bl	80088ac <RCCEx_PLL2_Config>
 8007a34:	4603      	mov	r3, r0
 8007a36:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007a38:	e003      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a3e:	e000      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d109      	bne.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a48:	4ba3      	ldr	r3, [pc, #652]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a54:	49a0      	ldr	r1, [pc, #640]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	650b      	str	r3, [r1, #80]	; 0x50
 8007a5a:	e001      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5c:	7dfb      	ldrb	r3, [r7, #23]
 8007a5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d032      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d81b      	bhi.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007a74:	a201      	add	r2, pc, #4	; (adr r2, 8007a7c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7a:	bf00      	nop
 8007a7c:	08007ab3 	.word	0x08007ab3
 8007a80:	08007a8d 	.word	0x08007a8d
 8007a84:	08007a9b 	.word	0x08007a9b
 8007a88:	08007ab3 	.word	0x08007ab3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a8c:	4b92      	ldr	r3, [pc, #584]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a90:	4a91      	ldr	r2, [pc, #580]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007a98:	e00c      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	2102      	movs	r1, #2
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 ff03 	bl	80088ac <RCCEx_PLL2_Config>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007aaa:	e003      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab0:	e000      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007ab2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d109      	bne.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007aba:	4b87      	ldr	r3, [pc, #540]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007abe:	f023 0203 	bic.w	r2, r3, #3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac6:	4984      	ldr	r1, [pc, #528]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007acc:	e001      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ace:	7dfb      	ldrb	r3, [r7, #23]
 8007ad0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 8086 	beq.w	8007bec <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ae0:	4b7e      	ldr	r3, [pc, #504]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a7d      	ldr	r2, [pc, #500]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007aec:	f7fd fc1c 	bl	8005328 <HAL_GetTick>
 8007af0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007af2:	e009      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007af4:	f7fd fc18 	bl	8005328 <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	2b64      	cmp	r3, #100	; 0x64
 8007b00:	d902      	bls.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	75fb      	strb	r3, [r7, #23]
        break;
 8007b06:	e005      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b08:	4b74      	ldr	r3, [pc, #464]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d0ef      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d166      	bne.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b1a:	4b6f      	ldr	r3, [pc, #444]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b24:	4053      	eors	r3, r2
 8007b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d013      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b2e:	4b6a      	ldr	r3, [pc, #424]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b36:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b38:	4b67      	ldr	r3, [pc, #412]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3c:	4a66      	ldr	r2, [pc, #408]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b42:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b44:	4b64      	ldr	r3, [pc, #400]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b48:	4a63      	ldr	r2, [pc, #396]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b4e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b50:	4a61      	ldr	r2, [pc, #388]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b60:	d115      	bne.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b62:	f7fd fbe1 	bl	8005328 <HAL_GetTick>
 8007b66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b68:	e00b      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b6a:	f7fd fbdd 	bl	8005328 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d902      	bls.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	75fb      	strb	r3, [r7, #23]
            break;
 8007b80:	e005      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b82:	4b55      	ldr	r3, [pc, #340]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0ed      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d126      	bne.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ba2:	d10d      	bne.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007ba4:	4b4c      	ldr	r3, [pc, #304]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007bb2:	0919      	lsrs	r1, r3, #4
 8007bb4:	4b4a      	ldr	r3, [pc, #296]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007bb6:	400b      	ands	r3, r1
 8007bb8:	4947      	ldr	r1, [pc, #284]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	610b      	str	r3, [r1, #16]
 8007bbe:	e005      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007bc0:	4b45      	ldr	r3, [pc, #276]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	4a44      	ldr	r2, [pc, #272]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007bca:	6113      	str	r3, [r2, #16]
 8007bcc:	4b42      	ldr	r3, [pc, #264]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bda:	493f      	ldr	r1, [pc, #252]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	670b      	str	r3, [r1, #112]	; 0x70
 8007be0:	e004      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	75bb      	strb	r3, [r7, #22]
 8007be6:	e001      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 8085 	beq.w	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bfe:	2b28      	cmp	r3, #40	; 0x28
 8007c00:	d866      	bhi.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007c02:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c08:	08007ce5 	.word	0x08007ce5
 8007c0c:	08007cd1 	.word	0x08007cd1
 8007c10:	08007cd1 	.word	0x08007cd1
 8007c14:	08007cd1 	.word	0x08007cd1
 8007c18:	08007cd1 	.word	0x08007cd1
 8007c1c:	08007cd1 	.word	0x08007cd1
 8007c20:	08007cd1 	.word	0x08007cd1
 8007c24:	08007cd1 	.word	0x08007cd1
 8007c28:	08007cad 	.word	0x08007cad
 8007c2c:	08007cd1 	.word	0x08007cd1
 8007c30:	08007cd1 	.word	0x08007cd1
 8007c34:	08007cd1 	.word	0x08007cd1
 8007c38:	08007cd1 	.word	0x08007cd1
 8007c3c:	08007cd1 	.word	0x08007cd1
 8007c40:	08007cd1 	.word	0x08007cd1
 8007c44:	08007cd1 	.word	0x08007cd1
 8007c48:	08007cbf 	.word	0x08007cbf
 8007c4c:	08007cd1 	.word	0x08007cd1
 8007c50:	08007cd1 	.word	0x08007cd1
 8007c54:	08007cd1 	.word	0x08007cd1
 8007c58:	08007cd1 	.word	0x08007cd1
 8007c5c:	08007cd1 	.word	0x08007cd1
 8007c60:	08007cd1 	.word	0x08007cd1
 8007c64:	08007cd1 	.word	0x08007cd1
 8007c68:	08007ce5 	.word	0x08007ce5
 8007c6c:	08007cd1 	.word	0x08007cd1
 8007c70:	08007cd1 	.word	0x08007cd1
 8007c74:	08007cd1 	.word	0x08007cd1
 8007c78:	08007cd1 	.word	0x08007cd1
 8007c7c:	08007cd1 	.word	0x08007cd1
 8007c80:	08007cd1 	.word	0x08007cd1
 8007c84:	08007cd1 	.word	0x08007cd1
 8007c88:	08007ce5 	.word	0x08007ce5
 8007c8c:	08007cd1 	.word	0x08007cd1
 8007c90:	08007cd1 	.word	0x08007cd1
 8007c94:	08007cd1 	.word	0x08007cd1
 8007c98:	08007cd1 	.word	0x08007cd1
 8007c9c:	08007cd1 	.word	0x08007cd1
 8007ca0:	08007cd1 	.word	0x08007cd1
 8007ca4:	08007cd1 	.word	0x08007cd1
 8007ca8:	08007ce5 	.word	0x08007ce5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 fdfa 	bl	80088ac <RCCEx_PLL2_Config>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007cbc:	e013      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	3324      	adds	r3, #36	; 0x24
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f000 fea3 	bl	8008a10 <RCCEx_PLL3_Config>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007cce:	e00a      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd4:	e007      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007cd6:	bf00      	nop
 8007cd8:	58024400 	.word	0x58024400
 8007cdc:	58024800 	.word	0x58024800
 8007ce0:	00ffffcf 	.word	0x00ffffcf
      break;
 8007ce4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d109      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007cec:	4b96      	ldr	r3, [pc, #600]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cf8:	4993      	ldr	r1, [pc, #588]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	654b      	str	r3, [r1, #84]	; 0x54
 8007cfe:	e001      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
 8007d02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d038      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d14:	2b05      	cmp	r3, #5
 8007d16:	d821      	bhi.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d63 	.word	0x08007d63
 8007d24:	08007d39 	.word	0x08007d39
 8007d28:	08007d4b 	.word	0x08007d4b
 8007d2c:	08007d63 	.word	0x08007d63
 8007d30:	08007d63 	.word	0x08007d63
 8007d34:	08007d63 	.word	0x08007d63
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 fdb4 	bl	80088ac <RCCEx_PLL2_Config>
 8007d44:	4603      	mov	r3, r0
 8007d46:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007d48:	e00c      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3324      	adds	r3, #36	; 0x24
 8007d4e:	2101      	movs	r1, #1
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 fe5d 	bl	8008a10 <RCCEx_PLL3_Config>
 8007d56:	4603      	mov	r3, r0
 8007d58:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007d5a:	e003      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d60:	e000      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d109      	bne.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d6a:	4b77      	ldr	r3, [pc, #476]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6e:	f023 0207 	bic.w	r2, r3, #7
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d76:	4974      	ldr	r1, [pc, #464]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	654b      	str	r3, [r1, #84]	; 0x54
 8007d7c:	e001      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
 8007d80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 0304 	and.w	r3, r3, #4
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d03a      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d94:	2b05      	cmp	r3, #5
 8007d96:	d821      	bhi.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007d98:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9e:	bf00      	nop
 8007da0:	08007de3 	.word	0x08007de3
 8007da4:	08007db9 	.word	0x08007db9
 8007da8:	08007dcb 	.word	0x08007dcb
 8007dac:	08007de3 	.word	0x08007de3
 8007db0:	08007de3 	.word	0x08007de3
 8007db4:	08007de3 	.word	0x08007de3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 fd74 	bl	80088ac <RCCEx_PLL2_Config>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007dc8:	e00c      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3324      	adds	r3, #36	; 0x24
 8007dce:	2101      	movs	r1, #1
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 fe1d 	bl	8008a10 <RCCEx_PLL3_Config>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007dda:	e003      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	75fb      	strb	r3, [r7, #23]
      break;
 8007de0:	e000      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10a      	bne.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dea:	4b57      	ldr	r3, [pc, #348]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dee:	f023 0207 	bic.w	r2, r3, #7
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df8:	4953      	ldr	r1, [pc, #332]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	658b      	str	r3, [r1, #88]	; 0x58
 8007dfe:	e001      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
 8007e02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0320 	and.w	r3, r3, #32
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d04b      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e1a:	d02e      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e20:	d828      	bhi.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e26:	d02a      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e2c:	d822      	bhi.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007e2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e32:	d026      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007e34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e38:	d81c      	bhi.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e3e:	d010      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e44:	d816      	bhi.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d01d      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007e4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e4e:	d111      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	3304      	adds	r3, #4
 8007e54:	2100      	movs	r1, #0
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 fd28 	bl	80088ac <RCCEx_PLL2_Config>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e60:	e012      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	3324      	adds	r3, #36	; 0x24
 8007e66:	2102      	movs	r1, #2
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f000 fdd1 	bl	8008a10 <RCCEx_PLL3_Config>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e72:	e009      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	75fb      	strb	r3, [r7, #23]
      break;
 8007e78:	e006      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007e7a:	bf00      	nop
 8007e7c:	e004      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007e7e:	bf00      	nop
 8007e80:	e002      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007e82:	bf00      	nop
 8007e84:	e000      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007e86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e88:	7dfb      	ldrb	r3, [r7, #23]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10a      	bne.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e8e:	4b2e      	ldr	r3, [pc, #184]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e92:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e9c:	492a      	ldr	r1, [pc, #168]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	654b      	str	r3, [r1, #84]	; 0x54
 8007ea2:	e001      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
 8007ea6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d04d      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007eba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007ebe:	d02e      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007ec0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007ec4:	d828      	bhi.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eca:	d02a      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ed0:	d822      	bhi.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007ed2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ed6:	d026      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007ed8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007edc:	d81c      	bhi.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ee2:	d010      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ee8:	d816      	bhi.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d01d      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ef2:	d111      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fcd6 	bl	80088ac <RCCEx_PLL2_Config>
 8007f00:	4603      	mov	r3, r0
 8007f02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007f04:	e012      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3324      	adds	r3, #36	; 0x24
 8007f0a:	2102      	movs	r1, #2
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 fd7f 	bl	8008a10 <RCCEx_PLL3_Config>
 8007f12:	4603      	mov	r3, r0
 8007f14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007f16:	e009      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f1c:	e006      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007f1e:	bf00      	nop
 8007f20:	e004      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007f22:	bf00      	nop
 8007f24:	e002      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007f26:	bf00      	nop
 8007f28:	e000      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007f2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10c      	bne.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f32:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f36:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f40:	4901      	ldr	r1, [pc, #4]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	658b      	str	r3, [r1, #88]	; 0x58
 8007f46:	e003      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007f48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f4c:	7dfb      	ldrb	r3, [r7, #23]
 8007f4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d04b      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f62:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f66:	d02e      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007f68:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f6c:	d828      	bhi.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f72:	d02a      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f78:	d822      	bhi.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007f7a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f7e:	d026      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007f80:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f84:	d81c      	bhi.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007f86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f8a:	d010      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007f8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f90:	d816      	bhi.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d01d      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f9a:	d111      	bne.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 fc82 	bl	80088ac <RCCEx_PLL2_Config>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007fac:	e012      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3324      	adds	r3, #36	; 0x24
 8007fb2:	2102      	movs	r1, #2
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 fd2b 	bl	8008a10 <RCCEx_PLL3_Config>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007fbe:	e009      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fc4:	e006      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007fc6:	bf00      	nop
 8007fc8:	e004      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007fca:	bf00      	nop
 8007fcc:	e002      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007fce:	bf00      	nop
 8007fd0:	e000      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007fda:	4b9d      	ldr	r3, [pc, #628]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fe8:	4999      	ldr	r1, [pc, #612]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	658b      	str	r3, [r1, #88]	; 0x58
 8007fee:	e001      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
 8007ff2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0308 	and.w	r3, r3, #8
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01a      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800800a:	d10a      	bne.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3324      	adds	r3, #36	; 0x24
 8008010:	2102      	movs	r1, #2
 8008012:	4618      	mov	r0, r3
 8008014:	f000 fcfc 	bl	8008a10 <RCCEx_PLL3_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008022:	4b8b      	ldr	r3, [pc, #556]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008026:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008030:	4987      	ldr	r1, [pc, #540]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008032:	4313      	orrs	r3, r2
 8008034:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0310 	and.w	r3, r3, #16
 800803e:	2b00      	cmp	r3, #0
 8008040:	d01a      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800804c:	d10a      	bne.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	3324      	adds	r3, #36	; 0x24
 8008052:	2102      	movs	r1, #2
 8008054:	4618      	mov	r0, r3
 8008056:	f000 fcdb 	bl	8008a10 <RCCEx_PLL3_Config>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008064:	4b7a      	ldr	r3, [pc, #488]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008068:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008072:	4977      	ldr	r1, [pc, #476]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008074:	4313      	orrs	r3, r2
 8008076:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d034      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800808a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800808e:	d01d      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008094:	d817      	bhi.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800809a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800809e:	d009      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80080a0:	e011      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	3304      	adds	r3, #4
 80080a6:	2100      	movs	r1, #0
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 fbff 	bl	80088ac <RCCEx_PLL2_Config>
 80080ae:	4603      	mov	r3, r0
 80080b0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80080b2:	e00c      	b.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	3324      	adds	r3, #36	; 0x24
 80080b8:	2102      	movs	r1, #2
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 fca8 	bl	8008a10 <RCCEx_PLL3_Config>
 80080c0:	4603      	mov	r3, r0
 80080c2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80080c4:	e003      	b.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	75fb      	strb	r3, [r7, #23]
      break;
 80080ca:	e000      	b.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80080cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10a      	bne.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80080d4:	4b5e      	ldr	r3, [pc, #376]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080e2:	495b      	ldr	r1, [pc, #364]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	658b      	str	r3, [r1, #88]	; 0x58
 80080e8:	e001      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ea:	7dfb      	ldrb	r3, [r7, #23]
 80080ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d033      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008100:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008104:	d01c      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8008106:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800810a:	d816      	bhi.n	800813a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800810c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008110:	d003      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008116:	d007      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8008118:	e00f      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800811a:	4b4d      	ldr	r3, [pc, #308]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800811c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811e:	4a4c      	ldr	r2, [pc, #304]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008124:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008126:	e00c      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3324      	adds	r3, #36	; 0x24
 800812c:	2101      	movs	r1, #1
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fc6e 	bl	8008a10 <RCCEx_PLL3_Config>
 8008134:	4603      	mov	r3, r0
 8008136:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008138:	e003      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	75fb      	strb	r3, [r7, #23]
      break;
 800813e:	e000      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8008140:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008142:	7dfb      	ldrb	r3, [r7, #23]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10a      	bne.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008148:	4b41      	ldr	r3, [pc, #260]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800814a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800814c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008156:	493e      	ldr	r1, [pc, #248]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008158:	4313      	orrs	r3, r2
 800815a:	654b      	str	r3, [r1, #84]	; 0x54
 800815c:	e001      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800815e:	7dfb      	ldrb	r3, [r7, #23]
 8008160:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d029      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8008176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800817a:	d007      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800817c:	e00f      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800817e:	4b34      	ldr	r3, [pc, #208]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	4a33      	ldr	r2, [pc, #204]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008188:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800818a:	e00b      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3304      	adds	r3, #4
 8008190:	2102      	movs	r1, #2
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fb8a 	bl	80088ac <RCCEx_PLL2_Config>
 8008198:	4603      	mov	r3, r0
 800819a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800819c:	e002      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	75fb      	strb	r3, [r7, #23]
      break;
 80081a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d109      	bne.n	80081be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80081aa:	4b29      	ldr	r3, [pc, #164]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b6:	4926      	ldr	r1, [pc, #152]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80081bc:	e001      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00a      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	3324      	adds	r3, #36	; 0x24
 80081d2:	2102      	movs	r1, #2
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fc1b 	bl	8008a10 <RCCEx_PLL3_Config>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d001      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d033      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081f8:	d017      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80081fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081fe:	d811      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008204:	d013      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800820a:	d80b      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800820c:	2b00      	cmp	r3, #0
 800820e:	d010      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008214:	d106      	bne.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008216:	4b0e      	ldr	r3, [pc, #56]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821a:	4a0d      	ldr	r2, [pc, #52]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800821c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008220:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008222:	e007      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	75fb      	strb	r3, [r7, #23]
      break;
 8008228:	e004      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800822a:	bf00      	nop
 800822c:	e002      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800822e:	bf00      	nop
 8008230:	e000      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008234:	7dfb      	ldrb	r3, [r7, #23]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10c      	bne.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800823a:	4b05      	ldr	r3, [pc, #20]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800823c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008246:	4902      	ldr	r1, [pc, #8]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008248:	4313      	orrs	r3, r2
 800824a:	654b      	str	r3, [r1, #84]	; 0x54
 800824c:	e004      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800824e:	bf00      	nop
 8008250:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008254:	7dfb      	ldrb	r3, [r7, #23]
 8008256:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d008      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008264:	4b31      	ldr	r3, [pc, #196]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008268:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008270:	492e      	ldr	r1, [pc, #184]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008272:	4313      	orrs	r3, r2
 8008274:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d009      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008282:	4b2a      	ldr	r3, [pc, #168]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008290:	4926      	ldr	r1, [pc, #152]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008292:	4313      	orrs	r3, r2
 8008294:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d008      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80082a2:	4b22      	ldr	r3, [pc, #136]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80082a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082ae:	491f      	ldr	r1, [pc, #124]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00d      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80082c0:	4b1a      	ldr	r3, [pc, #104]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	4a19      	ldr	r2, [pc, #100]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80082c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082ca:	6113      	str	r3, [r2, #16]
 80082cc:	4b17      	ldr	r3, [pc, #92]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80082ce:	691a      	ldr	r2, [r3, #16]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80082d6:	4915      	ldr	r1, [pc, #84]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	da08      	bge.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80082e4:	4b11      	ldr	r3, [pc, #68]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80082e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f0:	490e      	ldr	r1, [pc, #56]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d009      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008302:	4b0a      	ldr	r3, [pc, #40]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008306:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008310:	4906      	ldr	r1, [pc, #24]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008312:	4313      	orrs	r3, r2
 8008314:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008316:	7dbb      	ldrb	r3, [r7, #22]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	e000      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
}
 8008322:	4618      	mov	r0, r3
 8008324:	3718      	adds	r7, #24
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	58024400 	.word	0x58024400

08008330 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008334:	f7ff f85a 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8008338:	4602      	mov	r2, r0
 800833a:	4b06      	ldr	r3, [pc, #24]	; (8008354 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	091b      	lsrs	r3, r3, #4
 8008340:	f003 0307 	and.w	r3, r3, #7
 8008344:	4904      	ldr	r1, [pc, #16]	; (8008358 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008346:	5ccb      	ldrb	r3, [r1, r3]
 8008348:	f003 031f 	and.w	r3, r3, #31
 800834c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008350:	4618      	mov	r0, r3
 8008352:	bd80      	pop	{r7, pc}
 8008354:	58024400 	.word	0x58024400
 8008358:	08012fe4 	.word	0x08012fe4

0800835c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800835c:	b480      	push	{r7}
 800835e:	b089      	sub	sp, #36	; 0x24
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008364:	4ba1      	ldr	r3, [pc, #644]	; (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008368:	f003 0303 	and.w	r3, r3, #3
 800836c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800836e:	4b9f      	ldr	r3, [pc, #636]	; (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008372:	0b1b      	lsrs	r3, r3, #12
 8008374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008378:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800837a:	4b9c      	ldr	r3, [pc, #624]	; (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800837c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837e:	091b      	lsrs	r3, r3, #4
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008386:	4b99      	ldr	r3, [pc, #612]	; (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800838a:	08db      	lsrs	r3, r3, #3
 800838c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	fb02 f303 	mul.w	r3, r2, r3
 8008396:	ee07 3a90 	vmov	s15, r3
 800839a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 8111 	beq.w	80085cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	f000 8083 	beq.w	80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	f200 80a1 	bhi.w	80084fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d056      	beq.n	8008474 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80083c6:	e099      	b.n	80084fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083c8:	4b88      	ldr	r3, [pc, #544]	; (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 0320 	and.w	r3, r3, #32
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d02d      	beq.n	8008430 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083d4:	4b85      	ldr	r3, [pc, #532]	; (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	08db      	lsrs	r3, r3, #3
 80083da:	f003 0303 	and.w	r3, r3, #3
 80083de:	4a84      	ldr	r2, [pc, #528]	; (80085f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80083e0:	fa22 f303 	lsr.w	r3, r2, r3
 80083e4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	ee07 3a90 	vmov	s15, r3
 80083ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	ee07 3a90 	vmov	s15, r3
 80083f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083fe:	4b7b      	ldr	r3, [pc, #492]	; (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008406:	ee07 3a90 	vmov	s15, r3
 800840a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800840e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008412:	eddf 5a78 	vldr	s11, [pc, #480]	; 80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800841a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800841e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800842a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800842e:	e087      	b.n	8008540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	ee07 3a90 	vmov	s15, r3
 8008436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80085f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800843e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008442:	4b6a      	ldr	r3, [pc, #424]	; (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800844a:	ee07 3a90 	vmov	s15, r3
 800844e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008452:	ed97 6a03 	vldr	s12, [r7, #12]
 8008456:	eddf 5a67 	vldr	s11, [pc, #412]	; 80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800845a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800845e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800846a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800846e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008472:	e065      	b.n	8008540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	ee07 3a90 	vmov	s15, r3
 800847a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008486:	4b59      	ldr	r3, [pc, #356]	; (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800848e:	ee07 3a90 	vmov	s15, r3
 8008492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008496:	ed97 6a03 	vldr	s12, [r7, #12]
 800849a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800849e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084b6:	e043      	b.n	8008540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	ee07 3a90 	vmov	s15, r3
 80084be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008600 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80084c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ca:	4b48      	ldr	r3, [pc, #288]	; (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d2:	ee07 3a90 	vmov	s15, r3
 80084d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084da:	ed97 6a03 	vldr	s12, [r7, #12]
 80084de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084fa:	e021      	b.n	8008540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	ee07 3a90 	vmov	s15, r3
 8008502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008506:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800850a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800850e:	4b37      	ldr	r3, [pc, #220]	; (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008516:	ee07 3a90 	vmov	s15, r3
 800851a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800851e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008522:	eddf 5a34 	vldr	s11, [pc, #208]	; 80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800852a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800852e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800853a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800853e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008540:	4b2a      	ldr	r3, [pc, #168]	; (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008544:	0a5b      	lsrs	r3, r3, #9
 8008546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800854a:	ee07 3a90 	vmov	s15, r3
 800854e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008552:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008556:	ee37 7a87 	vadd.f32	s14, s15, s14
 800855a:	edd7 6a07 	vldr	s13, [r7, #28]
 800855e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008566:	ee17 2a90 	vmov	r2, s15
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800856e:	4b1f      	ldr	r3, [pc, #124]	; (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008572:	0c1b      	lsrs	r3, r3, #16
 8008574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008578:	ee07 3a90 	vmov	s15, r3
 800857c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008580:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008584:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008588:	edd7 6a07 	vldr	s13, [r7, #28]
 800858c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008594:	ee17 2a90 	vmov	r2, s15
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800859c:	4b13      	ldr	r3, [pc, #76]	; (80085ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800859e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a0:	0e1b      	lsrs	r3, r3, #24
 80085a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a6:	ee07 3a90 	vmov	s15, r3
 80085aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085c2:	ee17 2a90 	vmov	r2, s15
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80085ca:	e008      	b.n	80085de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	609a      	str	r2, [r3, #8]
}
 80085de:	bf00      	nop
 80085e0:	3724      	adds	r7, #36	; 0x24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	58024400 	.word	0x58024400
 80085f0:	03d09000 	.word	0x03d09000
 80085f4:	46000000 	.word	0x46000000
 80085f8:	4c742400 	.word	0x4c742400
 80085fc:	4a742400 	.word	0x4a742400
 8008600:	4af42400 	.word	0x4af42400

08008604 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008604:	b480      	push	{r7}
 8008606:	b089      	sub	sp, #36	; 0x24
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800860c:	4ba1      	ldr	r3, [pc, #644]	; (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800860e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008610:	f003 0303 	and.w	r3, r3, #3
 8008614:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008616:	4b9f      	ldr	r3, [pc, #636]	; (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861a:	0d1b      	lsrs	r3, r3, #20
 800861c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008620:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008622:	4b9c      	ldr	r3, [pc, #624]	; (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008626:	0a1b      	lsrs	r3, r3, #8
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800862e:	4b99      	ldr	r3, [pc, #612]	; (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008632:	08db      	lsrs	r3, r3, #3
 8008634:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	fb02 f303 	mul.w	r3, r2, r3
 800863e:	ee07 3a90 	vmov	s15, r3
 8008642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008646:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 8111 	beq.w	8008874 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	2b02      	cmp	r3, #2
 8008656:	f000 8083 	beq.w	8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	2b02      	cmp	r3, #2
 800865e:	f200 80a1 	bhi.w	80087a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d056      	beq.n	800871c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800866e:	e099      	b.n	80087a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008670:	4b88      	ldr	r3, [pc, #544]	; (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0320 	and.w	r3, r3, #32
 8008678:	2b00      	cmp	r3, #0
 800867a:	d02d      	beq.n	80086d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800867c:	4b85      	ldr	r3, [pc, #532]	; (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	08db      	lsrs	r3, r3, #3
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	4a84      	ldr	r2, [pc, #528]	; (8008898 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008688:	fa22 f303 	lsr.w	r3, r2, r3
 800868c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	ee07 3a90 	vmov	s15, r3
 8008694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	ee07 3a90 	vmov	s15, r3
 800869e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086a6:	4b7b      	ldr	r3, [pc, #492]	; (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800889c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80086d6:	e087      	b.n	80087e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80088a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80086e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ea:	4b6a      	ldr	r3, [pc, #424]	; (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f2:	ee07 3a90 	vmov	s15, r3
 80086f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80086fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800889c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800870a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800870e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008716:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800871a:	e065      	b.n	80087e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	ee07 3a90 	vmov	s15, r3
 8008722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008726:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800872a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800872e:	4b59      	ldr	r3, [pc, #356]	; (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008736:	ee07 3a90 	vmov	s15, r3
 800873a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800873e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008742:	eddf 5a56 	vldr	s11, [pc, #344]	; 800889c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800874a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800874e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800875a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800875e:	e043      	b.n	80087e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	ee07 3a90 	vmov	s15, r3
 8008766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800876a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800876e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008772:	4b48      	ldr	r3, [pc, #288]	; (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800877a:	ee07 3a90 	vmov	s15, r3
 800877e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008782:	ed97 6a03 	vldr	s12, [r7, #12]
 8008786:	eddf 5a45 	vldr	s11, [pc, #276]	; 800889c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800878a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800878e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800879a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800879e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087a2:	e021      	b.n	80087e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	ee07 3a90 	vmov	s15, r3
 80087aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80087b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087b6:	4b37      	ldr	r3, [pc, #220]	; (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087be:	ee07 3a90 	vmov	s15, r3
 80087c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800889c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80087e8:	4b2a      	ldr	r3, [pc, #168]	; (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ec:	0a5b      	lsrs	r3, r3, #9
 80087ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087f2:	ee07 3a90 	vmov	s15, r3
 80087f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008802:	edd7 6a07 	vldr	s13, [r7, #28]
 8008806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800880a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800880e:	ee17 2a90 	vmov	r2, s15
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008816:	4b1f      	ldr	r3, [pc, #124]	; (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881a:	0c1b      	lsrs	r3, r3, #16
 800881c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008820:	ee07 3a90 	vmov	s15, r3
 8008824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008828:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800882c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008830:	edd7 6a07 	vldr	s13, [r7, #28]
 8008834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800883c:	ee17 2a90 	vmov	r2, s15
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008844:	4b13      	ldr	r3, [pc, #76]	; (8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008848:	0e1b      	lsrs	r3, r3, #24
 800884a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800884e:	ee07 3a90 	vmov	s15, r3
 8008852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008856:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800885a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800885e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800886a:	ee17 2a90 	vmov	r2, s15
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008872:	e008      	b.n	8008886 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	609a      	str	r2, [r3, #8]
}
 8008886:	bf00      	nop
 8008888:	3724      	adds	r7, #36	; 0x24
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	58024400 	.word	0x58024400
 8008898:	03d09000 	.word	0x03d09000
 800889c:	46000000 	.word	0x46000000
 80088a0:	4c742400 	.word	0x4c742400
 80088a4:	4a742400 	.word	0x4a742400
 80088a8:	4af42400 	.word	0x4af42400

080088ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088ba:	4b53      	ldr	r3, [pc, #332]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80088bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088be:	f003 0303 	and.w	r3, r3, #3
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d101      	bne.n	80088ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e099      	b.n	80089fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80088ca:	4b4f      	ldr	r3, [pc, #316]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a4e      	ldr	r2, [pc, #312]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80088d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088d6:	f7fc fd27 	bl	8005328 <HAL_GetTick>
 80088da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088dc:	e008      	b.n	80088f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80088de:	f7fc fd23 	bl	8005328 <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d901      	bls.n	80088f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e086      	b.n	80089fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088f0:	4b45      	ldr	r3, [pc, #276]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1f0      	bne.n	80088de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80088fc:	4b42      	ldr	r3, [pc, #264]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80088fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008900:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	031b      	lsls	r3, r3, #12
 800890a:	493f      	ldr	r1, [pc, #252]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 800890c:	4313      	orrs	r3, r2
 800890e:	628b      	str	r3, [r1, #40]	; 0x28
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	3b01      	subs	r3, #1
 8008916:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	3b01      	subs	r3, #1
 8008920:	025b      	lsls	r3, r3, #9
 8008922:	b29b      	uxth	r3, r3
 8008924:	431a      	orrs	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	3b01      	subs	r3, #1
 800892c:	041b      	lsls	r3, r3, #16
 800892e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008932:	431a      	orrs	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	3b01      	subs	r3, #1
 800893a:	061b      	lsls	r3, r3, #24
 800893c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008940:	4931      	ldr	r1, [pc, #196]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 8008942:	4313      	orrs	r3, r2
 8008944:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008946:	4b30      	ldr	r3, [pc, #192]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 8008948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	492d      	ldr	r1, [pc, #180]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 8008954:	4313      	orrs	r3, r2
 8008956:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008958:	4b2b      	ldr	r3, [pc, #172]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	f023 0220 	bic.w	r2, r3, #32
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	4928      	ldr	r1, [pc, #160]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 8008966:	4313      	orrs	r3, r2
 8008968:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800896a:	4b27      	ldr	r3, [pc, #156]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	4a26      	ldr	r2, [pc, #152]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 8008970:	f023 0310 	bic.w	r3, r3, #16
 8008974:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008976:	4b24      	ldr	r3, [pc, #144]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 8008978:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800897a:	4b24      	ldr	r3, [pc, #144]	; (8008a0c <RCCEx_PLL2_Config+0x160>)
 800897c:	4013      	ands	r3, r2
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	69d2      	ldr	r2, [r2, #28]
 8008982:	00d2      	lsls	r2, r2, #3
 8008984:	4920      	ldr	r1, [pc, #128]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 8008986:	4313      	orrs	r3, r2
 8008988:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800898a:	4b1f      	ldr	r3, [pc, #124]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 800898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898e:	4a1e      	ldr	r2, [pc, #120]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 8008990:	f043 0310 	orr.w	r3, r3, #16
 8008994:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d106      	bne.n	80089aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800899c:	4b1a      	ldr	r3, [pc, #104]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 800899e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a0:	4a19      	ldr	r2, [pc, #100]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80089a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089a8:	e00f      	b.n	80089ca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d106      	bne.n	80089be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80089b0:	4b15      	ldr	r3, [pc, #84]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	4a14      	ldr	r2, [pc, #80]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80089b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089bc:	e005      	b.n	80089ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80089be:	4b12      	ldr	r3, [pc, #72]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80089c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c2:	4a11      	ldr	r2, [pc, #68]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80089c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80089ca:	4b0f      	ldr	r3, [pc, #60]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a0e      	ldr	r2, [pc, #56]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80089d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80089d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089d6:	f7fc fca7 	bl	8005328 <HAL_GetTick>
 80089da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089dc:	e008      	b.n	80089f0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80089de:	f7fc fca3 	bl	8005328 <HAL_GetTick>
 80089e2:	4602      	mov	r2, r0
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d901      	bls.n	80089f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e006      	b.n	80089fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089f0:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <RCCEx_PLL2_Config+0x15c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0f0      	beq.n	80089de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	58024400 	.word	0x58024400
 8008a0c:	ffff0007 	.word	0xffff0007

08008a10 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a1e:	4b53      	ldr	r3, [pc, #332]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a22:	f003 0303 	and.w	r3, r3, #3
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d101      	bne.n	8008a2e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e099      	b.n	8008b62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008a2e:	4b4f      	ldr	r3, [pc, #316]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a4e      	ldr	r2, [pc, #312]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a3a:	f7fc fc75 	bl	8005328 <HAL_GetTick>
 8008a3e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a40:	e008      	b.n	8008a54 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a42:	f7fc fc71 	bl	8005328 <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d901      	bls.n	8008a54 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e086      	b.n	8008b62 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a54:	4b45      	ldr	r3, [pc, #276]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1f0      	bne.n	8008a42 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008a60:	4b42      	ldr	r3, [pc, #264]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a64:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	051b      	lsls	r3, r3, #20
 8008a6e:	493f      	ldr	r1, [pc, #252]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008a70:	4313      	orrs	r3, r2
 8008a72:	628b      	str	r3, [r1, #40]	; 0x28
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	3b01      	subs	r3, #1
 8008a84:	025b      	lsls	r3, r3, #9
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	041b      	lsls	r3, r3, #16
 8008a92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a96:	431a      	orrs	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	061b      	lsls	r3, r3, #24
 8008aa0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008aa4:	4931      	ldr	r1, [pc, #196]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008aaa:	4b30      	ldr	r3, [pc, #192]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	492d      	ldr	r1, [pc, #180]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008abc:	4b2b      	ldr	r3, [pc, #172]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	4928      	ldr	r1, [pc, #160]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008ace:	4b27      	ldr	r3, [pc, #156]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad2:	4a26      	ldr	r2, [pc, #152]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008ada:	4b24      	ldr	r3, [pc, #144]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ade:	4b24      	ldr	r3, [pc, #144]	; (8008b70 <RCCEx_PLL3_Config+0x160>)
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	69d2      	ldr	r2, [r2, #28]
 8008ae6:	00d2      	lsls	r2, r2, #3
 8008ae8:	4920      	ldr	r1, [pc, #128]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008aee:	4b1f      	ldr	r3, [pc, #124]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af2:	4a1e      	ldr	r2, [pc, #120]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008af8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d106      	bne.n	8008b0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008b00:	4b1a      	ldr	r3, [pc, #104]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	4a19      	ldr	r2, [pc, #100]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008b0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b0c:	e00f      	b.n	8008b2e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d106      	bne.n	8008b22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008b14:	4b15      	ldr	r3, [pc, #84]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b18:	4a14      	ldr	r2, [pc, #80]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b20:	e005      	b.n	8008b2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008b22:	4b12      	ldr	r3, [pc, #72]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b26:	4a11      	ldr	r2, [pc, #68]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008b2e:	4b0f      	ldr	r3, [pc, #60]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a0e      	ldr	r2, [pc, #56]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b3a:	f7fc fbf5 	bl	8005328 <HAL_GetTick>
 8008b3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b40:	e008      	b.n	8008b54 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008b42:	f7fc fbf1 	bl	8005328 <HAL_GetTick>
 8008b46:	4602      	mov	r2, r0
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d901      	bls.n	8008b54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e006      	b.n	8008b62 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b54:	4b05      	ldr	r3, [pc, #20]	; (8008b6c <RCCEx_PLL3_Config+0x15c>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d0f0      	beq.n	8008b42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	58024400 	.word	0x58024400
 8008b70:	ffff0007 	.word	0xffff0007

08008b74 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e0f1      	b.n	8008d6a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a78      	ldr	r2, [pc, #480]	; (8008d74 <HAL_SPI_Init+0x200>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d00f      	beq.n	8008bb6 <HAL_SPI_Init+0x42>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a77      	ldr	r2, [pc, #476]	; (8008d78 <HAL_SPI_Init+0x204>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d00a      	beq.n	8008bb6 <HAL_SPI_Init+0x42>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a75      	ldr	r2, [pc, #468]	; (8008d7c <HAL_SPI_Init+0x208>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d005      	beq.n	8008bb6 <HAL_SPI_Init+0x42>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	2b0f      	cmp	r3, #15
 8008bb0:	d901      	bls.n	8008bb6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e0d9      	b.n	8008d6a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 ff66 	bl	8009a88 <SPI_GetPacketSize>
 8008bbc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a6c      	ldr	r2, [pc, #432]	; (8008d74 <HAL_SPI_Init+0x200>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d00c      	beq.n	8008be2 <HAL_SPI_Init+0x6e>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a6a      	ldr	r2, [pc, #424]	; (8008d78 <HAL_SPI_Init+0x204>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d007      	beq.n	8008be2 <HAL_SPI_Init+0x6e>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a69      	ldr	r2, [pc, #420]	; (8008d7c <HAL_SPI_Init+0x208>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d002      	beq.n	8008be2 <HAL_SPI_Init+0x6e>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2b08      	cmp	r3, #8
 8008be0:	d811      	bhi.n	8008c06 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008be6:	4a63      	ldr	r2, [pc, #396]	; (8008d74 <HAL_SPI_Init+0x200>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d009      	beq.n	8008c00 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a61      	ldr	r2, [pc, #388]	; (8008d78 <HAL_SPI_Init+0x204>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d004      	beq.n	8008c00 <HAL_SPI_Init+0x8c>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a60      	ldr	r2, [pc, #384]	; (8008d7c <HAL_SPI_Init+0x208>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d104      	bne.n	8008c0a <HAL_SPI_Init+0x96>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2b10      	cmp	r3, #16
 8008c04:	d901      	bls.n	8008c0a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e0af      	b.n	8008d6a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d106      	bne.n	8008c24 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7fb fad0 	bl	80041c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2202      	movs	r2, #2
 8008c28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f022 0201 	bic.w	r2, r2, #1
 8008c3a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008c46:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c50:	d119      	bne.n	8008c86 <HAL_SPI_Init+0x112>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c5a:	d103      	bne.n	8008c64 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d008      	beq.n	8008c76 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10c      	bne.n	8008c86 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008c70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c74:	d107      	bne.n	8008c86 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	69da      	ldr	r2, [r3, #28]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8e:	431a      	orrs	r2, r3
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	431a      	orrs	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c98:	ea42 0103 	orr.w	r1, r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68da      	ldr	r2, [r3, #12]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	430a      	orrs	r2, r1
 8008ca6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	431a      	orrs	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	431a      	orrs	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	431a      	orrs	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	431a      	orrs	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ce6:	ea42 0103 	orr.w	r1, r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d113      	bne.n	8008d26 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d10:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d24:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f022 0201 	bic.w	r2, r2, #1
 8008d34:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00a      	beq.n	8008d58 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	430a      	orrs	r2, r1
 8008d56:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	40013000 	.word	0x40013000
 8008d78:	40003800 	.word	0x40003800
 8008d7c:	40003c00 	.word	0x40003c00

08008d80 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08a      	sub	sp, #40	; 0x28
 8008d84:	af02      	add	r7, sp, #8
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	3320      	adds	r3, #32
 8008d96:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d101      	bne.n	8008daa <HAL_SPI_Transmit+0x2a>
 8008da6:	2302      	movs	r3, #2
 8008da8:	e1d7      	b.n	800915a <HAL_SPI_Transmit+0x3da>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008db2:	f7fc fab9 	bl	8005328 <HAL_GetTick>
 8008db6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d007      	beq.n	8008dd4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008dd0:	7efb      	ldrb	r3, [r7, #27]
 8008dd2:	e1c2      	b.n	800915a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <HAL_SPI_Transmit+0x60>
 8008dda:	88fb      	ldrh	r3, [r7, #6]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d107      	bne.n	8008df0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008dec:	7efb      	ldrb	r3, [r7, #27]
 8008dee:	e1b4      	b.n	800915a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2203      	movs	r2, #3
 8008df4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	88fa      	ldrh	r2, [r7, #6]
 8008e0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	88fa      	ldrh	r2, [r7, #6]
 8008e12:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008e40:	d107      	bne.n	8008e52 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e50:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685a      	ldr	r2, [r3, #4]
 8008e58:	4b96      	ldr	r3, [pc, #600]	; (80090b4 <HAL_SPI_Transmit+0x334>)
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	88f9      	ldrh	r1, [r7, #6]
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	6812      	ldr	r2, [r2, #0]
 8008e62:	430b      	orrs	r3, r1
 8008e64:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f042 0201 	orr.w	r2, r2, #1
 8008e74:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e7e:	d107      	bne.n	8008e90 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	2b0f      	cmp	r3, #15
 8008e96:	d947      	bls.n	8008f28 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008e98:	e03f      	b.n	8008f1a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	f003 0302 	and.w	r3, r3, #2
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d114      	bne.n	8008ed2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6812      	ldr	r2, [r2, #0]
 8008eb2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eb8:	1d1a      	adds	r2, r3, #4
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008ed0:	e023      	b.n	8008f1a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ed2:	f7fc fa29 	bl	8005328 <HAL_GetTick>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	683a      	ldr	r2, [r7, #0]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d803      	bhi.n	8008eea <HAL_SPI_Transmit+0x16a>
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee8:	d102      	bne.n	8008ef0 <HAL_SPI_Transmit+0x170>
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d114      	bne.n	8008f1a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f000 fcfb 	bl	80098ec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e11f      	b.n	800915a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1b9      	bne.n	8008e9a <HAL_SPI_Transmit+0x11a>
 8008f26:	e0f2      	b.n	800910e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	2b07      	cmp	r3, #7
 8008f2e:	f240 80e7 	bls.w	8009100 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008f32:	e05d      	b.n	8008ff0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	f003 0302 	and.w	r3, r3, #2
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d132      	bne.n	8008fa8 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d918      	bls.n	8008f80 <HAL_SPI_Transmit+0x200>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d014      	beq.n	8008f80 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6812      	ldr	r2, [r2, #0]
 8008f60:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f66:	1d1a      	adds	r2, r3, #4
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	3b02      	subs	r3, #2
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008f7e:	e037      	b.n	8008ff0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f84:	881a      	ldrh	r2, [r3, #0]
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f8e:	1c9a      	adds	r2, r3, #2
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008fa6:	e023      	b.n	8008ff0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fa8:	f7fc f9be 	bl	8005328 <HAL_GetTick>
 8008fac:	4602      	mov	r2, r0
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d803      	bhi.n	8008fc0 <HAL_SPI_Transmit+0x240>
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fbe:	d102      	bne.n	8008fc6 <HAL_SPI_Transmit+0x246>
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d114      	bne.n	8008ff0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f000 fc90 	bl	80098ec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e0b4      	b.n	800915a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d19b      	bne.n	8008f34 <HAL_SPI_Transmit+0x1b4>
 8008ffc:	e087      	b.n	800910e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	f003 0302 	and.w	r3, r3, #2
 8009008:	2b02      	cmp	r3, #2
 800900a:	d155      	bne.n	80090b8 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009012:	b29b      	uxth	r3, r3
 8009014:	2b03      	cmp	r3, #3
 8009016:	d918      	bls.n	800904a <HAL_SPI_Transmit+0x2ca>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800901c:	2b40      	cmp	r3, #64	; 0x40
 800901e:	d914      	bls.n	800904a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6812      	ldr	r2, [r2, #0]
 800902a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009030:	1d1a      	adds	r2, r3, #4
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800903c:	b29b      	uxth	r3, r3
 800903e:	3b04      	subs	r3, #4
 8009040:	b29a      	uxth	r2, r3
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009048:	e05a      	b.n	8009100 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009050:	b29b      	uxth	r3, r3
 8009052:	2b01      	cmp	r3, #1
 8009054:	d917      	bls.n	8009086 <HAL_SPI_Transmit+0x306>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905a:	2b00      	cmp	r3, #0
 800905c:	d013      	beq.n	8009086 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009062:	881a      	ldrh	r2, [r3, #0]
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800906c:	1c9a      	adds	r2, r3, #2
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009078:	b29b      	uxth	r3, r3
 800907a:	3b02      	subs	r3, #2
 800907c:	b29a      	uxth	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009084:	e03c      	b.n	8009100 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	3320      	adds	r3, #32
 8009090:	7812      	ldrb	r2, [r2, #0]
 8009092:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009098:	1c5a      	adds	r2, r3, #1
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	3b01      	subs	r3, #1
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80090b0:	e026      	b.n	8009100 <HAL_SPI_Transmit+0x380>
 80090b2:	bf00      	nop
 80090b4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090b8:	f7fc f936 	bl	8005328 <HAL_GetTick>
 80090bc:	4602      	mov	r2, r0
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d803      	bhi.n	80090d0 <HAL_SPI_Transmit+0x350>
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ce:	d102      	bne.n	80090d6 <HAL_SPI_Transmit+0x356>
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d114      	bne.n	8009100 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f000 fc08 	bl	80098ec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80090fc:	2303      	movs	r3, #3
 80090fe:	e02c      	b.n	800915a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009106:	b29b      	uxth	r3, r3
 8009108:	2b00      	cmp	r3, #0
 800910a:	f47f af78 	bne.w	8008ffe <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2200      	movs	r2, #0
 8009116:	2108      	movs	r1, #8
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 fc87 	bl	8009a2c <SPI_WaitOnFlagUntilTimeout>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d007      	beq.n	8009134 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800912a:	f043 0220 	orr.w	r2, r3, #32
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 fbd9 	bl	80098ec <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e000      	b.n	800915a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8009158:	7efb      	ldrb	r3, [r7, #27]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3720      	adds	r7, #32
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop

08009164 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08a      	sub	sp, #40	; 0x28
 8009168:	af02      	add	r7, sp, #8
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	603b      	str	r3, [r7, #0]
 8009170:	4613      	mov	r3, r2
 8009172:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3330      	adds	r3, #48	; 0x30
 800917e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009188:	d112      	bne.n	80091b0 <HAL_SPI_Receive+0x4c>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10e      	bne.n	80091b0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2204      	movs	r2, #4
 8009196:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800919a:	88fa      	ldrh	r2, [r7, #6]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	4613      	mov	r3, r2
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	68b9      	ldr	r1, [r7, #8]
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 f978 	bl	800949c <HAL_SPI_TransmitReceive>
 80091ac:	4603      	mov	r3, r0
 80091ae:	e16f      	b.n	8009490 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d101      	bne.n	80091be <HAL_SPI_Receive+0x5a>
 80091ba:	2302      	movs	r3, #2
 80091bc:	e168      	b.n	8009490 <HAL_SPI_Receive+0x32c>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091c6:	f7fc f8af 	bl	8005328 <HAL_GetTick>
 80091ca:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d007      	beq.n	80091e8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80091d8:	2302      	movs	r3, #2
 80091da:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80091e4:	7ffb      	ldrb	r3, [r7, #31]
 80091e6:	e153      	b.n	8009490 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d002      	beq.n	80091f4 <HAL_SPI_Receive+0x90>
 80091ee:	88fb      	ldrh	r3, [r7, #6]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d107      	bne.n	8009204 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009200:	7ffb      	ldrb	r3, [r7, #31]
 8009202:	e145      	b.n	8009490 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2204      	movs	r2, #4
 8009208:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	88fa      	ldrh	r2, [r7, #6]
 800921e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	88fa      	ldrh	r2, [r7, #6]
 8009226:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009254:	d107      	bne.n	8009266 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009264:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	685a      	ldr	r2, [r3, #4]
 800926c:	4b8a      	ldr	r3, [pc, #552]	; (8009498 <HAL_SPI_Receive+0x334>)
 800926e:	4013      	ands	r3, r2
 8009270:	88f9      	ldrh	r1, [r7, #6]
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	6812      	ldr	r2, [r2, #0]
 8009276:	430b      	orrs	r3, r1
 8009278:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f042 0201 	orr.w	r2, r2, #1
 8009288:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009292:	d107      	bne.n	80092a4 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	2b0f      	cmp	r3, #15
 80092aa:	d948      	bls.n	800933e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80092ac:	e040      	b.n	8009330 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	695a      	ldr	r2, [r3, #20]
 80092b4:	f248 0308 	movw	r3, #32776	; 0x8008
 80092b8:	4013      	ands	r3, r2
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d014      	beq.n	80092e8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80092c8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092ce:	1d1a      	adds	r2, r3, #4
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80092da:	b29b      	uxth	r3, r3
 80092dc:	3b01      	subs	r3, #1
 80092de:	b29a      	uxth	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80092e6:	e023      	b.n	8009330 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092e8:	f7fc f81e 	bl	8005328 <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d803      	bhi.n	8009300 <HAL_SPI_Receive+0x19c>
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fe:	d102      	bne.n	8009306 <HAL_SPI_Receive+0x1a2>
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d114      	bne.n	8009330 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f000 faf0 	bl	80098ec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800931a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	e0af      	b.n	8009490 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009336:	b29b      	uxth	r3, r3
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1b8      	bne.n	80092ae <HAL_SPI_Receive+0x14a>
 800933c:	e095      	b.n	800946a <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	2b07      	cmp	r3, #7
 8009344:	f240 808b 	bls.w	800945e <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009348:	e03f      	b.n	80093ca <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	2b01      	cmp	r3, #1
 8009356:	d114      	bne.n	8009382 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800935c:	69ba      	ldr	r2, [r7, #24]
 800935e:	8812      	ldrh	r2, [r2, #0]
 8009360:	b292      	uxth	r2, r2
 8009362:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009368:	1c9a      	adds	r2, r3, #2
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009374:	b29b      	uxth	r3, r3
 8009376:	3b01      	subs	r3, #1
 8009378:	b29a      	uxth	r2, r3
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009380:	e023      	b.n	80093ca <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009382:	f7fb ffd1 	bl	8005328 <HAL_GetTick>
 8009386:	4602      	mov	r2, r0
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	429a      	cmp	r2, r3
 8009390:	d803      	bhi.n	800939a <HAL_SPI_Receive+0x236>
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009398:	d102      	bne.n	80093a0 <HAL_SPI_Receive+0x23c>
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d114      	bne.n	80093ca <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 faa3 	bl	80098ec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e062      	b.n	8009490 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1b9      	bne.n	800934a <HAL_SPI_Receive+0x1e6>
 80093d6:	e048      	b.n	800946a <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d117      	bne.n	8009416 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093f2:	7812      	ldrb	r2, [r2, #0]
 80093f4:	b2d2      	uxtb	r2, r2
 80093f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093fc:	1c5a      	adds	r2, r3, #1
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009408:	b29b      	uxth	r3, r3
 800940a:	3b01      	subs	r3, #1
 800940c:	b29a      	uxth	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009414:	e023      	b.n	800945e <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009416:	f7fb ff87 	bl	8005328 <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	429a      	cmp	r2, r3
 8009424:	d803      	bhi.n	800942e <HAL_SPI_Receive+0x2ca>
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942c:	d102      	bne.n	8009434 <HAL_SPI_Receive+0x2d0>
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d114      	bne.n	800945e <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 fa59 	bl	80098ec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009448:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800945a:	2303      	movs	r3, #3
 800945c:	e018      	b.n	8009490 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009464:	b29b      	uxth	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1b6      	bne.n	80093d8 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f000 fa3e 	bl	80098ec <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e000      	b.n	8009490 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800948e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3720      	adds	r7, #32
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	ffff0000 	.word	0xffff0000

0800949c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b08e      	sub	sp, #56	; 0x38
 80094a0:	af02      	add	r7, sp, #8
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
 80094a8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3320      	adds	r3, #32
 80094b6:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	3330      	adds	r3, #48	; 0x30
 80094be:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d101      	bne.n	80094ce <HAL_SPI_TransmitReceive+0x32>
 80094ca:	2302      	movs	r3, #2
 80094cc:	e209      	b.n	80098e2 <HAL_SPI_TransmitReceive+0x446>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094d6:	f7fb ff27 	bl	8005328 <HAL_GetTick>
 80094da:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80094dc:	887b      	ldrh	r3, [r7, #2]
 80094de:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80094e0:	887b      	ldrh	r3, [r7, #2]
 80094e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80094ea:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80094f2:	7efb      	ldrb	r3, [r7, #27]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d014      	beq.n	8009522 <HAL_SPI_TransmitReceive+0x86>
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094fe:	d106      	bne.n	800950e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8009504:	2b00      	cmp	r3, #0
 8009506:	d102      	bne.n	800950e <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8009508:	7efb      	ldrb	r3, [r7, #27]
 800950a:	2b04      	cmp	r3, #4
 800950c:	d009      	beq.n	8009522 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800950e:	2302      	movs	r3, #2
 8009510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800951c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009520:	e1df      	b.n	80098e2 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d005      	beq.n	8009534 <HAL_SPI_TransmitReceive+0x98>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d002      	beq.n	8009534 <HAL_SPI_TransmitReceive+0x98>
 800952e:	887b      	ldrh	r3, [r7, #2]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d109      	bne.n	8009548 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009542:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009546:	e1cc      	b.n	80098e2 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800954e:	b2db      	uxtb	r3, r3
 8009550:	2b04      	cmp	r3, #4
 8009552:	d003      	beq.n	800955c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2205      	movs	r2, #5
 8009558:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	887a      	ldrh	r2, [r7, #2]
 800956e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	887a      	ldrh	r2, [r7, #2]
 8009576:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	68ba      	ldr	r2, [r7, #8]
 800957e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	887a      	ldrh	r2, [r7, #2]
 8009584:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	887a      	ldrh	r2, [r7, #2]
 800958c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	4b82      	ldr	r3, [pc, #520]	; (80097ac <HAL_SPI_TransmitReceive+0x310>)
 80095a4:	4013      	ands	r3, r2
 80095a6:	8879      	ldrh	r1, [r7, #2]
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	6812      	ldr	r2, [r2, #0]
 80095ac:	430b      	orrs	r3, r1
 80095ae:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f042 0201 	orr.w	r2, r2, #1
 80095be:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095c8:	d107      	bne.n	80095da <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	2b0f      	cmp	r3, #15
 80095e0:	d970      	bls.n	80096c4 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80095e2:	e068      	b.n	80096b6 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	695b      	ldr	r3, [r3, #20]
 80095ea:	f003 0302 	and.w	r3, r3, #2
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d11a      	bne.n	8009628 <HAL_SPI_TransmitReceive+0x18c>
 80095f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d017      	beq.n	8009628 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	6812      	ldr	r2, [r2, #0]
 8009602:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009608:	1d1a      	adds	r2, r3, #4
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009614:	b29b      	uxth	r3, r3
 8009616:	3b01      	subs	r3, #1
 8009618:	b29a      	uxth	r2, r3
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009626:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	695a      	ldr	r2, [r3, #20]
 800962e:	f248 0308 	movw	r3, #32776	; 0x8008
 8009632:	4013      	ands	r3, r2
 8009634:	2b00      	cmp	r3, #0
 8009636:	d01a      	beq.n	800966e <HAL_SPI_TransmitReceive+0x1d2>
 8009638:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800963a:	2b00      	cmp	r3, #0
 800963c:	d017      	beq.n	800966e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009646:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009648:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800964e:	1d1a      	adds	r2, r3, #4
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800965a:	b29b      	uxth	r3, r3
 800965c:	3b01      	subs	r3, #1
 800965e:	b29a      	uxth	r2, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800966c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800966e:	f7fb fe5b 	bl	8005328 <HAL_GetTick>
 8009672:	4602      	mov	r2, r0
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800967a:	429a      	cmp	r2, r3
 800967c:	d803      	bhi.n	8009686 <HAL_SPI_TransmitReceive+0x1ea>
 800967e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009684:	d102      	bne.n	800968c <HAL_SPI_TransmitReceive+0x1f0>
 8009686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009688:	2b00      	cmp	r3, #0
 800968a:	d114      	bne.n	80096b6 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f000 f92d 	bl	80098ec <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e115      	b.n	80098e2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80096b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d193      	bne.n	80095e4 <HAL_SPI_TransmitReceive+0x148>
 80096bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d190      	bne.n	80095e4 <HAL_SPI_TransmitReceive+0x148>
 80096c2:	e0e7      	b.n	8009894 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	2b07      	cmp	r3, #7
 80096ca:	f240 80dd 	bls.w	8009888 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80096ce:	e066      	b.n	800979e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	f003 0302 	and.w	r3, r3, #2
 80096da:	2b02      	cmp	r3, #2
 80096dc:	d119      	bne.n	8009712 <HAL_SPI_TransmitReceive+0x276>
 80096de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d016      	beq.n	8009712 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096e8:	881a      	ldrh	r2, [r3, #0]
 80096ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ec:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096f2:	1c9a      	adds	r2, r3, #2
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80096fe:	b29b      	uxth	r3, r3
 8009700:	3b01      	subs	r3, #1
 8009702:	b29a      	uxth	r2, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009710:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	695b      	ldr	r3, [r3, #20]
 8009718:	f003 0301 	and.w	r3, r3, #1
 800971c:	2b01      	cmp	r3, #1
 800971e:	d11a      	bne.n	8009756 <HAL_SPI_TransmitReceive+0x2ba>
 8009720:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009722:	2b00      	cmp	r3, #0
 8009724:	d017      	beq.n	8009756 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800972a:	6a3a      	ldr	r2, [r7, #32]
 800972c:	8812      	ldrh	r2, [r2, #0]
 800972e:	b292      	uxth	r2, r2
 8009730:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009736:	1c9a      	adds	r2, r3, #2
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009742:	b29b      	uxth	r3, r3
 8009744:	3b01      	subs	r3, #1
 8009746:	b29a      	uxth	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009754:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009756:	f7fb fde7 	bl	8005328 <HAL_GetTick>
 800975a:	4602      	mov	r2, r0
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	1ad3      	subs	r3, r2, r3
 8009760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009762:	429a      	cmp	r2, r3
 8009764:	d803      	bhi.n	800976e <HAL_SPI_TransmitReceive+0x2d2>
 8009766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976c:	d102      	bne.n	8009774 <HAL_SPI_TransmitReceive+0x2d8>
 800976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009770:	2b00      	cmp	r3, #0
 8009772:	d114      	bne.n	800979e <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 f8b9 	bl	80098ec <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009788:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800979a:	2303      	movs	r3, #3
 800979c:	e0a1      	b.n	80098e2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800979e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d195      	bne.n	80096d0 <HAL_SPI_TransmitReceive+0x234>
 80097a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d192      	bne.n	80096d0 <HAL_SPI_TransmitReceive+0x234>
 80097aa:	e073      	b.n	8009894 <HAL_SPI_TransmitReceive+0x3f8>
 80097ac:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	f003 0302 	and.w	r3, r3, #2
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d11b      	bne.n	80097f6 <HAL_SPI_TransmitReceive+0x35a>
 80097be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d018      	beq.n	80097f6 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3320      	adds	r3, #32
 80097ce:	7812      	ldrb	r2, [r2, #0]
 80097d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097d6:	1c5a      	adds	r2, r3, #1
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	3b01      	subs	r3, #1
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80097f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	695b      	ldr	r3, [r3, #20]
 80097fc:	f003 0301 	and.w	r3, r3, #1
 8009800:	2b01      	cmp	r3, #1
 8009802:	d11d      	bne.n	8009840 <HAL_SPI_TransmitReceive+0x3a4>
 8009804:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009806:	2b00      	cmp	r3, #0
 8009808:	d01a      	beq.n	8009840 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009816:	7812      	ldrb	r2, [r2, #0]
 8009818:	b2d2      	uxtb	r2, r2
 800981a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009820:	1c5a      	adds	r2, r3, #1
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800982c:	b29b      	uxth	r3, r3
 800982e:	3b01      	subs	r3, #1
 8009830:	b29a      	uxth	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800983e:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009840:	f7fb fd72 	bl	8005328 <HAL_GetTick>
 8009844:	4602      	mov	r2, r0
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800984c:	429a      	cmp	r2, r3
 800984e:	d803      	bhi.n	8009858 <HAL_SPI_TransmitReceive+0x3bc>
 8009850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009856:	d102      	bne.n	800985e <HAL_SPI_TransmitReceive+0x3c2>
 8009858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985a:	2b00      	cmp	r3, #0
 800985c:	d114      	bne.n	8009888 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 f844 	bl	80098ec <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009872:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e02c      	b.n	80098e2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009888:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800988a:	2b00      	cmp	r3, #0
 800988c:	d190      	bne.n	80097b0 <HAL_SPI_TransmitReceive+0x314>
 800988e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009890:	2b00      	cmp	r3, #0
 8009892:	d18d      	bne.n	80097b0 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	2200      	movs	r2, #0
 800989c:	2108      	movs	r1, #8
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	f000 f8c4 	bl	8009a2c <SPI_WaitOnFlagUntilTimeout>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d007      	beq.n	80098ba <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098b0:	f043 0220 	orr.w	r2, r3, #32
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 f816 	bl	80098ec <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e001      	b.n	80098e2 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 80098de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3730      	adds	r7, #48	; 0x30
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop

080098ec <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	699a      	ldr	r2, [r3, #24]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f042 0208 	orr.w	r2, r2, #8
 800990a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	699a      	ldr	r2, [r3, #24]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f042 0210 	orr.w	r2, r2, #16
 800991a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f022 0201 	bic.w	r2, r2, #1
 800992a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6919      	ldr	r1, [r3, #16]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	4b3c      	ldr	r3, [pc, #240]	; (8009a28 <SPI_CloseTransfer+0x13c>)
 8009938:	400b      	ands	r3, r1
 800993a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	689a      	ldr	r2, [r3, #8]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800994a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b04      	cmp	r3, #4
 8009956:	d014      	beq.n	8009982 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f003 0320 	and.w	r3, r3, #32
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00f      	beq.n	8009982 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009968:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	699a      	ldr	r2, [r3, #24]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f042 0220 	orr.w	r2, r2, #32
 8009980:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b03      	cmp	r3, #3
 800998c:	d014      	beq.n	80099b8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00f      	beq.n	80099b8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800999e:	f043 0204 	orr.w	r2, r3, #4
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	699a      	ldr	r2, [r3, #24]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099b6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00f      	beq.n	80099e2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099c8:	f043 0201 	orr.w	r2, r3, #1
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	699a      	ldr	r2, [r3, #24]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099e0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00f      	beq.n	8009a0c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099f2:	f043 0208 	orr.w	r2, r3, #8
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	699a      	ldr	r2, [r3, #24]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a0a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009a1c:	bf00      	nop
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	fffffc90 	.word	0xfffffc90

08009a2c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009a3c:	e010      	b.n	8009a60 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a3e:	f7fb fc73 	bl	8005328 <HAL_GetTick>
 8009a42:	4602      	mov	r2, r0
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	69ba      	ldr	r2, [r7, #24]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d803      	bhi.n	8009a56 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a54:	d102      	bne.n	8009a5c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e00f      	b.n	8009a80 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	695a      	ldr	r2, [r3, #20]
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	4013      	ands	r3, r2
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	bf0c      	ite	eq
 8009a70:	2301      	moveq	r3, #1
 8009a72:	2300      	movne	r3, #0
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	461a      	mov	r2, r3
 8009a78:	79fb      	ldrb	r3, [r7, #7]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d0df      	beq.n	8009a3e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a94:	095b      	lsrs	r3, r3, #5
 8009a96:	3301      	adds	r3, #1
 8009a98:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	3307      	adds	r3, #7
 8009aa6:	08db      	lsrs	r3, r3, #3
 8009aa8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	fb02 f303 	mul.w	r3, r2, r3
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3714      	adds	r7, #20
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b082      	sub	sp, #8
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d101      	bne.n	8009ad0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	e049      	b.n	8009b64 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d106      	bne.n	8009aea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f7fb f9af 	bl	8004e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2202      	movs	r2, #2
 8009aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	3304      	adds	r3, #4
 8009afa:	4619      	mov	r1, r3
 8009afc:	4610      	mov	r0, r2
 8009afe:	f000 fbb1 	bl	800a264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2201      	movs	r2, #1
 8009b36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d101      	bne.n	8009b7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e049      	b.n	8009c12 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d106      	bne.n	8009b98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f841 	bl	8009c1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	4619      	mov	r1, r3
 8009baa:	4610      	mov	r0, r2
 8009bac:	f000 fb5a 	bl	800a264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b083      	sub	sp, #12
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009c22:	bf00      	nop
 8009c24:	370c      	adds	r7, #12
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
	...

08009c30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d109      	bne.n	8009c54 <HAL_TIM_PWM_Start+0x24>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	bf14      	ite	ne
 8009c4c:	2301      	movne	r3, #1
 8009c4e:	2300      	moveq	r3, #0
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	e03c      	b.n	8009cce <HAL_TIM_PWM_Start+0x9e>
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	2b04      	cmp	r3, #4
 8009c58:	d109      	bne.n	8009c6e <HAL_TIM_PWM_Start+0x3e>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	bf14      	ite	ne
 8009c66:	2301      	movne	r3, #1
 8009c68:	2300      	moveq	r3, #0
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	e02f      	b.n	8009cce <HAL_TIM_PWM_Start+0x9e>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2b08      	cmp	r3, #8
 8009c72:	d109      	bne.n	8009c88 <HAL_TIM_PWM_Start+0x58>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	bf14      	ite	ne
 8009c80:	2301      	movne	r3, #1
 8009c82:	2300      	moveq	r3, #0
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	e022      	b.n	8009cce <HAL_TIM_PWM_Start+0x9e>
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	2b0c      	cmp	r3, #12
 8009c8c:	d109      	bne.n	8009ca2 <HAL_TIM_PWM_Start+0x72>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	bf14      	ite	ne
 8009c9a:	2301      	movne	r3, #1
 8009c9c:	2300      	moveq	r3, #0
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	e015      	b.n	8009cce <HAL_TIM_PWM_Start+0x9e>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b10      	cmp	r3, #16
 8009ca6:	d109      	bne.n	8009cbc <HAL_TIM_PWM_Start+0x8c>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	bf14      	ite	ne
 8009cb4:	2301      	movne	r3, #1
 8009cb6:	2300      	moveq	r3, #0
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	e008      	b.n	8009cce <HAL_TIM_PWM_Start+0x9e>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	bf14      	ite	ne
 8009cc8:	2301      	movne	r3, #1
 8009cca:	2300      	moveq	r3, #0
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d001      	beq.n	8009cd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e0a1      	b.n	8009e1a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d104      	bne.n	8009ce6 <HAL_TIM_PWM_Start+0xb6>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2202      	movs	r2, #2
 8009ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ce4:	e023      	b.n	8009d2e <HAL_TIM_PWM_Start+0xfe>
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b04      	cmp	r3, #4
 8009cea:	d104      	bne.n	8009cf6 <HAL_TIM_PWM_Start+0xc6>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2202      	movs	r2, #2
 8009cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cf4:	e01b      	b.n	8009d2e <HAL_TIM_PWM_Start+0xfe>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	2b08      	cmp	r3, #8
 8009cfa:	d104      	bne.n	8009d06 <HAL_TIM_PWM_Start+0xd6>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d04:	e013      	b.n	8009d2e <HAL_TIM_PWM_Start+0xfe>
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b0c      	cmp	r3, #12
 8009d0a:	d104      	bne.n	8009d16 <HAL_TIM_PWM_Start+0xe6>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2202      	movs	r2, #2
 8009d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009d14:	e00b      	b.n	8009d2e <HAL_TIM_PWM_Start+0xfe>
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2b10      	cmp	r3, #16
 8009d1a:	d104      	bne.n	8009d26 <HAL_TIM_PWM_Start+0xf6>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2202      	movs	r2, #2
 8009d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d24:	e003      	b.n	8009d2e <HAL_TIM_PWM_Start+0xfe>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2202      	movs	r2, #2
 8009d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2201      	movs	r2, #1
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 fea2 	bl	800aa80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a38      	ldr	r2, [pc, #224]	; (8009e24 <HAL_TIM_PWM_Start+0x1f4>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d013      	beq.n	8009d6e <HAL_TIM_PWM_Start+0x13e>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a37      	ldr	r2, [pc, #220]	; (8009e28 <HAL_TIM_PWM_Start+0x1f8>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d00e      	beq.n	8009d6e <HAL_TIM_PWM_Start+0x13e>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a35      	ldr	r2, [pc, #212]	; (8009e2c <HAL_TIM_PWM_Start+0x1fc>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d009      	beq.n	8009d6e <HAL_TIM_PWM_Start+0x13e>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a34      	ldr	r2, [pc, #208]	; (8009e30 <HAL_TIM_PWM_Start+0x200>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d004      	beq.n	8009d6e <HAL_TIM_PWM_Start+0x13e>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a32      	ldr	r2, [pc, #200]	; (8009e34 <HAL_TIM_PWM_Start+0x204>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d101      	bne.n	8009d72 <HAL_TIM_PWM_Start+0x142>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e000      	b.n	8009d74 <HAL_TIM_PWM_Start+0x144>
 8009d72:	2300      	movs	r3, #0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d007      	beq.n	8009d88 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a25      	ldr	r2, [pc, #148]	; (8009e24 <HAL_TIM_PWM_Start+0x1f4>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d022      	beq.n	8009dd8 <HAL_TIM_PWM_Start+0x1a8>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d9a:	d01d      	beq.n	8009dd8 <HAL_TIM_PWM_Start+0x1a8>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a25      	ldr	r2, [pc, #148]	; (8009e38 <HAL_TIM_PWM_Start+0x208>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d018      	beq.n	8009dd8 <HAL_TIM_PWM_Start+0x1a8>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a24      	ldr	r2, [pc, #144]	; (8009e3c <HAL_TIM_PWM_Start+0x20c>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d013      	beq.n	8009dd8 <HAL_TIM_PWM_Start+0x1a8>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a22      	ldr	r2, [pc, #136]	; (8009e40 <HAL_TIM_PWM_Start+0x210>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d00e      	beq.n	8009dd8 <HAL_TIM_PWM_Start+0x1a8>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a1a      	ldr	r2, [pc, #104]	; (8009e28 <HAL_TIM_PWM_Start+0x1f8>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d009      	beq.n	8009dd8 <HAL_TIM_PWM_Start+0x1a8>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a1e      	ldr	r2, [pc, #120]	; (8009e44 <HAL_TIM_PWM_Start+0x214>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d004      	beq.n	8009dd8 <HAL_TIM_PWM_Start+0x1a8>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a16      	ldr	r2, [pc, #88]	; (8009e2c <HAL_TIM_PWM_Start+0x1fc>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d115      	bne.n	8009e04 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	689a      	ldr	r2, [r3, #8]
 8009dde:	4b1a      	ldr	r3, [pc, #104]	; (8009e48 <HAL_TIM_PWM_Start+0x218>)
 8009de0:	4013      	ands	r3, r2
 8009de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2b06      	cmp	r3, #6
 8009de8:	d015      	beq.n	8009e16 <HAL_TIM_PWM_Start+0x1e6>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009df0:	d011      	beq.n	8009e16 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f042 0201 	orr.w	r2, r2, #1
 8009e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e02:	e008      	b.n	8009e16 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f042 0201 	orr.w	r2, r2, #1
 8009e12:	601a      	str	r2, [r3, #0]
 8009e14:	e000      	b.n	8009e18 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	40010000 	.word	0x40010000
 8009e28:	40010400 	.word	0x40010400
 8009e2c:	40014000 	.word	0x40014000
 8009e30:	40014400 	.word	0x40014400
 8009e34:	40014800 	.word	0x40014800
 8009e38:	40000400 	.word	0x40000400
 8009e3c:	40000800 	.word	0x40000800
 8009e40:	40000c00 	.word	0x40000c00
 8009e44:	40001800 	.word	0x40001800
 8009e48:	00010007 	.word	0x00010007

08009e4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d101      	bne.n	8009e6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009e66:	2302      	movs	r3, #2
 8009e68:	e0ff      	b.n	800a06a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2b14      	cmp	r3, #20
 8009e76:	f200 80f0 	bhi.w	800a05a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009e7a:	a201      	add	r2, pc, #4	; (adr r2, 8009e80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e80:	08009ed5 	.word	0x08009ed5
 8009e84:	0800a05b 	.word	0x0800a05b
 8009e88:	0800a05b 	.word	0x0800a05b
 8009e8c:	0800a05b 	.word	0x0800a05b
 8009e90:	08009f15 	.word	0x08009f15
 8009e94:	0800a05b 	.word	0x0800a05b
 8009e98:	0800a05b 	.word	0x0800a05b
 8009e9c:	0800a05b 	.word	0x0800a05b
 8009ea0:	08009f57 	.word	0x08009f57
 8009ea4:	0800a05b 	.word	0x0800a05b
 8009ea8:	0800a05b 	.word	0x0800a05b
 8009eac:	0800a05b 	.word	0x0800a05b
 8009eb0:	08009f97 	.word	0x08009f97
 8009eb4:	0800a05b 	.word	0x0800a05b
 8009eb8:	0800a05b 	.word	0x0800a05b
 8009ebc:	0800a05b 	.word	0x0800a05b
 8009ec0:	08009fd9 	.word	0x08009fd9
 8009ec4:	0800a05b 	.word	0x0800a05b
 8009ec8:	0800a05b 	.word	0x0800a05b
 8009ecc:	0800a05b 	.word	0x0800a05b
 8009ed0:	0800a019 	.word	0x0800a019
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68b9      	ldr	r1, [r7, #8]
 8009eda:	4618      	mov	r0, r3
 8009edc:	f000 fa5c 	bl	800a398 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	699a      	ldr	r2, [r3, #24]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f042 0208 	orr.w	r2, r2, #8
 8009eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	699a      	ldr	r2, [r3, #24]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f022 0204 	bic.w	r2, r2, #4
 8009efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	6999      	ldr	r1, [r3, #24]
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	691a      	ldr	r2, [r3, #16]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	619a      	str	r2, [r3, #24]
      break;
 8009f12:	e0a5      	b.n	800a060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68b9      	ldr	r1, [r7, #8]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f000 facc 	bl	800a4b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	699a      	ldr	r2, [r3, #24]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	699a      	ldr	r2, [r3, #24]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6999      	ldr	r1, [r3, #24]
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	021a      	lsls	r2, r3, #8
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	430a      	orrs	r2, r1
 8009f52:	619a      	str	r2, [r3, #24]
      break;
 8009f54:	e084      	b.n	800a060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68b9      	ldr	r1, [r7, #8]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 fb35 	bl	800a5cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	69da      	ldr	r2, [r3, #28]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f042 0208 	orr.w	r2, r2, #8
 8009f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	69da      	ldr	r2, [r3, #28]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f022 0204 	bic.w	r2, r2, #4
 8009f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	69d9      	ldr	r1, [r3, #28]
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	691a      	ldr	r2, [r3, #16]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	430a      	orrs	r2, r1
 8009f92:	61da      	str	r2, [r3, #28]
      break;
 8009f94:	e064      	b.n	800a060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68b9      	ldr	r1, [r7, #8]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f000 fb9d 	bl	800a6dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	69da      	ldr	r2, [r3, #28]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	69da      	ldr	r2, [r3, #28]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	69d9      	ldr	r1, [r3, #28]
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	021a      	lsls	r2, r3, #8
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	430a      	orrs	r2, r1
 8009fd4:	61da      	str	r2, [r3, #28]
      break;
 8009fd6:	e043      	b.n	800a060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68b9      	ldr	r1, [r7, #8]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 fbe6 	bl	800a7b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f042 0208 	orr.w	r2, r2, #8
 8009ff2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f022 0204 	bic.w	r2, r2, #4
 800a002:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	691a      	ldr	r2, [r3, #16]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	430a      	orrs	r2, r1
 800a014:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a016:	e023      	b.n	800a060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68b9      	ldr	r1, [r7, #8]
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 fc2a 	bl	800a878 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a032:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a042:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	021a      	lsls	r2, r3, #8
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	430a      	orrs	r2, r1
 800a056:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a058:	e002      	b.n	800a060 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	75fb      	strb	r3, [r7, #23]
      break;
 800a05e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a068:	7dfb      	ldrb	r3, [r7, #23]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop

0800a074 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d101      	bne.n	800a090 <HAL_TIM_ConfigClockSource+0x1c>
 800a08c:	2302      	movs	r3, #2
 800a08e:	e0dc      	b.n	800a24a <HAL_TIM_ConfigClockSource+0x1d6>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2202      	movs	r2, #2
 800a09c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	4b6a      	ldr	r3, [pc, #424]	; (800a254 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a64      	ldr	r2, [pc, #400]	; (800a258 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	f000 80a9 	beq.w	800a21e <HAL_TIM_ConfigClockSource+0x1aa>
 800a0cc:	4a62      	ldr	r2, [pc, #392]	; (800a258 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	f200 80ae 	bhi.w	800a230 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0d4:	4a61      	ldr	r2, [pc, #388]	; (800a25c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	f000 80a1 	beq.w	800a21e <HAL_TIM_ConfigClockSource+0x1aa>
 800a0dc:	4a5f      	ldr	r2, [pc, #380]	; (800a25c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	f200 80a6 	bhi.w	800a230 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0e4:	4a5e      	ldr	r2, [pc, #376]	; (800a260 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	f000 8099 	beq.w	800a21e <HAL_TIM_ConfigClockSource+0x1aa>
 800a0ec:	4a5c      	ldr	r2, [pc, #368]	; (800a260 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	f200 809e 	bhi.w	800a230 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a0f8:	f000 8091 	beq.w	800a21e <HAL_TIM_ConfigClockSource+0x1aa>
 800a0fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a100:	f200 8096 	bhi.w	800a230 <HAL_TIM_ConfigClockSource+0x1bc>
 800a104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a108:	f000 8089 	beq.w	800a21e <HAL_TIM_ConfigClockSource+0x1aa>
 800a10c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a110:	f200 808e 	bhi.w	800a230 <HAL_TIM_ConfigClockSource+0x1bc>
 800a114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a118:	d03e      	beq.n	800a198 <HAL_TIM_ConfigClockSource+0x124>
 800a11a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a11e:	f200 8087 	bhi.w	800a230 <HAL_TIM_ConfigClockSource+0x1bc>
 800a122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a126:	f000 8086 	beq.w	800a236 <HAL_TIM_ConfigClockSource+0x1c2>
 800a12a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a12e:	d87f      	bhi.n	800a230 <HAL_TIM_ConfigClockSource+0x1bc>
 800a130:	2b70      	cmp	r3, #112	; 0x70
 800a132:	d01a      	beq.n	800a16a <HAL_TIM_ConfigClockSource+0xf6>
 800a134:	2b70      	cmp	r3, #112	; 0x70
 800a136:	d87b      	bhi.n	800a230 <HAL_TIM_ConfigClockSource+0x1bc>
 800a138:	2b60      	cmp	r3, #96	; 0x60
 800a13a:	d050      	beq.n	800a1de <HAL_TIM_ConfigClockSource+0x16a>
 800a13c:	2b60      	cmp	r3, #96	; 0x60
 800a13e:	d877      	bhi.n	800a230 <HAL_TIM_ConfigClockSource+0x1bc>
 800a140:	2b50      	cmp	r3, #80	; 0x50
 800a142:	d03c      	beq.n	800a1be <HAL_TIM_ConfigClockSource+0x14a>
 800a144:	2b50      	cmp	r3, #80	; 0x50
 800a146:	d873      	bhi.n	800a230 <HAL_TIM_ConfigClockSource+0x1bc>
 800a148:	2b40      	cmp	r3, #64	; 0x40
 800a14a:	d058      	beq.n	800a1fe <HAL_TIM_ConfigClockSource+0x18a>
 800a14c:	2b40      	cmp	r3, #64	; 0x40
 800a14e:	d86f      	bhi.n	800a230 <HAL_TIM_ConfigClockSource+0x1bc>
 800a150:	2b30      	cmp	r3, #48	; 0x30
 800a152:	d064      	beq.n	800a21e <HAL_TIM_ConfigClockSource+0x1aa>
 800a154:	2b30      	cmp	r3, #48	; 0x30
 800a156:	d86b      	bhi.n	800a230 <HAL_TIM_ConfigClockSource+0x1bc>
 800a158:	2b20      	cmp	r3, #32
 800a15a:	d060      	beq.n	800a21e <HAL_TIM_ConfigClockSource+0x1aa>
 800a15c:	2b20      	cmp	r3, #32
 800a15e:	d867      	bhi.n	800a230 <HAL_TIM_ConfigClockSource+0x1bc>
 800a160:	2b00      	cmp	r3, #0
 800a162:	d05c      	beq.n	800a21e <HAL_TIM_ConfigClockSource+0x1aa>
 800a164:	2b10      	cmp	r3, #16
 800a166:	d05a      	beq.n	800a21e <HAL_TIM_ConfigClockSource+0x1aa>
 800a168:	e062      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6818      	ldr	r0, [r3, #0]
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	6899      	ldr	r1, [r3, #8]
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	685a      	ldr	r2, [r3, #4]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	f000 fc61 	bl	800aa40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a18c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	609a      	str	r2, [r3, #8]
      break;
 800a196:	e04f      	b.n	800a238 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6818      	ldr	r0, [r3, #0]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	6899      	ldr	r1, [r3, #8]
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	f000 fc4a 	bl	800aa40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	689a      	ldr	r2, [r3, #8]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1ba:	609a      	str	r2, [r3, #8]
      break;
 800a1bc:	e03c      	b.n	800a238 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6818      	ldr	r0, [r3, #0]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	6859      	ldr	r1, [r3, #4]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	f000 fbba 	bl	800a944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2150      	movs	r1, #80	; 0x50
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f000 fc14 	bl	800aa04 <TIM_ITRx_SetConfig>
      break;
 800a1dc:	e02c      	b.n	800a238 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6818      	ldr	r0, [r3, #0]
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	6859      	ldr	r1, [r3, #4]
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	f000 fbd9 	bl	800a9a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2160      	movs	r1, #96	; 0x60
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 fc04 	bl	800aa04 <TIM_ITRx_SetConfig>
      break;
 800a1fc:	e01c      	b.n	800a238 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6818      	ldr	r0, [r3, #0]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	6859      	ldr	r1, [r3, #4]
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	461a      	mov	r2, r3
 800a20c:	f000 fb9a 	bl	800a944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2140      	movs	r1, #64	; 0x40
 800a216:	4618      	mov	r0, r3
 800a218:	f000 fbf4 	bl	800aa04 <TIM_ITRx_SetConfig>
      break;
 800a21c:	e00c      	b.n	800a238 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4619      	mov	r1, r3
 800a228:	4610      	mov	r0, r2
 800a22a:	f000 fbeb 	bl	800aa04 <TIM_ITRx_SetConfig>
      break;
 800a22e:	e003      	b.n	800a238 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	73fb      	strb	r3, [r7, #15]
      break;
 800a234:	e000      	b.n	800a238 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a236:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a248:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	ffceff88 	.word	0xffceff88
 800a258:	00100040 	.word	0x00100040
 800a25c:	00100030 	.word	0x00100030
 800a260:	00100020 	.word	0x00100020

0800a264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a40      	ldr	r2, [pc, #256]	; (800a378 <TIM_Base_SetConfig+0x114>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d013      	beq.n	800a2a4 <TIM_Base_SetConfig+0x40>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a282:	d00f      	beq.n	800a2a4 <TIM_Base_SetConfig+0x40>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a3d      	ldr	r2, [pc, #244]	; (800a37c <TIM_Base_SetConfig+0x118>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d00b      	beq.n	800a2a4 <TIM_Base_SetConfig+0x40>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4a3c      	ldr	r2, [pc, #240]	; (800a380 <TIM_Base_SetConfig+0x11c>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d007      	beq.n	800a2a4 <TIM_Base_SetConfig+0x40>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a3b      	ldr	r2, [pc, #236]	; (800a384 <TIM_Base_SetConfig+0x120>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d003      	beq.n	800a2a4 <TIM_Base_SetConfig+0x40>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a3a      	ldr	r2, [pc, #232]	; (800a388 <TIM_Base_SetConfig+0x124>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d108      	bne.n	800a2b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a2f      	ldr	r2, [pc, #188]	; (800a378 <TIM_Base_SetConfig+0x114>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d01f      	beq.n	800a2fe <TIM_Base_SetConfig+0x9a>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2c4:	d01b      	beq.n	800a2fe <TIM_Base_SetConfig+0x9a>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a2c      	ldr	r2, [pc, #176]	; (800a37c <TIM_Base_SetConfig+0x118>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d017      	beq.n	800a2fe <TIM_Base_SetConfig+0x9a>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a2b      	ldr	r2, [pc, #172]	; (800a380 <TIM_Base_SetConfig+0x11c>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d013      	beq.n	800a2fe <TIM_Base_SetConfig+0x9a>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a2a      	ldr	r2, [pc, #168]	; (800a384 <TIM_Base_SetConfig+0x120>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d00f      	beq.n	800a2fe <TIM_Base_SetConfig+0x9a>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4a29      	ldr	r2, [pc, #164]	; (800a388 <TIM_Base_SetConfig+0x124>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d00b      	beq.n	800a2fe <TIM_Base_SetConfig+0x9a>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a28      	ldr	r2, [pc, #160]	; (800a38c <TIM_Base_SetConfig+0x128>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d007      	beq.n	800a2fe <TIM_Base_SetConfig+0x9a>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a27      	ldr	r2, [pc, #156]	; (800a390 <TIM_Base_SetConfig+0x12c>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d003      	beq.n	800a2fe <TIM_Base_SetConfig+0x9a>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a26      	ldr	r2, [pc, #152]	; (800a394 <TIM_Base_SetConfig+0x130>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d108      	bne.n	800a310 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	695b      	ldr	r3, [r3, #20]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	689a      	ldr	r2, [r3, #8]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a10      	ldr	r2, [pc, #64]	; (800a378 <TIM_Base_SetConfig+0x114>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d00f      	beq.n	800a35c <TIM_Base_SetConfig+0xf8>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a12      	ldr	r2, [pc, #72]	; (800a388 <TIM_Base_SetConfig+0x124>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d00b      	beq.n	800a35c <TIM_Base_SetConfig+0xf8>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a11      	ldr	r2, [pc, #68]	; (800a38c <TIM_Base_SetConfig+0x128>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d007      	beq.n	800a35c <TIM_Base_SetConfig+0xf8>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a10      	ldr	r2, [pc, #64]	; (800a390 <TIM_Base_SetConfig+0x12c>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d003      	beq.n	800a35c <TIM_Base_SetConfig+0xf8>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4a0f      	ldr	r2, [pc, #60]	; (800a394 <TIM_Base_SetConfig+0x130>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d103      	bne.n	800a364 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	691a      	ldr	r2, [r3, #16]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	615a      	str	r2, [r3, #20]
}
 800a36a:	bf00      	nop
 800a36c:	3714      	adds	r7, #20
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	40010000 	.word	0x40010000
 800a37c:	40000400 	.word	0x40000400
 800a380:	40000800 	.word	0x40000800
 800a384:	40000c00 	.word	0x40000c00
 800a388:	40010400 	.word	0x40010400
 800a38c:	40014000 	.word	0x40014000
 800a390:	40014400 	.word	0x40014400
 800a394:	40014800 	.word	0x40014800

0800a398 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	f023 0201 	bic.w	r2, r3, #1
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a1b      	ldr	r3, [r3, #32]
 800a3b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	4b37      	ldr	r3, [pc, #220]	; (800a4a0 <TIM_OC1_SetConfig+0x108>)
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f023 0303 	bic.w	r3, r3, #3
 800a3ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f023 0302 	bic.w	r3, r3, #2
 800a3e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	697a      	ldr	r2, [r7, #20]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a2d      	ldr	r2, [pc, #180]	; (800a4a4 <TIM_OC1_SetConfig+0x10c>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d00f      	beq.n	800a414 <TIM_OC1_SetConfig+0x7c>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a2c      	ldr	r2, [pc, #176]	; (800a4a8 <TIM_OC1_SetConfig+0x110>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d00b      	beq.n	800a414 <TIM_OC1_SetConfig+0x7c>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a2b      	ldr	r2, [pc, #172]	; (800a4ac <TIM_OC1_SetConfig+0x114>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d007      	beq.n	800a414 <TIM_OC1_SetConfig+0x7c>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a2a      	ldr	r2, [pc, #168]	; (800a4b0 <TIM_OC1_SetConfig+0x118>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d003      	beq.n	800a414 <TIM_OC1_SetConfig+0x7c>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a29      	ldr	r2, [pc, #164]	; (800a4b4 <TIM_OC1_SetConfig+0x11c>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d10c      	bne.n	800a42e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f023 0308 	bic.w	r3, r3, #8
 800a41a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	697a      	ldr	r2, [r7, #20]
 800a422:	4313      	orrs	r3, r2
 800a424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f023 0304 	bic.w	r3, r3, #4
 800a42c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a1c      	ldr	r2, [pc, #112]	; (800a4a4 <TIM_OC1_SetConfig+0x10c>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d00f      	beq.n	800a456 <TIM_OC1_SetConfig+0xbe>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a1b      	ldr	r2, [pc, #108]	; (800a4a8 <TIM_OC1_SetConfig+0x110>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d00b      	beq.n	800a456 <TIM_OC1_SetConfig+0xbe>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a1a      	ldr	r2, [pc, #104]	; (800a4ac <TIM_OC1_SetConfig+0x114>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d007      	beq.n	800a456 <TIM_OC1_SetConfig+0xbe>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a19      	ldr	r2, [pc, #100]	; (800a4b0 <TIM_OC1_SetConfig+0x118>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d003      	beq.n	800a456 <TIM_OC1_SetConfig+0xbe>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4a18      	ldr	r2, [pc, #96]	; (800a4b4 <TIM_OC1_SetConfig+0x11c>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d111      	bne.n	800a47a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a45c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	693a      	ldr	r2, [r7, #16]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	699b      	ldr	r3, [r3, #24]
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	4313      	orrs	r3, r2
 800a478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	685a      	ldr	r2, [r3, #4]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	621a      	str	r2, [r3, #32]
}
 800a494:	bf00      	nop
 800a496:	371c      	adds	r7, #28
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr
 800a4a0:	fffeff8f 	.word	0xfffeff8f
 800a4a4:	40010000 	.word	0x40010000
 800a4a8:	40010400 	.word	0x40010400
 800a4ac:	40014000 	.word	0x40014000
 800a4b0:	40014400 	.word	0x40014400
 800a4b4:	40014800 	.word	0x40014800

0800a4b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b087      	sub	sp, #28
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	f023 0210 	bic.w	r2, r3, #16
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	4b34      	ldr	r3, [pc, #208]	; (800a5b4 <TIM_OC2_SetConfig+0xfc>)
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	021b      	lsls	r3, r3, #8
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	f023 0320 	bic.w	r3, r3, #32
 800a502:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	011b      	lsls	r3, r3, #4
 800a50a:	697a      	ldr	r2, [r7, #20]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a29      	ldr	r2, [pc, #164]	; (800a5b8 <TIM_OC2_SetConfig+0x100>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d003      	beq.n	800a520 <TIM_OC2_SetConfig+0x68>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4a28      	ldr	r2, [pc, #160]	; (800a5bc <TIM_OC2_SetConfig+0x104>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d10d      	bne.n	800a53c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	011b      	lsls	r3, r3, #4
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	4313      	orrs	r3, r2
 800a532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a53a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4a1e      	ldr	r2, [pc, #120]	; (800a5b8 <TIM_OC2_SetConfig+0x100>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d00f      	beq.n	800a564 <TIM_OC2_SetConfig+0xac>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a1d      	ldr	r2, [pc, #116]	; (800a5bc <TIM_OC2_SetConfig+0x104>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d00b      	beq.n	800a564 <TIM_OC2_SetConfig+0xac>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a1c      	ldr	r2, [pc, #112]	; (800a5c0 <TIM_OC2_SetConfig+0x108>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d007      	beq.n	800a564 <TIM_OC2_SetConfig+0xac>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a1b      	ldr	r2, [pc, #108]	; (800a5c4 <TIM_OC2_SetConfig+0x10c>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d003      	beq.n	800a564 <TIM_OC2_SetConfig+0xac>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a1a      	ldr	r2, [pc, #104]	; (800a5c8 <TIM_OC2_SetConfig+0x110>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d113      	bne.n	800a58c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a56a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a572:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	695b      	ldr	r3, [r3, #20]
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	699b      	ldr	r3, [r3, #24]
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	4313      	orrs	r3, r2
 800a58a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	693a      	ldr	r2, [r7, #16]
 800a590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	621a      	str	r2, [r3, #32]
}
 800a5a6:	bf00      	nop
 800a5a8:	371c      	adds	r7, #28
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	feff8fff 	.word	0xfeff8fff
 800a5b8:	40010000 	.word	0x40010000
 800a5bc:	40010400 	.word	0x40010400
 800a5c0:	40014000 	.word	0x40014000
 800a5c4:	40014400 	.word	0x40014400
 800a5c8:	40014800 	.word	0x40014800

0800a5cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b087      	sub	sp, #28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a1b      	ldr	r3, [r3, #32]
 800a5da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a1b      	ldr	r3, [r3, #32]
 800a5e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	69db      	ldr	r3, [r3, #28]
 800a5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	4b33      	ldr	r3, [pc, #204]	; (800a6c4 <TIM_OC3_SetConfig+0xf8>)
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f023 0303 	bic.w	r3, r3, #3
 800a602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	021b      	lsls	r3, r3, #8
 800a61c:	697a      	ldr	r2, [r7, #20]
 800a61e:	4313      	orrs	r3, r2
 800a620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a28      	ldr	r2, [pc, #160]	; (800a6c8 <TIM_OC3_SetConfig+0xfc>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d003      	beq.n	800a632 <TIM_OC3_SetConfig+0x66>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4a27      	ldr	r2, [pc, #156]	; (800a6cc <TIM_OC3_SetConfig+0x100>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d10d      	bne.n	800a64e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a638:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	021b      	lsls	r3, r3, #8
 800a640:	697a      	ldr	r2, [r7, #20]
 800a642:	4313      	orrs	r3, r2
 800a644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a64c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a1d      	ldr	r2, [pc, #116]	; (800a6c8 <TIM_OC3_SetConfig+0xfc>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d00f      	beq.n	800a676 <TIM_OC3_SetConfig+0xaa>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a1c      	ldr	r2, [pc, #112]	; (800a6cc <TIM_OC3_SetConfig+0x100>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d00b      	beq.n	800a676 <TIM_OC3_SetConfig+0xaa>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a1b      	ldr	r2, [pc, #108]	; (800a6d0 <TIM_OC3_SetConfig+0x104>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d007      	beq.n	800a676 <TIM_OC3_SetConfig+0xaa>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a1a      	ldr	r2, [pc, #104]	; (800a6d4 <TIM_OC3_SetConfig+0x108>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d003      	beq.n	800a676 <TIM_OC3_SetConfig+0xaa>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a19      	ldr	r2, [pc, #100]	; (800a6d8 <TIM_OC3_SetConfig+0x10c>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d113      	bne.n	800a69e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a67c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	695b      	ldr	r3, [r3, #20]
 800a68a:	011b      	lsls	r3, r3, #4
 800a68c:	693a      	ldr	r2, [r7, #16]
 800a68e:	4313      	orrs	r3, r2
 800a690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	699b      	ldr	r3, [r3, #24]
 800a696:	011b      	lsls	r3, r3, #4
 800a698:	693a      	ldr	r2, [r7, #16]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	693a      	ldr	r2, [r7, #16]
 800a6a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	697a      	ldr	r2, [r7, #20]
 800a6b6:	621a      	str	r2, [r3, #32]
}
 800a6b8:	bf00      	nop
 800a6ba:	371c      	adds	r7, #28
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr
 800a6c4:	fffeff8f 	.word	0xfffeff8f
 800a6c8:	40010000 	.word	0x40010000
 800a6cc:	40010400 	.word	0x40010400
 800a6d0:	40014000 	.word	0x40014000
 800a6d4:	40014400 	.word	0x40014400
 800a6d8:	40014800 	.word	0x40014800

0800a6dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a1b      	ldr	r3, [r3, #32]
 800a6f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	69db      	ldr	r3, [r3, #28]
 800a702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	4b24      	ldr	r3, [pc, #144]	; (800a798 <TIM_OC4_SetConfig+0xbc>)
 800a708:	4013      	ands	r3, r2
 800a70a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	021b      	lsls	r3, r3, #8
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	031b      	lsls	r3, r3, #12
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	4313      	orrs	r3, r2
 800a732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4a19      	ldr	r2, [pc, #100]	; (800a79c <TIM_OC4_SetConfig+0xc0>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d00f      	beq.n	800a75c <TIM_OC4_SetConfig+0x80>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4a18      	ldr	r2, [pc, #96]	; (800a7a0 <TIM_OC4_SetConfig+0xc4>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d00b      	beq.n	800a75c <TIM_OC4_SetConfig+0x80>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a17      	ldr	r2, [pc, #92]	; (800a7a4 <TIM_OC4_SetConfig+0xc8>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d007      	beq.n	800a75c <TIM_OC4_SetConfig+0x80>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a16      	ldr	r2, [pc, #88]	; (800a7a8 <TIM_OC4_SetConfig+0xcc>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d003      	beq.n	800a75c <TIM_OC4_SetConfig+0x80>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a15      	ldr	r2, [pc, #84]	; (800a7ac <TIM_OC4_SetConfig+0xd0>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d109      	bne.n	800a770 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a762:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	695b      	ldr	r3, [r3, #20]
 800a768:	019b      	lsls	r3, r3, #6
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	4313      	orrs	r3, r2
 800a76e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	697a      	ldr	r2, [r7, #20]
 800a774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	685a      	ldr	r2, [r3, #4]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	693a      	ldr	r2, [r7, #16]
 800a788:	621a      	str	r2, [r3, #32]
}
 800a78a:	bf00      	nop
 800a78c:	371c      	adds	r7, #28
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	feff8fff 	.word	0xfeff8fff
 800a79c:	40010000 	.word	0x40010000
 800a7a0:	40010400 	.word	0x40010400
 800a7a4:	40014000 	.word	0x40014000
 800a7a8:	40014400 	.word	0x40014400
 800a7ac:	40014800 	.word	0x40014800

0800a7b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b087      	sub	sp, #28
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a1b      	ldr	r3, [r3, #32]
 800a7be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a1b      	ldr	r3, [r3, #32]
 800a7ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	4b21      	ldr	r3, [pc, #132]	; (800a860 <TIM_OC5_SetConfig+0xb0>)
 800a7dc:	4013      	ands	r3, r2
 800a7de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a7f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	041b      	lsls	r3, r3, #16
 800a7f8:	693a      	ldr	r2, [r7, #16]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a18      	ldr	r2, [pc, #96]	; (800a864 <TIM_OC5_SetConfig+0xb4>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d00f      	beq.n	800a826 <TIM_OC5_SetConfig+0x76>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a17      	ldr	r2, [pc, #92]	; (800a868 <TIM_OC5_SetConfig+0xb8>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d00b      	beq.n	800a826 <TIM_OC5_SetConfig+0x76>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a16      	ldr	r2, [pc, #88]	; (800a86c <TIM_OC5_SetConfig+0xbc>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d007      	beq.n	800a826 <TIM_OC5_SetConfig+0x76>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a15      	ldr	r2, [pc, #84]	; (800a870 <TIM_OC5_SetConfig+0xc0>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d003      	beq.n	800a826 <TIM_OC5_SetConfig+0x76>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a14      	ldr	r2, [pc, #80]	; (800a874 <TIM_OC5_SetConfig+0xc4>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d109      	bne.n	800a83a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a82c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	021b      	lsls	r3, r3, #8
 800a834:	697a      	ldr	r2, [r7, #20]
 800a836:	4313      	orrs	r3, r2
 800a838:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	697a      	ldr	r2, [r7, #20]
 800a83e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	68fa      	ldr	r2, [r7, #12]
 800a844:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	685a      	ldr	r2, [r3, #4]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	621a      	str	r2, [r3, #32]
}
 800a854:	bf00      	nop
 800a856:	371c      	adds	r7, #28
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr
 800a860:	fffeff8f 	.word	0xfffeff8f
 800a864:	40010000 	.word	0x40010000
 800a868:	40010400 	.word	0x40010400
 800a86c:	40014000 	.word	0x40014000
 800a870:	40014400 	.word	0x40014400
 800a874:	40014800 	.word	0x40014800

0800a878 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a878:	b480      	push	{r7}
 800a87a:	b087      	sub	sp, #28
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a1b      	ldr	r3, [r3, #32]
 800a886:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	4b22      	ldr	r3, [pc, #136]	; (800a92c <TIM_OC6_SetConfig+0xb4>)
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	021b      	lsls	r3, r3, #8
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a8ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	051b      	lsls	r3, r3, #20
 800a8c2:	693a      	ldr	r2, [r7, #16]
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a19      	ldr	r2, [pc, #100]	; (800a930 <TIM_OC6_SetConfig+0xb8>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d00f      	beq.n	800a8f0 <TIM_OC6_SetConfig+0x78>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a18      	ldr	r2, [pc, #96]	; (800a934 <TIM_OC6_SetConfig+0xbc>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d00b      	beq.n	800a8f0 <TIM_OC6_SetConfig+0x78>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a17      	ldr	r2, [pc, #92]	; (800a938 <TIM_OC6_SetConfig+0xc0>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d007      	beq.n	800a8f0 <TIM_OC6_SetConfig+0x78>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a16      	ldr	r2, [pc, #88]	; (800a93c <TIM_OC6_SetConfig+0xc4>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d003      	beq.n	800a8f0 <TIM_OC6_SetConfig+0x78>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a15      	ldr	r2, [pc, #84]	; (800a940 <TIM_OC6_SetConfig+0xc8>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d109      	bne.n	800a904 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	695b      	ldr	r3, [r3, #20]
 800a8fc:	029b      	lsls	r3, r3, #10
 800a8fe:	697a      	ldr	r2, [r7, #20]
 800a900:	4313      	orrs	r3, r2
 800a902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	685a      	ldr	r2, [r3, #4]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	693a      	ldr	r2, [r7, #16]
 800a91c:	621a      	str	r2, [r3, #32]
}
 800a91e:	bf00      	nop
 800a920:	371c      	adds	r7, #28
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	feff8fff 	.word	0xfeff8fff
 800a930:	40010000 	.word	0x40010000
 800a934:	40010400 	.word	0x40010400
 800a938:	40014000 	.word	0x40014000
 800a93c:	40014400 	.word	0x40014400
 800a940:	40014800 	.word	0x40014800

0800a944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a944:	b480      	push	{r7}
 800a946:	b087      	sub	sp, #28
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6a1b      	ldr	r3, [r3, #32]
 800a954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6a1b      	ldr	r3, [r3, #32]
 800a95a:	f023 0201 	bic.w	r2, r3, #1
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	699b      	ldr	r3, [r3, #24]
 800a966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a96e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	011b      	lsls	r3, r3, #4
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	4313      	orrs	r3, r2
 800a978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f023 030a 	bic.w	r3, r3, #10
 800a980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	4313      	orrs	r3, r2
 800a988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	693a      	ldr	r2, [r7, #16]
 800a98e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	621a      	str	r2, [r3, #32]
}
 800a996:	bf00      	nop
 800a998:	371c      	adds	r7, #28
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr

0800a9a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9a2:	b480      	push	{r7}
 800a9a4:	b087      	sub	sp, #28
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	60f8      	str	r0, [r7, #12]
 800a9aa:	60b9      	str	r1, [r7, #8]
 800a9ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	f023 0210 	bic.w	r2, r3, #16
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6a1b      	ldr	r3, [r3, #32]
 800a9c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a9cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	031b      	lsls	r3, r3, #12
 800a9d2:	697a      	ldr	r2, [r7, #20]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a9de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	011b      	lsls	r3, r3, #4
 800a9e4:	693a      	ldr	r2, [r7, #16]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	621a      	str	r2, [r3, #32]
}
 800a9f6:	bf00      	nop
 800a9f8:	371c      	adds	r7, #28
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
	...

0800aa04 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	4b09      	ldr	r3, [pc, #36]	; (800aa3c <TIM_ITRx_SetConfig+0x38>)
 800aa18:	4013      	ands	r3, r2
 800aa1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa1c:	683a      	ldr	r2, [r7, #0]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	f043 0307 	orr.w	r3, r3, #7
 800aa26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	609a      	str	r2, [r3, #8]
}
 800aa2e:	bf00      	nop
 800aa30:	3714      	adds	r7, #20
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	ffcfff8f 	.word	0xffcfff8f

0800aa40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b087      	sub	sp, #28
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
 800aa4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	021a      	lsls	r2, r3, #8
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	431a      	orrs	r2, r3
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	697a      	ldr	r2, [r7, #20]
 800aa72:	609a      	str	r2, [r3, #8]
}
 800aa74:	bf00      	nop
 800aa76:	371c      	adds	r7, #28
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b087      	sub	sp, #28
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	f003 031f 	and.w	r3, r3, #31
 800aa92:	2201      	movs	r2, #1
 800aa94:	fa02 f303 	lsl.w	r3, r2, r3
 800aa98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6a1a      	ldr	r2, [r3, #32]
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	43db      	mvns	r3, r3
 800aaa2:	401a      	ands	r2, r3
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6a1a      	ldr	r2, [r3, #32]
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	f003 031f 	and.w	r3, r3, #31
 800aab2:	6879      	ldr	r1, [r7, #4]
 800aab4:	fa01 f303 	lsl.w	r3, r1, r3
 800aab8:	431a      	orrs	r2, r3
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	621a      	str	r2, [r3, #32]
}
 800aabe:	bf00      	nop
 800aac0:	371c      	adds	r7, #28
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
	...

0800aacc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d101      	bne.n	800aae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aae0:	2302      	movs	r3, #2
 800aae2:	e06d      	b.n	800abc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2202      	movs	r2, #2
 800aaf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a30      	ldr	r2, [pc, #192]	; (800abcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d004      	beq.n	800ab18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a2f      	ldr	r2, [pc, #188]	; (800abd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d108      	bne.n	800ab2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ab1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a20      	ldr	r2, [pc, #128]	; (800abcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d022      	beq.n	800ab94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab56:	d01d      	beq.n	800ab94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a1d      	ldr	r2, [pc, #116]	; (800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d018      	beq.n	800ab94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a1c      	ldr	r2, [pc, #112]	; (800abd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d013      	beq.n	800ab94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a1a      	ldr	r2, [pc, #104]	; (800abdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d00e      	beq.n	800ab94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a15      	ldr	r2, [pc, #84]	; (800abd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d009      	beq.n	800ab94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a16      	ldr	r2, [pc, #88]	; (800abe0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d004      	beq.n	800ab94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a15      	ldr	r2, [pc, #84]	; (800abe4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d10c      	bne.n	800abae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3714      	adds	r7, #20
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr
 800abcc:	40010000 	.word	0x40010000
 800abd0:	40010400 	.word	0x40010400
 800abd4:	40000400 	.word	0x40000400
 800abd8:	40000800 	.word	0x40000800
 800abdc:	40000c00 	.word	0x40000c00
 800abe0:	40001800 	.word	0x40001800
 800abe4:	40014000 	.word	0x40014000

0800abe8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d101      	bne.n	800abfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	e042      	b.n	800ac80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d106      	bne.n	800ac12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7fa f9ff 	bl	8005010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2224      	movs	r2, #36	; 0x24
 800ac16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f022 0201 	bic.w	r2, r2, #1
 800ac28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 f8c2 	bl	800adb4 <UART_SetConfig>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d101      	bne.n	800ac3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	e022      	b.n	800ac80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d002      	beq.n	800ac48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fe1e 	bl	800b884 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	685a      	ldr	r2, [r3, #4]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	689a      	ldr	r2, [r3, #8]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f042 0201 	orr.w	r2, r2, #1
 800ac76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 fea5 	bl	800b9c8 <UART_CheckIdleState>
 800ac7e:	4603      	mov	r3, r0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3708      	adds	r7, #8
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08a      	sub	sp, #40	; 0x28
 800ac8c:	af02      	add	r7, sp, #8
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	603b      	str	r3, [r7, #0]
 800ac94:	4613      	mov	r3, r2
 800ac96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac9e:	2b20      	cmp	r3, #32
 800aca0:	f040 8083 	bne.w	800adaa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d002      	beq.n	800acb0 <HAL_UART_Transmit+0x28>
 800acaa:	88fb      	ldrh	r3, [r7, #6]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d101      	bne.n	800acb4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800acb0:	2301      	movs	r3, #1
 800acb2:	e07b      	b.n	800adac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d101      	bne.n	800acc2 <HAL_UART_Transmit+0x3a>
 800acbe:	2302      	movs	r3, #2
 800acc0:	e074      	b.n	800adac <HAL_UART_Transmit+0x124>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2221      	movs	r2, #33	; 0x21
 800acd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800acda:	f7fa fb25 	bl	8005328 <HAL_GetTick>
 800acde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	88fa      	ldrh	r2, [r7, #6]
 800ace4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	88fa      	ldrh	r2, [r7, #6]
 800acec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acf8:	d108      	bne.n	800ad0c <HAL_UART_Transmit+0x84>
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d104      	bne.n	800ad0c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ad02:	2300      	movs	r3, #0
 800ad04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	61bb      	str	r3, [r7, #24]
 800ad0a:	e003      	b.n	800ad14 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad10:	2300      	movs	r3, #0
 800ad12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ad1c:	e02c      	b.n	800ad78 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	9300      	str	r3, [sp, #0]
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	2200      	movs	r2, #0
 800ad26:	2180      	movs	r1, #128	; 0x80
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f000 fe98 	bl	800ba5e <UART_WaitOnFlagUntilTimeout>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d001      	beq.n	800ad38 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ad34:	2303      	movs	r3, #3
 800ad36:	e039      	b.n	800adac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10b      	bne.n	800ad56 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	461a      	mov	r2, r3
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	3302      	adds	r3, #2
 800ad52:	61bb      	str	r3, [r7, #24]
 800ad54:	e007      	b.n	800ad66 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	781a      	ldrb	r2, [r3, #0]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	3301      	adds	r3, #1
 800ad64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1cc      	bne.n	800ad1e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	9300      	str	r3, [sp, #0]
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	2140      	movs	r1, #64	; 0x40
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	f000 fe65 	bl	800ba5e <UART_WaitOnFlagUntilTimeout>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d001      	beq.n	800ad9e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	e006      	b.n	800adac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2220      	movs	r2, #32
 800ada2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ada6:	2300      	movs	r3, #0
 800ada8:	e000      	b.n	800adac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800adaa:	2302      	movs	r3, #2
  }
}
 800adac:	4618      	mov	r0, r3
 800adae:	3720      	adds	r7, #32
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800adb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800adb8:	b092      	sub	sp, #72	; 0x48
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800adbe:	2300      	movs	r3, #0
 800adc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	689a      	ldr	r2, [r3, #8]
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	431a      	orrs	r2, r3
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	695b      	ldr	r3, [r3, #20]
 800add2:	431a      	orrs	r2, r3
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	69db      	ldr	r3, [r3, #28]
 800add8:	4313      	orrs	r3, r2
 800adda:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	4bbe      	ldr	r3, [pc, #760]	; (800b0dc <UART_SetConfig+0x328>)
 800ade4:	4013      	ands	r3, r2
 800ade6:	697a      	ldr	r2, [r7, #20]
 800ade8:	6812      	ldr	r2, [r2, #0]
 800adea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800adec:	430b      	orrs	r3, r1
 800adee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	68da      	ldr	r2, [r3, #12]
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	430a      	orrs	r2, r1
 800ae04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	699b      	ldr	r3, [r3, #24]
 800ae0a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4ab3      	ldr	r2, [pc, #716]	; (800b0e0 <UART_SetConfig+0x32c>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d004      	beq.n	800ae20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	689a      	ldr	r2, [r3, #8]
 800ae26:	4baf      	ldr	r3, [pc, #700]	; (800b0e4 <UART_SetConfig+0x330>)
 800ae28:	4013      	ands	r3, r2
 800ae2a:	697a      	ldr	r2, [r7, #20]
 800ae2c:	6812      	ldr	r2, [r2, #0]
 800ae2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae30:	430b      	orrs	r3, r1
 800ae32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3a:	f023 010f 	bic.w	r1, r3, #15
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	430a      	orrs	r2, r1
 800ae48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4aa6      	ldr	r2, [pc, #664]	; (800b0e8 <UART_SetConfig+0x334>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d177      	bne.n	800af44 <UART_SetConfig+0x190>
 800ae54:	4ba5      	ldr	r3, [pc, #660]	; (800b0ec <UART_SetConfig+0x338>)
 800ae56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae5c:	2b28      	cmp	r3, #40	; 0x28
 800ae5e:	d86d      	bhi.n	800af3c <UART_SetConfig+0x188>
 800ae60:	a201      	add	r2, pc, #4	; (adr r2, 800ae68 <UART_SetConfig+0xb4>)
 800ae62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae66:	bf00      	nop
 800ae68:	0800af0d 	.word	0x0800af0d
 800ae6c:	0800af3d 	.word	0x0800af3d
 800ae70:	0800af3d 	.word	0x0800af3d
 800ae74:	0800af3d 	.word	0x0800af3d
 800ae78:	0800af3d 	.word	0x0800af3d
 800ae7c:	0800af3d 	.word	0x0800af3d
 800ae80:	0800af3d 	.word	0x0800af3d
 800ae84:	0800af3d 	.word	0x0800af3d
 800ae88:	0800af15 	.word	0x0800af15
 800ae8c:	0800af3d 	.word	0x0800af3d
 800ae90:	0800af3d 	.word	0x0800af3d
 800ae94:	0800af3d 	.word	0x0800af3d
 800ae98:	0800af3d 	.word	0x0800af3d
 800ae9c:	0800af3d 	.word	0x0800af3d
 800aea0:	0800af3d 	.word	0x0800af3d
 800aea4:	0800af3d 	.word	0x0800af3d
 800aea8:	0800af1d 	.word	0x0800af1d
 800aeac:	0800af3d 	.word	0x0800af3d
 800aeb0:	0800af3d 	.word	0x0800af3d
 800aeb4:	0800af3d 	.word	0x0800af3d
 800aeb8:	0800af3d 	.word	0x0800af3d
 800aebc:	0800af3d 	.word	0x0800af3d
 800aec0:	0800af3d 	.word	0x0800af3d
 800aec4:	0800af3d 	.word	0x0800af3d
 800aec8:	0800af25 	.word	0x0800af25
 800aecc:	0800af3d 	.word	0x0800af3d
 800aed0:	0800af3d 	.word	0x0800af3d
 800aed4:	0800af3d 	.word	0x0800af3d
 800aed8:	0800af3d 	.word	0x0800af3d
 800aedc:	0800af3d 	.word	0x0800af3d
 800aee0:	0800af3d 	.word	0x0800af3d
 800aee4:	0800af3d 	.word	0x0800af3d
 800aee8:	0800af2d 	.word	0x0800af2d
 800aeec:	0800af3d 	.word	0x0800af3d
 800aef0:	0800af3d 	.word	0x0800af3d
 800aef4:	0800af3d 	.word	0x0800af3d
 800aef8:	0800af3d 	.word	0x0800af3d
 800aefc:	0800af3d 	.word	0x0800af3d
 800af00:	0800af3d 	.word	0x0800af3d
 800af04:	0800af3d 	.word	0x0800af3d
 800af08:	0800af35 	.word	0x0800af35
 800af0c:	2301      	movs	r3, #1
 800af0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af12:	e222      	b.n	800b35a <UART_SetConfig+0x5a6>
 800af14:	2304      	movs	r3, #4
 800af16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af1a:	e21e      	b.n	800b35a <UART_SetConfig+0x5a6>
 800af1c:	2308      	movs	r3, #8
 800af1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af22:	e21a      	b.n	800b35a <UART_SetConfig+0x5a6>
 800af24:	2310      	movs	r3, #16
 800af26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af2a:	e216      	b.n	800b35a <UART_SetConfig+0x5a6>
 800af2c:	2320      	movs	r3, #32
 800af2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af32:	e212      	b.n	800b35a <UART_SetConfig+0x5a6>
 800af34:	2340      	movs	r3, #64	; 0x40
 800af36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af3a:	e20e      	b.n	800b35a <UART_SetConfig+0x5a6>
 800af3c:	2380      	movs	r3, #128	; 0x80
 800af3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af42:	e20a      	b.n	800b35a <UART_SetConfig+0x5a6>
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a69      	ldr	r2, [pc, #420]	; (800b0f0 <UART_SetConfig+0x33c>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d130      	bne.n	800afb0 <UART_SetConfig+0x1fc>
 800af4e:	4b67      	ldr	r3, [pc, #412]	; (800b0ec <UART_SetConfig+0x338>)
 800af50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af52:	f003 0307 	and.w	r3, r3, #7
 800af56:	2b05      	cmp	r3, #5
 800af58:	d826      	bhi.n	800afa8 <UART_SetConfig+0x1f4>
 800af5a:	a201      	add	r2, pc, #4	; (adr r2, 800af60 <UART_SetConfig+0x1ac>)
 800af5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af60:	0800af79 	.word	0x0800af79
 800af64:	0800af81 	.word	0x0800af81
 800af68:	0800af89 	.word	0x0800af89
 800af6c:	0800af91 	.word	0x0800af91
 800af70:	0800af99 	.word	0x0800af99
 800af74:	0800afa1 	.word	0x0800afa1
 800af78:	2300      	movs	r3, #0
 800af7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af7e:	e1ec      	b.n	800b35a <UART_SetConfig+0x5a6>
 800af80:	2304      	movs	r3, #4
 800af82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af86:	e1e8      	b.n	800b35a <UART_SetConfig+0x5a6>
 800af88:	2308      	movs	r3, #8
 800af8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af8e:	e1e4      	b.n	800b35a <UART_SetConfig+0x5a6>
 800af90:	2310      	movs	r3, #16
 800af92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af96:	e1e0      	b.n	800b35a <UART_SetConfig+0x5a6>
 800af98:	2320      	movs	r3, #32
 800af9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af9e:	e1dc      	b.n	800b35a <UART_SetConfig+0x5a6>
 800afa0:	2340      	movs	r3, #64	; 0x40
 800afa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afa6:	e1d8      	b.n	800b35a <UART_SetConfig+0x5a6>
 800afa8:	2380      	movs	r3, #128	; 0x80
 800afaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afae:	e1d4      	b.n	800b35a <UART_SetConfig+0x5a6>
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a4f      	ldr	r2, [pc, #316]	; (800b0f4 <UART_SetConfig+0x340>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d130      	bne.n	800b01c <UART_SetConfig+0x268>
 800afba:	4b4c      	ldr	r3, [pc, #304]	; (800b0ec <UART_SetConfig+0x338>)
 800afbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afbe:	f003 0307 	and.w	r3, r3, #7
 800afc2:	2b05      	cmp	r3, #5
 800afc4:	d826      	bhi.n	800b014 <UART_SetConfig+0x260>
 800afc6:	a201      	add	r2, pc, #4	; (adr r2, 800afcc <UART_SetConfig+0x218>)
 800afc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afcc:	0800afe5 	.word	0x0800afe5
 800afd0:	0800afed 	.word	0x0800afed
 800afd4:	0800aff5 	.word	0x0800aff5
 800afd8:	0800affd 	.word	0x0800affd
 800afdc:	0800b005 	.word	0x0800b005
 800afe0:	0800b00d 	.word	0x0800b00d
 800afe4:	2300      	movs	r3, #0
 800afe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afea:	e1b6      	b.n	800b35a <UART_SetConfig+0x5a6>
 800afec:	2304      	movs	r3, #4
 800afee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aff2:	e1b2      	b.n	800b35a <UART_SetConfig+0x5a6>
 800aff4:	2308      	movs	r3, #8
 800aff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800affa:	e1ae      	b.n	800b35a <UART_SetConfig+0x5a6>
 800affc:	2310      	movs	r3, #16
 800affe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b002:	e1aa      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b004:	2320      	movs	r3, #32
 800b006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b00a:	e1a6      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b00c:	2340      	movs	r3, #64	; 0x40
 800b00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b012:	e1a2      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b014:	2380      	movs	r3, #128	; 0x80
 800b016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b01a:	e19e      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a35      	ldr	r2, [pc, #212]	; (800b0f8 <UART_SetConfig+0x344>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d130      	bne.n	800b088 <UART_SetConfig+0x2d4>
 800b026:	4b31      	ldr	r3, [pc, #196]	; (800b0ec <UART_SetConfig+0x338>)
 800b028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b02a:	f003 0307 	and.w	r3, r3, #7
 800b02e:	2b05      	cmp	r3, #5
 800b030:	d826      	bhi.n	800b080 <UART_SetConfig+0x2cc>
 800b032:	a201      	add	r2, pc, #4	; (adr r2, 800b038 <UART_SetConfig+0x284>)
 800b034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b038:	0800b051 	.word	0x0800b051
 800b03c:	0800b059 	.word	0x0800b059
 800b040:	0800b061 	.word	0x0800b061
 800b044:	0800b069 	.word	0x0800b069
 800b048:	0800b071 	.word	0x0800b071
 800b04c:	0800b079 	.word	0x0800b079
 800b050:	2300      	movs	r3, #0
 800b052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b056:	e180      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b058:	2304      	movs	r3, #4
 800b05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b05e:	e17c      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b060:	2308      	movs	r3, #8
 800b062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b066:	e178      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b068:	2310      	movs	r3, #16
 800b06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b06e:	e174      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b070:	2320      	movs	r3, #32
 800b072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b076:	e170      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b078:	2340      	movs	r3, #64	; 0x40
 800b07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b07e:	e16c      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b080:	2380      	movs	r3, #128	; 0x80
 800b082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b086:	e168      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a1b      	ldr	r2, [pc, #108]	; (800b0fc <UART_SetConfig+0x348>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d142      	bne.n	800b118 <UART_SetConfig+0x364>
 800b092:	4b16      	ldr	r3, [pc, #88]	; (800b0ec <UART_SetConfig+0x338>)
 800b094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b096:	f003 0307 	and.w	r3, r3, #7
 800b09a:	2b05      	cmp	r3, #5
 800b09c:	d838      	bhi.n	800b110 <UART_SetConfig+0x35c>
 800b09e:	a201      	add	r2, pc, #4	; (adr r2, 800b0a4 <UART_SetConfig+0x2f0>)
 800b0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a4:	0800b0bd 	.word	0x0800b0bd
 800b0a8:	0800b0c5 	.word	0x0800b0c5
 800b0ac:	0800b0cd 	.word	0x0800b0cd
 800b0b0:	0800b0d5 	.word	0x0800b0d5
 800b0b4:	0800b101 	.word	0x0800b101
 800b0b8:	0800b109 	.word	0x0800b109
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0c2:	e14a      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b0c4:	2304      	movs	r3, #4
 800b0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ca:	e146      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b0cc:	2308      	movs	r3, #8
 800b0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0d2:	e142      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b0d4:	2310      	movs	r3, #16
 800b0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0da:	e13e      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b0dc:	cfff69f3 	.word	0xcfff69f3
 800b0e0:	58000c00 	.word	0x58000c00
 800b0e4:	11fff4ff 	.word	0x11fff4ff
 800b0e8:	40011000 	.word	0x40011000
 800b0ec:	58024400 	.word	0x58024400
 800b0f0:	40004400 	.word	0x40004400
 800b0f4:	40004800 	.word	0x40004800
 800b0f8:	40004c00 	.word	0x40004c00
 800b0fc:	40005000 	.word	0x40005000
 800b100:	2320      	movs	r3, #32
 800b102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b106:	e128      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b108:	2340      	movs	r3, #64	; 0x40
 800b10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b10e:	e124      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b110:	2380      	movs	r3, #128	; 0x80
 800b112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b116:	e120      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4acb      	ldr	r2, [pc, #812]	; (800b44c <UART_SetConfig+0x698>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d176      	bne.n	800b210 <UART_SetConfig+0x45c>
 800b122:	4bcb      	ldr	r3, [pc, #812]	; (800b450 <UART_SetConfig+0x69c>)
 800b124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b126:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b12a:	2b28      	cmp	r3, #40	; 0x28
 800b12c:	d86c      	bhi.n	800b208 <UART_SetConfig+0x454>
 800b12e:	a201      	add	r2, pc, #4	; (adr r2, 800b134 <UART_SetConfig+0x380>)
 800b130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b134:	0800b1d9 	.word	0x0800b1d9
 800b138:	0800b209 	.word	0x0800b209
 800b13c:	0800b209 	.word	0x0800b209
 800b140:	0800b209 	.word	0x0800b209
 800b144:	0800b209 	.word	0x0800b209
 800b148:	0800b209 	.word	0x0800b209
 800b14c:	0800b209 	.word	0x0800b209
 800b150:	0800b209 	.word	0x0800b209
 800b154:	0800b1e1 	.word	0x0800b1e1
 800b158:	0800b209 	.word	0x0800b209
 800b15c:	0800b209 	.word	0x0800b209
 800b160:	0800b209 	.word	0x0800b209
 800b164:	0800b209 	.word	0x0800b209
 800b168:	0800b209 	.word	0x0800b209
 800b16c:	0800b209 	.word	0x0800b209
 800b170:	0800b209 	.word	0x0800b209
 800b174:	0800b1e9 	.word	0x0800b1e9
 800b178:	0800b209 	.word	0x0800b209
 800b17c:	0800b209 	.word	0x0800b209
 800b180:	0800b209 	.word	0x0800b209
 800b184:	0800b209 	.word	0x0800b209
 800b188:	0800b209 	.word	0x0800b209
 800b18c:	0800b209 	.word	0x0800b209
 800b190:	0800b209 	.word	0x0800b209
 800b194:	0800b1f1 	.word	0x0800b1f1
 800b198:	0800b209 	.word	0x0800b209
 800b19c:	0800b209 	.word	0x0800b209
 800b1a0:	0800b209 	.word	0x0800b209
 800b1a4:	0800b209 	.word	0x0800b209
 800b1a8:	0800b209 	.word	0x0800b209
 800b1ac:	0800b209 	.word	0x0800b209
 800b1b0:	0800b209 	.word	0x0800b209
 800b1b4:	0800b1f9 	.word	0x0800b1f9
 800b1b8:	0800b209 	.word	0x0800b209
 800b1bc:	0800b209 	.word	0x0800b209
 800b1c0:	0800b209 	.word	0x0800b209
 800b1c4:	0800b209 	.word	0x0800b209
 800b1c8:	0800b209 	.word	0x0800b209
 800b1cc:	0800b209 	.word	0x0800b209
 800b1d0:	0800b209 	.word	0x0800b209
 800b1d4:	0800b201 	.word	0x0800b201
 800b1d8:	2301      	movs	r3, #1
 800b1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1de:	e0bc      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b1e0:	2304      	movs	r3, #4
 800b1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1e6:	e0b8      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b1e8:	2308      	movs	r3, #8
 800b1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ee:	e0b4      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b1f0:	2310      	movs	r3, #16
 800b1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1f6:	e0b0      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b1f8:	2320      	movs	r3, #32
 800b1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1fe:	e0ac      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b200:	2340      	movs	r3, #64	; 0x40
 800b202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b206:	e0a8      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b208:	2380      	movs	r3, #128	; 0x80
 800b20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b20e:	e0a4      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a8f      	ldr	r2, [pc, #572]	; (800b454 <UART_SetConfig+0x6a0>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d130      	bne.n	800b27c <UART_SetConfig+0x4c8>
 800b21a:	4b8d      	ldr	r3, [pc, #564]	; (800b450 <UART_SetConfig+0x69c>)
 800b21c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b21e:	f003 0307 	and.w	r3, r3, #7
 800b222:	2b05      	cmp	r3, #5
 800b224:	d826      	bhi.n	800b274 <UART_SetConfig+0x4c0>
 800b226:	a201      	add	r2, pc, #4	; (adr r2, 800b22c <UART_SetConfig+0x478>)
 800b228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b22c:	0800b245 	.word	0x0800b245
 800b230:	0800b24d 	.word	0x0800b24d
 800b234:	0800b255 	.word	0x0800b255
 800b238:	0800b25d 	.word	0x0800b25d
 800b23c:	0800b265 	.word	0x0800b265
 800b240:	0800b26d 	.word	0x0800b26d
 800b244:	2300      	movs	r3, #0
 800b246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b24a:	e086      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b24c:	2304      	movs	r3, #4
 800b24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b252:	e082      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b254:	2308      	movs	r3, #8
 800b256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b25a:	e07e      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b25c:	2310      	movs	r3, #16
 800b25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b262:	e07a      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b264:	2320      	movs	r3, #32
 800b266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b26a:	e076      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b26c:	2340      	movs	r3, #64	; 0x40
 800b26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b272:	e072      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b274:	2380      	movs	r3, #128	; 0x80
 800b276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b27a:	e06e      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a75      	ldr	r2, [pc, #468]	; (800b458 <UART_SetConfig+0x6a4>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d130      	bne.n	800b2e8 <UART_SetConfig+0x534>
 800b286:	4b72      	ldr	r3, [pc, #456]	; (800b450 <UART_SetConfig+0x69c>)
 800b288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b28a:	f003 0307 	and.w	r3, r3, #7
 800b28e:	2b05      	cmp	r3, #5
 800b290:	d826      	bhi.n	800b2e0 <UART_SetConfig+0x52c>
 800b292:	a201      	add	r2, pc, #4	; (adr r2, 800b298 <UART_SetConfig+0x4e4>)
 800b294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b298:	0800b2b1 	.word	0x0800b2b1
 800b29c:	0800b2b9 	.word	0x0800b2b9
 800b2a0:	0800b2c1 	.word	0x0800b2c1
 800b2a4:	0800b2c9 	.word	0x0800b2c9
 800b2a8:	0800b2d1 	.word	0x0800b2d1
 800b2ac:	0800b2d9 	.word	0x0800b2d9
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2b6:	e050      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b2b8:	2304      	movs	r3, #4
 800b2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2be:	e04c      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b2c0:	2308      	movs	r3, #8
 800b2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2c6:	e048      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b2c8:	2310      	movs	r3, #16
 800b2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ce:	e044      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b2d0:	2320      	movs	r3, #32
 800b2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2d6:	e040      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b2d8:	2340      	movs	r3, #64	; 0x40
 800b2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2de:	e03c      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b2e0:	2380      	movs	r3, #128	; 0x80
 800b2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2e6:	e038      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a5b      	ldr	r2, [pc, #364]	; (800b45c <UART_SetConfig+0x6a8>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d130      	bne.n	800b354 <UART_SetConfig+0x5a0>
 800b2f2:	4b57      	ldr	r3, [pc, #348]	; (800b450 <UART_SetConfig+0x69c>)
 800b2f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2f6:	f003 0307 	and.w	r3, r3, #7
 800b2fa:	2b05      	cmp	r3, #5
 800b2fc:	d826      	bhi.n	800b34c <UART_SetConfig+0x598>
 800b2fe:	a201      	add	r2, pc, #4	; (adr r2, 800b304 <UART_SetConfig+0x550>)
 800b300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b304:	0800b31d 	.word	0x0800b31d
 800b308:	0800b325 	.word	0x0800b325
 800b30c:	0800b32d 	.word	0x0800b32d
 800b310:	0800b335 	.word	0x0800b335
 800b314:	0800b33d 	.word	0x0800b33d
 800b318:	0800b345 	.word	0x0800b345
 800b31c:	2302      	movs	r3, #2
 800b31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b322:	e01a      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b324:	2304      	movs	r3, #4
 800b326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b32a:	e016      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b32c:	2308      	movs	r3, #8
 800b32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b332:	e012      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b334:	2310      	movs	r3, #16
 800b336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b33a:	e00e      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b33c:	2320      	movs	r3, #32
 800b33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b342:	e00a      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b344:	2340      	movs	r3, #64	; 0x40
 800b346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b34a:	e006      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b34c:	2380      	movs	r3, #128	; 0x80
 800b34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b352:	e002      	b.n	800b35a <UART_SetConfig+0x5a6>
 800b354:	2380      	movs	r3, #128	; 0x80
 800b356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a3f      	ldr	r2, [pc, #252]	; (800b45c <UART_SetConfig+0x6a8>)
 800b360:	4293      	cmp	r3, r2
 800b362:	f040 80f8 	bne.w	800b556 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b366:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b36a:	2b20      	cmp	r3, #32
 800b36c:	dc46      	bgt.n	800b3fc <UART_SetConfig+0x648>
 800b36e:	2b02      	cmp	r3, #2
 800b370:	f2c0 8082 	blt.w	800b478 <UART_SetConfig+0x6c4>
 800b374:	3b02      	subs	r3, #2
 800b376:	2b1e      	cmp	r3, #30
 800b378:	d87e      	bhi.n	800b478 <UART_SetConfig+0x6c4>
 800b37a:	a201      	add	r2, pc, #4	; (adr r2, 800b380 <UART_SetConfig+0x5cc>)
 800b37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b380:	0800b403 	.word	0x0800b403
 800b384:	0800b479 	.word	0x0800b479
 800b388:	0800b40b 	.word	0x0800b40b
 800b38c:	0800b479 	.word	0x0800b479
 800b390:	0800b479 	.word	0x0800b479
 800b394:	0800b479 	.word	0x0800b479
 800b398:	0800b41b 	.word	0x0800b41b
 800b39c:	0800b479 	.word	0x0800b479
 800b3a0:	0800b479 	.word	0x0800b479
 800b3a4:	0800b479 	.word	0x0800b479
 800b3a8:	0800b479 	.word	0x0800b479
 800b3ac:	0800b479 	.word	0x0800b479
 800b3b0:	0800b479 	.word	0x0800b479
 800b3b4:	0800b479 	.word	0x0800b479
 800b3b8:	0800b42b 	.word	0x0800b42b
 800b3bc:	0800b479 	.word	0x0800b479
 800b3c0:	0800b479 	.word	0x0800b479
 800b3c4:	0800b479 	.word	0x0800b479
 800b3c8:	0800b479 	.word	0x0800b479
 800b3cc:	0800b479 	.word	0x0800b479
 800b3d0:	0800b479 	.word	0x0800b479
 800b3d4:	0800b479 	.word	0x0800b479
 800b3d8:	0800b479 	.word	0x0800b479
 800b3dc:	0800b479 	.word	0x0800b479
 800b3e0:	0800b479 	.word	0x0800b479
 800b3e4:	0800b479 	.word	0x0800b479
 800b3e8:	0800b479 	.word	0x0800b479
 800b3ec:	0800b479 	.word	0x0800b479
 800b3f0:	0800b479 	.word	0x0800b479
 800b3f4:	0800b479 	.word	0x0800b479
 800b3f8:	0800b46b 	.word	0x0800b46b
 800b3fc:	2b40      	cmp	r3, #64	; 0x40
 800b3fe:	d037      	beq.n	800b470 <UART_SetConfig+0x6bc>
 800b400:	e03a      	b.n	800b478 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b402:	f7fc ff95 	bl	8008330 <HAL_RCCEx_GetD3PCLK1Freq>
 800b406:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b408:	e03c      	b.n	800b484 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b40a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b40e:	4618      	mov	r0, r3
 800b410:	f7fc ffa4 	bl	800835c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b418:	e034      	b.n	800b484 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b41a:	f107 0318 	add.w	r3, r7, #24
 800b41e:	4618      	mov	r0, r3
 800b420:	f7fd f8f0 	bl	8008604 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b428:	e02c      	b.n	800b484 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b42a:	4b09      	ldr	r3, [pc, #36]	; (800b450 <UART_SetConfig+0x69c>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f003 0320 	and.w	r3, r3, #32
 800b432:	2b00      	cmp	r3, #0
 800b434:	d016      	beq.n	800b464 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b436:	4b06      	ldr	r3, [pc, #24]	; (800b450 <UART_SetConfig+0x69c>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	08db      	lsrs	r3, r3, #3
 800b43c:	f003 0303 	and.w	r3, r3, #3
 800b440:	4a07      	ldr	r2, [pc, #28]	; (800b460 <UART_SetConfig+0x6ac>)
 800b442:	fa22 f303 	lsr.w	r3, r2, r3
 800b446:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b448:	e01c      	b.n	800b484 <UART_SetConfig+0x6d0>
 800b44a:	bf00      	nop
 800b44c:	40011400 	.word	0x40011400
 800b450:	58024400 	.word	0x58024400
 800b454:	40007800 	.word	0x40007800
 800b458:	40007c00 	.word	0x40007c00
 800b45c:	58000c00 	.word	0x58000c00
 800b460:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b464:	4b9d      	ldr	r3, [pc, #628]	; (800b6dc <UART_SetConfig+0x928>)
 800b466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b468:	e00c      	b.n	800b484 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b46a:	4b9d      	ldr	r3, [pc, #628]	; (800b6e0 <UART_SetConfig+0x92c>)
 800b46c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b46e:	e009      	b.n	800b484 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b470:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b474:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b476:	e005      	b.n	800b484 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b478:	2300      	movs	r3, #0
 800b47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b47c:	2301      	movs	r3, #1
 800b47e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b482:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b486:	2b00      	cmp	r3, #0
 800b488:	f000 81de 	beq.w	800b848 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b490:	4a94      	ldr	r2, [pc, #592]	; (800b6e4 <UART_SetConfig+0x930>)
 800b492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b496:	461a      	mov	r2, r3
 800b498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b49a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b49e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	685a      	ldr	r2, [r3, #4]
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	005b      	lsls	r3, r3, #1
 800b4a8:	4413      	add	r3, r2
 800b4aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d305      	bcc.n	800b4bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b4b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d903      	bls.n	800b4c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b4c2:	e1c1      	b.n	800b848 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	60bb      	str	r3, [r7, #8]
 800b4ca:	60fa      	str	r2, [r7, #12]
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d0:	4a84      	ldr	r2, [pc, #528]	; (800b6e4 <UART_SetConfig+0x930>)
 800b4d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	2200      	movs	r2, #0
 800b4da:	603b      	str	r3, [r7, #0]
 800b4dc:	607a      	str	r2, [r7, #4]
 800b4de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b4e6:	f7f4 ff53 	bl	8000390 <__aeabi_uldivmod>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	4610      	mov	r0, r2
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	f04f 0200 	mov.w	r2, #0
 800b4f6:	f04f 0300 	mov.w	r3, #0
 800b4fa:	020b      	lsls	r3, r1, #8
 800b4fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b500:	0202      	lsls	r2, r0, #8
 800b502:	6979      	ldr	r1, [r7, #20]
 800b504:	6849      	ldr	r1, [r1, #4]
 800b506:	0849      	lsrs	r1, r1, #1
 800b508:	2000      	movs	r0, #0
 800b50a:	460c      	mov	r4, r1
 800b50c:	4605      	mov	r5, r0
 800b50e:	eb12 0804 	adds.w	r8, r2, r4
 800b512:	eb43 0905 	adc.w	r9, r3, r5
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	469a      	mov	sl, r3
 800b51e:	4693      	mov	fp, r2
 800b520:	4652      	mov	r2, sl
 800b522:	465b      	mov	r3, fp
 800b524:	4640      	mov	r0, r8
 800b526:	4649      	mov	r1, r9
 800b528:	f7f4 ff32 	bl	8000390 <__aeabi_uldivmod>
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	4613      	mov	r3, r2
 800b532:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b53a:	d308      	bcc.n	800b54e <UART_SetConfig+0x79a>
 800b53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b542:	d204      	bcs.n	800b54e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b54a:	60da      	str	r2, [r3, #12]
 800b54c:	e17c      	b.n	800b848 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b554:	e178      	b.n	800b848 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	69db      	ldr	r3, [r3, #28]
 800b55a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b55e:	f040 80c5 	bne.w	800b6ec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b562:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b566:	2b20      	cmp	r3, #32
 800b568:	dc48      	bgt.n	800b5fc <UART_SetConfig+0x848>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	db7b      	blt.n	800b666 <UART_SetConfig+0x8b2>
 800b56e:	2b20      	cmp	r3, #32
 800b570:	d879      	bhi.n	800b666 <UART_SetConfig+0x8b2>
 800b572:	a201      	add	r2, pc, #4	; (adr r2, 800b578 <UART_SetConfig+0x7c4>)
 800b574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b578:	0800b603 	.word	0x0800b603
 800b57c:	0800b60b 	.word	0x0800b60b
 800b580:	0800b667 	.word	0x0800b667
 800b584:	0800b667 	.word	0x0800b667
 800b588:	0800b613 	.word	0x0800b613
 800b58c:	0800b667 	.word	0x0800b667
 800b590:	0800b667 	.word	0x0800b667
 800b594:	0800b667 	.word	0x0800b667
 800b598:	0800b623 	.word	0x0800b623
 800b59c:	0800b667 	.word	0x0800b667
 800b5a0:	0800b667 	.word	0x0800b667
 800b5a4:	0800b667 	.word	0x0800b667
 800b5a8:	0800b667 	.word	0x0800b667
 800b5ac:	0800b667 	.word	0x0800b667
 800b5b0:	0800b667 	.word	0x0800b667
 800b5b4:	0800b667 	.word	0x0800b667
 800b5b8:	0800b633 	.word	0x0800b633
 800b5bc:	0800b667 	.word	0x0800b667
 800b5c0:	0800b667 	.word	0x0800b667
 800b5c4:	0800b667 	.word	0x0800b667
 800b5c8:	0800b667 	.word	0x0800b667
 800b5cc:	0800b667 	.word	0x0800b667
 800b5d0:	0800b667 	.word	0x0800b667
 800b5d4:	0800b667 	.word	0x0800b667
 800b5d8:	0800b667 	.word	0x0800b667
 800b5dc:	0800b667 	.word	0x0800b667
 800b5e0:	0800b667 	.word	0x0800b667
 800b5e4:	0800b667 	.word	0x0800b667
 800b5e8:	0800b667 	.word	0x0800b667
 800b5ec:	0800b667 	.word	0x0800b667
 800b5f0:	0800b667 	.word	0x0800b667
 800b5f4:	0800b667 	.word	0x0800b667
 800b5f8:	0800b659 	.word	0x0800b659
 800b5fc:	2b40      	cmp	r3, #64	; 0x40
 800b5fe:	d02e      	beq.n	800b65e <UART_SetConfig+0x8aa>
 800b600:	e031      	b.n	800b666 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b602:	f7fb ff23 	bl	800744c <HAL_RCC_GetPCLK1Freq>
 800b606:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b608:	e033      	b.n	800b672 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b60a:	f7fb ff35 	bl	8007478 <HAL_RCC_GetPCLK2Freq>
 800b60e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b610:	e02f      	b.n	800b672 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b616:	4618      	mov	r0, r3
 800b618:	f7fc fea0 	bl	800835c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b620:	e027      	b.n	800b672 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b622:	f107 0318 	add.w	r3, r7, #24
 800b626:	4618      	mov	r0, r3
 800b628:	f7fc ffec 	bl	8008604 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b630:	e01f      	b.n	800b672 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b632:	4b2d      	ldr	r3, [pc, #180]	; (800b6e8 <UART_SetConfig+0x934>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f003 0320 	and.w	r3, r3, #32
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d009      	beq.n	800b652 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b63e:	4b2a      	ldr	r3, [pc, #168]	; (800b6e8 <UART_SetConfig+0x934>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	08db      	lsrs	r3, r3, #3
 800b644:	f003 0303 	and.w	r3, r3, #3
 800b648:	4a24      	ldr	r2, [pc, #144]	; (800b6dc <UART_SetConfig+0x928>)
 800b64a:	fa22 f303 	lsr.w	r3, r2, r3
 800b64e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b650:	e00f      	b.n	800b672 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b652:	4b22      	ldr	r3, [pc, #136]	; (800b6dc <UART_SetConfig+0x928>)
 800b654:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b656:	e00c      	b.n	800b672 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b658:	4b21      	ldr	r3, [pc, #132]	; (800b6e0 <UART_SetConfig+0x92c>)
 800b65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b65c:	e009      	b.n	800b672 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b65e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b664:	e005      	b.n	800b672 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b666:	2300      	movs	r3, #0
 800b668:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b670:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b674:	2b00      	cmp	r3, #0
 800b676:	f000 80e7 	beq.w	800b848 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67e:	4a19      	ldr	r2, [pc, #100]	; (800b6e4 <UART_SetConfig+0x930>)
 800b680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b684:	461a      	mov	r2, r3
 800b686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b688:	fbb3 f3f2 	udiv	r3, r3, r2
 800b68c:	005a      	lsls	r2, r3, #1
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	085b      	lsrs	r3, r3, #1
 800b694:	441a      	add	r2, r3
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b69e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a2:	2b0f      	cmp	r3, #15
 800b6a4:	d916      	bls.n	800b6d4 <UART_SetConfig+0x920>
 800b6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6ac:	d212      	bcs.n	800b6d4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	f023 030f 	bic.w	r3, r3, #15
 800b6b6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ba:	085b      	lsrs	r3, r3, #1
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	f003 0307 	and.w	r3, r3, #7
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b6d0:	60da      	str	r2, [r3, #12]
 800b6d2:	e0b9      	b.n	800b848 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b6da:	e0b5      	b.n	800b848 <UART_SetConfig+0xa94>
 800b6dc:	03d09000 	.word	0x03d09000
 800b6e0:	003d0900 	.word	0x003d0900
 800b6e4:	0801318c 	.word	0x0801318c
 800b6e8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b6ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b6f0:	2b20      	cmp	r3, #32
 800b6f2:	dc49      	bgt.n	800b788 <UART_SetConfig+0x9d4>
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	db7c      	blt.n	800b7f2 <UART_SetConfig+0xa3e>
 800b6f8:	2b20      	cmp	r3, #32
 800b6fa:	d87a      	bhi.n	800b7f2 <UART_SetConfig+0xa3e>
 800b6fc:	a201      	add	r2, pc, #4	; (adr r2, 800b704 <UART_SetConfig+0x950>)
 800b6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b702:	bf00      	nop
 800b704:	0800b78f 	.word	0x0800b78f
 800b708:	0800b797 	.word	0x0800b797
 800b70c:	0800b7f3 	.word	0x0800b7f3
 800b710:	0800b7f3 	.word	0x0800b7f3
 800b714:	0800b79f 	.word	0x0800b79f
 800b718:	0800b7f3 	.word	0x0800b7f3
 800b71c:	0800b7f3 	.word	0x0800b7f3
 800b720:	0800b7f3 	.word	0x0800b7f3
 800b724:	0800b7af 	.word	0x0800b7af
 800b728:	0800b7f3 	.word	0x0800b7f3
 800b72c:	0800b7f3 	.word	0x0800b7f3
 800b730:	0800b7f3 	.word	0x0800b7f3
 800b734:	0800b7f3 	.word	0x0800b7f3
 800b738:	0800b7f3 	.word	0x0800b7f3
 800b73c:	0800b7f3 	.word	0x0800b7f3
 800b740:	0800b7f3 	.word	0x0800b7f3
 800b744:	0800b7bf 	.word	0x0800b7bf
 800b748:	0800b7f3 	.word	0x0800b7f3
 800b74c:	0800b7f3 	.word	0x0800b7f3
 800b750:	0800b7f3 	.word	0x0800b7f3
 800b754:	0800b7f3 	.word	0x0800b7f3
 800b758:	0800b7f3 	.word	0x0800b7f3
 800b75c:	0800b7f3 	.word	0x0800b7f3
 800b760:	0800b7f3 	.word	0x0800b7f3
 800b764:	0800b7f3 	.word	0x0800b7f3
 800b768:	0800b7f3 	.word	0x0800b7f3
 800b76c:	0800b7f3 	.word	0x0800b7f3
 800b770:	0800b7f3 	.word	0x0800b7f3
 800b774:	0800b7f3 	.word	0x0800b7f3
 800b778:	0800b7f3 	.word	0x0800b7f3
 800b77c:	0800b7f3 	.word	0x0800b7f3
 800b780:	0800b7f3 	.word	0x0800b7f3
 800b784:	0800b7e5 	.word	0x0800b7e5
 800b788:	2b40      	cmp	r3, #64	; 0x40
 800b78a:	d02e      	beq.n	800b7ea <UART_SetConfig+0xa36>
 800b78c:	e031      	b.n	800b7f2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b78e:	f7fb fe5d 	bl	800744c <HAL_RCC_GetPCLK1Freq>
 800b792:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b794:	e033      	b.n	800b7fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b796:	f7fb fe6f 	bl	8007478 <HAL_RCC_GetPCLK2Freq>
 800b79a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b79c:	e02f      	b.n	800b7fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b79e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fc fdda 	bl	800835c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7ac:	e027      	b.n	800b7fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7ae:	f107 0318 	add.w	r3, r7, #24
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fc ff26 	bl	8008604 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7bc:	e01f      	b.n	800b7fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7be:	4b2d      	ldr	r3, [pc, #180]	; (800b874 <UART_SetConfig+0xac0>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f003 0320 	and.w	r3, r3, #32
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d009      	beq.n	800b7de <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b7ca:	4b2a      	ldr	r3, [pc, #168]	; (800b874 <UART_SetConfig+0xac0>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	08db      	lsrs	r3, r3, #3
 800b7d0:	f003 0303 	and.w	r3, r3, #3
 800b7d4:	4a28      	ldr	r2, [pc, #160]	; (800b878 <UART_SetConfig+0xac4>)
 800b7d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b7da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b7dc:	e00f      	b.n	800b7fe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b7de:	4b26      	ldr	r3, [pc, #152]	; (800b878 <UART_SetConfig+0xac4>)
 800b7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7e2:	e00c      	b.n	800b7fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b7e4:	4b25      	ldr	r3, [pc, #148]	; (800b87c <UART_SetConfig+0xac8>)
 800b7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7e8:	e009      	b.n	800b7fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7f0:	e005      	b.n	800b7fe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b7fc:	bf00      	nop
    }

    if (pclk != 0U)
 800b7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b800:	2b00      	cmp	r3, #0
 800b802:	d021      	beq.n	800b848 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b808:	4a1d      	ldr	r2, [pc, #116]	; (800b880 <UART_SetConfig+0xacc>)
 800b80a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b80e:	461a      	mov	r2, r3
 800b810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b812:	fbb3 f2f2 	udiv	r2, r3, r2
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	085b      	lsrs	r3, r3, #1
 800b81c:	441a      	add	r2, r3
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	fbb2 f3f3 	udiv	r3, r2, r3
 800b826:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82a:	2b0f      	cmp	r3, #15
 800b82c:	d909      	bls.n	800b842 <UART_SetConfig+0xa8e>
 800b82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b834:	d205      	bcs.n	800b842 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b838:	b29a      	uxth	r2, r3
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	60da      	str	r2, [r3, #12]
 800b840:	e002      	b.n	800b848 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b842:	2301      	movs	r3, #1
 800b844:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	2201      	movs	r2, #1
 800b854:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	2200      	movs	r2, #0
 800b85c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	2200      	movs	r2, #0
 800b862:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b864:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3748      	adds	r7, #72	; 0x48
 800b86c:	46bd      	mov	sp, r7
 800b86e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b872:	bf00      	nop
 800b874:	58024400 	.word	0x58024400
 800b878:	03d09000 	.word	0x03d09000
 800b87c:	003d0900 	.word	0x003d0900
 800b880:	0801318c 	.word	0x0801318c

0800b884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b890:	f003 0301 	and.w	r3, r3, #1
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00a      	beq.n	800b8ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	430a      	orrs	r2, r1
 800b8ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b2:	f003 0302 	and.w	r3, r3, #2
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00a      	beq.n	800b8d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	430a      	orrs	r2, r1
 800b8ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d4:	f003 0304 	and.w	r3, r3, #4
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00a      	beq.n	800b8f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	430a      	orrs	r2, r1
 800b8f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f6:	f003 0308 	and.w	r3, r3, #8
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00a      	beq.n	800b914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	430a      	orrs	r2, r1
 800b912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b918:	f003 0310 	and.w	r3, r3, #16
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00a      	beq.n	800b936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	430a      	orrs	r2, r1
 800b934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93a:	f003 0320 	and.w	r3, r3, #32
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00a      	beq.n	800b958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	430a      	orrs	r2, r1
 800b956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b960:	2b00      	cmp	r3, #0
 800b962:	d01a      	beq.n	800b99a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	430a      	orrs	r2, r1
 800b978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b97e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b982:	d10a      	bne.n	800b99a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	430a      	orrs	r2, r1
 800b998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00a      	beq.n	800b9bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	430a      	orrs	r2, r1
 800b9ba:	605a      	str	r2, [r3, #4]
  }
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af02      	add	r7, sp, #8
 800b9ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b9d8:	f7f9 fca6 	bl	8005328 <HAL_GetTick>
 800b9dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f003 0308 	and.w	r3, r3, #8
 800b9e8:	2b08      	cmp	r3, #8
 800b9ea:	d10e      	bne.n	800ba0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f82f 	bl	800ba5e <UART_WaitOnFlagUntilTimeout>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d001      	beq.n	800ba0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba06:	2303      	movs	r3, #3
 800ba08:	e025      	b.n	800ba56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f003 0304 	and.w	r3, r3, #4
 800ba14:	2b04      	cmp	r3, #4
 800ba16:	d10e      	bne.n	800ba36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba1c:	9300      	str	r3, [sp, #0]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2200      	movs	r2, #0
 800ba22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 f819 	bl	800ba5e <UART_WaitOnFlagUntilTimeout>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d001      	beq.n	800ba36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba32:	2303      	movs	r3, #3
 800ba34:	e00f      	b.n	800ba56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2220      	movs	r2, #32
 800ba3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2220      	movs	r2, #32
 800ba42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b09c      	sub	sp, #112	; 0x70
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	60f8      	str	r0, [r7, #12]
 800ba66:	60b9      	str	r1, [r7, #8]
 800ba68:	603b      	str	r3, [r7, #0]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba6e:	e0a9      	b.n	800bbc4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba76:	f000 80a5 	beq.w	800bbc4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba7a:	f7f9 fc55 	bl	8005328 <HAL_GetTick>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	1ad3      	subs	r3, r2, r3
 800ba84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d302      	bcc.n	800ba90 <UART_WaitOnFlagUntilTimeout+0x32>
 800ba8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d140      	bne.n	800bb12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba98:	e853 3f00 	ldrex	r3, [r3]
 800ba9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ba9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800baa4:	667b      	str	r3, [r7, #100]	; 0x64
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bab0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bab4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bab6:	e841 2300 	strex	r3, r2, [r1]
 800baba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800babc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d1e6      	bne.n	800ba90 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	3308      	adds	r3, #8
 800bac8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bacc:	e853 3f00 	ldrex	r3, [r3]
 800bad0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad4:	f023 0301 	bic.w	r3, r3, #1
 800bad8:	663b      	str	r3, [r7, #96]	; 0x60
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	3308      	adds	r3, #8
 800bae0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bae2:	64ba      	str	r2, [r7, #72]	; 0x48
 800bae4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800baea:	e841 2300 	strex	r3, r2, [r1]
 800baee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800baf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1e5      	bne.n	800bac2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2220      	movs	r2, #32
 800bafa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2220      	movs	r2, #32
 800bb02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bb0e:	2303      	movs	r3, #3
 800bb10:	e069      	b.n	800bbe6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f003 0304 	and.w	r3, r3, #4
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d051      	beq.n	800bbc4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	69db      	ldr	r3, [r3, #28]
 800bb26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb2e:	d149      	bne.n	800bbc4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb42:	e853 3f00 	ldrex	r3, [r3]
 800bb46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	461a      	mov	r2, r3
 800bb56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb58:	637b      	str	r3, [r7, #52]	; 0x34
 800bb5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb60:	e841 2300 	strex	r3, r2, [r1]
 800bb64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d1e6      	bne.n	800bb3a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	3308      	adds	r3, #8
 800bb72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	e853 3f00 	ldrex	r3, [r3]
 800bb7a:	613b      	str	r3, [r7, #16]
   return(result);
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	f023 0301 	bic.w	r3, r3, #1
 800bb82:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	3308      	adds	r3, #8
 800bb8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bb8c:	623a      	str	r2, [r7, #32]
 800bb8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb90:	69f9      	ldr	r1, [r7, #28]
 800bb92:	6a3a      	ldr	r2, [r7, #32]
 800bb94:	e841 2300 	strex	r3, r2, [r1]
 800bb98:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d1e5      	bne.n	800bb6c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2220      	movs	r2, #32
 800bba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2220      	movs	r2, #32
 800bbac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2220      	movs	r2, #32
 800bbb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e010      	b.n	800bbe6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	69da      	ldr	r2, [r3, #28]
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	4013      	ands	r3, r2
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	bf0c      	ite	eq
 800bbd4:	2301      	moveq	r3, #1
 800bbd6:	2300      	movne	r3, #0
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	461a      	mov	r2, r3
 800bbdc:	79fb      	ldrb	r3, [r7, #7]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	f43f af46 	beq.w	800ba70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3770      	adds	r7, #112	; 0x70
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bbee:	b480      	push	{r7}
 800bbf0:	b085      	sub	sp, #20
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d101      	bne.n	800bc04 <HAL_UARTEx_DisableFifoMode+0x16>
 800bc00:	2302      	movs	r3, #2
 800bc02:	e027      	b.n	800bc54 <HAL_UARTEx_DisableFifoMode+0x66>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2224      	movs	r2, #36	; 0x24
 800bc10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f022 0201 	bic.w	r2, r2, #1
 800bc2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bc32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2220      	movs	r2, #32
 800bc46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bc52:	2300      	movs	r3, #0
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3714      	adds	r7, #20
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d101      	bne.n	800bc78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bc74:	2302      	movs	r3, #2
 800bc76:	e02d      	b.n	800bcd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2224      	movs	r2, #36	; 0x24
 800bc84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f022 0201 	bic.w	r2, r2, #1
 800bc9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	430a      	orrs	r2, r1
 800bcb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 f84f 	bl	800bd58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2220      	movs	r2, #32
 800bcc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bcd2:	2300      	movs	r3, #0
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3710      	adds	r7, #16
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d101      	bne.n	800bcf4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bcf0:	2302      	movs	r3, #2
 800bcf2:	e02d      	b.n	800bd50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2224      	movs	r2, #36	; 0x24
 800bd00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f022 0201 	bic.w	r2, r2, #1
 800bd1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	430a      	orrs	r2, r1
 800bd2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 f811 	bl	800bd58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2220      	movs	r2, #32
 800bd42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b085      	sub	sp, #20
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d108      	bne.n	800bd7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2201      	movs	r2, #1
 800bd74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bd78:	e031      	b.n	800bdde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bd7a:	2310      	movs	r3, #16
 800bd7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bd7e:	2310      	movs	r3, #16
 800bd80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	0e5b      	lsrs	r3, r3, #25
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	f003 0307 	and.w	r3, r3, #7
 800bd90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	0f5b      	lsrs	r3, r3, #29
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	f003 0307 	and.w	r3, r3, #7
 800bda0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bda2:	7bbb      	ldrb	r3, [r7, #14]
 800bda4:	7b3a      	ldrb	r2, [r7, #12]
 800bda6:	4911      	ldr	r1, [pc, #68]	; (800bdec <UARTEx_SetNbDataToProcess+0x94>)
 800bda8:	5c8a      	ldrb	r2, [r1, r2]
 800bdaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bdae:	7b3a      	ldrb	r2, [r7, #12]
 800bdb0:	490f      	ldr	r1, [pc, #60]	; (800bdf0 <UARTEx_SetNbDataToProcess+0x98>)
 800bdb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bdb4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdb8:	b29a      	uxth	r2, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bdc0:	7bfb      	ldrb	r3, [r7, #15]
 800bdc2:	7b7a      	ldrb	r2, [r7, #13]
 800bdc4:	4909      	ldr	r1, [pc, #36]	; (800bdec <UARTEx_SetNbDataToProcess+0x94>)
 800bdc6:	5c8a      	ldrb	r2, [r1, r2]
 800bdc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bdcc:	7b7a      	ldrb	r2, [r7, #13]
 800bdce:	4908      	ldr	r1, [pc, #32]	; (800bdf0 <UARTEx_SetNbDataToProcess+0x98>)
 800bdd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bdd2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bdde:	bf00      	nop
 800bde0:	3714      	adds	r7, #20
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	080131a4 	.word	0x080131a4
 800bdf0:	080131ac 	.word	0x080131ac

0800bdf4 <__NVIC_SetPriority>:
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	6039      	str	r1, [r7, #0]
 800bdfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800be00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800be04:	2b00      	cmp	r3, #0
 800be06:	db0a      	blt.n	800be1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	490c      	ldr	r1, [pc, #48]	; (800be40 <__NVIC_SetPriority+0x4c>)
 800be0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800be12:	0112      	lsls	r2, r2, #4
 800be14:	b2d2      	uxtb	r2, r2
 800be16:	440b      	add	r3, r1
 800be18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800be1c:	e00a      	b.n	800be34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	b2da      	uxtb	r2, r3
 800be22:	4908      	ldr	r1, [pc, #32]	; (800be44 <__NVIC_SetPriority+0x50>)
 800be24:	88fb      	ldrh	r3, [r7, #6]
 800be26:	f003 030f 	and.w	r3, r3, #15
 800be2a:	3b04      	subs	r3, #4
 800be2c:	0112      	lsls	r2, r2, #4
 800be2e:	b2d2      	uxtb	r2, r2
 800be30:	440b      	add	r3, r1
 800be32:	761a      	strb	r2, [r3, #24]
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	e000e100 	.word	0xe000e100
 800be44:	e000ed00 	.word	0xe000ed00

0800be48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800be48:	b580      	push	{r7, lr}
 800be4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800be4c:	2100      	movs	r1, #0
 800be4e:	f06f 0004 	mvn.w	r0, #4
 800be52:	f7ff ffcf 	bl	800bdf4 <__NVIC_SetPriority>
#endif
}
 800be56:	bf00      	nop
 800be58:	bd80      	pop	{r7, pc}
	...

0800be5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be62:	f3ef 8305 	mrs	r3, IPSR
 800be66:	603b      	str	r3, [r7, #0]
  return(result);
 800be68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d003      	beq.n	800be76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800be6e:	f06f 0305 	mvn.w	r3, #5
 800be72:	607b      	str	r3, [r7, #4]
 800be74:	e00c      	b.n	800be90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800be76:	4b0a      	ldr	r3, [pc, #40]	; (800bea0 <osKernelInitialize+0x44>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d105      	bne.n	800be8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800be7e:	4b08      	ldr	r3, [pc, #32]	; (800bea0 <osKernelInitialize+0x44>)
 800be80:	2201      	movs	r2, #1
 800be82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800be84:	2300      	movs	r3, #0
 800be86:	607b      	str	r3, [r7, #4]
 800be88:	e002      	b.n	800be90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800be8a:	f04f 33ff 	mov.w	r3, #4294967295
 800be8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800be90:	687b      	ldr	r3, [r7, #4]
}
 800be92:	4618      	mov	r0, r3
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	240009b0 	.word	0x240009b0

0800bea4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800beaa:	f3ef 8305 	mrs	r3, IPSR
 800beae:	603b      	str	r3, [r7, #0]
  return(result);
 800beb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d003      	beq.n	800bebe <osKernelStart+0x1a>
    stat = osErrorISR;
 800beb6:	f06f 0305 	mvn.w	r3, #5
 800beba:	607b      	str	r3, [r7, #4]
 800bebc:	e010      	b.n	800bee0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bebe:	4b0b      	ldr	r3, [pc, #44]	; (800beec <osKernelStart+0x48>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d109      	bne.n	800beda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bec6:	f7ff ffbf 	bl	800be48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800beca:	4b08      	ldr	r3, [pc, #32]	; (800beec <osKernelStart+0x48>)
 800becc:	2202      	movs	r2, #2
 800bece:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bed0:	f001 fdc0 	bl	800da54 <vTaskStartScheduler>
      stat = osOK;
 800bed4:	2300      	movs	r3, #0
 800bed6:	607b      	str	r3, [r7, #4]
 800bed8:	e002      	b.n	800bee0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800beda:	f04f 33ff 	mov.w	r3, #4294967295
 800bede:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bee0:	687b      	ldr	r3, [r7, #4]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3708      	adds	r7, #8
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	240009b0 	.word	0x240009b0

0800bef0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b08e      	sub	sp, #56	; 0x38
 800bef4:	af04      	add	r7, sp, #16
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800befc:	2300      	movs	r3, #0
 800befe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf00:	f3ef 8305 	mrs	r3, IPSR
 800bf04:	617b      	str	r3, [r7, #20]
  return(result);
 800bf06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d17e      	bne.n	800c00a <osThreadNew+0x11a>
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d07b      	beq.n	800c00a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bf12:	2380      	movs	r3, #128	; 0x80
 800bf14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bf16:	2318      	movs	r3, #24
 800bf18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bf1e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d045      	beq.n	800bfb6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d002      	beq.n	800bf38 <osThreadNew+0x48>
        name = attr->name;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	699b      	ldr	r3, [r3, #24]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d002      	beq.n	800bf46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d008      	beq.n	800bf5e <osThreadNew+0x6e>
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	2b38      	cmp	r3, #56	; 0x38
 800bf50:	d805      	bhi.n	800bf5e <osThreadNew+0x6e>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d001      	beq.n	800bf62 <osThreadNew+0x72>
        return (NULL);
 800bf5e:	2300      	movs	r3, #0
 800bf60:	e054      	b.n	800c00c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	695b      	ldr	r3, [r3, #20]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d003      	beq.n	800bf72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	695b      	ldr	r3, [r3, #20]
 800bf6e:	089b      	lsrs	r3, r3, #2
 800bf70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00e      	beq.n	800bf98 <osThreadNew+0xa8>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	68db      	ldr	r3, [r3, #12]
 800bf7e:	2ba7      	cmp	r3, #167	; 0xa7
 800bf80:	d90a      	bls.n	800bf98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d006      	beq.n	800bf98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	695b      	ldr	r3, [r3, #20]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d002      	beq.n	800bf98 <osThreadNew+0xa8>
        mem = 1;
 800bf92:	2301      	movs	r3, #1
 800bf94:	61bb      	str	r3, [r7, #24]
 800bf96:	e010      	b.n	800bfba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d10c      	bne.n	800bfba <osThreadNew+0xca>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d108      	bne.n	800bfba <osThreadNew+0xca>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d104      	bne.n	800bfba <osThreadNew+0xca>
          mem = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	61bb      	str	r3, [r7, #24]
 800bfb4:	e001      	b.n	800bfba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d110      	bne.n	800bfe2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bfc8:	9202      	str	r2, [sp, #8]
 800bfca:	9301      	str	r3, [sp, #4]
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	6a3a      	ldr	r2, [r7, #32]
 800bfd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f001 fb50 	bl	800d67c <xTaskCreateStatic>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	613b      	str	r3, [r7, #16]
 800bfe0:	e013      	b.n	800c00a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d110      	bne.n	800c00a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bfe8:	6a3b      	ldr	r3, [r7, #32]
 800bfea:	b29a      	uxth	r2, r3
 800bfec:	f107 0310 	add.w	r3, r7, #16
 800bff0:	9301      	str	r3, [sp, #4]
 800bff2:	69fb      	ldr	r3, [r7, #28]
 800bff4:	9300      	str	r3, [sp, #0]
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f001 fb9b 	bl	800d736 <xTaskCreate>
 800c000:	4603      	mov	r3, r0
 800c002:	2b01      	cmp	r3, #1
 800c004:	d001      	beq.n	800c00a <osThreadNew+0x11a>
            hTask = NULL;
 800c006:	2300      	movs	r3, #0
 800c008:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c00a:	693b      	ldr	r3, [r7, #16]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3728      	adds	r7, #40	; 0x28
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c01c:	f3ef 8305 	mrs	r3, IPSR
 800c020:	60bb      	str	r3, [r7, #8]
  return(result);
 800c022:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c024:	2b00      	cmp	r3, #0
 800c026:	d003      	beq.n	800c030 <osDelay+0x1c>
    stat = osErrorISR;
 800c028:	f06f 0305 	mvn.w	r3, #5
 800c02c:	60fb      	str	r3, [r7, #12]
 800c02e:	e007      	b.n	800c040 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c030:	2300      	movs	r3, #0
 800c032:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d002      	beq.n	800c040 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f001 fcd6 	bl	800d9ec <vTaskDelay>
    }
  }

  return (stat);
 800c040:	68fb      	ldr	r3, [r7, #12]
}
 800c042:	4618      	mov	r0, r3
 800c044:	3710      	adds	r7, #16
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b088      	sub	sp, #32
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c052:	2300      	movs	r3, #0
 800c054:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c056:	f3ef 8305 	mrs	r3, IPSR
 800c05a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c05c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d174      	bne.n	800c14c <osMutexNew+0x102>
    if (attr != NULL) {
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d003      	beq.n	800c070 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	61bb      	str	r3, [r7, #24]
 800c06e:	e001      	b.n	800c074 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c070:	2300      	movs	r3, #0
 800c072:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	f003 0301 	and.w	r3, r3, #1
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d002      	beq.n	800c084 <osMutexNew+0x3a>
      rmtx = 1U;
 800c07e:	2301      	movs	r3, #1
 800c080:	617b      	str	r3, [r7, #20]
 800c082:	e001      	b.n	800c088 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c084:	2300      	movs	r3, #0
 800c086:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	f003 0308 	and.w	r3, r3, #8
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d15c      	bne.n	800c14c <osMutexNew+0x102>
      mem = -1;
 800c092:	f04f 33ff 	mov.w	r3, #4294967295
 800c096:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d015      	beq.n	800c0ca <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d006      	beq.n	800c0b4 <osMutexNew+0x6a>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	2b4f      	cmp	r3, #79	; 0x4f
 800c0ac:	d902      	bls.n	800c0b4 <osMutexNew+0x6a>
          mem = 1;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	613b      	str	r3, [r7, #16]
 800c0b2:	e00c      	b.n	800c0ce <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d108      	bne.n	800c0ce <osMutexNew+0x84>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d104      	bne.n	800c0ce <osMutexNew+0x84>
            mem = 0;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	613b      	str	r3, [r7, #16]
 800c0c8:	e001      	b.n	800c0ce <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d112      	bne.n	800c0fa <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d007      	beq.n	800c0ea <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	4619      	mov	r1, r3
 800c0e0:	2004      	movs	r0, #4
 800c0e2:	f000 fec8 	bl	800ce76 <xQueueCreateMutexStatic>
 800c0e6:	61f8      	str	r0, [r7, #28]
 800c0e8:	e016      	b.n	800c118 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	2001      	movs	r0, #1
 800c0f2:	f000 fec0 	bl	800ce76 <xQueueCreateMutexStatic>
 800c0f6:	61f8      	str	r0, [r7, #28]
 800c0f8:	e00e      	b.n	800c118 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d10b      	bne.n	800c118 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d004      	beq.n	800c110 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c106:	2004      	movs	r0, #4
 800c108:	f000 fe9d 	bl	800ce46 <xQueueCreateMutex>
 800c10c:	61f8      	str	r0, [r7, #28]
 800c10e:	e003      	b.n	800c118 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c110:	2001      	movs	r0, #1
 800c112:	f000 fe98 	bl	800ce46 <xQueueCreateMutex>
 800c116:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00c      	beq.n	800c138 <osMutexNew+0xee>
        if (attr != NULL) {
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d003      	beq.n	800c12c <osMutexNew+0xe2>
          name = attr->name;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	60fb      	str	r3, [r7, #12]
 800c12a:	e001      	b.n	800c130 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c12c:	2300      	movs	r3, #0
 800c12e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c130:	68f9      	ldr	r1, [r7, #12]
 800c132:	69f8      	ldr	r0, [r7, #28]
 800c134:	f001 fa44 	bl	800d5c0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c138:	69fb      	ldr	r3, [r7, #28]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d006      	beq.n	800c14c <osMutexNew+0x102>
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d003      	beq.n	800c14c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	f043 0301 	orr.w	r3, r3, #1
 800c14a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c14c:	69fb      	ldr	r3, [r7, #28]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3720      	adds	r7, #32
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
	...

0800c158 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	60f8      	str	r0, [r7, #12]
 800c160:	60b9      	str	r1, [r7, #8]
 800c162:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	4a07      	ldr	r2, [pc, #28]	; (800c184 <vApplicationGetIdleTaskMemory+0x2c>)
 800c168:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	4a06      	ldr	r2, [pc, #24]	; (800c188 <vApplicationGetIdleTaskMemory+0x30>)
 800c16e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2280      	movs	r2, #128	; 0x80
 800c174:	601a      	str	r2, [r3, #0]
}
 800c176:	bf00      	nop
 800c178:	3714      	adds	r7, #20
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	240009b4 	.word	0x240009b4
 800c188:	24000a5c 	.word	0x24000a5c

0800c18c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c18c:	b480      	push	{r7}
 800c18e:	b085      	sub	sp, #20
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	4a07      	ldr	r2, [pc, #28]	; (800c1b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800c19c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	4a06      	ldr	r2, [pc, #24]	; (800c1bc <vApplicationGetTimerTaskMemory+0x30>)
 800c1a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c1aa:	601a      	str	r2, [r3, #0]
}
 800c1ac:	bf00      	nop
 800c1ae:	3714      	adds	r7, #20
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr
 800c1b8:	24000c5c 	.word	0x24000c5c
 800c1bc:	24000d04 	.word	0x24000d04

0800c1c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b08a      	sub	sp, #40	; 0x28
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c1cc:	f001 fcb2 	bl	800db34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c1d0:	4b5b      	ldr	r3, [pc, #364]	; (800c340 <pvPortMalloc+0x180>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d101      	bne.n	800c1dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c1d8:	f000 f920 	bl	800c41c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c1dc:	4b59      	ldr	r3, [pc, #356]	; (800c344 <pvPortMalloc+0x184>)
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4013      	ands	r3, r2
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	f040 8093 	bne.w	800c310 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d01d      	beq.n	800c22c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c1f0:	2208      	movs	r2, #8
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	4413      	add	r3, r2
 800c1f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f003 0307 	and.w	r3, r3, #7
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d014      	beq.n	800c22c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f023 0307 	bic.w	r3, r3, #7
 800c208:	3308      	adds	r3, #8
 800c20a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f003 0307 	and.w	r3, r3, #7
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00a      	beq.n	800c22c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21a:	f383 8811 	msr	BASEPRI, r3
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	f3bf 8f4f 	dsb	sy
 800c226:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c228:	bf00      	nop
 800c22a:	e7fe      	b.n	800c22a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d06e      	beq.n	800c310 <pvPortMalloc+0x150>
 800c232:	4b45      	ldr	r3, [pc, #276]	; (800c348 <pvPortMalloc+0x188>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d869      	bhi.n	800c310 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c23c:	4b43      	ldr	r3, [pc, #268]	; (800c34c <pvPortMalloc+0x18c>)
 800c23e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c240:	4b42      	ldr	r3, [pc, #264]	; (800c34c <pvPortMalloc+0x18c>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c246:	e004      	b.n	800c252 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d903      	bls.n	800c264 <pvPortMalloc+0xa4>
 800c25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d1f1      	bne.n	800c248 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c264:	4b36      	ldr	r3, [pc, #216]	; (800c340 <pvPortMalloc+0x180>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d050      	beq.n	800c310 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c26e:	6a3b      	ldr	r3, [r7, #32]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	2208      	movs	r2, #8
 800c274:	4413      	add	r3, r2
 800c276:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27a:	681a      	ldr	r2, [r3, #0]
 800c27c:	6a3b      	ldr	r3, [r7, #32]
 800c27e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c282:	685a      	ldr	r2, [r3, #4]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	1ad2      	subs	r2, r2, r3
 800c288:	2308      	movs	r3, #8
 800c28a:	005b      	lsls	r3, r3, #1
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d91f      	bls.n	800c2d0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4413      	add	r3, r2
 800c296:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	f003 0307 	and.w	r3, r3, #7
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00a      	beq.n	800c2b8 <pvPortMalloc+0xf8>
	__asm volatile
 800c2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a6:	f383 8811 	msr	BASEPRI, r3
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	613b      	str	r3, [r7, #16]
}
 800c2b4:	bf00      	nop
 800c2b6:	e7fe      	b.n	800c2b6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ba:	685a      	ldr	r2, [r3, #4]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	1ad2      	subs	r2, r2, r3
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c2ca:	69b8      	ldr	r0, [r7, #24]
 800c2cc:	f000 f908 	bl	800c4e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c2d0:	4b1d      	ldr	r3, [pc, #116]	; (800c348 <pvPortMalloc+0x188>)
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	1ad3      	subs	r3, r2, r3
 800c2da:	4a1b      	ldr	r2, [pc, #108]	; (800c348 <pvPortMalloc+0x188>)
 800c2dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c2de:	4b1a      	ldr	r3, [pc, #104]	; (800c348 <pvPortMalloc+0x188>)
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	4b1b      	ldr	r3, [pc, #108]	; (800c350 <pvPortMalloc+0x190>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d203      	bcs.n	800c2f2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c2ea:	4b17      	ldr	r3, [pc, #92]	; (800c348 <pvPortMalloc+0x188>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4a18      	ldr	r2, [pc, #96]	; (800c350 <pvPortMalloc+0x190>)
 800c2f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f4:	685a      	ldr	r2, [r3, #4]
 800c2f6:	4b13      	ldr	r3, [pc, #76]	; (800c344 <pvPortMalloc+0x184>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	431a      	orrs	r2, r3
 800c2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	2200      	movs	r2, #0
 800c304:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c306:	4b13      	ldr	r3, [pc, #76]	; (800c354 <pvPortMalloc+0x194>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3301      	adds	r3, #1
 800c30c:	4a11      	ldr	r2, [pc, #68]	; (800c354 <pvPortMalloc+0x194>)
 800c30e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c310:	f001 fc1e 	bl	800db50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	f003 0307 	and.w	r3, r3, #7
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00a      	beq.n	800c334 <pvPortMalloc+0x174>
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	60fb      	str	r3, [r7, #12]
}
 800c330:	bf00      	nop
 800c332:	e7fe      	b.n	800c332 <pvPortMalloc+0x172>
	return pvReturn;
 800c334:	69fb      	ldr	r3, [r7, #28]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3728      	adds	r7, #40	; 0x28
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	24004d0c 	.word	0x24004d0c
 800c344:	24004d20 	.word	0x24004d20
 800c348:	24004d10 	.word	0x24004d10
 800c34c:	24004d04 	.word	0x24004d04
 800c350:	24004d14 	.word	0x24004d14
 800c354:	24004d18 	.word	0x24004d18

0800c358 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b086      	sub	sp, #24
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d04d      	beq.n	800c406 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c36a:	2308      	movs	r3, #8
 800c36c:	425b      	negs	r3, r3
 800c36e:	697a      	ldr	r2, [r7, #20]
 800c370:	4413      	add	r3, r2
 800c372:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	685a      	ldr	r2, [r3, #4]
 800c37c:	4b24      	ldr	r3, [pc, #144]	; (800c410 <vPortFree+0xb8>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4013      	ands	r3, r2
 800c382:	2b00      	cmp	r3, #0
 800c384:	d10a      	bne.n	800c39c <vPortFree+0x44>
	__asm volatile
 800c386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38a:	f383 8811 	msr	BASEPRI, r3
 800c38e:	f3bf 8f6f 	isb	sy
 800c392:	f3bf 8f4f 	dsb	sy
 800c396:	60fb      	str	r3, [r7, #12]
}
 800c398:	bf00      	nop
 800c39a:	e7fe      	b.n	800c39a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d00a      	beq.n	800c3ba <vPortFree+0x62>
	__asm volatile
 800c3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	60bb      	str	r3, [r7, #8]
}
 800c3b6:	bf00      	nop
 800c3b8:	e7fe      	b.n	800c3b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	685a      	ldr	r2, [r3, #4]
 800c3be:	4b14      	ldr	r3, [pc, #80]	; (800c410 <vPortFree+0xb8>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d01e      	beq.n	800c406 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d11a      	bne.n	800c406 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	685a      	ldr	r2, [r3, #4]
 800c3d4:	4b0e      	ldr	r3, [pc, #56]	; (800c410 <vPortFree+0xb8>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	43db      	mvns	r3, r3
 800c3da:	401a      	ands	r2, r3
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c3e0:	f001 fba8 	bl	800db34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	685a      	ldr	r2, [r3, #4]
 800c3e8:	4b0a      	ldr	r3, [pc, #40]	; (800c414 <vPortFree+0xbc>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	4a09      	ldr	r2, [pc, #36]	; (800c414 <vPortFree+0xbc>)
 800c3f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c3f2:	6938      	ldr	r0, [r7, #16]
 800c3f4:	f000 f874 	bl	800c4e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c3f8:	4b07      	ldr	r3, [pc, #28]	; (800c418 <vPortFree+0xc0>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	4a06      	ldr	r2, [pc, #24]	; (800c418 <vPortFree+0xc0>)
 800c400:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c402:	f001 fba5 	bl	800db50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c406:	bf00      	nop
 800c408:	3718      	adds	r7, #24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	24004d20 	.word	0x24004d20
 800c414:	24004d10 	.word	0x24004d10
 800c418:	24004d1c 	.word	0x24004d1c

0800c41c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c41c:	b480      	push	{r7}
 800c41e:	b085      	sub	sp, #20
 800c420:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c422:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c426:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c428:	4b27      	ldr	r3, [pc, #156]	; (800c4c8 <prvHeapInit+0xac>)
 800c42a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f003 0307 	and.w	r3, r3, #7
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00c      	beq.n	800c450 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	3307      	adds	r3, #7
 800c43a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f023 0307 	bic.w	r3, r3, #7
 800c442:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c444:	68ba      	ldr	r2, [r7, #8]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	1ad3      	subs	r3, r2, r3
 800c44a:	4a1f      	ldr	r2, [pc, #124]	; (800c4c8 <prvHeapInit+0xac>)
 800c44c:	4413      	add	r3, r2
 800c44e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c454:	4a1d      	ldr	r2, [pc, #116]	; (800c4cc <prvHeapInit+0xb0>)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c45a:	4b1c      	ldr	r3, [pc, #112]	; (800c4cc <prvHeapInit+0xb0>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	68ba      	ldr	r2, [r7, #8]
 800c464:	4413      	add	r3, r2
 800c466:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c468:	2208      	movs	r2, #8
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	1a9b      	subs	r3, r3, r2
 800c46e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f023 0307 	bic.w	r3, r3, #7
 800c476:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	4a15      	ldr	r2, [pc, #84]	; (800c4d0 <prvHeapInit+0xb4>)
 800c47c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c47e:	4b14      	ldr	r3, [pc, #80]	; (800c4d0 <prvHeapInit+0xb4>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2200      	movs	r2, #0
 800c484:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c486:	4b12      	ldr	r3, [pc, #72]	; (800c4d0 <prvHeapInit+0xb4>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2200      	movs	r2, #0
 800c48c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	1ad2      	subs	r2, r2, r3
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c49c:	4b0c      	ldr	r3, [pc, #48]	; (800c4d0 <prvHeapInit+0xb4>)
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	4a0a      	ldr	r2, [pc, #40]	; (800c4d4 <prvHeapInit+0xb8>)
 800c4aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	4a09      	ldr	r2, [pc, #36]	; (800c4d8 <prvHeapInit+0xbc>)
 800c4b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c4b4:	4b09      	ldr	r3, [pc, #36]	; (800c4dc <prvHeapInit+0xc0>)
 800c4b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c4ba:	601a      	str	r2, [r3, #0]
}
 800c4bc:	bf00      	nop
 800c4be:	3714      	adds	r7, #20
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr
 800c4c8:	24001104 	.word	0x24001104
 800c4cc:	24004d04 	.word	0x24004d04
 800c4d0:	24004d0c 	.word	0x24004d0c
 800c4d4:	24004d14 	.word	0x24004d14
 800c4d8:	24004d10 	.word	0x24004d10
 800c4dc:	24004d20 	.word	0x24004d20

0800c4e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c4e8:	4b28      	ldr	r3, [pc, #160]	; (800c58c <prvInsertBlockIntoFreeList+0xac>)
 800c4ea:	60fb      	str	r3, [r7, #12]
 800c4ec:	e002      	b.n	800c4f4 <prvInsertBlockIntoFreeList+0x14>
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	60fb      	str	r3, [r7, #12]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d8f7      	bhi.n	800c4ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	68ba      	ldr	r2, [r7, #8]
 800c508:	4413      	add	r3, r2
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d108      	bne.n	800c522 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	685a      	ldr	r2, [r3, #4]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	441a      	add	r2, r3
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	68ba      	ldr	r2, [r7, #8]
 800c52c:	441a      	add	r2, r3
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	429a      	cmp	r2, r3
 800c534:	d118      	bne.n	800c568 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	4b15      	ldr	r3, [pc, #84]	; (800c590 <prvInsertBlockIntoFreeList+0xb0>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d00d      	beq.n	800c55e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	685a      	ldr	r2, [r3, #4]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	441a      	add	r2, r3
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	601a      	str	r2, [r3, #0]
 800c55c:	e008      	b.n	800c570 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c55e:	4b0c      	ldr	r3, [pc, #48]	; (800c590 <prvInsertBlockIntoFreeList+0xb0>)
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	601a      	str	r2, [r3, #0]
 800c566:	e003      	b.n	800c570 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c570:	68fa      	ldr	r2, [r7, #12]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	429a      	cmp	r2, r3
 800c576:	d002      	beq.n	800c57e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c57e:	bf00      	nop
 800c580:	3714      	adds	r7, #20
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	24004d04 	.word	0x24004d04
 800c590:	24004d0c 	.word	0x24004d0c

0800c594 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f103 0208 	add.w	r2, r3, #8
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f103 0208 	add.w	r2, r3, #8
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f103 0208 	add.w	r2, r3, #8
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c5c8:	bf00      	nop
 800c5ca:	370c      	adds	r7, #12
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b083      	sub	sp, #12
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c5e2:	bf00      	nop
 800c5e4:	370c      	adds	r7, #12
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr

0800c5ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5ee:	b480      	push	{r7}
 800c5f0:	b085      	sub	sp, #20
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
 800c5f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	689a      	ldr	r2, [r3, #8]
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	683a      	ldr	r2, [r7, #0]
 800c612:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	683a      	ldr	r2, [r7, #0]
 800c618:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	1c5a      	adds	r2, r3, #1
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	601a      	str	r2, [r3, #0]
}
 800c62a:	bf00      	nop
 800c62c:	3714      	adds	r7, #20
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr

0800c636 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c636:	b480      	push	{r7}
 800c638:	b085      	sub	sp, #20
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c64c:	d103      	bne.n	800c656 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	691b      	ldr	r3, [r3, #16]
 800c652:	60fb      	str	r3, [r7, #12]
 800c654:	e00c      	b.n	800c670 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	3308      	adds	r3, #8
 800c65a:	60fb      	str	r3, [r7, #12]
 800c65c:	e002      	b.n	800c664 <vListInsert+0x2e>
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	60fb      	str	r3, [r7, #12]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	68ba      	ldr	r2, [r7, #8]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d2f6      	bcs.n	800c65e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	685a      	ldr	r2, [r3, #4]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	68fa      	ldr	r2, [r7, #12]
 800c684:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	683a      	ldr	r2, [r7, #0]
 800c68a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	1c5a      	adds	r2, r3, #1
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	601a      	str	r2, [r3, #0]
}
 800c69c:	bf00      	nop
 800c69e:	3714      	adds	r7, #20
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	691b      	ldr	r3, [r3, #16]
 800c6b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	6892      	ldr	r2, [r2, #8]
 800c6be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	6852      	ldr	r2, [r2, #4]
 800c6c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d103      	bne.n	800c6dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	689a      	ldr	r2, [r3, #8]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	1e5a      	subs	r2, r3, #1
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3714      	adds	r7, #20
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b085      	sub	sp, #20
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	3b04      	subs	r3, #4
 800c70c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c714:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	3b04      	subs	r3, #4
 800c71a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	f023 0201 	bic.w	r2, r3, #1
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	3b04      	subs	r3, #4
 800c72a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c72c:	4a0c      	ldr	r2, [pc, #48]	; (800c760 <pxPortInitialiseStack+0x64>)
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	3b14      	subs	r3, #20
 800c736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	3b04      	subs	r3, #4
 800c742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f06f 0202 	mvn.w	r2, #2
 800c74a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	3b20      	subs	r3, #32
 800c750:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c752:	68fb      	ldr	r3, [r7, #12]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	0800c765 	.word	0x0800c765

0800c764 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c764:	b480      	push	{r7}
 800c766:	b085      	sub	sp, #20
 800c768:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c76e:	4b12      	ldr	r3, [pc, #72]	; (800c7b8 <prvTaskExitError+0x54>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c776:	d00a      	beq.n	800c78e <prvTaskExitError+0x2a>
	__asm volatile
 800c778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77c:	f383 8811 	msr	BASEPRI, r3
 800c780:	f3bf 8f6f 	isb	sy
 800c784:	f3bf 8f4f 	dsb	sy
 800c788:	60fb      	str	r3, [r7, #12]
}
 800c78a:	bf00      	nop
 800c78c:	e7fe      	b.n	800c78c <prvTaskExitError+0x28>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	60bb      	str	r3, [r7, #8]
}
 800c7a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c7a2:	bf00      	nop
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d0fc      	beq.n	800c7a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c7aa:	bf00      	nop
 800c7ac:	bf00      	nop
 800c7ae:	3714      	adds	r7, #20
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr
 800c7b8:	24000018 	.word	0x24000018
 800c7bc:	00000000 	.word	0x00000000

0800c7c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c7c0:	4b07      	ldr	r3, [pc, #28]	; (800c7e0 <pxCurrentTCBConst2>)
 800c7c2:	6819      	ldr	r1, [r3, #0]
 800c7c4:	6808      	ldr	r0, [r1, #0]
 800c7c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ca:	f380 8809 	msr	PSP, r0
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f04f 0000 	mov.w	r0, #0
 800c7d6:	f380 8811 	msr	BASEPRI, r0
 800c7da:	4770      	bx	lr
 800c7dc:	f3af 8000 	nop.w

0800c7e0 <pxCurrentTCBConst2>:
 800c7e0:	24004d6c 	.word	0x24004d6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c7e4:	bf00      	nop
 800c7e6:	bf00      	nop

0800c7e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c7e8:	4808      	ldr	r0, [pc, #32]	; (800c80c <prvPortStartFirstTask+0x24>)
 800c7ea:	6800      	ldr	r0, [r0, #0]
 800c7ec:	6800      	ldr	r0, [r0, #0]
 800c7ee:	f380 8808 	msr	MSP, r0
 800c7f2:	f04f 0000 	mov.w	r0, #0
 800c7f6:	f380 8814 	msr	CONTROL, r0
 800c7fa:	b662      	cpsie	i
 800c7fc:	b661      	cpsie	f
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	df00      	svc	0
 800c808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c80a:	bf00      	nop
 800c80c:	e000ed08 	.word	0xe000ed08

0800c810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b086      	sub	sp, #24
 800c814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c816:	4b46      	ldr	r3, [pc, #280]	; (800c930 <xPortStartScheduler+0x120>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4a46      	ldr	r2, [pc, #280]	; (800c934 <xPortStartScheduler+0x124>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d10a      	bne.n	800c836 <xPortStartScheduler+0x26>
	__asm volatile
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	613b      	str	r3, [r7, #16]
}
 800c832:	bf00      	nop
 800c834:	e7fe      	b.n	800c834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c836:	4b3e      	ldr	r3, [pc, #248]	; (800c930 <xPortStartScheduler+0x120>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a3f      	ldr	r2, [pc, #252]	; (800c938 <xPortStartScheduler+0x128>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d10a      	bne.n	800c856 <xPortStartScheduler+0x46>
	__asm volatile
 800c840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c844:	f383 8811 	msr	BASEPRI, r3
 800c848:	f3bf 8f6f 	isb	sy
 800c84c:	f3bf 8f4f 	dsb	sy
 800c850:	60fb      	str	r3, [r7, #12]
}
 800c852:	bf00      	nop
 800c854:	e7fe      	b.n	800c854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c856:	4b39      	ldr	r3, [pc, #228]	; (800c93c <xPortStartScheduler+0x12c>)
 800c858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	22ff      	movs	r2, #255	; 0xff
 800c866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c870:	78fb      	ldrb	r3, [r7, #3]
 800c872:	b2db      	uxtb	r3, r3
 800c874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c878:	b2da      	uxtb	r2, r3
 800c87a:	4b31      	ldr	r3, [pc, #196]	; (800c940 <xPortStartScheduler+0x130>)
 800c87c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c87e:	4b31      	ldr	r3, [pc, #196]	; (800c944 <xPortStartScheduler+0x134>)
 800c880:	2207      	movs	r2, #7
 800c882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c884:	e009      	b.n	800c89a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c886:	4b2f      	ldr	r3, [pc, #188]	; (800c944 <xPortStartScheduler+0x134>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	3b01      	subs	r3, #1
 800c88c:	4a2d      	ldr	r2, [pc, #180]	; (800c944 <xPortStartScheduler+0x134>)
 800c88e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c890:	78fb      	ldrb	r3, [r7, #3]
 800c892:	b2db      	uxtb	r3, r3
 800c894:	005b      	lsls	r3, r3, #1
 800c896:	b2db      	uxtb	r3, r3
 800c898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c89a:	78fb      	ldrb	r3, [r7, #3]
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8a2:	2b80      	cmp	r3, #128	; 0x80
 800c8a4:	d0ef      	beq.n	800c886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c8a6:	4b27      	ldr	r3, [pc, #156]	; (800c944 <xPortStartScheduler+0x134>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f1c3 0307 	rsb	r3, r3, #7
 800c8ae:	2b04      	cmp	r3, #4
 800c8b0:	d00a      	beq.n	800c8c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	60bb      	str	r3, [r7, #8]
}
 800c8c4:	bf00      	nop
 800c8c6:	e7fe      	b.n	800c8c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c8c8:	4b1e      	ldr	r3, [pc, #120]	; (800c944 <xPortStartScheduler+0x134>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	021b      	lsls	r3, r3, #8
 800c8ce:	4a1d      	ldr	r2, [pc, #116]	; (800c944 <xPortStartScheduler+0x134>)
 800c8d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c8d2:	4b1c      	ldr	r3, [pc, #112]	; (800c944 <xPortStartScheduler+0x134>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c8da:	4a1a      	ldr	r2, [pc, #104]	; (800c944 <xPortStartScheduler+0x134>)
 800c8dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	b2da      	uxtb	r2, r3
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c8e6:	4b18      	ldr	r3, [pc, #96]	; (800c948 <xPortStartScheduler+0x138>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a17      	ldr	r2, [pc, #92]	; (800c948 <xPortStartScheduler+0x138>)
 800c8ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c8f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c8f2:	4b15      	ldr	r3, [pc, #84]	; (800c948 <xPortStartScheduler+0x138>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a14      	ldr	r2, [pc, #80]	; (800c948 <xPortStartScheduler+0x138>)
 800c8f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c8fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c8fe:	f000 f8dd 	bl	800cabc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c902:	4b12      	ldr	r3, [pc, #72]	; (800c94c <xPortStartScheduler+0x13c>)
 800c904:	2200      	movs	r2, #0
 800c906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c908:	f000 f8fc 	bl	800cb04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c90c:	4b10      	ldr	r3, [pc, #64]	; (800c950 <xPortStartScheduler+0x140>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a0f      	ldr	r2, [pc, #60]	; (800c950 <xPortStartScheduler+0x140>)
 800c912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c918:	f7ff ff66 	bl	800c7e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c91c:	f001 fa80 	bl	800de20 <vTaskSwitchContext>
	prvTaskExitError();
 800c920:	f7ff ff20 	bl	800c764 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c924:	2300      	movs	r3, #0
}
 800c926:	4618      	mov	r0, r3
 800c928:	3718      	adds	r7, #24
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	e000ed00 	.word	0xe000ed00
 800c934:	410fc271 	.word	0x410fc271
 800c938:	410fc270 	.word	0x410fc270
 800c93c:	e000e400 	.word	0xe000e400
 800c940:	24004d24 	.word	0x24004d24
 800c944:	24004d28 	.word	0x24004d28
 800c948:	e000ed20 	.word	0xe000ed20
 800c94c:	24000018 	.word	0x24000018
 800c950:	e000ef34 	.word	0xe000ef34

0800c954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
	__asm volatile
 800c95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95e:	f383 8811 	msr	BASEPRI, r3
 800c962:	f3bf 8f6f 	isb	sy
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	607b      	str	r3, [r7, #4]
}
 800c96c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c96e:	4b0f      	ldr	r3, [pc, #60]	; (800c9ac <vPortEnterCritical+0x58>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	3301      	adds	r3, #1
 800c974:	4a0d      	ldr	r2, [pc, #52]	; (800c9ac <vPortEnterCritical+0x58>)
 800c976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c978:	4b0c      	ldr	r3, [pc, #48]	; (800c9ac <vPortEnterCritical+0x58>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d10f      	bne.n	800c9a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c980:	4b0b      	ldr	r3, [pc, #44]	; (800c9b0 <vPortEnterCritical+0x5c>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	b2db      	uxtb	r3, r3
 800c986:	2b00      	cmp	r3, #0
 800c988:	d00a      	beq.n	800c9a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98e:	f383 8811 	msr	BASEPRI, r3
 800c992:	f3bf 8f6f 	isb	sy
 800c996:	f3bf 8f4f 	dsb	sy
 800c99a:	603b      	str	r3, [r7, #0]
}
 800c99c:	bf00      	nop
 800c99e:	e7fe      	b.n	800c99e <vPortEnterCritical+0x4a>
	}
}
 800c9a0:	bf00      	nop
 800c9a2:	370c      	adds	r7, #12
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr
 800c9ac:	24000018 	.word	0x24000018
 800c9b0:	e000ed04 	.word	0xe000ed04

0800c9b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c9ba:	4b12      	ldr	r3, [pc, #72]	; (800ca04 <vPortExitCritical+0x50>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d10a      	bne.n	800c9d8 <vPortExitCritical+0x24>
	__asm volatile
 800c9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	607b      	str	r3, [r7, #4]
}
 800c9d4:	bf00      	nop
 800c9d6:	e7fe      	b.n	800c9d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c9d8:	4b0a      	ldr	r3, [pc, #40]	; (800ca04 <vPortExitCritical+0x50>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	4a09      	ldr	r2, [pc, #36]	; (800ca04 <vPortExitCritical+0x50>)
 800c9e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c9e2:	4b08      	ldr	r3, [pc, #32]	; (800ca04 <vPortExitCritical+0x50>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d105      	bne.n	800c9f6 <vPortExitCritical+0x42>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c9f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c9f6:	bf00      	nop
 800c9f8:	370c      	adds	r7, #12
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	24000018 	.word	0x24000018
	...

0800ca10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca10:	f3ef 8009 	mrs	r0, PSP
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	4b15      	ldr	r3, [pc, #84]	; (800ca70 <pxCurrentTCBConst>)
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	f01e 0f10 	tst.w	lr, #16
 800ca20:	bf08      	it	eq
 800ca22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca2a:	6010      	str	r0, [r2, #0]
 800ca2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca34:	f380 8811 	msr	BASEPRI, r0
 800ca38:	f3bf 8f4f 	dsb	sy
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f001 f9ee 	bl	800de20 <vTaskSwitchContext>
 800ca44:	f04f 0000 	mov.w	r0, #0
 800ca48:	f380 8811 	msr	BASEPRI, r0
 800ca4c:	bc09      	pop	{r0, r3}
 800ca4e:	6819      	ldr	r1, [r3, #0]
 800ca50:	6808      	ldr	r0, [r1, #0]
 800ca52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca56:	f01e 0f10 	tst.w	lr, #16
 800ca5a:	bf08      	it	eq
 800ca5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca60:	f380 8809 	msr	PSP, r0
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop
 800ca6c:	f3af 8000 	nop.w

0800ca70 <pxCurrentTCBConst>:
 800ca70:	24004d6c 	.word	0x24004d6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca74:	bf00      	nop
 800ca76:	bf00      	nop

0800ca78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	607b      	str	r3, [r7, #4]
}
 800ca90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca92:	f001 f90b 	bl	800dcac <xTaskIncrementTick>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d003      	beq.n	800caa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca9c:	4b06      	ldr	r3, [pc, #24]	; (800cab8 <xPortSysTickHandler+0x40>)
 800ca9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caa2:	601a      	str	r2, [r3, #0]
 800caa4:	2300      	movs	r3, #0
 800caa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	f383 8811 	msr	BASEPRI, r3
}
 800caae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cab0:	bf00      	nop
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	e000ed04 	.word	0xe000ed04

0800cabc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cabc:	b480      	push	{r7}
 800cabe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cac0:	4b0b      	ldr	r3, [pc, #44]	; (800caf0 <vPortSetupTimerInterrupt+0x34>)
 800cac2:	2200      	movs	r2, #0
 800cac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cac6:	4b0b      	ldr	r3, [pc, #44]	; (800caf4 <vPortSetupTimerInterrupt+0x38>)
 800cac8:	2200      	movs	r2, #0
 800caca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cacc:	4b0a      	ldr	r3, [pc, #40]	; (800caf8 <vPortSetupTimerInterrupt+0x3c>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a0a      	ldr	r2, [pc, #40]	; (800cafc <vPortSetupTimerInterrupt+0x40>)
 800cad2:	fba2 2303 	umull	r2, r3, r2, r3
 800cad6:	099b      	lsrs	r3, r3, #6
 800cad8:	4a09      	ldr	r2, [pc, #36]	; (800cb00 <vPortSetupTimerInterrupt+0x44>)
 800cada:	3b01      	subs	r3, #1
 800cadc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cade:	4b04      	ldr	r3, [pc, #16]	; (800caf0 <vPortSetupTimerInterrupt+0x34>)
 800cae0:	2207      	movs	r2, #7
 800cae2:	601a      	str	r2, [r3, #0]
}
 800cae4:	bf00      	nop
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	e000e010 	.word	0xe000e010
 800caf4:	e000e018 	.word	0xe000e018
 800caf8:	24000000 	.word	0x24000000
 800cafc:	10624dd3 	.word	0x10624dd3
 800cb00:	e000e014 	.word	0xe000e014

0800cb04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb14 <vPortEnableVFP+0x10>
 800cb08:	6801      	ldr	r1, [r0, #0]
 800cb0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb0e:	6001      	str	r1, [r0, #0]
 800cb10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb12:	bf00      	nop
 800cb14:	e000ed88 	.word	0xe000ed88

0800cb18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb18:	b480      	push	{r7}
 800cb1a:	b085      	sub	sp, #20
 800cb1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb1e:	f3ef 8305 	mrs	r3, IPSR
 800cb22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2b0f      	cmp	r3, #15
 800cb28:	d914      	bls.n	800cb54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb2a:	4a17      	ldr	r2, [pc, #92]	; (800cb88 <vPortValidateInterruptPriority+0x70>)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	4413      	add	r3, r2
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb34:	4b15      	ldr	r3, [pc, #84]	; (800cb8c <vPortValidateInterruptPriority+0x74>)
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	7afa      	ldrb	r2, [r7, #11]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d20a      	bcs.n	800cb54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb42:	f383 8811 	msr	BASEPRI, r3
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	607b      	str	r3, [r7, #4]
}
 800cb50:	bf00      	nop
 800cb52:	e7fe      	b.n	800cb52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb54:	4b0e      	ldr	r3, [pc, #56]	; (800cb90 <vPortValidateInterruptPriority+0x78>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cb5c:	4b0d      	ldr	r3, [pc, #52]	; (800cb94 <vPortValidateInterruptPriority+0x7c>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d90a      	bls.n	800cb7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb68:	f383 8811 	msr	BASEPRI, r3
 800cb6c:	f3bf 8f6f 	isb	sy
 800cb70:	f3bf 8f4f 	dsb	sy
 800cb74:	603b      	str	r3, [r7, #0]
}
 800cb76:	bf00      	nop
 800cb78:	e7fe      	b.n	800cb78 <vPortValidateInterruptPriority+0x60>
	}
 800cb7a:	bf00      	nop
 800cb7c:	3714      	adds	r7, #20
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	e000e3f0 	.word	0xe000e3f0
 800cb8c:	24004d24 	.word	0x24004d24
 800cb90:	e000ed0c 	.word	0xe000ed0c
 800cb94:	24004d28 	.word	0x24004d28

0800cb98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d10a      	bne.n	800cbc2 <xQueueGenericReset+0x2a>
	__asm volatile
 800cbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb0:	f383 8811 	msr	BASEPRI, r3
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	60bb      	str	r3, [r7, #8]
}
 800cbbe:	bf00      	nop
 800cbc0:	e7fe      	b.n	800cbc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cbc2:	f7ff fec7 	bl	800c954 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbce:	68f9      	ldr	r1, [r7, #12]
 800cbd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cbd2:	fb01 f303 	mul.w	r3, r1, r3
 800cbd6:	441a      	add	r2, r3
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf2:	3b01      	subs	r3, #1
 800cbf4:	68f9      	ldr	r1, [r7, #12]
 800cbf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cbf8:	fb01 f303 	mul.w	r3, r1, r3
 800cbfc:	441a      	add	r2, r3
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	22ff      	movs	r2, #255	; 0xff
 800cc06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	22ff      	movs	r2, #255	; 0xff
 800cc0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d114      	bne.n	800cc42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	691b      	ldr	r3, [r3, #16]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d01a      	beq.n	800cc56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	3310      	adds	r3, #16
 800cc24:	4618      	mov	r0, r3
 800cc26:	f001 f9af 	bl	800df88 <xTaskRemoveFromEventList>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d012      	beq.n	800cc56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cc30:	4b0c      	ldr	r3, [pc, #48]	; (800cc64 <xQueueGenericReset+0xcc>)
 800cc32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc36:	601a      	str	r2, [r3, #0]
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	e009      	b.n	800cc56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	3310      	adds	r3, #16
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7ff fca4 	bl	800c594 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	3324      	adds	r3, #36	; 0x24
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7ff fc9f 	bl	800c594 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc56:	f7ff fead 	bl	800c9b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc5a:	2301      	movs	r3, #1
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	e000ed04 	.word	0xe000ed04

0800cc68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b08e      	sub	sp, #56	; 0x38
 800cc6c:	af02      	add	r7, sp, #8
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
 800cc74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d10a      	bne.n	800cc92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc80:	f383 8811 	msr	BASEPRI, r3
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	f3bf 8f4f 	dsb	sy
 800cc8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc8e:	bf00      	nop
 800cc90:	e7fe      	b.n	800cc90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d10a      	bne.n	800ccae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9c:	f383 8811 	msr	BASEPRI, r3
 800cca0:	f3bf 8f6f 	isb	sy
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ccaa:	bf00      	nop
 800ccac:	e7fe      	b.n	800ccac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d002      	beq.n	800ccba <xQueueGenericCreateStatic+0x52>
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d001      	beq.n	800ccbe <xQueueGenericCreateStatic+0x56>
 800ccba:	2301      	movs	r3, #1
 800ccbc:	e000      	b.n	800ccc0 <xQueueGenericCreateStatic+0x58>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10a      	bne.n	800ccda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ccc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	623b      	str	r3, [r7, #32]
}
 800ccd6:	bf00      	nop
 800ccd8:	e7fe      	b.n	800ccd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d102      	bne.n	800cce6 <xQueueGenericCreateStatic+0x7e>
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d101      	bne.n	800ccea <xQueueGenericCreateStatic+0x82>
 800cce6:	2301      	movs	r3, #1
 800cce8:	e000      	b.n	800ccec <xQueueGenericCreateStatic+0x84>
 800ccea:	2300      	movs	r3, #0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d10a      	bne.n	800cd06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	61fb      	str	r3, [r7, #28]
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd06:	2350      	movs	r3, #80	; 0x50
 800cd08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	2b50      	cmp	r3, #80	; 0x50
 800cd0e:	d00a      	beq.n	800cd26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	61bb      	str	r3, [r7, #24]
}
 800cd22:	bf00      	nop
 800cd24:	e7fe      	b.n	800cd24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00d      	beq.n	800cd4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd34:	2201      	movs	r2, #1
 800cd36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd40:	9300      	str	r3, [sp, #0]
 800cd42:	4613      	mov	r3, r2
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	68b9      	ldr	r1, [r7, #8]
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f000 f83f 	bl	800cdcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3730      	adds	r7, #48	; 0x30
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b08a      	sub	sp, #40	; 0x28
 800cd5c:	af02      	add	r7, sp, #8
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	4613      	mov	r3, r2
 800cd64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d10a      	bne.n	800cd82 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd70:	f383 8811 	msr	BASEPRI, r3
 800cd74:	f3bf 8f6f 	isb	sy
 800cd78:	f3bf 8f4f 	dsb	sy
 800cd7c:	613b      	str	r3, [r7, #16]
}
 800cd7e:	bf00      	nop
 800cd80:	e7fe      	b.n	800cd80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	68ba      	ldr	r2, [r7, #8]
 800cd86:	fb02 f303 	mul.w	r3, r2, r3
 800cd8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	3350      	adds	r3, #80	; 0x50
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7ff fa15 	bl	800c1c0 <pvPortMalloc>
 800cd96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cd98:	69bb      	ldr	r3, [r7, #24]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d011      	beq.n	800cdc2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cd9e:	69bb      	ldr	r3, [r7, #24]
 800cda0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	3350      	adds	r3, #80	; 0x50
 800cda6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cda8:	69bb      	ldr	r3, [r7, #24]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cdb0:	79fa      	ldrb	r2, [r7, #7]
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	9300      	str	r3, [sp, #0]
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	697a      	ldr	r2, [r7, #20]
 800cdba:	68b9      	ldr	r1, [r7, #8]
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f000 f805 	bl	800cdcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cdc2:	69bb      	ldr	r3, [r7, #24]
	}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3720      	adds	r7, #32
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
 800cdd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d103      	bne.n	800cde8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	69ba      	ldr	r2, [r7, #24]
 800cde4:	601a      	str	r2, [r3, #0]
 800cde6:	e002      	b.n	800cdee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cdf4:	69bb      	ldr	r3, [r7, #24]
 800cdf6:	68ba      	ldr	r2, [r7, #8]
 800cdf8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cdfa:	2101      	movs	r1, #1
 800cdfc:	69b8      	ldr	r0, [r7, #24]
 800cdfe:	f7ff fecb 	bl	800cb98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	78fa      	ldrb	r2, [r7, #3]
 800ce06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ce0a:	bf00      	nop
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b082      	sub	sp, #8
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00e      	beq.n	800ce3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ce32:	2300      	movs	r3, #0
 800ce34:	2200      	movs	r2, #0
 800ce36:	2100      	movs	r1, #0
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 f837 	bl	800ceac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ce3e:	bf00      	nop
 800ce40:	3708      	adds	r7, #8
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ce46:	b580      	push	{r7, lr}
 800ce48:	b086      	sub	sp, #24
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ce50:	2301      	movs	r3, #1
 800ce52:	617b      	str	r3, [r7, #20]
 800ce54:	2300      	movs	r3, #0
 800ce56:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ce58:	79fb      	ldrb	r3, [r7, #7]
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	6939      	ldr	r1, [r7, #16]
 800ce5e:	6978      	ldr	r0, [r7, #20]
 800ce60:	f7ff ff7a 	bl	800cd58 <xQueueGenericCreate>
 800ce64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ce66:	68f8      	ldr	r0, [r7, #12]
 800ce68:	f7ff ffd3 	bl	800ce12 <prvInitialiseMutex>

		return xNewQueue;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
	}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3718      	adds	r7, #24
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b088      	sub	sp, #32
 800ce7a:	af02      	add	r7, sp, #8
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	6039      	str	r1, [r7, #0]
 800ce80:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ce82:	2301      	movs	r3, #1
 800ce84:	617b      	str	r3, [r7, #20]
 800ce86:	2300      	movs	r3, #0
 800ce88:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ce8a:	79fb      	ldrb	r3, [r7, #7]
 800ce8c:	9300      	str	r3, [sp, #0]
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	2200      	movs	r2, #0
 800ce92:	6939      	ldr	r1, [r7, #16]
 800ce94:	6978      	ldr	r0, [r7, #20]
 800ce96:	f7ff fee7 	bl	800cc68 <xQueueGenericCreateStatic>
 800ce9a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ce9c:	68f8      	ldr	r0, [r7, #12]
 800ce9e:	f7ff ffb8 	bl	800ce12 <prvInitialiseMutex>

		return xNewQueue;
 800cea2:	68fb      	ldr	r3, [r7, #12]
	}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3718      	adds	r7, #24
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b08e      	sub	sp, #56	; 0x38
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	607a      	str	r2, [r7, #4]
 800ceb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ceba:	2300      	movs	r3, #0
 800cebc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d10a      	bne.n	800cede <xQueueGenericSend+0x32>
	__asm volatile
 800cec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cecc:	f383 8811 	msr	BASEPRI, r3
 800ced0:	f3bf 8f6f 	isb	sy
 800ced4:	f3bf 8f4f 	dsb	sy
 800ced8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ceda:	bf00      	nop
 800cedc:	e7fe      	b.n	800cedc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d103      	bne.n	800ceec <xQueueGenericSend+0x40>
 800cee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d101      	bne.n	800cef0 <xQueueGenericSend+0x44>
 800ceec:	2301      	movs	r3, #1
 800ceee:	e000      	b.n	800cef2 <xQueueGenericSend+0x46>
 800cef0:	2300      	movs	r3, #0
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d10a      	bne.n	800cf0c <xQueueGenericSend+0x60>
	__asm volatile
 800cef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefa:	f383 8811 	msr	BASEPRI, r3
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	f3bf 8f4f 	dsb	sy
 800cf06:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf08:	bf00      	nop
 800cf0a:	e7fe      	b.n	800cf0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	2b02      	cmp	r3, #2
 800cf10:	d103      	bne.n	800cf1a <xQueueGenericSend+0x6e>
 800cf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d101      	bne.n	800cf1e <xQueueGenericSend+0x72>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e000      	b.n	800cf20 <xQueueGenericSend+0x74>
 800cf1e:	2300      	movs	r3, #0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d10a      	bne.n	800cf3a <xQueueGenericSend+0x8e>
	__asm volatile
 800cf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf28:	f383 8811 	msr	BASEPRI, r3
 800cf2c:	f3bf 8f6f 	isb	sy
 800cf30:	f3bf 8f4f 	dsb	sy
 800cf34:	623b      	str	r3, [r7, #32]
}
 800cf36:	bf00      	nop
 800cf38:	e7fe      	b.n	800cf38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf3a:	f001 f9e7 	bl	800e30c <xTaskGetSchedulerState>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d102      	bne.n	800cf4a <xQueueGenericSend+0x9e>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d101      	bne.n	800cf4e <xQueueGenericSend+0xa2>
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	e000      	b.n	800cf50 <xQueueGenericSend+0xa4>
 800cf4e:	2300      	movs	r3, #0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d10a      	bne.n	800cf6a <xQueueGenericSend+0xbe>
	__asm volatile
 800cf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	61fb      	str	r3, [r7, #28]
}
 800cf66:	bf00      	nop
 800cf68:	e7fe      	b.n	800cf68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf6a:	f7ff fcf3 	bl	800c954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d302      	bcc.n	800cf80 <xQueueGenericSend+0xd4>
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	2b02      	cmp	r3, #2
 800cf7e:	d129      	bne.n	800cfd4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf80:	683a      	ldr	r2, [r7, #0]
 800cf82:	68b9      	ldr	r1, [r7, #8]
 800cf84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf86:	f000 fa0b 	bl	800d3a0 <prvCopyDataToQueue>
 800cf8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d010      	beq.n	800cfb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf96:	3324      	adds	r3, #36	; 0x24
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f000 fff5 	bl	800df88 <xTaskRemoveFromEventList>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d013      	beq.n	800cfcc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cfa4:	4b3f      	ldr	r3, [pc, #252]	; (800d0a4 <xQueueGenericSend+0x1f8>)
 800cfa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfaa:	601a      	str	r2, [r3, #0]
 800cfac:	f3bf 8f4f 	dsb	sy
 800cfb0:	f3bf 8f6f 	isb	sy
 800cfb4:	e00a      	b.n	800cfcc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d007      	beq.n	800cfcc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cfbc:	4b39      	ldr	r3, [pc, #228]	; (800d0a4 <xQueueGenericSend+0x1f8>)
 800cfbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfc2:	601a      	str	r2, [r3, #0]
 800cfc4:	f3bf 8f4f 	dsb	sy
 800cfc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cfcc:	f7ff fcf2 	bl	800c9b4 <vPortExitCritical>
				return pdPASS;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e063      	b.n	800d09c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d103      	bne.n	800cfe2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cfda:	f7ff fceb 	bl	800c9b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	e05c      	b.n	800d09c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cfe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d106      	bne.n	800cff6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cfe8:	f107 0314 	add.w	r3, r7, #20
 800cfec:	4618      	mov	r0, r3
 800cfee:	f001 f82f 	bl	800e050 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cff2:	2301      	movs	r3, #1
 800cff4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cff6:	f7ff fcdd 	bl	800c9b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cffa:	f000 fd9b 	bl	800db34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cffe:	f7ff fca9 	bl	800c954 <vPortEnterCritical>
 800d002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d008:	b25b      	sxtb	r3, r3
 800d00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d00e:	d103      	bne.n	800d018 <xQueueGenericSend+0x16c>
 800d010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d012:	2200      	movs	r2, #0
 800d014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d01e:	b25b      	sxtb	r3, r3
 800d020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d024:	d103      	bne.n	800d02e <xQueueGenericSend+0x182>
 800d026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d028:	2200      	movs	r2, #0
 800d02a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d02e:	f7ff fcc1 	bl	800c9b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d032:	1d3a      	adds	r2, r7, #4
 800d034:	f107 0314 	add.w	r3, r7, #20
 800d038:	4611      	mov	r1, r2
 800d03a:	4618      	mov	r0, r3
 800d03c:	f001 f81e 	bl	800e07c <xTaskCheckForTimeOut>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d124      	bne.n	800d090 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d046:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d048:	f000 faa2 	bl	800d590 <prvIsQueueFull>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d018      	beq.n	800d084 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d054:	3310      	adds	r3, #16
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	4611      	mov	r1, r2
 800d05a:	4618      	mov	r0, r3
 800d05c:	f000 ff44 	bl	800dee8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d062:	f000 fa2d 	bl	800d4c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d066:	f000 fd73 	bl	800db50 <xTaskResumeAll>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	f47f af7c 	bne.w	800cf6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d072:	4b0c      	ldr	r3, [pc, #48]	; (800d0a4 <xQueueGenericSend+0x1f8>)
 800d074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d078:	601a      	str	r2, [r3, #0]
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	e772      	b.n	800cf6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d086:	f000 fa1b 	bl	800d4c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d08a:	f000 fd61 	bl	800db50 <xTaskResumeAll>
 800d08e:	e76c      	b.n	800cf6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d092:	f000 fa15 	bl	800d4c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d096:	f000 fd5b 	bl	800db50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d09a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3738      	adds	r7, #56	; 0x38
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	e000ed04 	.word	0xe000ed04

0800d0a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b090      	sub	sp, #64	; 0x40
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	607a      	str	r2, [r7, #4]
 800d0b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10a      	bne.n	800d0d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d0d2:	bf00      	nop
 800d0d4:	e7fe      	b.n	800d0d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d103      	bne.n	800d0e4 <xQueueGenericSendFromISR+0x3c>
 800d0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d101      	bne.n	800d0e8 <xQueueGenericSendFromISR+0x40>
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	e000      	b.n	800d0ea <xQueueGenericSendFromISR+0x42>
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d10a      	bne.n	800d104 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f2:	f383 8811 	msr	BASEPRI, r3
 800d0f6:	f3bf 8f6f 	isb	sy
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d100:	bf00      	nop
 800d102:	e7fe      	b.n	800d102 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	2b02      	cmp	r3, #2
 800d108:	d103      	bne.n	800d112 <xQueueGenericSendFromISR+0x6a>
 800d10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d101      	bne.n	800d116 <xQueueGenericSendFromISR+0x6e>
 800d112:	2301      	movs	r3, #1
 800d114:	e000      	b.n	800d118 <xQueueGenericSendFromISR+0x70>
 800d116:	2300      	movs	r3, #0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d10a      	bne.n	800d132 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d120:	f383 8811 	msr	BASEPRI, r3
 800d124:	f3bf 8f6f 	isb	sy
 800d128:	f3bf 8f4f 	dsb	sy
 800d12c:	623b      	str	r3, [r7, #32]
}
 800d12e:	bf00      	nop
 800d130:	e7fe      	b.n	800d130 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d132:	f7ff fcf1 	bl	800cb18 <vPortValidateInterruptPriority>
	__asm volatile
 800d136:	f3ef 8211 	mrs	r2, BASEPRI
 800d13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13e:	f383 8811 	msr	BASEPRI, r3
 800d142:	f3bf 8f6f 	isb	sy
 800d146:	f3bf 8f4f 	dsb	sy
 800d14a:	61fa      	str	r2, [r7, #28]
 800d14c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d14e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d150:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d302      	bcc.n	800d164 <xQueueGenericSendFromISR+0xbc>
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	2b02      	cmp	r3, #2
 800d162:	d12f      	bne.n	800d1c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d166:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d172:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d174:	683a      	ldr	r2, [r7, #0]
 800d176:	68b9      	ldr	r1, [r7, #8]
 800d178:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d17a:	f000 f911 	bl	800d3a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d17e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d186:	d112      	bne.n	800d1ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d016      	beq.n	800d1be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d192:	3324      	adds	r3, #36	; 0x24
 800d194:	4618      	mov	r0, r3
 800d196:	f000 fef7 	bl	800df88 <xTaskRemoveFromEventList>
 800d19a:	4603      	mov	r3, r0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00e      	beq.n	800d1be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d00b      	beq.n	800d1be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	601a      	str	r2, [r3, #0]
 800d1ac:	e007      	b.n	800d1be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d1ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	b25a      	sxtb	r2, r3
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d1c2:	e001      	b.n	800d1c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ca:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	f383 8811 	msr	BASEPRI, r3
}
 800d1d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3740      	adds	r7, #64	; 0x40
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
	...

0800d1e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b08c      	sub	sp, #48	; 0x30
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d10a      	bne.n	800d210 <xQueueReceive+0x30>
	__asm volatile
 800d1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fe:	f383 8811 	msr	BASEPRI, r3
 800d202:	f3bf 8f6f 	isb	sy
 800d206:	f3bf 8f4f 	dsb	sy
 800d20a:	623b      	str	r3, [r7, #32]
}
 800d20c:	bf00      	nop
 800d20e:	e7fe      	b.n	800d20e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d103      	bne.n	800d21e <xQueueReceive+0x3e>
 800d216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d101      	bne.n	800d222 <xQueueReceive+0x42>
 800d21e:	2301      	movs	r3, #1
 800d220:	e000      	b.n	800d224 <xQueueReceive+0x44>
 800d222:	2300      	movs	r3, #0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d10a      	bne.n	800d23e <xQueueReceive+0x5e>
	__asm volatile
 800d228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22c:	f383 8811 	msr	BASEPRI, r3
 800d230:	f3bf 8f6f 	isb	sy
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	61fb      	str	r3, [r7, #28]
}
 800d23a:	bf00      	nop
 800d23c:	e7fe      	b.n	800d23c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d23e:	f001 f865 	bl	800e30c <xTaskGetSchedulerState>
 800d242:	4603      	mov	r3, r0
 800d244:	2b00      	cmp	r3, #0
 800d246:	d102      	bne.n	800d24e <xQueueReceive+0x6e>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d101      	bne.n	800d252 <xQueueReceive+0x72>
 800d24e:	2301      	movs	r3, #1
 800d250:	e000      	b.n	800d254 <xQueueReceive+0x74>
 800d252:	2300      	movs	r3, #0
 800d254:	2b00      	cmp	r3, #0
 800d256:	d10a      	bne.n	800d26e <xQueueReceive+0x8e>
	__asm volatile
 800d258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25c:	f383 8811 	msr	BASEPRI, r3
 800d260:	f3bf 8f6f 	isb	sy
 800d264:	f3bf 8f4f 	dsb	sy
 800d268:	61bb      	str	r3, [r7, #24]
}
 800d26a:	bf00      	nop
 800d26c:	e7fe      	b.n	800d26c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d26e:	f7ff fb71 	bl	800c954 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d276:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d01f      	beq.n	800d2be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d27e:	68b9      	ldr	r1, [r7, #8]
 800d280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d282:	f000 f8f7 	bl	800d474 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d288:	1e5a      	subs	r2, r3, #1
 800d28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00f      	beq.n	800d2b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d298:	3310      	adds	r3, #16
 800d29a:	4618      	mov	r0, r3
 800d29c:	f000 fe74 	bl	800df88 <xTaskRemoveFromEventList>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d007      	beq.n	800d2b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d2a6:	4b3d      	ldr	r3, [pc, #244]	; (800d39c <xQueueReceive+0x1bc>)
 800d2a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2ac:	601a      	str	r2, [r3, #0]
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d2b6:	f7ff fb7d 	bl	800c9b4 <vPortExitCritical>
				return pdPASS;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e069      	b.n	800d392 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d103      	bne.n	800d2cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d2c4:	f7ff fb76 	bl	800c9b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	e062      	b.n	800d392 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d106      	bne.n	800d2e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2d2:	f107 0310 	add.w	r3, r7, #16
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f000 feba 	bl	800e050 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d2dc:	2301      	movs	r3, #1
 800d2de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d2e0:	f7ff fb68 	bl	800c9b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d2e4:	f000 fc26 	bl	800db34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d2e8:	f7ff fb34 	bl	800c954 <vPortEnterCritical>
 800d2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2f2:	b25b      	sxtb	r3, r3
 800d2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f8:	d103      	bne.n	800d302 <xQueueReceive+0x122>
 800d2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d308:	b25b      	sxtb	r3, r3
 800d30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d30e:	d103      	bne.n	800d318 <xQueueReceive+0x138>
 800d310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d312:	2200      	movs	r2, #0
 800d314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d318:	f7ff fb4c 	bl	800c9b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d31c:	1d3a      	adds	r2, r7, #4
 800d31e:	f107 0310 	add.w	r3, r7, #16
 800d322:	4611      	mov	r1, r2
 800d324:	4618      	mov	r0, r3
 800d326:	f000 fea9 	bl	800e07c <xTaskCheckForTimeOut>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d123      	bne.n	800d378 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d332:	f000 f917 	bl	800d564 <prvIsQueueEmpty>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d017      	beq.n	800d36c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33e:	3324      	adds	r3, #36	; 0x24
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	4611      	mov	r1, r2
 800d344:	4618      	mov	r0, r3
 800d346:	f000 fdcf 	bl	800dee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d34a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d34c:	f000 f8b8 	bl	800d4c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d350:	f000 fbfe 	bl	800db50 <xTaskResumeAll>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d189      	bne.n	800d26e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d35a:	4b10      	ldr	r3, [pc, #64]	; (800d39c <xQueueReceive+0x1bc>)
 800d35c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d360:	601a      	str	r2, [r3, #0]
 800d362:	f3bf 8f4f 	dsb	sy
 800d366:	f3bf 8f6f 	isb	sy
 800d36a:	e780      	b.n	800d26e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d36c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d36e:	f000 f8a7 	bl	800d4c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d372:	f000 fbed 	bl	800db50 <xTaskResumeAll>
 800d376:	e77a      	b.n	800d26e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d37a:	f000 f8a1 	bl	800d4c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d37e:	f000 fbe7 	bl	800db50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d384:	f000 f8ee 	bl	800d564 <prvIsQueueEmpty>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f43f af6f 	beq.w	800d26e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d390:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d392:	4618      	mov	r0, r3
 800d394:	3730      	adds	r7, #48	; 0x30
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	e000ed04 	.word	0xe000ed04

0800d3a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b086      	sub	sp, #24
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	60f8      	str	r0, [r7, #12]
 800d3a8:	60b9      	str	r1, [r7, #8]
 800d3aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d10d      	bne.n	800d3da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d14d      	bne.n	800d462 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f000 ffbc 	bl	800e348 <xTaskPriorityDisinherit>
 800d3d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	609a      	str	r2, [r3, #8]
 800d3d8:	e043      	b.n	800d462 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d119      	bne.n	800d414 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	6858      	ldr	r0, [r3, #4]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	68b9      	ldr	r1, [r7, #8]
 800d3ec:	f002 faf3 	bl	800f9d6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	685a      	ldr	r2, [r3, #4]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f8:	441a      	add	r2, r3
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	685a      	ldr	r2, [r3, #4]
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	689b      	ldr	r3, [r3, #8]
 800d406:	429a      	cmp	r2, r3
 800d408:	d32b      	bcc.n	800d462 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	605a      	str	r2, [r3, #4]
 800d412:	e026      	b.n	800d462 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	68d8      	ldr	r0, [r3, #12]
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d41c:	461a      	mov	r2, r3
 800d41e:	68b9      	ldr	r1, [r7, #8]
 800d420:	f002 fad9 	bl	800f9d6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	68da      	ldr	r2, [r3, #12]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d42c:	425b      	negs	r3, r3
 800d42e:	441a      	add	r2, r3
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	68da      	ldr	r2, [r3, #12]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d207      	bcs.n	800d450 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	689a      	ldr	r2, [r3, #8]
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d448:	425b      	negs	r3, r3
 800d44a:	441a      	add	r2, r3
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2b02      	cmp	r3, #2
 800d454:	d105      	bne.n	800d462 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d002      	beq.n	800d462 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	3b01      	subs	r3, #1
 800d460:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	1c5a      	adds	r2, r3, #1
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d46a:	697b      	ldr	r3, [r7, #20]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3718      	adds	r7, #24
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d482:	2b00      	cmp	r3, #0
 800d484:	d018      	beq.n	800d4b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	68da      	ldr	r2, [r3, #12]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d48e:	441a      	add	r2, r3
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	68da      	ldr	r2, [r3, #12]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	689b      	ldr	r3, [r3, #8]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d303      	bcc.n	800d4a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	68d9      	ldr	r1, [r3, #12]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	6838      	ldr	r0, [r7, #0]
 800d4b4:	f002 fa8f 	bl	800f9d6 <memcpy>
	}
}
 800d4b8:	bf00      	nop
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d4c8:	f7ff fa44 	bl	800c954 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4d4:	e011      	b.n	800d4fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d012      	beq.n	800d504 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	3324      	adds	r3, #36	; 0x24
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f000 fd50 	bl	800df88 <xTaskRemoveFromEventList>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d001      	beq.n	800d4f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d4ee:	f000 fe27 	bl	800e140 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d4f2:	7bfb      	ldrb	r3, [r7, #15]
 800d4f4:	3b01      	subs	r3, #1
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	dce9      	bgt.n	800d4d6 <prvUnlockQueue+0x16>
 800d502:	e000      	b.n	800d506 <prvUnlockQueue+0x46>
					break;
 800d504:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	22ff      	movs	r2, #255	; 0xff
 800d50a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d50e:	f7ff fa51 	bl	800c9b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d512:	f7ff fa1f 	bl	800c954 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d51c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d51e:	e011      	b.n	800d544 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	691b      	ldr	r3, [r3, #16]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d012      	beq.n	800d54e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	3310      	adds	r3, #16
 800d52c:	4618      	mov	r0, r3
 800d52e:	f000 fd2b 	bl	800df88 <xTaskRemoveFromEventList>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d001      	beq.n	800d53c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d538:	f000 fe02 	bl	800e140 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d53c:	7bbb      	ldrb	r3, [r7, #14]
 800d53e:	3b01      	subs	r3, #1
 800d540:	b2db      	uxtb	r3, r3
 800d542:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d544:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	dce9      	bgt.n	800d520 <prvUnlockQueue+0x60>
 800d54c:	e000      	b.n	800d550 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d54e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	22ff      	movs	r2, #255	; 0xff
 800d554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d558:	f7ff fa2c 	bl	800c9b4 <vPortExitCritical>
}
 800d55c:	bf00      	nop
 800d55e:	3710      	adds	r7, #16
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d56c:	f7ff f9f2 	bl	800c954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d574:	2b00      	cmp	r3, #0
 800d576:	d102      	bne.n	800d57e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d578:	2301      	movs	r3, #1
 800d57a:	60fb      	str	r3, [r7, #12]
 800d57c:	e001      	b.n	800d582 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d57e:	2300      	movs	r3, #0
 800d580:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d582:	f7ff fa17 	bl	800c9b4 <vPortExitCritical>

	return xReturn;
 800d586:	68fb      	ldr	r3, [r7, #12]
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3710      	adds	r7, #16
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b084      	sub	sp, #16
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d598:	f7ff f9dc 	bl	800c954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d102      	bne.n	800d5ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	60fb      	str	r3, [r7, #12]
 800d5ac:	e001      	b.n	800d5b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5b2:	f7ff f9ff 	bl	800c9b4 <vPortExitCritical>

	return xReturn;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3710      	adds	r7, #16
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b085      	sub	sp, #20
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	60fb      	str	r3, [r7, #12]
 800d5ce:	e014      	b.n	800d5fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d5d0:	4a0f      	ldr	r2, [pc, #60]	; (800d610 <vQueueAddToRegistry+0x50>)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d10b      	bne.n	800d5f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d5dc:	490c      	ldr	r1, [pc, #48]	; (800d610 <vQueueAddToRegistry+0x50>)
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	683a      	ldr	r2, [r7, #0]
 800d5e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d5e6:	4a0a      	ldr	r2, [pc, #40]	; (800d610 <vQueueAddToRegistry+0x50>)
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	00db      	lsls	r3, r3, #3
 800d5ec:	4413      	add	r3, r2
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d5f2:	e006      	b.n	800d602 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	60fb      	str	r3, [r7, #12]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2b07      	cmp	r3, #7
 800d5fe:	d9e7      	bls.n	800d5d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d600:	bf00      	nop
 800d602:	bf00      	nop
 800d604:	3714      	adds	r7, #20
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop
 800d610:	24004d2c 	.word	0x24004d2c

0800d614 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d614:	b580      	push	{r7, lr}
 800d616:	b086      	sub	sp, #24
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d624:	f7ff f996 	bl	800c954 <vPortEnterCritical>
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d62e:	b25b      	sxtb	r3, r3
 800d630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d634:	d103      	bne.n	800d63e <vQueueWaitForMessageRestricted+0x2a>
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	2200      	movs	r2, #0
 800d63a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d644:	b25b      	sxtb	r3, r3
 800d646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d64a:	d103      	bne.n	800d654 <vQueueWaitForMessageRestricted+0x40>
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	2200      	movs	r2, #0
 800d650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d654:	f7ff f9ae 	bl	800c9b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d106      	bne.n	800d66e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	3324      	adds	r3, #36	; 0x24
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	68b9      	ldr	r1, [r7, #8]
 800d668:	4618      	mov	r0, r3
 800d66a:	f000 fc61 	bl	800df30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d66e:	6978      	ldr	r0, [r7, #20]
 800d670:	f7ff ff26 	bl	800d4c0 <prvUnlockQueue>
	}
 800d674:	bf00      	nop
 800d676:	3718      	adds	r7, #24
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b08e      	sub	sp, #56	; 0x38
 800d680:	af04      	add	r7, sp, #16
 800d682:	60f8      	str	r0, [r7, #12]
 800d684:	60b9      	str	r1, [r7, #8]
 800d686:	607a      	str	r2, [r7, #4]
 800d688:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d10a      	bne.n	800d6a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d694:	f383 8811 	msr	BASEPRI, r3
 800d698:	f3bf 8f6f 	isb	sy
 800d69c:	f3bf 8f4f 	dsb	sy
 800d6a0:	623b      	str	r3, [r7, #32]
}
 800d6a2:	bf00      	nop
 800d6a4:	e7fe      	b.n	800d6a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d10a      	bne.n	800d6c2 <xTaskCreateStatic+0x46>
	__asm volatile
 800d6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b0:	f383 8811 	msr	BASEPRI, r3
 800d6b4:	f3bf 8f6f 	isb	sy
 800d6b8:	f3bf 8f4f 	dsb	sy
 800d6bc:	61fb      	str	r3, [r7, #28]
}
 800d6be:	bf00      	nop
 800d6c0:	e7fe      	b.n	800d6c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d6c2:	23a8      	movs	r3, #168	; 0xa8
 800d6c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	2ba8      	cmp	r3, #168	; 0xa8
 800d6ca:	d00a      	beq.n	800d6e2 <xTaskCreateStatic+0x66>
	__asm volatile
 800d6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	61bb      	str	r3, [r7, #24]
}
 800d6de:	bf00      	nop
 800d6e0:	e7fe      	b.n	800d6e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d6e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d01e      	beq.n	800d728 <xTaskCreateStatic+0xac>
 800d6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d01b      	beq.n	800d728 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fc:	2202      	movs	r2, #2
 800d6fe:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d702:	2300      	movs	r3, #0
 800d704:	9303      	str	r3, [sp, #12]
 800d706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d708:	9302      	str	r3, [sp, #8]
 800d70a:	f107 0314 	add.w	r3, r7, #20
 800d70e:	9301      	str	r3, [sp, #4]
 800d710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d712:	9300      	str	r3, [sp, #0]
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	68b9      	ldr	r1, [r7, #8]
 800d71a:	68f8      	ldr	r0, [r7, #12]
 800d71c:	f000 f850 	bl	800d7c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d722:	f000 f8f3 	bl	800d90c <prvAddNewTaskToReadyList>
 800d726:	e001      	b.n	800d72c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d728:	2300      	movs	r3, #0
 800d72a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d72c:	697b      	ldr	r3, [r7, #20]
	}
 800d72e:	4618      	mov	r0, r3
 800d730:	3728      	adds	r7, #40	; 0x28
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}

0800d736 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d736:	b580      	push	{r7, lr}
 800d738:	b08c      	sub	sp, #48	; 0x30
 800d73a:	af04      	add	r7, sp, #16
 800d73c:	60f8      	str	r0, [r7, #12]
 800d73e:	60b9      	str	r1, [r7, #8]
 800d740:	603b      	str	r3, [r7, #0]
 800d742:	4613      	mov	r3, r2
 800d744:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d746:	88fb      	ldrh	r3, [r7, #6]
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fe fd38 	bl	800c1c0 <pvPortMalloc>
 800d750:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d00e      	beq.n	800d776 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d758:	20a8      	movs	r0, #168	; 0xa8
 800d75a:	f7fe fd31 	bl	800c1c0 <pvPortMalloc>
 800d75e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d003      	beq.n	800d76e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	697a      	ldr	r2, [r7, #20]
 800d76a:	631a      	str	r2, [r3, #48]	; 0x30
 800d76c:	e005      	b.n	800d77a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d76e:	6978      	ldr	r0, [r7, #20]
 800d770:	f7fe fdf2 	bl	800c358 <vPortFree>
 800d774:	e001      	b.n	800d77a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d776:	2300      	movs	r3, #0
 800d778:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d017      	beq.n	800d7b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	2200      	movs	r2, #0
 800d784:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d788:	88fa      	ldrh	r2, [r7, #6]
 800d78a:	2300      	movs	r3, #0
 800d78c:	9303      	str	r3, [sp, #12]
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	9302      	str	r3, [sp, #8]
 800d792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d794:	9301      	str	r3, [sp, #4]
 800d796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d798:	9300      	str	r3, [sp, #0]
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	68b9      	ldr	r1, [r7, #8]
 800d79e:	68f8      	ldr	r0, [r7, #12]
 800d7a0:	f000 f80e 	bl	800d7c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d7a4:	69f8      	ldr	r0, [r7, #28]
 800d7a6:	f000 f8b1 	bl	800d90c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	61bb      	str	r3, [r7, #24]
 800d7ae:	e002      	b.n	800d7b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d7b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d7b6:	69bb      	ldr	r3, [r7, #24]
	}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3720      	adds	r7, #32
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b088      	sub	sp, #32
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	60b9      	str	r1, [r7, #8]
 800d7ca:	607a      	str	r2, [r7, #4]
 800d7cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	21a5      	movs	r1, #165	; 0xa5
 800d7da:	f002 f827 	bl	800f82c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7e2:	6879      	ldr	r1, [r7, #4]
 800d7e4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d7e8:	440b      	add	r3, r1
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	4413      	add	r3, r2
 800d7ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	f023 0307 	bic.w	r3, r3, #7
 800d7f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	f003 0307 	and.w	r3, r3, #7
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d00a      	beq.n	800d818 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d806:	f383 8811 	msr	BASEPRI, r3
 800d80a:	f3bf 8f6f 	isb	sy
 800d80e:	f3bf 8f4f 	dsb	sy
 800d812:	617b      	str	r3, [r7, #20]
}
 800d814:	bf00      	nop
 800d816:	e7fe      	b.n	800d816 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d01f      	beq.n	800d85e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d81e:	2300      	movs	r3, #0
 800d820:	61fb      	str	r3, [r7, #28]
 800d822:	e012      	b.n	800d84a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d824:	68ba      	ldr	r2, [r7, #8]
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	4413      	add	r3, r2
 800d82a:	7819      	ldrb	r1, [r3, #0]
 800d82c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	4413      	add	r3, r2
 800d832:	3334      	adds	r3, #52	; 0x34
 800d834:	460a      	mov	r2, r1
 800d836:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d838:	68ba      	ldr	r2, [r7, #8]
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	4413      	add	r3, r2
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d006      	beq.n	800d852 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	3301      	adds	r3, #1
 800d848:	61fb      	str	r3, [r7, #28]
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	2b0f      	cmp	r3, #15
 800d84e:	d9e9      	bls.n	800d824 <prvInitialiseNewTask+0x64>
 800d850:	e000      	b.n	800d854 <prvInitialiseNewTask+0x94>
			{
				break;
 800d852:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d856:	2200      	movs	r2, #0
 800d858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d85c:	e003      	b.n	800d866 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d860:	2200      	movs	r2, #0
 800d862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d868:	2b37      	cmp	r3, #55	; 0x37
 800d86a:	d901      	bls.n	800d870 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d86c:	2337      	movs	r3, #55	; 0x37
 800d86e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d874:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d87a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87e:	2200      	movs	r2, #0
 800d880:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d884:	3304      	adds	r3, #4
 800d886:	4618      	mov	r0, r3
 800d888:	f7fe fea4 	bl	800c5d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88e:	3318      	adds	r3, #24
 800d890:	4618      	mov	r0, r3
 800d892:	f7fe fe9f 	bl	800c5d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d89a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8be:	3354      	adds	r3, #84	; 0x54
 800d8c0:	224c      	movs	r2, #76	; 0x4c
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f001 ffb1 	bl	800f82c <memset>
 800d8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8cc:	4a0c      	ldr	r2, [pc, #48]	; (800d900 <prvInitialiseNewTask+0x140>)
 800d8ce:	659a      	str	r2, [r3, #88]	; 0x58
 800d8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d2:	4a0c      	ldr	r2, [pc, #48]	; (800d904 <prvInitialiseNewTask+0x144>)
 800d8d4:	65da      	str	r2, [r3, #92]	; 0x5c
 800d8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d8:	4a0b      	ldr	r2, [pc, #44]	; (800d908 <prvInitialiseNewTask+0x148>)
 800d8da:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d8dc:	683a      	ldr	r2, [r7, #0]
 800d8de:	68f9      	ldr	r1, [r7, #12]
 800d8e0:	69b8      	ldr	r0, [r7, #24]
 800d8e2:	f7fe ff0b 	bl	800c6fc <pxPortInitialiseStack>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d002      	beq.n	800d8f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8f8:	bf00      	nop
 800d8fa:	3720      	adds	r7, #32
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}
 800d900:	24005398 	.word	0x24005398
 800d904:	24005400 	.word	0x24005400
 800d908:	24005468 	.word	0x24005468

0800d90c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d914:	f7ff f81e 	bl	800c954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d918:	4b2d      	ldr	r3, [pc, #180]	; (800d9d0 <prvAddNewTaskToReadyList+0xc4>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	3301      	adds	r3, #1
 800d91e:	4a2c      	ldr	r2, [pc, #176]	; (800d9d0 <prvAddNewTaskToReadyList+0xc4>)
 800d920:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d922:	4b2c      	ldr	r3, [pc, #176]	; (800d9d4 <prvAddNewTaskToReadyList+0xc8>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d109      	bne.n	800d93e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d92a:	4a2a      	ldr	r2, [pc, #168]	; (800d9d4 <prvAddNewTaskToReadyList+0xc8>)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d930:	4b27      	ldr	r3, [pc, #156]	; (800d9d0 <prvAddNewTaskToReadyList+0xc4>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2b01      	cmp	r3, #1
 800d936:	d110      	bne.n	800d95a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d938:	f000 fc26 	bl	800e188 <prvInitialiseTaskLists>
 800d93c:	e00d      	b.n	800d95a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d93e:	4b26      	ldr	r3, [pc, #152]	; (800d9d8 <prvAddNewTaskToReadyList+0xcc>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d109      	bne.n	800d95a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d946:	4b23      	ldr	r3, [pc, #140]	; (800d9d4 <prvAddNewTaskToReadyList+0xc8>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d950:	429a      	cmp	r2, r3
 800d952:	d802      	bhi.n	800d95a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d954:	4a1f      	ldr	r2, [pc, #124]	; (800d9d4 <prvAddNewTaskToReadyList+0xc8>)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d95a:	4b20      	ldr	r3, [pc, #128]	; (800d9dc <prvAddNewTaskToReadyList+0xd0>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	3301      	adds	r3, #1
 800d960:	4a1e      	ldr	r2, [pc, #120]	; (800d9dc <prvAddNewTaskToReadyList+0xd0>)
 800d962:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d964:	4b1d      	ldr	r3, [pc, #116]	; (800d9dc <prvAddNewTaskToReadyList+0xd0>)
 800d966:	681a      	ldr	r2, [r3, #0]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d970:	4b1b      	ldr	r3, [pc, #108]	; (800d9e0 <prvAddNewTaskToReadyList+0xd4>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	429a      	cmp	r2, r3
 800d976:	d903      	bls.n	800d980 <prvAddNewTaskToReadyList+0x74>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d97c:	4a18      	ldr	r2, [pc, #96]	; (800d9e0 <prvAddNewTaskToReadyList+0xd4>)
 800d97e:	6013      	str	r3, [r2, #0]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d984:	4613      	mov	r3, r2
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	4413      	add	r3, r2
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	4a15      	ldr	r2, [pc, #84]	; (800d9e4 <prvAddNewTaskToReadyList+0xd8>)
 800d98e:	441a      	add	r2, r3
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	3304      	adds	r3, #4
 800d994:	4619      	mov	r1, r3
 800d996:	4610      	mov	r0, r2
 800d998:	f7fe fe29 	bl	800c5ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d99c:	f7ff f80a 	bl	800c9b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d9a0:	4b0d      	ldr	r3, [pc, #52]	; (800d9d8 <prvAddNewTaskToReadyList+0xcc>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d00e      	beq.n	800d9c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d9a8:	4b0a      	ldr	r3, [pc, #40]	; (800d9d4 <prvAddNewTaskToReadyList+0xc8>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d207      	bcs.n	800d9c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d9b6:	4b0c      	ldr	r3, [pc, #48]	; (800d9e8 <prvAddNewTaskToReadyList+0xdc>)
 800d9b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9bc:	601a      	str	r2, [r3, #0]
 800d9be:	f3bf 8f4f 	dsb	sy
 800d9c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9c6:	bf00      	nop
 800d9c8:	3708      	adds	r7, #8
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	24005240 	.word	0x24005240
 800d9d4:	24004d6c 	.word	0x24004d6c
 800d9d8:	2400524c 	.word	0x2400524c
 800d9dc:	2400525c 	.word	0x2400525c
 800d9e0:	24005248 	.word	0x24005248
 800d9e4:	24004d70 	.word	0x24004d70
 800d9e8:	e000ed04 	.word	0xe000ed04

0800d9ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d017      	beq.n	800da2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d9fe:	4b13      	ldr	r3, [pc, #76]	; (800da4c <vTaskDelay+0x60>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d00a      	beq.n	800da1c <vTaskDelay+0x30>
	__asm volatile
 800da06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0a:	f383 8811 	msr	BASEPRI, r3
 800da0e:	f3bf 8f6f 	isb	sy
 800da12:	f3bf 8f4f 	dsb	sy
 800da16:	60bb      	str	r3, [r7, #8]
}
 800da18:	bf00      	nop
 800da1a:	e7fe      	b.n	800da1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800da1c:	f000 f88a 	bl	800db34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800da20:	2100      	movs	r1, #0
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 fcfe 	bl	800e424 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800da28:	f000 f892 	bl	800db50 <xTaskResumeAll>
 800da2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d107      	bne.n	800da44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800da34:	4b06      	ldr	r3, [pc, #24]	; (800da50 <vTaskDelay+0x64>)
 800da36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da3a:	601a      	str	r2, [r3, #0]
 800da3c:	f3bf 8f4f 	dsb	sy
 800da40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da44:	bf00      	nop
 800da46:	3710      	adds	r7, #16
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	24005268 	.word	0x24005268
 800da50:	e000ed04 	.word	0xe000ed04

0800da54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b08a      	sub	sp, #40	; 0x28
 800da58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800da5a:	2300      	movs	r3, #0
 800da5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800da5e:	2300      	movs	r3, #0
 800da60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800da62:	463a      	mov	r2, r7
 800da64:	1d39      	adds	r1, r7, #4
 800da66:	f107 0308 	add.w	r3, r7, #8
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7fe fb74 	bl	800c158 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800da70:	6839      	ldr	r1, [r7, #0]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	9202      	str	r2, [sp, #8]
 800da78:	9301      	str	r3, [sp, #4]
 800da7a:	2300      	movs	r3, #0
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	2300      	movs	r3, #0
 800da80:	460a      	mov	r2, r1
 800da82:	4924      	ldr	r1, [pc, #144]	; (800db14 <vTaskStartScheduler+0xc0>)
 800da84:	4824      	ldr	r0, [pc, #144]	; (800db18 <vTaskStartScheduler+0xc4>)
 800da86:	f7ff fdf9 	bl	800d67c <xTaskCreateStatic>
 800da8a:	4603      	mov	r3, r0
 800da8c:	4a23      	ldr	r2, [pc, #140]	; (800db1c <vTaskStartScheduler+0xc8>)
 800da8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800da90:	4b22      	ldr	r3, [pc, #136]	; (800db1c <vTaskStartScheduler+0xc8>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d002      	beq.n	800da9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800da98:	2301      	movs	r3, #1
 800da9a:	617b      	str	r3, [r7, #20]
 800da9c:	e001      	b.n	800daa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800da9e:	2300      	movs	r3, #0
 800daa0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	d102      	bne.n	800daae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800daa8:	f000 fd10 	bl	800e4cc <xTimerCreateTimerTask>
 800daac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d11b      	bne.n	800daec <vTaskStartScheduler+0x98>
	__asm volatile
 800dab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab8:	f383 8811 	msr	BASEPRI, r3
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	613b      	str	r3, [r7, #16]
}
 800dac6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dac8:	4b15      	ldr	r3, [pc, #84]	; (800db20 <vTaskStartScheduler+0xcc>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	3354      	adds	r3, #84	; 0x54
 800dace:	4a15      	ldr	r2, [pc, #84]	; (800db24 <vTaskStartScheduler+0xd0>)
 800dad0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dad2:	4b15      	ldr	r3, [pc, #84]	; (800db28 <vTaskStartScheduler+0xd4>)
 800dad4:	f04f 32ff 	mov.w	r2, #4294967295
 800dad8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dada:	4b14      	ldr	r3, [pc, #80]	; (800db2c <vTaskStartScheduler+0xd8>)
 800dadc:	2201      	movs	r2, #1
 800dade:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dae0:	4b13      	ldr	r3, [pc, #76]	; (800db30 <vTaskStartScheduler+0xdc>)
 800dae2:	2200      	movs	r2, #0
 800dae4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dae6:	f7fe fe93 	bl	800c810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800daea:	e00e      	b.n	800db0a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf2:	d10a      	bne.n	800db0a <vTaskStartScheduler+0xb6>
	__asm volatile
 800daf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf8:	f383 8811 	msr	BASEPRI, r3
 800dafc:	f3bf 8f6f 	isb	sy
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	60fb      	str	r3, [r7, #12]
}
 800db06:	bf00      	nop
 800db08:	e7fe      	b.n	800db08 <vTaskStartScheduler+0xb4>
}
 800db0a:	bf00      	nop
 800db0c:	3718      	adds	r7, #24
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	08012fcc 	.word	0x08012fcc
 800db18:	0800e159 	.word	0x0800e159
 800db1c:	24005264 	.word	0x24005264
 800db20:	24004d6c 	.word	0x24004d6c
 800db24:	24000074 	.word	0x24000074
 800db28:	24005260 	.word	0x24005260
 800db2c:	2400524c 	.word	0x2400524c
 800db30:	24005244 	.word	0x24005244

0800db34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800db34:	b480      	push	{r7}
 800db36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800db38:	4b04      	ldr	r3, [pc, #16]	; (800db4c <vTaskSuspendAll+0x18>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	3301      	adds	r3, #1
 800db3e:	4a03      	ldr	r2, [pc, #12]	; (800db4c <vTaskSuspendAll+0x18>)
 800db40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800db42:	bf00      	nop
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr
 800db4c:	24005268 	.word	0x24005268

0800db50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800db56:	2300      	movs	r3, #0
 800db58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800db5a:	2300      	movs	r3, #0
 800db5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800db5e:	4b42      	ldr	r3, [pc, #264]	; (800dc68 <xTaskResumeAll+0x118>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d10a      	bne.n	800db7c <xTaskResumeAll+0x2c>
	__asm volatile
 800db66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6a:	f383 8811 	msr	BASEPRI, r3
 800db6e:	f3bf 8f6f 	isb	sy
 800db72:	f3bf 8f4f 	dsb	sy
 800db76:	603b      	str	r3, [r7, #0]
}
 800db78:	bf00      	nop
 800db7a:	e7fe      	b.n	800db7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800db7c:	f7fe feea 	bl	800c954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800db80:	4b39      	ldr	r3, [pc, #228]	; (800dc68 <xTaskResumeAll+0x118>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	3b01      	subs	r3, #1
 800db86:	4a38      	ldr	r2, [pc, #224]	; (800dc68 <xTaskResumeAll+0x118>)
 800db88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db8a:	4b37      	ldr	r3, [pc, #220]	; (800dc68 <xTaskResumeAll+0x118>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d162      	bne.n	800dc58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800db92:	4b36      	ldr	r3, [pc, #216]	; (800dc6c <xTaskResumeAll+0x11c>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d05e      	beq.n	800dc58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db9a:	e02f      	b.n	800dbfc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db9c:	4b34      	ldr	r3, [pc, #208]	; (800dc70 <xTaskResumeAll+0x120>)
 800db9e:	68db      	ldr	r3, [r3, #12]
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	3318      	adds	r3, #24
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7fe fd7d 	bl	800c6a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	3304      	adds	r3, #4
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7fe fd78 	bl	800c6a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbbc:	4b2d      	ldr	r3, [pc, #180]	; (800dc74 <xTaskResumeAll+0x124>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d903      	bls.n	800dbcc <xTaskResumeAll+0x7c>
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc8:	4a2a      	ldr	r2, [pc, #168]	; (800dc74 <xTaskResumeAll+0x124>)
 800dbca:	6013      	str	r3, [r2, #0]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	4413      	add	r3, r2
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	4a27      	ldr	r2, [pc, #156]	; (800dc78 <xTaskResumeAll+0x128>)
 800dbda:	441a      	add	r2, r3
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	3304      	adds	r3, #4
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	4610      	mov	r0, r2
 800dbe4:	f7fe fd03 	bl	800c5ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbec:	4b23      	ldr	r3, [pc, #140]	; (800dc7c <xTaskResumeAll+0x12c>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d302      	bcc.n	800dbfc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dbf6:	4b22      	ldr	r3, [pc, #136]	; (800dc80 <xTaskResumeAll+0x130>)
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dbfc:	4b1c      	ldr	r3, [pc, #112]	; (800dc70 <xTaskResumeAll+0x120>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d1cb      	bne.n	800db9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d001      	beq.n	800dc0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dc0a:	f000 fb5f 	bl	800e2cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dc0e:	4b1d      	ldr	r3, [pc, #116]	; (800dc84 <xTaskResumeAll+0x134>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d010      	beq.n	800dc3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dc1a:	f000 f847 	bl	800dcac <xTaskIncrementTick>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d002      	beq.n	800dc2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dc24:	4b16      	ldr	r3, [pc, #88]	; (800dc80 <xTaskResumeAll+0x130>)
 800dc26:	2201      	movs	r2, #1
 800dc28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	3b01      	subs	r3, #1
 800dc2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d1f1      	bne.n	800dc1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dc36:	4b13      	ldr	r3, [pc, #76]	; (800dc84 <xTaskResumeAll+0x134>)
 800dc38:	2200      	movs	r2, #0
 800dc3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dc3c:	4b10      	ldr	r3, [pc, #64]	; (800dc80 <xTaskResumeAll+0x130>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d009      	beq.n	800dc58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dc44:	2301      	movs	r3, #1
 800dc46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dc48:	4b0f      	ldr	r3, [pc, #60]	; (800dc88 <xTaskResumeAll+0x138>)
 800dc4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc4e:	601a      	str	r2, [r3, #0]
 800dc50:	f3bf 8f4f 	dsb	sy
 800dc54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc58:	f7fe feac 	bl	800c9b4 <vPortExitCritical>

	return xAlreadyYielded;
 800dc5c:	68bb      	ldr	r3, [r7, #8]
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3710      	adds	r7, #16
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	24005268 	.word	0x24005268
 800dc6c:	24005240 	.word	0x24005240
 800dc70:	24005200 	.word	0x24005200
 800dc74:	24005248 	.word	0x24005248
 800dc78:	24004d70 	.word	0x24004d70
 800dc7c:	24004d6c 	.word	0x24004d6c
 800dc80:	24005254 	.word	0x24005254
 800dc84:	24005250 	.word	0x24005250
 800dc88:	e000ed04 	.word	0xe000ed04

0800dc8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dc92:	4b05      	ldr	r3, [pc, #20]	; (800dca8 <xTaskGetTickCount+0x1c>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dc98:	687b      	ldr	r3, [r7, #4]
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	370c      	adds	r7, #12
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca4:	4770      	bx	lr
 800dca6:	bf00      	nop
 800dca8:	24005244 	.word	0x24005244

0800dcac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b086      	sub	sp, #24
 800dcb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcb6:	4b4f      	ldr	r3, [pc, #316]	; (800ddf4 <xTaskIncrementTick+0x148>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	f040 808f 	bne.w	800ddde <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dcc0:	4b4d      	ldr	r3, [pc, #308]	; (800ddf8 <xTaskIncrementTick+0x14c>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dcc8:	4a4b      	ldr	r2, [pc, #300]	; (800ddf8 <xTaskIncrementTick+0x14c>)
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d120      	bne.n	800dd16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dcd4:	4b49      	ldr	r3, [pc, #292]	; (800ddfc <xTaskIncrementTick+0x150>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00a      	beq.n	800dcf4 <xTaskIncrementTick+0x48>
	__asm volatile
 800dcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce2:	f383 8811 	msr	BASEPRI, r3
 800dce6:	f3bf 8f6f 	isb	sy
 800dcea:	f3bf 8f4f 	dsb	sy
 800dcee:	603b      	str	r3, [r7, #0]
}
 800dcf0:	bf00      	nop
 800dcf2:	e7fe      	b.n	800dcf2 <xTaskIncrementTick+0x46>
 800dcf4:	4b41      	ldr	r3, [pc, #260]	; (800ddfc <xTaskIncrementTick+0x150>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	60fb      	str	r3, [r7, #12]
 800dcfa:	4b41      	ldr	r3, [pc, #260]	; (800de00 <xTaskIncrementTick+0x154>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	4a3f      	ldr	r2, [pc, #252]	; (800ddfc <xTaskIncrementTick+0x150>)
 800dd00:	6013      	str	r3, [r2, #0]
 800dd02:	4a3f      	ldr	r2, [pc, #252]	; (800de00 <xTaskIncrementTick+0x154>)
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	6013      	str	r3, [r2, #0]
 800dd08:	4b3e      	ldr	r3, [pc, #248]	; (800de04 <xTaskIncrementTick+0x158>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	4a3d      	ldr	r2, [pc, #244]	; (800de04 <xTaskIncrementTick+0x158>)
 800dd10:	6013      	str	r3, [r2, #0]
 800dd12:	f000 fadb 	bl	800e2cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dd16:	4b3c      	ldr	r3, [pc, #240]	; (800de08 <xTaskIncrementTick+0x15c>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	693a      	ldr	r2, [r7, #16]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d349      	bcc.n	800ddb4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd20:	4b36      	ldr	r3, [pc, #216]	; (800ddfc <xTaskIncrementTick+0x150>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d104      	bne.n	800dd34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd2a:	4b37      	ldr	r3, [pc, #220]	; (800de08 <xTaskIncrementTick+0x15c>)
 800dd2c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd30:	601a      	str	r2, [r3, #0]
					break;
 800dd32:	e03f      	b.n	800ddb4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd34:	4b31      	ldr	r3, [pc, #196]	; (800ddfc <xTaskIncrementTick+0x150>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	68db      	ldr	r3, [r3, #12]
 800dd3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dd44:	693a      	ldr	r2, [r7, #16]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d203      	bcs.n	800dd54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dd4c:	4a2e      	ldr	r2, [pc, #184]	; (800de08 <xTaskIncrementTick+0x15c>)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dd52:	e02f      	b.n	800ddb4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	3304      	adds	r3, #4
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7fe fca5 	bl	800c6a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d004      	beq.n	800dd70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	3318      	adds	r3, #24
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7fe fc9c 	bl	800c6a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd74:	4b25      	ldr	r3, [pc, #148]	; (800de0c <xTaskIncrementTick+0x160>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d903      	bls.n	800dd84 <xTaskIncrementTick+0xd8>
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd80:	4a22      	ldr	r2, [pc, #136]	; (800de0c <xTaskIncrementTick+0x160>)
 800dd82:	6013      	str	r3, [r2, #0]
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd88:	4613      	mov	r3, r2
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	4413      	add	r3, r2
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	4a1f      	ldr	r2, [pc, #124]	; (800de10 <xTaskIncrementTick+0x164>)
 800dd92:	441a      	add	r2, r3
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	3304      	adds	r3, #4
 800dd98:	4619      	mov	r1, r3
 800dd9a:	4610      	mov	r0, r2
 800dd9c:	f7fe fc27 	bl	800c5ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dda4:	4b1b      	ldr	r3, [pc, #108]	; (800de14 <xTaskIncrementTick+0x168>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d3b8      	bcc.n	800dd20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddb2:	e7b5      	b.n	800dd20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ddb4:	4b17      	ldr	r3, [pc, #92]	; (800de14 <xTaskIncrementTick+0x168>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddba:	4915      	ldr	r1, [pc, #84]	; (800de10 <xTaskIncrementTick+0x164>)
 800ddbc:	4613      	mov	r3, r2
 800ddbe:	009b      	lsls	r3, r3, #2
 800ddc0:	4413      	add	r3, r2
 800ddc2:	009b      	lsls	r3, r3, #2
 800ddc4:	440b      	add	r3, r1
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2b01      	cmp	r3, #1
 800ddca:	d901      	bls.n	800ddd0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ddcc:	2301      	movs	r3, #1
 800ddce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ddd0:	4b11      	ldr	r3, [pc, #68]	; (800de18 <xTaskIncrementTick+0x16c>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d007      	beq.n	800dde8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ddd8:	2301      	movs	r3, #1
 800ddda:	617b      	str	r3, [r7, #20]
 800dddc:	e004      	b.n	800dde8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ddde:	4b0f      	ldr	r3, [pc, #60]	; (800de1c <xTaskIncrementTick+0x170>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	3301      	adds	r3, #1
 800dde4:	4a0d      	ldr	r2, [pc, #52]	; (800de1c <xTaskIncrementTick+0x170>)
 800dde6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dde8:	697b      	ldr	r3, [r7, #20]
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3718      	adds	r7, #24
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	24005268 	.word	0x24005268
 800ddf8:	24005244 	.word	0x24005244
 800ddfc:	240051f8 	.word	0x240051f8
 800de00:	240051fc 	.word	0x240051fc
 800de04:	24005258 	.word	0x24005258
 800de08:	24005260 	.word	0x24005260
 800de0c:	24005248 	.word	0x24005248
 800de10:	24004d70 	.word	0x24004d70
 800de14:	24004d6c 	.word	0x24004d6c
 800de18:	24005254 	.word	0x24005254
 800de1c:	24005250 	.word	0x24005250

0800de20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800de20:	b480      	push	{r7}
 800de22:	b085      	sub	sp, #20
 800de24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800de26:	4b2a      	ldr	r3, [pc, #168]	; (800ded0 <vTaskSwitchContext+0xb0>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d003      	beq.n	800de36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800de2e:	4b29      	ldr	r3, [pc, #164]	; (800ded4 <vTaskSwitchContext+0xb4>)
 800de30:	2201      	movs	r2, #1
 800de32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800de34:	e046      	b.n	800dec4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800de36:	4b27      	ldr	r3, [pc, #156]	; (800ded4 <vTaskSwitchContext+0xb4>)
 800de38:	2200      	movs	r2, #0
 800de3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de3c:	4b26      	ldr	r3, [pc, #152]	; (800ded8 <vTaskSwitchContext+0xb8>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	60fb      	str	r3, [r7, #12]
 800de42:	e010      	b.n	800de66 <vTaskSwitchContext+0x46>
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d10a      	bne.n	800de60 <vTaskSwitchContext+0x40>
	__asm volatile
 800de4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de4e:	f383 8811 	msr	BASEPRI, r3
 800de52:	f3bf 8f6f 	isb	sy
 800de56:	f3bf 8f4f 	dsb	sy
 800de5a:	607b      	str	r3, [r7, #4]
}
 800de5c:	bf00      	nop
 800de5e:	e7fe      	b.n	800de5e <vTaskSwitchContext+0x3e>
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	3b01      	subs	r3, #1
 800de64:	60fb      	str	r3, [r7, #12]
 800de66:	491d      	ldr	r1, [pc, #116]	; (800dedc <vTaskSwitchContext+0xbc>)
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	4613      	mov	r3, r2
 800de6c:	009b      	lsls	r3, r3, #2
 800de6e:	4413      	add	r3, r2
 800de70:	009b      	lsls	r3, r3, #2
 800de72:	440b      	add	r3, r1
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d0e4      	beq.n	800de44 <vTaskSwitchContext+0x24>
 800de7a:	68fa      	ldr	r2, [r7, #12]
 800de7c:	4613      	mov	r3, r2
 800de7e:	009b      	lsls	r3, r3, #2
 800de80:	4413      	add	r3, r2
 800de82:	009b      	lsls	r3, r3, #2
 800de84:	4a15      	ldr	r2, [pc, #84]	; (800dedc <vTaskSwitchContext+0xbc>)
 800de86:	4413      	add	r3, r2
 800de88:	60bb      	str	r3, [r7, #8]
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	685a      	ldr	r2, [r3, #4]
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	605a      	str	r2, [r3, #4]
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	685a      	ldr	r2, [r3, #4]
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	3308      	adds	r3, #8
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d104      	bne.n	800deaa <vTaskSwitchContext+0x8a>
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	685a      	ldr	r2, [r3, #4]
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	605a      	str	r2, [r3, #4]
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	68db      	ldr	r3, [r3, #12]
 800deb0:	4a0b      	ldr	r2, [pc, #44]	; (800dee0 <vTaskSwitchContext+0xc0>)
 800deb2:	6013      	str	r3, [r2, #0]
 800deb4:	4a08      	ldr	r2, [pc, #32]	; (800ded8 <vTaskSwitchContext+0xb8>)
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800deba:	4b09      	ldr	r3, [pc, #36]	; (800dee0 <vTaskSwitchContext+0xc0>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	3354      	adds	r3, #84	; 0x54
 800dec0:	4a08      	ldr	r2, [pc, #32]	; (800dee4 <vTaskSwitchContext+0xc4>)
 800dec2:	6013      	str	r3, [r2, #0]
}
 800dec4:	bf00      	nop
 800dec6:	3714      	adds	r7, #20
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr
 800ded0:	24005268 	.word	0x24005268
 800ded4:	24005254 	.word	0x24005254
 800ded8:	24005248 	.word	0x24005248
 800dedc:	24004d70 	.word	0x24004d70
 800dee0:	24004d6c 	.word	0x24004d6c
 800dee4:	24000074 	.word	0x24000074

0800dee8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d10a      	bne.n	800df0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800def8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defc:	f383 8811 	msr	BASEPRI, r3
 800df00:	f3bf 8f6f 	isb	sy
 800df04:	f3bf 8f4f 	dsb	sy
 800df08:	60fb      	str	r3, [r7, #12]
}
 800df0a:	bf00      	nop
 800df0c:	e7fe      	b.n	800df0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df0e:	4b07      	ldr	r3, [pc, #28]	; (800df2c <vTaskPlaceOnEventList+0x44>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	3318      	adds	r3, #24
 800df14:	4619      	mov	r1, r3
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f7fe fb8d 	bl	800c636 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800df1c:	2101      	movs	r1, #1
 800df1e:	6838      	ldr	r0, [r7, #0]
 800df20:	f000 fa80 	bl	800e424 <prvAddCurrentTaskToDelayedList>
}
 800df24:	bf00      	nop
 800df26:	3710      	adds	r7, #16
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}
 800df2c:	24004d6c 	.word	0x24004d6c

0800df30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df30:	b580      	push	{r7, lr}
 800df32:	b086      	sub	sp, #24
 800df34:	af00      	add	r7, sp, #0
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	60b9      	str	r1, [r7, #8]
 800df3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d10a      	bne.n	800df58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800df42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df46:	f383 8811 	msr	BASEPRI, r3
 800df4a:	f3bf 8f6f 	isb	sy
 800df4e:	f3bf 8f4f 	dsb	sy
 800df52:	617b      	str	r3, [r7, #20]
}
 800df54:	bf00      	nop
 800df56:	e7fe      	b.n	800df56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df58:	4b0a      	ldr	r3, [pc, #40]	; (800df84 <vTaskPlaceOnEventListRestricted+0x54>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	3318      	adds	r3, #24
 800df5e:	4619      	mov	r1, r3
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	f7fe fb44 	bl	800c5ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d002      	beq.n	800df72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800df6c:	f04f 33ff 	mov.w	r3, #4294967295
 800df70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800df72:	6879      	ldr	r1, [r7, #4]
 800df74:	68b8      	ldr	r0, [r7, #8]
 800df76:	f000 fa55 	bl	800e424 <prvAddCurrentTaskToDelayedList>
	}
 800df7a:	bf00      	nop
 800df7c:	3718      	adds	r7, #24
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop
 800df84:	24004d6c 	.word	0x24004d6c

0800df88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b086      	sub	sp, #24
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	68db      	ldr	r3, [r3, #12]
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d10a      	bne.n	800dfb4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800df9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa2:	f383 8811 	msr	BASEPRI, r3
 800dfa6:	f3bf 8f6f 	isb	sy
 800dfaa:	f3bf 8f4f 	dsb	sy
 800dfae:	60fb      	str	r3, [r7, #12]
}
 800dfb0:	bf00      	nop
 800dfb2:	e7fe      	b.n	800dfb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	3318      	adds	r3, #24
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7fe fb75 	bl	800c6a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfbe:	4b1e      	ldr	r3, [pc, #120]	; (800e038 <xTaskRemoveFromEventList+0xb0>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d11d      	bne.n	800e002 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	3304      	adds	r3, #4
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fe fb6c 	bl	800c6a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfd4:	4b19      	ldr	r3, [pc, #100]	; (800e03c <xTaskRemoveFromEventList+0xb4>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d903      	bls.n	800dfe4 <xTaskRemoveFromEventList+0x5c>
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe0:	4a16      	ldr	r2, [pc, #88]	; (800e03c <xTaskRemoveFromEventList+0xb4>)
 800dfe2:	6013      	str	r3, [r2, #0]
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfe8:	4613      	mov	r3, r2
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	4413      	add	r3, r2
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	4a13      	ldr	r2, [pc, #76]	; (800e040 <xTaskRemoveFromEventList+0xb8>)
 800dff2:	441a      	add	r2, r3
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	3304      	adds	r3, #4
 800dff8:	4619      	mov	r1, r3
 800dffa:	4610      	mov	r0, r2
 800dffc:	f7fe faf7 	bl	800c5ee <vListInsertEnd>
 800e000:	e005      	b.n	800e00e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	3318      	adds	r3, #24
 800e006:	4619      	mov	r1, r3
 800e008:	480e      	ldr	r0, [pc, #56]	; (800e044 <xTaskRemoveFromEventList+0xbc>)
 800e00a:	f7fe faf0 	bl	800c5ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e012:	4b0d      	ldr	r3, [pc, #52]	; (800e048 <xTaskRemoveFromEventList+0xc0>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e018:	429a      	cmp	r2, r3
 800e01a:	d905      	bls.n	800e028 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e01c:	2301      	movs	r3, #1
 800e01e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e020:	4b0a      	ldr	r3, [pc, #40]	; (800e04c <xTaskRemoveFromEventList+0xc4>)
 800e022:	2201      	movs	r2, #1
 800e024:	601a      	str	r2, [r3, #0]
 800e026:	e001      	b.n	800e02c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e028:	2300      	movs	r3, #0
 800e02a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e02c:	697b      	ldr	r3, [r7, #20]
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3718      	adds	r7, #24
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}
 800e036:	bf00      	nop
 800e038:	24005268 	.word	0x24005268
 800e03c:	24005248 	.word	0x24005248
 800e040:	24004d70 	.word	0x24004d70
 800e044:	24005200 	.word	0x24005200
 800e048:	24004d6c 	.word	0x24004d6c
 800e04c:	24005254 	.word	0x24005254

0800e050 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e050:	b480      	push	{r7}
 800e052:	b083      	sub	sp, #12
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e058:	4b06      	ldr	r3, [pc, #24]	; (800e074 <vTaskInternalSetTimeOutState+0x24>)
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e060:	4b05      	ldr	r3, [pc, #20]	; (800e078 <vTaskInternalSetTimeOutState+0x28>)
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	605a      	str	r2, [r3, #4]
}
 800e068:	bf00      	nop
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr
 800e074:	24005258 	.word	0x24005258
 800e078:	24005244 	.word	0x24005244

0800e07c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b088      	sub	sp, #32
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d10a      	bne.n	800e0a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e090:	f383 8811 	msr	BASEPRI, r3
 800e094:	f3bf 8f6f 	isb	sy
 800e098:	f3bf 8f4f 	dsb	sy
 800e09c:	613b      	str	r3, [r7, #16]
}
 800e09e:	bf00      	nop
 800e0a0:	e7fe      	b.n	800e0a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d10a      	bne.n	800e0be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ac:	f383 8811 	msr	BASEPRI, r3
 800e0b0:	f3bf 8f6f 	isb	sy
 800e0b4:	f3bf 8f4f 	dsb	sy
 800e0b8:	60fb      	str	r3, [r7, #12]
}
 800e0ba:	bf00      	nop
 800e0bc:	e7fe      	b.n	800e0bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e0be:	f7fe fc49 	bl	800c954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e0c2:	4b1d      	ldr	r3, [pc, #116]	; (800e138 <xTaskCheckForTimeOut+0xbc>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	69ba      	ldr	r2, [r7, #24]
 800e0ce:	1ad3      	subs	r3, r2, r3
 800e0d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0da:	d102      	bne.n	800e0e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	61fb      	str	r3, [r7, #28]
 800e0e0:	e023      	b.n	800e12a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	4b15      	ldr	r3, [pc, #84]	; (800e13c <xTaskCheckForTimeOut+0xc0>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d007      	beq.n	800e0fe <xTaskCheckForTimeOut+0x82>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	69ba      	ldr	r2, [r7, #24]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d302      	bcc.n	800e0fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	61fb      	str	r3, [r7, #28]
 800e0fc:	e015      	b.n	800e12a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	697a      	ldr	r2, [r7, #20]
 800e104:	429a      	cmp	r2, r3
 800e106:	d20b      	bcs.n	800e120 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	1ad2      	subs	r2, r2, r3
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f7ff ff9b 	bl	800e050 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e11a:	2300      	movs	r3, #0
 800e11c:	61fb      	str	r3, [r7, #28]
 800e11e:	e004      	b.n	800e12a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	2200      	movs	r2, #0
 800e124:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e126:	2301      	movs	r3, #1
 800e128:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e12a:	f7fe fc43 	bl	800c9b4 <vPortExitCritical>

	return xReturn;
 800e12e:	69fb      	ldr	r3, [r7, #28]
}
 800e130:	4618      	mov	r0, r3
 800e132:	3720      	adds	r7, #32
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}
 800e138:	24005244 	.word	0x24005244
 800e13c:	24005258 	.word	0x24005258

0800e140 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e140:	b480      	push	{r7}
 800e142:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e144:	4b03      	ldr	r3, [pc, #12]	; (800e154 <vTaskMissedYield+0x14>)
 800e146:	2201      	movs	r2, #1
 800e148:	601a      	str	r2, [r3, #0]
}
 800e14a:	bf00      	nop
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr
 800e154:	24005254 	.word	0x24005254

0800e158 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b082      	sub	sp, #8
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e160:	f000 f852 	bl	800e208 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e164:	4b06      	ldr	r3, [pc, #24]	; (800e180 <prvIdleTask+0x28>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d9f9      	bls.n	800e160 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e16c:	4b05      	ldr	r3, [pc, #20]	; (800e184 <prvIdleTask+0x2c>)
 800e16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e172:	601a      	str	r2, [r3, #0]
 800e174:	f3bf 8f4f 	dsb	sy
 800e178:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e17c:	e7f0      	b.n	800e160 <prvIdleTask+0x8>
 800e17e:	bf00      	nop
 800e180:	24004d70 	.word	0x24004d70
 800e184:	e000ed04 	.word	0xe000ed04

0800e188 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e18e:	2300      	movs	r3, #0
 800e190:	607b      	str	r3, [r7, #4]
 800e192:	e00c      	b.n	800e1ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	4613      	mov	r3, r2
 800e198:	009b      	lsls	r3, r3, #2
 800e19a:	4413      	add	r3, r2
 800e19c:	009b      	lsls	r3, r3, #2
 800e19e:	4a12      	ldr	r2, [pc, #72]	; (800e1e8 <prvInitialiseTaskLists+0x60>)
 800e1a0:	4413      	add	r3, r2
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fe f9f6 	bl	800c594 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	607b      	str	r3, [r7, #4]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2b37      	cmp	r3, #55	; 0x37
 800e1b2:	d9ef      	bls.n	800e194 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e1b4:	480d      	ldr	r0, [pc, #52]	; (800e1ec <prvInitialiseTaskLists+0x64>)
 800e1b6:	f7fe f9ed 	bl	800c594 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e1ba:	480d      	ldr	r0, [pc, #52]	; (800e1f0 <prvInitialiseTaskLists+0x68>)
 800e1bc:	f7fe f9ea 	bl	800c594 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e1c0:	480c      	ldr	r0, [pc, #48]	; (800e1f4 <prvInitialiseTaskLists+0x6c>)
 800e1c2:	f7fe f9e7 	bl	800c594 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e1c6:	480c      	ldr	r0, [pc, #48]	; (800e1f8 <prvInitialiseTaskLists+0x70>)
 800e1c8:	f7fe f9e4 	bl	800c594 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e1cc:	480b      	ldr	r0, [pc, #44]	; (800e1fc <prvInitialiseTaskLists+0x74>)
 800e1ce:	f7fe f9e1 	bl	800c594 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e1d2:	4b0b      	ldr	r3, [pc, #44]	; (800e200 <prvInitialiseTaskLists+0x78>)
 800e1d4:	4a05      	ldr	r2, [pc, #20]	; (800e1ec <prvInitialiseTaskLists+0x64>)
 800e1d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e1d8:	4b0a      	ldr	r3, [pc, #40]	; (800e204 <prvInitialiseTaskLists+0x7c>)
 800e1da:	4a05      	ldr	r2, [pc, #20]	; (800e1f0 <prvInitialiseTaskLists+0x68>)
 800e1dc:	601a      	str	r2, [r3, #0]
}
 800e1de:	bf00      	nop
 800e1e0:	3708      	adds	r7, #8
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	24004d70 	.word	0x24004d70
 800e1ec:	240051d0 	.word	0x240051d0
 800e1f0:	240051e4 	.word	0x240051e4
 800e1f4:	24005200 	.word	0x24005200
 800e1f8:	24005214 	.word	0x24005214
 800e1fc:	2400522c 	.word	0x2400522c
 800e200:	240051f8 	.word	0x240051f8
 800e204:	240051fc 	.word	0x240051fc

0800e208 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e20e:	e019      	b.n	800e244 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e210:	f7fe fba0 	bl	800c954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e214:	4b10      	ldr	r3, [pc, #64]	; (800e258 <prvCheckTasksWaitingTermination+0x50>)
 800e216:	68db      	ldr	r3, [r3, #12]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	3304      	adds	r3, #4
 800e220:	4618      	mov	r0, r3
 800e222:	f7fe fa41 	bl	800c6a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e226:	4b0d      	ldr	r3, [pc, #52]	; (800e25c <prvCheckTasksWaitingTermination+0x54>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	3b01      	subs	r3, #1
 800e22c:	4a0b      	ldr	r2, [pc, #44]	; (800e25c <prvCheckTasksWaitingTermination+0x54>)
 800e22e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e230:	4b0b      	ldr	r3, [pc, #44]	; (800e260 <prvCheckTasksWaitingTermination+0x58>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	3b01      	subs	r3, #1
 800e236:	4a0a      	ldr	r2, [pc, #40]	; (800e260 <prvCheckTasksWaitingTermination+0x58>)
 800e238:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e23a:	f7fe fbbb 	bl	800c9b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f000 f810 	bl	800e264 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e244:	4b06      	ldr	r3, [pc, #24]	; (800e260 <prvCheckTasksWaitingTermination+0x58>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d1e1      	bne.n	800e210 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e24c:	bf00      	nop
 800e24e:	bf00      	nop
 800e250:	3708      	adds	r7, #8
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	24005214 	.word	0x24005214
 800e25c:	24005240 	.word	0x24005240
 800e260:	24005228 	.word	0x24005228

0800e264 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e264:	b580      	push	{r7, lr}
 800e266:	b084      	sub	sp, #16
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	3354      	adds	r3, #84	; 0x54
 800e270:	4618      	mov	r0, r3
 800e272:	f001 faf7 	bl	800f864 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d108      	bne.n	800e292 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e284:	4618      	mov	r0, r3
 800e286:	f7fe f867 	bl	800c358 <vPortFree>
				vPortFree( pxTCB );
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f7fe f864 	bl	800c358 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e290:	e018      	b.n	800e2c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d103      	bne.n	800e2a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f7fe f85b 	bl	800c358 <vPortFree>
	}
 800e2a2:	e00f      	b.n	800e2c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800e2aa:	2b02      	cmp	r3, #2
 800e2ac:	d00a      	beq.n	800e2c4 <prvDeleteTCB+0x60>
	__asm volatile
 800e2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b2:	f383 8811 	msr	BASEPRI, r3
 800e2b6:	f3bf 8f6f 	isb	sy
 800e2ba:	f3bf 8f4f 	dsb	sy
 800e2be:	60fb      	str	r3, [r7, #12]
}
 800e2c0:	bf00      	nop
 800e2c2:	e7fe      	b.n	800e2c2 <prvDeleteTCB+0x5e>
	}
 800e2c4:	bf00      	nop
 800e2c6:	3710      	adds	r7, #16
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2d2:	4b0c      	ldr	r3, [pc, #48]	; (800e304 <prvResetNextTaskUnblockTime+0x38>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d104      	bne.n	800e2e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e2dc:	4b0a      	ldr	r3, [pc, #40]	; (800e308 <prvResetNextTaskUnblockTime+0x3c>)
 800e2de:	f04f 32ff 	mov.w	r2, #4294967295
 800e2e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e2e4:	e008      	b.n	800e2f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2e6:	4b07      	ldr	r3, [pc, #28]	; (800e304 <prvResetNextTaskUnblockTime+0x38>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	68db      	ldr	r3, [r3, #12]
 800e2ec:	68db      	ldr	r3, [r3, #12]
 800e2ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	4a04      	ldr	r2, [pc, #16]	; (800e308 <prvResetNextTaskUnblockTime+0x3c>)
 800e2f6:	6013      	str	r3, [r2, #0]
}
 800e2f8:	bf00      	nop
 800e2fa:	370c      	adds	r7, #12
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e302:	4770      	bx	lr
 800e304:	240051f8 	.word	0x240051f8
 800e308:	24005260 	.word	0x24005260

0800e30c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e312:	4b0b      	ldr	r3, [pc, #44]	; (800e340 <xTaskGetSchedulerState+0x34>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d102      	bne.n	800e320 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e31a:	2301      	movs	r3, #1
 800e31c:	607b      	str	r3, [r7, #4]
 800e31e:	e008      	b.n	800e332 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e320:	4b08      	ldr	r3, [pc, #32]	; (800e344 <xTaskGetSchedulerState+0x38>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d102      	bne.n	800e32e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e328:	2302      	movs	r3, #2
 800e32a:	607b      	str	r3, [r7, #4]
 800e32c:	e001      	b.n	800e332 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e32e:	2300      	movs	r3, #0
 800e330:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e332:	687b      	ldr	r3, [r7, #4]
	}
 800e334:	4618      	mov	r0, r3
 800e336:	370c      	adds	r7, #12
 800e338:	46bd      	mov	sp, r7
 800e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33e:	4770      	bx	lr
 800e340:	2400524c 	.word	0x2400524c
 800e344:	24005268 	.word	0x24005268

0800e348 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b086      	sub	sp, #24
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e354:	2300      	movs	r3, #0
 800e356:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d056      	beq.n	800e40c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e35e:	4b2e      	ldr	r3, [pc, #184]	; (800e418 <xTaskPriorityDisinherit+0xd0>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	693a      	ldr	r2, [r7, #16]
 800e364:	429a      	cmp	r2, r3
 800e366:	d00a      	beq.n	800e37e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36c:	f383 8811 	msr	BASEPRI, r3
 800e370:	f3bf 8f6f 	isb	sy
 800e374:	f3bf 8f4f 	dsb	sy
 800e378:	60fb      	str	r3, [r7, #12]
}
 800e37a:	bf00      	nop
 800e37c:	e7fe      	b.n	800e37c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e382:	2b00      	cmp	r3, #0
 800e384:	d10a      	bne.n	800e39c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e38a:	f383 8811 	msr	BASEPRI, r3
 800e38e:	f3bf 8f6f 	isb	sy
 800e392:	f3bf 8f4f 	dsb	sy
 800e396:	60bb      	str	r3, [r7, #8]
}
 800e398:	bf00      	nop
 800e39a:	e7fe      	b.n	800e39a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3a0:	1e5a      	subs	r2, r3, #1
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d02c      	beq.n	800e40c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d128      	bne.n	800e40c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	3304      	adds	r3, #4
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7fe f972 	bl	800c6a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3dc:	4b0f      	ldr	r3, [pc, #60]	; (800e41c <xTaskPriorityDisinherit+0xd4>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d903      	bls.n	800e3ec <xTaskPriorityDisinherit+0xa4>
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e8:	4a0c      	ldr	r2, [pc, #48]	; (800e41c <xTaskPriorityDisinherit+0xd4>)
 800e3ea:	6013      	str	r3, [r2, #0]
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3f0:	4613      	mov	r3, r2
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	4413      	add	r3, r2
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	4a09      	ldr	r2, [pc, #36]	; (800e420 <xTaskPriorityDisinherit+0xd8>)
 800e3fa:	441a      	add	r2, r3
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	3304      	adds	r3, #4
 800e400:	4619      	mov	r1, r3
 800e402:	4610      	mov	r0, r2
 800e404:	f7fe f8f3 	bl	800c5ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e408:	2301      	movs	r3, #1
 800e40a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e40c:	697b      	ldr	r3, [r7, #20]
	}
 800e40e:	4618      	mov	r0, r3
 800e410:	3718      	adds	r7, #24
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	24004d6c 	.word	0x24004d6c
 800e41c:	24005248 	.word	0x24005248
 800e420:	24004d70 	.word	0x24004d70

0800e424 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e42e:	4b21      	ldr	r3, [pc, #132]	; (800e4b4 <prvAddCurrentTaskToDelayedList+0x90>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e434:	4b20      	ldr	r3, [pc, #128]	; (800e4b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	3304      	adds	r3, #4
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7fe f934 	bl	800c6a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e446:	d10a      	bne.n	800e45e <prvAddCurrentTaskToDelayedList+0x3a>
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d007      	beq.n	800e45e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e44e:	4b1a      	ldr	r3, [pc, #104]	; (800e4b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	3304      	adds	r3, #4
 800e454:	4619      	mov	r1, r3
 800e456:	4819      	ldr	r0, [pc, #100]	; (800e4bc <prvAddCurrentTaskToDelayedList+0x98>)
 800e458:	f7fe f8c9 	bl	800c5ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e45c:	e026      	b.n	800e4ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e45e:	68fa      	ldr	r2, [r7, #12]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	4413      	add	r3, r2
 800e464:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e466:	4b14      	ldr	r3, [pc, #80]	; (800e4b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	68ba      	ldr	r2, [r7, #8]
 800e46c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e46e:	68ba      	ldr	r2, [r7, #8]
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	429a      	cmp	r2, r3
 800e474:	d209      	bcs.n	800e48a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e476:	4b12      	ldr	r3, [pc, #72]	; (800e4c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	4b0f      	ldr	r3, [pc, #60]	; (800e4b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	3304      	adds	r3, #4
 800e480:	4619      	mov	r1, r3
 800e482:	4610      	mov	r0, r2
 800e484:	f7fe f8d7 	bl	800c636 <vListInsert>
}
 800e488:	e010      	b.n	800e4ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e48a:	4b0e      	ldr	r3, [pc, #56]	; (800e4c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	4b0a      	ldr	r3, [pc, #40]	; (800e4b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	3304      	adds	r3, #4
 800e494:	4619      	mov	r1, r3
 800e496:	4610      	mov	r0, r2
 800e498:	f7fe f8cd 	bl	800c636 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e49c:	4b0a      	ldr	r3, [pc, #40]	; (800e4c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	68ba      	ldr	r2, [r7, #8]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d202      	bcs.n	800e4ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e4a6:	4a08      	ldr	r2, [pc, #32]	; (800e4c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	6013      	str	r3, [r2, #0]
}
 800e4ac:	bf00      	nop
 800e4ae:	3710      	adds	r7, #16
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}
 800e4b4:	24005244 	.word	0x24005244
 800e4b8:	24004d6c 	.word	0x24004d6c
 800e4bc:	2400522c 	.word	0x2400522c
 800e4c0:	240051fc 	.word	0x240051fc
 800e4c4:	240051f8 	.word	0x240051f8
 800e4c8:	24005260 	.word	0x24005260

0800e4cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b08a      	sub	sp, #40	; 0x28
 800e4d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e4d6:	f000 fb07 	bl	800eae8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e4da:	4b1c      	ldr	r3, [pc, #112]	; (800e54c <xTimerCreateTimerTask+0x80>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d021      	beq.n	800e526 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e4ea:	1d3a      	adds	r2, r7, #4
 800e4ec:	f107 0108 	add.w	r1, r7, #8
 800e4f0:	f107 030c 	add.w	r3, r7, #12
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7fd fe49 	bl	800c18c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e4fa:	6879      	ldr	r1, [r7, #4]
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	68fa      	ldr	r2, [r7, #12]
 800e500:	9202      	str	r2, [sp, #8]
 800e502:	9301      	str	r3, [sp, #4]
 800e504:	2302      	movs	r3, #2
 800e506:	9300      	str	r3, [sp, #0]
 800e508:	2300      	movs	r3, #0
 800e50a:	460a      	mov	r2, r1
 800e50c:	4910      	ldr	r1, [pc, #64]	; (800e550 <xTimerCreateTimerTask+0x84>)
 800e50e:	4811      	ldr	r0, [pc, #68]	; (800e554 <xTimerCreateTimerTask+0x88>)
 800e510:	f7ff f8b4 	bl	800d67c <xTaskCreateStatic>
 800e514:	4603      	mov	r3, r0
 800e516:	4a10      	ldr	r2, [pc, #64]	; (800e558 <xTimerCreateTimerTask+0x8c>)
 800e518:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e51a:	4b0f      	ldr	r3, [pc, #60]	; (800e558 <xTimerCreateTimerTask+0x8c>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d001      	beq.n	800e526 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e522:	2301      	movs	r3, #1
 800e524:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d10a      	bne.n	800e542 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e530:	f383 8811 	msr	BASEPRI, r3
 800e534:	f3bf 8f6f 	isb	sy
 800e538:	f3bf 8f4f 	dsb	sy
 800e53c:	613b      	str	r3, [r7, #16]
}
 800e53e:	bf00      	nop
 800e540:	e7fe      	b.n	800e540 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e542:	697b      	ldr	r3, [r7, #20]
}
 800e544:	4618      	mov	r0, r3
 800e546:	3718      	adds	r7, #24
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}
 800e54c:	2400529c 	.word	0x2400529c
 800e550:	08012fd4 	.word	0x08012fd4
 800e554:	0800e691 	.word	0x0800e691
 800e558:	240052a0 	.word	0x240052a0

0800e55c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b08a      	sub	sp, #40	; 0x28
 800e560:	af00      	add	r7, sp, #0
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	607a      	str	r2, [r7, #4]
 800e568:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e56a:	2300      	movs	r3, #0
 800e56c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d10a      	bne.n	800e58a <xTimerGenericCommand+0x2e>
	__asm volatile
 800e574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e578:	f383 8811 	msr	BASEPRI, r3
 800e57c:	f3bf 8f6f 	isb	sy
 800e580:	f3bf 8f4f 	dsb	sy
 800e584:	623b      	str	r3, [r7, #32]
}
 800e586:	bf00      	nop
 800e588:	e7fe      	b.n	800e588 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e58a:	4b1a      	ldr	r3, [pc, #104]	; (800e5f4 <xTimerGenericCommand+0x98>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d02a      	beq.n	800e5e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	2b05      	cmp	r3, #5
 800e5a2:	dc18      	bgt.n	800e5d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e5a4:	f7ff feb2 	bl	800e30c <xTaskGetSchedulerState>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	2b02      	cmp	r3, #2
 800e5ac:	d109      	bne.n	800e5c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e5ae:	4b11      	ldr	r3, [pc, #68]	; (800e5f4 <xTimerGenericCommand+0x98>)
 800e5b0:	6818      	ldr	r0, [r3, #0]
 800e5b2:	f107 0110 	add.w	r1, r7, #16
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5ba:	f7fe fc77 	bl	800ceac <xQueueGenericSend>
 800e5be:	6278      	str	r0, [r7, #36]	; 0x24
 800e5c0:	e012      	b.n	800e5e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e5c2:	4b0c      	ldr	r3, [pc, #48]	; (800e5f4 <xTimerGenericCommand+0x98>)
 800e5c4:	6818      	ldr	r0, [r3, #0]
 800e5c6:	f107 0110 	add.w	r1, r7, #16
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f7fe fc6d 	bl	800ceac <xQueueGenericSend>
 800e5d2:	6278      	str	r0, [r7, #36]	; 0x24
 800e5d4:	e008      	b.n	800e5e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e5d6:	4b07      	ldr	r3, [pc, #28]	; (800e5f4 <xTimerGenericCommand+0x98>)
 800e5d8:	6818      	ldr	r0, [r3, #0]
 800e5da:	f107 0110 	add.w	r1, r7, #16
 800e5de:	2300      	movs	r3, #0
 800e5e0:	683a      	ldr	r2, [r7, #0]
 800e5e2:	f7fe fd61 	bl	800d0a8 <xQueueGenericSendFromISR>
 800e5e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3728      	adds	r7, #40	; 0x28
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	2400529c 	.word	0x2400529c

0800e5f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b088      	sub	sp, #32
 800e5fc:	af02      	add	r7, sp, #8
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e602:	4b22      	ldr	r3, [pc, #136]	; (800e68c <prvProcessExpiredTimer+0x94>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	68db      	ldr	r3, [r3, #12]
 800e60a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	3304      	adds	r3, #4
 800e610:	4618      	mov	r0, r3
 800e612:	f7fe f849 	bl	800c6a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e61c:	f003 0304 	and.w	r3, r3, #4
 800e620:	2b00      	cmp	r3, #0
 800e622:	d022      	beq.n	800e66a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	699a      	ldr	r2, [r3, #24]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	18d1      	adds	r1, r2, r3
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	683a      	ldr	r2, [r7, #0]
 800e630:	6978      	ldr	r0, [r7, #20]
 800e632:	f000 f8d1 	bl	800e7d8 <prvInsertTimerInActiveList>
 800e636:	4603      	mov	r3, r0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d01f      	beq.n	800e67c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e63c:	2300      	movs	r3, #0
 800e63e:	9300      	str	r3, [sp, #0]
 800e640:	2300      	movs	r3, #0
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	2100      	movs	r1, #0
 800e646:	6978      	ldr	r0, [r7, #20]
 800e648:	f7ff ff88 	bl	800e55c <xTimerGenericCommand>
 800e64c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d113      	bne.n	800e67c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e658:	f383 8811 	msr	BASEPRI, r3
 800e65c:	f3bf 8f6f 	isb	sy
 800e660:	f3bf 8f4f 	dsb	sy
 800e664:	60fb      	str	r3, [r7, #12]
}
 800e666:	bf00      	nop
 800e668:	e7fe      	b.n	800e668 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e670:	f023 0301 	bic.w	r3, r3, #1
 800e674:	b2da      	uxtb	r2, r3
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	6a1b      	ldr	r3, [r3, #32]
 800e680:	6978      	ldr	r0, [r7, #20]
 800e682:	4798      	blx	r3
}
 800e684:	bf00      	nop
 800e686:	3718      	adds	r7, #24
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	24005294 	.word	0x24005294

0800e690 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e698:	f107 0308 	add.w	r3, r7, #8
 800e69c:	4618      	mov	r0, r3
 800e69e:	f000 f857 	bl	800e750 <prvGetNextExpireTime>
 800e6a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	68f8      	ldr	r0, [r7, #12]
 800e6aa:	f000 f803 	bl	800e6b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e6ae:	f000 f8d5 	bl	800e85c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e6b2:	e7f1      	b.n	800e698 <prvTimerTask+0x8>

0800e6b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e6be:	f7ff fa39 	bl	800db34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e6c2:	f107 0308 	add.w	r3, r7, #8
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f000 f866 	bl	800e798 <prvSampleTimeNow>
 800e6cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d130      	bne.n	800e736 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d10a      	bne.n	800e6f0 <prvProcessTimerOrBlockTask+0x3c>
 800e6da:	687a      	ldr	r2, [r7, #4]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d806      	bhi.n	800e6f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e6e2:	f7ff fa35 	bl	800db50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e6e6:	68f9      	ldr	r1, [r7, #12]
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f7ff ff85 	bl	800e5f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e6ee:	e024      	b.n	800e73a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d008      	beq.n	800e708 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e6f6:	4b13      	ldr	r3, [pc, #76]	; (800e744 <prvProcessTimerOrBlockTask+0x90>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d101      	bne.n	800e704 <prvProcessTimerOrBlockTask+0x50>
 800e700:	2301      	movs	r3, #1
 800e702:	e000      	b.n	800e706 <prvProcessTimerOrBlockTask+0x52>
 800e704:	2300      	movs	r3, #0
 800e706:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e708:	4b0f      	ldr	r3, [pc, #60]	; (800e748 <prvProcessTimerOrBlockTask+0x94>)
 800e70a:	6818      	ldr	r0, [r3, #0]
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	1ad3      	subs	r3, r2, r3
 800e712:	683a      	ldr	r2, [r7, #0]
 800e714:	4619      	mov	r1, r3
 800e716:	f7fe ff7d 	bl	800d614 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e71a:	f7ff fa19 	bl	800db50 <xTaskResumeAll>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d10a      	bne.n	800e73a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e724:	4b09      	ldr	r3, [pc, #36]	; (800e74c <prvProcessTimerOrBlockTask+0x98>)
 800e726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e72a:	601a      	str	r2, [r3, #0]
 800e72c:	f3bf 8f4f 	dsb	sy
 800e730:	f3bf 8f6f 	isb	sy
}
 800e734:	e001      	b.n	800e73a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e736:	f7ff fa0b 	bl	800db50 <xTaskResumeAll>
}
 800e73a:	bf00      	nop
 800e73c:	3710      	adds	r7, #16
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	24005298 	.word	0x24005298
 800e748:	2400529c 	.word	0x2400529c
 800e74c:	e000ed04 	.word	0xe000ed04

0800e750 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e750:	b480      	push	{r7}
 800e752:	b085      	sub	sp, #20
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e758:	4b0e      	ldr	r3, [pc, #56]	; (800e794 <prvGetNextExpireTime+0x44>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d101      	bne.n	800e766 <prvGetNextExpireTime+0x16>
 800e762:	2201      	movs	r2, #1
 800e764:	e000      	b.n	800e768 <prvGetNextExpireTime+0x18>
 800e766:	2200      	movs	r2, #0
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d105      	bne.n	800e780 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e774:	4b07      	ldr	r3, [pc, #28]	; (800e794 <prvGetNextExpireTime+0x44>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	68db      	ldr	r3, [r3, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	60fb      	str	r3, [r7, #12]
 800e77e:	e001      	b.n	800e784 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e780:	2300      	movs	r3, #0
 800e782:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e784:	68fb      	ldr	r3, [r7, #12]
}
 800e786:	4618      	mov	r0, r3
 800e788:	3714      	adds	r7, #20
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr
 800e792:	bf00      	nop
 800e794:	24005294 	.word	0x24005294

0800e798 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e7a0:	f7ff fa74 	bl	800dc8c <xTaskGetTickCount>
 800e7a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e7a6:	4b0b      	ldr	r3, [pc, #44]	; (800e7d4 <prvSampleTimeNow+0x3c>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	68fa      	ldr	r2, [r7, #12]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d205      	bcs.n	800e7bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e7b0:	f000 f936 	bl	800ea20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	601a      	str	r2, [r3, #0]
 800e7ba:	e002      	b.n	800e7c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e7c2:	4a04      	ldr	r2, [pc, #16]	; (800e7d4 <prvSampleTimeNow+0x3c>)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3710      	adds	r7, #16
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	240052a4 	.word	0x240052a4

0800e7d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b086      	sub	sp, #24
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	607a      	str	r2, [r7, #4]
 800e7e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	68ba      	ldr	r2, [r7, #8]
 800e7ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e7f6:	68ba      	ldr	r2, [r7, #8]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d812      	bhi.n	800e824 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7fe:	687a      	ldr	r2, [r7, #4]
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	1ad2      	subs	r2, r2, r3
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	699b      	ldr	r3, [r3, #24]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d302      	bcc.n	800e812 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e80c:	2301      	movs	r3, #1
 800e80e:	617b      	str	r3, [r7, #20]
 800e810:	e01b      	b.n	800e84a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e812:	4b10      	ldr	r3, [pc, #64]	; (800e854 <prvInsertTimerInActiveList+0x7c>)
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	3304      	adds	r3, #4
 800e81a:	4619      	mov	r1, r3
 800e81c:	4610      	mov	r0, r2
 800e81e:	f7fd ff0a 	bl	800c636 <vListInsert>
 800e822:	e012      	b.n	800e84a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d206      	bcs.n	800e83a <prvInsertTimerInActiveList+0x62>
 800e82c:	68ba      	ldr	r2, [r7, #8]
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	429a      	cmp	r2, r3
 800e832:	d302      	bcc.n	800e83a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e834:	2301      	movs	r3, #1
 800e836:	617b      	str	r3, [r7, #20]
 800e838:	e007      	b.n	800e84a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e83a:	4b07      	ldr	r3, [pc, #28]	; (800e858 <prvInsertTimerInActiveList+0x80>)
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	3304      	adds	r3, #4
 800e842:	4619      	mov	r1, r3
 800e844:	4610      	mov	r0, r2
 800e846:	f7fd fef6 	bl	800c636 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e84a:	697b      	ldr	r3, [r7, #20]
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3718      	adds	r7, #24
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}
 800e854:	24005298 	.word	0x24005298
 800e858:	24005294 	.word	0x24005294

0800e85c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b08e      	sub	sp, #56	; 0x38
 800e860:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e862:	e0ca      	b.n	800e9fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	da18      	bge.n	800e89c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e86a:	1d3b      	adds	r3, r7, #4
 800e86c:	3304      	adds	r3, #4
 800e86e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e872:	2b00      	cmp	r3, #0
 800e874:	d10a      	bne.n	800e88c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87a:	f383 8811 	msr	BASEPRI, r3
 800e87e:	f3bf 8f6f 	isb	sy
 800e882:	f3bf 8f4f 	dsb	sy
 800e886:	61fb      	str	r3, [r7, #28]
}
 800e888:	bf00      	nop
 800e88a:	e7fe      	b.n	800e88a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e892:	6850      	ldr	r0, [r2, #4]
 800e894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e896:	6892      	ldr	r2, [r2, #8]
 800e898:	4611      	mov	r1, r2
 800e89a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	f2c0 80ab 	blt.w	800e9fa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8aa:	695b      	ldr	r3, [r3, #20]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d004      	beq.n	800e8ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b2:	3304      	adds	r3, #4
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7fd fef7 	bl	800c6a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e8ba:	463b      	mov	r3, r7
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7ff ff6b 	bl	800e798 <prvSampleTimeNow>
 800e8c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2b09      	cmp	r3, #9
 800e8c8:	f200 8096 	bhi.w	800e9f8 <prvProcessReceivedCommands+0x19c>
 800e8cc:	a201      	add	r2, pc, #4	; (adr r2, 800e8d4 <prvProcessReceivedCommands+0x78>)
 800e8ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8d2:	bf00      	nop
 800e8d4:	0800e8fd 	.word	0x0800e8fd
 800e8d8:	0800e8fd 	.word	0x0800e8fd
 800e8dc:	0800e8fd 	.word	0x0800e8fd
 800e8e0:	0800e971 	.word	0x0800e971
 800e8e4:	0800e985 	.word	0x0800e985
 800e8e8:	0800e9cf 	.word	0x0800e9cf
 800e8ec:	0800e8fd 	.word	0x0800e8fd
 800e8f0:	0800e8fd 	.word	0x0800e8fd
 800e8f4:	0800e971 	.word	0x0800e971
 800e8f8:	0800e985 	.word	0x0800e985
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e902:	f043 0301 	orr.w	r3, r3, #1
 800e906:	b2da      	uxtb	r2, r3
 800e908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e90e:	68ba      	ldr	r2, [r7, #8]
 800e910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e912:	699b      	ldr	r3, [r3, #24]
 800e914:	18d1      	adds	r1, r2, r3
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e91a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e91c:	f7ff ff5c 	bl	800e7d8 <prvInsertTimerInActiveList>
 800e920:	4603      	mov	r3, r0
 800e922:	2b00      	cmp	r3, #0
 800e924:	d069      	beq.n	800e9fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e928:	6a1b      	ldr	r3, [r3, #32]
 800e92a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e92c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e934:	f003 0304 	and.w	r3, r3, #4
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d05e      	beq.n	800e9fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e93c:	68ba      	ldr	r2, [r7, #8]
 800e93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e940:	699b      	ldr	r3, [r3, #24]
 800e942:	441a      	add	r2, r3
 800e944:	2300      	movs	r3, #0
 800e946:	9300      	str	r3, [sp, #0]
 800e948:	2300      	movs	r3, #0
 800e94a:	2100      	movs	r1, #0
 800e94c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e94e:	f7ff fe05 	bl	800e55c <xTimerGenericCommand>
 800e952:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e954:	6a3b      	ldr	r3, [r7, #32]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d14f      	bne.n	800e9fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e95e:	f383 8811 	msr	BASEPRI, r3
 800e962:	f3bf 8f6f 	isb	sy
 800e966:	f3bf 8f4f 	dsb	sy
 800e96a:	61bb      	str	r3, [r7, #24]
}
 800e96c:	bf00      	nop
 800e96e:	e7fe      	b.n	800e96e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e972:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e976:	f023 0301 	bic.w	r3, r3, #1
 800e97a:	b2da      	uxtb	r2, r3
 800e97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e982:	e03a      	b.n	800e9fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e98a:	f043 0301 	orr.w	r3, r3, #1
 800e98e:	b2da      	uxtb	r2, r3
 800e990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e996:	68ba      	ldr	r2, [r7, #8]
 800e998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99e:	699b      	ldr	r3, [r3, #24]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d10a      	bne.n	800e9ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a8:	f383 8811 	msr	BASEPRI, r3
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	f3bf 8f4f 	dsb	sy
 800e9b4:	617b      	str	r3, [r7, #20]
}
 800e9b6:	bf00      	nop
 800e9b8:	e7fe      	b.n	800e9b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9bc:	699a      	ldr	r2, [r3, #24]
 800e9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c0:	18d1      	adds	r1, r2, r3
 800e9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9c8:	f7ff ff06 	bl	800e7d8 <prvInsertTimerInActiveList>
					break;
 800e9cc:	e015      	b.n	800e9fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9d4:	f003 0302 	and.w	r3, r3, #2
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d103      	bne.n	800e9e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e9dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9de:	f7fd fcbb 	bl	800c358 <vPortFree>
 800e9e2:	e00a      	b.n	800e9fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9ea:	f023 0301 	bic.w	r3, r3, #1
 800e9ee:	b2da      	uxtb	r2, r3
 800e9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e9f6:	e000      	b.n	800e9fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e9f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e9fa:	4b08      	ldr	r3, [pc, #32]	; (800ea1c <prvProcessReceivedCommands+0x1c0>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	1d39      	adds	r1, r7, #4
 800ea00:	2200      	movs	r2, #0
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7fe fbec 	bl	800d1e0 <xQueueReceive>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	f47f af2a 	bne.w	800e864 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ea10:	bf00      	nop
 800ea12:	bf00      	nop
 800ea14:	3730      	adds	r7, #48	; 0x30
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	2400529c 	.word	0x2400529c

0800ea20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b088      	sub	sp, #32
 800ea24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ea26:	e048      	b.n	800eaba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ea28:	4b2d      	ldr	r3, [pc, #180]	; (800eae0 <prvSwitchTimerLists+0xc0>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea32:	4b2b      	ldr	r3, [pc, #172]	; (800eae0 <prvSwitchTimerLists+0xc0>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	3304      	adds	r3, #4
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7fd fe31 	bl	800c6a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	6a1b      	ldr	r3, [r3, #32]
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea54:	f003 0304 	and.w	r3, r3, #4
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d02e      	beq.n	800eaba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	699b      	ldr	r3, [r3, #24]
 800ea60:	693a      	ldr	r2, [r7, #16]
 800ea62:	4413      	add	r3, r2
 800ea64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ea66:	68ba      	ldr	r2, [r7, #8]
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d90e      	bls.n	800ea8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	68ba      	ldr	r2, [r7, #8]
 800ea72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	68fa      	ldr	r2, [r7, #12]
 800ea78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ea7a:	4b19      	ldr	r3, [pc, #100]	; (800eae0 <prvSwitchTimerLists+0xc0>)
 800ea7c:	681a      	ldr	r2, [r3, #0]
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	3304      	adds	r3, #4
 800ea82:	4619      	mov	r1, r3
 800ea84:	4610      	mov	r0, r2
 800ea86:	f7fd fdd6 	bl	800c636 <vListInsert>
 800ea8a:	e016      	b.n	800eaba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	2300      	movs	r3, #0
 800ea92:	693a      	ldr	r2, [r7, #16]
 800ea94:	2100      	movs	r1, #0
 800ea96:	68f8      	ldr	r0, [r7, #12]
 800ea98:	f7ff fd60 	bl	800e55c <xTimerGenericCommand>
 800ea9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d10a      	bne.n	800eaba <prvSwitchTimerLists+0x9a>
	__asm volatile
 800eaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa8:	f383 8811 	msr	BASEPRI, r3
 800eaac:	f3bf 8f6f 	isb	sy
 800eab0:	f3bf 8f4f 	dsb	sy
 800eab4:	603b      	str	r3, [r7, #0]
}
 800eab6:	bf00      	nop
 800eab8:	e7fe      	b.n	800eab8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eaba:	4b09      	ldr	r3, [pc, #36]	; (800eae0 <prvSwitchTimerLists+0xc0>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1b1      	bne.n	800ea28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eac4:	4b06      	ldr	r3, [pc, #24]	; (800eae0 <prvSwitchTimerLists+0xc0>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eaca:	4b06      	ldr	r3, [pc, #24]	; (800eae4 <prvSwitchTimerLists+0xc4>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	4a04      	ldr	r2, [pc, #16]	; (800eae0 <prvSwitchTimerLists+0xc0>)
 800ead0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ead2:	4a04      	ldr	r2, [pc, #16]	; (800eae4 <prvSwitchTimerLists+0xc4>)
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	6013      	str	r3, [r2, #0]
}
 800ead8:	bf00      	nop
 800eada:	3718      	adds	r7, #24
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	24005294 	.word	0x24005294
 800eae4:	24005298 	.word	0x24005298

0800eae8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eaee:	f7fd ff31 	bl	800c954 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eaf2:	4b15      	ldr	r3, [pc, #84]	; (800eb48 <prvCheckForValidListAndQueue+0x60>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d120      	bne.n	800eb3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eafa:	4814      	ldr	r0, [pc, #80]	; (800eb4c <prvCheckForValidListAndQueue+0x64>)
 800eafc:	f7fd fd4a 	bl	800c594 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eb00:	4813      	ldr	r0, [pc, #76]	; (800eb50 <prvCheckForValidListAndQueue+0x68>)
 800eb02:	f7fd fd47 	bl	800c594 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eb06:	4b13      	ldr	r3, [pc, #76]	; (800eb54 <prvCheckForValidListAndQueue+0x6c>)
 800eb08:	4a10      	ldr	r2, [pc, #64]	; (800eb4c <prvCheckForValidListAndQueue+0x64>)
 800eb0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eb0c:	4b12      	ldr	r3, [pc, #72]	; (800eb58 <prvCheckForValidListAndQueue+0x70>)
 800eb0e:	4a10      	ldr	r2, [pc, #64]	; (800eb50 <prvCheckForValidListAndQueue+0x68>)
 800eb10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eb12:	2300      	movs	r3, #0
 800eb14:	9300      	str	r3, [sp, #0]
 800eb16:	4b11      	ldr	r3, [pc, #68]	; (800eb5c <prvCheckForValidListAndQueue+0x74>)
 800eb18:	4a11      	ldr	r2, [pc, #68]	; (800eb60 <prvCheckForValidListAndQueue+0x78>)
 800eb1a:	2110      	movs	r1, #16
 800eb1c:	200a      	movs	r0, #10
 800eb1e:	f7fe f8a3 	bl	800cc68 <xQueueGenericCreateStatic>
 800eb22:	4603      	mov	r3, r0
 800eb24:	4a08      	ldr	r2, [pc, #32]	; (800eb48 <prvCheckForValidListAndQueue+0x60>)
 800eb26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eb28:	4b07      	ldr	r3, [pc, #28]	; (800eb48 <prvCheckForValidListAndQueue+0x60>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d005      	beq.n	800eb3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eb30:	4b05      	ldr	r3, [pc, #20]	; (800eb48 <prvCheckForValidListAndQueue+0x60>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	490b      	ldr	r1, [pc, #44]	; (800eb64 <prvCheckForValidListAndQueue+0x7c>)
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7fe fd42 	bl	800d5c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eb3c:	f7fd ff3a 	bl	800c9b4 <vPortExitCritical>
}
 800eb40:	bf00      	nop
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	2400529c 	.word	0x2400529c
 800eb4c:	2400526c 	.word	0x2400526c
 800eb50:	24005280 	.word	0x24005280
 800eb54:	24005294 	.word	0x24005294
 800eb58:	24005298 	.word	0x24005298
 800eb5c:	24005348 	.word	0x24005348
 800eb60:	240052a8 	.word	0x240052a8
 800eb64:	08012fdc 	.word	0x08012fdc

0800eb68 <__cvt>:
 800eb68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb6a:	ed2d 8b02 	vpush	{d8}
 800eb6e:	eeb0 8b40 	vmov.f64	d8, d0
 800eb72:	b085      	sub	sp, #20
 800eb74:	4617      	mov	r7, r2
 800eb76:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800eb78:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800eb7a:	ee18 2a90 	vmov	r2, s17
 800eb7e:	f025 0520 	bic.w	r5, r5, #32
 800eb82:	2a00      	cmp	r2, #0
 800eb84:	bfb6      	itet	lt
 800eb86:	222d      	movlt	r2, #45	; 0x2d
 800eb88:	2200      	movge	r2, #0
 800eb8a:	eeb1 8b40 	vneglt.f64	d8, d0
 800eb8e:	2d46      	cmp	r5, #70	; 0x46
 800eb90:	460c      	mov	r4, r1
 800eb92:	701a      	strb	r2, [r3, #0]
 800eb94:	d004      	beq.n	800eba0 <__cvt+0x38>
 800eb96:	2d45      	cmp	r5, #69	; 0x45
 800eb98:	d100      	bne.n	800eb9c <__cvt+0x34>
 800eb9a:	3401      	adds	r4, #1
 800eb9c:	2102      	movs	r1, #2
 800eb9e:	e000      	b.n	800eba2 <__cvt+0x3a>
 800eba0:	2103      	movs	r1, #3
 800eba2:	ab03      	add	r3, sp, #12
 800eba4:	9301      	str	r3, [sp, #4]
 800eba6:	ab02      	add	r3, sp, #8
 800eba8:	9300      	str	r3, [sp, #0]
 800ebaa:	4622      	mov	r2, r4
 800ebac:	4633      	mov	r3, r6
 800ebae:	eeb0 0b48 	vmov.f64	d0, d8
 800ebb2:	f000 ffa9 	bl	800fb08 <_dtoa_r>
 800ebb6:	2d47      	cmp	r5, #71	; 0x47
 800ebb8:	d101      	bne.n	800ebbe <__cvt+0x56>
 800ebba:	07fb      	lsls	r3, r7, #31
 800ebbc:	d51a      	bpl.n	800ebf4 <__cvt+0x8c>
 800ebbe:	2d46      	cmp	r5, #70	; 0x46
 800ebc0:	eb00 0204 	add.w	r2, r0, r4
 800ebc4:	d10c      	bne.n	800ebe0 <__cvt+0x78>
 800ebc6:	7803      	ldrb	r3, [r0, #0]
 800ebc8:	2b30      	cmp	r3, #48	; 0x30
 800ebca:	d107      	bne.n	800ebdc <__cvt+0x74>
 800ebcc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ebd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebd4:	bf1c      	itt	ne
 800ebd6:	f1c4 0401 	rsbne	r4, r4, #1
 800ebda:	6034      	strne	r4, [r6, #0]
 800ebdc:	6833      	ldr	r3, [r6, #0]
 800ebde:	441a      	add	r2, r3
 800ebe0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ebe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebe8:	bf08      	it	eq
 800ebea:	9203      	streq	r2, [sp, #12]
 800ebec:	2130      	movs	r1, #48	; 0x30
 800ebee:	9b03      	ldr	r3, [sp, #12]
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d307      	bcc.n	800ec04 <__cvt+0x9c>
 800ebf4:	9b03      	ldr	r3, [sp, #12]
 800ebf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ebf8:	1a1b      	subs	r3, r3, r0
 800ebfa:	6013      	str	r3, [r2, #0]
 800ebfc:	b005      	add	sp, #20
 800ebfe:	ecbd 8b02 	vpop	{d8}
 800ec02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec04:	1c5c      	adds	r4, r3, #1
 800ec06:	9403      	str	r4, [sp, #12]
 800ec08:	7019      	strb	r1, [r3, #0]
 800ec0a:	e7f0      	b.n	800ebee <__cvt+0x86>

0800ec0c <__exponent>:
 800ec0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec0e:	4603      	mov	r3, r0
 800ec10:	2900      	cmp	r1, #0
 800ec12:	bfb8      	it	lt
 800ec14:	4249      	neglt	r1, r1
 800ec16:	f803 2b02 	strb.w	r2, [r3], #2
 800ec1a:	bfb4      	ite	lt
 800ec1c:	222d      	movlt	r2, #45	; 0x2d
 800ec1e:	222b      	movge	r2, #43	; 0x2b
 800ec20:	2909      	cmp	r1, #9
 800ec22:	7042      	strb	r2, [r0, #1]
 800ec24:	dd2a      	ble.n	800ec7c <__exponent+0x70>
 800ec26:	f10d 0207 	add.w	r2, sp, #7
 800ec2a:	4617      	mov	r7, r2
 800ec2c:	260a      	movs	r6, #10
 800ec2e:	4694      	mov	ip, r2
 800ec30:	fb91 f5f6 	sdiv	r5, r1, r6
 800ec34:	fb06 1415 	mls	r4, r6, r5, r1
 800ec38:	3430      	adds	r4, #48	; 0x30
 800ec3a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ec3e:	460c      	mov	r4, r1
 800ec40:	2c63      	cmp	r4, #99	; 0x63
 800ec42:	f102 32ff 	add.w	r2, r2, #4294967295
 800ec46:	4629      	mov	r1, r5
 800ec48:	dcf1      	bgt.n	800ec2e <__exponent+0x22>
 800ec4a:	3130      	adds	r1, #48	; 0x30
 800ec4c:	f1ac 0402 	sub.w	r4, ip, #2
 800ec50:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ec54:	1c41      	adds	r1, r0, #1
 800ec56:	4622      	mov	r2, r4
 800ec58:	42ba      	cmp	r2, r7
 800ec5a:	d30a      	bcc.n	800ec72 <__exponent+0x66>
 800ec5c:	f10d 0209 	add.w	r2, sp, #9
 800ec60:	eba2 020c 	sub.w	r2, r2, ip
 800ec64:	42bc      	cmp	r4, r7
 800ec66:	bf88      	it	hi
 800ec68:	2200      	movhi	r2, #0
 800ec6a:	4413      	add	r3, r2
 800ec6c:	1a18      	subs	r0, r3, r0
 800ec6e:	b003      	add	sp, #12
 800ec70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec72:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ec76:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ec7a:	e7ed      	b.n	800ec58 <__exponent+0x4c>
 800ec7c:	2330      	movs	r3, #48	; 0x30
 800ec7e:	3130      	adds	r1, #48	; 0x30
 800ec80:	7083      	strb	r3, [r0, #2]
 800ec82:	70c1      	strb	r1, [r0, #3]
 800ec84:	1d03      	adds	r3, r0, #4
 800ec86:	e7f1      	b.n	800ec6c <__exponent+0x60>

0800ec88 <_printf_float>:
 800ec88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec8c:	b08b      	sub	sp, #44	; 0x2c
 800ec8e:	460c      	mov	r4, r1
 800ec90:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ec94:	4616      	mov	r6, r2
 800ec96:	461f      	mov	r7, r3
 800ec98:	4605      	mov	r5, r0
 800ec9a:	f000 fdcf 	bl	800f83c <_localeconv_r>
 800ec9e:	f8d0 b000 	ldr.w	fp, [r0]
 800eca2:	4658      	mov	r0, fp
 800eca4:	f7f1 fb6c 	bl	8000380 <strlen>
 800eca8:	2300      	movs	r3, #0
 800ecaa:	9308      	str	r3, [sp, #32]
 800ecac:	f8d8 3000 	ldr.w	r3, [r8]
 800ecb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ecb4:	6822      	ldr	r2, [r4, #0]
 800ecb6:	3307      	adds	r3, #7
 800ecb8:	f023 0307 	bic.w	r3, r3, #7
 800ecbc:	f103 0108 	add.w	r1, r3, #8
 800ecc0:	f8c8 1000 	str.w	r1, [r8]
 800ecc4:	ed93 0b00 	vldr	d0, [r3]
 800ecc8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800ef28 <_printf_float+0x2a0>
 800eccc:	eeb0 7bc0 	vabs.f64	d7, d0
 800ecd0:	eeb4 7b46 	vcmp.f64	d7, d6
 800ecd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800ecdc:	4682      	mov	sl, r0
 800ecde:	dd24      	ble.n	800ed2a <_printf_float+0xa2>
 800ece0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ece4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece8:	d502      	bpl.n	800ecf0 <_printf_float+0x68>
 800ecea:	232d      	movs	r3, #45	; 0x2d
 800ecec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecf0:	498f      	ldr	r1, [pc, #572]	; (800ef30 <_printf_float+0x2a8>)
 800ecf2:	4b90      	ldr	r3, [pc, #576]	; (800ef34 <_printf_float+0x2ac>)
 800ecf4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ecf8:	bf94      	ite	ls
 800ecfa:	4688      	movls	r8, r1
 800ecfc:	4698      	movhi	r8, r3
 800ecfe:	2303      	movs	r3, #3
 800ed00:	6123      	str	r3, [r4, #16]
 800ed02:	f022 0204 	bic.w	r2, r2, #4
 800ed06:	2300      	movs	r3, #0
 800ed08:	6022      	str	r2, [r4, #0]
 800ed0a:	9304      	str	r3, [sp, #16]
 800ed0c:	9700      	str	r7, [sp, #0]
 800ed0e:	4633      	mov	r3, r6
 800ed10:	aa09      	add	r2, sp, #36	; 0x24
 800ed12:	4621      	mov	r1, r4
 800ed14:	4628      	mov	r0, r5
 800ed16:	f000 f9d1 	bl	800f0bc <_printf_common>
 800ed1a:	3001      	adds	r0, #1
 800ed1c:	f040 808a 	bne.w	800ee34 <_printf_float+0x1ac>
 800ed20:	f04f 30ff 	mov.w	r0, #4294967295
 800ed24:	b00b      	add	sp, #44	; 0x2c
 800ed26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed2a:	eeb4 0b40 	vcmp.f64	d0, d0
 800ed2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed32:	d709      	bvc.n	800ed48 <_printf_float+0xc0>
 800ed34:	ee10 3a90 	vmov	r3, s1
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	bfbc      	itt	lt
 800ed3c:	232d      	movlt	r3, #45	; 0x2d
 800ed3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ed42:	497d      	ldr	r1, [pc, #500]	; (800ef38 <_printf_float+0x2b0>)
 800ed44:	4b7d      	ldr	r3, [pc, #500]	; (800ef3c <_printf_float+0x2b4>)
 800ed46:	e7d5      	b.n	800ecf4 <_printf_float+0x6c>
 800ed48:	6863      	ldr	r3, [r4, #4]
 800ed4a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ed4e:	9104      	str	r1, [sp, #16]
 800ed50:	1c59      	adds	r1, r3, #1
 800ed52:	d13c      	bne.n	800edce <_printf_float+0x146>
 800ed54:	2306      	movs	r3, #6
 800ed56:	6063      	str	r3, [r4, #4]
 800ed58:	2300      	movs	r3, #0
 800ed5a:	9303      	str	r3, [sp, #12]
 800ed5c:	ab08      	add	r3, sp, #32
 800ed5e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ed62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ed66:	ab07      	add	r3, sp, #28
 800ed68:	6861      	ldr	r1, [r4, #4]
 800ed6a:	9300      	str	r3, [sp, #0]
 800ed6c:	6022      	str	r2, [r4, #0]
 800ed6e:	f10d 031b 	add.w	r3, sp, #27
 800ed72:	4628      	mov	r0, r5
 800ed74:	f7ff fef8 	bl	800eb68 <__cvt>
 800ed78:	9b04      	ldr	r3, [sp, #16]
 800ed7a:	9907      	ldr	r1, [sp, #28]
 800ed7c:	2b47      	cmp	r3, #71	; 0x47
 800ed7e:	4680      	mov	r8, r0
 800ed80:	d108      	bne.n	800ed94 <_printf_float+0x10c>
 800ed82:	1cc8      	adds	r0, r1, #3
 800ed84:	db02      	blt.n	800ed8c <_printf_float+0x104>
 800ed86:	6863      	ldr	r3, [r4, #4]
 800ed88:	4299      	cmp	r1, r3
 800ed8a:	dd41      	ble.n	800ee10 <_printf_float+0x188>
 800ed8c:	f1a9 0902 	sub.w	r9, r9, #2
 800ed90:	fa5f f989 	uxtb.w	r9, r9
 800ed94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ed98:	d820      	bhi.n	800eddc <_printf_float+0x154>
 800ed9a:	3901      	subs	r1, #1
 800ed9c:	464a      	mov	r2, r9
 800ed9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eda2:	9107      	str	r1, [sp, #28]
 800eda4:	f7ff ff32 	bl	800ec0c <__exponent>
 800eda8:	9a08      	ldr	r2, [sp, #32]
 800edaa:	9004      	str	r0, [sp, #16]
 800edac:	1813      	adds	r3, r2, r0
 800edae:	2a01      	cmp	r2, #1
 800edb0:	6123      	str	r3, [r4, #16]
 800edb2:	dc02      	bgt.n	800edba <_printf_float+0x132>
 800edb4:	6822      	ldr	r2, [r4, #0]
 800edb6:	07d2      	lsls	r2, r2, #31
 800edb8:	d501      	bpl.n	800edbe <_printf_float+0x136>
 800edba:	3301      	adds	r3, #1
 800edbc:	6123      	str	r3, [r4, #16]
 800edbe:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d0a2      	beq.n	800ed0c <_printf_float+0x84>
 800edc6:	232d      	movs	r3, #45	; 0x2d
 800edc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edcc:	e79e      	b.n	800ed0c <_printf_float+0x84>
 800edce:	9904      	ldr	r1, [sp, #16]
 800edd0:	2947      	cmp	r1, #71	; 0x47
 800edd2:	d1c1      	bne.n	800ed58 <_printf_float+0xd0>
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d1bf      	bne.n	800ed58 <_printf_float+0xd0>
 800edd8:	2301      	movs	r3, #1
 800edda:	e7bc      	b.n	800ed56 <_printf_float+0xce>
 800eddc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ede0:	d118      	bne.n	800ee14 <_printf_float+0x18c>
 800ede2:	2900      	cmp	r1, #0
 800ede4:	6863      	ldr	r3, [r4, #4]
 800ede6:	dd0b      	ble.n	800ee00 <_printf_float+0x178>
 800ede8:	6121      	str	r1, [r4, #16]
 800edea:	b913      	cbnz	r3, 800edf2 <_printf_float+0x16a>
 800edec:	6822      	ldr	r2, [r4, #0]
 800edee:	07d0      	lsls	r0, r2, #31
 800edf0:	d502      	bpl.n	800edf8 <_printf_float+0x170>
 800edf2:	3301      	adds	r3, #1
 800edf4:	440b      	add	r3, r1
 800edf6:	6123      	str	r3, [r4, #16]
 800edf8:	2300      	movs	r3, #0
 800edfa:	65a1      	str	r1, [r4, #88]	; 0x58
 800edfc:	9304      	str	r3, [sp, #16]
 800edfe:	e7de      	b.n	800edbe <_printf_float+0x136>
 800ee00:	b913      	cbnz	r3, 800ee08 <_printf_float+0x180>
 800ee02:	6822      	ldr	r2, [r4, #0]
 800ee04:	07d2      	lsls	r2, r2, #31
 800ee06:	d501      	bpl.n	800ee0c <_printf_float+0x184>
 800ee08:	3302      	adds	r3, #2
 800ee0a:	e7f4      	b.n	800edf6 <_printf_float+0x16e>
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	e7f2      	b.n	800edf6 <_printf_float+0x16e>
 800ee10:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ee14:	9b08      	ldr	r3, [sp, #32]
 800ee16:	4299      	cmp	r1, r3
 800ee18:	db05      	blt.n	800ee26 <_printf_float+0x19e>
 800ee1a:	6823      	ldr	r3, [r4, #0]
 800ee1c:	6121      	str	r1, [r4, #16]
 800ee1e:	07d8      	lsls	r0, r3, #31
 800ee20:	d5ea      	bpl.n	800edf8 <_printf_float+0x170>
 800ee22:	1c4b      	adds	r3, r1, #1
 800ee24:	e7e7      	b.n	800edf6 <_printf_float+0x16e>
 800ee26:	2900      	cmp	r1, #0
 800ee28:	bfd4      	ite	le
 800ee2a:	f1c1 0202 	rsble	r2, r1, #2
 800ee2e:	2201      	movgt	r2, #1
 800ee30:	4413      	add	r3, r2
 800ee32:	e7e0      	b.n	800edf6 <_printf_float+0x16e>
 800ee34:	6823      	ldr	r3, [r4, #0]
 800ee36:	055a      	lsls	r2, r3, #21
 800ee38:	d407      	bmi.n	800ee4a <_printf_float+0x1c2>
 800ee3a:	6923      	ldr	r3, [r4, #16]
 800ee3c:	4642      	mov	r2, r8
 800ee3e:	4631      	mov	r1, r6
 800ee40:	4628      	mov	r0, r5
 800ee42:	47b8      	blx	r7
 800ee44:	3001      	adds	r0, #1
 800ee46:	d12a      	bne.n	800ee9e <_printf_float+0x216>
 800ee48:	e76a      	b.n	800ed20 <_printf_float+0x98>
 800ee4a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ee4e:	f240 80e0 	bls.w	800f012 <_printf_float+0x38a>
 800ee52:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ee56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ee5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee5e:	d133      	bne.n	800eec8 <_printf_float+0x240>
 800ee60:	4a37      	ldr	r2, [pc, #220]	; (800ef40 <_printf_float+0x2b8>)
 800ee62:	2301      	movs	r3, #1
 800ee64:	4631      	mov	r1, r6
 800ee66:	4628      	mov	r0, r5
 800ee68:	47b8      	blx	r7
 800ee6a:	3001      	adds	r0, #1
 800ee6c:	f43f af58 	beq.w	800ed20 <_printf_float+0x98>
 800ee70:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	db02      	blt.n	800ee7e <_printf_float+0x1f6>
 800ee78:	6823      	ldr	r3, [r4, #0]
 800ee7a:	07d8      	lsls	r0, r3, #31
 800ee7c:	d50f      	bpl.n	800ee9e <_printf_float+0x216>
 800ee7e:	4653      	mov	r3, sl
 800ee80:	465a      	mov	r2, fp
 800ee82:	4631      	mov	r1, r6
 800ee84:	4628      	mov	r0, r5
 800ee86:	47b8      	blx	r7
 800ee88:	3001      	adds	r0, #1
 800ee8a:	f43f af49 	beq.w	800ed20 <_printf_float+0x98>
 800ee8e:	f04f 0800 	mov.w	r8, #0
 800ee92:	f104 091a 	add.w	r9, r4, #26
 800ee96:	9b08      	ldr	r3, [sp, #32]
 800ee98:	3b01      	subs	r3, #1
 800ee9a:	4543      	cmp	r3, r8
 800ee9c:	dc09      	bgt.n	800eeb2 <_printf_float+0x22a>
 800ee9e:	6823      	ldr	r3, [r4, #0]
 800eea0:	079b      	lsls	r3, r3, #30
 800eea2:	f100 8106 	bmi.w	800f0b2 <_printf_float+0x42a>
 800eea6:	68e0      	ldr	r0, [r4, #12]
 800eea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeaa:	4298      	cmp	r0, r3
 800eeac:	bfb8      	it	lt
 800eeae:	4618      	movlt	r0, r3
 800eeb0:	e738      	b.n	800ed24 <_printf_float+0x9c>
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	464a      	mov	r2, r9
 800eeb6:	4631      	mov	r1, r6
 800eeb8:	4628      	mov	r0, r5
 800eeba:	47b8      	blx	r7
 800eebc:	3001      	adds	r0, #1
 800eebe:	f43f af2f 	beq.w	800ed20 <_printf_float+0x98>
 800eec2:	f108 0801 	add.w	r8, r8, #1
 800eec6:	e7e6      	b.n	800ee96 <_printf_float+0x20e>
 800eec8:	9b07      	ldr	r3, [sp, #28]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	dc3a      	bgt.n	800ef44 <_printf_float+0x2bc>
 800eece:	4a1c      	ldr	r2, [pc, #112]	; (800ef40 <_printf_float+0x2b8>)
 800eed0:	2301      	movs	r3, #1
 800eed2:	4631      	mov	r1, r6
 800eed4:	4628      	mov	r0, r5
 800eed6:	47b8      	blx	r7
 800eed8:	3001      	adds	r0, #1
 800eeda:	f43f af21 	beq.w	800ed20 <_printf_float+0x98>
 800eede:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800eee2:	4313      	orrs	r3, r2
 800eee4:	d102      	bne.n	800eeec <_printf_float+0x264>
 800eee6:	6823      	ldr	r3, [r4, #0]
 800eee8:	07d9      	lsls	r1, r3, #31
 800eeea:	d5d8      	bpl.n	800ee9e <_printf_float+0x216>
 800eeec:	4653      	mov	r3, sl
 800eeee:	465a      	mov	r2, fp
 800eef0:	4631      	mov	r1, r6
 800eef2:	4628      	mov	r0, r5
 800eef4:	47b8      	blx	r7
 800eef6:	3001      	adds	r0, #1
 800eef8:	f43f af12 	beq.w	800ed20 <_printf_float+0x98>
 800eefc:	f04f 0900 	mov.w	r9, #0
 800ef00:	f104 0a1a 	add.w	sl, r4, #26
 800ef04:	9b07      	ldr	r3, [sp, #28]
 800ef06:	425b      	negs	r3, r3
 800ef08:	454b      	cmp	r3, r9
 800ef0a:	dc01      	bgt.n	800ef10 <_printf_float+0x288>
 800ef0c:	9b08      	ldr	r3, [sp, #32]
 800ef0e:	e795      	b.n	800ee3c <_printf_float+0x1b4>
 800ef10:	2301      	movs	r3, #1
 800ef12:	4652      	mov	r2, sl
 800ef14:	4631      	mov	r1, r6
 800ef16:	4628      	mov	r0, r5
 800ef18:	47b8      	blx	r7
 800ef1a:	3001      	adds	r0, #1
 800ef1c:	f43f af00 	beq.w	800ed20 <_printf_float+0x98>
 800ef20:	f109 0901 	add.w	r9, r9, #1
 800ef24:	e7ee      	b.n	800ef04 <_printf_float+0x27c>
 800ef26:	bf00      	nop
 800ef28:	ffffffff 	.word	0xffffffff
 800ef2c:	7fefffff 	.word	0x7fefffff
 800ef30:	080131b4 	.word	0x080131b4
 800ef34:	080131b8 	.word	0x080131b8
 800ef38:	080131bc 	.word	0x080131bc
 800ef3c:	080131c0 	.word	0x080131c0
 800ef40:	080131c4 	.word	0x080131c4
 800ef44:	9a08      	ldr	r2, [sp, #32]
 800ef46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	bfa8      	it	ge
 800ef4c:	461a      	movge	r2, r3
 800ef4e:	2a00      	cmp	r2, #0
 800ef50:	4691      	mov	r9, r2
 800ef52:	dc38      	bgt.n	800efc6 <_printf_float+0x33e>
 800ef54:	2300      	movs	r3, #0
 800ef56:	9305      	str	r3, [sp, #20]
 800ef58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ef5c:	f104 021a 	add.w	r2, r4, #26
 800ef60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ef62:	9905      	ldr	r1, [sp, #20]
 800ef64:	9304      	str	r3, [sp, #16]
 800ef66:	eba3 0309 	sub.w	r3, r3, r9
 800ef6a:	428b      	cmp	r3, r1
 800ef6c:	dc33      	bgt.n	800efd6 <_printf_float+0x34e>
 800ef6e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	db3c      	blt.n	800eff0 <_printf_float+0x368>
 800ef76:	6823      	ldr	r3, [r4, #0]
 800ef78:	07da      	lsls	r2, r3, #31
 800ef7a:	d439      	bmi.n	800eff0 <_printf_float+0x368>
 800ef7c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800ef80:	eba2 0903 	sub.w	r9, r2, r3
 800ef84:	9b04      	ldr	r3, [sp, #16]
 800ef86:	1ad2      	subs	r2, r2, r3
 800ef88:	4591      	cmp	r9, r2
 800ef8a:	bfa8      	it	ge
 800ef8c:	4691      	movge	r9, r2
 800ef8e:	f1b9 0f00 	cmp.w	r9, #0
 800ef92:	dc35      	bgt.n	800f000 <_printf_float+0x378>
 800ef94:	f04f 0800 	mov.w	r8, #0
 800ef98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ef9c:	f104 0a1a 	add.w	sl, r4, #26
 800efa0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800efa4:	1a9b      	subs	r3, r3, r2
 800efa6:	eba3 0309 	sub.w	r3, r3, r9
 800efaa:	4543      	cmp	r3, r8
 800efac:	f77f af77 	ble.w	800ee9e <_printf_float+0x216>
 800efb0:	2301      	movs	r3, #1
 800efb2:	4652      	mov	r2, sl
 800efb4:	4631      	mov	r1, r6
 800efb6:	4628      	mov	r0, r5
 800efb8:	47b8      	blx	r7
 800efba:	3001      	adds	r0, #1
 800efbc:	f43f aeb0 	beq.w	800ed20 <_printf_float+0x98>
 800efc0:	f108 0801 	add.w	r8, r8, #1
 800efc4:	e7ec      	b.n	800efa0 <_printf_float+0x318>
 800efc6:	4613      	mov	r3, r2
 800efc8:	4631      	mov	r1, r6
 800efca:	4642      	mov	r2, r8
 800efcc:	4628      	mov	r0, r5
 800efce:	47b8      	blx	r7
 800efd0:	3001      	adds	r0, #1
 800efd2:	d1bf      	bne.n	800ef54 <_printf_float+0x2cc>
 800efd4:	e6a4      	b.n	800ed20 <_printf_float+0x98>
 800efd6:	2301      	movs	r3, #1
 800efd8:	4631      	mov	r1, r6
 800efda:	4628      	mov	r0, r5
 800efdc:	9204      	str	r2, [sp, #16]
 800efde:	47b8      	blx	r7
 800efe0:	3001      	adds	r0, #1
 800efe2:	f43f ae9d 	beq.w	800ed20 <_printf_float+0x98>
 800efe6:	9b05      	ldr	r3, [sp, #20]
 800efe8:	9a04      	ldr	r2, [sp, #16]
 800efea:	3301      	adds	r3, #1
 800efec:	9305      	str	r3, [sp, #20]
 800efee:	e7b7      	b.n	800ef60 <_printf_float+0x2d8>
 800eff0:	4653      	mov	r3, sl
 800eff2:	465a      	mov	r2, fp
 800eff4:	4631      	mov	r1, r6
 800eff6:	4628      	mov	r0, r5
 800eff8:	47b8      	blx	r7
 800effa:	3001      	adds	r0, #1
 800effc:	d1be      	bne.n	800ef7c <_printf_float+0x2f4>
 800effe:	e68f      	b.n	800ed20 <_printf_float+0x98>
 800f000:	9a04      	ldr	r2, [sp, #16]
 800f002:	464b      	mov	r3, r9
 800f004:	4442      	add	r2, r8
 800f006:	4631      	mov	r1, r6
 800f008:	4628      	mov	r0, r5
 800f00a:	47b8      	blx	r7
 800f00c:	3001      	adds	r0, #1
 800f00e:	d1c1      	bne.n	800ef94 <_printf_float+0x30c>
 800f010:	e686      	b.n	800ed20 <_printf_float+0x98>
 800f012:	9a08      	ldr	r2, [sp, #32]
 800f014:	2a01      	cmp	r2, #1
 800f016:	dc01      	bgt.n	800f01c <_printf_float+0x394>
 800f018:	07db      	lsls	r3, r3, #31
 800f01a:	d537      	bpl.n	800f08c <_printf_float+0x404>
 800f01c:	2301      	movs	r3, #1
 800f01e:	4642      	mov	r2, r8
 800f020:	4631      	mov	r1, r6
 800f022:	4628      	mov	r0, r5
 800f024:	47b8      	blx	r7
 800f026:	3001      	adds	r0, #1
 800f028:	f43f ae7a 	beq.w	800ed20 <_printf_float+0x98>
 800f02c:	4653      	mov	r3, sl
 800f02e:	465a      	mov	r2, fp
 800f030:	4631      	mov	r1, r6
 800f032:	4628      	mov	r0, r5
 800f034:	47b8      	blx	r7
 800f036:	3001      	adds	r0, #1
 800f038:	f43f ae72 	beq.w	800ed20 <_printf_float+0x98>
 800f03c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f040:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f048:	9b08      	ldr	r3, [sp, #32]
 800f04a:	d01a      	beq.n	800f082 <_printf_float+0x3fa>
 800f04c:	3b01      	subs	r3, #1
 800f04e:	f108 0201 	add.w	r2, r8, #1
 800f052:	4631      	mov	r1, r6
 800f054:	4628      	mov	r0, r5
 800f056:	47b8      	blx	r7
 800f058:	3001      	adds	r0, #1
 800f05a:	d10e      	bne.n	800f07a <_printf_float+0x3f2>
 800f05c:	e660      	b.n	800ed20 <_printf_float+0x98>
 800f05e:	2301      	movs	r3, #1
 800f060:	464a      	mov	r2, r9
 800f062:	4631      	mov	r1, r6
 800f064:	4628      	mov	r0, r5
 800f066:	47b8      	blx	r7
 800f068:	3001      	adds	r0, #1
 800f06a:	f43f ae59 	beq.w	800ed20 <_printf_float+0x98>
 800f06e:	f108 0801 	add.w	r8, r8, #1
 800f072:	9b08      	ldr	r3, [sp, #32]
 800f074:	3b01      	subs	r3, #1
 800f076:	4543      	cmp	r3, r8
 800f078:	dcf1      	bgt.n	800f05e <_printf_float+0x3d6>
 800f07a:	9b04      	ldr	r3, [sp, #16]
 800f07c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f080:	e6dd      	b.n	800ee3e <_printf_float+0x1b6>
 800f082:	f04f 0800 	mov.w	r8, #0
 800f086:	f104 091a 	add.w	r9, r4, #26
 800f08a:	e7f2      	b.n	800f072 <_printf_float+0x3ea>
 800f08c:	2301      	movs	r3, #1
 800f08e:	4642      	mov	r2, r8
 800f090:	e7df      	b.n	800f052 <_printf_float+0x3ca>
 800f092:	2301      	movs	r3, #1
 800f094:	464a      	mov	r2, r9
 800f096:	4631      	mov	r1, r6
 800f098:	4628      	mov	r0, r5
 800f09a:	47b8      	blx	r7
 800f09c:	3001      	adds	r0, #1
 800f09e:	f43f ae3f 	beq.w	800ed20 <_printf_float+0x98>
 800f0a2:	f108 0801 	add.w	r8, r8, #1
 800f0a6:	68e3      	ldr	r3, [r4, #12]
 800f0a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f0aa:	1a5b      	subs	r3, r3, r1
 800f0ac:	4543      	cmp	r3, r8
 800f0ae:	dcf0      	bgt.n	800f092 <_printf_float+0x40a>
 800f0b0:	e6f9      	b.n	800eea6 <_printf_float+0x21e>
 800f0b2:	f04f 0800 	mov.w	r8, #0
 800f0b6:	f104 0919 	add.w	r9, r4, #25
 800f0ba:	e7f4      	b.n	800f0a6 <_printf_float+0x41e>

0800f0bc <_printf_common>:
 800f0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0c0:	4616      	mov	r6, r2
 800f0c2:	4699      	mov	r9, r3
 800f0c4:	688a      	ldr	r2, [r1, #8]
 800f0c6:	690b      	ldr	r3, [r1, #16]
 800f0c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	bfb8      	it	lt
 800f0d0:	4613      	movlt	r3, r2
 800f0d2:	6033      	str	r3, [r6, #0]
 800f0d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f0d8:	4607      	mov	r7, r0
 800f0da:	460c      	mov	r4, r1
 800f0dc:	b10a      	cbz	r2, 800f0e2 <_printf_common+0x26>
 800f0de:	3301      	adds	r3, #1
 800f0e0:	6033      	str	r3, [r6, #0]
 800f0e2:	6823      	ldr	r3, [r4, #0]
 800f0e4:	0699      	lsls	r1, r3, #26
 800f0e6:	bf42      	ittt	mi
 800f0e8:	6833      	ldrmi	r3, [r6, #0]
 800f0ea:	3302      	addmi	r3, #2
 800f0ec:	6033      	strmi	r3, [r6, #0]
 800f0ee:	6825      	ldr	r5, [r4, #0]
 800f0f0:	f015 0506 	ands.w	r5, r5, #6
 800f0f4:	d106      	bne.n	800f104 <_printf_common+0x48>
 800f0f6:	f104 0a19 	add.w	sl, r4, #25
 800f0fa:	68e3      	ldr	r3, [r4, #12]
 800f0fc:	6832      	ldr	r2, [r6, #0]
 800f0fe:	1a9b      	subs	r3, r3, r2
 800f100:	42ab      	cmp	r3, r5
 800f102:	dc26      	bgt.n	800f152 <_printf_common+0x96>
 800f104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f108:	1e13      	subs	r3, r2, #0
 800f10a:	6822      	ldr	r2, [r4, #0]
 800f10c:	bf18      	it	ne
 800f10e:	2301      	movne	r3, #1
 800f110:	0692      	lsls	r2, r2, #26
 800f112:	d42b      	bmi.n	800f16c <_printf_common+0xb0>
 800f114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f118:	4649      	mov	r1, r9
 800f11a:	4638      	mov	r0, r7
 800f11c:	47c0      	blx	r8
 800f11e:	3001      	adds	r0, #1
 800f120:	d01e      	beq.n	800f160 <_printf_common+0xa4>
 800f122:	6823      	ldr	r3, [r4, #0]
 800f124:	6922      	ldr	r2, [r4, #16]
 800f126:	f003 0306 	and.w	r3, r3, #6
 800f12a:	2b04      	cmp	r3, #4
 800f12c:	bf02      	ittt	eq
 800f12e:	68e5      	ldreq	r5, [r4, #12]
 800f130:	6833      	ldreq	r3, [r6, #0]
 800f132:	1aed      	subeq	r5, r5, r3
 800f134:	68a3      	ldr	r3, [r4, #8]
 800f136:	bf0c      	ite	eq
 800f138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f13c:	2500      	movne	r5, #0
 800f13e:	4293      	cmp	r3, r2
 800f140:	bfc4      	itt	gt
 800f142:	1a9b      	subgt	r3, r3, r2
 800f144:	18ed      	addgt	r5, r5, r3
 800f146:	2600      	movs	r6, #0
 800f148:	341a      	adds	r4, #26
 800f14a:	42b5      	cmp	r5, r6
 800f14c:	d11a      	bne.n	800f184 <_printf_common+0xc8>
 800f14e:	2000      	movs	r0, #0
 800f150:	e008      	b.n	800f164 <_printf_common+0xa8>
 800f152:	2301      	movs	r3, #1
 800f154:	4652      	mov	r2, sl
 800f156:	4649      	mov	r1, r9
 800f158:	4638      	mov	r0, r7
 800f15a:	47c0      	blx	r8
 800f15c:	3001      	adds	r0, #1
 800f15e:	d103      	bne.n	800f168 <_printf_common+0xac>
 800f160:	f04f 30ff 	mov.w	r0, #4294967295
 800f164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f168:	3501      	adds	r5, #1
 800f16a:	e7c6      	b.n	800f0fa <_printf_common+0x3e>
 800f16c:	18e1      	adds	r1, r4, r3
 800f16e:	1c5a      	adds	r2, r3, #1
 800f170:	2030      	movs	r0, #48	; 0x30
 800f172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f176:	4422      	add	r2, r4
 800f178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f17c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f180:	3302      	adds	r3, #2
 800f182:	e7c7      	b.n	800f114 <_printf_common+0x58>
 800f184:	2301      	movs	r3, #1
 800f186:	4622      	mov	r2, r4
 800f188:	4649      	mov	r1, r9
 800f18a:	4638      	mov	r0, r7
 800f18c:	47c0      	blx	r8
 800f18e:	3001      	adds	r0, #1
 800f190:	d0e6      	beq.n	800f160 <_printf_common+0xa4>
 800f192:	3601      	adds	r6, #1
 800f194:	e7d9      	b.n	800f14a <_printf_common+0x8e>
	...

0800f198 <_printf_i>:
 800f198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f19c:	7e0f      	ldrb	r7, [r1, #24]
 800f19e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f1a0:	2f78      	cmp	r7, #120	; 0x78
 800f1a2:	4691      	mov	r9, r2
 800f1a4:	4680      	mov	r8, r0
 800f1a6:	460c      	mov	r4, r1
 800f1a8:	469a      	mov	sl, r3
 800f1aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f1ae:	d807      	bhi.n	800f1c0 <_printf_i+0x28>
 800f1b0:	2f62      	cmp	r7, #98	; 0x62
 800f1b2:	d80a      	bhi.n	800f1ca <_printf_i+0x32>
 800f1b4:	2f00      	cmp	r7, #0
 800f1b6:	f000 80d4 	beq.w	800f362 <_printf_i+0x1ca>
 800f1ba:	2f58      	cmp	r7, #88	; 0x58
 800f1bc:	f000 80c0 	beq.w	800f340 <_printf_i+0x1a8>
 800f1c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f1c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f1c8:	e03a      	b.n	800f240 <_printf_i+0xa8>
 800f1ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f1ce:	2b15      	cmp	r3, #21
 800f1d0:	d8f6      	bhi.n	800f1c0 <_printf_i+0x28>
 800f1d2:	a101      	add	r1, pc, #4	; (adr r1, 800f1d8 <_printf_i+0x40>)
 800f1d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f1d8:	0800f231 	.word	0x0800f231
 800f1dc:	0800f245 	.word	0x0800f245
 800f1e0:	0800f1c1 	.word	0x0800f1c1
 800f1e4:	0800f1c1 	.word	0x0800f1c1
 800f1e8:	0800f1c1 	.word	0x0800f1c1
 800f1ec:	0800f1c1 	.word	0x0800f1c1
 800f1f0:	0800f245 	.word	0x0800f245
 800f1f4:	0800f1c1 	.word	0x0800f1c1
 800f1f8:	0800f1c1 	.word	0x0800f1c1
 800f1fc:	0800f1c1 	.word	0x0800f1c1
 800f200:	0800f1c1 	.word	0x0800f1c1
 800f204:	0800f349 	.word	0x0800f349
 800f208:	0800f271 	.word	0x0800f271
 800f20c:	0800f303 	.word	0x0800f303
 800f210:	0800f1c1 	.word	0x0800f1c1
 800f214:	0800f1c1 	.word	0x0800f1c1
 800f218:	0800f36b 	.word	0x0800f36b
 800f21c:	0800f1c1 	.word	0x0800f1c1
 800f220:	0800f271 	.word	0x0800f271
 800f224:	0800f1c1 	.word	0x0800f1c1
 800f228:	0800f1c1 	.word	0x0800f1c1
 800f22c:	0800f30b 	.word	0x0800f30b
 800f230:	682b      	ldr	r3, [r5, #0]
 800f232:	1d1a      	adds	r2, r3, #4
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	602a      	str	r2, [r5, #0]
 800f238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f23c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f240:	2301      	movs	r3, #1
 800f242:	e09f      	b.n	800f384 <_printf_i+0x1ec>
 800f244:	6820      	ldr	r0, [r4, #0]
 800f246:	682b      	ldr	r3, [r5, #0]
 800f248:	0607      	lsls	r7, r0, #24
 800f24a:	f103 0104 	add.w	r1, r3, #4
 800f24e:	6029      	str	r1, [r5, #0]
 800f250:	d501      	bpl.n	800f256 <_printf_i+0xbe>
 800f252:	681e      	ldr	r6, [r3, #0]
 800f254:	e003      	b.n	800f25e <_printf_i+0xc6>
 800f256:	0646      	lsls	r6, r0, #25
 800f258:	d5fb      	bpl.n	800f252 <_printf_i+0xba>
 800f25a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f25e:	2e00      	cmp	r6, #0
 800f260:	da03      	bge.n	800f26a <_printf_i+0xd2>
 800f262:	232d      	movs	r3, #45	; 0x2d
 800f264:	4276      	negs	r6, r6
 800f266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f26a:	485a      	ldr	r0, [pc, #360]	; (800f3d4 <_printf_i+0x23c>)
 800f26c:	230a      	movs	r3, #10
 800f26e:	e012      	b.n	800f296 <_printf_i+0xfe>
 800f270:	682b      	ldr	r3, [r5, #0]
 800f272:	6820      	ldr	r0, [r4, #0]
 800f274:	1d19      	adds	r1, r3, #4
 800f276:	6029      	str	r1, [r5, #0]
 800f278:	0605      	lsls	r5, r0, #24
 800f27a:	d501      	bpl.n	800f280 <_printf_i+0xe8>
 800f27c:	681e      	ldr	r6, [r3, #0]
 800f27e:	e002      	b.n	800f286 <_printf_i+0xee>
 800f280:	0641      	lsls	r1, r0, #25
 800f282:	d5fb      	bpl.n	800f27c <_printf_i+0xe4>
 800f284:	881e      	ldrh	r6, [r3, #0]
 800f286:	4853      	ldr	r0, [pc, #332]	; (800f3d4 <_printf_i+0x23c>)
 800f288:	2f6f      	cmp	r7, #111	; 0x6f
 800f28a:	bf0c      	ite	eq
 800f28c:	2308      	moveq	r3, #8
 800f28e:	230a      	movne	r3, #10
 800f290:	2100      	movs	r1, #0
 800f292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f296:	6865      	ldr	r5, [r4, #4]
 800f298:	60a5      	str	r5, [r4, #8]
 800f29a:	2d00      	cmp	r5, #0
 800f29c:	bfa2      	ittt	ge
 800f29e:	6821      	ldrge	r1, [r4, #0]
 800f2a0:	f021 0104 	bicge.w	r1, r1, #4
 800f2a4:	6021      	strge	r1, [r4, #0]
 800f2a6:	b90e      	cbnz	r6, 800f2ac <_printf_i+0x114>
 800f2a8:	2d00      	cmp	r5, #0
 800f2aa:	d04b      	beq.n	800f344 <_printf_i+0x1ac>
 800f2ac:	4615      	mov	r5, r2
 800f2ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800f2b2:	fb03 6711 	mls	r7, r3, r1, r6
 800f2b6:	5dc7      	ldrb	r7, [r0, r7]
 800f2b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f2bc:	4637      	mov	r7, r6
 800f2be:	42bb      	cmp	r3, r7
 800f2c0:	460e      	mov	r6, r1
 800f2c2:	d9f4      	bls.n	800f2ae <_printf_i+0x116>
 800f2c4:	2b08      	cmp	r3, #8
 800f2c6:	d10b      	bne.n	800f2e0 <_printf_i+0x148>
 800f2c8:	6823      	ldr	r3, [r4, #0]
 800f2ca:	07de      	lsls	r6, r3, #31
 800f2cc:	d508      	bpl.n	800f2e0 <_printf_i+0x148>
 800f2ce:	6923      	ldr	r3, [r4, #16]
 800f2d0:	6861      	ldr	r1, [r4, #4]
 800f2d2:	4299      	cmp	r1, r3
 800f2d4:	bfde      	ittt	le
 800f2d6:	2330      	movle	r3, #48	; 0x30
 800f2d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f2dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f2e0:	1b52      	subs	r2, r2, r5
 800f2e2:	6122      	str	r2, [r4, #16]
 800f2e4:	f8cd a000 	str.w	sl, [sp]
 800f2e8:	464b      	mov	r3, r9
 800f2ea:	aa03      	add	r2, sp, #12
 800f2ec:	4621      	mov	r1, r4
 800f2ee:	4640      	mov	r0, r8
 800f2f0:	f7ff fee4 	bl	800f0bc <_printf_common>
 800f2f4:	3001      	adds	r0, #1
 800f2f6:	d14a      	bne.n	800f38e <_printf_i+0x1f6>
 800f2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f2fc:	b004      	add	sp, #16
 800f2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f302:	6823      	ldr	r3, [r4, #0]
 800f304:	f043 0320 	orr.w	r3, r3, #32
 800f308:	6023      	str	r3, [r4, #0]
 800f30a:	4833      	ldr	r0, [pc, #204]	; (800f3d8 <_printf_i+0x240>)
 800f30c:	2778      	movs	r7, #120	; 0x78
 800f30e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f312:	6823      	ldr	r3, [r4, #0]
 800f314:	6829      	ldr	r1, [r5, #0]
 800f316:	061f      	lsls	r7, r3, #24
 800f318:	f851 6b04 	ldr.w	r6, [r1], #4
 800f31c:	d402      	bmi.n	800f324 <_printf_i+0x18c>
 800f31e:	065f      	lsls	r7, r3, #25
 800f320:	bf48      	it	mi
 800f322:	b2b6      	uxthmi	r6, r6
 800f324:	07df      	lsls	r7, r3, #31
 800f326:	bf48      	it	mi
 800f328:	f043 0320 	orrmi.w	r3, r3, #32
 800f32c:	6029      	str	r1, [r5, #0]
 800f32e:	bf48      	it	mi
 800f330:	6023      	strmi	r3, [r4, #0]
 800f332:	b91e      	cbnz	r6, 800f33c <_printf_i+0x1a4>
 800f334:	6823      	ldr	r3, [r4, #0]
 800f336:	f023 0320 	bic.w	r3, r3, #32
 800f33a:	6023      	str	r3, [r4, #0]
 800f33c:	2310      	movs	r3, #16
 800f33e:	e7a7      	b.n	800f290 <_printf_i+0xf8>
 800f340:	4824      	ldr	r0, [pc, #144]	; (800f3d4 <_printf_i+0x23c>)
 800f342:	e7e4      	b.n	800f30e <_printf_i+0x176>
 800f344:	4615      	mov	r5, r2
 800f346:	e7bd      	b.n	800f2c4 <_printf_i+0x12c>
 800f348:	682b      	ldr	r3, [r5, #0]
 800f34a:	6826      	ldr	r6, [r4, #0]
 800f34c:	6961      	ldr	r1, [r4, #20]
 800f34e:	1d18      	adds	r0, r3, #4
 800f350:	6028      	str	r0, [r5, #0]
 800f352:	0635      	lsls	r5, r6, #24
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	d501      	bpl.n	800f35c <_printf_i+0x1c4>
 800f358:	6019      	str	r1, [r3, #0]
 800f35a:	e002      	b.n	800f362 <_printf_i+0x1ca>
 800f35c:	0670      	lsls	r0, r6, #25
 800f35e:	d5fb      	bpl.n	800f358 <_printf_i+0x1c0>
 800f360:	8019      	strh	r1, [r3, #0]
 800f362:	2300      	movs	r3, #0
 800f364:	6123      	str	r3, [r4, #16]
 800f366:	4615      	mov	r5, r2
 800f368:	e7bc      	b.n	800f2e4 <_printf_i+0x14c>
 800f36a:	682b      	ldr	r3, [r5, #0]
 800f36c:	1d1a      	adds	r2, r3, #4
 800f36e:	602a      	str	r2, [r5, #0]
 800f370:	681d      	ldr	r5, [r3, #0]
 800f372:	6862      	ldr	r2, [r4, #4]
 800f374:	2100      	movs	r1, #0
 800f376:	4628      	mov	r0, r5
 800f378:	f7f0 ffb2 	bl	80002e0 <memchr>
 800f37c:	b108      	cbz	r0, 800f382 <_printf_i+0x1ea>
 800f37e:	1b40      	subs	r0, r0, r5
 800f380:	6060      	str	r0, [r4, #4]
 800f382:	6863      	ldr	r3, [r4, #4]
 800f384:	6123      	str	r3, [r4, #16]
 800f386:	2300      	movs	r3, #0
 800f388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f38c:	e7aa      	b.n	800f2e4 <_printf_i+0x14c>
 800f38e:	6923      	ldr	r3, [r4, #16]
 800f390:	462a      	mov	r2, r5
 800f392:	4649      	mov	r1, r9
 800f394:	4640      	mov	r0, r8
 800f396:	47d0      	blx	sl
 800f398:	3001      	adds	r0, #1
 800f39a:	d0ad      	beq.n	800f2f8 <_printf_i+0x160>
 800f39c:	6823      	ldr	r3, [r4, #0]
 800f39e:	079b      	lsls	r3, r3, #30
 800f3a0:	d413      	bmi.n	800f3ca <_printf_i+0x232>
 800f3a2:	68e0      	ldr	r0, [r4, #12]
 800f3a4:	9b03      	ldr	r3, [sp, #12]
 800f3a6:	4298      	cmp	r0, r3
 800f3a8:	bfb8      	it	lt
 800f3aa:	4618      	movlt	r0, r3
 800f3ac:	e7a6      	b.n	800f2fc <_printf_i+0x164>
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	4632      	mov	r2, r6
 800f3b2:	4649      	mov	r1, r9
 800f3b4:	4640      	mov	r0, r8
 800f3b6:	47d0      	blx	sl
 800f3b8:	3001      	adds	r0, #1
 800f3ba:	d09d      	beq.n	800f2f8 <_printf_i+0x160>
 800f3bc:	3501      	adds	r5, #1
 800f3be:	68e3      	ldr	r3, [r4, #12]
 800f3c0:	9903      	ldr	r1, [sp, #12]
 800f3c2:	1a5b      	subs	r3, r3, r1
 800f3c4:	42ab      	cmp	r3, r5
 800f3c6:	dcf2      	bgt.n	800f3ae <_printf_i+0x216>
 800f3c8:	e7eb      	b.n	800f3a2 <_printf_i+0x20a>
 800f3ca:	2500      	movs	r5, #0
 800f3cc:	f104 0619 	add.w	r6, r4, #25
 800f3d0:	e7f5      	b.n	800f3be <_printf_i+0x226>
 800f3d2:	bf00      	nop
 800f3d4:	080131c6 	.word	0x080131c6
 800f3d8:	080131d7 	.word	0x080131d7

0800f3dc <std>:
 800f3dc:	2300      	movs	r3, #0
 800f3de:	b510      	push	{r4, lr}
 800f3e0:	4604      	mov	r4, r0
 800f3e2:	e9c0 3300 	strd	r3, r3, [r0]
 800f3e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3ea:	6083      	str	r3, [r0, #8]
 800f3ec:	8181      	strh	r1, [r0, #12]
 800f3ee:	6643      	str	r3, [r0, #100]	; 0x64
 800f3f0:	81c2      	strh	r2, [r0, #14]
 800f3f2:	6183      	str	r3, [r0, #24]
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	2208      	movs	r2, #8
 800f3f8:	305c      	adds	r0, #92	; 0x5c
 800f3fa:	f000 fa17 	bl	800f82c <memset>
 800f3fe:	4b0d      	ldr	r3, [pc, #52]	; (800f434 <std+0x58>)
 800f400:	6263      	str	r3, [r4, #36]	; 0x24
 800f402:	4b0d      	ldr	r3, [pc, #52]	; (800f438 <std+0x5c>)
 800f404:	62a3      	str	r3, [r4, #40]	; 0x28
 800f406:	4b0d      	ldr	r3, [pc, #52]	; (800f43c <std+0x60>)
 800f408:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f40a:	4b0d      	ldr	r3, [pc, #52]	; (800f440 <std+0x64>)
 800f40c:	6323      	str	r3, [r4, #48]	; 0x30
 800f40e:	4b0d      	ldr	r3, [pc, #52]	; (800f444 <std+0x68>)
 800f410:	6224      	str	r4, [r4, #32]
 800f412:	429c      	cmp	r4, r3
 800f414:	d006      	beq.n	800f424 <std+0x48>
 800f416:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f41a:	4294      	cmp	r4, r2
 800f41c:	d002      	beq.n	800f424 <std+0x48>
 800f41e:	33d0      	adds	r3, #208	; 0xd0
 800f420:	429c      	cmp	r4, r3
 800f422:	d105      	bne.n	800f430 <std+0x54>
 800f424:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f42c:	f000 bad0 	b.w	800f9d0 <__retarget_lock_init_recursive>
 800f430:	bd10      	pop	{r4, pc}
 800f432:	bf00      	nop
 800f434:	0800f67d 	.word	0x0800f67d
 800f438:	0800f69f 	.word	0x0800f69f
 800f43c:	0800f6d7 	.word	0x0800f6d7
 800f440:	0800f6fb 	.word	0x0800f6fb
 800f444:	24005398 	.word	0x24005398

0800f448 <stdio_exit_handler>:
 800f448:	4a02      	ldr	r2, [pc, #8]	; (800f454 <stdio_exit_handler+0xc>)
 800f44a:	4903      	ldr	r1, [pc, #12]	; (800f458 <stdio_exit_handler+0x10>)
 800f44c:	4803      	ldr	r0, [pc, #12]	; (800f45c <stdio_exit_handler+0x14>)
 800f44e:	f000 b869 	b.w	800f524 <_fwalk_sglue>
 800f452:	bf00      	nop
 800f454:	2400001c 	.word	0x2400001c
 800f458:	0801151d 	.word	0x0801151d
 800f45c:	24000028 	.word	0x24000028

0800f460 <cleanup_stdio>:
 800f460:	6841      	ldr	r1, [r0, #4]
 800f462:	4b0c      	ldr	r3, [pc, #48]	; (800f494 <cleanup_stdio+0x34>)
 800f464:	4299      	cmp	r1, r3
 800f466:	b510      	push	{r4, lr}
 800f468:	4604      	mov	r4, r0
 800f46a:	d001      	beq.n	800f470 <cleanup_stdio+0x10>
 800f46c:	f002 f856 	bl	801151c <_fflush_r>
 800f470:	68a1      	ldr	r1, [r4, #8]
 800f472:	4b09      	ldr	r3, [pc, #36]	; (800f498 <cleanup_stdio+0x38>)
 800f474:	4299      	cmp	r1, r3
 800f476:	d002      	beq.n	800f47e <cleanup_stdio+0x1e>
 800f478:	4620      	mov	r0, r4
 800f47a:	f002 f84f 	bl	801151c <_fflush_r>
 800f47e:	68e1      	ldr	r1, [r4, #12]
 800f480:	4b06      	ldr	r3, [pc, #24]	; (800f49c <cleanup_stdio+0x3c>)
 800f482:	4299      	cmp	r1, r3
 800f484:	d004      	beq.n	800f490 <cleanup_stdio+0x30>
 800f486:	4620      	mov	r0, r4
 800f488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f48c:	f002 b846 	b.w	801151c <_fflush_r>
 800f490:	bd10      	pop	{r4, pc}
 800f492:	bf00      	nop
 800f494:	24005398 	.word	0x24005398
 800f498:	24005400 	.word	0x24005400
 800f49c:	24005468 	.word	0x24005468

0800f4a0 <global_stdio_init.part.0>:
 800f4a0:	b510      	push	{r4, lr}
 800f4a2:	4b0b      	ldr	r3, [pc, #44]	; (800f4d0 <global_stdio_init.part.0+0x30>)
 800f4a4:	4c0b      	ldr	r4, [pc, #44]	; (800f4d4 <global_stdio_init.part.0+0x34>)
 800f4a6:	4a0c      	ldr	r2, [pc, #48]	; (800f4d8 <global_stdio_init.part.0+0x38>)
 800f4a8:	601a      	str	r2, [r3, #0]
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	2104      	movs	r1, #4
 800f4b0:	f7ff ff94 	bl	800f3dc <std>
 800f4b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	2109      	movs	r1, #9
 800f4bc:	f7ff ff8e 	bl	800f3dc <std>
 800f4c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f4c4:	2202      	movs	r2, #2
 800f4c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4ca:	2112      	movs	r1, #18
 800f4cc:	f7ff bf86 	b.w	800f3dc <std>
 800f4d0:	240054d0 	.word	0x240054d0
 800f4d4:	24005398 	.word	0x24005398
 800f4d8:	0800f449 	.word	0x0800f449

0800f4dc <__sfp_lock_acquire>:
 800f4dc:	4801      	ldr	r0, [pc, #4]	; (800f4e4 <__sfp_lock_acquire+0x8>)
 800f4de:	f000 ba78 	b.w	800f9d2 <__retarget_lock_acquire_recursive>
 800f4e2:	bf00      	nop
 800f4e4:	240054d9 	.word	0x240054d9

0800f4e8 <__sfp_lock_release>:
 800f4e8:	4801      	ldr	r0, [pc, #4]	; (800f4f0 <__sfp_lock_release+0x8>)
 800f4ea:	f000 ba73 	b.w	800f9d4 <__retarget_lock_release_recursive>
 800f4ee:	bf00      	nop
 800f4f0:	240054d9 	.word	0x240054d9

0800f4f4 <__sinit>:
 800f4f4:	b510      	push	{r4, lr}
 800f4f6:	4604      	mov	r4, r0
 800f4f8:	f7ff fff0 	bl	800f4dc <__sfp_lock_acquire>
 800f4fc:	6a23      	ldr	r3, [r4, #32]
 800f4fe:	b11b      	cbz	r3, 800f508 <__sinit+0x14>
 800f500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f504:	f7ff bff0 	b.w	800f4e8 <__sfp_lock_release>
 800f508:	4b04      	ldr	r3, [pc, #16]	; (800f51c <__sinit+0x28>)
 800f50a:	6223      	str	r3, [r4, #32]
 800f50c:	4b04      	ldr	r3, [pc, #16]	; (800f520 <__sinit+0x2c>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d1f5      	bne.n	800f500 <__sinit+0xc>
 800f514:	f7ff ffc4 	bl	800f4a0 <global_stdio_init.part.0>
 800f518:	e7f2      	b.n	800f500 <__sinit+0xc>
 800f51a:	bf00      	nop
 800f51c:	0800f461 	.word	0x0800f461
 800f520:	240054d0 	.word	0x240054d0

0800f524 <_fwalk_sglue>:
 800f524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f528:	4607      	mov	r7, r0
 800f52a:	4688      	mov	r8, r1
 800f52c:	4614      	mov	r4, r2
 800f52e:	2600      	movs	r6, #0
 800f530:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f534:	f1b9 0901 	subs.w	r9, r9, #1
 800f538:	d505      	bpl.n	800f546 <_fwalk_sglue+0x22>
 800f53a:	6824      	ldr	r4, [r4, #0]
 800f53c:	2c00      	cmp	r4, #0
 800f53e:	d1f7      	bne.n	800f530 <_fwalk_sglue+0xc>
 800f540:	4630      	mov	r0, r6
 800f542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f546:	89ab      	ldrh	r3, [r5, #12]
 800f548:	2b01      	cmp	r3, #1
 800f54a:	d907      	bls.n	800f55c <_fwalk_sglue+0x38>
 800f54c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f550:	3301      	adds	r3, #1
 800f552:	d003      	beq.n	800f55c <_fwalk_sglue+0x38>
 800f554:	4629      	mov	r1, r5
 800f556:	4638      	mov	r0, r7
 800f558:	47c0      	blx	r8
 800f55a:	4306      	orrs	r6, r0
 800f55c:	3568      	adds	r5, #104	; 0x68
 800f55e:	e7e9      	b.n	800f534 <_fwalk_sglue+0x10>

0800f560 <iprintf>:
 800f560:	b40f      	push	{r0, r1, r2, r3}
 800f562:	b507      	push	{r0, r1, r2, lr}
 800f564:	4906      	ldr	r1, [pc, #24]	; (800f580 <iprintf+0x20>)
 800f566:	ab04      	add	r3, sp, #16
 800f568:	6808      	ldr	r0, [r1, #0]
 800f56a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f56e:	6881      	ldr	r1, [r0, #8]
 800f570:	9301      	str	r3, [sp, #4]
 800f572:	f001 fe33 	bl	80111dc <_vfiprintf_r>
 800f576:	b003      	add	sp, #12
 800f578:	f85d eb04 	ldr.w	lr, [sp], #4
 800f57c:	b004      	add	sp, #16
 800f57e:	4770      	bx	lr
 800f580:	24000074 	.word	0x24000074

0800f584 <_puts_r>:
 800f584:	6a03      	ldr	r3, [r0, #32]
 800f586:	b570      	push	{r4, r5, r6, lr}
 800f588:	6884      	ldr	r4, [r0, #8]
 800f58a:	4605      	mov	r5, r0
 800f58c:	460e      	mov	r6, r1
 800f58e:	b90b      	cbnz	r3, 800f594 <_puts_r+0x10>
 800f590:	f7ff ffb0 	bl	800f4f4 <__sinit>
 800f594:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f596:	07db      	lsls	r3, r3, #31
 800f598:	d405      	bmi.n	800f5a6 <_puts_r+0x22>
 800f59a:	89a3      	ldrh	r3, [r4, #12]
 800f59c:	0598      	lsls	r0, r3, #22
 800f59e:	d402      	bmi.n	800f5a6 <_puts_r+0x22>
 800f5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5a2:	f000 fa16 	bl	800f9d2 <__retarget_lock_acquire_recursive>
 800f5a6:	89a3      	ldrh	r3, [r4, #12]
 800f5a8:	0719      	lsls	r1, r3, #28
 800f5aa:	d513      	bpl.n	800f5d4 <_puts_r+0x50>
 800f5ac:	6923      	ldr	r3, [r4, #16]
 800f5ae:	b18b      	cbz	r3, 800f5d4 <_puts_r+0x50>
 800f5b0:	3e01      	subs	r6, #1
 800f5b2:	68a3      	ldr	r3, [r4, #8]
 800f5b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f5b8:	3b01      	subs	r3, #1
 800f5ba:	60a3      	str	r3, [r4, #8]
 800f5bc:	b9e9      	cbnz	r1, 800f5fa <_puts_r+0x76>
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	da2e      	bge.n	800f620 <_puts_r+0x9c>
 800f5c2:	4622      	mov	r2, r4
 800f5c4:	210a      	movs	r1, #10
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	f000 f89b 	bl	800f702 <__swbuf_r>
 800f5cc:	3001      	adds	r0, #1
 800f5ce:	d007      	beq.n	800f5e0 <_puts_r+0x5c>
 800f5d0:	250a      	movs	r5, #10
 800f5d2:	e007      	b.n	800f5e4 <_puts_r+0x60>
 800f5d4:	4621      	mov	r1, r4
 800f5d6:	4628      	mov	r0, r5
 800f5d8:	f000 f8d0 	bl	800f77c <__swsetup_r>
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	d0e7      	beq.n	800f5b0 <_puts_r+0x2c>
 800f5e0:	f04f 35ff 	mov.w	r5, #4294967295
 800f5e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5e6:	07da      	lsls	r2, r3, #31
 800f5e8:	d405      	bmi.n	800f5f6 <_puts_r+0x72>
 800f5ea:	89a3      	ldrh	r3, [r4, #12]
 800f5ec:	059b      	lsls	r3, r3, #22
 800f5ee:	d402      	bmi.n	800f5f6 <_puts_r+0x72>
 800f5f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5f2:	f000 f9ef 	bl	800f9d4 <__retarget_lock_release_recursive>
 800f5f6:	4628      	mov	r0, r5
 800f5f8:	bd70      	pop	{r4, r5, r6, pc}
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	da04      	bge.n	800f608 <_puts_r+0x84>
 800f5fe:	69a2      	ldr	r2, [r4, #24]
 800f600:	429a      	cmp	r2, r3
 800f602:	dc06      	bgt.n	800f612 <_puts_r+0x8e>
 800f604:	290a      	cmp	r1, #10
 800f606:	d004      	beq.n	800f612 <_puts_r+0x8e>
 800f608:	6823      	ldr	r3, [r4, #0]
 800f60a:	1c5a      	adds	r2, r3, #1
 800f60c:	6022      	str	r2, [r4, #0]
 800f60e:	7019      	strb	r1, [r3, #0]
 800f610:	e7cf      	b.n	800f5b2 <_puts_r+0x2e>
 800f612:	4622      	mov	r2, r4
 800f614:	4628      	mov	r0, r5
 800f616:	f000 f874 	bl	800f702 <__swbuf_r>
 800f61a:	3001      	adds	r0, #1
 800f61c:	d1c9      	bne.n	800f5b2 <_puts_r+0x2e>
 800f61e:	e7df      	b.n	800f5e0 <_puts_r+0x5c>
 800f620:	6823      	ldr	r3, [r4, #0]
 800f622:	250a      	movs	r5, #10
 800f624:	1c5a      	adds	r2, r3, #1
 800f626:	6022      	str	r2, [r4, #0]
 800f628:	701d      	strb	r5, [r3, #0]
 800f62a:	e7db      	b.n	800f5e4 <_puts_r+0x60>

0800f62c <puts>:
 800f62c:	4b02      	ldr	r3, [pc, #8]	; (800f638 <puts+0xc>)
 800f62e:	4601      	mov	r1, r0
 800f630:	6818      	ldr	r0, [r3, #0]
 800f632:	f7ff bfa7 	b.w	800f584 <_puts_r>
 800f636:	bf00      	nop
 800f638:	24000074 	.word	0x24000074

0800f63c <siprintf>:
 800f63c:	b40e      	push	{r1, r2, r3}
 800f63e:	b500      	push	{lr}
 800f640:	b09c      	sub	sp, #112	; 0x70
 800f642:	ab1d      	add	r3, sp, #116	; 0x74
 800f644:	9002      	str	r0, [sp, #8]
 800f646:	9006      	str	r0, [sp, #24]
 800f648:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f64c:	4809      	ldr	r0, [pc, #36]	; (800f674 <siprintf+0x38>)
 800f64e:	9107      	str	r1, [sp, #28]
 800f650:	9104      	str	r1, [sp, #16]
 800f652:	4909      	ldr	r1, [pc, #36]	; (800f678 <siprintf+0x3c>)
 800f654:	f853 2b04 	ldr.w	r2, [r3], #4
 800f658:	9105      	str	r1, [sp, #20]
 800f65a:	6800      	ldr	r0, [r0, #0]
 800f65c:	9301      	str	r3, [sp, #4]
 800f65e:	a902      	add	r1, sp, #8
 800f660:	f001 fc94 	bl	8010f8c <_svfiprintf_r>
 800f664:	9b02      	ldr	r3, [sp, #8]
 800f666:	2200      	movs	r2, #0
 800f668:	701a      	strb	r2, [r3, #0]
 800f66a:	b01c      	add	sp, #112	; 0x70
 800f66c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f670:	b003      	add	sp, #12
 800f672:	4770      	bx	lr
 800f674:	24000074 	.word	0x24000074
 800f678:	ffff0208 	.word	0xffff0208

0800f67c <__sread>:
 800f67c:	b510      	push	{r4, lr}
 800f67e:	460c      	mov	r4, r1
 800f680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f684:	f000 f956 	bl	800f934 <_read_r>
 800f688:	2800      	cmp	r0, #0
 800f68a:	bfab      	itete	ge
 800f68c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f68e:	89a3      	ldrhlt	r3, [r4, #12]
 800f690:	181b      	addge	r3, r3, r0
 800f692:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f696:	bfac      	ite	ge
 800f698:	6563      	strge	r3, [r4, #84]	; 0x54
 800f69a:	81a3      	strhlt	r3, [r4, #12]
 800f69c:	bd10      	pop	{r4, pc}

0800f69e <__swrite>:
 800f69e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6a2:	461f      	mov	r7, r3
 800f6a4:	898b      	ldrh	r3, [r1, #12]
 800f6a6:	05db      	lsls	r3, r3, #23
 800f6a8:	4605      	mov	r5, r0
 800f6aa:	460c      	mov	r4, r1
 800f6ac:	4616      	mov	r6, r2
 800f6ae:	d505      	bpl.n	800f6bc <__swrite+0x1e>
 800f6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6b4:	2302      	movs	r3, #2
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	f000 f92a 	bl	800f910 <_lseek_r>
 800f6bc:	89a3      	ldrh	r3, [r4, #12]
 800f6be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6c6:	81a3      	strh	r3, [r4, #12]
 800f6c8:	4632      	mov	r2, r6
 800f6ca:	463b      	mov	r3, r7
 800f6cc:	4628      	mov	r0, r5
 800f6ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d2:	f000 b941 	b.w	800f958 <_write_r>

0800f6d6 <__sseek>:
 800f6d6:	b510      	push	{r4, lr}
 800f6d8:	460c      	mov	r4, r1
 800f6da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6de:	f000 f917 	bl	800f910 <_lseek_r>
 800f6e2:	1c43      	adds	r3, r0, #1
 800f6e4:	89a3      	ldrh	r3, [r4, #12]
 800f6e6:	bf15      	itete	ne
 800f6e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f6ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f6ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f6f2:	81a3      	strheq	r3, [r4, #12]
 800f6f4:	bf18      	it	ne
 800f6f6:	81a3      	strhne	r3, [r4, #12]
 800f6f8:	bd10      	pop	{r4, pc}

0800f6fa <__sclose>:
 800f6fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6fe:	f000 b8a1 	b.w	800f844 <_close_r>

0800f702 <__swbuf_r>:
 800f702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f704:	460e      	mov	r6, r1
 800f706:	4614      	mov	r4, r2
 800f708:	4605      	mov	r5, r0
 800f70a:	b118      	cbz	r0, 800f714 <__swbuf_r+0x12>
 800f70c:	6a03      	ldr	r3, [r0, #32]
 800f70e:	b90b      	cbnz	r3, 800f714 <__swbuf_r+0x12>
 800f710:	f7ff fef0 	bl	800f4f4 <__sinit>
 800f714:	69a3      	ldr	r3, [r4, #24]
 800f716:	60a3      	str	r3, [r4, #8]
 800f718:	89a3      	ldrh	r3, [r4, #12]
 800f71a:	071a      	lsls	r2, r3, #28
 800f71c:	d525      	bpl.n	800f76a <__swbuf_r+0x68>
 800f71e:	6923      	ldr	r3, [r4, #16]
 800f720:	b31b      	cbz	r3, 800f76a <__swbuf_r+0x68>
 800f722:	6823      	ldr	r3, [r4, #0]
 800f724:	6922      	ldr	r2, [r4, #16]
 800f726:	1a98      	subs	r0, r3, r2
 800f728:	6963      	ldr	r3, [r4, #20]
 800f72a:	b2f6      	uxtb	r6, r6
 800f72c:	4283      	cmp	r3, r0
 800f72e:	4637      	mov	r7, r6
 800f730:	dc04      	bgt.n	800f73c <__swbuf_r+0x3a>
 800f732:	4621      	mov	r1, r4
 800f734:	4628      	mov	r0, r5
 800f736:	f001 fef1 	bl	801151c <_fflush_r>
 800f73a:	b9e0      	cbnz	r0, 800f776 <__swbuf_r+0x74>
 800f73c:	68a3      	ldr	r3, [r4, #8]
 800f73e:	3b01      	subs	r3, #1
 800f740:	60a3      	str	r3, [r4, #8]
 800f742:	6823      	ldr	r3, [r4, #0]
 800f744:	1c5a      	adds	r2, r3, #1
 800f746:	6022      	str	r2, [r4, #0]
 800f748:	701e      	strb	r6, [r3, #0]
 800f74a:	6962      	ldr	r2, [r4, #20]
 800f74c:	1c43      	adds	r3, r0, #1
 800f74e:	429a      	cmp	r2, r3
 800f750:	d004      	beq.n	800f75c <__swbuf_r+0x5a>
 800f752:	89a3      	ldrh	r3, [r4, #12]
 800f754:	07db      	lsls	r3, r3, #31
 800f756:	d506      	bpl.n	800f766 <__swbuf_r+0x64>
 800f758:	2e0a      	cmp	r6, #10
 800f75a:	d104      	bne.n	800f766 <__swbuf_r+0x64>
 800f75c:	4621      	mov	r1, r4
 800f75e:	4628      	mov	r0, r5
 800f760:	f001 fedc 	bl	801151c <_fflush_r>
 800f764:	b938      	cbnz	r0, 800f776 <__swbuf_r+0x74>
 800f766:	4638      	mov	r0, r7
 800f768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f76a:	4621      	mov	r1, r4
 800f76c:	4628      	mov	r0, r5
 800f76e:	f000 f805 	bl	800f77c <__swsetup_r>
 800f772:	2800      	cmp	r0, #0
 800f774:	d0d5      	beq.n	800f722 <__swbuf_r+0x20>
 800f776:	f04f 37ff 	mov.w	r7, #4294967295
 800f77a:	e7f4      	b.n	800f766 <__swbuf_r+0x64>

0800f77c <__swsetup_r>:
 800f77c:	b538      	push	{r3, r4, r5, lr}
 800f77e:	4b2a      	ldr	r3, [pc, #168]	; (800f828 <__swsetup_r+0xac>)
 800f780:	4605      	mov	r5, r0
 800f782:	6818      	ldr	r0, [r3, #0]
 800f784:	460c      	mov	r4, r1
 800f786:	b118      	cbz	r0, 800f790 <__swsetup_r+0x14>
 800f788:	6a03      	ldr	r3, [r0, #32]
 800f78a:	b90b      	cbnz	r3, 800f790 <__swsetup_r+0x14>
 800f78c:	f7ff feb2 	bl	800f4f4 <__sinit>
 800f790:	89a3      	ldrh	r3, [r4, #12]
 800f792:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f796:	0718      	lsls	r0, r3, #28
 800f798:	d422      	bmi.n	800f7e0 <__swsetup_r+0x64>
 800f79a:	06d9      	lsls	r1, r3, #27
 800f79c:	d407      	bmi.n	800f7ae <__swsetup_r+0x32>
 800f79e:	2309      	movs	r3, #9
 800f7a0:	602b      	str	r3, [r5, #0]
 800f7a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f7a6:	81a3      	strh	r3, [r4, #12]
 800f7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ac:	e034      	b.n	800f818 <__swsetup_r+0x9c>
 800f7ae:	0758      	lsls	r0, r3, #29
 800f7b0:	d512      	bpl.n	800f7d8 <__swsetup_r+0x5c>
 800f7b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7b4:	b141      	cbz	r1, 800f7c8 <__swsetup_r+0x4c>
 800f7b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7ba:	4299      	cmp	r1, r3
 800f7bc:	d002      	beq.n	800f7c4 <__swsetup_r+0x48>
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f000 ff0e 	bl	80105e0 <_free_r>
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	6363      	str	r3, [r4, #52]	; 0x34
 800f7c8:	89a3      	ldrh	r3, [r4, #12]
 800f7ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f7ce:	81a3      	strh	r3, [r4, #12]
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	6063      	str	r3, [r4, #4]
 800f7d4:	6923      	ldr	r3, [r4, #16]
 800f7d6:	6023      	str	r3, [r4, #0]
 800f7d8:	89a3      	ldrh	r3, [r4, #12]
 800f7da:	f043 0308 	orr.w	r3, r3, #8
 800f7de:	81a3      	strh	r3, [r4, #12]
 800f7e0:	6923      	ldr	r3, [r4, #16]
 800f7e2:	b94b      	cbnz	r3, 800f7f8 <__swsetup_r+0x7c>
 800f7e4:	89a3      	ldrh	r3, [r4, #12]
 800f7e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f7ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7ee:	d003      	beq.n	800f7f8 <__swsetup_r+0x7c>
 800f7f0:	4621      	mov	r1, r4
 800f7f2:	4628      	mov	r0, r5
 800f7f4:	f001 fee0 	bl	80115b8 <__smakebuf_r>
 800f7f8:	89a0      	ldrh	r0, [r4, #12]
 800f7fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7fe:	f010 0301 	ands.w	r3, r0, #1
 800f802:	d00a      	beq.n	800f81a <__swsetup_r+0x9e>
 800f804:	2300      	movs	r3, #0
 800f806:	60a3      	str	r3, [r4, #8]
 800f808:	6963      	ldr	r3, [r4, #20]
 800f80a:	425b      	negs	r3, r3
 800f80c:	61a3      	str	r3, [r4, #24]
 800f80e:	6923      	ldr	r3, [r4, #16]
 800f810:	b943      	cbnz	r3, 800f824 <__swsetup_r+0xa8>
 800f812:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f816:	d1c4      	bne.n	800f7a2 <__swsetup_r+0x26>
 800f818:	bd38      	pop	{r3, r4, r5, pc}
 800f81a:	0781      	lsls	r1, r0, #30
 800f81c:	bf58      	it	pl
 800f81e:	6963      	ldrpl	r3, [r4, #20]
 800f820:	60a3      	str	r3, [r4, #8]
 800f822:	e7f4      	b.n	800f80e <__swsetup_r+0x92>
 800f824:	2000      	movs	r0, #0
 800f826:	e7f7      	b.n	800f818 <__swsetup_r+0x9c>
 800f828:	24000074 	.word	0x24000074

0800f82c <memset>:
 800f82c:	4402      	add	r2, r0
 800f82e:	4603      	mov	r3, r0
 800f830:	4293      	cmp	r3, r2
 800f832:	d100      	bne.n	800f836 <memset+0xa>
 800f834:	4770      	bx	lr
 800f836:	f803 1b01 	strb.w	r1, [r3], #1
 800f83a:	e7f9      	b.n	800f830 <memset+0x4>

0800f83c <_localeconv_r>:
 800f83c:	4800      	ldr	r0, [pc, #0]	; (800f840 <_localeconv_r+0x4>)
 800f83e:	4770      	bx	lr
 800f840:	24000168 	.word	0x24000168

0800f844 <_close_r>:
 800f844:	b538      	push	{r3, r4, r5, lr}
 800f846:	4d06      	ldr	r5, [pc, #24]	; (800f860 <_close_r+0x1c>)
 800f848:	2300      	movs	r3, #0
 800f84a:	4604      	mov	r4, r0
 800f84c:	4608      	mov	r0, r1
 800f84e:	602b      	str	r3, [r5, #0]
 800f850:	f7f5 f9a2 	bl	8004b98 <_close>
 800f854:	1c43      	adds	r3, r0, #1
 800f856:	d102      	bne.n	800f85e <_close_r+0x1a>
 800f858:	682b      	ldr	r3, [r5, #0]
 800f85a:	b103      	cbz	r3, 800f85e <_close_r+0x1a>
 800f85c:	6023      	str	r3, [r4, #0]
 800f85e:	bd38      	pop	{r3, r4, r5, pc}
 800f860:	240054d4 	.word	0x240054d4

0800f864 <_reclaim_reent>:
 800f864:	4b29      	ldr	r3, [pc, #164]	; (800f90c <_reclaim_reent+0xa8>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	4283      	cmp	r3, r0
 800f86a:	b570      	push	{r4, r5, r6, lr}
 800f86c:	4604      	mov	r4, r0
 800f86e:	d04b      	beq.n	800f908 <_reclaim_reent+0xa4>
 800f870:	69c3      	ldr	r3, [r0, #28]
 800f872:	b143      	cbz	r3, 800f886 <_reclaim_reent+0x22>
 800f874:	68db      	ldr	r3, [r3, #12]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d144      	bne.n	800f904 <_reclaim_reent+0xa0>
 800f87a:	69e3      	ldr	r3, [r4, #28]
 800f87c:	6819      	ldr	r1, [r3, #0]
 800f87e:	b111      	cbz	r1, 800f886 <_reclaim_reent+0x22>
 800f880:	4620      	mov	r0, r4
 800f882:	f000 fead 	bl	80105e0 <_free_r>
 800f886:	6961      	ldr	r1, [r4, #20]
 800f888:	b111      	cbz	r1, 800f890 <_reclaim_reent+0x2c>
 800f88a:	4620      	mov	r0, r4
 800f88c:	f000 fea8 	bl	80105e0 <_free_r>
 800f890:	69e1      	ldr	r1, [r4, #28]
 800f892:	b111      	cbz	r1, 800f89a <_reclaim_reent+0x36>
 800f894:	4620      	mov	r0, r4
 800f896:	f000 fea3 	bl	80105e0 <_free_r>
 800f89a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f89c:	b111      	cbz	r1, 800f8a4 <_reclaim_reent+0x40>
 800f89e:	4620      	mov	r0, r4
 800f8a0:	f000 fe9e 	bl	80105e0 <_free_r>
 800f8a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8a6:	b111      	cbz	r1, 800f8ae <_reclaim_reent+0x4a>
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	f000 fe99 	bl	80105e0 <_free_r>
 800f8ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f8b0:	b111      	cbz	r1, 800f8b8 <_reclaim_reent+0x54>
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	f000 fe94 	bl	80105e0 <_free_r>
 800f8b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f8ba:	b111      	cbz	r1, 800f8c2 <_reclaim_reent+0x5e>
 800f8bc:	4620      	mov	r0, r4
 800f8be:	f000 fe8f 	bl	80105e0 <_free_r>
 800f8c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f8c4:	b111      	cbz	r1, 800f8cc <_reclaim_reent+0x68>
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f000 fe8a 	bl	80105e0 <_free_r>
 800f8cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f8ce:	b111      	cbz	r1, 800f8d6 <_reclaim_reent+0x72>
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	f000 fe85 	bl	80105e0 <_free_r>
 800f8d6:	6a23      	ldr	r3, [r4, #32]
 800f8d8:	b1b3      	cbz	r3, 800f908 <_reclaim_reent+0xa4>
 800f8da:	4620      	mov	r0, r4
 800f8dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f8e0:	4718      	bx	r3
 800f8e2:	5949      	ldr	r1, [r1, r5]
 800f8e4:	b941      	cbnz	r1, 800f8f8 <_reclaim_reent+0x94>
 800f8e6:	3504      	adds	r5, #4
 800f8e8:	69e3      	ldr	r3, [r4, #28]
 800f8ea:	2d80      	cmp	r5, #128	; 0x80
 800f8ec:	68d9      	ldr	r1, [r3, #12]
 800f8ee:	d1f8      	bne.n	800f8e2 <_reclaim_reent+0x7e>
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	f000 fe75 	bl	80105e0 <_free_r>
 800f8f6:	e7c0      	b.n	800f87a <_reclaim_reent+0x16>
 800f8f8:	680e      	ldr	r6, [r1, #0]
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	f000 fe70 	bl	80105e0 <_free_r>
 800f900:	4631      	mov	r1, r6
 800f902:	e7ef      	b.n	800f8e4 <_reclaim_reent+0x80>
 800f904:	2500      	movs	r5, #0
 800f906:	e7ef      	b.n	800f8e8 <_reclaim_reent+0x84>
 800f908:	bd70      	pop	{r4, r5, r6, pc}
 800f90a:	bf00      	nop
 800f90c:	24000074 	.word	0x24000074

0800f910 <_lseek_r>:
 800f910:	b538      	push	{r3, r4, r5, lr}
 800f912:	4d07      	ldr	r5, [pc, #28]	; (800f930 <_lseek_r+0x20>)
 800f914:	4604      	mov	r4, r0
 800f916:	4608      	mov	r0, r1
 800f918:	4611      	mov	r1, r2
 800f91a:	2200      	movs	r2, #0
 800f91c:	602a      	str	r2, [r5, #0]
 800f91e:	461a      	mov	r2, r3
 800f920:	f7f5 f961 	bl	8004be6 <_lseek>
 800f924:	1c43      	adds	r3, r0, #1
 800f926:	d102      	bne.n	800f92e <_lseek_r+0x1e>
 800f928:	682b      	ldr	r3, [r5, #0]
 800f92a:	b103      	cbz	r3, 800f92e <_lseek_r+0x1e>
 800f92c:	6023      	str	r3, [r4, #0]
 800f92e:	bd38      	pop	{r3, r4, r5, pc}
 800f930:	240054d4 	.word	0x240054d4

0800f934 <_read_r>:
 800f934:	b538      	push	{r3, r4, r5, lr}
 800f936:	4d07      	ldr	r5, [pc, #28]	; (800f954 <_read_r+0x20>)
 800f938:	4604      	mov	r4, r0
 800f93a:	4608      	mov	r0, r1
 800f93c:	4611      	mov	r1, r2
 800f93e:	2200      	movs	r2, #0
 800f940:	602a      	str	r2, [r5, #0]
 800f942:	461a      	mov	r2, r3
 800f944:	f7f5 f8ef 	bl	8004b26 <_read>
 800f948:	1c43      	adds	r3, r0, #1
 800f94a:	d102      	bne.n	800f952 <_read_r+0x1e>
 800f94c:	682b      	ldr	r3, [r5, #0]
 800f94e:	b103      	cbz	r3, 800f952 <_read_r+0x1e>
 800f950:	6023      	str	r3, [r4, #0]
 800f952:	bd38      	pop	{r3, r4, r5, pc}
 800f954:	240054d4 	.word	0x240054d4

0800f958 <_write_r>:
 800f958:	b538      	push	{r3, r4, r5, lr}
 800f95a:	4d07      	ldr	r5, [pc, #28]	; (800f978 <_write_r+0x20>)
 800f95c:	4604      	mov	r4, r0
 800f95e:	4608      	mov	r0, r1
 800f960:	4611      	mov	r1, r2
 800f962:	2200      	movs	r2, #0
 800f964:	602a      	str	r2, [r5, #0]
 800f966:	461a      	mov	r2, r3
 800f968:	f7f5 f8fa 	bl	8004b60 <_write>
 800f96c:	1c43      	adds	r3, r0, #1
 800f96e:	d102      	bne.n	800f976 <_write_r+0x1e>
 800f970:	682b      	ldr	r3, [r5, #0]
 800f972:	b103      	cbz	r3, 800f976 <_write_r+0x1e>
 800f974:	6023      	str	r3, [r4, #0]
 800f976:	bd38      	pop	{r3, r4, r5, pc}
 800f978:	240054d4 	.word	0x240054d4

0800f97c <__errno>:
 800f97c:	4b01      	ldr	r3, [pc, #4]	; (800f984 <__errno+0x8>)
 800f97e:	6818      	ldr	r0, [r3, #0]
 800f980:	4770      	bx	lr
 800f982:	bf00      	nop
 800f984:	24000074 	.word	0x24000074

0800f988 <__libc_init_array>:
 800f988:	b570      	push	{r4, r5, r6, lr}
 800f98a:	4d0d      	ldr	r5, [pc, #52]	; (800f9c0 <__libc_init_array+0x38>)
 800f98c:	4c0d      	ldr	r4, [pc, #52]	; (800f9c4 <__libc_init_array+0x3c>)
 800f98e:	1b64      	subs	r4, r4, r5
 800f990:	10a4      	asrs	r4, r4, #2
 800f992:	2600      	movs	r6, #0
 800f994:	42a6      	cmp	r6, r4
 800f996:	d109      	bne.n	800f9ac <__libc_init_array+0x24>
 800f998:	4d0b      	ldr	r5, [pc, #44]	; (800f9c8 <__libc_init_array+0x40>)
 800f99a:	4c0c      	ldr	r4, [pc, #48]	; (800f9cc <__libc_init_array+0x44>)
 800f99c:	f002 ff74 	bl	8012888 <_init>
 800f9a0:	1b64      	subs	r4, r4, r5
 800f9a2:	10a4      	asrs	r4, r4, #2
 800f9a4:	2600      	movs	r6, #0
 800f9a6:	42a6      	cmp	r6, r4
 800f9a8:	d105      	bne.n	800f9b6 <__libc_init_array+0x2e>
 800f9aa:	bd70      	pop	{r4, r5, r6, pc}
 800f9ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9b0:	4798      	blx	r3
 800f9b2:	3601      	adds	r6, #1
 800f9b4:	e7ee      	b.n	800f994 <__libc_init_array+0xc>
 800f9b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9ba:	4798      	blx	r3
 800f9bc:	3601      	adds	r6, #1
 800f9be:	e7f2      	b.n	800f9a6 <__libc_init_array+0x1e>
 800f9c0:	08013778 	.word	0x08013778
 800f9c4:	08013778 	.word	0x08013778
 800f9c8:	08013778 	.word	0x08013778
 800f9cc:	0801377c 	.word	0x0801377c

0800f9d0 <__retarget_lock_init_recursive>:
 800f9d0:	4770      	bx	lr

0800f9d2 <__retarget_lock_acquire_recursive>:
 800f9d2:	4770      	bx	lr

0800f9d4 <__retarget_lock_release_recursive>:
 800f9d4:	4770      	bx	lr

0800f9d6 <memcpy>:
 800f9d6:	440a      	add	r2, r1
 800f9d8:	4291      	cmp	r1, r2
 800f9da:	f100 33ff 	add.w	r3, r0, #4294967295
 800f9de:	d100      	bne.n	800f9e2 <memcpy+0xc>
 800f9e0:	4770      	bx	lr
 800f9e2:	b510      	push	{r4, lr}
 800f9e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9ec:	4291      	cmp	r1, r2
 800f9ee:	d1f9      	bne.n	800f9e4 <memcpy+0xe>
 800f9f0:	bd10      	pop	{r4, pc}

0800f9f2 <quorem>:
 800f9f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f6:	6903      	ldr	r3, [r0, #16]
 800f9f8:	690c      	ldr	r4, [r1, #16]
 800f9fa:	42a3      	cmp	r3, r4
 800f9fc:	4607      	mov	r7, r0
 800f9fe:	db7e      	blt.n	800fafe <quorem+0x10c>
 800fa00:	3c01      	subs	r4, #1
 800fa02:	f101 0814 	add.w	r8, r1, #20
 800fa06:	f100 0514 	add.w	r5, r0, #20
 800fa0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa0e:	9301      	str	r3, [sp, #4]
 800fa10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fa14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa18:	3301      	adds	r3, #1
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fa20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fa24:	fbb2 f6f3 	udiv	r6, r2, r3
 800fa28:	d331      	bcc.n	800fa8e <quorem+0x9c>
 800fa2a:	f04f 0e00 	mov.w	lr, #0
 800fa2e:	4640      	mov	r0, r8
 800fa30:	46ac      	mov	ip, r5
 800fa32:	46f2      	mov	sl, lr
 800fa34:	f850 2b04 	ldr.w	r2, [r0], #4
 800fa38:	b293      	uxth	r3, r2
 800fa3a:	fb06 e303 	mla	r3, r6, r3, lr
 800fa3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fa42:	0c1a      	lsrs	r2, r3, #16
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	ebaa 0303 	sub.w	r3, sl, r3
 800fa4a:	f8dc a000 	ldr.w	sl, [ip]
 800fa4e:	fa13 f38a 	uxtah	r3, r3, sl
 800fa52:	fb06 220e 	mla	r2, r6, lr, r2
 800fa56:	9300      	str	r3, [sp, #0]
 800fa58:	9b00      	ldr	r3, [sp, #0]
 800fa5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fa5e:	b292      	uxth	r2, r2
 800fa60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fa64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa68:	f8bd 3000 	ldrh.w	r3, [sp]
 800fa6c:	4581      	cmp	r9, r0
 800fa6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa72:	f84c 3b04 	str.w	r3, [ip], #4
 800fa76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fa7a:	d2db      	bcs.n	800fa34 <quorem+0x42>
 800fa7c:	f855 300b 	ldr.w	r3, [r5, fp]
 800fa80:	b92b      	cbnz	r3, 800fa8e <quorem+0x9c>
 800fa82:	9b01      	ldr	r3, [sp, #4]
 800fa84:	3b04      	subs	r3, #4
 800fa86:	429d      	cmp	r5, r3
 800fa88:	461a      	mov	r2, r3
 800fa8a:	d32c      	bcc.n	800fae6 <quorem+0xf4>
 800fa8c:	613c      	str	r4, [r7, #16]
 800fa8e:	4638      	mov	r0, r7
 800fa90:	f001 f922 	bl	8010cd8 <__mcmp>
 800fa94:	2800      	cmp	r0, #0
 800fa96:	db22      	blt.n	800fade <quorem+0xec>
 800fa98:	3601      	adds	r6, #1
 800fa9a:	4629      	mov	r1, r5
 800fa9c:	2000      	movs	r0, #0
 800fa9e:	f858 2b04 	ldr.w	r2, [r8], #4
 800faa2:	f8d1 c000 	ldr.w	ip, [r1]
 800faa6:	b293      	uxth	r3, r2
 800faa8:	1ac3      	subs	r3, r0, r3
 800faaa:	0c12      	lsrs	r2, r2, #16
 800faac:	fa13 f38c 	uxtah	r3, r3, ip
 800fab0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800fab4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fab8:	b29b      	uxth	r3, r3
 800faba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fabe:	45c1      	cmp	r9, r8
 800fac0:	f841 3b04 	str.w	r3, [r1], #4
 800fac4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fac8:	d2e9      	bcs.n	800fa9e <quorem+0xac>
 800faca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800face:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fad2:	b922      	cbnz	r2, 800fade <quorem+0xec>
 800fad4:	3b04      	subs	r3, #4
 800fad6:	429d      	cmp	r5, r3
 800fad8:	461a      	mov	r2, r3
 800fada:	d30a      	bcc.n	800faf2 <quorem+0x100>
 800fadc:	613c      	str	r4, [r7, #16]
 800fade:	4630      	mov	r0, r6
 800fae0:	b003      	add	sp, #12
 800fae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fae6:	6812      	ldr	r2, [r2, #0]
 800fae8:	3b04      	subs	r3, #4
 800faea:	2a00      	cmp	r2, #0
 800faec:	d1ce      	bne.n	800fa8c <quorem+0x9a>
 800faee:	3c01      	subs	r4, #1
 800faf0:	e7c9      	b.n	800fa86 <quorem+0x94>
 800faf2:	6812      	ldr	r2, [r2, #0]
 800faf4:	3b04      	subs	r3, #4
 800faf6:	2a00      	cmp	r2, #0
 800faf8:	d1f0      	bne.n	800fadc <quorem+0xea>
 800fafa:	3c01      	subs	r4, #1
 800fafc:	e7eb      	b.n	800fad6 <quorem+0xe4>
 800fafe:	2000      	movs	r0, #0
 800fb00:	e7ee      	b.n	800fae0 <quorem+0xee>
 800fb02:	0000      	movs	r0, r0
 800fb04:	0000      	movs	r0, r0
	...

0800fb08 <_dtoa_r>:
 800fb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb0c:	ed2d 8b02 	vpush	{d8}
 800fb10:	69c5      	ldr	r5, [r0, #28]
 800fb12:	b091      	sub	sp, #68	; 0x44
 800fb14:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fb18:	ec59 8b10 	vmov	r8, r9, d0
 800fb1c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800fb1e:	9106      	str	r1, [sp, #24]
 800fb20:	4606      	mov	r6, r0
 800fb22:	9208      	str	r2, [sp, #32]
 800fb24:	930c      	str	r3, [sp, #48]	; 0x30
 800fb26:	b975      	cbnz	r5, 800fb46 <_dtoa_r+0x3e>
 800fb28:	2010      	movs	r0, #16
 800fb2a:	f000 fda5 	bl	8010678 <malloc>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	61f0      	str	r0, [r6, #28]
 800fb32:	b920      	cbnz	r0, 800fb3e <_dtoa_r+0x36>
 800fb34:	4ba6      	ldr	r3, [pc, #664]	; (800fdd0 <_dtoa_r+0x2c8>)
 800fb36:	21ef      	movs	r1, #239	; 0xef
 800fb38:	48a6      	ldr	r0, [pc, #664]	; (800fdd4 <_dtoa_r+0x2cc>)
 800fb3a:	f001 fdc5 	bl	80116c8 <__assert_func>
 800fb3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fb42:	6005      	str	r5, [r0, #0]
 800fb44:	60c5      	str	r5, [r0, #12]
 800fb46:	69f3      	ldr	r3, [r6, #28]
 800fb48:	6819      	ldr	r1, [r3, #0]
 800fb4a:	b151      	cbz	r1, 800fb62 <_dtoa_r+0x5a>
 800fb4c:	685a      	ldr	r2, [r3, #4]
 800fb4e:	604a      	str	r2, [r1, #4]
 800fb50:	2301      	movs	r3, #1
 800fb52:	4093      	lsls	r3, r2
 800fb54:	608b      	str	r3, [r1, #8]
 800fb56:	4630      	mov	r0, r6
 800fb58:	f000 fe82 	bl	8010860 <_Bfree>
 800fb5c:	69f3      	ldr	r3, [r6, #28]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	601a      	str	r2, [r3, #0]
 800fb62:	f1b9 0300 	subs.w	r3, r9, #0
 800fb66:	bfbb      	ittet	lt
 800fb68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fb6c:	9303      	strlt	r3, [sp, #12]
 800fb6e:	2300      	movge	r3, #0
 800fb70:	2201      	movlt	r2, #1
 800fb72:	bfac      	ite	ge
 800fb74:	6023      	strge	r3, [r4, #0]
 800fb76:	6022      	strlt	r2, [r4, #0]
 800fb78:	4b97      	ldr	r3, [pc, #604]	; (800fdd8 <_dtoa_r+0x2d0>)
 800fb7a:	9c03      	ldr	r4, [sp, #12]
 800fb7c:	43a3      	bics	r3, r4
 800fb7e:	d11c      	bne.n	800fbba <_dtoa_r+0xb2>
 800fb80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fb82:	f242 730f 	movw	r3, #9999	; 0x270f
 800fb86:	6013      	str	r3, [r2, #0]
 800fb88:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800fb8c:	ea53 0308 	orrs.w	r3, r3, r8
 800fb90:	f000 84fb 	beq.w	801058a <_dtoa_r+0xa82>
 800fb94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fb96:	b963      	cbnz	r3, 800fbb2 <_dtoa_r+0xaa>
 800fb98:	4b90      	ldr	r3, [pc, #576]	; (800fddc <_dtoa_r+0x2d4>)
 800fb9a:	e020      	b.n	800fbde <_dtoa_r+0xd6>
 800fb9c:	4b90      	ldr	r3, [pc, #576]	; (800fde0 <_dtoa_r+0x2d8>)
 800fb9e:	9301      	str	r3, [sp, #4]
 800fba0:	3308      	adds	r3, #8
 800fba2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fba4:	6013      	str	r3, [r2, #0]
 800fba6:	9801      	ldr	r0, [sp, #4]
 800fba8:	b011      	add	sp, #68	; 0x44
 800fbaa:	ecbd 8b02 	vpop	{d8}
 800fbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbb2:	4b8a      	ldr	r3, [pc, #552]	; (800fddc <_dtoa_r+0x2d4>)
 800fbb4:	9301      	str	r3, [sp, #4]
 800fbb6:	3303      	adds	r3, #3
 800fbb8:	e7f3      	b.n	800fba2 <_dtoa_r+0x9a>
 800fbba:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fbbe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fbc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbc6:	d10c      	bne.n	800fbe2 <_dtoa_r+0xda>
 800fbc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fbca:	2301      	movs	r3, #1
 800fbcc:	6013      	str	r3, [r2, #0]
 800fbce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	f000 84d7 	beq.w	8010584 <_dtoa_r+0xa7c>
 800fbd6:	4b83      	ldr	r3, [pc, #524]	; (800fde4 <_dtoa_r+0x2dc>)
 800fbd8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fbda:	6013      	str	r3, [r2, #0]
 800fbdc:	3b01      	subs	r3, #1
 800fbde:	9301      	str	r3, [sp, #4]
 800fbe0:	e7e1      	b.n	800fba6 <_dtoa_r+0x9e>
 800fbe2:	aa0e      	add	r2, sp, #56	; 0x38
 800fbe4:	a90f      	add	r1, sp, #60	; 0x3c
 800fbe6:	4630      	mov	r0, r6
 800fbe8:	eeb0 0b48 	vmov.f64	d0, d8
 800fbec:	f001 f91a 	bl	8010e24 <__d2b>
 800fbf0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800fbf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fbf6:	4605      	mov	r5, r0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d046      	beq.n	800fc8a <_dtoa_r+0x182>
 800fbfc:	eeb0 7b48 	vmov.f64	d7, d8
 800fc00:	ee18 1a90 	vmov	r1, s17
 800fc04:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fc08:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800fc0c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800fc10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fc14:	2000      	movs	r0, #0
 800fc16:	ee07 1a90 	vmov	s15, r1
 800fc1a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800fc1e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800fdb8 <_dtoa_r+0x2b0>
 800fc22:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fc26:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800fdc0 <_dtoa_r+0x2b8>
 800fc2a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fc2e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800fdc8 <_dtoa_r+0x2c0>
 800fc32:	ee07 3a90 	vmov	s15, r3
 800fc36:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fc3a:	eeb0 7b46 	vmov.f64	d7, d6
 800fc3e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fc42:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fc46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc4e:	ee16 ba90 	vmov	fp, s13
 800fc52:	9009      	str	r0, [sp, #36]	; 0x24
 800fc54:	d508      	bpl.n	800fc68 <_dtoa_r+0x160>
 800fc56:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fc5a:	eeb4 6b47 	vcmp.f64	d6, d7
 800fc5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc62:	bf18      	it	ne
 800fc64:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800fc68:	f1bb 0f16 	cmp.w	fp, #22
 800fc6c:	d82b      	bhi.n	800fcc6 <_dtoa_r+0x1be>
 800fc6e:	495e      	ldr	r1, [pc, #376]	; (800fde8 <_dtoa_r+0x2e0>)
 800fc70:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800fc74:	ed91 7b00 	vldr	d7, [r1]
 800fc78:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fc7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc80:	d501      	bpl.n	800fc86 <_dtoa_r+0x17e>
 800fc82:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fc86:	2100      	movs	r1, #0
 800fc88:	e01e      	b.n	800fcc8 <_dtoa_r+0x1c0>
 800fc8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc8c:	4413      	add	r3, r2
 800fc8e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800fc92:	2920      	cmp	r1, #32
 800fc94:	bfc1      	itttt	gt
 800fc96:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800fc9a:	408c      	lslgt	r4, r1
 800fc9c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800fca0:	fa28 f101 	lsrgt.w	r1, r8, r1
 800fca4:	bfd6      	itet	le
 800fca6:	f1c1 0120 	rsble	r1, r1, #32
 800fcaa:	4321      	orrgt	r1, r4
 800fcac:	fa08 f101 	lslle.w	r1, r8, r1
 800fcb0:	ee07 1a90 	vmov	s15, r1
 800fcb4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fcb8:	3b01      	subs	r3, #1
 800fcba:	ee17 1a90 	vmov	r1, s15
 800fcbe:	2001      	movs	r0, #1
 800fcc0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800fcc4:	e7a7      	b.n	800fc16 <_dtoa_r+0x10e>
 800fcc6:	2101      	movs	r1, #1
 800fcc8:	1ad2      	subs	r2, r2, r3
 800fcca:	1e53      	subs	r3, r2, #1
 800fccc:	9305      	str	r3, [sp, #20]
 800fcce:	bf45      	ittet	mi
 800fcd0:	f1c2 0301 	rsbmi	r3, r2, #1
 800fcd4:	9304      	strmi	r3, [sp, #16]
 800fcd6:	2300      	movpl	r3, #0
 800fcd8:	2300      	movmi	r3, #0
 800fcda:	bf4c      	ite	mi
 800fcdc:	9305      	strmi	r3, [sp, #20]
 800fcde:	9304      	strpl	r3, [sp, #16]
 800fce0:	f1bb 0f00 	cmp.w	fp, #0
 800fce4:	910b      	str	r1, [sp, #44]	; 0x2c
 800fce6:	db18      	blt.n	800fd1a <_dtoa_r+0x212>
 800fce8:	9b05      	ldr	r3, [sp, #20]
 800fcea:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800fcee:	445b      	add	r3, fp
 800fcf0:	9305      	str	r3, [sp, #20]
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	9a06      	ldr	r2, [sp, #24]
 800fcf6:	2a09      	cmp	r2, #9
 800fcf8:	d848      	bhi.n	800fd8c <_dtoa_r+0x284>
 800fcfa:	2a05      	cmp	r2, #5
 800fcfc:	bfc4      	itt	gt
 800fcfe:	3a04      	subgt	r2, #4
 800fd00:	9206      	strgt	r2, [sp, #24]
 800fd02:	9a06      	ldr	r2, [sp, #24]
 800fd04:	f1a2 0202 	sub.w	r2, r2, #2
 800fd08:	bfcc      	ite	gt
 800fd0a:	2400      	movgt	r4, #0
 800fd0c:	2401      	movle	r4, #1
 800fd0e:	2a03      	cmp	r2, #3
 800fd10:	d847      	bhi.n	800fda2 <_dtoa_r+0x29a>
 800fd12:	e8df f002 	tbb	[pc, r2]
 800fd16:	2d0b      	.short	0x2d0b
 800fd18:	392b      	.short	0x392b
 800fd1a:	9b04      	ldr	r3, [sp, #16]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	eba3 030b 	sub.w	r3, r3, fp
 800fd22:	9304      	str	r3, [sp, #16]
 800fd24:	920a      	str	r2, [sp, #40]	; 0x28
 800fd26:	f1cb 0300 	rsb	r3, fp, #0
 800fd2a:	e7e3      	b.n	800fcf4 <_dtoa_r+0x1ec>
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	9207      	str	r2, [sp, #28]
 800fd30:	9a08      	ldr	r2, [sp, #32]
 800fd32:	2a00      	cmp	r2, #0
 800fd34:	dc38      	bgt.n	800fda8 <_dtoa_r+0x2a0>
 800fd36:	f04f 0a01 	mov.w	sl, #1
 800fd3a:	46d1      	mov	r9, sl
 800fd3c:	4652      	mov	r2, sl
 800fd3e:	f8cd a020 	str.w	sl, [sp, #32]
 800fd42:	69f7      	ldr	r7, [r6, #28]
 800fd44:	2100      	movs	r1, #0
 800fd46:	2004      	movs	r0, #4
 800fd48:	f100 0c14 	add.w	ip, r0, #20
 800fd4c:	4594      	cmp	ip, r2
 800fd4e:	d930      	bls.n	800fdb2 <_dtoa_r+0x2aa>
 800fd50:	6079      	str	r1, [r7, #4]
 800fd52:	4630      	mov	r0, r6
 800fd54:	930d      	str	r3, [sp, #52]	; 0x34
 800fd56:	f000 fd43 	bl	80107e0 <_Balloc>
 800fd5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd5c:	9001      	str	r0, [sp, #4]
 800fd5e:	4602      	mov	r2, r0
 800fd60:	2800      	cmp	r0, #0
 800fd62:	d145      	bne.n	800fdf0 <_dtoa_r+0x2e8>
 800fd64:	4b21      	ldr	r3, [pc, #132]	; (800fdec <_dtoa_r+0x2e4>)
 800fd66:	f240 11af 	movw	r1, #431	; 0x1af
 800fd6a:	e6e5      	b.n	800fb38 <_dtoa_r+0x30>
 800fd6c:	2201      	movs	r2, #1
 800fd6e:	e7de      	b.n	800fd2e <_dtoa_r+0x226>
 800fd70:	2200      	movs	r2, #0
 800fd72:	9207      	str	r2, [sp, #28]
 800fd74:	9a08      	ldr	r2, [sp, #32]
 800fd76:	eb0b 0a02 	add.w	sl, fp, r2
 800fd7a:	f10a 0901 	add.w	r9, sl, #1
 800fd7e:	464a      	mov	r2, r9
 800fd80:	2a01      	cmp	r2, #1
 800fd82:	bfb8      	it	lt
 800fd84:	2201      	movlt	r2, #1
 800fd86:	e7dc      	b.n	800fd42 <_dtoa_r+0x23a>
 800fd88:	2201      	movs	r2, #1
 800fd8a:	e7f2      	b.n	800fd72 <_dtoa_r+0x26a>
 800fd8c:	2401      	movs	r4, #1
 800fd8e:	2200      	movs	r2, #0
 800fd90:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800fd94:	f04f 3aff 	mov.w	sl, #4294967295
 800fd98:	2100      	movs	r1, #0
 800fd9a:	46d1      	mov	r9, sl
 800fd9c:	2212      	movs	r2, #18
 800fd9e:	9108      	str	r1, [sp, #32]
 800fda0:	e7cf      	b.n	800fd42 <_dtoa_r+0x23a>
 800fda2:	2201      	movs	r2, #1
 800fda4:	9207      	str	r2, [sp, #28]
 800fda6:	e7f5      	b.n	800fd94 <_dtoa_r+0x28c>
 800fda8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fdac:	46d1      	mov	r9, sl
 800fdae:	4652      	mov	r2, sl
 800fdb0:	e7c7      	b.n	800fd42 <_dtoa_r+0x23a>
 800fdb2:	3101      	adds	r1, #1
 800fdb4:	0040      	lsls	r0, r0, #1
 800fdb6:	e7c7      	b.n	800fd48 <_dtoa_r+0x240>
 800fdb8:	636f4361 	.word	0x636f4361
 800fdbc:	3fd287a7 	.word	0x3fd287a7
 800fdc0:	8b60c8b3 	.word	0x8b60c8b3
 800fdc4:	3fc68a28 	.word	0x3fc68a28
 800fdc8:	509f79fb 	.word	0x509f79fb
 800fdcc:	3fd34413 	.word	0x3fd34413
 800fdd0:	080131f5 	.word	0x080131f5
 800fdd4:	0801320c 	.word	0x0801320c
 800fdd8:	7ff00000 	.word	0x7ff00000
 800fddc:	080131f1 	.word	0x080131f1
 800fde0:	080131e8 	.word	0x080131e8
 800fde4:	080131c5 	.word	0x080131c5
 800fde8:	080132f8 	.word	0x080132f8
 800fdec:	08013264 	.word	0x08013264
 800fdf0:	69f2      	ldr	r2, [r6, #28]
 800fdf2:	9901      	ldr	r1, [sp, #4]
 800fdf4:	6011      	str	r1, [r2, #0]
 800fdf6:	f1b9 0f0e 	cmp.w	r9, #14
 800fdfa:	d86c      	bhi.n	800fed6 <_dtoa_r+0x3ce>
 800fdfc:	2c00      	cmp	r4, #0
 800fdfe:	d06a      	beq.n	800fed6 <_dtoa_r+0x3ce>
 800fe00:	f1bb 0f00 	cmp.w	fp, #0
 800fe04:	f340 80a0 	ble.w	800ff48 <_dtoa_r+0x440>
 800fe08:	4ac1      	ldr	r2, [pc, #772]	; (8010110 <_dtoa_r+0x608>)
 800fe0a:	f00b 010f 	and.w	r1, fp, #15
 800fe0e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800fe12:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fe16:	ed92 7b00 	vldr	d7, [r2]
 800fe1a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800fe1e:	f000 8087 	beq.w	800ff30 <_dtoa_r+0x428>
 800fe22:	49bc      	ldr	r1, [pc, #752]	; (8010114 <_dtoa_r+0x60c>)
 800fe24:	ed91 6b08 	vldr	d6, [r1, #32]
 800fe28:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800fe2c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fe30:	f002 020f 	and.w	r2, r2, #15
 800fe34:	2103      	movs	r1, #3
 800fe36:	48b7      	ldr	r0, [pc, #732]	; (8010114 <_dtoa_r+0x60c>)
 800fe38:	2a00      	cmp	r2, #0
 800fe3a:	d17b      	bne.n	800ff34 <_dtoa_r+0x42c>
 800fe3c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fe40:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800fe44:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fe4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fe4e:	2a00      	cmp	r2, #0
 800fe50:	f000 80a0 	beq.w	800ff94 <_dtoa_r+0x48c>
 800fe54:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800fe58:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fe5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe60:	f140 8098 	bpl.w	800ff94 <_dtoa_r+0x48c>
 800fe64:	f1b9 0f00 	cmp.w	r9, #0
 800fe68:	f000 8094 	beq.w	800ff94 <_dtoa_r+0x48c>
 800fe6c:	f1ba 0f00 	cmp.w	sl, #0
 800fe70:	dd2f      	ble.n	800fed2 <_dtoa_r+0x3ca>
 800fe72:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800fe76:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fe7a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe7e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800fe82:	3101      	adds	r1, #1
 800fe84:	4654      	mov	r4, sl
 800fe86:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fe8a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800fe8e:	ee07 1a90 	vmov	s15, r1
 800fe92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fe96:	eea7 5b06 	vfma.f64	d5, d7, d6
 800fe9a:	ee15 7a90 	vmov	r7, s11
 800fe9e:	ec51 0b15 	vmov	r0, r1, d5
 800fea2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800fea6:	2c00      	cmp	r4, #0
 800fea8:	d177      	bne.n	800ff9a <_dtoa_r+0x492>
 800feaa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800feae:	ee36 6b47 	vsub.f64	d6, d6, d7
 800feb2:	ec41 0b17 	vmov	d7, r0, r1
 800feb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800feba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800febe:	f300 826a 	bgt.w	8010396 <_dtoa_r+0x88e>
 800fec2:	eeb1 7b47 	vneg.f64	d7, d7
 800fec6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800feca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fece:	f100 8260 	bmi.w	8010392 <_dtoa_r+0x88a>
 800fed2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fed6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fed8:	2a00      	cmp	r2, #0
 800feda:	f2c0 811d 	blt.w	8010118 <_dtoa_r+0x610>
 800fede:	f1bb 0f0e 	cmp.w	fp, #14
 800fee2:	f300 8119 	bgt.w	8010118 <_dtoa_r+0x610>
 800fee6:	4b8a      	ldr	r3, [pc, #552]	; (8010110 <_dtoa_r+0x608>)
 800fee8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800feec:	ed93 6b00 	vldr	d6, [r3]
 800fef0:	9b08      	ldr	r3, [sp, #32]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	f280 80b7 	bge.w	8010066 <_dtoa_r+0x55e>
 800fef8:	f1b9 0f00 	cmp.w	r9, #0
 800fefc:	f300 80b3 	bgt.w	8010066 <_dtoa_r+0x55e>
 800ff00:	f040 8246 	bne.w	8010390 <_dtoa_r+0x888>
 800ff04:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ff08:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ff0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ff14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff18:	464c      	mov	r4, r9
 800ff1a:	464f      	mov	r7, r9
 800ff1c:	f280 821c 	bge.w	8010358 <_dtoa_r+0x850>
 800ff20:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ff24:	2331      	movs	r3, #49	; 0x31
 800ff26:	f808 3b01 	strb.w	r3, [r8], #1
 800ff2a:	f10b 0b01 	add.w	fp, fp, #1
 800ff2e:	e218      	b.n	8010362 <_dtoa_r+0x85a>
 800ff30:	2102      	movs	r1, #2
 800ff32:	e780      	b.n	800fe36 <_dtoa_r+0x32e>
 800ff34:	07d4      	lsls	r4, r2, #31
 800ff36:	d504      	bpl.n	800ff42 <_dtoa_r+0x43a>
 800ff38:	ed90 6b00 	vldr	d6, [r0]
 800ff3c:	3101      	adds	r1, #1
 800ff3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ff42:	1052      	asrs	r2, r2, #1
 800ff44:	3008      	adds	r0, #8
 800ff46:	e777      	b.n	800fe38 <_dtoa_r+0x330>
 800ff48:	d022      	beq.n	800ff90 <_dtoa_r+0x488>
 800ff4a:	f1cb 0200 	rsb	r2, fp, #0
 800ff4e:	4970      	ldr	r1, [pc, #448]	; (8010110 <_dtoa_r+0x608>)
 800ff50:	f002 000f 	and.w	r0, r2, #15
 800ff54:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ff58:	ed91 7b00 	vldr	d7, [r1]
 800ff5c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ff60:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff64:	486b      	ldr	r0, [pc, #428]	; (8010114 <_dtoa_r+0x60c>)
 800ff66:	1112      	asrs	r2, r2, #4
 800ff68:	2400      	movs	r4, #0
 800ff6a:	2102      	movs	r1, #2
 800ff6c:	b92a      	cbnz	r2, 800ff7a <_dtoa_r+0x472>
 800ff6e:	2c00      	cmp	r4, #0
 800ff70:	f43f af6a 	beq.w	800fe48 <_dtoa_r+0x340>
 800ff74:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff78:	e766      	b.n	800fe48 <_dtoa_r+0x340>
 800ff7a:	07d7      	lsls	r7, r2, #31
 800ff7c:	d505      	bpl.n	800ff8a <_dtoa_r+0x482>
 800ff7e:	ed90 6b00 	vldr	d6, [r0]
 800ff82:	3101      	adds	r1, #1
 800ff84:	2401      	movs	r4, #1
 800ff86:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ff8a:	1052      	asrs	r2, r2, #1
 800ff8c:	3008      	adds	r0, #8
 800ff8e:	e7ed      	b.n	800ff6c <_dtoa_r+0x464>
 800ff90:	2102      	movs	r1, #2
 800ff92:	e759      	b.n	800fe48 <_dtoa_r+0x340>
 800ff94:	465a      	mov	r2, fp
 800ff96:	464c      	mov	r4, r9
 800ff98:	e775      	b.n	800fe86 <_dtoa_r+0x37e>
 800ff9a:	ec41 0b17 	vmov	d7, r0, r1
 800ff9e:	495c      	ldr	r1, [pc, #368]	; (8010110 <_dtoa_r+0x608>)
 800ffa0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800ffa4:	ed11 4b02 	vldr	d4, [r1, #-8]
 800ffa8:	9901      	ldr	r1, [sp, #4]
 800ffaa:	440c      	add	r4, r1
 800ffac:	9907      	ldr	r1, [sp, #28]
 800ffae:	b351      	cbz	r1, 8010006 <_dtoa_r+0x4fe>
 800ffb0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ffb4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ffb8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ffbc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ffc0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ffc4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ffc8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ffcc:	ee14 1a90 	vmov	r1, s9
 800ffd0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ffd4:	3130      	adds	r1, #48	; 0x30
 800ffd6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ffda:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ffde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe2:	f808 1b01 	strb.w	r1, [r8], #1
 800ffe6:	d439      	bmi.n	801005c <_dtoa_r+0x554>
 800ffe8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ffec:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800fff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fff4:	d472      	bmi.n	80100dc <_dtoa_r+0x5d4>
 800fff6:	45a0      	cmp	r8, r4
 800fff8:	f43f af6b 	beq.w	800fed2 <_dtoa_r+0x3ca>
 800fffc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010000:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010004:	e7e0      	b.n	800ffc8 <_dtoa_r+0x4c0>
 8010006:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801000a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801000e:	4620      	mov	r0, r4
 8010010:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010014:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010018:	ee14 1a90 	vmov	r1, s9
 801001c:	3130      	adds	r1, #48	; 0x30
 801001e:	f808 1b01 	strb.w	r1, [r8], #1
 8010022:	45a0      	cmp	r8, r4
 8010024:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010028:	ee36 6b45 	vsub.f64	d6, d6, d5
 801002c:	d118      	bne.n	8010060 <_dtoa_r+0x558>
 801002e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010032:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010036:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801003a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801003e:	dc4d      	bgt.n	80100dc <_dtoa_r+0x5d4>
 8010040:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010044:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801004c:	f57f af41 	bpl.w	800fed2 <_dtoa_r+0x3ca>
 8010050:	4680      	mov	r8, r0
 8010052:	3801      	subs	r0, #1
 8010054:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010058:	2b30      	cmp	r3, #48	; 0x30
 801005a:	d0f9      	beq.n	8010050 <_dtoa_r+0x548>
 801005c:	4693      	mov	fp, r2
 801005e:	e02a      	b.n	80100b6 <_dtoa_r+0x5ae>
 8010060:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010064:	e7d6      	b.n	8010014 <_dtoa_r+0x50c>
 8010066:	ed9d 7b02 	vldr	d7, [sp, #8]
 801006a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801006e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010072:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010076:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801007a:	ee15 3a10 	vmov	r3, s10
 801007e:	3330      	adds	r3, #48	; 0x30
 8010080:	f808 3b01 	strb.w	r3, [r8], #1
 8010084:	9b01      	ldr	r3, [sp, #4]
 8010086:	eba8 0303 	sub.w	r3, r8, r3
 801008a:	4599      	cmp	r9, r3
 801008c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010090:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010094:	d133      	bne.n	80100fe <_dtoa_r+0x5f6>
 8010096:	ee37 7b07 	vadd.f64	d7, d7, d7
 801009a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801009e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100a2:	dc1a      	bgt.n	80100da <_dtoa_r+0x5d2>
 80100a4:	eeb4 7b46 	vcmp.f64	d7, d6
 80100a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ac:	d103      	bne.n	80100b6 <_dtoa_r+0x5ae>
 80100ae:	ee15 3a10 	vmov	r3, s10
 80100b2:	07d9      	lsls	r1, r3, #31
 80100b4:	d411      	bmi.n	80100da <_dtoa_r+0x5d2>
 80100b6:	4629      	mov	r1, r5
 80100b8:	4630      	mov	r0, r6
 80100ba:	f000 fbd1 	bl	8010860 <_Bfree>
 80100be:	2300      	movs	r3, #0
 80100c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80100c2:	f888 3000 	strb.w	r3, [r8]
 80100c6:	f10b 0301 	add.w	r3, fp, #1
 80100ca:	6013      	str	r3, [r2, #0]
 80100cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	f43f ad69 	beq.w	800fba6 <_dtoa_r+0x9e>
 80100d4:	f8c3 8000 	str.w	r8, [r3]
 80100d8:	e565      	b.n	800fba6 <_dtoa_r+0x9e>
 80100da:	465a      	mov	r2, fp
 80100dc:	4643      	mov	r3, r8
 80100de:	4698      	mov	r8, r3
 80100e0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80100e4:	2939      	cmp	r1, #57	; 0x39
 80100e6:	d106      	bne.n	80100f6 <_dtoa_r+0x5ee>
 80100e8:	9901      	ldr	r1, [sp, #4]
 80100ea:	4299      	cmp	r1, r3
 80100ec:	d1f7      	bne.n	80100de <_dtoa_r+0x5d6>
 80100ee:	9801      	ldr	r0, [sp, #4]
 80100f0:	2130      	movs	r1, #48	; 0x30
 80100f2:	3201      	adds	r2, #1
 80100f4:	7001      	strb	r1, [r0, #0]
 80100f6:	7819      	ldrb	r1, [r3, #0]
 80100f8:	3101      	adds	r1, #1
 80100fa:	7019      	strb	r1, [r3, #0]
 80100fc:	e7ae      	b.n	801005c <_dtoa_r+0x554>
 80100fe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010102:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801010a:	d1b2      	bne.n	8010072 <_dtoa_r+0x56a>
 801010c:	e7d3      	b.n	80100b6 <_dtoa_r+0x5ae>
 801010e:	bf00      	nop
 8010110:	080132f8 	.word	0x080132f8
 8010114:	080132d0 	.word	0x080132d0
 8010118:	9907      	ldr	r1, [sp, #28]
 801011a:	2900      	cmp	r1, #0
 801011c:	f000 80d0 	beq.w	80102c0 <_dtoa_r+0x7b8>
 8010120:	9906      	ldr	r1, [sp, #24]
 8010122:	2901      	cmp	r1, #1
 8010124:	f300 80b4 	bgt.w	8010290 <_dtoa_r+0x788>
 8010128:	9909      	ldr	r1, [sp, #36]	; 0x24
 801012a:	2900      	cmp	r1, #0
 801012c:	f000 80ac 	beq.w	8010288 <_dtoa_r+0x780>
 8010130:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010134:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010138:	461c      	mov	r4, r3
 801013a:	9309      	str	r3, [sp, #36]	; 0x24
 801013c:	9b04      	ldr	r3, [sp, #16]
 801013e:	4413      	add	r3, r2
 8010140:	9304      	str	r3, [sp, #16]
 8010142:	9b05      	ldr	r3, [sp, #20]
 8010144:	2101      	movs	r1, #1
 8010146:	4413      	add	r3, r2
 8010148:	4630      	mov	r0, r6
 801014a:	9305      	str	r3, [sp, #20]
 801014c:	f000 fc3e 	bl	80109cc <__i2b>
 8010150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010152:	4607      	mov	r7, r0
 8010154:	f1b8 0f00 	cmp.w	r8, #0
 8010158:	d00d      	beq.n	8010176 <_dtoa_r+0x66e>
 801015a:	9a05      	ldr	r2, [sp, #20]
 801015c:	2a00      	cmp	r2, #0
 801015e:	dd0a      	ble.n	8010176 <_dtoa_r+0x66e>
 8010160:	4542      	cmp	r2, r8
 8010162:	9904      	ldr	r1, [sp, #16]
 8010164:	bfa8      	it	ge
 8010166:	4642      	movge	r2, r8
 8010168:	1a89      	subs	r1, r1, r2
 801016a:	9104      	str	r1, [sp, #16]
 801016c:	9905      	ldr	r1, [sp, #20]
 801016e:	eba8 0802 	sub.w	r8, r8, r2
 8010172:	1a8a      	subs	r2, r1, r2
 8010174:	9205      	str	r2, [sp, #20]
 8010176:	b303      	cbz	r3, 80101ba <_dtoa_r+0x6b2>
 8010178:	9a07      	ldr	r2, [sp, #28]
 801017a:	2a00      	cmp	r2, #0
 801017c:	f000 80a5 	beq.w	80102ca <_dtoa_r+0x7c2>
 8010180:	2c00      	cmp	r4, #0
 8010182:	dd13      	ble.n	80101ac <_dtoa_r+0x6a4>
 8010184:	4639      	mov	r1, r7
 8010186:	4622      	mov	r2, r4
 8010188:	4630      	mov	r0, r6
 801018a:	930d      	str	r3, [sp, #52]	; 0x34
 801018c:	f000 fcde 	bl	8010b4c <__pow5mult>
 8010190:	462a      	mov	r2, r5
 8010192:	4601      	mov	r1, r0
 8010194:	4607      	mov	r7, r0
 8010196:	4630      	mov	r0, r6
 8010198:	f000 fc2e 	bl	80109f8 <__multiply>
 801019c:	4629      	mov	r1, r5
 801019e:	9009      	str	r0, [sp, #36]	; 0x24
 80101a0:	4630      	mov	r0, r6
 80101a2:	f000 fb5d 	bl	8010860 <_Bfree>
 80101a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101aa:	4615      	mov	r5, r2
 80101ac:	1b1a      	subs	r2, r3, r4
 80101ae:	d004      	beq.n	80101ba <_dtoa_r+0x6b2>
 80101b0:	4629      	mov	r1, r5
 80101b2:	4630      	mov	r0, r6
 80101b4:	f000 fcca 	bl	8010b4c <__pow5mult>
 80101b8:	4605      	mov	r5, r0
 80101ba:	2101      	movs	r1, #1
 80101bc:	4630      	mov	r0, r6
 80101be:	f000 fc05 	bl	80109cc <__i2b>
 80101c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	4604      	mov	r4, r0
 80101c8:	f340 8081 	ble.w	80102ce <_dtoa_r+0x7c6>
 80101cc:	461a      	mov	r2, r3
 80101ce:	4601      	mov	r1, r0
 80101d0:	4630      	mov	r0, r6
 80101d2:	f000 fcbb 	bl	8010b4c <__pow5mult>
 80101d6:	9b06      	ldr	r3, [sp, #24]
 80101d8:	2b01      	cmp	r3, #1
 80101da:	4604      	mov	r4, r0
 80101dc:	dd7a      	ble.n	80102d4 <_dtoa_r+0x7cc>
 80101de:	2300      	movs	r3, #0
 80101e0:	9309      	str	r3, [sp, #36]	; 0x24
 80101e2:	6922      	ldr	r2, [r4, #16]
 80101e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80101e8:	6910      	ldr	r0, [r2, #16]
 80101ea:	f000 fba1 	bl	8010930 <__hi0bits>
 80101ee:	f1c0 0020 	rsb	r0, r0, #32
 80101f2:	9b05      	ldr	r3, [sp, #20]
 80101f4:	4418      	add	r0, r3
 80101f6:	f010 001f 	ands.w	r0, r0, #31
 80101fa:	f000 8093 	beq.w	8010324 <_dtoa_r+0x81c>
 80101fe:	f1c0 0220 	rsb	r2, r0, #32
 8010202:	2a04      	cmp	r2, #4
 8010204:	f340 8085 	ble.w	8010312 <_dtoa_r+0x80a>
 8010208:	9b04      	ldr	r3, [sp, #16]
 801020a:	f1c0 001c 	rsb	r0, r0, #28
 801020e:	4403      	add	r3, r0
 8010210:	9304      	str	r3, [sp, #16]
 8010212:	9b05      	ldr	r3, [sp, #20]
 8010214:	4480      	add	r8, r0
 8010216:	4403      	add	r3, r0
 8010218:	9305      	str	r3, [sp, #20]
 801021a:	9b04      	ldr	r3, [sp, #16]
 801021c:	2b00      	cmp	r3, #0
 801021e:	dd05      	ble.n	801022c <_dtoa_r+0x724>
 8010220:	4629      	mov	r1, r5
 8010222:	461a      	mov	r2, r3
 8010224:	4630      	mov	r0, r6
 8010226:	f000 fceb 	bl	8010c00 <__lshift>
 801022a:	4605      	mov	r5, r0
 801022c:	9b05      	ldr	r3, [sp, #20]
 801022e:	2b00      	cmp	r3, #0
 8010230:	dd05      	ble.n	801023e <_dtoa_r+0x736>
 8010232:	4621      	mov	r1, r4
 8010234:	461a      	mov	r2, r3
 8010236:	4630      	mov	r0, r6
 8010238:	f000 fce2 	bl	8010c00 <__lshift>
 801023c:	4604      	mov	r4, r0
 801023e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010240:	2b00      	cmp	r3, #0
 8010242:	d071      	beq.n	8010328 <_dtoa_r+0x820>
 8010244:	4621      	mov	r1, r4
 8010246:	4628      	mov	r0, r5
 8010248:	f000 fd46 	bl	8010cd8 <__mcmp>
 801024c:	2800      	cmp	r0, #0
 801024e:	da6b      	bge.n	8010328 <_dtoa_r+0x820>
 8010250:	2300      	movs	r3, #0
 8010252:	4629      	mov	r1, r5
 8010254:	220a      	movs	r2, #10
 8010256:	4630      	mov	r0, r6
 8010258:	f000 fb24 	bl	80108a4 <__multadd>
 801025c:	9b07      	ldr	r3, [sp, #28]
 801025e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010262:	4605      	mov	r5, r0
 8010264:	2b00      	cmp	r3, #0
 8010266:	f000 8197 	beq.w	8010598 <_dtoa_r+0xa90>
 801026a:	4639      	mov	r1, r7
 801026c:	2300      	movs	r3, #0
 801026e:	220a      	movs	r2, #10
 8010270:	4630      	mov	r0, r6
 8010272:	f000 fb17 	bl	80108a4 <__multadd>
 8010276:	f1ba 0f00 	cmp.w	sl, #0
 801027a:	4607      	mov	r7, r0
 801027c:	f300 8093 	bgt.w	80103a6 <_dtoa_r+0x89e>
 8010280:	9b06      	ldr	r3, [sp, #24]
 8010282:	2b02      	cmp	r3, #2
 8010284:	dc57      	bgt.n	8010336 <_dtoa_r+0x82e>
 8010286:	e08e      	b.n	80103a6 <_dtoa_r+0x89e>
 8010288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801028a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801028e:	e751      	b.n	8010134 <_dtoa_r+0x62c>
 8010290:	f109 34ff 	add.w	r4, r9, #4294967295
 8010294:	42a3      	cmp	r3, r4
 8010296:	bfbf      	itttt	lt
 8010298:	1ae2      	sublt	r2, r4, r3
 801029a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801029c:	189b      	addlt	r3, r3, r2
 801029e:	930a      	strlt	r3, [sp, #40]	; 0x28
 80102a0:	bfae      	itee	ge
 80102a2:	1b1c      	subge	r4, r3, r4
 80102a4:	4623      	movlt	r3, r4
 80102a6:	2400      	movlt	r4, #0
 80102a8:	f1b9 0f00 	cmp.w	r9, #0
 80102ac:	bfb5      	itete	lt
 80102ae:	9a04      	ldrlt	r2, [sp, #16]
 80102b0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80102b4:	eba2 0809 	sublt.w	r8, r2, r9
 80102b8:	464a      	movge	r2, r9
 80102ba:	bfb8      	it	lt
 80102bc:	2200      	movlt	r2, #0
 80102be:	e73c      	b.n	801013a <_dtoa_r+0x632>
 80102c0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80102c4:	9f07      	ldr	r7, [sp, #28]
 80102c6:	461c      	mov	r4, r3
 80102c8:	e744      	b.n	8010154 <_dtoa_r+0x64c>
 80102ca:	461a      	mov	r2, r3
 80102cc:	e770      	b.n	80101b0 <_dtoa_r+0x6a8>
 80102ce:	9b06      	ldr	r3, [sp, #24]
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	dc18      	bgt.n	8010306 <_dtoa_r+0x7fe>
 80102d4:	9b02      	ldr	r3, [sp, #8]
 80102d6:	b9b3      	cbnz	r3, 8010306 <_dtoa_r+0x7fe>
 80102d8:	9b03      	ldr	r3, [sp, #12]
 80102da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80102de:	b9a2      	cbnz	r2, 801030a <_dtoa_r+0x802>
 80102e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80102e4:	0d12      	lsrs	r2, r2, #20
 80102e6:	0512      	lsls	r2, r2, #20
 80102e8:	b18a      	cbz	r2, 801030e <_dtoa_r+0x806>
 80102ea:	9b04      	ldr	r3, [sp, #16]
 80102ec:	3301      	adds	r3, #1
 80102ee:	9304      	str	r3, [sp, #16]
 80102f0:	9b05      	ldr	r3, [sp, #20]
 80102f2:	3301      	adds	r3, #1
 80102f4:	9305      	str	r3, [sp, #20]
 80102f6:	2301      	movs	r3, #1
 80102f8:	9309      	str	r3, [sp, #36]	; 0x24
 80102fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f47f af70 	bne.w	80101e2 <_dtoa_r+0x6da>
 8010302:	2001      	movs	r0, #1
 8010304:	e775      	b.n	80101f2 <_dtoa_r+0x6ea>
 8010306:	2300      	movs	r3, #0
 8010308:	e7f6      	b.n	80102f8 <_dtoa_r+0x7f0>
 801030a:	9b02      	ldr	r3, [sp, #8]
 801030c:	e7f4      	b.n	80102f8 <_dtoa_r+0x7f0>
 801030e:	9209      	str	r2, [sp, #36]	; 0x24
 8010310:	e7f3      	b.n	80102fa <_dtoa_r+0x7f2>
 8010312:	d082      	beq.n	801021a <_dtoa_r+0x712>
 8010314:	9b04      	ldr	r3, [sp, #16]
 8010316:	321c      	adds	r2, #28
 8010318:	4413      	add	r3, r2
 801031a:	9304      	str	r3, [sp, #16]
 801031c:	9b05      	ldr	r3, [sp, #20]
 801031e:	4490      	add	r8, r2
 8010320:	4413      	add	r3, r2
 8010322:	e779      	b.n	8010218 <_dtoa_r+0x710>
 8010324:	4602      	mov	r2, r0
 8010326:	e7f5      	b.n	8010314 <_dtoa_r+0x80c>
 8010328:	f1b9 0f00 	cmp.w	r9, #0
 801032c:	dc36      	bgt.n	801039c <_dtoa_r+0x894>
 801032e:	9b06      	ldr	r3, [sp, #24]
 8010330:	2b02      	cmp	r3, #2
 8010332:	dd33      	ble.n	801039c <_dtoa_r+0x894>
 8010334:	46ca      	mov	sl, r9
 8010336:	f1ba 0f00 	cmp.w	sl, #0
 801033a:	d10d      	bne.n	8010358 <_dtoa_r+0x850>
 801033c:	4621      	mov	r1, r4
 801033e:	4653      	mov	r3, sl
 8010340:	2205      	movs	r2, #5
 8010342:	4630      	mov	r0, r6
 8010344:	f000 faae 	bl	80108a4 <__multadd>
 8010348:	4601      	mov	r1, r0
 801034a:	4604      	mov	r4, r0
 801034c:	4628      	mov	r0, r5
 801034e:	f000 fcc3 	bl	8010cd8 <__mcmp>
 8010352:	2800      	cmp	r0, #0
 8010354:	f73f ade4 	bgt.w	800ff20 <_dtoa_r+0x418>
 8010358:	9b08      	ldr	r3, [sp, #32]
 801035a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801035e:	ea6f 0b03 	mvn.w	fp, r3
 8010362:	f04f 0900 	mov.w	r9, #0
 8010366:	4621      	mov	r1, r4
 8010368:	4630      	mov	r0, r6
 801036a:	f000 fa79 	bl	8010860 <_Bfree>
 801036e:	2f00      	cmp	r7, #0
 8010370:	f43f aea1 	beq.w	80100b6 <_dtoa_r+0x5ae>
 8010374:	f1b9 0f00 	cmp.w	r9, #0
 8010378:	d005      	beq.n	8010386 <_dtoa_r+0x87e>
 801037a:	45b9      	cmp	r9, r7
 801037c:	d003      	beq.n	8010386 <_dtoa_r+0x87e>
 801037e:	4649      	mov	r1, r9
 8010380:	4630      	mov	r0, r6
 8010382:	f000 fa6d 	bl	8010860 <_Bfree>
 8010386:	4639      	mov	r1, r7
 8010388:	4630      	mov	r0, r6
 801038a:	f000 fa69 	bl	8010860 <_Bfree>
 801038e:	e692      	b.n	80100b6 <_dtoa_r+0x5ae>
 8010390:	2400      	movs	r4, #0
 8010392:	4627      	mov	r7, r4
 8010394:	e7e0      	b.n	8010358 <_dtoa_r+0x850>
 8010396:	4693      	mov	fp, r2
 8010398:	4627      	mov	r7, r4
 801039a:	e5c1      	b.n	800ff20 <_dtoa_r+0x418>
 801039c:	9b07      	ldr	r3, [sp, #28]
 801039e:	46ca      	mov	sl, r9
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	f000 8100 	beq.w	80105a6 <_dtoa_r+0xa9e>
 80103a6:	f1b8 0f00 	cmp.w	r8, #0
 80103aa:	dd05      	ble.n	80103b8 <_dtoa_r+0x8b0>
 80103ac:	4639      	mov	r1, r7
 80103ae:	4642      	mov	r2, r8
 80103b0:	4630      	mov	r0, r6
 80103b2:	f000 fc25 	bl	8010c00 <__lshift>
 80103b6:	4607      	mov	r7, r0
 80103b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d05d      	beq.n	801047a <_dtoa_r+0x972>
 80103be:	6879      	ldr	r1, [r7, #4]
 80103c0:	4630      	mov	r0, r6
 80103c2:	f000 fa0d 	bl	80107e0 <_Balloc>
 80103c6:	4680      	mov	r8, r0
 80103c8:	b928      	cbnz	r0, 80103d6 <_dtoa_r+0x8ce>
 80103ca:	4b82      	ldr	r3, [pc, #520]	; (80105d4 <_dtoa_r+0xacc>)
 80103cc:	4602      	mov	r2, r0
 80103ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80103d2:	f7ff bbb1 	b.w	800fb38 <_dtoa_r+0x30>
 80103d6:	693a      	ldr	r2, [r7, #16]
 80103d8:	3202      	adds	r2, #2
 80103da:	0092      	lsls	r2, r2, #2
 80103dc:	f107 010c 	add.w	r1, r7, #12
 80103e0:	300c      	adds	r0, #12
 80103e2:	f7ff faf8 	bl	800f9d6 <memcpy>
 80103e6:	2201      	movs	r2, #1
 80103e8:	4641      	mov	r1, r8
 80103ea:	4630      	mov	r0, r6
 80103ec:	f000 fc08 	bl	8010c00 <__lshift>
 80103f0:	9b01      	ldr	r3, [sp, #4]
 80103f2:	3301      	adds	r3, #1
 80103f4:	9304      	str	r3, [sp, #16]
 80103f6:	9b01      	ldr	r3, [sp, #4]
 80103f8:	4453      	add	r3, sl
 80103fa:	9308      	str	r3, [sp, #32]
 80103fc:	9b02      	ldr	r3, [sp, #8]
 80103fe:	f003 0301 	and.w	r3, r3, #1
 8010402:	46b9      	mov	r9, r7
 8010404:	9307      	str	r3, [sp, #28]
 8010406:	4607      	mov	r7, r0
 8010408:	9b04      	ldr	r3, [sp, #16]
 801040a:	4621      	mov	r1, r4
 801040c:	3b01      	subs	r3, #1
 801040e:	4628      	mov	r0, r5
 8010410:	9302      	str	r3, [sp, #8]
 8010412:	f7ff faee 	bl	800f9f2 <quorem>
 8010416:	4603      	mov	r3, r0
 8010418:	3330      	adds	r3, #48	; 0x30
 801041a:	9005      	str	r0, [sp, #20]
 801041c:	4649      	mov	r1, r9
 801041e:	4628      	mov	r0, r5
 8010420:	9309      	str	r3, [sp, #36]	; 0x24
 8010422:	f000 fc59 	bl	8010cd8 <__mcmp>
 8010426:	463a      	mov	r2, r7
 8010428:	4682      	mov	sl, r0
 801042a:	4621      	mov	r1, r4
 801042c:	4630      	mov	r0, r6
 801042e:	f000 fc6f 	bl	8010d10 <__mdiff>
 8010432:	68c2      	ldr	r2, [r0, #12]
 8010434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010436:	4680      	mov	r8, r0
 8010438:	bb0a      	cbnz	r2, 801047e <_dtoa_r+0x976>
 801043a:	4601      	mov	r1, r0
 801043c:	4628      	mov	r0, r5
 801043e:	f000 fc4b 	bl	8010cd8 <__mcmp>
 8010442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010444:	4602      	mov	r2, r0
 8010446:	4641      	mov	r1, r8
 8010448:	4630      	mov	r0, r6
 801044a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801044e:	f000 fa07 	bl	8010860 <_Bfree>
 8010452:	9b06      	ldr	r3, [sp, #24]
 8010454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010456:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801045a:	ea43 0102 	orr.w	r1, r3, r2
 801045e:	9b07      	ldr	r3, [sp, #28]
 8010460:	4319      	orrs	r1, r3
 8010462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010464:	d10d      	bne.n	8010482 <_dtoa_r+0x97a>
 8010466:	2b39      	cmp	r3, #57	; 0x39
 8010468:	d029      	beq.n	80104be <_dtoa_r+0x9b6>
 801046a:	f1ba 0f00 	cmp.w	sl, #0
 801046e:	dd01      	ble.n	8010474 <_dtoa_r+0x96c>
 8010470:	9b05      	ldr	r3, [sp, #20]
 8010472:	3331      	adds	r3, #49	; 0x31
 8010474:	9a02      	ldr	r2, [sp, #8]
 8010476:	7013      	strb	r3, [r2, #0]
 8010478:	e775      	b.n	8010366 <_dtoa_r+0x85e>
 801047a:	4638      	mov	r0, r7
 801047c:	e7b8      	b.n	80103f0 <_dtoa_r+0x8e8>
 801047e:	2201      	movs	r2, #1
 8010480:	e7e1      	b.n	8010446 <_dtoa_r+0x93e>
 8010482:	f1ba 0f00 	cmp.w	sl, #0
 8010486:	db06      	blt.n	8010496 <_dtoa_r+0x98e>
 8010488:	9906      	ldr	r1, [sp, #24]
 801048a:	ea41 0a0a 	orr.w	sl, r1, sl
 801048e:	9907      	ldr	r1, [sp, #28]
 8010490:	ea5a 0a01 	orrs.w	sl, sl, r1
 8010494:	d120      	bne.n	80104d8 <_dtoa_r+0x9d0>
 8010496:	2a00      	cmp	r2, #0
 8010498:	ddec      	ble.n	8010474 <_dtoa_r+0x96c>
 801049a:	4629      	mov	r1, r5
 801049c:	2201      	movs	r2, #1
 801049e:	4630      	mov	r0, r6
 80104a0:	9304      	str	r3, [sp, #16]
 80104a2:	f000 fbad 	bl	8010c00 <__lshift>
 80104a6:	4621      	mov	r1, r4
 80104a8:	4605      	mov	r5, r0
 80104aa:	f000 fc15 	bl	8010cd8 <__mcmp>
 80104ae:	2800      	cmp	r0, #0
 80104b0:	9b04      	ldr	r3, [sp, #16]
 80104b2:	dc02      	bgt.n	80104ba <_dtoa_r+0x9b2>
 80104b4:	d1de      	bne.n	8010474 <_dtoa_r+0x96c>
 80104b6:	07da      	lsls	r2, r3, #31
 80104b8:	d5dc      	bpl.n	8010474 <_dtoa_r+0x96c>
 80104ba:	2b39      	cmp	r3, #57	; 0x39
 80104bc:	d1d8      	bne.n	8010470 <_dtoa_r+0x968>
 80104be:	9a02      	ldr	r2, [sp, #8]
 80104c0:	2339      	movs	r3, #57	; 0x39
 80104c2:	7013      	strb	r3, [r2, #0]
 80104c4:	4643      	mov	r3, r8
 80104c6:	4698      	mov	r8, r3
 80104c8:	3b01      	subs	r3, #1
 80104ca:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80104ce:	2a39      	cmp	r2, #57	; 0x39
 80104d0:	d051      	beq.n	8010576 <_dtoa_r+0xa6e>
 80104d2:	3201      	adds	r2, #1
 80104d4:	701a      	strb	r2, [r3, #0]
 80104d6:	e746      	b.n	8010366 <_dtoa_r+0x85e>
 80104d8:	2a00      	cmp	r2, #0
 80104da:	dd03      	ble.n	80104e4 <_dtoa_r+0x9dc>
 80104dc:	2b39      	cmp	r3, #57	; 0x39
 80104de:	d0ee      	beq.n	80104be <_dtoa_r+0x9b6>
 80104e0:	3301      	adds	r3, #1
 80104e2:	e7c7      	b.n	8010474 <_dtoa_r+0x96c>
 80104e4:	9a04      	ldr	r2, [sp, #16]
 80104e6:	9908      	ldr	r1, [sp, #32]
 80104e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80104ec:	428a      	cmp	r2, r1
 80104ee:	d02b      	beq.n	8010548 <_dtoa_r+0xa40>
 80104f0:	4629      	mov	r1, r5
 80104f2:	2300      	movs	r3, #0
 80104f4:	220a      	movs	r2, #10
 80104f6:	4630      	mov	r0, r6
 80104f8:	f000 f9d4 	bl	80108a4 <__multadd>
 80104fc:	45b9      	cmp	r9, r7
 80104fe:	4605      	mov	r5, r0
 8010500:	f04f 0300 	mov.w	r3, #0
 8010504:	f04f 020a 	mov.w	r2, #10
 8010508:	4649      	mov	r1, r9
 801050a:	4630      	mov	r0, r6
 801050c:	d107      	bne.n	801051e <_dtoa_r+0xa16>
 801050e:	f000 f9c9 	bl	80108a4 <__multadd>
 8010512:	4681      	mov	r9, r0
 8010514:	4607      	mov	r7, r0
 8010516:	9b04      	ldr	r3, [sp, #16]
 8010518:	3301      	adds	r3, #1
 801051a:	9304      	str	r3, [sp, #16]
 801051c:	e774      	b.n	8010408 <_dtoa_r+0x900>
 801051e:	f000 f9c1 	bl	80108a4 <__multadd>
 8010522:	4639      	mov	r1, r7
 8010524:	4681      	mov	r9, r0
 8010526:	2300      	movs	r3, #0
 8010528:	220a      	movs	r2, #10
 801052a:	4630      	mov	r0, r6
 801052c:	f000 f9ba 	bl	80108a4 <__multadd>
 8010530:	4607      	mov	r7, r0
 8010532:	e7f0      	b.n	8010516 <_dtoa_r+0xa0e>
 8010534:	f1ba 0f00 	cmp.w	sl, #0
 8010538:	9a01      	ldr	r2, [sp, #4]
 801053a:	bfcc      	ite	gt
 801053c:	46d0      	movgt	r8, sl
 801053e:	f04f 0801 	movle.w	r8, #1
 8010542:	4490      	add	r8, r2
 8010544:	f04f 0900 	mov.w	r9, #0
 8010548:	4629      	mov	r1, r5
 801054a:	2201      	movs	r2, #1
 801054c:	4630      	mov	r0, r6
 801054e:	9302      	str	r3, [sp, #8]
 8010550:	f000 fb56 	bl	8010c00 <__lshift>
 8010554:	4621      	mov	r1, r4
 8010556:	4605      	mov	r5, r0
 8010558:	f000 fbbe 	bl	8010cd8 <__mcmp>
 801055c:	2800      	cmp	r0, #0
 801055e:	dcb1      	bgt.n	80104c4 <_dtoa_r+0x9bc>
 8010560:	d102      	bne.n	8010568 <_dtoa_r+0xa60>
 8010562:	9b02      	ldr	r3, [sp, #8]
 8010564:	07db      	lsls	r3, r3, #31
 8010566:	d4ad      	bmi.n	80104c4 <_dtoa_r+0x9bc>
 8010568:	4643      	mov	r3, r8
 801056a:	4698      	mov	r8, r3
 801056c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010570:	2a30      	cmp	r2, #48	; 0x30
 8010572:	d0fa      	beq.n	801056a <_dtoa_r+0xa62>
 8010574:	e6f7      	b.n	8010366 <_dtoa_r+0x85e>
 8010576:	9a01      	ldr	r2, [sp, #4]
 8010578:	429a      	cmp	r2, r3
 801057a:	d1a4      	bne.n	80104c6 <_dtoa_r+0x9be>
 801057c:	f10b 0b01 	add.w	fp, fp, #1
 8010580:	2331      	movs	r3, #49	; 0x31
 8010582:	e778      	b.n	8010476 <_dtoa_r+0x96e>
 8010584:	4b14      	ldr	r3, [pc, #80]	; (80105d8 <_dtoa_r+0xad0>)
 8010586:	f7ff bb2a 	b.w	800fbde <_dtoa_r+0xd6>
 801058a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801058c:	2b00      	cmp	r3, #0
 801058e:	f47f ab05 	bne.w	800fb9c <_dtoa_r+0x94>
 8010592:	4b12      	ldr	r3, [pc, #72]	; (80105dc <_dtoa_r+0xad4>)
 8010594:	f7ff bb23 	b.w	800fbde <_dtoa_r+0xd6>
 8010598:	f1ba 0f00 	cmp.w	sl, #0
 801059c:	dc03      	bgt.n	80105a6 <_dtoa_r+0xa9e>
 801059e:	9b06      	ldr	r3, [sp, #24]
 80105a0:	2b02      	cmp	r3, #2
 80105a2:	f73f aec8 	bgt.w	8010336 <_dtoa_r+0x82e>
 80105a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80105aa:	4621      	mov	r1, r4
 80105ac:	4628      	mov	r0, r5
 80105ae:	f7ff fa20 	bl	800f9f2 <quorem>
 80105b2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80105b6:	f808 3b01 	strb.w	r3, [r8], #1
 80105ba:	9a01      	ldr	r2, [sp, #4]
 80105bc:	eba8 0202 	sub.w	r2, r8, r2
 80105c0:	4592      	cmp	sl, r2
 80105c2:	ddb7      	ble.n	8010534 <_dtoa_r+0xa2c>
 80105c4:	4629      	mov	r1, r5
 80105c6:	2300      	movs	r3, #0
 80105c8:	220a      	movs	r2, #10
 80105ca:	4630      	mov	r0, r6
 80105cc:	f000 f96a 	bl	80108a4 <__multadd>
 80105d0:	4605      	mov	r5, r0
 80105d2:	e7ea      	b.n	80105aa <_dtoa_r+0xaa2>
 80105d4:	08013264 	.word	0x08013264
 80105d8:	080131c4 	.word	0x080131c4
 80105dc:	080131e8 	.word	0x080131e8

080105e0 <_free_r>:
 80105e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105e2:	2900      	cmp	r1, #0
 80105e4:	d044      	beq.n	8010670 <_free_r+0x90>
 80105e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105ea:	9001      	str	r0, [sp, #4]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	f1a1 0404 	sub.w	r4, r1, #4
 80105f2:	bfb8      	it	lt
 80105f4:	18e4      	addlt	r4, r4, r3
 80105f6:	f000 f8e7 	bl	80107c8 <__malloc_lock>
 80105fa:	4a1e      	ldr	r2, [pc, #120]	; (8010674 <_free_r+0x94>)
 80105fc:	9801      	ldr	r0, [sp, #4]
 80105fe:	6813      	ldr	r3, [r2, #0]
 8010600:	b933      	cbnz	r3, 8010610 <_free_r+0x30>
 8010602:	6063      	str	r3, [r4, #4]
 8010604:	6014      	str	r4, [r2, #0]
 8010606:	b003      	add	sp, #12
 8010608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801060c:	f000 b8e2 	b.w	80107d4 <__malloc_unlock>
 8010610:	42a3      	cmp	r3, r4
 8010612:	d908      	bls.n	8010626 <_free_r+0x46>
 8010614:	6825      	ldr	r5, [r4, #0]
 8010616:	1961      	adds	r1, r4, r5
 8010618:	428b      	cmp	r3, r1
 801061a:	bf01      	itttt	eq
 801061c:	6819      	ldreq	r1, [r3, #0]
 801061e:	685b      	ldreq	r3, [r3, #4]
 8010620:	1949      	addeq	r1, r1, r5
 8010622:	6021      	streq	r1, [r4, #0]
 8010624:	e7ed      	b.n	8010602 <_free_r+0x22>
 8010626:	461a      	mov	r2, r3
 8010628:	685b      	ldr	r3, [r3, #4]
 801062a:	b10b      	cbz	r3, 8010630 <_free_r+0x50>
 801062c:	42a3      	cmp	r3, r4
 801062e:	d9fa      	bls.n	8010626 <_free_r+0x46>
 8010630:	6811      	ldr	r1, [r2, #0]
 8010632:	1855      	adds	r5, r2, r1
 8010634:	42a5      	cmp	r5, r4
 8010636:	d10b      	bne.n	8010650 <_free_r+0x70>
 8010638:	6824      	ldr	r4, [r4, #0]
 801063a:	4421      	add	r1, r4
 801063c:	1854      	adds	r4, r2, r1
 801063e:	42a3      	cmp	r3, r4
 8010640:	6011      	str	r1, [r2, #0]
 8010642:	d1e0      	bne.n	8010606 <_free_r+0x26>
 8010644:	681c      	ldr	r4, [r3, #0]
 8010646:	685b      	ldr	r3, [r3, #4]
 8010648:	6053      	str	r3, [r2, #4]
 801064a:	440c      	add	r4, r1
 801064c:	6014      	str	r4, [r2, #0]
 801064e:	e7da      	b.n	8010606 <_free_r+0x26>
 8010650:	d902      	bls.n	8010658 <_free_r+0x78>
 8010652:	230c      	movs	r3, #12
 8010654:	6003      	str	r3, [r0, #0]
 8010656:	e7d6      	b.n	8010606 <_free_r+0x26>
 8010658:	6825      	ldr	r5, [r4, #0]
 801065a:	1961      	adds	r1, r4, r5
 801065c:	428b      	cmp	r3, r1
 801065e:	bf04      	itt	eq
 8010660:	6819      	ldreq	r1, [r3, #0]
 8010662:	685b      	ldreq	r3, [r3, #4]
 8010664:	6063      	str	r3, [r4, #4]
 8010666:	bf04      	itt	eq
 8010668:	1949      	addeq	r1, r1, r5
 801066a:	6021      	streq	r1, [r4, #0]
 801066c:	6054      	str	r4, [r2, #4]
 801066e:	e7ca      	b.n	8010606 <_free_r+0x26>
 8010670:	b003      	add	sp, #12
 8010672:	bd30      	pop	{r4, r5, pc}
 8010674:	240054dc 	.word	0x240054dc

08010678 <malloc>:
 8010678:	4b02      	ldr	r3, [pc, #8]	; (8010684 <malloc+0xc>)
 801067a:	4601      	mov	r1, r0
 801067c:	6818      	ldr	r0, [r3, #0]
 801067e:	f000 b823 	b.w	80106c8 <_malloc_r>
 8010682:	bf00      	nop
 8010684:	24000074 	.word	0x24000074

08010688 <sbrk_aligned>:
 8010688:	b570      	push	{r4, r5, r6, lr}
 801068a:	4e0e      	ldr	r6, [pc, #56]	; (80106c4 <sbrk_aligned+0x3c>)
 801068c:	460c      	mov	r4, r1
 801068e:	6831      	ldr	r1, [r6, #0]
 8010690:	4605      	mov	r5, r0
 8010692:	b911      	cbnz	r1, 801069a <sbrk_aligned+0x12>
 8010694:	f001 f808 	bl	80116a8 <_sbrk_r>
 8010698:	6030      	str	r0, [r6, #0]
 801069a:	4621      	mov	r1, r4
 801069c:	4628      	mov	r0, r5
 801069e:	f001 f803 	bl	80116a8 <_sbrk_r>
 80106a2:	1c43      	adds	r3, r0, #1
 80106a4:	d00a      	beq.n	80106bc <sbrk_aligned+0x34>
 80106a6:	1cc4      	adds	r4, r0, #3
 80106a8:	f024 0403 	bic.w	r4, r4, #3
 80106ac:	42a0      	cmp	r0, r4
 80106ae:	d007      	beq.n	80106c0 <sbrk_aligned+0x38>
 80106b0:	1a21      	subs	r1, r4, r0
 80106b2:	4628      	mov	r0, r5
 80106b4:	f000 fff8 	bl	80116a8 <_sbrk_r>
 80106b8:	3001      	adds	r0, #1
 80106ba:	d101      	bne.n	80106c0 <sbrk_aligned+0x38>
 80106bc:	f04f 34ff 	mov.w	r4, #4294967295
 80106c0:	4620      	mov	r0, r4
 80106c2:	bd70      	pop	{r4, r5, r6, pc}
 80106c4:	240054e0 	.word	0x240054e0

080106c8 <_malloc_r>:
 80106c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106cc:	1ccd      	adds	r5, r1, #3
 80106ce:	f025 0503 	bic.w	r5, r5, #3
 80106d2:	3508      	adds	r5, #8
 80106d4:	2d0c      	cmp	r5, #12
 80106d6:	bf38      	it	cc
 80106d8:	250c      	movcc	r5, #12
 80106da:	2d00      	cmp	r5, #0
 80106dc:	4607      	mov	r7, r0
 80106de:	db01      	blt.n	80106e4 <_malloc_r+0x1c>
 80106e0:	42a9      	cmp	r1, r5
 80106e2:	d905      	bls.n	80106f0 <_malloc_r+0x28>
 80106e4:	230c      	movs	r3, #12
 80106e6:	603b      	str	r3, [r7, #0]
 80106e8:	2600      	movs	r6, #0
 80106ea:	4630      	mov	r0, r6
 80106ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80107c4 <_malloc_r+0xfc>
 80106f4:	f000 f868 	bl	80107c8 <__malloc_lock>
 80106f8:	f8d8 3000 	ldr.w	r3, [r8]
 80106fc:	461c      	mov	r4, r3
 80106fe:	bb5c      	cbnz	r4, 8010758 <_malloc_r+0x90>
 8010700:	4629      	mov	r1, r5
 8010702:	4638      	mov	r0, r7
 8010704:	f7ff ffc0 	bl	8010688 <sbrk_aligned>
 8010708:	1c43      	adds	r3, r0, #1
 801070a:	4604      	mov	r4, r0
 801070c:	d155      	bne.n	80107ba <_malloc_r+0xf2>
 801070e:	f8d8 4000 	ldr.w	r4, [r8]
 8010712:	4626      	mov	r6, r4
 8010714:	2e00      	cmp	r6, #0
 8010716:	d145      	bne.n	80107a4 <_malloc_r+0xdc>
 8010718:	2c00      	cmp	r4, #0
 801071a:	d048      	beq.n	80107ae <_malloc_r+0xe6>
 801071c:	6823      	ldr	r3, [r4, #0]
 801071e:	4631      	mov	r1, r6
 8010720:	4638      	mov	r0, r7
 8010722:	eb04 0903 	add.w	r9, r4, r3
 8010726:	f000 ffbf 	bl	80116a8 <_sbrk_r>
 801072a:	4581      	cmp	r9, r0
 801072c:	d13f      	bne.n	80107ae <_malloc_r+0xe6>
 801072e:	6821      	ldr	r1, [r4, #0]
 8010730:	1a6d      	subs	r5, r5, r1
 8010732:	4629      	mov	r1, r5
 8010734:	4638      	mov	r0, r7
 8010736:	f7ff ffa7 	bl	8010688 <sbrk_aligned>
 801073a:	3001      	adds	r0, #1
 801073c:	d037      	beq.n	80107ae <_malloc_r+0xe6>
 801073e:	6823      	ldr	r3, [r4, #0]
 8010740:	442b      	add	r3, r5
 8010742:	6023      	str	r3, [r4, #0]
 8010744:	f8d8 3000 	ldr.w	r3, [r8]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d038      	beq.n	80107be <_malloc_r+0xf6>
 801074c:	685a      	ldr	r2, [r3, #4]
 801074e:	42a2      	cmp	r2, r4
 8010750:	d12b      	bne.n	80107aa <_malloc_r+0xe2>
 8010752:	2200      	movs	r2, #0
 8010754:	605a      	str	r2, [r3, #4]
 8010756:	e00f      	b.n	8010778 <_malloc_r+0xb0>
 8010758:	6822      	ldr	r2, [r4, #0]
 801075a:	1b52      	subs	r2, r2, r5
 801075c:	d41f      	bmi.n	801079e <_malloc_r+0xd6>
 801075e:	2a0b      	cmp	r2, #11
 8010760:	d917      	bls.n	8010792 <_malloc_r+0xca>
 8010762:	1961      	adds	r1, r4, r5
 8010764:	42a3      	cmp	r3, r4
 8010766:	6025      	str	r5, [r4, #0]
 8010768:	bf18      	it	ne
 801076a:	6059      	strne	r1, [r3, #4]
 801076c:	6863      	ldr	r3, [r4, #4]
 801076e:	bf08      	it	eq
 8010770:	f8c8 1000 	streq.w	r1, [r8]
 8010774:	5162      	str	r2, [r4, r5]
 8010776:	604b      	str	r3, [r1, #4]
 8010778:	4638      	mov	r0, r7
 801077a:	f104 060b 	add.w	r6, r4, #11
 801077e:	f000 f829 	bl	80107d4 <__malloc_unlock>
 8010782:	f026 0607 	bic.w	r6, r6, #7
 8010786:	1d23      	adds	r3, r4, #4
 8010788:	1af2      	subs	r2, r6, r3
 801078a:	d0ae      	beq.n	80106ea <_malloc_r+0x22>
 801078c:	1b9b      	subs	r3, r3, r6
 801078e:	50a3      	str	r3, [r4, r2]
 8010790:	e7ab      	b.n	80106ea <_malloc_r+0x22>
 8010792:	42a3      	cmp	r3, r4
 8010794:	6862      	ldr	r2, [r4, #4]
 8010796:	d1dd      	bne.n	8010754 <_malloc_r+0x8c>
 8010798:	f8c8 2000 	str.w	r2, [r8]
 801079c:	e7ec      	b.n	8010778 <_malloc_r+0xb0>
 801079e:	4623      	mov	r3, r4
 80107a0:	6864      	ldr	r4, [r4, #4]
 80107a2:	e7ac      	b.n	80106fe <_malloc_r+0x36>
 80107a4:	4634      	mov	r4, r6
 80107a6:	6876      	ldr	r6, [r6, #4]
 80107a8:	e7b4      	b.n	8010714 <_malloc_r+0x4c>
 80107aa:	4613      	mov	r3, r2
 80107ac:	e7cc      	b.n	8010748 <_malloc_r+0x80>
 80107ae:	230c      	movs	r3, #12
 80107b0:	603b      	str	r3, [r7, #0]
 80107b2:	4638      	mov	r0, r7
 80107b4:	f000 f80e 	bl	80107d4 <__malloc_unlock>
 80107b8:	e797      	b.n	80106ea <_malloc_r+0x22>
 80107ba:	6025      	str	r5, [r4, #0]
 80107bc:	e7dc      	b.n	8010778 <_malloc_r+0xb0>
 80107be:	605b      	str	r3, [r3, #4]
 80107c0:	deff      	udf	#255	; 0xff
 80107c2:	bf00      	nop
 80107c4:	240054dc 	.word	0x240054dc

080107c8 <__malloc_lock>:
 80107c8:	4801      	ldr	r0, [pc, #4]	; (80107d0 <__malloc_lock+0x8>)
 80107ca:	f7ff b902 	b.w	800f9d2 <__retarget_lock_acquire_recursive>
 80107ce:	bf00      	nop
 80107d0:	240054d8 	.word	0x240054d8

080107d4 <__malloc_unlock>:
 80107d4:	4801      	ldr	r0, [pc, #4]	; (80107dc <__malloc_unlock+0x8>)
 80107d6:	f7ff b8fd 	b.w	800f9d4 <__retarget_lock_release_recursive>
 80107da:	bf00      	nop
 80107dc:	240054d8 	.word	0x240054d8

080107e0 <_Balloc>:
 80107e0:	b570      	push	{r4, r5, r6, lr}
 80107e2:	69c6      	ldr	r6, [r0, #28]
 80107e4:	4604      	mov	r4, r0
 80107e6:	460d      	mov	r5, r1
 80107e8:	b976      	cbnz	r6, 8010808 <_Balloc+0x28>
 80107ea:	2010      	movs	r0, #16
 80107ec:	f7ff ff44 	bl	8010678 <malloc>
 80107f0:	4602      	mov	r2, r0
 80107f2:	61e0      	str	r0, [r4, #28]
 80107f4:	b920      	cbnz	r0, 8010800 <_Balloc+0x20>
 80107f6:	4b18      	ldr	r3, [pc, #96]	; (8010858 <_Balloc+0x78>)
 80107f8:	4818      	ldr	r0, [pc, #96]	; (801085c <_Balloc+0x7c>)
 80107fa:	216b      	movs	r1, #107	; 0x6b
 80107fc:	f000 ff64 	bl	80116c8 <__assert_func>
 8010800:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010804:	6006      	str	r6, [r0, #0]
 8010806:	60c6      	str	r6, [r0, #12]
 8010808:	69e6      	ldr	r6, [r4, #28]
 801080a:	68f3      	ldr	r3, [r6, #12]
 801080c:	b183      	cbz	r3, 8010830 <_Balloc+0x50>
 801080e:	69e3      	ldr	r3, [r4, #28]
 8010810:	68db      	ldr	r3, [r3, #12]
 8010812:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010816:	b9b8      	cbnz	r0, 8010848 <_Balloc+0x68>
 8010818:	2101      	movs	r1, #1
 801081a:	fa01 f605 	lsl.w	r6, r1, r5
 801081e:	1d72      	adds	r2, r6, #5
 8010820:	0092      	lsls	r2, r2, #2
 8010822:	4620      	mov	r0, r4
 8010824:	f000 ff6e 	bl	8011704 <_calloc_r>
 8010828:	b160      	cbz	r0, 8010844 <_Balloc+0x64>
 801082a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801082e:	e00e      	b.n	801084e <_Balloc+0x6e>
 8010830:	2221      	movs	r2, #33	; 0x21
 8010832:	2104      	movs	r1, #4
 8010834:	4620      	mov	r0, r4
 8010836:	f000 ff65 	bl	8011704 <_calloc_r>
 801083a:	69e3      	ldr	r3, [r4, #28]
 801083c:	60f0      	str	r0, [r6, #12]
 801083e:	68db      	ldr	r3, [r3, #12]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d1e4      	bne.n	801080e <_Balloc+0x2e>
 8010844:	2000      	movs	r0, #0
 8010846:	bd70      	pop	{r4, r5, r6, pc}
 8010848:	6802      	ldr	r2, [r0, #0]
 801084a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801084e:	2300      	movs	r3, #0
 8010850:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010854:	e7f7      	b.n	8010846 <_Balloc+0x66>
 8010856:	bf00      	nop
 8010858:	080131f5 	.word	0x080131f5
 801085c:	08013275 	.word	0x08013275

08010860 <_Bfree>:
 8010860:	b570      	push	{r4, r5, r6, lr}
 8010862:	69c6      	ldr	r6, [r0, #28]
 8010864:	4605      	mov	r5, r0
 8010866:	460c      	mov	r4, r1
 8010868:	b976      	cbnz	r6, 8010888 <_Bfree+0x28>
 801086a:	2010      	movs	r0, #16
 801086c:	f7ff ff04 	bl	8010678 <malloc>
 8010870:	4602      	mov	r2, r0
 8010872:	61e8      	str	r0, [r5, #28]
 8010874:	b920      	cbnz	r0, 8010880 <_Bfree+0x20>
 8010876:	4b09      	ldr	r3, [pc, #36]	; (801089c <_Bfree+0x3c>)
 8010878:	4809      	ldr	r0, [pc, #36]	; (80108a0 <_Bfree+0x40>)
 801087a:	218f      	movs	r1, #143	; 0x8f
 801087c:	f000 ff24 	bl	80116c8 <__assert_func>
 8010880:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010884:	6006      	str	r6, [r0, #0]
 8010886:	60c6      	str	r6, [r0, #12]
 8010888:	b13c      	cbz	r4, 801089a <_Bfree+0x3a>
 801088a:	69eb      	ldr	r3, [r5, #28]
 801088c:	6862      	ldr	r2, [r4, #4]
 801088e:	68db      	ldr	r3, [r3, #12]
 8010890:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010894:	6021      	str	r1, [r4, #0]
 8010896:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801089a:	bd70      	pop	{r4, r5, r6, pc}
 801089c:	080131f5 	.word	0x080131f5
 80108a0:	08013275 	.word	0x08013275

080108a4 <__multadd>:
 80108a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108a8:	690d      	ldr	r5, [r1, #16]
 80108aa:	4607      	mov	r7, r0
 80108ac:	460c      	mov	r4, r1
 80108ae:	461e      	mov	r6, r3
 80108b0:	f101 0c14 	add.w	ip, r1, #20
 80108b4:	2000      	movs	r0, #0
 80108b6:	f8dc 3000 	ldr.w	r3, [ip]
 80108ba:	b299      	uxth	r1, r3
 80108bc:	fb02 6101 	mla	r1, r2, r1, r6
 80108c0:	0c1e      	lsrs	r6, r3, #16
 80108c2:	0c0b      	lsrs	r3, r1, #16
 80108c4:	fb02 3306 	mla	r3, r2, r6, r3
 80108c8:	b289      	uxth	r1, r1
 80108ca:	3001      	adds	r0, #1
 80108cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80108d0:	4285      	cmp	r5, r0
 80108d2:	f84c 1b04 	str.w	r1, [ip], #4
 80108d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80108da:	dcec      	bgt.n	80108b6 <__multadd+0x12>
 80108dc:	b30e      	cbz	r6, 8010922 <__multadd+0x7e>
 80108de:	68a3      	ldr	r3, [r4, #8]
 80108e0:	42ab      	cmp	r3, r5
 80108e2:	dc19      	bgt.n	8010918 <__multadd+0x74>
 80108e4:	6861      	ldr	r1, [r4, #4]
 80108e6:	4638      	mov	r0, r7
 80108e8:	3101      	adds	r1, #1
 80108ea:	f7ff ff79 	bl	80107e0 <_Balloc>
 80108ee:	4680      	mov	r8, r0
 80108f0:	b928      	cbnz	r0, 80108fe <__multadd+0x5a>
 80108f2:	4602      	mov	r2, r0
 80108f4:	4b0c      	ldr	r3, [pc, #48]	; (8010928 <__multadd+0x84>)
 80108f6:	480d      	ldr	r0, [pc, #52]	; (801092c <__multadd+0x88>)
 80108f8:	21ba      	movs	r1, #186	; 0xba
 80108fa:	f000 fee5 	bl	80116c8 <__assert_func>
 80108fe:	6922      	ldr	r2, [r4, #16]
 8010900:	3202      	adds	r2, #2
 8010902:	f104 010c 	add.w	r1, r4, #12
 8010906:	0092      	lsls	r2, r2, #2
 8010908:	300c      	adds	r0, #12
 801090a:	f7ff f864 	bl	800f9d6 <memcpy>
 801090e:	4621      	mov	r1, r4
 8010910:	4638      	mov	r0, r7
 8010912:	f7ff ffa5 	bl	8010860 <_Bfree>
 8010916:	4644      	mov	r4, r8
 8010918:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801091c:	3501      	adds	r5, #1
 801091e:	615e      	str	r6, [r3, #20]
 8010920:	6125      	str	r5, [r4, #16]
 8010922:	4620      	mov	r0, r4
 8010924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010928:	08013264 	.word	0x08013264
 801092c:	08013275 	.word	0x08013275

08010930 <__hi0bits>:
 8010930:	0c03      	lsrs	r3, r0, #16
 8010932:	041b      	lsls	r3, r3, #16
 8010934:	b9d3      	cbnz	r3, 801096c <__hi0bits+0x3c>
 8010936:	0400      	lsls	r0, r0, #16
 8010938:	2310      	movs	r3, #16
 801093a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801093e:	bf04      	itt	eq
 8010940:	0200      	lsleq	r0, r0, #8
 8010942:	3308      	addeq	r3, #8
 8010944:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010948:	bf04      	itt	eq
 801094a:	0100      	lsleq	r0, r0, #4
 801094c:	3304      	addeq	r3, #4
 801094e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010952:	bf04      	itt	eq
 8010954:	0080      	lsleq	r0, r0, #2
 8010956:	3302      	addeq	r3, #2
 8010958:	2800      	cmp	r0, #0
 801095a:	db05      	blt.n	8010968 <__hi0bits+0x38>
 801095c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010960:	f103 0301 	add.w	r3, r3, #1
 8010964:	bf08      	it	eq
 8010966:	2320      	moveq	r3, #32
 8010968:	4618      	mov	r0, r3
 801096a:	4770      	bx	lr
 801096c:	2300      	movs	r3, #0
 801096e:	e7e4      	b.n	801093a <__hi0bits+0xa>

08010970 <__lo0bits>:
 8010970:	6803      	ldr	r3, [r0, #0]
 8010972:	f013 0207 	ands.w	r2, r3, #7
 8010976:	d00c      	beq.n	8010992 <__lo0bits+0x22>
 8010978:	07d9      	lsls	r1, r3, #31
 801097a:	d422      	bmi.n	80109c2 <__lo0bits+0x52>
 801097c:	079a      	lsls	r2, r3, #30
 801097e:	bf49      	itett	mi
 8010980:	085b      	lsrmi	r3, r3, #1
 8010982:	089b      	lsrpl	r3, r3, #2
 8010984:	6003      	strmi	r3, [r0, #0]
 8010986:	2201      	movmi	r2, #1
 8010988:	bf5c      	itt	pl
 801098a:	6003      	strpl	r3, [r0, #0]
 801098c:	2202      	movpl	r2, #2
 801098e:	4610      	mov	r0, r2
 8010990:	4770      	bx	lr
 8010992:	b299      	uxth	r1, r3
 8010994:	b909      	cbnz	r1, 801099a <__lo0bits+0x2a>
 8010996:	0c1b      	lsrs	r3, r3, #16
 8010998:	2210      	movs	r2, #16
 801099a:	b2d9      	uxtb	r1, r3
 801099c:	b909      	cbnz	r1, 80109a2 <__lo0bits+0x32>
 801099e:	3208      	adds	r2, #8
 80109a0:	0a1b      	lsrs	r3, r3, #8
 80109a2:	0719      	lsls	r1, r3, #28
 80109a4:	bf04      	itt	eq
 80109a6:	091b      	lsreq	r3, r3, #4
 80109a8:	3204      	addeq	r2, #4
 80109aa:	0799      	lsls	r1, r3, #30
 80109ac:	bf04      	itt	eq
 80109ae:	089b      	lsreq	r3, r3, #2
 80109b0:	3202      	addeq	r2, #2
 80109b2:	07d9      	lsls	r1, r3, #31
 80109b4:	d403      	bmi.n	80109be <__lo0bits+0x4e>
 80109b6:	085b      	lsrs	r3, r3, #1
 80109b8:	f102 0201 	add.w	r2, r2, #1
 80109bc:	d003      	beq.n	80109c6 <__lo0bits+0x56>
 80109be:	6003      	str	r3, [r0, #0]
 80109c0:	e7e5      	b.n	801098e <__lo0bits+0x1e>
 80109c2:	2200      	movs	r2, #0
 80109c4:	e7e3      	b.n	801098e <__lo0bits+0x1e>
 80109c6:	2220      	movs	r2, #32
 80109c8:	e7e1      	b.n	801098e <__lo0bits+0x1e>
	...

080109cc <__i2b>:
 80109cc:	b510      	push	{r4, lr}
 80109ce:	460c      	mov	r4, r1
 80109d0:	2101      	movs	r1, #1
 80109d2:	f7ff ff05 	bl	80107e0 <_Balloc>
 80109d6:	4602      	mov	r2, r0
 80109d8:	b928      	cbnz	r0, 80109e6 <__i2b+0x1a>
 80109da:	4b05      	ldr	r3, [pc, #20]	; (80109f0 <__i2b+0x24>)
 80109dc:	4805      	ldr	r0, [pc, #20]	; (80109f4 <__i2b+0x28>)
 80109de:	f240 1145 	movw	r1, #325	; 0x145
 80109e2:	f000 fe71 	bl	80116c8 <__assert_func>
 80109e6:	2301      	movs	r3, #1
 80109e8:	6144      	str	r4, [r0, #20]
 80109ea:	6103      	str	r3, [r0, #16]
 80109ec:	bd10      	pop	{r4, pc}
 80109ee:	bf00      	nop
 80109f0:	08013264 	.word	0x08013264
 80109f4:	08013275 	.word	0x08013275

080109f8 <__multiply>:
 80109f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109fc:	4691      	mov	r9, r2
 80109fe:	690a      	ldr	r2, [r1, #16]
 8010a00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	bfb8      	it	lt
 8010a08:	460b      	movlt	r3, r1
 8010a0a:	460c      	mov	r4, r1
 8010a0c:	bfbc      	itt	lt
 8010a0e:	464c      	movlt	r4, r9
 8010a10:	4699      	movlt	r9, r3
 8010a12:	6927      	ldr	r7, [r4, #16]
 8010a14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010a18:	68a3      	ldr	r3, [r4, #8]
 8010a1a:	6861      	ldr	r1, [r4, #4]
 8010a1c:	eb07 060a 	add.w	r6, r7, sl
 8010a20:	42b3      	cmp	r3, r6
 8010a22:	b085      	sub	sp, #20
 8010a24:	bfb8      	it	lt
 8010a26:	3101      	addlt	r1, #1
 8010a28:	f7ff feda 	bl	80107e0 <_Balloc>
 8010a2c:	b930      	cbnz	r0, 8010a3c <__multiply+0x44>
 8010a2e:	4602      	mov	r2, r0
 8010a30:	4b44      	ldr	r3, [pc, #272]	; (8010b44 <__multiply+0x14c>)
 8010a32:	4845      	ldr	r0, [pc, #276]	; (8010b48 <__multiply+0x150>)
 8010a34:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010a38:	f000 fe46 	bl	80116c8 <__assert_func>
 8010a3c:	f100 0514 	add.w	r5, r0, #20
 8010a40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010a44:	462b      	mov	r3, r5
 8010a46:	2200      	movs	r2, #0
 8010a48:	4543      	cmp	r3, r8
 8010a4a:	d321      	bcc.n	8010a90 <__multiply+0x98>
 8010a4c:	f104 0314 	add.w	r3, r4, #20
 8010a50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010a54:	f109 0314 	add.w	r3, r9, #20
 8010a58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010a5c:	9202      	str	r2, [sp, #8]
 8010a5e:	1b3a      	subs	r2, r7, r4
 8010a60:	3a15      	subs	r2, #21
 8010a62:	f022 0203 	bic.w	r2, r2, #3
 8010a66:	3204      	adds	r2, #4
 8010a68:	f104 0115 	add.w	r1, r4, #21
 8010a6c:	428f      	cmp	r7, r1
 8010a6e:	bf38      	it	cc
 8010a70:	2204      	movcc	r2, #4
 8010a72:	9201      	str	r2, [sp, #4]
 8010a74:	9a02      	ldr	r2, [sp, #8]
 8010a76:	9303      	str	r3, [sp, #12]
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	d80c      	bhi.n	8010a96 <__multiply+0x9e>
 8010a7c:	2e00      	cmp	r6, #0
 8010a7e:	dd03      	ble.n	8010a88 <__multiply+0x90>
 8010a80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d05b      	beq.n	8010b40 <__multiply+0x148>
 8010a88:	6106      	str	r6, [r0, #16]
 8010a8a:	b005      	add	sp, #20
 8010a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a90:	f843 2b04 	str.w	r2, [r3], #4
 8010a94:	e7d8      	b.n	8010a48 <__multiply+0x50>
 8010a96:	f8b3 a000 	ldrh.w	sl, [r3]
 8010a9a:	f1ba 0f00 	cmp.w	sl, #0
 8010a9e:	d024      	beq.n	8010aea <__multiply+0xf2>
 8010aa0:	f104 0e14 	add.w	lr, r4, #20
 8010aa4:	46a9      	mov	r9, r5
 8010aa6:	f04f 0c00 	mov.w	ip, #0
 8010aaa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010aae:	f8d9 1000 	ldr.w	r1, [r9]
 8010ab2:	fa1f fb82 	uxth.w	fp, r2
 8010ab6:	b289      	uxth	r1, r1
 8010ab8:	fb0a 110b 	mla	r1, sl, fp, r1
 8010abc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010ac0:	f8d9 2000 	ldr.w	r2, [r9]
 8010ac4:	4461      	add	r1, ip
 8010ac6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010aca:	fb0a c20b 	mla	r2, sl, fp, ip
 8010ace:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010ad2:	b289      	uxth	r1, r1
 8010ad4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010ad8:	4577      	cmp	r7, lr
 8010ada:	f849 1b04 	str.w	r1, [r9], #4
 8010ade:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010ae2:	d8e2      	bhi.n	8010aaa <__multiply+0xb2>
 8010ae4:	9a01      	ldr	r2, [sp, #4]
 8010ae6:	f845 c002 	str.w	ip, [r5, r2]
 8010aea:	9a03      	ldr	r2, [sp, #12]
 8010aec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010af0:	3304      	adds	r3, #4
 8010af2:	f1b9 0f00 	cmp.w	r9, #0
 8010af6:	d021      	beq.n	8010b3c <__multiply+0x144>
 8010af8:	6829      	ldr	r1, [r5, #0]
 8010afa:	f104 0c14 	add.w	ip, r4, #20
 8010afe:	46ae      	mov	lr, r5
 8010b00:	f04f 0a00 	mov.w	sl, #0
 8010b04:	f8bc b000 	ldrh.w	fp, [ip]
 8010b08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010b0c:	fb09 220b 	mla	r2, r9, fp, r2
 8010b10:	4452      	add	r2, sl
 8010b12:	b289      	uxth	r1, r1
 8010b14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010b18:	f84e 1b04 	str.w	r1, [lr], #4
 8010b1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010b20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010b24:	f8be 1000 	ldrh.w	r1, [lr]
 8010b28:	fb09 110a 	mla	r1, r9, sl, r1
 8010b2c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010b30:	4567      	cmp	r7, ip
 8010b32:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010b36:	d8e5      	bhi.n	8010b04 <__multiply+0x10c>
 8010b38:	9a01      	ldr	r2, [sp, #4]
 8010b3a:	50a9      	str	r1, [r5, r2]
 8010b3c:	3504      	adds	r5, #4
 8010b3e:	e799      	b.n	8010a74 <__multiply+0x7c>
 8010b40:	3e01      	subs	r6, #1
 8010b42:	e79b      	b.n	8010a7c <__multiply+0x84>
 8010b44:	08013264 	.word	0x08013264
 8010b48:	08013275 	.word	0x08013275

08010b4c <__pow5mult>:
 8010b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b50:	4615      	mov	r5, r2
 8010b52:	f012 0203 	ands.w	r2, r2, #3
 8010b56:	4606      	mov	r6, r0
 8010b58:	460f      	mov	r7, r1
 8010b5a:	d007      	beq.n	8010b6c <__pow5mult+0x20>
 8010b5c:	4c25      	ldr	r4, [pc, #148]	; (8010bf4 <__pow5mult+0xa8>)
 8010b5e:	3a01      	subs	r2, #1
 8010b60:	2300      	movs	r3, #0
 8010b62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010b66:	f7ff fe9d 	bl	80108a4 <__multadd>
 8010b6a:	4607      	mov	r7, r0
 8010b6c:	10ad      	asrs	r5, r5, #2
 8010b6e:	d03d      	beq.n	8010bec <__pow5mult+0xa0>
 8010b70:	69f4      	ldr	r4, [r6, #28]
 8010b72:	b97c      	cbnz	r4, 8010b94 <__pow5mult+0x48>
 8010b74:	2010      	movs	r0, #16
 8010b76:	f7ff fd7f 	bl	8010678 <malloc>
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	61f0      	str	r0, [r6, #28]
 8010b7e:	b928      	cbnz	r0, 8010b8c <__pow5mult+0x40>
 8010b80:	4b1d      	ldr	r3, [pc, #116]	; (8010bf8 <__pow5mult+0xac>)
 8010b82:	481e      	ldr	r0, [pc, #120]	; (8010bfc <__pow5mult+0xb0>)
 8010b84:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010b88:	f000 fd9e 	bl	80116c8 <__assert_func>
 8010b8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010b90:	6004      	str	r4, [r0, #0]
 8010b92:	60c4      	str	r4, [r0, #12]
 8010b94:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010b98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010b9c:	b94c      	cbnz	r4, 8010bb2 <__pow5mult+0x66>
 8010b9e:	f240 2171 	movw	r1, #625	; 0x271
 8010ba2:	4630      	mov	r0, r6
 8010ba4:	f7ff ff12 	bl	80109cc <__i2b>
 8010ba8:	2300      	movs	r3, #0
 8010baa:	f8c8 0008 	str.w	r0, [r8, #8]
 8010bae:	4604      	mov	r4, r0
 8010bb0:	6003      	str	r3, [r0, #0]
 8010bb2:	f04f 0900 	mov.w	r9, #0
 8010bb6:	07eb      	lsls	r3, r5, #31
 8010bb8:	d50a      	bpl.n	8010bd0 <__pow5mult+0x84>
 8010bba:	4639      	mov	r1, r7
 8010bbc:	4622      	mov	r2, r4
 8010bbe:	4630      	mov	r0, r6
 8010bc0:	f7ff ff1a 	bl	80109f8 <__multiply>
 8010bc4:	4639      	mov	r1, r7
 8010bc6:	4680      	mov	r8, r0
 8010bc8:	4630      	mov	r0, r6
 8010bca:	f7ff fe49 	bl	8010860 <_Bfree>
 8010bce:	4647      	mov	r7, r8
 8010bd0:	106d      	asrs	r5, r5, #1
 8010bd2:	d00b      	beq.n	8010bec <__pow5mult+0xa0>
 8010bd4:	6820      	ldr	r0, [r4, #0]
 8010bd6:	b938      	cbnz	r0, 8010be8 <__pow5mult+0x9c>
 8010bd8:	4622      	mov	r2, r4
 8010bda:	4621      	mov	r1, r4
 8010bdc:	4630      	mov	r0, r6
 8010bde:	f7ff ff0b 	bl	80109f8 <__multiply>
 8010be2:	6020      	str	r0, [r4, #0]
 8010be4:	f8c0 9000 	str.w	r9, [r0]
 8010be8:	4604      	mov	r4, r0
 8010bea:	e7e4      	b.n	8010bb6 <__pow5mult+0x6a>
 8010bec:	4638      	mov	r0, r7
 8010bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bf2:	bf00      	nop
 8010bf4:	080133c0 	.word	0x080133c0
 8010bf8:	080131f5 	.word	0x080131f5
 8010bfc:	08013275 	.word	0x08013275

08010c00 <__lshift>:
 8010c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c04:	460c      	mov	r4, r1
 8010c06:	6849      	ldr	r1, [r1, #4]
 8010c08:	6923      	ldr	r3, [r4, #16]
 8010c0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010c0e:	68a3      	ldr	r3, [r4, #8]
 8010c10:	4607      	mov	r7, r0
 8010c12:	4691      	mov	r9, r2
 8010c14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010c18:	f108 0601 	add.w	r6, r8, #1
 8010c1c:	42b3      	cmp	r3, r6
 8010c1e:	db0b      	blt.n	8010c38 <__lshift+0x38>
 8010c20:	4638      	mov	r0, r7
 8010c22:	f7ff fddd 	bl	80107e0 <_Balloc>
 8010c26:	4605      	mov	r5, r0
 8010c28:	b948      	cbnz	r0, 8010c3e <__lshift+0x3e>
 8010c2a:	4602      	mov	r2, r0
 8010c2c:	4b28      	ldr	r3, [pc, #160]	; (8010cd0 <__lshift+0xd0>)
 8010c2e:	4829      	ldr	r0, [pc, #164]	; (8010cd4 <__lshift+0xd4>)
 8010c30:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010c34:	f000 fd48 	bl	80116c8 <__assert_func>
 8010c38:	3101      	adds	r1, #1
 8010c3a:	005b      	lsls	r3, r3, #1
 8010c3c:	e7ee      	b.n	8010c1c <__lshift+0x1c>
 8010c3e:	2300      	movs	r3, #0
 8010c40:	f100 0114 	add.w	r1, r0, #20
 8010c44:	f100 0210 	add.w	r2, r0, #16
 8010c48:	4618      	mov	r0, r3
 8010c4a:	4553      	cmp	r3, sl
 8010c4c:	db33      	blt.n	8010cb6 <__lshift+0xb6>
 8010c4e:	6920      	ldr	r0, [r4, #16]
 8010c50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010c54:	f104 0314 	add.w	r3, r4, #20
 8010c58:	f019 091f 	ands.w	r9, r9, #31
 8010c5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010c60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010c64:	d02b      	beq.n	8010cbe <__lshift+0xbe>
 8010c66:	f1c9 0e20 	rsb	lr, r9, #32
 8010c6a:	468a      	mov	sl, r1
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	6818      	ldr	r0, [r3, #0]
 8010c70:	fa00 f009 	lsl.w	r0, r0, r9
 8010c74:	4310      	orrs	r0, r2
 8010c76:	f84a 0b04 	str.w	r0, [sl], #4
 8010c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c7e:	459c      	cmp	ip, r3
 8010c80:	fa22 f20e 	lsr.w	r2, r2, lr
 8010c84:	d8f3      	bhi.n	8010c6e <__lshift+0x6e>
 8010c86:	ebac 0304 	sub.w	r3, ip, r4
 8010c8a:	3b15      	subs	r3, #21
 8010c8c:	f023 0303 	bic.w	r3, r3, #3
 8010c90:	3304      	adds	r3, #4
 8010c92:	f104 0015 	add.w	r0, r4, #21
 8010c96:	4584      	cmp	ip, r0
 8010c98:	bf38      	it	cc
 8010c9a:	2304      	movcc	r3, #4
 8010c9c:	50ca      	str	r2, [r1, r3]
 8010c9e:	b10a      	cbz	r2, 8010ca4 <__lshift+0xa4>
 8010ca0:	f108 0602 	add.w	r6, r8, #2
 8010ca4:	3e01      	subs	r6, #1
 8010ca6:	4638      	mov	r0, r7
 8010ca8:	612e      	str	r6, [r5, #16]
 8010caa:	4621      	mov	r1, r4
 8010cac:	f7ff fdd8 	bl	8010860 <_Bfree>
 8010cb0:	4628      	mov	r0, r5
 8010cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8010cba:	3301      	adds	r3, #1
 8010cbc:	e7c5      	b.n	8010c4a <__lshift+0x4a>
 8010cbe:	3904      	subs	r1, #4
 8010cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8010cc8:	459c      	cmp	ip, r3
 8010cca:	d8f9      	bhi.n	8010cc0 <__lshift+0xc0>
 8010ccc:	e7ea      	b.n	8010ca4 <__lshift+0xa4>
 8010cce:	bf00      	nop
 8010cd0:	08013264 	.word	0x08013264
 8010cd4:	08013275 	.word	0x08013275

08010cd8 <__mcmp>:
 8010cd8:	b530      	push	{r4, r5, lr}
 8010cda:	6902      	ldr	r2, [r0, #16]
 8010cdc:	690c      	ldr	r4, [r1, #16]
 8010cde:	1b12      	subs	r2, r2, r4
 8010ce0:	d10e      	bne.n	8010d00 <__mcmp+0x28>
 8010ce2:	f100 0314 	add.w	r3, r0, #20
 8010ce6:	3114      	adds	r1, #20
 8010ce8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010cec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010cf0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010cf4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010cf8:	42a5      	cmp	r5, r4
 8010cfa:	d003      	beq.n	8010d04 <__mcmp+0x2c>
 8010cfc:	d305      	bcc.n	8010d0a <__mcmp+0x32>
 8010cfe:	2201      	movs	r2, #1
 8010d00:	4610      	mov	r0, r2
 8010d02:	bd30      	pop	{r4, r5, pc}
 8010d04:	4283      	cmp	r3, r0
 8010d06:	d3f3      	bcc.n	8010cf0 <__mcmp+0x18>
 8010d08:	e7fa      	b.n	8010d00 <__mcmp+0x28>
 8010d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8010d0e:	e7f7      	b.n	8010d00 <__mcmp+0x28>

08010d10 <__mdiff>:
 8010d10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d14:	460c      	mov	r4, r1
 8010d16:	4606      	mov	r6, r0
 8010d18:	4611      	mov	r1, r2
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	4690      	mov	r8, r2
 8010d1e:	f7ff ffdb 	bl	8010cd8 <__mcmp>
 8010d22:	1e05      	subs	r5, r0, #0
 8010d24:	d110      	bne.n	8010d48 <__mdiff+0x38>
 8010d26:	4629      	mov	r1, r5
 8010d28:	4630      	mov	r0, r6
 8010d2a:	f7ff fd59 	bl	80107e0 <_Balloc>
 8010d2e:	b930      	cbnz	r0, 8010d3e <__mdiff+0x2e>
 8010d30:	4b3a      	ldr	r3, [pc, #232]	; (8010e1c <__mdiff+0x10c>)
 8010d32:	4602      	mov	r2, r0
 8010d34:	f240 2137 	movw	r1, #567	; 0x237
 8010d38:	4839      	ldr	r0, [pc, #228]	; (8010e20 <__mdiff+0x110>)
 8010d3a:	f000 fcc5 	bl	80116c8 <__assert_func>
 8010d3e:	2301      	movs	r3, #1
 8010d40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010d44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d48:	bfa4      	itt	ge
 8010d4a:	4643      	movge	r3, r8
 8010d4c:	46a0      	movge	r8, r4
 8010d4e:	4630      	mov	r0, r6
 8010d50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010d54:	bfa6      	itte	ge
 8010d56:	461c      	movge	r4, r3
 8010d58:	2500      	movge	r5, #0
 8010d5a:	2501      	movlt	r5, #1
 8010d5c:	f7ff fd40 	bl	80107e0 <_Balloc>
 8010d60:	b920      	cbnz	r0, 8010d6c <__mdiff+0x5c>
 8010d62:	4b2e      	ldr	r3, [pc, #184]	; (8010e1c <__mdiff+0x10c>)
 8010d64:	4602      	mov	r2, r0
 8010d66:	f240 2145 	movw	r1, #581	; 0x245
 8010d6a:	e7e5      	b.n	8010d38 <__mdiff+0x28>
 8010d6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010d70:	6926      	ldr	r6, [r4, #16]
 8010d72:	60c5      	str	r5, [r0, #12]
 8010d74:	f104 0914 	add.w	r9, r4, #20
 8010d78:	f108 0514 	add.w	r5, r8, #20
 8010d7c:	f100 0e14 	add.w	lr, r0, #20
 8010d80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010d84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010d88:	f108 0210 	add.w	r2, r8, #16
 8010d8c:	46f2      	mov	sl, lr
 8010d8e:	2100      	movs	r1, #0
 8010d90:	f859 3b04 	ldr.w	r3, [r9], #4
 8010d94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010d98:	fa11 f88b 	uxtah	r8, r1, fp
 8010d9c:	b299      	uxth	r1, r3
 8010d9e:	0c1b      	lsrs	r3, r3, #16
 8010da0:	eba8 0801 	sub.w	r8, r8, r1
 8010da4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010da8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010dac:	fa1f f888 	uxth.w	r8, r8
 8010db0:	1419      	asrs	r1, r3, #16
 8010db2:	454e      	cmp	r6, r9
 8010db4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010db8:	f84a 3b04 	str.w	r3, [sl], #4
 8010dbc:	d8e8      	bhi.n	8010d90 <__mdiff+0x80>
 8010dbe:	1b33      	subs	r3, r6, r4
 8010dc0:	3b15      	subs	r3, #21
 8010dc2:	f023 0303 	bic.w	r3, r3, #3
 8010dc6:	3304      	adds	r3, #4
 8010dc8:	3415      	adds	r4, #21
 8010dca:	42a6      	cmp	r6, r4
 8010dcc:	bf38      	it	cc
 8010dce:	2304      	movcc	r3, #4
 8010dd0:	441d      	add	r5, r3
 8010dd2:	4473      	add	r3, lr
 8010dd4:	469e      	mov	lr, r3
 8010dd6:	462e      	mov	r6, r5
 8010dd8:	4566      	cmp	r6, ip
 8010dda:	d30e      	bcc.n	8010dfa <__mdiff+0xea>
 8010ddc:	f10c 0203 	add.w	r2, ip, #3
 8010de0:	1b52      	subs	r2, r2, r5
 8010de2:	f022 0203 	bic.w	r2, r2, #3
 8010de6:	3d03      	subs	r5, #3
 8010de8:	45ac      	cmp	ip, r5
 8010dea:	bf38      	it	cc
 8010dec:	2200      	movcc	r2, #0
 8010dee:	4413      	add	r3, r2
 8010df0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010df4:	b17a      	cbz	r2, 8010e16 <__mdiff+0x106>
 8010df6:	6107      	str	r7, [r0, #16]
 8010df8:	e7a4      	b.n	8010d44 <__mdiff+0x34>
 8010dfa:	f856 8b04 	ldr.w	r8, [r6], #4
 8010dfe:	fa11 f288 	uxtah	r2, r1, r8
 8010e02:	1414      	asrs	r4, r2, #16
 8010e04:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010e08:	b292      	uxth	r2, r2
 8010e0a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010e0e:	f84e 2b04 	str.w	r2, [lr], #4
 8010e12:	1421      	asrs	r1, r4, #16
 8010e14:	e7e0      	b.n	8010dd8 <__mdiff+0xc8>
 8010e16:	3f01      	subs	r7, #1
 8010e18:	e7ea      	b.n	8010df0 <__mdiff+0xe0>
 8010e1a:	bf00      	nop
 8010e1c:	08013264 	.word	0x08013264
 8010e20:	08013275 	.word	0x08013275

08010e24 <__d2b>:
 8010e24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010e28:	460f      	mov	r7, r1
 8010e2a:	2101      	movs	r1, #1
 8010e2c:	ec59 8b10 	vmov	r8, r9, d0
 8010e30:	4616      	mov	r6, r2
 8010e32:	f7ff fcd5 	bl	80107e0 <_Balloc>
 8010e36:	4604      	mov	r4, r0
 8010e38:	b930      	cbnz	r0, 8010e48 <__d2b+0x24>
 8010e3a:	4602      	mov	r2, r0
 8010e3c:	4b24      	ldr	r3, [pc, #144]	; (8010ed0 <__d2b+0xac>)
 8010e3e:	4825      	ldr	r0, [pc, #148]	; (8010ed4 <__d2b+0xb0>)
 8010e40:	f240 310f 	movw	r1, #783	; 0x30f
 8010e44:	f000 fc40 	bl	80116c8 <__assert_func>
 8010e48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010e4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010e50:	bb2d      	cbnz	r5, 8010e9e <__d2b+0x7a>
 8010e52:	9301      	str	r3, [sp, #4]
 8010e54:	f1b8 0300 	subs.w	r3, r8, #0
 8010e58:	d026      	beq.n	8010ea8 <__d2b+0x84>
 8010e5a:	4668      	mov	r0, sp
 8010e5c:	9300      	str	r3, [sp, #0]
 8010e5e:	f7ff fd87 	bl	8010970 <__lo0bits>
 8010e62:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010e66:	b1e8      	cbz	r0, 8010ea4 <__d2b+0x80>
 8010e68:	f1c0 0320 	rsb	r3, r0, #32
 8010e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8010e70:	430b      	orrs	r3, r1
 8010e72:	40c2      	lsrs	r2, r0
 8010e74:	6163      	str	r3, [r4, #20]
 8010e76:	9201      	str	r2, [sp, #4]
 8010e78:	9b01      	ldr	r3, [sp, #4]
 8010e7a:	61a3      	str	r3, [r4, #24]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	bf14      	ite	ne
 8010e80:	2202      	movne	r2, #2
 8010e82:	2201      	moveq	r2, #1
 8010e84:	6122      	str	r2, [r4, #16]
 8010e86:	b1bd      	cbz	r5, 8010eb8 <__d2b+0x94>
 8010e88:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010e8c:	4405      	add	r5, r0
 8010e8e:	603d      	str	r5, [r7, #0]
 8010e90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010e94:	6030      	str	r0, [r6, #0]
 8010e96:	4620      	mov	r0, r4
 8010e98:	b003      	add	sp, #12
 8010e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010ea2:	e7d6      	b.n	8010e52 <__d2b+0x2e>
 8010ea4:	6161      	str	r1, [r4, #20]
 8010ea6:	e7e7      	b.n	8010e78 <__d2b+0x54>
 8010ea8:	a801      	add	r0, sp, #4
 8010eaa:	f7ff fd61 	bl	8010970 <__lo0bits>
 8010eae:	9b01      	ldr	r3, [sp, #4]
 8010eb0:	6163      	str	r3, [r4, #20]
 8010eb2:	3020      	adds	r0, #32
 8010eb4:	2201      	movs	r2, #1
 8010eb6:	e7e5      	b.n	8010e84 <__d2b+0x60>
 8010eb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010ebc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010ec0:	6038      	str	r0, [r7, #0]
 8010ec2:	6918      	ldr	r0, [r3, #16]
 8010ec4:	f7ff fd34 	bl	8010930 <__hi0bits>
 8010ec8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010ecc:	e7e2      	b.n	8010e94 <__d2b+0x70>
 8010ece:	bf00      	nop
 8010ed0:	08013264 	.word	0x08013264
 8010ed4:	08013275 	.word	0x08013275

08010ed8 <__ssputs_r>:
 8010ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010edc:	688e      	ldr	r6, [r1, #8]
 8010ede:	461f      	mov	r7, r3
 8010ee0:	42be      	cmp	r6, r7
 8010ee2:	680b      	ldr	r3, [r1, #0]
 8010ee4:	4682      	mov	sl, r0
 8010ee6:	460c      	mov	r4, r1
 8010ee8:	4690      	mov	r8, r2
 8010eea:	d82c      	bhi.n	8010f46 <__ssputs_r+0x6e>
 8010eec:	898a      	ldrh	r2, [r1, #12]
 8010eee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ef2:	d026      	beq.n	8010f42 <__ssputs_r+0x6a>
 8010ef4:	6965      	ldr	r5, [r4, #20]
 8010ef6:	6909      	ldr	r1, [r1, #16]
 8010ef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010efc:	eba3 0901 	sub.w	r9, r3, r1
 8010f00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010f04:	1c7b      	adds	r3, r7, #1
 8010f06:	444b      	add	r3, r9
 8010f08:	106d      	asrs	r5, r5, #1
 8010f0a:	429d      	cmp	r5, r3
 8010f0c:	bf38      	it	cc
 8010f0e:	461d      	movcc	r5, r3
 8010f10:	0553      	lsls	r3, r2, #21
 8010f12:	d527      	bpl.n	8010f64 <__ssputs_r+0x8c>
 8010f14:	4629      	mov	r1, r5
 8010f16:	f7ff fbd7 	bl	80106c8 <_malloc_r>
 8010f1a:	4606      	mov	r6, r0
 8010f1c:	b360      	cbz	r0, 8010f78 <__ssputs_r+0xa0>
 8010f1e:	6921      	ldr	r1, [r4, #16]
 8010f20:	464a      	mov	r2, r9
 8010f22:	f7fe fd58 	bl	800f9d6 <memcpy>
 8010f26:	89a3      	ldrh	r3, [r4, #12]
 8010f28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f30:	81a3      	strh	r3, [r4, #12]
 8010f32:	6126      	str	r6, [r4, #16]
 8010f34:	6165      	str	r5, [r4, #20]
 8010f36:	444e      	add	r6, r9
 8010f38:	eba5 0509 	sub.w	r5, r5, r9
 8010f3c:	6026      	str	r6, [r4, #0]
 8010f3e:	60a5      	str	r5, [r4, #8]
 8010f40:	463e      	mov	r6, r7
 8010f42:	42be      	cmp	r6, r7
 8010f44:	d900      	bls.n	8010f48 <__ssputs_r+0x70>
 8010f46:	463e      	mov	r6, r7
 8010f48:	6820      	ldr	r0, [r4, #0]
 8010f4a:	4632      	mov	r2, r6
 8010f4c:	4641      	mov	r1, r8
 8010f4e:	f000 fb6f 	bl	8011630 <memmove>
 8010f52:	68a3      	ldr	r3, [r4, #8]
 8010f54:	1b9b      	subs	r3, r3, r6
 8010f56:	60a3      	str	r3, [r4, #8]
 8010f58:	6823      	ldr	r3, [r4, #0]
 8010f5a:	4433      	add	r3, r6
 8010f5c:	6023      	str	r3, [r4, #0]
 8010f5e:	2000      	movs	r0, #0
 8010f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f64:	462a      	mov	r2, r5
 8010f66:	f000 fbf5 	bl	8011754 <_realloc_r>
 8010f6a:	4606      	mov	r6, r0
 8010f6c:	2800      	cmp	r0, #0
 8010f6e:	d1e0      	bne.n	8010f32 <__ssputs_r+0x5a>
 8010f70:	6921      	ldr	r1, [r4, #16]
 8010f72:	4650      	mov	r0, sl
 8010f74:	f7ff fb34 	bl	80105e0 <_free_r>
 8010f78:	230c      	movs	r3, #12
 8010f7a:	f8ca 3000 	str.w	r3, [sl]
 8010f7e:	89a3      	ldrh	r3, [r4, #12]
 8010f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f84:	81a3      	strh	r3, [r4, #12]
 8010f86:	f04f 30ff 	mov.w	r0, #4294967295
 8010f8a:	e7e9      	b.n	8010f60 <__ssputs_r+0x88>

08010f8c <_svfiprintf_r>:
 8010f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f90:	4698      	mov	r8, r3
 8010f92:	898b      	ldrh	r3, [r1, #12]
 8010f94:	061b      	lsls	r3, r3, #24
 8010f96:	b09d      	sub	sp, #116	; 0x74
 8010f98:	4607      	mov	r7, r0
 8010f9a:	460d      	mov	r5, r1
 8010f9c:	4614      	mov	r4, r2
 8010f9e:	d50e      	bpl.n	8010fbe <_svfiprintf_r+0x32>
 8010fa0:	690b      	ldr	r3, [r1, #16]
 8010fa2:	b963      	cbnz	r3, 8010fbe <_svfiprintf_r+0x32>
 8010fa4:	2140      	movs	r1, #64	; 0x40
 8010fa6:	f7ff fb8f 	bl	80106c8 <_malloc_r>
 8010faa:	6028      	str	r0, [r5, #0]
 8010fac:	6128      	str	r0, [r5, #16]
 8010fae:	b920      	cbnz	r0, 8010fba <_svfiprintf_r+0x2e>
 8010fb0:	230c      	movs	r3, #12
 8010fb2:	603b      	str	r3, [r7, #0]
 8010fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fb8:	e0d0      	b.n	801115c <_svfiprintf_r+0x1d0>
 8010fba:	2340      	movs	r3, #64	; 0x40
 8010fbc:	616b      	str	r3, [r5, #20]
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8010fc2:	2320      	movs	r3, #32
 8010fc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010fc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8010fcc:	2330      	movs	r3, #48	; 0x30
 8010fce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011174 <_svfiprintf_r+0x1e8>
 8010fd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010fd6:	f04f 0901 	mov.w	r9, #1
 8010fda:	4623      	mov	r3, r4
 8010fdc:	469a      	mov	sl, r3
 8010fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fe2:	b10a      	cbz	r2, 8010fe8 <_svfiprintf_r+0x5c>
 8010fe4:	2a25      	cmp	r2, #37	; 0x25
 8010fe6:	d1f9      	bne.n	8010fdc <_svfiprintf_r+0x50>
 8010fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8010fec:	d00b      	beq.n	8011006 <_svfiprintf_r+0x7a>
 8010fee:	465b      	mov	r3, fp
 8010ff0:	4622      	mov	r2, r4
 8010ff2:	4629      	mov	r1, r5
 8010ff4:	4638      	mov	r0, r7
 8010ff6:	f7ff ff6f 	bl	8010ed8 <__ssputs_r>
 8010ffa:	3001      	adds	r0, #1
 8010ffc:	f000 80a9 	beq.w	8011152 <_svfiprintf_r+0x1c6>
 8011000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011002:	445a      	add	r2, fp
 8011004:	9209      	str	r2, [sp, #36]	; 0x24
 8011006:	f89a 3000 	ldrb.w	r3, [sl]
 801100a:	2b00      	cmp	r3, #0
 801100c:	f000 80a1 	beq.w	8011152 <_svfiprintf_r+0x1c6>
 8011010:	2300      	movs	r3, #0
 8011012:	f04f 32ff 	mov.w	r2, #4294967295
 8011016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801101a:	f10a 0a01 	add.w	sl, sl, #1
 801101e:	9304      	str	r3, [sp, #16]
 8011020:	9307      	str	r3, [sp, #28]
 8011022:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011026:	931a      	str	r3, [sp, #104]	; 0x68
 8011028:	4654      	mov	r4, sl
 801102a:	2205      	movs	r2, #5
 801102c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011030:	4850      	ldr	r0, [pc, #320]	; (8011174 <_svfiprintf_r+0x1e8>)
 8011032:	f7ef f955 	bl	80002e0 <memchr>
 8011036:	9a04      	ldr	r2, [sp, #16]
 8011038:	b9d8      	cbnz	r0, 8011072 <_svfiprintf_r+0xe6>
 801103a:	06d0      	lsls	r0, r2, #27
 801103c:	bf44      	itt	mi
 801103e:	2320      	movmi	r3, #32
 8011040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011044:	0711      	lsls	r1, r2, #28
 8011046:	bf44      	itt	mi
 8011048:	232b      	movmi	r3, #43	; 0x2b
 801104a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801104e:	f89a 3000 	ldrb.w	r3, [sl]
 8011052:	2b2a      	cmp	r3, #42	; 0x2a
 8011054:	d015      	beq.n	8011082 <_svfiprintf_r+0xf6>
 8011056:	9a07      	ldr	r2, [sp, #28]
 8011058:	4654      	mov	r4, sl
 801105a:	2000      	movs	r0, #0
 801105c:	f04f 0c0a 	mov.w	ip, #10
 8011060:	4621      	mov	r1, r4
 8011062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011066:	3b30      	subs	r3, #48	; 0x30
 8011068:	2b09      	cmp	r3, #9
 801106a:	d94d      	bls.n	8011108 <_svfiprintf_r+0x17c>
 801106c:	b1b0      	cbz	r0, 801109c <_svfiprintf_r+0x110>
 801106e:	9207      	str	r2, [sp, #28]
 8011070:	e014      	b.n	801109c <_svfiprintf_r+0x110>
 8011072:	eba0 0308 	sub.w	r3, r0, r8
 8011076:	fa09 f303 	lsl.w	r3, r9, r3
 801107a:	4313      	orrs	r3, r2
 801107c:	9304      	str	r3, [sp, #16]
 801107e:	46a2      	mov	sl, r4
 8011080:	e7d2      	b.n	8011028 <_svfiprintf_r+0x9c>
 8011082:	9b03      	ldr	r3, [sp, #12]
 8011084:	1d19      	adds	r1, r3, #4
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	9103      	str	r1, [sp, #12]
 801108a:	2b00      	cmp	r3, #0
 801108c:	bfbb      	ittet	lt
 801108e:	425b      	neglt	r3, r3
 8011090:	f042 0202 	orrlt.w	r2, r2, #2
 8011094:	9307      	strge	r3, [sp, #28]
 8011096:	9307      	strlt	r3, [sp, #28]
 8011098:	bfb8      	it	lt
 801109a:	9204      	strlt	r2, [sp, #16]
 801109c:	7823      	ldrb	r3, [r4, #0]
 801109e:	2b2e      	cmp	r3, #46	; 0x2e
 80110a0:	d10c      	bne.n	80110bc <_svfiprintf_r+0x130>
 80110a2:	7863      	ldrb	r3, [r4, #1]
 80110a4:	2b2a      	cmp	r3, #42	; 0x2a
 80110a6:	d134      	bne.n	8011112 <_svfiprintf_r+0x186>
 80110a8:	9b03      	ldr	r3, [sp, #12]
 80110aa:	1d1a      	adds	r2, r3, #4
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	9203      	str	r2, [sp, #12]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	bfb8      	it	lt
 80110b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80110b8:	3402      	adds	r4, #2
 80110ba:	9305      	str	r3, [sp, #20]
 80110bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011184 <_svfiprintf_r+0x1f8>
 80110c0:	7821      	ldrb	r1, [r4, #0]
 80110c2:	2203      	movs	r2, #3
 80110c4:	4650      	mov	r0, sl
 80110c6:	f7ef f90b 	bl	80002e0 <memchr>
 80110ca:	b138      	cbz	r0, 80110dc <_svfiprintf_r+0x150>
 80110cc:	9b04      	ldr	r3, [sp, #16]
 80110ce:	eba0 000a 	sub.w	r0, r0, sl
 80110d2:	2240      	movs	r2, #64	; 0x40
 80110d4:	4082      	lsls	r2, r0
 80110d6:	4313      	orrs	r3, r2
 80110d8:	3401      	adds	r4, #1
 80110da:	9304      	str	r3, [sp, #16]
 80110dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110e0:	4825      	ldr	r0, [pc, #148]	; (8011178 <_svfiprintf_r+0x1ec>)
 80110e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80110e6:	2206      	movs	r2, #6
 80110e8:	f7ef f8fa 	bl	80002e0 <memchr>
 80110ec:	2800      	cmp	r0, #0
 80110ee:	d038      	beq.n	8011162 <_svfiprintf_r+0x1d6>
 80110f0:	4b22      	ldr	r3, [pc, #136]	; (801117c <_svfiprintf_r+0x1f0>)
 80110f2:	bb1b      	cbnz	r3, 801113c <_svfiprintf_r+0x1b0>
 80110f4:	9b03      	ldr	r3, [sp, #12]
 80110f6:	3307      	adds	r3, #7
 80110f8:	f023 0307 	bic.w	r3, r3, #7
 80110fc:	3308      	adds	r3, #8
 80110fe:	9303      	str	r3, [sp, #12]
 8011100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011102:	4433      	add	r3, r6
 8011104:	9309      	str	r3, [sp, #36]	; 0x24
 8011106:	e768      	b.n	8010fda <_svfiprintf_r+0x4e>
 8011108:	fb0c 3202 	mla	r2, ip, r2, r3
 801110c:	460c      	mov	r4, r1
 801110e:	2001      	movs	r0, #1
 8011110:	e7a6      	b.n	8011060 <_svfiprintf_r+0xd4>
 8011112:	2300      	movs	r3, #0
 8011114:	3401      	adds	r4, #1
 8011116:	9305      	str	r3, [sp, #20]
 8011118:	4619      	mov	r1, r3
 801111a:	f04f 0c0a 	mov.w	ip, #10
 801111e:	4620      	mov	r0, r4
 8011120:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011124:	3a30      	subs	r2, #48	; 0x30
 8011126:	2a09      	cmp	r2, #9
 8011128:	d903      	bls.n	8011132 <_svfiprintf_r+0x1a6>
 801112a:	2b00      	cmp	r3, #0
 801112c:	d0c6      	beq.n	80110bc <_svfiprintf_r+0x130>
 801112e:	9105      	str	r1, [sp, #20]
 8011130:	e7c4      	b.n	80110bc <_svfiprintf_r+0x130>
 8011132:	fb0c 2101 	mla	r1, ip, r1, r2
 8011136:	4604      	mov	r4, r0
 8011138:	2301      	movs	r3, #1
 801113a:	e7f0      	b.n	801111e <_svfiprintf_r+0x192>
 801113c:	ab03      	add	r3, sp, #12
 801113e:	9300      	str	r3, [sp, #0]
 8011140:	462a      	mov	r2, r5
 8011142:	4b0f      	ldr	r3, [pc, #60]	; (8011180 <_svfiprintf_r+0x1f4>)
 8011144:	a904      	add	r1, sp, #16
 8011146:	4638      	mov	r0, r7
 8011148:	f7fd fd9e 	bl	800ec88 <_printf_float>
 801114c:	1c42      	adds	r2, r0, #1
 801114e:	4606      	mov	r6, r0
 8011150:	d1d6      	bne.n	8011100 <_svfiprintf_r+0x174>
 8011152:	89ab      	ldrh	r3, [r5, #12]
 8011154:	065b      	lsls	r3, r3, #25
 8011156:	f53f af2d 	bmi.w	8010fb4 <_svfiprintf_r+0x28>
 801115a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801115c:	b01d      	add	sp, #116	; 0x74
 801115e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011162:	ab03      	add	r3, sp, #12
 8011164:	9300      	str	r3, [sp, #0]
 8011166:	462a      	mov	r2, r5
 8011168:	4b05      	ldr	r3, [pc, #20]	; (8011180 <_svfiprintf_r+0x1f4>)
 801116a:	a904      	add	r1, sp, #16
 801116c:	4638      	mov	r0, r7
 801116e:	f7fe f813 	bl	800f198 <_printf_i>
 8011172:	e7eb      	b.n	801114c <_svfiprintf_r+0x1c0>
 8011174:	080133cc 	.word	0x080133cc
 8011178:	080133d6 	.word	0x080133d6
 801117c:	0800ec89 	.word	0x0800ec89
 8011180:	08010ed9 	.word	0x08010ed9
 8011184:	080133d2 	.word	0x080133d2

08011188 <__sfputc_r>:
 8011188:	6893      	ldr	r3, [r2, #8]
 801118a:	3b01      	subs	r3, #1
 801118c:	2b00      	cmp	r3, #0
 801118e:	b410      	push	{r4}
 8011190:	6093      	str	r3, [r2, #8]
 8011192:	da08      	bge.n	80111a6 <__sfputc_r+0x1e>
 8011194:	6994      	ldr	r4, [r2, #24]
 8011196:	42a3      	cmp	r3, r4
 8011198:	db01      	blt.n	801119e <__sfputc_r+0x16>
 801119a:	290a      	cmp	r1, #10
 801119c:	d103      	bne.n	80111a6 <__sfputc_r+0x1e>
 801119e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111a2:	f7fe baae 	b.w	800f702 <__swbuf_r>
 80111a6:	6813      	ldr	r3, [r2, #0]
 80111a8:	1c58      	adds	r0, r3, #1
 80111aa:	6010      	str	r0, [r2, #0]
 80111ac:	7019      	strb	r1, [r3, #0]
 80111ae:	4608      	mov	r0, r1
 80111b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111b4:	4770      	bx	lr

080111b6 <__sfputs_r>:
 80111b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111b8:	4606      	mov	r6, r0
 80111ba:	460f      	mov	r7, r1
 80111bc:	4614      	mov	r4, r2
 80111be:	18d5      	adds	r5, r2, r3
 80111c0:	42ac      	cmp	r4, r5
 80111c2:	d101      	bne.n	80111c8 <__sfputs_r+0x12>
 80111c4:	2000      	movs	r0, #0
 80111c6:	e007      	b.n	80111d8 <__sfputs_r+0x22>
 80111c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111cc:	463a      	mov	r2, r7
 80111ce:	4630      	mov	r0, r6
 80111d0:	f7ff ffda 	bl	8011188 <__sfputc_r>
 80111d4:	1c43      	adds	r3, r0, #1
 80111d6:	d1f3      	bne.n	80111c0 <__sfputs_r+0xa>
 80111d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080111dc <_vfiprintf_r>:
 80111dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111e0:	460d      	mov	r5, r1
 80111e2:	b09d      	sub	sp, #116	; 0x74
 80111e4:	4614      	mov	r4, r2
 80111e6:	4698      	mov	r8, r3
 80111e8:	4606      	mov	r6, r0
 80111ea:	b118      	cbz	r0, 80111f4 <_vfiprintf_r+0x18>
 80111ec:	6a03      	ldr	r3, [r0, #32]
 80111ee:	b90b      	cbnz	r3, 80111f4 <_vfiprintf_r+0x18>
 80111f0:	f7fe f980 	bl	800f4f4 <__sinit>
 80111f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111f6:	07d9      	lsls	r1, r3, #31
 80111f8:	d405      	bmi.n	8011206 <_vfiprintf_r+0x2a>
 80111fa:	89ab      	ldrh	r3, [r5, #12]
 80111fc:	059a      	lsls	r2, r3, #22
 80111fe:	d402      	bmi.n	8011206 <_vfiprintf_r+0x2a>
 8011200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011202:	f7fe fbe6 	bl	800f9d2 <__retarget_lock_acquire_recursive>
 8011206:	89ab      	ldrh	r3, [r5, #12]
 8011208:	071b      	lsls	r3, r3, #28
 801120a:	d501      	bpl.n	8011210 <_vfiprintf_r+0x34>
 801120c:	692b      	ldr	r3, [r5, #16]
 801120e:	b99b      	cbnz	r3, 8011238 <_vfiprintf_r+0x5c>
 8011210:	4629      	mov	r1, r5
 8011212:	4630      	mov	r0, r6
 8011214:	f7fe fab2 	bl	800f77c <__swsetup_r>
 8011218:	b170      	cbz	r0, 8011238 <_vfiprintf_r+0x5c>
 801121a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801121c:	07dc      	lsls	r4, r3, #31
 801121e:	d504      	bpl.n	801122a <_vfiprintf_r+0x4e>
 8011220:	f04f 30ff 	mov.w	r0, #4294967295
 8011224:	b01d      	add	sp, #116	; 0x74
 8011226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801122a:	89ab      	ldrh	r3, [r5, #12]
 801122c:	0598      	lsls	r0, r3, #22
 801122e:	d4f7      	bmi.n	8011220 <_vfiprintf_r+0x44>
 8011230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011232:	f7fe fbcf 	bl	800f9d4 <__retarget_lock_release_recursive>
 8011236:	e7f3      	b.n	8011220 <_vfiprintf_r+0x44>
 8011238:	2300      	movs	r3, #0
 801123a:	9309      	str	r3, [sp, #36]	; 0x24
 801123c:	2320      	movs	r3, #32
 801123e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011242:	f8cd 800c 	str.w	r8, [sp, #12]
 8011246:	2330      	movs	r3, #48	; 0x30
 8011248:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80113fc <_vfiprintf_r+0x220>
 801124c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011250:	f04f 0901 	mov.w	r9, #1
 8011254:	4623      	mov	r3, r4
 8011256:	469a      	mov	sl, r3
 8011258:	f813 2b01 	ldrb.w	r2, [r3], #1
 801125c:	b10a      	cbz	r2, 8011262 <_vfiprintf_r+0x86>
 801125e:	2a25      	cmp	r2, #37	; 0x25
 8011260:	d1f9      	bne.n	8011256 <_vfiprintf_r+0x7a>
 8011262:	ebba 0b04 	subs.w	fp, sl, r4
 8011266:	d00b      	beq.n	8011280 <_vfiprintf_r+0xa4>
 8011268:	465b      	mov	r3, fp
 801126a:	4622      	mov	r2, r4
 801126c:	4629      	mov	r1, r5
 801126e:	4630      	mov	r0, r6
 8011270:	f7ff ffa1 	bl	80111b6 <__sfputs_r>
 8011274:	3001      	adds	r0, #1
 8011276:	f000 80a9 	beq.w	80113cc <_vfiprintf_r+0x1f0>
 801127a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801127c:	445a      	add	r2, fp
 801127e:	9209      	str	r2, [sp, #36]	; 0x24
 8011280:	f89a 3000 	ldrb.w	r3, [sl]
 8011284:	2b00      	cmp	r3, #0
 8011286:	f000 80a1 	beq.w	80113cc <_vfiprintf_r+0x1f0>
 801128a:	2300      	movs	r3, #0
 801128c:	f04f 32ff 	mov.w	r2, #4294967295
 8011290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011294:	f10a 0a01 	add.w	sl, sl, #1
 8011298:	9304      	str	r3, [sp, #16]
 801129a:	9307      	str	r3, [sp, #28]
 801129c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80112a0:	931a      	str	r3, [sp, #104]	; 0x68
 80112a2:	4654      	mov	r4, sl
 80112a4:	2205      	movs	r2, #5
 80112a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112aa:	4854      	ldr	r0, [pc, #336]	; (80113fc <_vfiprintf_r+0x220>)
 80112ac:	f7ef f818 	bl	80002e0 <memchr>
 80112b0:	9a04      	ldr	r2, [sp, #16]
 80112b2:	b9d8      	cbnz	r0, 80112ec <_vfiprintf_r+0x110>
 80112b4:	06d1      	lsls	r1, r2, #27
 80112b6:	bf44      	itt	mi
 80112b8:	2320      	movmi	r3, #32
 80112ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112be:	0713      	lsls	r3, r2, #28
 80112c0:	bf44      	itt	mi
 80112c2:	232b      	movmi	r3, #43	; 0x2b
 80112c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112c8:	f89a 3000 	ldrb.w	r3, [sl]
 80112cc:	2b2a      	cmp	r3, #42	; 0x2a
 80112ce:	d015      	beq.n	80112fc <_vfiprintf_r+0x120>
 80112d0:	9a07      	ldr	r2, [sp, #28]
 80112d2:	4654      	mov	r4, sl
 80112d4:	2000      	movs	r0, #0
 80112d6:	f04f 0c0a 	mov.w	ip, #10
 80112da:	4621      	mov	r1, r4
 80112dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112e0:	3b30      	subs	r3, #48	; 0x30
 80112e2:	2b09      	cmp	r3, #9
 80112e4:	d94d      	bls.n	8011382 <_vfiprintf_r+0x1a6>
 80112e6:	b1b0      	cbz	r0, 8011316 <_vfiprintf_r+0x13a>
 80112e8:	9207      	str	r2, [sp, #28]
 80112ea:	e014      	b.n	8011316 <_vfiprintf_r+0x13a>
 80112ec:	eba0 0308 	sub.w	r3, r0, r8
 80112f0:	fa09 f303 	lsl.w	r3, r9, r3
 80112f4:	4313      	orrs	r3, r2
 80112f6:	9304      	str	r3, [sp, #16]
 80112f8:	46a2      	mov	sl, r4
 80112fa:	e7d2      	b.n	80112a2 <_vfiprintf_r+0xc6>
 80112fc:	9b03      	ldr	r3, [sp, #12]
 80112fe:	1d19      	adds	r1, r3, #4
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	9103      	str	r1, [sp, #12]
 8011304:	2b00      	cmp	r3, #0
 8011306:	bfbb      	ittet	lt
 8011308:	425b      	neglt	r3, r3
 801130a:	f042 0202 	orrlt.w	r2, r2, #2
 801130e:	9307      	strge	r3, [sp, #28]
 8011310:	9307      	strlt	r3, [sp, #28]
 8011312:	bfb8      	it	lt
 8011314:	9204      	strlt	r2, [sp, #16]
 8011316:	7823      	ldrb	r3, [r4, #0]
 8011318:	2b2e      	cmp	r3, #46	; 0x2e
 801131a:	d10c      	bne.n	8011336 <_vfiprintf_r+0x15a>
 801131c:	7863      	ldrb	r3, [r4, #1]
 801131e:	2b2a      	cmp	r3, #42	; 0x2a
 8011320:	d134      	bne.n	801138c <_vfiprintf_r+0x1b0>
 8011322:	9b03      	ldr	r3, [sp, #12]
 8011324:	1d1a      	adds	r2, r3, #4
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	9203      	str	r2, [sp, #12]
 801132a:	2b00      	cmp	r3, #0
 801132c:	bfb8      	it	lt
 801132e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011332:	3402      	adds	r4, #2
 8011334:	9305      	str	r3, [sp, #20]
 8011336:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801140c <_vfiprintf_r+0x230>
 801133a:	7821      	ldrb	r1, [r4, #0]
 801133c:	2203      	movs	r2, #3
 801133e:	4650      	mov	r0, sl
 8011340:	f7ee ffce 	bl	80002e0 <memchr>
 8011344:	b138      	cbz	r0, 8011356 <_vfiprintf_r+0x17a>
 8011346:	9b04      	ldr	r3, [sp, #16]
 8011348:	eba0 000a 	sub.w	r0, r0, sl
 801134c:	2240      	movs	r2, #64	; 0x40
 801134e:	4082      	lsls	r2, r0
 8011350:	4313      	orrs	r3, r2
 8011352:	3401      	adds	r4, #1
 8011354:	9304      	str	r3, [sp, #16]
 8011356:	f814 1b01 	ldrb.w	r1, [r4], #1
 801135a:	4829      	ldr	r0, [pc, #164]	; (8011400 <_vfiprintf_r+0x224>)
 801135c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011360:	2206      	movs	r2, #6
 8011362:	f7ee ffbd 	bl	80002e0 <memchr>
 8011366:	2800      	cmp	r0, #0
 8011368:	d03f      	beq.n	80113ea <_vfiprintf_r+0x20e>
 801136a:	4b26      	ldr	r3, [pc, #152]	; (8011404 <_vfiprintf_r+0x228>)
 801136c:	bb1b      	cbnz	r3, 80113b6 <_vfiprintf_r+0x1da>
 801136e:	9b03      	ldr	r3, [sp, #12]
 8011370:	3307      	adds	r3, #7
 8011372:	f023 0307 	bic.w	r3, r3, #7
 8011376:	3308      	adds	r3, #8
 8011378:	9303      	str	r3, [sp, #12]
 801137a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801137c:	443b      	add	r3, r7
 801137e:	9309      	str	r3, [sp, #36]	; 0x24
 8011380:	e768      	b.n	8011254 <_vfiprintf_r+0x78>
 8011382:	fb0c 3202 	mla	r2, ip, r2, r3
 8011386:	460c      	mov	r4, r1
 8011388:	2001      	movs	r0, #1
 801138a:	e7a6      	b.n	80112da <_vfiprintf_r+0xfe>
 801138c:	2300      	movs	r3, #0
 801138e:	3401      	adds	r4, #1
 8011390:	9305      	str	r3, [sp, #20]
 8011392:	4619      	mov	r1, r3
 8011394:	f04f 0c0a 	mov.w	ip, #10
 8011398:	4620      	mov	r0, r4
 801139a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801139e:	3a30      	subs	r2, #48	; 0x30
 80113a0:	2a09      	cmp	r2, #9
 80113a2:	d903      	bls.n	80113ac <_vfiprintf_r+0x1d0>
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d0c6      	beq.n	8011336 <_vfiprintf_r+0x15a>
 80113a8:	9105      	str	r1, [sp, #20]
 80113aa:	e7c4      	b.n	8011336 <_vfiprintf_r+0x15a>
 80113ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80113b0:	4604      	mov	r4, r0
 80113b2:	2301      	movs	r3, #1
 80113b4:	e7f0      	b.n	8011398 <_vfiprintf_r+0x1bc>
 80113b6:	ab03      	add	r3, sp, #12
 80113b8:	9300      	str	r3, [sp, #0]
 80113ba:	462a      	mov	r2, r5
 80113bc:	4b12      	ldr	r3, [pc, #72]	; (8011408 <_vfiprintf_r+0x22c>)
 80113be:	a904      	add	r1, sp, #16
 80113c0:	4630      	mov	r0, r6
 80113c2:	f7fd fc61 	bl	800ec88 <_printf_float>
 80113c6:	4607      	mov	r7, r0
 80113c8:	1c78      	adds	r0, r7, #1
 80113ca:	d1d6      	bne.n	801137a <_vfiprintf_r+0x19e>
 80113cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113ce:	07d9      	lsls	r1, r3, #31
 80113d0:	d405      	bmi.n	80113de <_vfiprintf_r+0x202>
 80113d2:	89ab      	ldrh	r3, [r5, #12]
 80113d4:	059a      	lsls	r2, r3, #22
 80113d6:	d402      	bmi.n	80113de <_vfiprintf_r+0x202>
 80113d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113da:	f7fe fafb 	bl	800f9d4 <__retarget_lock_release_recursive>
 80113de:	89ab      	ldrh	r3, [r5, #12]
 80113e0:	065b      	lsls	r3, r3, #25
 80113e2:	f53f af1d 	bmi.w	8011220 <_vfiprintf_r+0x44>
 80113e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80113e8:	e71c      	b.n	8011224 <_vfiprintf_r+0x48>
 80113ea:	ab03      	add	r3, sp, #12
 80113ec:	9300      	str	r3, [sp, #0]
 80113ee:	462a      	mov	r2, r5
 80113f0:	4b05      	ldr	r3, [pc, #20]	; (8011408 <_vfiprintf_r+0x22c>)
 80113f2:	a904      	add	r1, sp, #16
 80113f4:	4630      	mov	r0, r6
 80113f6:	f7fd fecf 	bl	800f198 <_printf_i>
 80113fa:	e7e4      	b.n	80113c6 <_vfiprintf_r+0x1ea>
 80113fc:	080133cc 	.word	0x080133cc
 8011400:	080133d6 	.word	0x080133d6
 8011404:	0800ec89 	.word	0x0800ec89
 8011408:	080111b7 	.word	0x080111b7
 801140c:	080133d2 	.word	0x080133d2

08011410 <__sflush_r>:
 8011410:	898a      	ldrh	r2, [r1, #12]
 8011412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011416:	4605      	mov	r5, r0
 8011418:	0710      	lsls	r0, r2, #28
 801141a:	460c      	mov	r4, r1
 801141c:	d458      	bmi.n	80114d0 <__sflush_r+0xc0>
 801141e:	684b      	ldr	r3, [r1, #4]
 8011420:	2b00      	cmp	r3, #0
 8011422:	dc05      	bgt.n	8011430 <__sflush_r+0x20>
 8011424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011426:	2b00      	cmp	r3, #0
 8011428:	dc02      	bgt.n	8011430 <__sflush_r+0x20>
 801142a:	2000      	movs	r0, #0
 801142c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011432:	2e00      	cmp	r6, #0
 8011434:	d0f9      	beq.n	801142a <__sflush_r+0x1a>
 8011436:	2300      	movs	r3, #0
 8011438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801143c:	682f      	ldr	r7, [r5, #0]
 801143e:	6a21      	ldr	r1, [r4, #32]
 8011440:	602b      	str	r3, [r5, #0]
 8011442:	d032      	beq.n	80114aa <__sflush_r+0x9a>
 8011444:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011446:	89a3      	ldrh	r3, [r4, #12]
 8011448:	075a      	lsls	r2, r3, #29
 801144a:	d505      	bpl.n	8011458 <__sflush_r+0x48>
 801144c:	6863      	ldr	r3, [r4, #4]
 801144e:	1ac0      	subs	r0, r0, r3
 8011450:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011452:	b10b      	cbz	r3, 8011458 <__sflush_r+0x48>
 8011454:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011456:	1ac0      	subs	r0, r0, r3
 8011458:	2300      	movs	r3, #0
 801145a:	4602      	mov	r2, r0
 801145c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801145e:	6a21      	ldr	r1, [r4, #32]
 8011460:	4628      	mov	r0, r5
 8011462:	47b0      	blx	r6
 8011464:	1c43      	adds	r3, r0, #1
 8011466:	89a3      	ldrh	r3, [r4, #12]
 8011468:	d106      	bne.n	8011478 <__sflush_r+0x68>
 801146a:	6829      	ldr	r1, [r5, #0]
 801146c:	291d      	cmp	r1, #29
 801146e:	d82b      	bhi.n	80114c8 <__sflush_r+0xb8>
 8011470:	4a29      	ldr	r2, [pc, #164]	; (8011518 <__sflush_r+0x108>)
 8011472:	410a      	asrs	r2, r1
 8011474:	07d6      	lsls	r6, r2, #31
 8011476:	d427      	bmi.n	80114c8 <__sflush_r+0xb8>
 8011478:	2200      	movs	r2, #0
 801147a:	6062      	str	r2, [r4, #4]
 801147c:	04d9      	lsls	r1, r3, #19
 801147e:	6922      	ldr	r2, [r4, #16]
 8011480:	6022      	str	r2, [r4, #0]
 8011482:	d504      	bpl.n	801148e <__sflush_r+0x7e>
 8011484:	1c42      	adds	r2, r0, #1
 8011486:	d101      	bne.n	801148c <__sflush_r+0x7c>
 8011488:	682b      	ldr	r3, [r5, #0]
 801148a:	b903      	cbnz	r3, 801148e <__sflush_r+0x7e>
 801148c:	6560      	str	r0, [r4, #84]	; 0x54
 801148e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011490:	602f      	str	r7, [r5, #0]
 8011492:	2900      	cmp	r1, #0
 8011494:	d0c9      	beq.n	801142a <__sflush_r+0x1a>
 8011496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801149a:	4299      	cmp	r1, r3
 801149c:	d002      	beq.n	80114a4 <__sflush_r+0x94>
 801149e:	4628      	mov	r0, r5
 80114a0:	f7ff f89e 	bl	80105e0 <_free_r>
 80114a4:	2000      	movs	r0, #0
 80114a6:	6360      	str	r0, [r4, #52]	; 0x34
 80114a8:	e7c0      	b.n	801142c <__sflush_r+0x1c>
 80114aa:	2301      	movs	r3, #1
 80114ac:	4628      	mov	r0, r5
 80114ae:	47b0      	blx	r6
 80114b0:	1c41      	adds	r1, r0, #1
 80114b2:	d1c8      	bne.n	8011446 <__sflush_r+0x36>
 80114b4:	682b      	ldr	r3, [r5, #0]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d0c5      	beq.n	8011446 <__sflush_r+0x36>
 80114ba:	2b1d      	cmp	r3, #29
 80114bc:	d001      	beq.n	80114c2 <__sflush_r+0xb2>
 80114be:	2b16      	cmp	r3, #22
 80114c0:	d101      	bne.n	80114c6 <__sflush_r+0xb6>
 80114c2:	602f      	str	r7, [r5, #0]
 80114c4:	e7b1      	b.n	801142a <__sflush_r+0x1a>
 80114c6:	89a3      	ldrh	r3, [r4, #12]
 80114c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114cc:	81a3      	strh	r3, [r4, #12]
 80114ce:	e7ad      	b.n	801142c <__sflush_r+0x1c>
 80114d0:	690f      	ldr	r7, [r1, #16]
 80114d2:	2f00      	cmp	r7, #0
 80114d4:	d0a9      	beq.n	801142a <__sflush_r+0x1a>
 80114d6:	0793      	lsls	r3, r2, #30
 80114d8:	680e      	ldr	r6, [r1, #0]
 80114da:	bf08      	it	eq
 80114dc:	694b      	ldreq	r3, [r1, #20]
 80114de:	600f      	str	r7, [r1, #0]
 80114e0:	bf18      	it	ne
 80114e2:	2300      	movne	r3, #0
 80114e4:	eba6 0807 	sub.w	r8, r6, r7
 80114e8:	608b      	str	r3, [r1, #8]
 80114ea:	f1b8 0f00 	cmp.w	r8, #0
 80114ee:	dd9c      	ble.n	801142a <__sflush_r+0x1a>
 80114f0:	6a21      	ldr	r1, [r4, #32]
 80114f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80114f4:	4643      	mov	r3, r8
 80114f6:	463a      	mov	r2, r7
 80114f8:	4628      	mov	r0, r5
 80114fa:	47b0      	blx	r6
 80114fc:	2800      	cmp	r0, #0
 80114fe:	dc06      	bgt.n	801150e <__sflush_r+0xfe>
 8011500:	89a3      	ldrh	r3, [r4, #12]
 8011502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011506:	81a3      	strh	r3, [r4, #12]
 8011508:	f04f 30ff 	mov.w	r0, #4294967295
 801150c:	e78e      	b.n	801142c <__sflush_r+0x1c>
 801150e:	4407      	add	r7, r0
 8011510:	eba8 0800 	sub.w	r8, r8, r0
 8011514:	e7e9      	b.n	80114ea <__sflush_r+0xda>
 8011516:	bf00      	nop
 8011518:	dfbffffe 	.word	0xdfbffffe

0801151c <_fflush_r>:
 801151c:	b538      	push	{r3, r4, r5, lr}
 801151e:	690b      	ldr	r3, [r1, #16]
 8011520:	4605      	mov	r5, r0
 8011522:	460c      	mov	r4, r1
 8011524:	b913      	cbnz	r3, 801152c <_fflush_r+0x10>
 8011526:	2500      	movs	r5, #0
 8011528:	4628      	mov	r0, r5
 801152a:	bd38      	pop	{r3, r4, r5, pc}
 801152c:	b118      	cbz	r0, 8011536 <_fflush_r+0x1a>
 801152e:	6a03      	ldr	r3, [r0, #32]
 8011530:	b90b      	cbnz	r3, 8011536 <_fflush_r+0x1a>
 8011532:	f7fd ffdf 	bl	800f4f4 <__sinit>
 8011536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d0f3      	beq.n	8011526 <_fflush_r+0xa>
 801153e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011540:	07d0      	lsls	r0, r2, #31
 8011542:	d404      	bmi.n	801154e <_fflush_r+0x32>
 8011544:	0599      	lsls	r1, r3, #22
 8011546:	d402      	bmi.n	801154e <_fflush_r+0x32>
 8011548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801154a:	f7fe fa42 	bl	800f9d2 <__retarget_lock_acquire_recursive>
 801154e:	4628      	mov	r0, r5
 8011550:	4621      	mov	r1, r4
 8011552:	f7ff ff5d 	bl	8011410 <__sflush_r>
 8011556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011558:	07da      	lsls	r2, r3, #31
 801155a:	4605      	mov	r5, r0
 801155c:	d4e4      	bmi.n	8011528 <_fflush_r+0xc>
 801155e:	89a3      	ldrh	r3, [r4, #12]
 8011560:	059b      	lsls	r3, r3, #22
 8011562:	d4e1      	bmi.n	8011528 <_fflush_r+0xc>
 8011564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011566:	f7fe fa35 	bl	800f9d4 <__retarget_lock_release_recursive>
 801156a:	e7dd      	b.n	8011528 <_fflush_r+0xc>

0801156c <__swhatbuf_r>:
 801156c:	b570      	push	{r4, r5, r6, lr}
 801156e:	460c      	mov	r4, r1
 8011570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011574:	2900      	cmp	r1, #0
 8011576:	b096      	sub	sp, #88	; 0x58
 8011578:	4615      	mov	r5, r2
 801157a:	461e      	mov	r6, r3
 801157c:	da0d      	bge.n	801159a <__swhatbuf_r+0x2e>
 801157e:	89a3      	ldrh	r3, [r4, #12]
 8011580:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011584:	f04f 0100 	mov.w	r1, #0
 8011588:	bf0c      	ite	eq
 801158a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801158e:	2340      	movne	r3, #64	; 0x40
 8011590:	2000      	movs	r0, #0
 8011592:	6031      	str	r1, [r6, #0]
 8011594:	602b      	str	r3, [r5, #0]
 8011596:	b016      	add	sp, #88	; 0x58
 8011598:	bd70      	pop	{r4, r5, r6, pc}
 801159a:	466a      	mov	r2, sp
 801159c:	f000 f862 	bl	8011664 <_fstat_r>
 80115a0:	2800      	cmp	r0, #0
 80115a2:	dbec      	blt.n	801157e <__swhatbuf_r+0x12>
 80115a4:	9901      	ldr	r1, [sp, #4]
 80115a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80115aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80115ae:	4259      	negs	r1, r3
 80115b0:	4159      	adcs	r1, r3
 80115b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115b6:	e7eb      	b.n	8011590 <__swhatbuf_r+0x24>

080115b8 <__smakebuf_r>:
 80115b8:	898b      	ldrh	r3, [r1, #12]
 80115ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80115bc:	079d      	lsls	r5, r3, #30
 80115be:	4606      	mov	r6, r0
 80115c0:	460c      	mov	r4, r1
 80115c2:	d507      	bpl.n	80115d4 <__smakebuf_r+0x1c>
 80115c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80115c8:	6023      	str	r3, [r4, #0]
 80115ca:	6123      	str	r3, [r4, #16]
 80115cc:	2301      	movs	r3, #1
 80115ce:	6163      	str	r3, [r4, #20]
 80115d0:	b002      	add	sp, #8
 80115d2:	bd70      	pop	{r4, r5, r6, pc}
 80115d4:	ab01      	add	r3, sp, #4
 80115d6:	466a      	mov	r2, sp
 80115d8:	f7ff ffc8 	bl	801156c <__swhatbuf_r>
 80115dc:	9900      	ldr	r1, [sp, #0]
 80115de:	4605      	mov	r5, r0
 80115e0:	4630      	mov	r0, r6
 80115e2:	f7ff f871 	bl	80106c8 <_malloc_r>
 80115e6:	b948      	cbnz	r0, 80115fc <__smakebuf_r+0x44>
 80115e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115ec:	059a      	lsls	r2, r3, #22
 80115ee:	d4ef      	bmi.n	80115d0 <__smakebuf_r+0x18>
 80115f0:	f023 0303 	bic.w	r3, r3, #3
 80115f4:	f043 0302 	orr.w	r3, r3, #2
 80115f8:	81a3      	strh	r3, [r4, #12]
 80115fa:	e7e3      	b.n	80115c4 <__smakebuf_r+0xc>
 80115fc:	89a3      	ldrh	r3, [r4, #12]
 80115fe:	6020      	str	r0, [r4, #0]
 8011600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011604:	81a3      	strh	r3, [r4, #12]
 8011606:	9b00      	ldr	r3, [sp, #0]
 8011608:	6163      	str	r3, [r4, #20]
 801160a:	9b01      	ldr	r3, [sp, #4]
 801160c:	6120      	str	r0, [r4, #16]
 801160e:	b15b      	cbz	r3, 8011628 <__smakebuf_r+0x70>
 8011610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011614:	4630      	mov	r0, r6
 8011616:	f000 f837 	bl	8011688 <_isatty_r>
 801161a:	b128      	cbz	r0, 8011628 <__smakebuf_r+0x70>
 801161c:	89a3      	ldrh	r3, [r4, #12]
 801161e:	f023 0303 	bic.w	r3, r3, #3
 8011622:	f043 0301 	orr.w	r3, r3, #1
 8011626:	81a3      	strh	r3, [r4, #12]
 8011628:	89a3      	ldrh	r3, [r4, #12]
 801162a:	431d      	orrs	r5, r3
 801162c:	81a5      	strh	r5, [r4, #12]
 801162e:	e7cf      	b.n	80115d0 <__smakebuf_r+0x18>

08011630 <memmove>:
 8011630:	4288      	cmp	r0, r1
 8011632:	b510      	push	{r4, lr}
 8011634:	eb01 0402 	add.w	r4, r1, r2
 8011638:	d902      	bls.n	8011640 <memmove+0x10>
 801163a:	4284      	cmp	r4, r0
 801163c:	4623      	mov	r3, r4
 801163e:	d807      	bhi.n	8011650 <memmove+0x20>
 8011640:	1e43      	subs	r3, r0, #1
 8011642:	42a1      	cmp	r1, r4
 8011644:	d008      	beq.n	8011658 <memmove+0x28>
 8011646:	f811 2b01 	ldrb.w	r2, [r1], #1
 801164a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801164e:	e7f8      	b.n	8011642 <memmove+0x12>
 8011650:	4402      	add	r2, r0
 8011652:	4601      	mov	r1, r0
 8011654:	428a      	cmp	r2, r1
 8011656:	d100      	bne.n	801165a <memmove+0x2a>
 8011658:	bd10      	pop	{r4, pc}
 801165a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801165e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011662:	e7f7      	b.n	8011654 <memmove+0x24>

08011664 <_fstat_r>:
 8011664:	b538      	push	{r3, r4, r5, lr}
 8011666:	4d07      	ldr	r5, [pc, #28]	; (8011684 <_fstat_r+0x20>)
 8011668:	2300      	movs	r3, #0
 801166a:	4604      	mov	r4, r0
 801166c:	4608      	mov	r0, r1
 801166e:	4611      	mov	r1, r2
 8011670:	602b      	str	r3, [r5, #0]
 8011672:	f7f3 fa9d 	bl	8004bb0 <_fstat>
 8011676:	1c43      	adds	r3, r0, #1
 8011678:	d102      	bne.n	8011680 <_fstat_r+0x1c>
 801167a:	682b      	ldr	r3, [r5, #0]
 801167c:	b103      	cbz	r3, 8011680 <_fstat_r+0x1c>
 801167e:	6023      	str	r3, [r4, #0]
 8011680:	bd38      	pop	{r3, r4, r5, pc}
 8011682:	bf00      	nop
 8011684:	240054d4 	.word	0x240054d4

08011688 <_isatty_r>:
 8011688:	b538      	push	{r3, r4, r5, lr}
 801168a:	4d06      	ldr	r5, [pc, #24]	; (80116a4 <_isatty_r+0x1c>)
 801168c:	2300      	movs	r3, #0
 801168e:	4604      	mov	r4, r0
 8011690:	4608      	mov	r0, r1
 8011692:	602b      	str	r3, [r5, #0]
 8011694:	f7f3 fa9c 	bl	8004bd0 <_isatty>
 8011698:	1c43      	adds	r3, r0, #1
 801169a:	d102      	bne.n	80116a2 <_isatty_r+0x1a>
 801169c:	682b      	ldr	r3, [r5, #0]
 801169e:	b103      	cbz	r3, 80116a2 <_isatty_r+0x1a>
 80116a0:	6023      	str	r3, [r4, #0]
 80116a2:	bd38      	pop	{r3, r4, r5, pc}
 80116a4:	240054d4 	.word	0x240054d4

080116a8 <_sbrk_r>:
 80116a8:	b538      	push	{r3, r4, r5, lr}
 80116aa:	4d06      	ldr	r5, [pc, #24]	; (80116c4 <_sbrk_r+0x1c>)
 80116ac:	2300      	movs	r3, #0
 80116ae:	4604      	mov	r4, r0
 80116b0:	4608      	mov	r0, r1
 80116b2:	602b      	str	r3, [r5, #0]
 80116b4:	f7f3 faa4 	bl	8004c00 <_sbrk>
 80116b8:	1c43      	adds	r3, r0, #1
 80116ba:	d102      	bne.n	80116c2 <_sbrk_r+0x1a>
 80116bc:	682b      	ldr	r3, [r5, #0]
 80116be:	b103      	cbz	r3, 80116c2 <_sbrk_r+0x1a>
 80116c0:	6023      	str	r3, [r4, #0]
 80116c2:	bd38      	pop	{r3, r4, r5, pc}
 80116c4:	240054d4 	.word	0x240054d4

080116c8 <__assert_func>:
 80116c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80116ca:	4614      	mov	r4, r2
 80116cc:	461a      	mov	r2, r3
 80116ce:	4b09      	ldr	r3, [pc, #36]	; (80116f4 <__assert_func+0x2c>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	4605      	mov	r5, r0
 80116d4:	68d8      	ldr	r0, [r3, #12]
 80116d6:	b14c      	cbz	r4, 80116ec <__assert_func+0x24>
 80116d8:	4b07      	ldr	r3, [pc, #28]	; (80116f8 <__assert_func+0x30>)
 80116da:	9100      	str	r1, [sp, #0]
 80116dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80116e0:	4906      	ldr	r1, [pc, #24]	; (80116fc <__assert_func+0x34>)
 80116e2:	462b      	mov	r3, r5
 80116e4:	f000 f872 	bl	80117cc <fiprintf>
 80116e8:	f000 f882 	bl	80117f0 <abort>
 80116ec:	4b04      	ldr	r3, [pc, #16]	; (8011700 <__assert_func+0x38>)
 80116ee:	461c      	mov	r4, r3
 80116f0:	e7f3      	b.n	80116da <__assert_func+0x12>
 80116f2:	bf00      	nop
 80116f4:	24000074 	.word	0x24000074
 80116f8:	080133e7 	.word	0x080133e7
 80116fc:	080133f4 	.word	0x080133f4
 8011700:	08013422 	.word	0x08013422

08011704 <_calloc_r>:
 8011704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011706:	fba1 2402 	umull	r2, r4, r1, r2
 801170a:	b94c      	cbnz	r4, 8011720 <_calloc_r+0x1c>
 801170c:	4611      	mov	r1, r2
 801170e:	9201      	str	r2, [sp, #4]
 8011710:	f7fe ffda 	bl	80106c8 <_malloc_r>
 8011714:	9a01      	ldr	r2, [sp, #4]
 8011716:	4605      	mov	r5, r0
 8011718:	b930      	cbnz	r0, 8011728 <_calloc_r+0x24>
 801171a:	4628      	mov	r0, r5
 801171c:	b003      	add	sp, #12
 801171e:	bd30      	pop	{r4, r5, pc}
 8011720:	220c      	movs	r2, #12
 8011722:	6002      	str	r2, [r0, #0]
 8011724:	2500      	movs	r5, #0
 8011726:	e7f8      	b.n	801171a <_calloc_r+0x16>
 8011728:	4621      	mov	r1, r4
 801172a:	f7fe f87f 	bl	800f82c <memset>
 801172e:	e7f4      	b.n	801171a <_calloc_r+0x16>

08011730 <__ascii_mbtowc>:
 8011730:	b082      	sub	sp, #8
 8011732:	b901      	cbnz	r1, 8011736 <__ascii_mbtowc+0x6>
 8011734:	a901      	add	r1, sp, #4
 8011736:	b142      	cbz	r2, 801174a <__ascii_mbtowc+0x1a>
 8011738:	b14b      	cbz	r3, 801174e <__ascii_mbtowc+0x1e>
 801173a:	7813      	ldrb	r3, [r2, #0]
 801173c:	600b      	str	r3, [r1, #0]
 801173e:	7812      	ldrb	r2, [r2, #0]
 8011740:	1e10      	subs	r0, r2, #0
 8011742:	bf18      	it	ne
 8011744:	2001      	movne	r0, #1
 8011746:	b002      	add	sp, #8
 8011748:	4770      	bx	lr
 801174a:	4610      	mov	r0, r2
 801174c:	e7fb      	b.n	8011746 <__ascii_mbtowc+0x16>
 801174e:	f06f 0001 	mvn.w	r0, #1
 8011752:	e7f8      	b.n	8011746 <__ascii_mbtowc+0x16>

08011754 <_realloc_r>:
 8011754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011758:	4680      	mov	r8, r0
 801175a:	4614      	mov	r4, r2
 801175c:	460e      	mov	r6, r1
 801175e:	b921      	cbnz	r1, 801176a <_realloc_r+0x16>
 8011760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011764:	4611      	mov	r1, r2
 8011766:	f7fe bfaf 	b.w	80106c8 <_malloc_r>
 801176a:	b92a      	cbnz	r2, 8011778 <_realloc_r+0x24>
 801176c:	f7fe ff38 	bl	80105e0 <_free_r>
 8011770:	4625      	mov	r5, r4
 8011772:	4628      	mov	r0, r5
 8011774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011778:	f000 f841 	bl	80117fe <_malloc_usable_size_r>
 801177c:	4284      	cmp	r4, r0
 801177e:	4607      	mov	r7, r0
 8011780:	d802      	bhi.n	8011788 <_realloc_r+0x34>
 8011782:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011786:	d812      	bhi.n	80117ae <_realloc_r+0x5a>
 8011788:	4621      	mov	r1, r4
 801178a:	4640      	mov	r0, r8
 801178c:	f7fe ff9c 	bl	80106c8 <_malloc_r>
 8011790:	4605      	mov	r5, r0
 8011792:	2800      	cmp	r0, #0
 8011794:	d0ed      	beq.n	8011772 <_realloc_r+0x1e>
 8011796:	42bc      	cmp	r4, r7
 8011798:	4622      	mov	r2, r4
 801179a:	4631      	mov	r1, r6
 801179c:	bf28      	it	cs
 801179e:	463a      	movcs	r2, r7
 80117a0:	f7fe f919 	bl	800f9d6 <memcpy>
 80117a4:	4631      	mov	r1, r6
 80117a6:	4640      	mov	r0, r8
 80117a8:	f7fe ff1a 	bl	80105e0 <_free_r>
 80117ac:	e7e1      	b.n	8011772 <_realloc_r+0x1e>
 80117ae:	4635      	mov	r5, r6
 80117b0:	e7df      	b.n	8011772 <_realloc_r+0x1e>

080117b2 <__ascii_wctomb>:
 80117b2:	b149      	cbz	r1, 80117c8 <__ascii_wctomb+0x16>
 80117b4:	2aff      	cmp	r2, #255	; 0xff
 80117b6:	bf85      	ittet	hi
 80117b8:	238a      	movhi	r3, #138	; 0x8a
 80117ba:	6003      	strhi	r3, [r0, #0]
 80117bc:	700a      	strbls	r2, [r1, #0]
 80117be:	f04f 30ff 	movhi.w	r0, #4294967295
 80117c2:	bf98      	it	ls
 80117c4:	2001      	movls	r0, #1
 80117c6:	4770      	bx	lr
 80117c8:	4608      	mov	r0, r1
 80117ca:	4770      	bx	lr

080117cc <fiprintf>:
 80117cc:	b40e      	push	{r1, r2, r3}
 80117ce:	b503      	push	{r0, r1, lr}
 80117d0:	4601      	mov	r1, r0
 80117d2:	ab03      	add	r3, sp, #12
 80117d4:	4805      	ldr	r0, [pc, #20]	; (80117ec <fiprintf+0x20>)
 80117d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80117da:	6800      	ldr	r0, [r0, #0]
 80117dc:	9301      	str	r3, [sp, #4]
 80117de:	f7ff fcfd 	bl	80111dc <_vfiprintf_r>
 80117e2:	b002      	add	sp, #8
 80117e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80117e8:	b003      	add	sp, #12
 80117ea:	4770      	bx	lr
 80117ec:	24000074 	.word	0x24000074

080117f0 <abort>:
 80117f0:	b508      	push	{r3, lr}
 80117f2:	2006      	movs	r0, #6
 80117f4:	f000 f834 	bl	8011860 <raise>
 80117f8:	2001      	movs	r0, #1
 80117fa:	f7f3 f98a 	bl	8004b12 <_exit>

080117fe <_malloc_usable_size_r>:
 80117fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011802:	1f18      	subs	r0, r3, #4
 8011804:	2b00      	cmp	r3, #0
 8011806:	bfbc      	itt	lt
 8011808:	580b      	ldrlt	r3, [r1, r0]
 801180a:	18c0      	addlt	r0, r0, r3
 801180c:	4770      	bx	lr

0801180e <_raise_r>:
 801180e:	291f      	cmp	r1, #31
 8011810:	b538      	push	{r3, r4, r5, lr}
 8011812:	4604      	mov	r4, r0
 8011814:	460d      	mov	r5, r1
 8011816:	d904      	bls.n	8011822 <_raise_r+0x14>
 8011818:	2316      	movs	r3, #22
 801181a:	6003      	str	r3, [r0, #0]
 801181c:	f04f 30ff 	mov.w	r0, #4294967295
 8011820:	bd38      	pop	{r3, r4, r5, pc}
 8011822:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011824:	b112      	cbz	r2, 801182c <_raise_r+0x1e>
 8011826:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801182a:	b94b      	cbnz	r3, 8011840 <_raise_r+0x32>
 801182c:	4620      	mov	r0, r4
 801182e:	f000 f831 	bl	8011894 <_getpid_r>
 8011832:	462a      	mov	r2, r5
 8011834:	4601      	mov	r1, r0
 8011836:	4620      	mov	r0, r4
 8011838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801183c:	f000 b818 	b.w	8011870 <_kill_r>
 8011840:	2b01      	cmp	r3, #1
 8011842:	d00a      	beq.n	801185a <_raise_r+0x4c>
 8011844:	1c59      	adds	r1, r3, #1
 8011846:	d103      	bne.n	8011850 <_raise_r+0x42>
 8011848:	2316      	movs	r3, #22
 801184a:	6003      	str	r3, [r0, #0]
 801184c:	2001      	movs	r0, #1
 801184e:	e7e7      	b.n	8011820 <_raise_r+0x12>
 8011850:	2400      	movs	r4, #0
 8011852:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011856:	4628      	mov	r0, r5
 8011858:	4798      	blx	r3
 801185a:	2000      	movs	r0, #0
 801185c:	e7e0      	b.n	8011820 <_raise_r+0x12>
	...

08011860 <raise>:
 8011860:	4b02      	ldr	r3, [pc, #8]	; (801186c <raise+0xc>)
 8011862:	4601      	mov	r1, r0
 8011864:	6818      	ldr	r0, [r3, #0]
 8011866:	f7ff bfd2 	b.w	801180e <_raise_r>
 801186a:	bf00      	nop
 801186c:	24000074 	.word	0x24000074

08011870 <_kill_r>:
 8011870:	b538      	push	{r3, r4, r5, lr}
 8011872:	4d07      	ldr	r5, [pc, #28]	; (8011890 <_kill_r+0x20>)
 8011874:	2300      	movs	r3, #0
 8011876:	4604      	mov	r4, r0
 8011878:	4608      	mov	r0, r1
 801187a:	4611      	mov	r1, r2
 801187c:	602b      	str	r3, [r5, #0]
 801187e:	f7f3 f938 	bl	8004af2 <_kill>
 8011882:	1c43      	adds	r3, r0, #1
 8011884:	d102      	bne.n	801188c <_kill_r+0x1c>
 8011886:	682b      	ldr	r3, [r5, #0]
 8011888:	b103      	cbz	r3, 801188c <_kill_r+0x1c>
 801188a:	6023      	str	r3, [r4, #0]
 801188c:	bd38      	pop	{r3, r4, r5, pc}
 801188e:	bf00      	nop
 8011890:	240054d4 	.word	0x240054d4

08011894 <_getpid_r>:
 8011894:	f7f3 b925 	b.w	8004ae2 <_getpid>

08011898 <atan2>:
 8011898:	f000 b95e 	b.w	8011b58 <__ieee754_atan2>
 801189c:	0000      	movs	r0, r0
	...

080118a0 <cos>:
 80118a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80118a2:	eeb0 7b40 	vmov.f64	d7, d0
 80118a6:	ee17 3a90 	vmov	r3, s15
 80118aa:	4a21      	ldr	r2, [pc, #132]	; (8011930 <cos+0x90>)
 80118ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80118b0:	4293      	cmp	r3, r2
 80118b2:	dc06      	bgt.n	80118c2 <cos+0x22>
 80118b4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011928 <cos+0x88>
 80118b8:	b005      	add	sp, #20
 80118ba:	f85d eb04 	ldr.w	lr, [sp], #4
 80118be:	f000 b887 	b.w	80119d0 <__kernel_cos>
 80118c2:	4a1c      	ldr	r2, [pc, #112]	; (8011934 <cos+0x94>)
 80118c4:	4293      	cmp	r3, r2
 80118c6:	dd04      	ble.n	80118d2 <cos+0x32>
 80118c8:	ee30 0b40 	vsub.f64	d0, d0, d0
 80118cc:	b005      	add	sp, #20
 80118ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80118d2:	4668      	mov	r0, sp
 80118d4:	f000 fa04 	bl	8011ce0 <__ieee754_rem_pio2>
 80118d8:	f000 0003 	and.w	r0, r0, #3
 80118dc:	2801      	cmp	r0, #1
 80118de:	d009      	beq.n	80118f4 <cos+0x54>
 80118e0:	2802      	cmp	r0, #2
 80118e2:	d010      	beq.n	8011906 <cos+0x66>
 80118e4:	b9b0      	cbnz	r0, 8011914 <cos+0x74>
 80118e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80118ea:	ed9d 0b00 	vldr	d0, [sp]
 80118ee:	f000 f86f 	bl	80119d0 <__kernel_cos>
 80118f2:	e7eb      	b.n	80118cc <cos+0x2c>
 80118f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80118f8:	ed9d 0b00 	vldr	d0, [sp]
 80118fc:	f000 f8d4 	bl	8011aa8 <__kernel_sin>
 8011900:	eeb1 0b40 	vneg.f64	d0, d0
 8011904:	e7e2      	b.n	80118cc <cos+0x2c>
 8011906:	ed9d 1b02 	vldr	d1, [sp, #8]
 801190a:	ed9d 0b00 	vldr	d0, [sp]
 801190e:	f000 f85f 	bl	80119d0 <__kernel_cos>
 8011912:	e7f5      	b.n	8011900 <cos+0x60>
 8011914:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011918:	ed9d 0b00 	vldr	d0, [sp]
 801191c:	2001      	movs	r0, #1
 801191e:	f000 f8c3 	bl	8011aa8 <__kernel_sin>
 8011922:	e7d3      	b.n	80118cc <cos+0x2c>
 8011924:	f3af 8000 	nop.w
	...
 8011930:	3fe921fb 	.word	0x3fe921fb
 8011934:	7fefffff 	.word	0x7fefffff

08011938 <sin>:
 8011938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801193a:	eeb0 7b40 	vmov.f64	d7, d0
 801193e:	ee17 3a90 	vmov	r3, s15
 8011942:	4a21      	ldr	r2, [pc, #132]	; (80119c8 <sin+0x90>)
 8011944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011948:	4293      	cmp	r3, r2
 801194a:	dc07      	bgt.n	801195c <sin+0x24>
 801194c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80119c0 <sin+0x88>
 8011950:	2000      	movs	r0, #0
 8011952:	b005      	add	sp, #20
 8011954:	f85d eb04 	ldr.w	lr, [sp], #4
 8011958:	f000 b8a6 	b.w	8011aa8 <__kernel_sin>
 801195c:	4a1b      	ldr	r2, [pc, #108]	; (80119cc <sin+0x94>)
 801195e:	4293      	cmp	r3, r2
 8011960:	dd04      	ble.n	801196c <sin+0x34>
 8011962:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011966:	b005      	add	sp, #20
 8011968:	f85d fb04 	ldr.w	pc, [sp], #4
 801196c:	4668      	mov	r0, sp
 801196e:	f000 f9b7 	bl	8011ce0 <__ieee754_rem_pio2>
 8011972:	f000 0003 	and.w	r0, r0, #3
 8011976:	2801      	cmp	r0, #1
 8011978:	d00a      	beq.n	8011990 <sin+0x58>
 801197a:	2802      	cmp	r0, #2
 801197c:	d00f      	beq.n	801199e <sin+0x66>
 801197e:	b9c0      	cbnz	r0, 80119b2 <sin+0x7a>
 8011980:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011984:	ed9d 0b00 	vldr	d0, [sp]
 8011988:	2001      	movs	r0, #1
 801198a:	f000 f88d 	bl	8011aa8 <__kernel_sin>
 801198e:	e7ea      	b.n	8011966 <sin+0x2e>
 8011990:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011994:	ed9d 0b00 	vldr	d0, [sp]
 8011998:	f000 f81a 	bl	80119d0 <__kernel_cos>
 801199c:	e7e3      	b.n	8011966 <sin+0x2e>
 801199e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80119a2:	ed9d 0b00 	vldr	d0, [sp]
 80119a6:	2001      	movs	r0, #1
 80119a8:	f000 f87e 	bl	8011aa8 <__kernel_sin>
 80119ac:	eeb1 0b40 	vneg.f64	d0, d0
 80119b0:	e7d9      	b.n	8011966 <sin+0x2e>
 80119b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80119b6:	ed9d 0b00 	vldr	d0, [sp]
 80119ba:	f000 f809 	bl	80119d0 <__kernel_cos>
 80119be:	e7f5      	b.n	80119ac <sin+0x74>
	...
 80119c8:	3fe921fb 	.word	0x3fe921fb
 80119cc:	7fefffff 	.word	0x7fefffff

080119d0 <__kernel_cos>:
 80119d0:	ee10 1a90 	vmov	r1, s1
 80119d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80119d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80119dc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80119e0:	da05      	bge.n	80119ee <__kernel_cos+0x1e>
 80119e2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80119e6:	ee17 3a90 	vmov	r3, s15
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d03d      	beq.n	8011a6a <__kernel_cos+0x9a>
 80119ee:	ee20 5b00 	vmul.f64	d5, d0, d0
 80119f2:	ee21 1b40 	vnmul.f64	d1, d1, d0
 80119f6:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8011a70 <__kernel_cos+0xa0>
 80119fa:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8011a78 <__kernel_cos+0xa8>
 80119fe:	eea5 4b07 	vfma.f64	d4, d5, d7
 8011a02:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011a80 <__kernel_cos+0xb0>
 8011a06:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011a0a:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8011a88 <__kernel_cos+0xb8>
 8011a0e:	eea7 4b05 	vfma.f64	d4, d7, d5
 8011a12:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011a90 <__kernel_cos+0xc0>
 8011a16:	4b22      	ldr	r3, [pc, #136]	; (8011aa0 <__kernel_cos+0xd0>)
 8011a18:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011a1c:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8011a98 <__kernel_cos+0xc8>
 8011a20:	4299      	cmp	r1, r3
 8011a22:	eea7 4b05 	vfma.f64	d4, d7, d5
 8011a26:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011a2a:	ee24 4b05 	vmul.f64	d4, d4, d5
 8011a2e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011a32:	eea5 1b04 	vfma.f64	d1, d5, d4
 8011a36:	dc04      	bgt.n	8011a42 <__kernel_cos+0x72>
 8011a38:	ee37 7b41 	vsub.f64	d7, d7, d1
 8011a3c:	ee36 0b47 	vsub.f64	d0, d6, d7
 8011a40:	4770      	bx	lr
 8011a42:	4b18      	ldr	r3, [pc, #96]	; (8011aa4 <__kernel_cos+0xd4>)
 8011a44:	4299      	cmp	r1, r3
 8011a46:	dc0d      	bgt.n	8011a64 <__kernel_cos+0x94>
 8011a48:	2200      	movs	r2, #0
 8011a4a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8011a4e:	ec43 2b15 	vmov	d5, r2, r3
 8011a52:	ee36 0b45 	vsub.f64	d0, d6, d5
 8011a56:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011a5a:	ee37 7b41 	vsub.f64	d7, d7, d1
 8011a5e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011a62:	4770      	bx	lr
 8011a64:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011a68:	e7f3      	b.n	8011a52 <__kernel_cos+0x82>
 8011a6a:	eeb0 0b46 	vmov.f64	d0, d6
 8011a6e:	4770      	bx	lr
 8011a70:	be8838d4 	.word	0xbe8838d4
 8011a74:	bda8fae9 	.word	0xbda8fae9
 8011a78:	bdb4b1c4 	.word	0xbdb4b1c4
 8011a7c:	3e21ee9e 	.word	0x3e21ee9e
 8011a80:	809c52ad 	.word	0x809c52ad
 8011a84:	be927e4f 	.word	0xbe927e4f
 8011a88:	19cb1590 	.word	0x19cb1590
 8011a8c:	3efa01a0 	.word	0x3efa01a0
 8011a90:	16c15177 	.word	0x16c15177
 8011a94:	bf56c16c 	.word	0xbf56c16c
 8011a98:	5555554c 	.word	0x5555554c
 8011a9c:	3fa55555 	.word	0x3fa55555
 8011aa0:	3fd33332 	.word	0x3fd33332
 8011aa4:	3fe90000 	.word	0x3fe90000

08011aa8 <__kernel_sin>:
 8011aa8:	ee10 3a90 	vmov	r3, s1
 8011aac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011ab0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011ab4:	da04      	bge.n	8011ac0 <__kernel_sin+0x18>
 8011ab6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011aba:	ee17 3a90 	vmov	r3, s15
 8011abe:	b35b      	cbz	r3, 8011b18 <__kernel_sin+0x70>
 8011ac0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011ac4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011ac8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011b20 <__kernel_sin+0x78>
 8011acc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011b28 <__kernel_sin+0x80>
 8011ad0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011ad4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011b30 <__kernel_sin+0x88>
 8011ad8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011adc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011b38 <__kernel_sin+0x90>
 8011ae0:	eea7 4b06 	vfma.f64	d4, d7, d6
 8011ae4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011b40 <__kernel_sin+0x98>
 8011ae8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011aec:	b930      	cbnz	r0, 8011afc <__kernel_sin+0x54>
 8011aee:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011b48 <__kernel_sin+0xa0>
 8011af2:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011af6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011afa:	4770      	bx	lr
 8011afc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011b00:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011b04:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011b08:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011b0c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011b50 <__kernel_sin+0xa8>
 8011b10:	eea5 1b07 	vfma.f64	d1, d5, d7
 8011b14:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011b18:	4770      	bx	lr
 8011b1a:	bf00      	nop
 8011b1c:	f3af 8000 	nop.w
 8011b20:	5acfd57c 	.word	0x5acfd57c
 8011b24:	3de5d93a 	.word	0x3de5d93a
 8011b28:	8a2b9ceb 	.word	0x8a2b9ceb
 8011b2c:	be5ae5e6 	.word	0xbe5ae5e6
 8011b30:	57b1fe7d 	.word	0x57b1fe7d
 8011b34:	3ec71de3 	.word	0x3ec71de3
 8011b38:	19c161d5 	.word	0x19c161d5
 8011b3c:	bf2a01a0 	.word	0xbf2a01a0
 8011b40:	1110f8a6 	.word	0x1110f8a6
 8011b44:	3f811111 	.word	0x3f811111
 8011b48:	55555549 	.word	0x55555549
 8011b4c:	bfc55555 	.word	0xbfc55555
 8011b50:	55555549 	.word	0x55555549
 8011b54:	3fc55555 	.word	0x3fc55555

08011b58 <__ieee754_atan2>:
 8011b58:	ee11 1a10 	vmov	r1, s2
 8011b5c:	eeb0 7b40 	vmov.f64	d7, d0
 8011b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b62:	ee11 5a90 	vmov	r5, s3
 8011b66:	424b      	negs	r3, r1
 8011b68:	4f59      	ldr	r7, [pc, #356]	; (8011cd0 <__ieee754_atan2+0x178>)
 8011b6a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8011b6e:	430b      	orrs	r3, r1
 8011b70:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011b74:	42bb      	cmp	r3, r7
 8011b76:	d80d      	bhi.n	8011b94 <__ieee754_atan2+0x3c>
 8011b78:	ee10 ca10 	vmov	ip, s0
 8011b7c:	ee17 6a90 	vmov	r6, s15
 8011b80:	f1cc 0000 	rsb	r0, ip, #0
 8011b84:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8011b88:	ea40 000c 	orr.w	r0, r0, ip
 8011b8c:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 8011b90:	42b8      	cmp	r0, r7
 8011b92:	d904      	bls.n	8011b9e <__ieee754_atan2+0x46>
 8011b94:	ee37 7b01 	vadd.f64	d7, d7, d1
 8011b98:	eeb0 0b47 	vmov.f64	d0, d7
 8011b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b9e:	f105 4040 	add.w	r0, r5, #3221225472	; 0xc0000000
 8011ba2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011ba6:	4308      	orrs	r0, r1
 8011ba8:	d103      	bne.n	8011bb2 <__ieee754_atan2+0x5a>
 8011baa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011bae:	f000 b9db 	b.w	8011f68 <atan>
 8011bb2:	17ac      	asrs	r4, r5, #30
 8011bb4:	f004 0402 	and.w	r4, r4, #2
 8011bb8:	ea53 0c0c 	orrs.w	ip, r3, ip
 8011bbc:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 8011bc0:	d107      	bne.n	8011bd2 <__ieee754_atan2+0x7a>
 8011bc2:	2c02      	cmp	r4, #2
 8011bc4:	d05c      	beq.n	8011c80 <__ieee754_atan2+0x128>
 8011bc6:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8011c98 <__ieee754_atan2+0x140>
 8011bca:	2c03      	cmp	r4, #3
 8011bcc:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8011bd0:	e7e2      	b.n	8011b98 <__ieee754_atan2+0x40>
 8011bd2:	4311      	orrs	r1, r2
 8011bd4:	d107      	bne.n	8011be6 <__ieee754_atan2+0x8e>
 8011bd6:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8011ca0 <__ieee754_atan2+0x148>
 8011bda:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8011ca8 <__ieee754_atan2+0x150>
 8011bde:	2e00      	cmp	r6, #0
 8011be0:	fe27 7b06 	vselge.f64	d7, d7, d6
 8011be4:	e7d8      	b.n	8011b98 <__ieee754_atan2+0x40>
 8011be6:	42ba      	cmp	r2, r7
 8011be8:	d10f      	bne.n	8011c0a <__ieee754_atan2+0xb2>
 8011bea:	4293      	cmp	r3, r2
 8011bec:	f104 34ff 	add.w	r4, r4, #4294967295
 8011bf0:	d107      	bne.n	8011c02 <__ieee754_atan2+0xaa>
 8011bf2:	2c02      	cmp	r4, #2
 8011bf4:	d847      	bhi.n	8011c86 <__ieee754_atan2+0x12e>
 8011bf6:	4b37      	ldr	r3, [pc, #220]	; (8011cd4 <__ieee754_atan2+0x17c>)
 8011bf8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011bfc:	ed93 7b00 	vldr	d7, [r3]
 8011c00:	e7ca      	b.n	8011b98 <__ieee754_atan2+0x40>
 8011c02:	2c02      	cmp	r4, #2
 8011c04:	d842      	bhi.n	8011c8c <__ieee754_atan2+0x134>
 8011c06:	4b34      	ldr	r3, [pc, #208]	; (8011cd8 <__ieee754_atan2+0x180>)
 8011c08:	e7f6      	b.n	8011bf8 <__ieee754_atan2+0xa0>
 8011c0a:	42bb      	cmp	r3, r7
 8011c0c:	d0e3      	beq.n	8011bd6 <__ieee754_atan2+0x7e>
 8011c0e:	1a9b      	subs	r3, r3, r2
 8011c10:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011c14:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011c18:	da1a      	bge.n	8011c50 <__ieee754_atan2+0xf8>
 8011c1a:	2d00      	cmp	r5, #0
 8011c1c:	da01      	bge.n	8011c22 <__ieee754_atan2+0xca>
 8011c1e:	323c      	adds	r2, #60	; 0x3c
 8011c20:	db19      	blt.n	8011c56 <__ieee754_atan2+0xfe>
 8011c22:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8011c26:	f000 fa99 	bl	801215c <fabs>
 8011c2a:	f000 f99d 	bl	8011f68 <atan>
 8011c2e:	eeb0 7b40 	vmov.f64	d7, d0
 8011c32:	2c01      	cmp	r4, #1
 8011c34:	d012      	beq.n	8011c5c <__ieee754_atan2+0x104>
 8011c36:	2c02      	cmp	r4, #2
 8011c38:	d019      	beq.n	8011c6e <__ieee754_atan2+0x116>
 8011c3a:	2c00      	cmp	r4, #0
 8011c3c:	d0ac      	beq.n	8011b98 <__ieee754_atan2+0x40>
 8011c3e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8011cb0 <__ieee754_atan2+0x158>
 8011c42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c46:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8011cb8 <__ieee754_atan2+0x160>
 8011c4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c4e:	e7a3      	b.n	8011b98 <__ieee754_atan2+0x40>
 8011c50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011ca0 <__ieee754_atan2+0x148>
 8011c54:	e7ed      	b.n	8011c32 <__ieee754_atan2+0xda>
 8011c56:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8011cc0 <__ieee754_atan2+0x168>
 8011c5a:	e7ea      	b.n	8011c32 <__ieee754_atan2+0xda>
 8011c5c:	ee17 1a90 	vmov	r1, s15
 8011c60:	ec53 2b17 	vmov	r2, r3, d7
 8011c64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c68:	ec43 2b17 	vmov	d7, r2, r3
 8011c6c:	e794      	b.n	8011b98 <__ieee754_atan2+0x40>
 8011c6e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8011cb0 <__ieee754_atan2+0x158>
 8011c72:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c76:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8011cb8 <__ieee754_atan2+0x160>
 8011c7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011c7e:	e78b      	b.n	8011b98 <__ieee754_atan2+0x40>
 8011c80:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8011cb8 <__ieee754_atan2+0x160>
 8011c84:	e788      	b.n	8011b98 <__ieee754_atan2+0x40>
 8011c86:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011cc8 <__ieee754_atan2+0x170>
 8011c8a:	e785      	b.n	8011b98 <__ieee754_atan2+0x40>
 8011c8c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8011cc0 <__ieee754_atan2+0x168>
 8011c90:	e782      	b.n	8011b98 <__ieee754_atan2+0x40>
 8011c92:	bf00      	nop
 8011c94:	f3af 8000 	nop.w
 8011c98:	54442d18 	.word	0x54442d18
 8011c9c:	c00921fb 	.word	0xc00921fb
 8011ca0:	54442d18 	.word	0x54442d18
 8011ca4:	3ff921fb 	.word	0x3ff921fb
 8011ca8:	54442d18 	.word	0x54442d18
 8011cac:	bff921fb 	.word	0xbff921fb
 8011cb0:	33145c07 	.word	0x33145c07
 8011cb4:	3ca1a626 	.word	0x3ca1a626
 8011cb8:	54442d18 	.word	0x54442d18
 8011cbc:	400921fb 	.word	0x400921fb
	...
 8011cc8:	54442d18 	.word	0x54442d18
 8011ccc:	3fe921fb 	.word	0x3fe921fb
 8011cd0:	7ff00000 	.word	0x7ff00000
 8011cd4:	08013528 	.word	0x08013528
 8011cd8:	08013540 	.word	0x08013540
 8011cdc:	00000000 	.word	0x00000000

08011ce0 <__ieee754_rem_pio2>:
 8011ce0:	b570      	push	{r4, r5, r6, lr}
 8011ce2:	eeb0 7b40 	vmov.f64	d7, d0
 8011ce6:	ee17 5a90 	vmov	r5, s15
 8011cea:	4b99      	ldr	r3, [pc, #612]	; (8011f50 <__ieee754_rem_pio2+0x270>)
 8011cec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011cf0:	429e      	cmp	r6, r3
 8011cf2:	b088      	sub	sp, #32
 8011cf4:	4604      	mov	r4, r0
 8011cf6:	dc07      	bgt.n	8011d08 <__ieee754_rem_pio2+0x28>
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	ed84 0b00 	vstr	d0, [r4]
 8011d00:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011d04:	2000      	movs	r0, #0
 8011d06:	e01b      	b.n	8011d40 <__ieee754_rem_pio2+0x60>
 8011d08:	4b92      	ldr	r3, [pc, #584]	; (8011f54 <__ieee754_rem_pio2+0x274>)
 8011d0a:	429e      	cmp	r6, r3
 8011d0c:	dc3b      	bgt.n	8011d86 <__ieee754_rem_pio2+0xa6>
 8011d0e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8011d12:	2d00      	cmp	r5, #0
 8011d14:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8011f10 <__ieee754_rem_pio2+0x230>
 8011d18:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8011d1c:	dd19      	ble.n	8011d52 <__ieee754_rem_pio2+0x72>
 8011d1e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011d22:	429e      	cmp	r6, r3
 8011d24:	d00e      	beq.n	8011d44 <__ieee754_rem_pio2+0x64>
 8011d26:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011f18 <__ieee754_rem_pio2+0x238>
 8011d2a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8011d2e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011d32:	ed84 5b00 	vstr	d5, [r4]
 8011d36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011d3a:	ed84 7b02 	vstr	d7, [r4, #8]
 8011d3e:	2001      	movs	r0, #1
 8011d40:	b008      	add	sp, #32
 8011d42:	bd70      	pop	{r4, r5, r6, pc}
 8011d44:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011f20 <__ieee754_rem_pio2+0x240>
 8011d48:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011d4c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011f28 <__ieee754_rem_pio2+0x248>
 8011d50:	e7eb      	b.n	8011d2a <__ieee754_rem_pio2+0x4a>
 8011d52:	429e      	cmp	r6, r3
 8011d54:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011d58:	d00e      	beq.n	8011d78 <__ieee754_rem_pio2+0x98>
 8011d5a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8011f18 <__ieee754_rem_pio2+0x238>
 8011d5e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011d62:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011d66:	ed84 5b00 	vstr	d5, [r4]
 8011d6a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8011d72:	ed84 7b02 	vstr	d7, [r4, #8]
 8011d76:	e7e3      	b.n	8011d40 <__ieee754_rem_pio2+0x60>
 8011d78:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011f20 <__ieee754_rem_pio2+0x240>
 8011d7c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011d80:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011f28 <__ieee754_rem_pio2+0x248>
 8011d84:	e7eb      	b.n	8011d5e <__ieee754_rem_pio2+0x7e>
 8011d86:	4b74      	ldr	r3, [pc, #464]	; (8011f58 <__ieee754_rem_pio2+0x278>)
 8011d88:	429e      	cmp	r6, r3
 8011d8a:	dc70      	bgt.n	8011e6e <__ieee754_rem_pio2+0x18e>
 8011d8c:	f000 f9e6 	bl	801215c <fabs>
 8011d90:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011d94:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8011f30 <__ieee754_rem_pio2+0x250>
 8011d98:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011d9c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011da0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011da4:	ee17 0a90 	vmov	r0, s15
 8011da8:	eeb1 4b45 	vneg.f64	d4, d5
 8011dac:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011f10 <__ieee754_rem_pio2+0x230>
 8011db0:	eea5 0b47 	vfms.f64	d0, d5, d7
 8011db4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011f18 <__ieee754_rem_pio2+0x238>
 8011db8:	281f      	cmp	r0, #31
 8011dba:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011dbe:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011dc2:	dc08      	bgt.n	8011dd6 <__ieee754_rem_pio2+0xf6>
 8011dc4:	4b65      	ldr	r3, [pc, #404]	; (8011f5c <__ieee754_rem_pio2+0x27c>)
 8011dc6:	1e42      	subs	r2, r0, #1
 8011dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dcc:	42b3      	cmp	r3, r6
 8011dce:	d002      	beq.n	8011dd6 <__ieee754_rem_pio2+0xf6>
 8011dd0:	ed84 6b00 	vstr	d6, [r4]
 8011dd4:	e024      	b.n	8011e20 <__ieee754_rem_pio2+0x140>
 8011dd6:	ee16 3a90 	vmov	r3, s13
 8011dda:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011dde:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8011de2:	2b10      	cmp	r3, #16
 8011de4:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011de8:	ddf2      	ble.n	8011dd0 <__ieee754_rem_pio2+0xf0>
 8011dea:	eeb0 6b40 	vmov.f64	d6, d0
 8011dee:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8011f20 <__ieee754_rem_pio2+0x240>
 8011df2:	eea4 6b03 	vfma.f64	d6, d4, d3
 8011df6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011dfa:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011dfe:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8011f28 <__ieee754_rem_pio2+0x248>
 8011e02:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8011e06:	ee36 3b47 	vsub.f64	d3, d6, d7
 8011e0a:	ee13 3a90 	vmov	r3, s7
 8011e0e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011e12:	1ad3      	subs	r3, r2, r3
 8011e14:	2b31      	cmp	r3, #49	; 0x31
 8011e16:	dc17      	bgt.n	8011e48 <__ieee754_rem_pio2+0x168>
 8011e18:	eeb0 0b46 	vmov.f64	d0, d6
 8011e1c:	ed84 3b00 	vstr	d3, [r4]
 8011e20:	ed94 6b00 	vldr	d6, [r4]
 8011e24:	2d00      	cmp	r5, #0
 8011e26:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011e2a:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011e2e:	ed84 0b02 	vstr	d0, [r4, #8]
 8011e32:	da85      	bge.n	8011d40 <__ieee754_rem_pio2+0x60>
 8011e34:	eeb1 6b46 	vneg.f64	d6, d6
 8011e38:	eeb1 0b40 	vneg.f64	d0, d0
 8011e3c:	ed84 6b00 	vstr	d6, [r4]
 8011e40:	ed84 0b02 	vstr	d0, [r4, #8]
 8011e44:	4240      	negs	r0, r0
 8011e46:	e77b      	b.n	8011d40 <__ieee754_rem_pio2+0x60>
 8011e48:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8011f38 <__ieee754_rem_pio2+0x258>
 8011e4c:	eeb0 0b46 	vmov.f64	d0, d6
 8011e50:	eea4 0b07 	vfma.f64	d0, d4, d7
 8011e54:	ee36 6b40 	vsub.f64	d6, d6, d0
 8011e58:	eea4 6b07 	vfma.f64	d6, d4, d7
 8011e5c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8011f40 <__ieee754_rem_pio2+0x260>
 8011e60:	eeb0 7b46 	vmov.f64	d7, d6
 8011e64:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8011e68:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011e6c:	e7b0      	b.n	8011dd0 <__ieee754_rem_pio2+0xf0>
 8011e6e:	4b3c      	ldr	r3, [pc, #240]	; (8011f60 <__ieee754_rem_pio2+0x280>)
 8011e70:	429e      	cmp	r6, r3
 8011e72:	dd06      	ble.n	8011e82 <__ieee754_rem_pio2+0x1a2>
 8011e74:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011e78:	ed80 7b02 	vstr	d7, [r0, #8]
 8011e7c:	ed80 7b00 	vstr	d7, [r0]
 8011e80:	e740      	b.n	8011d04 <__ieee754_rem_pio2+0x24>
 8011e82:	1532      	asrs	r2, r6, #20
 8011e84:	ee10 0a10 	vmov	r0, s0
 8011e88:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8011e8c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011e90:	ec41 0b17 	vmov	d7, r0, r1
 8011e94:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011e98:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8011f48 <__ieee754_rem_pio2+0x268>
 8011e9c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011ea0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011ea4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011ea8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011eac:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011eb0:	a808      	add	r0, sp, #32
 8011eb2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011eb6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011eba:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011ebe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011ec2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011ec6:	2103      	movs	r1, #3
 8011ec8:	ed30 7b02 	vldmdb	r0!, {d7}
 8011ecc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ed4:	460b      	mov	r3, r1
 8011ed6:	f101 31ff 	add.w	r1, r1, #4294967295
 8011eda:	d0f5      	beq.n	8011ec8 <__ieee754_rem_pio2+0x1e8>
 8011edc:	4921      	ldr	r1, [pc, #132]	; (8011f64 <__ieee754_rem_pio2+0x284>)
 8011ede:	9101      	str	r1, [sp, #4]
 8011ee0:	2102      	movs	r1, #2
 8011ee2:	9100      	str	r1, [sp, #0]
 8011ee4:	a802      	add	r0, sp, #8
 8011ee6:	4621      	mov	r1, r4
 8011ee8:	f000 f942 	bl	8012170 <__kernel_rem_pio2>
 8011eec:	2d00      	cmp	r5, #0
 8011eee:	f6bf af27 	bge.w	8011d40 <__ieee754_rem_pio2+0x60>
 8011ef2:	ed94 7b00 	vldr	d7, [r4]
 8011ef6:	eeb1 7b47 	vneg.f64	d7, d7
 8011efa:	ed84 7b00 	vstr	d7, [r4]
 8011efe:	ed94 7b02 	vldr	d7, [r4, #8]
 8011f02:	eeb1 7b47 	vneg.f64	d7, d7
 8011f06:	ed84 7b02 	vstr	d7, [r4, #8]
 8011f0a:	e79b      	b.n	8011e44 <__ieee754_rem_pio2+0x164>
 8011f0c:	f3af 8000 	nop.w
 8011f10:	54400000 	.word	0x54400000
 8011f14:	3ff921fb 	.word	0x3ff921fb
 8011f18:	1a626331 	.word	0x1a626331
 8011f1c:	3dd0b461 	.word	0x3dd0b461
 8011f20:	1a600000 	.word	0x1a600000
 8011f24:	3dd0b461 	.word	0x3dd0b461
 8011f28:	2e037073 	.word	0x2e037073
 8011f2c:	3ba3198a 	.word	0x3ba3198a
 8011f30:	6dc9c883 	.word	0x6dc9c883
 8011f34:	3fe45f30 	.word	0x3fe45f30
 8011f38:	2e000000 	.word	0x2e000000
 8011f3c:	3ba3198a 	.word	0x3ba3198a
 8011f40:	252049c1 	.word	0x252049c1
 8011f44:	397b839a 	.word	0x397b839a
 8011f48:	00000000 	.word	0x00000000
 8011f4c:	41700000 	.word	0x41700000
 8011f50:	3fe921fb 	.word	0x3fe921fb
 8011f54:	4002d97b 	.word	0x4002d97b
 8011f58:	413921fb 	.word	0x413921fb
 8011f5c:	08013558 	.word	0x08013558
 8011f60:	7fefffff 	.word	0x7fefffff
 8011f64:	080135d8 	.word	0x080135d8

08011f68 <atan>:
 8011f68:	b538      	push	{r3, r4, r5, lr}
 8011f6a:	eeb0 7b40 	vmov.f64	d7, d0
 8011f6e:	ee17 5a90 	vmov	r5, s15
 8011f72:	4b73      	ldr	r3, [pc, #460]	; (8012140 <atan+0x1d8>)
 8011f74:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011f78:	429c      	cmp	r4, r3
 8011f7a:	dd13      	ble.n	8011fa4 <atan+0x3c>
 8011f7c:	4b71      	ldr	r3, [pc, #452]	; (8012144 <atan+0x1dc>)
 8011f7e:	429c      	cmp	r4, r3
 8011f80:	dc03      	bgt.n	8011f8a <atan+0x22>
 8011f82:	d107      	bne.n	8011f94 <atan+0x2c>
 8011f84:	ee10 3a10 	vmov	r3, s0
 8011f88:	b123      	cbz	r3, 8011f94 <atan+0x2c>
 8011f8a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011f8e:	eeb0 0b47 	vmov.f64	d0, d7
 8011f92:	bd38      	pop	{r3, r4, r5, pc}
 8011f94:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 80120d0 <atan+0x168>
 8011f98:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 80120d8 <atan+0x170>
 8011f9c:	2d00      	cmp	r5, #0
 8011f9e:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8011fa2:	e7f4      	b.n	8011f8e <atan+0x26>
 8011fa4:	4b68      	ldr	r3, [pc, #416]	; (8012148 <atan+0x1e0>)
 8011fa6:	429c      	cmp	r4, r3
 8011fa8:	dc11      	bgt.n	8011fce <atan+0x66>
 8011faa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011fae:	429c      	cmp	r4, r3
 8011fb0:	dc0a      	bgt.n	8011fc8 <atan+0x60>
 8011fb2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8011fb6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80120e0 <atan+0x178>
 8011fba:	ee30 6b06 	vadd.f64	d6, d0, d6
 8011fbe:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8011fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fc6:	dce2      	bgt.n	8011f8e <atan+0x26>
 8011fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8011fcc:	e013      	b.n	8011ff6 <atan+0x8e>
 8011fce:	f000 f8c5 	bl	801215c <fabs>
 8011fd2:	4b5e      	ldr	r3, [pc, #376]	; (801214c <atan+0x1e4>)
 8011fd4:	429c      	cmp	r4, r3
 8011fd6:	dc4f      	bgt.n	8012078 <atan+0x110>
 8011fd8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011fdc:	429c      	cmp	r4, r3
 8011fde:	dc41      	bgt.n	8012064 <atan+0xfc>
 8011fe0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011fe4:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8011fe8:	2300      	movs	r3, #0
 8011fea:	eea0 5b07 	vfma.f64	d5, d0, d7
 8011fee:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011ff2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 8011ff6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80120e8 <atan+0x180>
 8011ffa:	ee27 4b07 	vmul.f64	d4, d7, d7
 8011ffe:	ee24 5b04 	vmul.f64	d5, d4, d4
 8012002:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80120f0 <atan+0x188>
 8012006:	eea5 3b06 	vfma.f64	d3, d5, d6
 801200a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80120f8 <atan+0x190>
 801200e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012012:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8012100 <atan+0x198>
 8012016:	eea6 3b05 	vfma.f64	d3, d6, d5
 801201a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8012108 <atan+0x1a0>
 801201e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012022:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8012110 <atan+0x1a8>
 8012026:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8012118 <atan+0x1b0>
 801202a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801202e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012120 <atan+0x1b8>
 8012032:	eea5 2b06 	vfma.f64	d2, d5, d6
 8012036:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012128 <atan+0x1c0>
 801203a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801203e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8012130 <atan+0x1c8>
 8012042:	eea6 2b05 	vfma.f64	d2, d6, d5
 8012046:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012138 <atan+0x1d0>
 801204a:	1c5a      	adds	r2, r3, #1
 801204c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8012050:	ee26 6b05 	vmul.f64	d6, d6, d5
 8012054:	eea3 6b04 	vfma.f64	d6, d3, d4
 8012058:	ee27 6b06 	vmul.f64	d6, d7, d6
 801205c:	d121      	bne.n	80120a2 <atan+0x13a>
 801205e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012062:	e794      	b.n	8011f8e <atan+0x26>
 8012064:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012068:	2301      	movs	r3, #1
 801206a:	ee30 5b47 	vsub.f64	d5, d0, d7
 801206e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012072:	ee85 7b00 	vdiv.f64	d7, d5, d0
 8012076:	e7be      	b.n	8011ff6 <atan+0x8e>
 8012078:	4b35      	ldr	r3, [pc, #212]	; (8012150 <atan+0x1e8>)
 801207a:	429c      	cmp	r4, r3
 801207c:	da0b      	bge.n	8012096 <atan+0x12e>
 801207e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012082:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012086:	ee30 5b47 	vsub.f64	d5, d0, d7
 801208a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801208e:	2302      	movs	r3, #2
 8012090:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8012094:	e7af      	b.n	8011ff6 <atan+0x8e>
 8012096:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801209a:	2303      	movs	r3, #3
 801209c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80120a0:	e7a9      	b.n	8011ff6 <atan+0x8e>
 80120a2:	4a2c      	ldr	r2, [pc, #176]	; (8012154 <atan+0x1ec>)
 80120a4:	492c      	ldr	r1, [pc, #176]	; (8012158 <atan+0x1f0>)
 80120a6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80120aa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80120ae:	ed93 5b00 	vldr	d5, [r3]
 80120b2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80120b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80120ba:	ed92 7b00 	vldr	d7, [r2]
 80120be:	2d00      	cmp	r5, #0
 80120c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80120c4:	bfb8      	it	lt
 80120c6:	eeb1 7b47 	vneglt.f64	d7, d7
 80120ca:	e760      	b.n	8011f8e <atan+0x26>
 80120cc:	f3af 8000 	nop.w
 80120d0:	54442d18 	.word	0x54442d18
 80120d4:	3ff921fb 	.word	0x3ff921fb
 80120d8:	54442d18 	.word	0x54442d18
 80120dc:	bff921fb 	.word	0xbff921fb
 80120e0:	8800759c 	.word	0x8800759c
 80120e4:	7e37e43c 	.word	0x7e37e43c
 80120e8:	e322da11 	.word	0xe322da11
 80120ec:	3f90ad3a 	.word	0x3f90ad3a
 80120f0:	24760deb 	.word	0x24760deb
 80120f4:	3fa97b4b 	.word	0x3fa97b4b
 80120f8:	a0d03d51 	.word	0xa0d03d51
 80120fc:	3fb10d66 	.word	0x3fb10d66
 8012100:	c54c206e 	.word	0xc54c206e
 8012104:	3fb745cd 	.word	0x3fb745cd
 8012108:	920083ff 	.word	0x920083ff
 801210c:	3fc24924 	.word	0x3fc24924
 8012110:	5555550d 	.word	0x5555550d
 8012114:	3fd55555 	.word	0x3fd55555
 8012118:	52defd9a 	.word	0x52defd9a
 801211c:	bfadde2d 	.word	0xbfadde2d
 8012120:	2c6a6c2f 	.word	0x2c6a6c2f
 8012124:	bfa2b444 	.word	0xbfa2b444
 8012128:	af749a6d 	.word	0xaf749a6d
 801212c:	bfb3b0f2 	.word	0xbfb3b0f2
 8012130:	fe231671 	.word	0xfe231671
 8012134:	bfbc71c6 	.word	0xbfbc71c6
 8012138:	9998ebc4 	.word	0x9998ebc4
 801213c:	bfc99999 	.word	0xbfc99999
 8012140:	440fffff 	.word	0x440fffff
 8012144:	7ff00000 	.word	0x7ff00000
 8012148:	3fdbffff 	.word	0x3fdbffff
 801214c:	3ff2ffff 	.word	0x3ff2ffff
 8012150:	40038000 	.word	0x40038000
 8012154:	080136e0 	.word	0x080136e0
 8012158:	08013700 	.word	0x08013700

0801215c <fabs>:
 801215c:	ec51 0b10 	vmov	r0, r1, d0
 8012160:	ee10 2a10 	vmov	r2, s0
 8012164:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012168:	ec43 2b10 	vmov	d0, r2, r3
 801216c:	4770      	bx	lr
	...

08012170 <__kernel_rem_pio2>:
 8012170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012174:	ed2d 8b06 	vpush	{d8-d10}
 8012178:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801217c:	460f      	mov	r7, r1
 801217e:	9002      	str	r0, [sp, #8]
 8012180:	49c3      	ldr	r1, [pc, #780]	; (8012490 <__kernel_rem_pio2+0x320>)
 8012182:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8012184:	9301      	str	r3, [sp, #4]
 8012186:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801218a:	9901      	ldr	r1, [sp, #4]
 801218c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801218e:	f112 0f14 	cmn.w	r2, #20
 8012192:	bfa8      	it	ge
 8012194:	1ed0      	subge	r0, r2, #3
 8012196:	f101 3aff 	add.w	sl, r1, #4294967295
 801219a:	bfaa      	itet	ge
 801219c:	2418      	movge	r4, #24
 801219e:	2000      	movlt	r0, #0
 80121a0:	fb90 f0f4 	sdivge	r0, r0, r4
 80121a4:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8012478 <__kernel_rem_pio2+0x308>
 80121a8:	f06f 0417 	mvn.w	r4, #23
 80121ac:	fb00 4404 	mla	r4, r0, r4, r4
 80121b0:	eba0 060a 	sub.w	r6, r0, sl
 80121b4:	4414      	add	r4, r2
 80121b6:	eb09 0c0a 	add.w	ip, r9, sl
 80121ba:	ad1a      	add	r5, sp, #104	; 0x68
 80121bc:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 80121c0:	2200      	movs	r2, #0
 80121c2:	4562      	cmp	r2, ip
 80121c4:	dd10      	ble.n	80121e8 <__kernel_rem_pio2+0x78>
 80121c6:	9a01      	ldr	r2, [sp, #4]
 80121c8:	a91a      	add	r1, sp, #104	; 0x68
 80121ca:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80121ce:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 80121d2:	f04f 0c00 	mov.w	ip, #0
 80121d6:	45cc      	cmp	ip, r9
 80121d8:	dc26      	bgt.n	8012228 <__kernel_rem_pio2+0xb8>
 80121da:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8012478 <__kernel_rem_pio2+0x308>
 80121de:	f8dd e008 	ldr.w	lr, [sp, #8]
 80121e2:	4616      	mov	r6, r2
 80121e4:	2500      	movs	r5, #0
 80121e6:	e015      	b.n	8012214 <__kernel_rem_pio2+0xa4>
 80121e8:	42d6      	cmn	r6, r2
 80121ea:	d409      	bmi.n	8012200 <__kernel_rem_pio2+0x90>
 80121ec:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 80121f0:	ee07 1a90 	vmov	s15, r1
 80121f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80121f8:	eca5 7b02 	vstmia	r5!, {d7}
 80121fc:	3201      	adds	r2, #1
 80121fe:	e7e0      	b.n	80121c2 <__kernel_rem_pio2+0x52>
 8012200:	eeb0 7b46 	vmov.f64	d7, d6
 8012204:	e7f8      	b.n	80121f8 <__kernel_rem_pio2+0x88>
 8012206:	ecbe 5b02 	vldmia	lr!, {d5}
 801220a:	ed96 6b00 	vldr	d6, [r6]
 801220e:	3501      	adds	r5, #1
 8012210:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012214:	4555      	cmp	r5, sl
 8012216:	f1a6 0608 	sub.w	r6, r6, #8
 801221a:	ddf4      	ble.n	8012206 <__kernel_rem_pio2+0x96>
 801221c:	eca8 7b02 	vstmia	r8!, {d7}
 8012220:	f10c 0c01 	add.w	ip, ip, #1
 8012224:	3208      	adds	r2, #8
 8012226:	e7d6      	b.n	80121d6 <__kernel_rem_pio2+0x66>
 8012228:	aa06      	add	r2, sp, #24
 801222a:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8012480 <__kernel_rem_pio2+0x310>
 801222e:	ed9f ab96 	vldr	d10, [pc, #600]	; 8012488 <__kernel_rem_pio2+0x318>
 8012232:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8012236:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801223a:	9204      	str	r2, [sp, #16]
 801223c:	9303      	str	r3, [sp, #12]
 801223e:	464d      	mov	r5, r9
 8012240:	00eb      	lsls	r3, r5, #3
 8012242:	9305      	str	r3, [sp, #20]
 8012244:	ab92      	add	r3, sp, #584	; 0x248
 8012246:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801224a:	f10d 0b18 	add.w	fp, sp, #24
 801224e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8012250:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8012254:	465e      	mov	r6, fp
 8012256:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801225a:	4628      	mov	r0, r5
 801225c:	2800      	cmp	r0, #0
 801225e:	f1a2 0208 	sub.w	r2, r2, #8
 8012262:	dc48      	bgt.n	80122f6 <__kernel_rem_pio2+0x186>
 8012264:	4620      	mov	r0, r4
 8012266:	f000 fa17 	bl	8012698 <scalbn>
 801226a:	eeb0 8b40 	vmov.f64	d8, d0
 801226e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8012272:	ee28 0b00 	vmul.f64	d0, d8, d0
 8012276:	f000 fa8f 	bl	8012798 <floor>
 801227a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801227e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8012282:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8012286:	2c00      	cmp	r4, #0
 8012288:	ee17 8a90 	vmov	r8, s15
 801228c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012290:	ee38 8b47 	vsub.f64	d8, d8, d7
 8012294:	dd41      	ble.n	801231a <__kernel_rem_pio2+0x1aa>
 8012296:	1e68      	subs	r0, r5, #1
 8012298:	ab06      	add	r3, sp, #24
 801229a:	f1c4 0c18 	rsb	ip, r4, #24
 801229e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80122a2:	fa46 f20c 	asr.w	r2, r6, ip
 80122a6:	4490      	add	r8, r2
 80122a8:	fa02 f20c 	lsl.w	r2, r2, ip
 80122ac:	1ab6      	subs	r6, r6, r2
 80122ae:	f1c4 0217 	rsb	r2, r4, #23
 80122b2:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80122b6:	4116      	asrs	r6, r2
 80122b8:	2e00      	cmp	r6, #0
 80122ba:	dd3d      	ble.n	8012338 <__kernel_rem_pio2+0x1c8>
 80122bc:	f04f 0c00 	mov.w	ip, #0
 80122c0:	f108 0801 	add.w	r8, r8, #1
 80122c4:	4660      	mov	r0, ip
 80122c6:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80122ca:	4565      	cmp	r5, ip
 80122cc:	dc6a      	bgt.n	80123a4 <__kernel_rem_pio2+0x234>
 80122ce:	2c00      	cmp	r4, #0
 80122d0:	dd04      	ble.n	80122dc <__kernel_rem_pio2+0x16c>
 80122d2:	2c01      	cmp	r4, #1
 80122d4:	d07b      	beq.n	80123ce <__kernel_rem_pio2+0x25e>
 80122d6:	2c02      	cmp	r4, #2
 80122d8:	f000 8083 	beq.w	80123e2 <__kernel_rem_pio2+0x272>
 80122dc:	2e02      	cmp	r6, #2
 80122de:	d12b      	bne.n	8012338 <__kernel_rem_pio2+0x1c8>
 80122e0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80122e4:	ee30 8b48 	vsub.f64	d8, d0, d8
 80122e8:	b330      	cbz	r0, 8012338 <__kernel_rem_pio2+0x1c8>
 80122ea:	4620      	mov	r0, r4
 80122ec:	f000 f9d4 	bl	8012698 <scalbn>
 80122f0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80122f4:	e020      	b.n	8012338 <__kernel_rem_pio2+0x1c8>
 80122f6:	ee20 7b09 	vmul.f64	d7, d0, d9
 80122fa:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80122fe:	3801      	subs	r0, #1
 8012300:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8012304:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8012308:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801230c:	eca6 0a01 	vstmia	r6!, {s0}
 8012310:	ed92 0b00 	vldr	d0, [r2]
 8012314:	ee37 0b00 	vadd.f64	d0, d7, d0
 8012318:	e7a0      	b.n	801225c <__kernel_rem_pio2+0xec>
 801231a:	d105      	bne.n	8012328 <__kernel_rem_pio2+0x1b8>
 801231c:	1e6a      	subs	r2, r5, #1
 801231e:	ab06      	add	r3, sp, #24
 8012320:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8012324:	15f6      	asrs	r6, r6, #23
 8012326:	e7c7      	b.n	80122b8 <__kernel_rem_pio2+0x148>
 8012328:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801232c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012334:	da34      	bge.n	80123a0 <__kernel_rem_pio2+0x230>
 8012336:	2600      	movs	r6, #0
 8012338:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801233c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012340:	f040 80aa 	bne.w	8012498 <__kernel_rem_pio2+0x328>
 8012344:	f105 3bff 	add.w	fp, r5, #4294967295
 8012348:	4658      	mov	r0, fp
 801234a:	2200      	movs	r2, #0
 801234c:	4548      	cmp	r0, r9
 801234e:	da50      	bge.n	80123f2 <__kernel_rem_pio2+0x282>
 8012350:	2a00      	cmp	r2, #0
 8012352:	d06b      	beq.n	801242c <__kernel_rem_pio2+0x2bc>
 8012354:	ab06      	add	r3, sp, #24
 8012356:	3c18      	subs	r4, #24
 8012358:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801235c:	2b00      	cmp	r3, #0
 801235e:	f000 8087 	beq.w	8012470 <__kernel_rem_pio2+0x300>
 8012362:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8012366:	4620      	mov	r0, r4
 8012368:	f000 f996 	bl	8012698 <scalbn>
 801236c:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8012480 <__kernel_rem_pio2+0x310>
 8012370:	f10b 0201 	add.w	r2, fp, #1
 8012374:	a96a      	add	r1, sp, #424	; 0x1a8
 8012376:	00d3      	lsls	r3, r2, #3
 8012378:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801237c:	465a      	mov	r2, fp
 801237e:	2a00      	cmp	r2, #0
 8012380:	f280 80b8 	bge.w	80124f4 <__kernel_rem_pio2+0x384>
 8012384:	465a      	mov	r2, fp
 8012386:	2a00      	cmp	r2, #0
 8012388:	f2c0 80d6 	blt.w	8012538 <__kernel_rem_pio2+0x3c8>
 801238c:	a96a      	add	r1, sp, #424	; 0x1a8
 801238e:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8012392:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8012478 <__kernel_rem_pio2+0x308>
 8012396:	4d3f      	ldr	r5, [pc, #252]	; (8012494 <__kernel_rem_pio2+0x324>)
 8012398:	2000      	movs	r0, #0
 801239a:	ebab 0102 	sub.w	r1, fp, r2
 801239e:	e0c0      	b.n	8012522 <__kernel_rem_pio2+0x3b2>
 80123a0:	2602      	movs	r6, #2
 80123a2:	e78b      	b.n	80122bc <__kernel_rem_pio2+0x14c>
 80123a4:	f8db 2000 	ldr.w	r2, [fp]
 80123a8:	b958      	cbnz	r0, 80123c2 <__kernel_rem_pio2+0x252>
 80123aa:	b122      	cbz	r2, 80123b6 <__kernel_rem_pio2+0x246>
 80123ac:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80123b0:	f8cb 2000 	str.w	r2, [fp]
 80123b4:	2201      	movs	r2, #1
 80123b6:	f10c 0c01 	add.w	ip, ip, #1
 80123ba:	f10b 0b04 	add.w	fp, fp, #4
 80123be:	4610      	mov	r0, r2
 80123c0:	e783      	b.n	80122ca <__kernel_rem_pio2+0x15a>
 80123c2:	ebae 0202 	sub.w	r2, lr, r2
 80123c6:	f8cb 2000 	str.w	r2, [fp]
 80123ca:	4602      	mov	r2, r0
 80123cc:	e7f3      	b.n	80123b6 <__kernel_rem_pio2+0x246>
 80123ce:	f105 3cff 	add.w	ip, r5, #4294967295
 80123d2:	ab06      	add	r3, sp, #24
 80123d4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80123d8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80123dc:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 80123e0:	e77c      	b.n	80122dc <__kernel_rem_pio2+0x16c>
 80123e2:	f105 3cff 	add.w	ip, r5, #4294967295
 80123e6:	ab06      	add	r3, sp, #24
 80123e8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80123ec:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80123f0:	e7f4      	b.n	80123dc <__kernel_rem_pio2+0x26c>
 80123f2:	ab06      	add	r3, sp, #24
 80123f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80123f8:	3801      	subs	r0, #1
 80123fa:	431a      	orrs	r2, r3
 80123fc:	e7a6      	b.n	801234c <__kernel_rem_pio2+0x1dc>
 80123fe:	3201      	adds	r2, #1
 8012400:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8012404:	2e00      	cmp	r6, #0
 8012406:	d0fa      	beq.n	80123fe <__kernel_rem_pio2+0x28e>
 8012408:	9b05      	ldr	r3, [sp, #20]
 801240a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801240e:	eb0d 0003 	add.w	r0, sp, r3
 8012412:	9b01      	ldr	r3, [sp, #4]
 8012414:	18ee      	adds	r6, r5, r3
 8012416:	ab1a      	add	r3, sp, #104	; 0x68
 8012418:	f105 0c01 	add.w	ip, r5, #1
 801241c:	3898      	subs	r0, #152	; 0x98
 801241e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8012422:	442a      	add	r2, r5
 8012424:	4562      	cmp	r2, ip
 8012426:	da04      	bge.n	8012432 <__kernel_rem_pio2+0x2c2>
 8012428:	4615      	mov	r5, r2
 801242a:	e709      	b.n	8012240 <__kernel_rem_pio2+0xd0>
 801242c:	9804      	ldr	r0, [sp, #16]
 801242e:	2201      	movs	r2, #1
 8012430:	e7e6      	b.n	8012400 <__kernel_rem_pio2+0x290>
 8012432:	9b03      	ldr	r3, [sp, #12]
 8012434:	f8dd e008 	ldr.w	lr, [sp, #8]
 8012438:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801243c:	9305      	str	r3, [sp, #20]
 801243e:	ee07 3a90 	vmov	s15, r3
 8012442:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012446:	2500      	movs	r5, #0
 8012448:	eca6 7b02 	vstmia	r6!, {d7}
 801244c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8012478 <__kernel_rem_pio2+0x308>
 8012450:	46b0      	mov	r8, r6
 8012452:	4555      	cmp	r5, sl
 8012454:	dd04      	ble.n	8012460 <__kernel_rem_pio2+0x2f0>
 8012456:	eca0 7b02 	vstmia	r0!, {d7}
 801245a:	f10c 0c01 	add.w	ip, ip, #1
 801245e:	e7e1      	b.n	8012424 <__kernel_rem_pio2+0x2b4>
 8012460:	ecbe 5b02 	vldmia	lr!, {d5}
 8012464:	ed38 6b02 	vldmdb	r8!, {d6}
 8012468:	3501      	adds	r5, #1
 801246a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801246e:	e7f0      	b.n	8012452 <__kernel_rem_pio2+0x2e2>
 8012470:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012474:	e76e      	b.n	8012354 <__kernel_rem_pio2+0x1e4>
 8012476:	bf00      	nop
	...
 8012484:	3e700000 	.word	0x3e700000
 8012488:	00000000 	.word	0x00000000
 801248c:	41700000 	.word	0x41700000
 8012490:	08013760 	.word	0x08013760
 8012494:	08013720 	.word	0x08013720
 8012498:	4260      	negs	r0, r4
 801249a:	eeb0 0b48 	vmov.f64	d0, d8
 801249e:	f000 f8fb 	bl	8012698 <scalbn>
 80124a2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8012680 <__kernel_rem_pio2+0x510>
 80124a6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80124aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ae:	db18      	blt.n	80124e2 <__kernel_rem_pio2+0x372>
 80124b0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8012688 <__kernel_rem_pio2+0x518>
 80124b4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80124b8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80124bc:	aa06      	add	r2, sp, #24
 80124be:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80124c2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80124c6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80124ca:	f105 0b01 	add.w	fp, r5, #1
 80124ce:	ee10 3a10 	vmov	r3, s0
 80124d2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80124d6:	ee17 3a10 	vmov	r3, s14
 80124da:	3418      	adds	r4, #24
 80124dc:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80124e0:	e73f      	b.n	8012362 <__kernel_rem_pio2+0x1f2>
 80124e2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80124e6:	aa06      	add	r2, sp, #24
 80124e8:	ee10 3a10 	vmov	r3, s0
 80124ec:	46ab      	mov	fp, r5
 80124ee:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80124f2:	e736      	b.n	8012362 <__kernel_rem_pio2+0x1f2>
 80124f4:	a806      	add	r0, sp, #24
 80124f6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80124fa:	9001      	str	r0, [sp, #4]
 80124fc:	ee07 0a90 	vmov	s15, r0
 8012500:	3a01      	subs	r2, #1
 8012502:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012506:	ee27 7b00 	vmul.f64	d7, d7, d0
 801250a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801250e:	ed21 7b02 	vstmdb	r1!, {d7}
 8012512:	e734      	b.n	801237e <__kernel_rem_pio2+0x20e>
 8012514:	ecb5 5b02 	vldmia	r5!, {d5}
 8012518:	ecb4 6b02 	vldmia	r4!, {d6}
 801251c:	3001      	adds	r0, #1
 801251e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012522:	4548      	cmp	r0, r9
 8012524:	dc01      	bgt.n	801252a <__kernel_rem_pio2+0x3ba>
 8012526:	4288      	cmp	r0, r1
 8012528:	ddf4      	ble.n	8012514 <__kernel_rem_pio2+0x3a4>
 801252a:	a842      	add	r0, sp, #264	; 0x108
 801252c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012530:	ed81 7b00 	vstr	d7, [r1]
 8012534:	3a01      	subs	r2, #1
 8012536:	e726      	b.n	8012386 <__kernel_rem_pio2+0x216>
 8012538:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801253a:	2a02      	cmp	r2, #2
 801253c:	dc0a      	bgt.n	8012554 <__kernel_rem_pio2+0x3e4>
 801253e:	2a00      	cmp	r2, #0
 8012540:	dc2e      	bgt.n	80125a0 <__kernel_rem_pio2+0x430>
 8012542:	d047      	beq.n	80125d4 <__kernel_rem_pio2+0x464>
 8012544:	f008 0007 	and.w	r0, r8, #7
 8012548:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801254c:	ecbd 8b06 	vpop	{d8-d10}
 8012550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012554:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8012556:	2a03      	cmp	r2, #3
 8012558:	d1f4      	bne.n	8012544 <__kernel_rem_pio2+0x3d4>
 801255a:	a942      	add	r1, sp, #264	; 0x108
 801255c:	f1a3 0208 	sub.w	r2, r3, #8
 8012560:	440a      	add	r2, r1
 8012562:	4611      	mov	r1, r2
 8012564:	4658      	mov	r0, fp
 8012566:	2800      	cmp	r0, #0
 8012568:	f1a1 0108 	sub.w	r1, r1, #8
 801256c:	dc55      	bgt.n	801261a <__kernel_rem_pio2+0x4aa>
 801256e:	4659      	mov	r1, fp
 8012570:	2901      	cmp	r1, #1
 8012572:	f1a2 0208 	sub.w	r2, r2, #8
 8012576:	dc60      	bgt.n	801263a <__kernel_rem_pio2+0x4ca>
 8012578:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8012690 <__kernel_rem_pio2+0x520>
 801257c:	aa42      	add	r2, sp, #264	; 0x108
 801257e:	4413      	add	r3, r2
 8012580:	f1bb 0f01 	cmp.w	fp, #1
 8012584:	dc69      	bgt.n	801265a <__kernel_rem_pio2+0x4ea>
 8012586:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801258a:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801258e:	2e00      	cmp	r6, #0
 8012590:	d16a      	bne.n	8012668 <__kernel_rem_pio2+0x4f8>
 8012592:	ed87 5b00 	vstr	d5, [r7]
 8012596:	ed87 6b02 	vstr	d6, [r7, #8]
 801259a:	ed87 7b04 	vstr	d7, [r7, #16]
 801259e:	e7d1      	b.n	8012544 <__kernel_rem_pio2+0x3d4>
 80125a0:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8012690 <__kernel_rem_pio2+0x520>
 80125a4:	aa42      	add	r2, sp, #264	; 0x108
 80125a6:	4413      	add	r3, r2
 80125a8:	465a      	mov	r2, fp
 80125aa:	2a00      	cmp	r2, #0
 80125ac:	da26      	bge.n	80125fc <__kernel_rem_pio2+0x48c>
 80125ae:	b35e      	cbz	r6, 8012608 <__kernel_rem_pio2+0x498>
 80125b0:	eeb1 7b46 	vneg.f64	d7, d6
 80125b4:	ed87 7b00 	vstr	d7, [r7]
 80125b8:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80125bc:	aa44      	add	r2, sp, #272	; 0x110
 80125be:	2301      	movs	r3, #1
 80125c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80125c4:	459b      	cmp	fp, r3
 80125c6:	da22      	bge.n	801260e <__kernel_rem_pio2+0x49e>
 80125c8:	b10e      	cbz	r6, 80125ce <__kernel_rem_pio2+0x45e>
 80125ca:	eeb1 7b47 	vneg.f64	d7, d7
 80125ce:	ed87 7b02 	vstr	d7, [r7, #8]
 80125d2:	e7b7      	b.n	8012544 <__kernel_rem_pio2+0x3d4>
 80125d4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012690 <__kernel_rem_pio2+0x520>
 80125d8:	aa42      	add	r2, sp, #264	; 0x108
 80125da:	4413      	add	r3, r2
 80125dc:	f1bb 0f00 	cmp.w	fp, #0
 80125e0:	da05      	bge.n	80125ee <__kernel_rem_pio2+0x47e>
 80125e2:	b10e      	cbz	r6, 80125e8 <__kernel_rem_pio2+0x478>
 80125e4:	eeb1 7b47 	vneg.f64	d7, d7
 80125e8:	ed87 7b00 	vstr	d7, [r7]
 80125ec:	e7aa      	b.n	8012544 <__kernel_rem_pio2+0x3d4>
 80125ee:	ed33 6b02 	vldmdb	r3!, {d6}
 80125f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80125f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80125fa:	e7ef      	b.n	80125dc <__kernel_rem_pio2+0x46c>
 80125fc:	ed33 7b02 	vldmdb	r3!, {d7}
 8012600:	3a01      	subs	r2, #1
 8012602:	ee36 6b07 	vadd.f64	d6, d6, d7
 8012606:	e7d0      	b.n	80125aa <__kernel_rem_pio2+0x43a>
 8012608:	eeb0 7b46 	vmov.f64	d7, d6
 801260c:	e7d2      	b.n	80125b4 <__kernel_rem_pio2+0x444>
 801260e:	ecb2 6b02 	vldmia	r2!, {d6}
 8012612:	3301      	adds	r3, #1
 8012614:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012618:	e7d4      	b.n	80125c4 <__kernel_rem_pio2+0x454>
 801261a:	ed91 7b00 	vldr	d7, [r1]
 801261e:	ed91 5b02 	vldr	d5, [r1, #8]
 8012622:	3801      	subs	r0, #1
 8012624:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012628:	ee37 7b46 	vsub.f64	d7, d7, d6
 801262c:	ed81 6b00 	vstr	d6, [r1]
 8012630:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012634:	ed81 7b02 	vstr	d7, [r1, #8]
 8012638:	e795      	b.n	8012566 <__kernel_rem_pio2+0x3f6>
 801263a:	ed92 7b00 	vldr	d7, [r2]
 801263e:	ed92 5b02 	vldr	d5, [r2, #8]
 8012642:	3901      	subs	r1, #1
 8012644:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012648:	ee37 7b46 	vsub.f64	d7, d7, d6
 801264c:	ed82 6b00 	vstr	d6, [r2]
 8012650:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012654:	ed82 7b02 	vstr	d7, [r2, #8]
 8012658:	e78a      	b.n	8012570 <__kernel_rem_pio2+0x400>
 801265a:	ed33 6b02 	vldmdb	r3!, {d6}
 801265e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012662:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012666:	e78b      	b.n	8012580 <__kernel_rem_pio2+0x410>
 8012668:	eeb1 5b45 	vneg.f64	d5, d5
 801266c:	eeb1 6b46 	vneg.f64	d6, d6
 8012670:	ed87 5b00 	vstr	d5, [r7]
 8012674:	eeb1 7b47 	vneg.f64	d7, d7
 8012678:	ed87 6b02 	vstr	d6, [r7, #8]
 801267c:	e78d      	b.n	801259a <__kernel_rem_pio2+0x42a>
 801267e:	bf00      	nop
 8012680:	00000000 	.word	0x00000000
 8012684:	41700000 	.word	0x41700000
 8012688:	00000000 	.word	0x00000000
 801268c:	3e700000 	.word	0x3e700000
	...

08012698 <scalbn>:
 8012698:	ee10 1a90 	vmov	r1, s1
 801269c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80126a0:	b98b      	cbnz	r3, 80126c6 <scalbn+0x2e>
 80126a2:	ee10 3a10 	vmov	r3, s0
 80126a6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80126aa:	4319      	orrs	r1, r3
 80126ac:	d00a      	beq.n	80126c4 <scalbn+0x2c>
 80126ae:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8012760 <scalbn+0xc8>
 80126b2:	4b37      	ldr	r3, [pc, #220]	; (8012790 <scalbn+0xf8>)
 80126b4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80126b8:	4298      	cmp	r0, r3
 80126ba:	da0b      	bge.n	80126d4 <scalbn+0x3c>
 80126bc:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8012768 <scalbn+0xd0>
 80126c0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80126c4:	4770      	bx	lr
 80126c6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80126ca:	4293      	cmp	r3, r2
 80126cc:	d107      	bne.n	80126de <scalbn+0x46>
 80126ce:	ee30 0b00 	vadd.f64	d0, d0, d0
 80126d2:	4770      	bx	lr
 80126d4:	ee10 1a90 	vmov	r1, s1
 80126d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80126dc:	3b36      	subs	r3, #54	; 0x36
 80126de:	f24c 3250 	movw	r2, #50000	; 0xc350
 80126e2:	4290      	cmp	r0, r2
 80126e4:	dd0d      	ble.n	8012702 <scalbn+0x6a>
 80126e6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8012770 <scalbn+0xd8>
 80126ea:	ee10 3a90 	vmov	r3, s1
 80126ee:	eeb0 6b47 	vmov.f64	d6, d7
 80126f2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8012778 <scalbn+0xe0>
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	fe27 7b05 	vselge.f64	d7, d7, d5
 80126fc:	ee27 0b06 	vmul.f64	d0, d7, d6
 8012700:	4770      	bx	lr
 8012702:	4418      	add	r0, r3
 8012704:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8012708:	4298      	cmp	r0, r3
 801270a:	dcec      	bgt.n	80126e6 <scalbn+0x4e>
 801270c:	2800      	cmp	r0, #0
 801270e:	dd0a      	ble.n	8012726 <scalbn+0x8e>
 8012710:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8012714:	ec53 2b10 	vmov	r2, r3, d0
 8012718:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801271c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8012720:	ec43 2b10 	vmov	d0, r2, r3
 8012724:	4770      	bx	lr
 8012726:	f110 0f35 	cmn.w	r0, #53	; 0x35
 801272a:	da09      	bge.n	8012740 <scalbn+0xa8>
 801272c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012768 <scalbn+0xd0>
 8012730:	ee10 3a90 	vmov	r3, s1
 8012734:	eeb0 6b47 	vmov.f64	d6, d7
 8012738:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8012780 <scalbn+0xe8>
 801273c:	2b00      	cmp	r3, #0
 801273e:	e7db      	b.n	80126f8 <scalbn+0x60>
 8012740:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8012744:	ec53 2b10 	vmov	r2, r3, d0
 8012748:	3036      	adds	r0, #54	; 0x36
 801274a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801274e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8012752:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8012788 <scalbn+0xf0>
 8012756:	ec43 2b10 	vmov	d0, r2, r3
 801275a:	e7b1      	b.n	80126c0 <scalbn+0x28>
 801275c:	f3af 8000 	nop.w
 8012760:	00000000 	.word	0x00000000
 8012764:	43500000 	.word	0x43500000
 8012768:	c2f8f359 	.word	0xc2f8f359
 801276c:	01a56e1f 	.word	0x01a56e1f
 8012770:	8800759c 	.word	0x8800759c
 8012774:	7e37e43c 	.word	0x7e37e43c
 8012778:	8800759c 	.word	0x8800759c
 801277c:	fe37e43c 	.word	0xfe37e43c
 8012780:	c2f8f359 	.word	0xc2f8f359
 8012784:	81a56e1f 	.word	0x81a56e1f
 8012788:	00000000 	.word	0x00000000
 801278c:	3c900000 	.word	0x3c900000
 8012790:	ffff3cb0 	.word	0xffff3cb0
 8012794:	00000000 	.word	0x00000000

08012798 <floor>:
 8012798:	ee10 1a90 	vmov	r1, s1
 801279c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80127a0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80127a4:	2b13      	cmp	r3, #19
 80127a6:	b530      	push	{r4, r5, lr}
 80127a8:	ee10 0a10 	vmov	r0, s0
 80127ac:	ee10 5a10 	vmov	r5, s0
 80127b0:	dc31      	bgt.n	8012816 <floor+0x7e>
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	da15      	bge.n	80127e2 <floor+0x4a>
 80127b6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8012878 <floor+0xe0>
 80127ba:	ee30 0b07 	vadd.f64	d0, d0, d7
 80127be:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80127c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127c6:	dd07      	ble.n	80127d8 <floor+0x40>
 80127c8:	2900      	cmp	r1, #0
 80127ca:	da4e      	bge.n	801286a <floor+0xd2>
 80127cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80127d0:	4308      	orrs	r0, r1
 80127d2:	d04d      	beq.n	8012870 <floor+0xd8>
 80127d4:	492a      	ldr	r1, [pc, #168]	; (8012880 <floor+0xe8>)
 80127d6:	2000      	movs	r0, #0
 80127d8:	460b      	mov	r3, r1
 80127da:	4602      	mov	r2, r0
 80127dc:	ec43 2b10 	vmov	d0, r2, r3
 80127e0:	e020      	b.n	8012824 <floor+0x8c>
 80127e2:	4a28      	ldr	r2, [pc, #160]	; (8012884 <floor+0xec>)
 80127e4:	411a      	asrs	r2, r3
 80127e6:	ea01 0402 	and.w	r4, r1, r2
 80127ea:	4304      	orrs	r4, r0
 80127ec:	d01a      	beq.n	8012824 <floor+0x8c>
 80127ee:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8012878 <floor+0xe0>
 80127f2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80127f6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80127fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127fe:	ddeb      	ble.n	80127d8 <floor+0x40>
 8012800:	2900      	cmp	r1, #0
 8012802:	bfbe      	ittt	lt
 8012804:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8012808:	fa40 f303 	asrlt.w	r3, r0, r3
 801280c:	18c9      	addlt	r1, r1, r3
 801280e:	ea21 0102 	bic.w	r1, r1, r2
 8012812:	2000      	movs	r0, #0
 8012814:	e7e0      	b.n	80127d8 <floor+0x40>
 8012816:	2b33      	cmp	r3, #51	; 0x33
 8012818:	dd05      	ble.n	8012826 <floor+0x8e>
 801281a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801281e:	d101      	bne.n	8012824 <floor+0x8c>
 8012820:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012824:	bd30      	pop	{r4, r5, pc}
 8012826:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801282a:	f04f 32ff 	mov.w	r2, #4294967295
 801282e:	40e2      	lsrs	r2, r4
 8012830:	4210      	tst	r0, r2
 8012832:	d0f7      	beq.n	8012824 <floor+0x8c>
 8012834:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8012878 <floor+0xe0>
 8012838:	ee30 0b07 	vadd.f64	d0, d0, d7
 801283c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012844:	ddc8      	ble.n	80127d8 <floor+0x40>
 8012846:	2900      	cmp	r1, #0
 8012848:	da02      	bge.n	8012850 <floor+0xb8>
 801284a:	2b14      	cmp	r3, #20
 801284c:	d103      	bne.n	8012856 <floor+0xbe>
 801284e:	3101      	adds	r1, #1
 8012850:	ea20 0002 	bic.w	r0, r0, r2
 8012854:	e7c0      	b.n	80127d8 <floor+0x40>
 8012856:	2401      	movs	r4, #1
 8012858:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801285c:	fa04 f303 	lsl.w	r3, r4, r3
 8012860:	4418      	add	r0, r3
 8012862:	4285      	cmp	r5, r0
 8012864:	bf88      	it	hi
 8012866:	1909      	addhi	r1, r1, r4
 8012868:	e7f2      	b.n	8012850 <floor+0xb8>
 801286a:	2000      	movs	r0, #0
 801286c:	4601      	mov	r1, r0
 801286e:	e7b3      	b.n	80127d8 <floor+0x40>
 8012870:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8012874:	e7b0      	b.n	80127d8 <floor+0x40>
 8012876:	bf00      	nop
 8012878:	8800759c 	.word	0x8800759c
 801287c:	7e37e43c 	.word	0x7e37e43c
 8012880:	bff00000 	.word	0xbff00000
 8012884:	000fffff 	.word	0x000fffff

08012888 <_init>:
 8012888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801288a:	bf00      	nop
 801288c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801288e:	bc08      	pop	{r3}
 8012890:	469e      	mov	lr, r3
 8012892:	4770      	bx	lr

08012894 <_fini>:
 8012894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012896:	bf00      	nop
 8012898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801289a:	bc08      	pop	{r3}
 801289c:	469e      	mov	lr, r3
 801289e:	4770      	bx	lr
