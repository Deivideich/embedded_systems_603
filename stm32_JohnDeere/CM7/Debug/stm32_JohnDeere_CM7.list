
stm32_JohnDeere_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         0000f948  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  0800fbe8  0800fbe8  0001fbe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080103d0  080103d0  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080103d0  080103d0  000203d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080103d8  080103d8  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080103d8  080103d8  000203d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080103dc  080103dc  000203dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  080103e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e90  240001dc  080105bc  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400506c  080105bc  0003506c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025bdb  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e18  00000000  00000000  00055e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c90  00000000  00000000  0005ac40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001606  00000000  00000000  0005c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00040279  00000000  00000000  0005ded6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026a1d  00000000  00000000  0009e14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001986ff  00000000  00000000  000c4b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000087ec  00000000  00000000  0025d26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00265a58  2**0
=======
  1 .text         00013254  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f70  080134f8  080134f8  000234f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014468  08014468  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08014468  08014468  00024468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014470  08014470  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014470  08014470  00024470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014474  08014474  00024474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  24000000  08014478  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000521c  240001f0  08014664  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2400540c  08014664  0003540c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fd99  00000000  00000000  0003021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a10  00000000  00000000  0005ffb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022f8  00000000  00000000  000659c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002090  00000000  00000000  00067cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042dee  00000000  00000000  00069d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fb6e  00000000  00000000  000acb3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a3b82  00000000  00000000  000dc6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0028022e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a5e4  00000000  00000000  00280280  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
<<<<<<< Updated upstream
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fbd0 	.word	0x0800fbd0
=======
 80002b8:	240001f0 	.word	0x240001f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080134dc 	.word	0x080134dc
>>>>>>> Stashed changes

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	0800fbd0 	.word	0x0800fbd0
=======
 80002d8:	240001f4 	.word	0x240001f4
 80002dc:	080134dc 	.word	0x080134dc
>>>>>>> Stashed changes

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

<<<<<<< Updated upstream
080007b8 <setPwmS>:
=======
080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f006 f80b 	bl	8006838 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f006 f802 	bl	8006838 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2400021c 	.word	0x2400021c
 8000840:	24000220 	.word	0x24000220

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f005 ffeb 	bl	8006838 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f005 ffe2 	bl	8006838 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2400021c 	.word	0x2400021c
 8000880:	24000222 	.word	0x24000222

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f008 fc90 	bl	80091cc <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f008 fe7a 	bl	80095b0 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	24000224 	.word	0x24000224

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f008 fc65 	bl	80091cc <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f008 fe50 	bl	80095b0 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	24000224 	.word	0x24000224

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f008 fc3b 	bl	80091cc <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	24000224 	.word	0x24000224

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f008 fc1b 	bl	80091cc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f008 fc14 	bl	80091cc <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	24000224 	.word	0x24000224

080009b8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009c4:	f000 fa0a 	bl	8000ddc <NRF24_getPayloadSize>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d303      	bcc.n	80009da <NRF24_read_payload+0x22>
 80009d2:	f000 fa03 	bl	8000ddc <NRF24_getPayloadSize>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <NRF24_read_payload+0x24>
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff10 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009e4:	2361      	movs	r3, #97	; 0x61
 80009e6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <NRF24_read_payload+0x5c>)
 80009f2:	f008 fbeb 	bl	80091cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <NRF24_read_payload+0x5c>)
 8000a00:	f008 fdd6 	bl	80095b0 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fefd 	bl	8000804 <NRF24_csn>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	24000224 	.word	0x24000224

08000a18 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a1c:	21ff      	movs	r1, #255	; 0xff
 8000a1e:	20e1      	movs	r0, #225	; 0xe1
 8000a20:	f7ff ff80 	bl	8000924 <NRF24_write_register>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a2c:	21ff      	movs	r1, #255	; 0xff
 8000a2e:	20e2      	movs	r0, #226	; 0xe2
 8000a30:	f7ff ff78 	bl	8000924 <NRF24_write_register>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff ff20 	bl	8000884 <NRF24_read_register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a68:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <NRF24_begin+0x1b0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	4619      	mov	r1, r3
 8000a74:	f00e feeb 	bl	800f84e <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <NRF24_begin+0x1b4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <NRF24_begin+0x1b8>)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <NRF24_begin+0x1bc>)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff feba 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fed7 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f004 fe92 	bl	80057c0 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff40 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000aa4:	213f      	movs	r1, #63	; 0x3f
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff3c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ff38 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000abc:	2103      	movs	r1, #3
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000acc:	210f      	movs	r1, #15
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff24 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ff20 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f7ff ff1c 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	72fb      	strb	r3, [r7, #11]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	72bb      	strb	r3, [r7, #10]
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	727b      	strb	r3, [r7, #9]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2205      	movs	r2, #5
 8000b06:	4619      	mov	r1, r3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f7ff ff2d 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	72bb      	strb	r3, [r7, #10]
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	727b      	strb	r3, [r7, #9]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2205      	movs	r2, #5
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff1c 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b30:	21c3      	movs	r1, #195	; 0xc3
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff fef6 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b38:	21c4      	movs	r1, #196	; 0xc4
 8000b3a:	200d      	movs	r0, #13
 8000b3c:	f7ff fef2 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b40:	21c5      	movs	r1, #197	; 0xc5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff feee 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b48:	21c6      	movs	r1, #198	; 0xc6
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feea 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	733b      	strb	r3, [r7, #12]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	72fb      	strb	r3, [r7, #11]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	72bb      	strb	r3, [r7, #10]
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	727b      	strb	r3, [r7, #9]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2205      	movs	r2, #5
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fefb 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fed5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f7ff fed1 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f7ff fecd 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f7ff fec9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff fec5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2016      	movs	r0, #22
 8000b9e:	f7ff fec1 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000ba2:	f000 fa7d 	bl	80010a0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff feb7 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bb6:	f000 fa8d 	bl	80010d4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bba:	210f      	movs	r1, #15
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f8c5 	bl	8000d4c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f97d 	bl	8000ec2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f9b3 	bl	8000f34 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 f9f6 	bl	8000fc0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bd4:	f000 f948 	bl	8000e68 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f000 f8e7 	bl	8000dac <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000bde:	f000 fa56 	bl	800108e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000be2:	204c      	movs	r0, #76	; 0x4c
 8000be4:	f000 f8cd 	bl	8000d82 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be8:	f7ff ff16 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bec:	f7ff ff1c 	bl	8000a28 <NRF24_flush_rx>

	NRF24_powerDown();
 8000bf0:	f000 fa0e 	bl	8001010 <NRF24_powerDown>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	24000224 	.word	0x24000224
 8000c08:	2400021c 	.word	0x2400021c
 8000c0c:	24000220 	.word	0x24000220
 8000c10:	24000222 	.word	0x24000222

08000c14 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe33 	bl	8000884 <NRF24_read_register>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe7b 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <NRF24_startListening+0x48>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	d004      	beq.n	8000c42 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <NRF24_startListening+0x48>)
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff fe93 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000c42:	f7ff fee9 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c46:	f7ff feef 	bl	8000a28 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdfa 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c50:	2096      	movs	r0, #150	; 0x96
 8000c52:	f7ff fdb5 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24000210 	.word	0x24000210

08000c60 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f9e2 	bl	800102e <NRF24_availablePipe>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe99 	bl	80009b8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c86:	2017      	movs	r0, #23
 8000c88:	f7ff fdfc 	bl	8000884 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c94:	f7ff fec8 	bl	8000a28 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c98:	f000 f8ac 	bl	8000df4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <NRF24_openReadingPipe+0x8c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d82d      	bhi.n	8000d32 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe3e 	bl	8000968 <NRF24_write_registerN>
 8000cec:	e007      	b.n	8000cfe <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe35 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <NRF24_openReadingPipe+0x94>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x98>)
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fdb7 	bl	8000884 <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	}

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000210 	.word	0x24000210
 8000d40:	08013c98 	.word	0x08013c98
 8000d44:	08013ca0 	.word	0x08013ca0
 8000d48:	24000218 	.word	0x24000218

08000d4c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fdd5 	bl	8000924 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf28      	it	cs
 8000d98:	4613      	movcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fdc0 	bl	8000924 <NRF24_write_register>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000db6:	2320      	movs	r3, #32
 8000db8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bf28      	it	cs
 8000dc2:	4613      	movcs	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <NRF24_setPayloadSize+0x2c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	24000218 	.word	0x24000218

08000ddc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return payload_size;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <NRF24_getPayloadSize+0x14>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	24000218 	.word	0x24000218

08000df4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff fd43 	bl	8000884 <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24_enableDynamicPayloads>:
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
}
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fd3b 	bl	8000884 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f7ff fd83 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f7ff fd30 	bl	8000884 <NRF24_read_register>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10c      	bne.n	8000e44 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e2a:	f000 f939 	bl	80010a0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e2e:	201d      	movs	r0, #29
 8000e30:	f7ff fd28 	bl	8000884 <NRF24_read_register>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	201d      	movs	r0, #29
 8000e40:	f7ff fd70 	bl	8000924 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000e44:	201c      	movs	r0, #28
 8000e46:	f7ff fd1d 	bl	8000884 <NRF24_read_register>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	201c      	movs	r0, #28
 8000e56:	f7ff fd65 	bl	8000924 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000e5a:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <NRF24_enableDynamicPayloads+0x60>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	24000219 	.word	0x24000219

08000e68 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000e6c:	201d      	movs	r0, #29
 8000e6e:	f7ff fd09 	bl	8000884 <NRF24_read_register>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f023 0304 	bic.w	r3, r3, #4
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	201d      	movs	r0, #29
 8000e7e:	f7ff fd51 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000e82:	2100      	movs	r1, #0
 8000e84:	201c      	movs	r0, #28
 8000e86:	f7ff fd4d 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e8a:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <NRF24_disableDynamicPayloads+0x2c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	24000219 	.word	0x24000219

08000e98 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d004      	beq.n	8000eb2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000ea8:	213f      	movs	r1, #63	; 0x3f
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff fd3a 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000eb0:	e003      	b.n	8000eba <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f7ff fd35 	bl	8000924 <NRF24_write_register>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000ecc:	2006      	movs	r0, #6
 8000ece:	f7ff fcd9 	bl	8000884 <NRF24_read_register>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	f023 0306 	bic.w	r3, r3, #6
 8000edc:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d104      	bne.n	8000eee <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	f043 0306 	orr.w	r3, r3, #6
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e019      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d104      	bne.n	8000efe <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e011      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d104      	bne.n	8000f0e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e009      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d103      	bne.n	8000f22 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	f043 0306 	orr.w	r3, r3, #6
 8000f20:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4619      	mov	r1, r3
 8000f26:	2006      	movs	r0, #6
 8000f28:	f7ff fcfc 	bl	8000924 <NRF24_write_register>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f42:	2006      	movs	r0, #6
 8000f44:	f7ff fc9e 	bl	8000884 <NRF24_read_register>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f58:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d107      	bne.n	8000f70 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	73bb      	strb	r3, [r7, #14]
 8000f6e:	e00d      	b.n	8000f8c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d107      	bne.n	8000f86 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	73bb      	strb	r3, [r7, #14]
 8000f84:	e002      	b.n	8000f8c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	2006      	movs	r0, #6
 8000f92:	f7ff fcc7 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000f96:	2006      	movs	r0, #6
 8000f98:	f7ff fc74 	bl	8000884 <NRF24_read_register>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d102      	bne.n	8000fac <NRF24_setDataRate+0x78>
  {
    result = true;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e002      	b.n	8000fb2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2400021a 	.word	0x2400021a

08000fc0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff fc5a 	bl	8000884 <NRF24_read_register>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f023 030c 	bic.w	r3, r3, #12
 8000fd6:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00f      	beq.n	8000ffe <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d104      	bne.n	8000fee <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e007      	b.n	8000ffe <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4619      	mov	r1, r3
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fc8e 	bl	8000924 <NRF24_write_register>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fc35 	bl	8000884 <NRF24_read_register>
 800101a:	4603      	mov	r3, r0
 800101c:	f023 0302 	bic.w	r3, r3, #2
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4619      	mov	r1, r3
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fc7d 	bl	8000924 <NRF24_write_register>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}

0800102e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001036:	f7ff fcff 	bl	8000a38 <NRF24_get_status>
 800103a:	4603      	mov	r3, r0
 800103c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001044:	2b00      	cmp	r3, #0
 8001046:	bf14      	ite	ne
 8001048:	2301      	movne	r3, #1
 800104a:	2300      	moveq	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d017      	beq.n	8001084 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	b2da      	uxtb	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	2007      	movs	r0, #7
 800106e:	f7ff fc59 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	f003 0320 	and.w	r3, r3, #32
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800107c:	2120      	movs	r1, #32
 800107e:	2007      	movs	r0, #7
 8001080:	f7ff fc50 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 8001084:	7bbb      	ldrb	r3, [r7, #14]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001092:	2170      	movs	r1, #112	; 0x70
 8001094:	2007      	movs	r0, #7
 8001096:	f7ff fc45 	bl	8000924 <NRF24_write_register>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fbac 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80010ac:	2350      	movs	r3, #80	; 0x50
 80010ae:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80010b0:	2373      	movs	r3, #115	; 0x73
 80010b2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80010b4:	1d39      	adds	r1, r7, #4
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	2202      	movs	r2, #2
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <NRF24_ACTIVATE_cmd+0x30>)
 80010bc:	f008 f886 	bl	80091cc <HAL_SPI_Transmit>
	NRF24_csn(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f7ff fb9f 	bl	8000804 <NRF24_csn>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	24000224 	.word	0x24000224

080010d4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	b0a1      	sub	sp, #132	; 0x84
 80010d8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	49c3      	ldr	r1, [pc, #780]	; (80013ec <printRadioSettings+0x318>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00f f9ab 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f8f8 	bl	80002e0 <strlen>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	f107 0108 	add.w	r1, r7, #8
 80010f8:	230a      	movs	r3, #10
 80010fa:	48bd      	ldr	r0, [pc, #756]	; (80013f0 <printRadioSettings+0x31c>)
 80010fc:	f009 ffea 	bl	800b0d4 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff fbbf 	bl	8000884 <NRF24_read_register>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800110c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001118:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <printRadioSettings+0x5e>
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	49b2      	ldr	r1, [pc, #712]	; (80013f4 <printRadioSettings+0x320>)
 800112a:	4618      	mov	r0, r3
 800112c:	f00f f986 	bl	801043c <siprintf>
 8001130:	e00c      	b.n	800114c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	49b0      	ldr	r1, [pc, #704]	; (80013f8 <printRadioSettings+0x324>)
 8001138:	4618      	mov	r0, r3
 800113a:	f00f f97f 	bl	801043c <siprintf>
 800113e:	e005      	b.n	800114c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	49ad      	ldr	r1, [pc, #692]	; (80013fc <printRadioSettings+0x328>)
 8001146:	4618      	mov	r0, r3
 8001148:	f00f f978 	bl	801043c <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f8c5 	bl	80002e0 <strlen>
 8001156:	4603      	mov	r3, r0
 8001158:	b29a      	uxth	r2, r3
 800115a:	f107 0108 	add.w	r1, r7, #8
 800115e:	230a      	movs	r3, #10
 8001160:	48a3      	ldr	r0, [pc, #652]	; (80013f0 <printRadioSettings+0x31c>)
 8001162:	f009 ffb7 	bl	800b0d4 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff fb8c 	bl	8000884 <NRF24_read_register>
 800116c:	4603      	mov	r3, r0
 800116e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001172:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001176:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800117a:	2b00      	cmp	r3, #0
 800117c:	bfcc      	ite	gt
 800117e:	2301      	movgt	r3, #1
 8001180:	2300      	movle	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001186:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800118e:	2b00      	cmp	r3, #0
 8001190:	bfcc      	ite	gt
 8001192:	2301      	movgt	r3, #1
 8001194:	2300      	movle	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800119a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800119e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bfcc      	ite	gt
 80011a6:	2301      	movgt	r3, #1
 80011a8:	2300      	movle	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011b2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bfcc      	ite	gt
 80011ba:	2301      	movgt	r3, #1
 80011bc:	2300      	movle	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bfcc      	ite	gt
 80011ce:	2301      	movgt	r3, #1
 80011d0:	2300      	movle	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011da:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bfcc      	ite	gt
 80011e2:	2301      	movgt	r3, #1
 80011e4:	2300      	movle	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f107 0008 	add.w	r0, r7, #8
 80011ec:	9303      	str	r3, [sp, #12]
 80011ee:	9402      	str	r4, [sp, #8]
 80011f0:	9101      	str	r1, [sp, #4]
 80011f2:	9200      	str	r2, [sp, #0]
 80011f4:	4633      	mov	r3, r6
 80011f6:	462a      	mov	r2, r5
 80011f8:	4981      	ldr	r1, [pc, #516]	; (8001400 <printRadioSettings+0x32c>)
 80011fa:	f00f f91f 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f86c 	bl	80002e0 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f107 0108 	add.w	r1, r7, #8
 8001210:	230a      	movs	r3, #10
 8001212:	4877      	ldr	r0, [pc, #476]	; (80013f0 <printRadioSettings+0x31c>)
 8001214:	f009 ff5e 	bl	800b0d4 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001218:	2002      	movs	r0, #2
 800121a:	f7ff fb33 	bl	8000884 <NRF24_read_register>
 800121e:	4603      	mov	r3, r0
 8001220:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001224:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001228:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800122c:	2b00      	cmp	r3, #0
 800122e:	bfcc      	ite	gt
 8001230:	2301      	movgt	r3, #1
 8001232:	2300      	movle	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001238:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001240:	2b00      	cmp	r3, #0
 8001242:	bfcc      	ite	gt
 8001244:	2301      	movgt	r3, #1
 8001246:	2300      	movle	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800124c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001250:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001254:	2b00      	cmp	r3, #0
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001260:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001264:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001268:	2b00      	cmp	r3, #0
 800126a:	bfcc      	ite	gt
 800126c:	2301      	movgt	r3, #1
 800126e:	2300      	movle	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001274:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001278:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800127c:	2b00      	cmp	r3, #0
 800127e:	bfcc      	ite	gt
 8001280:	2301      	movgt	r3, #1
 8001282:	2300      	movle	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001288:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800128c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001290:	2b00      	cmp	r3, #0
 8001292:	bfcc      	ite	gt
 8001294:	2301      	movgt	r3, #1
 8001296:	2300      	movle	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f107 0008 	add.w	r0, r7, #8
 800129e:	9303      	str	r3, [sp, #12]
 80012a0:	9402      	str	r4, [sp, #8]
 80012a2:	9101      	str	r1, [sp, #4]
 80012a4:	9200      	str	r2, [sp, #0]
 80012a6:	4633      	mov	r3, r6
 80012a8:	462a      	mov	r2, r5
 80012aa:	4956      	ldr	r1, [pc, #344]	; (8001404 <printRadioSettings+0x330>)
 80012ac:	f00f f8c6 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f813 	bl	80002e0 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f107 0108 	add.w	r1, r7, #8
 80012c2:	230a      	movs	r3, #10
 80012c4:	484a      	ldr	r0, [pc, #296]	; (80013f0 <printRadioSettings+0x31c>)
 80012c6:	f009 ff05 	bl	800b0d4 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff fada 	bl	8000884 <NRF24_read_register>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80012da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012de:	3302      	adds	r3, #2
 80012e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80012e4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4946      	ldr	r1, [pc, #280]	; (8001408 <printRadioSettings+0x334>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00f f8a4 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7fe fff1 	bl	80002e0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f107 0108 	add.w	r1, r7, #8
 8001306:	230a      	movs	r3, #10
 8001308:	4839      	ldr	r0, [pc, #228]	; (80013f0 <printRadioSettings+0x31c>)
 800130a:	f009 fee3 	bl	800b0d4 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800130e:	2005      	movs	r0, #5
 8001310:	f7ff fab8 	bl	8000884 <NRF24_read_register>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800131a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800131e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	4939      	ldr	r1, [pc, #228]	; (800140c <printRadioSettings+0x338>)
 8001328:	4618      	mov	r0, r3
 800132a:	f00f f887 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ffd4 	bl	80002e0 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	f107 0108 	add.w	r1, r7, #8
 8001340:	230a      	movs	r3, #10
 8001342:	482b      	ldr	r0, [pc, #172]	; (80013f0 <printRadioSettings+0x31c>)
 8001344:	f009 fec6 	bl	800b0d4 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001348:	2006      	movs	r0, #6
 800134a:	f7ff fa9b 	bl	8000884 <NRF24_read_register>
 800134e:	4603      	mov	r3, r0
 8001350:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001354:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <printRadioSettings+0x29a>
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	492a      	ldr	r1, [pc, #168]	; (8001410 <printRadioSettings+0x33c>)
 8001366:	4618      	mov	r0, r3
 8001368:	f00f f868 	bl	801043c <siprintf>
 800136c:	e005      	b.n	800137a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	4928      	ldr	r1, [pc, #160]	; (8001414 <printRadioSettings+0x340>)
 8001374:	4618      	mov	r0, r3
 8001376:	f00f f861 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4618      	mov	r0, r3
 8001380:	f7fe ffae 	bl	80002e0 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	f107 0108 	add.w	r1, r7, #8
 800138c:	230a      	movs	r3, #10
 800138e:	4818      	ldr	r0, [pc, #96]	; (80013f0 <printRadioSettings+0x31c>)
 8001390:	f009 fea0 	bl	800b0d4 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001394:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001398:	f003 0306 	and.w	r3, r3, #6
 800139c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80013a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80013aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <printRadioSettings+0x2ec>
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4918      	ldr	r1, [pc, #96]	; (8001418 <printRadioSettings+0x344>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00f f83f 	bl	801043c <siprintf>
 80013be:	e03b      	b.n	8001438 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80013c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d106      	bne.n	80013d6 <printRadioSettings+0x302>
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4913      	ldr	r1, [pc, #76]	; (800141c <printRadioSettings+0x348>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00f f834 	bl	801043c <siprintf>
 80013d4:	e030      	b.n	8001438 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80013d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d122      	bne.n	8001424 <printRadioSettings+0x350>
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	490f      	ldr	r1, [pc, #60]	; (8001420 <printRadioSettings+0x34c>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f00f f829 	bl	801043c <siprintf>
 80013ea:	e025      	b.n	8001438 <printRadioSettings+0x364>
 80013ec:	080134f8 	.word	0x080134f8
 80013f0:	240002ac 	.word	0x240002ac
 80013f4:	0801352c 	.word	0x0801352c
 80013f8:	08013548 	.word	0x08013548
 80013fc:	08013564 	.word	0x08013564
 8001400:	08013578 	.word	0x08013578
 8001404:	080135bc 	.word	0x080135bc
 8001408:	08013608 	.word	0x08013608
 800140c:	08013624 	.word	0x08013624
 8001410:	08013638 	.word	0x08013638
 8001414:	08013650 	.word	0x08013650
 8001418:	08013668 	.word	0x08013668
 800141c:	0801367c 	.word	0x0801367c
 8001420:	08013690 	.word	0x08013690
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001424:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001428:	2b03      	cmp	r3, #3
 800142a:	d105      	bne.n	8001438 <printRadioSettings+0x364>
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	49d7      	ldr	r1, [pc, #860]	; (8001790 <printRadioSettings+0x6bc>)
 8001432:	4618      	mov	r0, r3
 8001434:	f00f f802 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ff4f 	bl	80002e0 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	f107 0108 	add.w	r1, r7, #8
 800144a:	230a      	movs	r3, #10
 800144c:	48d1      	ldr	r0, [pc, #836]	; (8001794 <printRadioSettings+0x6c0>)
 800144e:	f009 fe41 	bl	800b0d4 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001452:	463b      	mov	r3, r7
 8001454:	2205      	movs	r2, #5
 8001456:	4619      	mov	r1, r3
 8001458:	200a      	movs	r0, #10
 800145a:	f7ff fa3b 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800145e:	793b      	ldrb	r3, [r7, #4]
 8001460:	461c      	mov	r4, r3
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	461d      	mov	r5, r3
 8001466:	78bb      	ldrb	r3, [r7, #2]
 8001468:	787a      	ldrb	r2, [r7, #1]
 800146a:	7839      	ldrb	r1, [r7, #0]
 800146c:	f107 0008 	add.w	r0, r7, #8
 8001470:	9102      	str	r1, [sp, #8]
 8001472:	9201      	str	r2, [sp, #4]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	462b      	mov	r3, r5
 8001478:	4622      	mov	r2, r4
 800147a:	49c7      	ldr	r1, [pc, #796]	; (8001798 <printRadioSettings+0x6c4>)
 800147c:	f00e ffde 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ff2b 	bl	80002e0 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f107 0108 	add.w	r1, r7, #8
 8001492:	230a      	movs	r3, #10
 8001494:	48bf      	ldr	r0, [pc, #764]	; (8001794 <printRadioSettings+0x6c0>)
 8001496:	f009 fe1d 	bl	800b0d4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800149a:	463b      	mov	r3, r7
 800149c:	2205      	movs	r2, #5
 800149e:	4619      	mov	r1, r3
 80014a0:	200b      	movs	r0, #11
 80014a2:	f7ff fa17 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80014a6:	793b      	ldrb	r3, [r7, #4]
 80014a8:	461c      	mov	r4, r3
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	461d      	mov	r5, r3
 80014ae:	78bb      	ldrb	r3, [r7, #2]
 80014b0:	787a      	ldrb	r2, [r7, #1]
 80014b2:	7839      	ldrb	r1, [r7, #0]
 80014b4:	f107 0008 	add.w	r0, r7, #8
 80014b8:	9102      	str	r1, [sp, #8]
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	462b      	mov	r3, r5
 80014c0:	4622      	mov	r2, r4
 80014c2:	49b6      	ldr	r1, [pc, #728]	; (800179c <printRadioSettings+0x6c8>)
 80014c4:	f00e ffba 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c8:	f107 0308 	add.w	r3, r7, #8
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe ff07 	bl	80002e0 <strlen>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	f107 0108 	add.w	r1, r7, #8
 80014da:	230a      	movs	r3, #10
 80014dc:	48ad      	ldr	r0, [pc, #692]	; (8001794 <printRadioSettings+0x6c0>)
 80014de:	f009 fdf9 	bl	800b0d4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80014e2:	463b      	mov	r3, r7
 80014e4:	2201      	movs	r2, #1
 80014e6:	4619      	mov	r1, r3
 80014e8:	200c      	movs	r0, #12
 80014ea:	f7ff f9f3 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014ee:	783b      	ldrb	r3, [r7, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	49aa      	ldr	r1, [pc, #680]	; (80017a0 <printRadioSettings+0x6cc>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f00e ff9f 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe feec 	bl	80002e0 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	f107 0108 	add.w	r1, r7, #8
 8001510:	230a      	movs	r3, #10
 8001512:	48a0      	ldr	r0, [pc, #640]	; (8001794 <printRadioSettings+0x6c0>)
 8001514:	f009 fdde 	bl	800b0d4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001518:	463b      	mov	r3, r7
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	200d      	movs	r0, #13
 8001520:	f7ff f9d8 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001524:	783b      	ldrb	r3, [r7, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	499d      	ldr	r1, [pc, #628]	; (80017a4 <printRadioSettings+0x6d0>)
 800152e:	4618      	mov	r0, r3
 8001530:	f00e ff84 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fed1 	bl	80002e0 <strlen>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	f107 0108 	add.w	r1, r7, #8
 8001546:	230a      	movs	r3, #10
 8001548:	4892      	ldr	r0, [pc, #584]	; (8001794 <printRadioSettings+0x6c0>)
 800154a:	f009 fdc3 	bl	800b0d4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800154e:	463b      	mov	r3, r7
 8001550:	2201      	movs	r2, #1
 8001552:	4619      	mov	r1, r3
 8001554:	200e      	movs	r0, #14
 8001556:	f7ff f9bd 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800155a:	783b      	ldrb	r3, [r7, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	4991      	ldr	r1, [pc, #580]	; (80017a8 <printRadioSettings+0x6d4>)
 8001564:	4618      	mov	r0, r3
 8001566:	f00e ff69 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe feb6 	bl	80002e0 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b29a      	uxth	r2, r3
 8001578:	f107 0108 	add.w	r1, r7, #8
 800157c:	230a      	movs	r3, #10
 800157e:	4885      	ldr	r0, [pc, #532]	; (8001794 <printRadioSettings+0x6c0>)
 8001580:	f009 fda8 	bl	800b0d4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001584:	463b      	mov	r3, r7
 8001586:	2201      	movs	r2, #1
 8001588:	4619      	mov	r1, r3
 800158a:	200f      	movs	r0, #15
 800158c:	f7ff f9a2 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001590:	783b      	ldrb	r3, [r7, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	4984      	ldr	r1, [pc, #528]	; (80017ac <printRadioSettings+0x6d8>)
 800159a:	4618      	mov	r0, r3
 800159c:	f00e ff4e 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe fe9b 	bl	80002e0 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	f107 0108 	add.w	r1, r7, #8
 80015b2:	230a      	movs	r3, #10
 80015b4:	4877      	ldr	r0, [pc, #476]	; (8001794 <printRadioSettings+0x6c0>)
 80015b6:	f009 fd8d 	bl	800b0d4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80015ba:	463b      	mov	r3, r7
 80015bc:	2205      	movs	r2, #5
 80015be:	4619      	mov	r1, r3
 80015c0:	2010      	movs	r0, #16
 80015c2:	f7ff f987 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015c6:	793b      	ldrb	r3, [r7, #4]
 80015c8:	461c      	mov	r4, r3
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	461d      	mov	r5, r3
 80015ce:	78bb      	ldrb	r3, [r7, #2]
 80015d0:	787a      	ldrb	r2, [r7, #1]
 80015d2:	7839      	ldrb	r1, [r7, #0]
 80015d4:	f107 0008 	add.w	r0, r7, #8
 80015d8:	9102      	str	r1, [sp, #8]
 80015da:	9201      	str	r2, [sp, #4]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	462b      	mov	r3, r5
 80015e0:	4622      	mov	r2, r4
 80015e2:	4973      	ldr	r1, [pc, #460]	; (80017b0 <printRadioSettings+0x6dc>)
 80015e4:	f00e ff2a 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fe77 	bl	80002e0 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	f107 0108 	add.w	r1, r7, #8
 80015fa:	230a      	movs	r3, #10
 80015fc:	4865      	ldr	r0, [pc, #404]	; (8001794 <printRadioSettings+0x6c0>)
 80015fe:	f009 fd69 	bl	800b0d4 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001602:	2011      	movs	r0, #17
 8001604:	f7ff f93e 	bl	8000884 <NRF24_read_register>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800160e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	4966      	ldr	r1, [pc, #408]	; (80017b4 <printRadioSettings+0x6e0>)
 800161c:	4618      	mov	r0, r3
 800161e:	f00e ff0d 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fe5a 	bl	80002e0 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	f107 0108 	add.w	r1, r7, #8
 8001634:	230a      	movs	r3, #10
 8001636:	4857      	ldr	r0, [pc, #348]	; (8001794 <printRadioSettings+0x6c0>)
 8001638:	f009 fd4c 	bl	800b0d4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 800163c:	2012      	movs	r0, #18
 800163e:	f7ff f921 	bl	8000884 <NRF24_read_register>
 8001642:	4603      	mov	r3, r0
 8001644:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001648:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800164c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4958      	ldr	r1, [pc, #352]	; (80017b8 <printRadioSettings+0x6e4>)
 8001656:	4618      	mov	r0, r3
 8001658:	f00e fef0 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fe3d 	bl	80002e0 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	f107 0108 	add.w	r1, r7, #8
 800166e:	230a      	movs	r3, #10
 8001670:	4848      	ldr	r0, [pc, #288]	; (8001794 <printRadioSettings+0x6c0>)
 8001672:	f009 fd2f 	bl	800b0d4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001676:	2013      	movs	r0, #19
 8001678:	f7ff f904 	bl	8000884 <NRF24_read_register>
 800167c:	4603      	mov	r3, r0
 800167e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001682:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	494b      	ldr	r1, [pc, #300]	; (80017bc <printRadioSettings+0x6e8>)
 8001690:	4618      	mov	r0, r3
 8001692:	f00e fed3 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fe20 	bl	80002e0 <strlen>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	f107 0108 	add.w	r1, r7, #8
 80016a8:	230a      	movs	r3, #10
 80016aa:	483a      	ldr	r0, [pc, #232]	; (8001794 <printRadioSettings+0x6c0>)
 80016ac:	f009 fd12 	bl	800b0d4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80016b0:	2014      	movs	r0, #20
 80016b2:	f7ff f8e7 	bl	8000884 <NRF24_read_register>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	493d      	ldr	r1, [pc, #244]	; (80017c0 <printRadioSettings+0x6ec>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00e feb6 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fe03 	bl	80002e0 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f107 0108 	add.w	r1, r7, #8
 80016e2:	230a      	movs	r3, #10
 80016e4:	482b      	ldr	r0, [pc, #172]	; (8001794 <printRadioSettings+0x6c0>)
 80016e6:	f009 fcf5 	bl	800b0d4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80016ea:	2015      	movs	r0, #21
 80016ec:	f7ff f8ca 	bl	8000884 <NRF24_read_register>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4930      	ldr	r1, [pc, #192]	; (80017c4 <printRadioSettings+0x6f0>)
 8001704:	4618      	mov	r0, r3
 8001706:	f00e fe99 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fde6 	bl	80002e0 <strlen>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	f107 0108 	add.w	r1, r7, #8
 800171c:	230a      	movs	r3, #10
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <printRadioSettings+0x6c0>)
 8001720:	f009 fcd8 	bl	800b0d4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001724:	2016      	movs	r0, #22
 8001726:	f7ff f8ad 	bl	8000884 <NRF24_read_register>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001730:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001734:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	4922      	ldr	r1, [pc, #136]	; (80017c8 <printRadioSettings+0x6f4>)
 800173e:	4618      	mov	r0, r3
 8001740:	f00e fe7c 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fdc9 	bl	80002e0 <strlen>
 800174e:	4603      	mov	r3, r0
 8001750:	b29a      	uxth	r2, r3
 8001752:	f107 0108 	add.w	r1, r7, #8
 8001756:	230a      	movs	r3, #10
 8001758:	480e      	ldr	r0, [pc, #56]	; (8001794 <printRadioSettings+0x6c0>)
 800175a:	f009 fcbb 	bl	800b0d4 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800175e:	201c      	movs	r0, #28
 8001760:	f7ff f890 	bl	8000884 <NRF24_read_register>
 8001764:	4603      	mov	r3, r0
 8001766:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800176a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800176e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001772:	2b00      	cmp	r3, #0
 8001774:	bfcc      	ite	gt
 8001776:	2301      	movgt	r3, #1
 8001778:	2300      	movle	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800177e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001782:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001786:	2b00      	cmp	r3, #0
 8001788:	bfcc      	ite	gt
 800178a:	2301      	movgt	r3, #1
 800178c:	2300      	movle	r3, #0
 800178e:	e01d      	b.n	80017cc <printRadioSettings+0x6f8>
 8001790:	080136a4 	.word	0x080136a4
 8001794:	240002ac 	.word	0x240002ac
 8001798:	080136b8 	.word	0x080136b8
 800179c:	080136e8 	.word	0x080136e8
 80017a0:	08013718 	.word	0x08013718
 80017a4:	08013740 	.word	0x08013740
 80017a8:	08013768 	.word	0x08013768
 80017ac:	08013790 	.word	0x08013790
 80017b0:	080137b8 	.word	0x080137b8
 80017b4:	080137e4 	.word	0x080137e4
 80017b8:	08013800 	.word	0x08013800
 80017bc:	0801381c 	.word	0x0801381c
 80017c0:	08013838 	.word	0x08013838
 80017c4:	08013854 	.word	0x08013854
 80017c8:	08013870 	.word	0x08013870
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bfcc      	ite	gt
 80017dc:	2301      	movgt	r3, #1
 80017de:	2300      	movle	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bfcc      	ite	gt
 80017f0:	2301      	movgt	r3, #1
 80017f2:	2300      	movle	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017fc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001800:	2b00      	cmp	r3, #0
 8001802:	bfcc      	ite	gt
 8001804:	2301      	movgt	r3, #1
 8001806:	2300      	movle	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800180c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001810:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001814:	2b00      	cmp	r3, #0
 8001816:	bfcc      	ite	gt
 8001818:	2301      	movgt	r3, #1
 800181a:	2300      	movle	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f107 0008 	add.w	r0, r7, #8
 8001822:	9303      	str	r3, [sp, #12]
 8001824:	9402      	str	r4, [sp, #8]
 8001826:	9101      	str	r1, [sp, #4]
 8001828:	9200      	str	r2, [sp, #0]
 800182a:	4633      	mov	r3, r6
 800182c:	462a      	mov	r2, r5
 800182e:	4936      	ldr	r1, [pc, #216]	; (8001908 <printRadioSettings+0x834>)
 8001830:	f00e fe04 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fd51 	bl	80002e0 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	f107 0108 	add.w	r1, r7, #8
 8001846:	230a      	movs	r3, #10
 8001848:	4830      	ldr	r0, [pc, #192]	; (800190c <printRadioSettings+0x838>)
 800184a:	f009 fc43 	bl	800b0d4 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800184e:	201d      	movs	r0, #29
 8001850:	f7ff f818 	bl	8000884 <NRF24_read_register>
 8001854:	4603      	mov	r3, r0
 8001856:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800185a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <printRadioSettings+0x7a0>
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	4929      	ldr	r1, [pc, #164]	; (8001910 <printRadioSettings+0x83c>)
 800186c:	4618      	mov	r0, r3
 800186e:	f00e fde5 	bl	801043c <siprintf>
 8001872:	e005      	b.n	8001880 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	4926      	ldr	r1, [pc, #152]	; (8001914 <printRadioSettings+0x840>)
 800187a:	4618      	mov	r0, r3
 800187c:	f00e fdde 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fd2b 	bl	80002e0 <strlen>
 800188a:	4603      	mov	r3, r0
 800188c:	b29a      	uxth	r2, r3
 800188e:	f107 0108 	add.w	r1, r7, #8
 8001892:	230a      	movs	r3, #10
 8001894:	481d      	ldr	r0, [pc, #116]	; (800190c <printRadioSettings+0x838>)
 8001896:	f009 fc1d 	bl	800b0d4 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800189a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <printRadioSettings+0x7e0>
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	491b      	ldr	r1, [pc, #108]	; (8001918 <printRadioSettings+0x844>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00e fdc5 	bl	801043c <siprintf>
 80018b2:	e005      	b.n	80018c0 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	4918      	ldr	r1, [pc, #96]	; (800191c <printRadioSettings+0x848>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	f00e fdbe 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fd0b 	bl	80002e0 <strlen>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	f107 0108 	add.w	r1, r7, #8
 80018d2:	230a      	movs	r3, #10
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <printRadioSettings+0x838>)
 80018d6:	f009 fbfd 	bl	800b0d4 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	4910      	ldr	r1, [pc, #64]	; (8001920 <printRadioSettings+0x84c>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f00e fdab 	bl	801043c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fcf8 	bl	80002e0 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	f107 0108 	add.w	r1, r7, #8
 80018f8:	230a      	movs	r3, #10
 80018fa:	4804      	ldr	r0, [pc, #16]	; (800190c <printRadioSettings+0x838>)
 80018fc:	f009 fbea 	bl	800b0d4 <HAL_UART_Transmit>
}
 8001900:	bf00      	nop
 8001902:	3774      	adds	r7, #116	; 0x74
 8001904:	46bd      	mov	sp, r7
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	0801388c 	.word	0x0801388c
 800190c:	240002ac 	.word	0x240002ac
 8001910:	080138d8 	.word	0x080138d8
 8001914:	080138f0 	.word	0x080138f0
 8001918:	08013908 	.word	0x08013908
 800191c:	08013924 	.word	0x08013924
 8001920:	080134f8 	.word	0x080134f8

08001924 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001924:	b084      	sub	sp, #16
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
 800192a:	f107 0c08 	add.w	ip, r7, #8
 800192e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <nrf24_DebugUART_Init+0x2c>)
 8001934:	4618      	mov	r0, r3
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	2290      	movs	r2, #144	; 0x90
 800193c:	4619      	mov	r1, r3
 800193e:	f00d ff86 	bl	800f84e <memcpy>
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800194a:	b004      	add	sp, #16
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	240002ac 	.word	0x240002ac

08001954 <mySetupNRF24>:
//********** My Function ************//
//Collects setup NRF24 functions
//Group Port, CSN Pin, CE Pin, SPI handle, UART handle, channel, address, speed
void mySetupNRF24(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin,
		SPI_HandleTypeDef nrfSPI,UART_HandleTypeDef nrf24Uart,
		uint8_t channel, uint64_t address, rf24_datarate_e speed){
 8001954:	b082      	sub	sp, #8
 8001956:	b5b0      	push	{r4, r5, r7, lr}
 8001958:	b0a4      	sub	sp, #144	; 0x90
 800195a:	af22      	add	r7, sp, #136	; 0x88
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
 8001964:	4613      	mov	r3, r2
 8001966:	803b      	strh	r3, [r7, #0]
	NRF24_begin(nrf24PORT,nrfCSN_Pin,nrfCE_Pin,nrfSPI);
 8001968:	883d      	ldrh	r5, [r7, #0]
 800196a:	887c      	ldrh	r4, [r7, #2]
 800196c:	4668      	mov	r0, sp
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	2284      	movs	r2, #132	; 0x84
 8001974:	4619      	mov	r1, r3
 8001976:	f00d ff6a 	bl	800f84e <memcpy>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	462a      	mov	r2, r5
 800197e:	4621      	mov	r1, r4
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff f867 	bl	8000a54 <NRF24_begin>
	nrf24_DebugUART_Init(nrf24Uart);
 8001986:	4668      	mov	r0, sp
 8001988:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800198c:	2280      	movs	r2, #128	; 0x80
 800198e:	4619      	mov	r1, r3
 8001990:	f00d ff5d 	bl	800f84e <memcpy>
 8001994:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001998:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800199a:	f7ff ffc3 	bl	8001924 <nrf24_DebugUART_Init>
	//NRF24_setAutoAck(true);
	NRF24_setAutoAck(false);
 800199e:	2000      	movs	r0, #0
 80019a0:	f7ff fa7a 	bl	8000e98 <NRF24_setAutoAck>
	NRF24_setChannel(channel);
 80019a4:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff f9ea 	bl	8000d82 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 80019ae:	2020      	movs	r0, #32
 80019b0:	f7ff f9fc 	bl	8000dac <NRF24_setPayloadSize>
	NRF24_openReadingPipe(0, address);
 80019b4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7ff f979 	bl	8000cb0 <NRF24_openReadingPipe>
	NRF24_enableDynamicPayloads();
 80019be:	f7ff fa21 	bl	8000e04 <NRF24_enableDynamicPayloads>
	//NRF24_enableAckPayload();
	NRF24_setDataRate(speed);
 80019c2:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fab4 	bl	8000f34 <NRF24_setDataRate>
	printRadioSettings();
 80019cc:	f7ff fb82 	bl	80010d4 <printRadioSettings>
	NRF24_startListening();
 80019d0:	f7ff f920 	bl	8000c14 <NRF24_startListening>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80019de:	b002      	add	sp, #8
 80019e0:	4770      	bx	lr

080019e2 <myReadData>:

//Read Data
uint8_t myReadData(uint8_t* myRxData){
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
	uint8_t m = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]
  if(NRF24_available()){
 80019ee:	f7ff f937 	bl	8000c60 <NRF24_available>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00d      	beq.n	8001a14 <myReadData+0x32>
			m = NRF24_read(myRxData, 32);
 80019f8:	2120      	movs	r1, #32
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff f938 	bl	8000c70 <NRF24_read>
 8001a00:	4603      	mov	r3, r0
 8001a02:	73fb      	strb	r3, [r7, #15]
//			NRF24_writeAckPayload(1, myAckPayload, 32); //Sends acknowledgement to receiver
			myRxData[32] = '\r';
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3320      	adds	r3, #32
 8001a08:	220d      	movs	r2, #13
 8001a0a:	701a      	strb	r2, [r3, #0]
			myRxData[32+1] = '\n';
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3321      	adds	r3, #33	; 0x21
 8001a10:	220a      	movs	r2, #10
 8001a12:	701a      	strb	r2, [r3, #0]
//			HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, 32+2, 10); //Problem with printf
		}
  return m;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <setPwmS>:
>>>>>>> Stashed changes
	htimN.Instance->CCR1 = ccr;


}

void setPwmS(struct escValues *escValues){
<<<<<<< Updated upstream
 80007b8:	b480      	push	{r7}
 80007ba:	b087      	sub	sp, #28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
=======
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	double ccr;
	double pwmPeriodInSeconds; //Fix from setPwmS

	escValues->minPulseWidth = MY_SATURATE(escValues->minPulseWidth,escValues->pwmPeriod);
<<<<<<< Updated upstream
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007c8:	429a      	cmp	r2, r3
 80007ca:	bf28      	it	cs
 80007cc:	461a      	movcs	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	64da      	str	r2, [r3, #76]	; 0x4c
	escValues->maxPulseWidth = MY_SATURATE(escValues->maxPulseWidth,escValues->pwmPeriod);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007da:	429a      	cmp	r2, r3
 80007dc:	bf28      	it	cs
 80007de:	461a      	movcs	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	651a      	str	r2, [r3, #80]	; 0x50
	escValues->percentage = MY_SATURATE(escValues->percentage, escValues->resolution);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ec:	429a      	cmp	r2, r3
 80007ee:	bf28      	it	cs
 80007f0:	461a      	movcs	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	65da      	str	r2, [r3, #92]	; 0x5c

	escValues->pulseWidth =  ( ( (escValues->maxPulseWidth - escValues->minPulseWidth)/escValues->resolution ) * escValues->percentage ) + escValues->minPulseWidth;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	1ad2      	subs	r2, r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000804:	fbb2 f3f3 	udiv	r3, r2, r3
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800080c:	fb03 f202 	mul.w	r2, r3, r2
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	4413      	add	r3, r2
 8000816:	ee07 3a90 	vmov	s15, r3
 800081a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

	escValues->pulseWidth = escValues->pulseWidth/1e6;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 800082a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000890 <setPwmS+0xd8>
 800082e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	pwmPeriodInSeconds = escValues->pwmPeriod/1e6;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800083c:	ee07 3a90 	vmov	s15, r3
 8000840:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000844:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000890 <setPwmS+0xd8>
 8000848:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800084c:	ed87 7b04 	vstr	d7, [r7, #16]

	ccr = (escValues->pulseWidth * escValues->htimN.Init.Period) / pwmPeriodInSeconds;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	ee07 3a90 	vmov	s15, r3
 800085e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000862:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000866:	ed97 6b04 	vldr	d6, [r7, #16]
 800086a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800086e:	ed87 7b02 	vstr	d7, [r7, #8]
	escValues->htimN.Instance->CCR1 = ccr;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	ed97 7b02 	vldr	d7, [r7, #8]
 800087a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800087e:	ee17 2a90 	vmov	r2, s15
 8000882:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000884:	bf00      	nop
 8000886:	371c      	adds	r7, #28
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	00000000 	.word	0x00000000
 8000894:	412e8480 	.word	0x412e8480

08000898 <MX_FREERTOS_Init>:
=======
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a30:	429a      	cmp	r2, r3
 8001a32:	bf28      	it	cs
 8001a34:	461a      	movcs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	64da      	str	r2, [r3, #76]	; 0x4c
	escValues->maxPulseWidth = MY_SATURATE(escValues->maxPulseWidth,escValues->pwmPeriod);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	429a      	cmp	r2, r3
 8001a44:	bf28      	it	cs
 8001a46:	461a      	movcs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	651a      	str	r2, [r3, #80]	; 0x50
	escValues->percentage = MY_SATURATE(escValues->percentage, escValues->resolution);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a54:	429a      	cmp	r2, r3
 8001a56:	bf28      	it	cs
 8001a58:	461a      	movcs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	65da      	str	r2, [r3, #92]	; 0x5c

	escValues->pulseWidth =  ( ( (escValues->maxPulseWidth - escValues->minPulseWidth)/escValues->resolution ) * escValues->percentage ) + escValues->minPulseWidth;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	1ad2      	subs	r2, r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a74:	fb03 f202 	mul.w	r2, r3, r2
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7c:	4413      	add	r3, r2
 8001a7e:	ee07 3a90 	vmov	s15, r3
 8001a82:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

	escValues->pulseWidth = escValues->pulseWidth/1e6;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8001a92:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001af8 <setPwmS+0xd8>
 8001a96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	pwmPeriodInSeconds = escValues->pwmPeriod/1e6;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001aac:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001af8 <setPwmS+0xd8>
 8001ab0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ab4:	ed87 7b04 	vstr	d7, [r7, #16]

	ccr = (escValues->pulseWidth * escValues->htimN.Init.Period) / pwmPeriodInSeconds;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001aca:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001ace:	ed97 6b04 	vldr	d6, [r7, #16]
 8001ad2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ad6:	ed87 7b02 	vstr	d7, [r7, #8]
	escValues->htimN.Instance->CCR1 = ccr;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	ed97 7b02 	vldr	d7, [r7, #8]
 8001ae2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ae6:	ee17 2a90 	vmov	r2, s15
 8001aea:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001aec:	bf00      	nop
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	00000000 	.word	0x00000000
 8001afc:	412e8480 	.word	0x412e8480

08001b00 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001b04:	4b32      	ldr	r3, [pc, #200]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b06:	4a33      	ldr	r2, [pc, #204]	; (8001bd4 <MX_FDCAN1_Init+0xd4>)
 8001b08:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b0a:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001b10:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001b16:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001b1c:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001b22:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8001b28:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8001b2e:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b30:	2208      	movs	r2, #8
 8001b32:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x3F;
 8001b34:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b36:	223f      	movs	r2, #63	; 0x3f
 8001b38:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8001b3a:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001b40:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001b4c:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001b52:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b72:	2204      	movs	r2, #4
 8001b74:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b7e:	2204      	movs	r2, #4
 8001b80:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001b82:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001ba8:	2204      	movs	r2, #4
 8001baa:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001bac:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001bae:	f003 ff1b 	bl	80059e8 <HAL_FDCAN_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001bb8:	f001 fcd6 	bl	8003568 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001bbc:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001bbe:	f004 f8f1 	bl	8005da4 <HAL_FDCAN_Start>
	}
	/* Start Error */

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <MX_FDCAN1_Init+0xd0>)
 8001bc8:	f004 fa86 	bl	80060d8 <HAL_FDCAN_ActivateNotification>
	}
	/* Notification Error */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	2400033c 	.word	0x2400033c
 8001bd4:	4000a000 	.word	0x4000a000

08001bd8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b0b8      	sub	sp, #224	; 0xe0
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	22bc      	movs	r2, #188	; 0xbc
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f00d fe36 	bl	800f86a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a25      	ldr	r2, [pc, #148]	; (8001c98 <HAL_FDCAN_MspInit+0xc0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d142      	bne.n	8001c8e <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001c0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c12:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c14:	f107 0310 	add.w	r3, r7, #16
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f005 fe69 	bl	80078f0 <HAL_RCCEx_PeriphCLKConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001c24:	f001 fca0 	bl	8003568 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c28:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <HAL_FDCAN_MspInit+0xc4>)
 8001c2a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c2e:	4a1b      	ldr	r2, [pc, #108]	; (8001c9c <HAL_FDCAN_MspInit+0xc4>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c34:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001c38:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <HAL_FDCAN_MspInit+0xc4>)
 8001c3a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_FDCAN_MspInit+0xc4>)
 8001c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4c:	4a13      	ldr	r2, [pc, #76]	; (8001c9c <HAL_FDCAN_MspInit+0xc4>)
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_FDCAN_MspInit+0xc4>)
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c64:	2303      	movs	r3, #3
 8001c66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c7c:	2309      	movs	r3, #9
 8001c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c82:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <HAL_FDCAN_MspInit+0xc8>)
 8001c8a:	f004 fc25 	bl	80064d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001c8e:	bf00      	nop
 8001c90:	37e0      	adds	r7, #224	; 0xe0
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	4000a000 	.word	0x4000a000
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	58020c00 	.word	0x58020c00

08001ca4 <MX_FREERTOS_Init>:
>>>>>>> Stashed changes
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
<<<<<<< Updated upstream
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
=======
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
<<<<<<< Updated upstream
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <MX_FREERTOS_Init+0x34>)
 800089e:	f008 fc18 	bl	80090d2 <osMutexNew>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <MX_FREERTOS_Init+0x38>)
 80008a6:	6013      	str	r3, [r2, #0]
=======
 8001ca8:	481a      	ldr	r0, [pc, #104]	; (8001d14 <MX_FREERTOS_Init+0x70>)
 8001caa:	f00a fbf4 	bl	800c496 <osMutexNew>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <MX_FREERTOS_Init+0x74>)
 8001cb2:	6013      	str	r3, [r2, #0]

  /* creation of myMutex02 */
  myMutex02Handle = osMutexNew(&myMutex02_attributes);
 8001cb4:	4819      	ldr	r0, [pc, #100]	; (8001d1c <MX_FREERTOS_Init+0x78>)
 8001cb6:	f00a fbee 	bl	800c496 <osMutexNew>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4a18      	ldr	r2, [pc, #96]	; (8001d20 <MX_FREERTOS_Init+0x7c>)
 8001cbe:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
<<<<<<< Updated upstream
 80008a8:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <MX_FREERTOS_Init+0x3c>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	480a      	ldr	r0, [pc, #40]	; (80008d8 <MX_FREERTOS_Init+0x40>)
 80008ae:	f008 fb63 	bl	8008f78 <osThreadNew>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a09      	ldr	r2, [pc, #36]	; (80008dc <MX_FREERTOS_Init+0x44>)
 80008b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  // blinkGreenTaskHandle = osThreadNew(blinkGreenTask, NULL, &blinkGreenTask_attributes);
  escTaskHandle = osThreadNew(escTask, NULL, &escTaskHandle_attributes);
 80008b8:	4a09      	ldr	r2, [pc, #36]	; (80008e0 <MX_FREERTOS_Init+0x48>)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <MX_FREERTOS_Init+0x4c>)
 80008be:	f008 fb5b 	bl	8008f78 <osThreadNew>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <MX_FREERTOS_Init+0x50>)
 80008c6:	6013      	str	r3, [r2, #0]
=======
 8001cc0:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <MX_FREERTOS_Init+0x80>)
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4818      	ldr	r0, [pc, #96]	; (8001d28 <MX_FREERTOS_Init+0x84>)
 8001cc6:	f00a fb39 	bl	800c33c <osThreadNew>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <MX_FREERTOS_Init+0x88>)
 8001cce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  // blinkGreenTaskHandle = osThreadNew(blinkGreenTask, NULL, &blinkGreenTask_attributes);

  servoTaskHandle = osThreadNew(servoTask, NULL, &servoTaskHandle_attributes); //Starting tasks
 8001cd0:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <MX_FREERTOS_Init+0x8c>)
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4817      	ldr	r0, [pc, #92]	; (8001d34 <MX_FREERTOS_Init+0x90>)
 8001cd6:	f00a fb31 	bl	800c33c <osThreadNew>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4a16      	ldr	r2, [pc, #88]	; (8001d38 <MX_FREERTOS_Init+0x94>)
 8001cde:	6013      	str	r3, [r2, #0]
  escTaskHandle = osThreadNew(escTask, NULL, &escTaskHandle_attributes);
 8001ce0:	4a16      	ldr	r2, [pc, #88]	; (8001d3c <MX_FREERTOS_Init+0x98>)
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4816      	ldr	r0, [pc, #88]	; (8001d40 <MX_FREERTOS_Init+0x9c>)
 8001ce6:	f00a fb29 	bl	800c33c <osThreadNew>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <MX_FREERTOS_Init+0xa0>)
 8001cee:	6013      	str	r3, [r2, #0]
  radioTaskHandle = osThreadNew(radioTask, NULL, &radioTaskHandle_attributes);
 8001cf0:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <MX_FREERTOS_Init+0xa4>)
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4815      	ldr	r0, [pc, #84]	; (8001d4c <MX_FREERTOS_Init+0xa8>)
 8001cf6:	f00a fb21 	bl	800c33c <osThreadNew>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <MX_FREERTOS_Init+0xac>)
 8001cfe:	6013      	str	r3, [r2, #0]
  wpTaskHandle = osThreadNew(wpTask, NULL, &wpTaskHandle_attributes);
 8001d00:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <MX_FREERTOS_Init+0xb0>)
 8001d02:	2100      	movs	r1, #0
 8001d04:	4814      	ldr	r0, [pc, #80]	; (8001d58 <MX_FREERTOS_Init+0xb4>)
 8001d06:	f00a fb19 	bl	800c33c <osThreadNew>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <MX_FREERTOS_Init+0xb8>)
 8001d0e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
<<<<<<< Updated upstream
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	0800fdd8 	.word	0x0800fdd8
 80008d0:	240002f4 	.word	0x240002f4
 80008d4:	0800fdb4 	.word	0x0800fdb4
 80008d8:	080008ed 	.word	0x080008ed
 80008dc:	240002f0 	.word	0x240002f0
 80008e0:	0800fd48 	.word	0x0800fd48
 80008e4:	08000a65 	.word	0x08000a65
 80008e8:	240002e4 	.word	0x240002e4

080008ec <StartDefaultTask>:
=======
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	08013dec 	.word	0x08013dec
 8001d18:	2400071c 	.word	0x2400071c
 8001d1c:	08013dfc 	.word	0x08013dfc
 8001d20:	24000720 	.word	0x24000720
 8001d24:	08013dc8 	.word	0x08013dc8
 8001d28:	08001d61 	.word	0x08001d61
 8001d2c:	24000718 	.word	0x24000718
 8001d30:	08013cf0 	.word	0x08013cf0
 8001d34:	08002331 	.word	0x08002331
 8001d38:	24000700 	.word	0x24000700
 8001d3c:	08013ccc 	.word	0x08013ccc
 8001d40:	08002151 	.word	0x08002151
 8001d44:	240006fc 	.word	0x240006fc
 8001d48:	08013d80 	.word	0x08013d80
 8001d4c:	08001d79 	.word	0x08001d79
 8001d50:	24000710 	.word	0x24000710
 8001d54:	08013da4 	.word	0x08013da4
 8001d58:	08001ef9 	.word	0x08001ef9
 8001d5c:	24000714 	.word	0x24000714

08001d60 <StartDefaultTask>:
>>>>>>> Stashed changes
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
<<<<<<< Updated upstream
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
=======
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
<<<<<<< Updated upstream
 80008f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80008f8:	f008 fbd0 	bl	800909c <osDelay>
 80008fc:	e7fa      	b.n	80008f4 <StartDefaultTask+0x8>
	...

08000900 <imuTask>:
		osDelay(500);
=======
 8001d68:	f242 7010 	movw	r0, #10000	; 0x2710
 8001d6c:	f00a fb78 	bl	800c460 <osDelay>
 8001d70:	e7fa      	b.n	8001d68 <StartDefaultTask+0x8>
 8001d72:	0000      	movs	r0, r0
 8001d74:	0000      	movs	r0, r0
	...

08001d78 <radioTask>:
		HAL_GPIO_TogglePin(LD1_Green_GPIO_Port,LD1_Green_Pin);
		osDelay(500);
	}
}

void radioTask(void *argument) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	ed2d 8b02 	vpush	{d8}
 8001d7e:	b08e      	sub	sp, #56	; 0x38
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  float dt = 0.1;
 8001d84:	4b54      	ldr	r3, [pc, #336]	; (8001ed8 <radioTask+0x160>)
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
  float real_x = 0.0;
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	637b      	str	r3, [r7, #52]	; 0x34
  float real_y = 0.0;
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	633b      	str	r3, [r7, #48]	; 0x30
  float init_x = real_x;
 8001d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  float init_y = real_y;
 8001d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9a:	623b      	str	r3, [r7, #32]
  float vx = 0.1;
 8001d9c:	4b4e      	ldr	r3, [pc, #312]	; (8001ed8 <radioTask+0x160>)
 8001d9e:	61fb      	str	r3, [r7, #28]
  float vy = 0.1;
 8001da0:	4b4d      	ldr	r3, [pc, #308]	; (8001ed8 <radioTask+0x160>)
 8001da2:	61bb      	str	r3, [r7, #24]
  float meas_variance = 0.1 * 0.1;
 8001da4:	4b4d      	ldr	r3, [pc, #308]	; (8001edc <radioTask+0x164>)
 8001da6:	617b      	str	r3, [r7, #20]
  float accel_var_x = 0.1;
 8001da8:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <radioTask+0x160>)
 8001daa:	613b      	str	r3, [r7, #16]
  float accel_var_y = 0.1;
 8001dac:	4b4a      	ldr	r3, [pc, #296]	; (8001ed8 <radioTask+0x160>)
 8001dae:	60fb      	str	r3, [r7, #12]
  initKalman(&kf, init_x, init_y, vx, vy, accel_var_x, accel_var_y);
 8001db0:	edd7 2a03 	vldr	s5, [r7, #12]
 8001db4:	ed97 2a04 	vldr	s4, [r7, #16]
 8001db8:	edd7 1a06 	vldr	s3, [r7, #24]
 8001dbc:	ed97 1a07 	vldr	s2, [r7, #28]
 8001dc0:	edd7 0a08 	vldr	s1, [r7, #32]
 8001dc4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001dc8:	4845      	ldr	r0, [pc, #276]	; (8001ee0 <radioTask+0x168>)
 8001dca:	f000 fea9 	bl	8002b20 <initKalman>
  int counter = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(;;)
	{
		vx = speed * cos(M_PI / 180 * mpu.pose[2]);
 8001dd2:	4b44      	ldr	r3, [pc, #272]	; (8001ee4 <radioTask+0x16c>)
 8001dd4:	edd3 7a00 	vldr	s15, [r3]
 8001dd8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001ddc:	4b42      	ldr	r3, [pc, #264]	; (8001ee8 <radioTask+0x170>)
 8001dde:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001de2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001de6:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8001ed0 <radioTask+0x158>
 8001dea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001dee:	eeb0 0b47 	vmov.f64	d0, d7
 8001df2:	f010 fb71 	bl	80124d8 <cos>
 8001df6:	eeb0 7b40 	vmov.f64	d7, d0
 8001dfa:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001dfe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e02:	edc7 7a07 	vstr	s15, [r7, #28]
		vy = speed * sin(M_PI / 180 * mpu.pose[2]);
 8001e06:	4b37      	ldr	r3, [pc, #220]	; (8001ee4 <radioTask+0x16c>)
 8001e08:	edd3 7a00 	vldr	s15, [r3]
 8001e0c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001e10:	4b35      	ldr	r3, [pc, #212]	; (8001ee8 <radioTask+0x170>)
 8001e12:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001e16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e1a:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8001ed0 <radioTask+0x158>
 8001e1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e22:	eeb0 0b47 	vmov.f64	d0, d7
 8001e26:	f010 fba3 	bl	8012570 <sin>
 8001e2a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e2e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001e32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e36:	edc7 7a06 	vstr	s15, [r7, #24]
	    real_x += dt * vx;
 8001e3a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001e3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e46:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	    real_y +=  dt * vy;
 8001e52:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001e56:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e66:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		predict(&kf, dt);
 8001e6a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001e6e:	481c      	ldr	r0, [pc, #112]	; (8001ee0 <radioTask+0x168>)
 8001e70:	f000 febc 	bl	8002bec <predict>

		if(counter % 10 == 0){
 8001e74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e76:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <radioTask+0x174>)
 8001e78:	fb83 2301 	smull	r2, r3, r3, r1
 8001e7c:	109a      	asrs	r2, r3, #2
 8001e7e:	17cb      	asrs	r3, r1, #31
 8001e80:	1ad2      	subs	r2, r2, r3
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	1aca      	subs	r2, r1, r3
 8001e8c:	2a00      	cmp	r2, #0
 8001e8e:	d10e      	bne.n	8001eae <radioTask+0x136>

//		  update(&kf, real_x, real_y, meas_variance);
	      update(&kf, dataCam.px, dataCam.py, meas_variance);
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <radioTask+0x178>)
 8001e92:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <radioTask+0x178>)
 8001e98:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e9c:	ed97 1a05 	vldr	s2, [r7, #20]
 8001ea0:	eef0 0a47 	vmov.f32	s1, s14
 8001ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea8:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <radioTask+0x168>)
 8001eaa:	f000 ff6b 	bl	8002d84 <update>
		}
		counter++;
 8001eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		// printf("Real: %3.3f, %3.3f || Estimated: %3.3f, %3.3f || V: %3.3f, %3.3f || Psi: %3.3f \r\n",
		// real_x, real_y, kf.x[0], kf.y[0], vx, vy, mpu.pose[2]);
		osDelay(dt * 1000);
 8001eb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001eb8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001ef4 <radioTask+0x17c>
 8001ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ec4:	ee17 0a90 	vmov	r0, s15
 8001ec8:	f00a faca 	bl	800c460 <osDelay>
		vx = speed * cos(M_PI / 180 * mpu.pose[2]);
 8001ecc:	e781      	b.n	8001dd2 <radioTask+0x5a>
 8001ece:	bf00      	nop
 8001ed0:	a2529d39 	.word	0xa2529d39
 8001ed4:	3f91df46 	.word	0x3f91df46
 8001ed8:	3dcccccd 	.word	0x3dcccccd
 8001edc:	3c23d70a 	.word	0x3c23d70a
 8001ee0:	240004fc 	.word	0x240004fc
 8001ee4:	240004f8 	.word	0x240004f8
 8001ee8:	240003dc 	.word	0x240003dc
 8001eec:	66666667 	.word	0x66666667
 8001ef0:	240004e4 	.word	0x240004e4
 8001ef4:	447a0000 	.word	0x447a0000

08001ef8 <wpTask>:
	}
}

void wpTask(void *argument) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  init_waypoint_buffer(&wp_buf);
 8001f00:	481d      	ldr	r0, [pc, #116]	; (8001f78 <wpTask+0x80>)
 8001f02:	f003 fb2b 	bl	800555c <init_waypoint_buffer>
//  add_wp(&wp_buf, 0, 0);
//  add_wp(&wp_buf, 1, 0);
//  add_wp(&wp_buf, 1, 1);
//  add_wp(&wp_buf, 0, 1);
//  add_wp(&wp_buf, 0, 0);
  add_wp(&wp_buf, 0.1, 0.85);
 8001f06:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8001f7c <wpTask+0x84>
 8001f0a:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001f80 <wpTask+0x88>
 8001f0e:	481a      	ldr	r0, [pc, #104]	; (8001f78 <wpTask+0x80>)
 8001f10:	f003 fb30 	bl	8005574 <add_wp>
  add_wp(&wp_buf, 2.5, 0.85);
 8001f14:	eddf 0a19 	vldr	s1, [pc, #100]	; 8001f7c <wpTask+0x84>
 8001f18:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8001f1c:	4816      	ldr	r0, [pc, #88]	; (8001f78 <wpTask+0x80>)
 8001f1e:	f003 fb29 	bl	8005574 <add_wp>
  float dt = 0.1;
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <wpTask+0x8c>)
 8001f24:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
    if(stanley.e_a < 0.2 && stanley.e_a > 0.0)
 8001f26:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <wpTask+0x90>)
 8001f28:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f30:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8001f70 <wpTask+0x78>
 8001f34:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3c:	d50a      	bpl.n	8001f54 <wpTask+0x5c>
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <wpTask+0x90>)
 8001f40:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4c:	dd02      	ble.n	8001f54 <wpTask+0x5c>
      to_next(&wp_buf);
 8001f4e:	480a      	ldr	r0, [pc, #40]	; (8001f78 <wpTask+0x80>)
 8001f50:	f003 fb44 	bl	80055dc <to_next>
	osDelay(dt * 1000);
 8001f54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f58:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001f8c <wpTask+0x94>
 8001f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f64:	ee17 0a90 	vmov	r0, s15
 8001f68:	f00a fa7a 	bl	800c460 <osDelay>
    if(stanley.e_a < 0.2 && stanley.e_a > 0.0)
 8001f6c:	e7db      	b.n	8001f26 <wpTask+0x2e>
 8001f6e:	bf00      	nop
 8001f70:	9999999a 	.word	0x9999999a
 8001f74:	3fc99999 	.word	0x3fc99999
 8001f78:	2400055c 	.word	0x2400055c
 8001f7c:	3f59999a 	.word	0x3f59999a
 8001f80:	3dcccccd 	.word	0x3dcccccd
 8001f84:	3dcccccd 	.word	0x3dcccccd
 8001f88:	2400049c 	.word	0x2400049c
 8001f8c:	447a0000 	.word	0x447a0000

08001f90 <imuTask>:
>>>>>>> Stashed changes
	}
}

void imuTask(void *argument)
{
<<<<<<< Updated upstream
 8000900:	b580      	push	{r7, lr}
 8000902:	b090      	sub	sp, #64	; 0x40
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	  char axisLabel[3] = {'X','Y','Z'}; //Var for printing labels
 8000908:	4a47      	ldr	r2, [pc, #284]	; (8000a28 <imuTask+0x128>)
 800090a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800090e:	6812      	ldr	r2, [r2, #0]
 8000910:	4611      	mov	r1, r2
 8000912:	8019      	strh	r1, [r3, #0]
 8000914:	3302      	adds	r3, #2
 8000916:	0c12      	lsrs	r2, r2, #16
 8000918:	701a      	strb	r2, [r3, #0]
	  printf("Initiating IMU...\r\n"); //Initiating MPU9250
 800091a:	4844      	ldr	r0, [pc, #272]	; (8000a2c <imuTask+0x12c>)
 800091c:	f00c f9f2 	bl	800cd04 <puts>
	  initMPU9250(&mpu, AFS_2G, GFS_250DPS, M_8Hz);
 8000920:	2302      	movs	r3, #2
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	4842      	ldr	r0, [pc, #264]	; (8000a30 <imuTask+0x130>)
 8000928:	f000 fc0f 	bl	800114a <initMPU9250>

	  printf("Calibrating IMU...\r\n");
 800092c:	4841      	ldr	r0, [pc, #260]	; (8000a34 <imuTask+0x134>)
 800092e:	f00c f9e9 	bl	800cd04 <puts>
	  float accelBias[3], gyroBias[3]; //Calibrating and Printing Biases MPU9250
	  calibrateMPU9250(gyroBias, accelBias);
 8000932:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000936:	f107 0318 	add.w	r3, r7, #24
 800093a:	4611      	mov	r1, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fcd1 	bl	80012e4 <calibrateMPU9250>
	  printf("AccBias {");
 8000942:	483d      	ldr	r0, [pc, #244]	; (8000a38 <imuTask+0x138>)
 8000944:	f00c f978 	bl	800cc38 <iprintf>
	  for(int i=0; i<3; i++){
 8000948:	2300      	movs	r3, #0
 800094a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800094c:	e016      	b.n	800097c <imuTask+0x7c>
		  printf(" %c %.3f ",axisLabel[i],gyroBias[i]);
 800094e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	3340      	adds	r3, #64	; 0x40
 8000960:	443b      	add	r3, r7
 8000962:	3b28      	subs	r3, #40	; 0x28
 8000964:	edd3 7a00 	vldr	s15, [r3]
 8000968:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800096c:	ec53 2b17 	vmov	r2, r3, d7
 8000970:	4832      	ldr	r0, [pc, #200]	; (8000a3c <imuTask+0x13c>)
 8000972:	f00c f961 	bl	800cc38 <iprintf>
	  for(int i=0; i<3; i++){
 8000976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000978:	3301      	adds	r3, #1
 800097a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800097c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800097e:	2b02      	cmp	r3, #2
 8000980:	dde5      	ble.n	800094e <imuTask+0x4e>
	  }
	  printf("} GyroBias{");
 8000982:	482f      	ldr	r0, [pc, #188]	; (8000a40 <imuTask+0x140>)
 8000984:	f00c f958 	bl	800cc38 <iprintf>
	  for(int i=0; i<3; i++){
 8000988:	2300      	movs	r3, #0
 800098a:	63bb      	str	r3, [r7, #56]	; 0x38
 800098c:	e016      	b.n	80009bc <imuTask+0xbc>
		  printf(" %c %.3f ",axisLabel[i],accelBias[i]);
 800098e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000994:	4413      	add	r3, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	3340      	adds	r3, #64	; 0x40
 80009a0:	443b      	add	r3, r7
 80009a2:	3b1c      	subs	r3, #28
 80009a4:	edd3 7a00 	vldr	s15, [r3]
 80009a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009ac:	ec53 2b17 	vmov	r2, r3, d7
 80009b0:	4822      	ldr	r0, [pc, #136]	; (8000a3c <imuTask+0x13c>)
 80009b2:	f00c f941 	bl	800cc38 <iprintf>
	  for(int i=0; i<3; i++){
 80009b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009b8:	3301      	adds	r3, #1
 80009ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80009bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009be:	2b02      	cmp	r3, #2
 80009c0:	dde5      	ble.n	800098e <imuTask+0x8e>
	  }
	  printf("}\r\n");
 80009c2:	4820      	ldr	r0, [pc, #128]	; (8000a44 <imuTask+0x144>)
 80009c4:	f00c f99e 	bl	800cd04 <puts>

	  printf("Starting IMU...\r\n");
 80009c8:	481f      	ldr	r0, [pc, #124]	; (8000a48 <imuTask+0x148>)
 80009ca:	f00c f99b 	bl	800cd04 <puts>
	  float initPose[] = {0,0,0};
 80009ce:	f04f 0300 	mov.w	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	f04f 0300 	mov.w	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	f04f 0300 	mov.w	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
	  setPose(&mpu, initPose);
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	4619      	mov	r1, r3
 80009e6:	4812      	ldr	r0, [pc, #72]	; (8000a30 <imuTask+0x130>)
 80009e8:	f001 f9a2 	bl	8001d30 <setPose>
    stanleyTaskHandle = osThreadNew(stanleyTask, NULL, &stanleyTaskHandle_attributes);
 80009ec:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <imuTask+0x14c>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4817      	ldr	r0, [pc, #92]	; (8000a50 <imuTask+0x150>)
 80009f2:	f008 fac1 	bl	8008f78 <osThreadNew>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <imuTask+0x154>)
 80009fa:	6013      	str	r3, [r2, #0]
    float dt = 0.05;
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <imuTask+0x158>)
 80009fe:	637b      	str	r3, [r7, #52]	; 0x34
	for(;;)
	{
		updateData(&mpu, 0.1, dt); //Printing with func from header file
 8000a00:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8000a04:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8000a5c <imuTask+0x15c>
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <imuTask+0x130>)
 8000a0a:	f000 ffdd 	bl	80019c8 <updateData>
		// for(int i = 0; i<3;i++){
=======
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b094      	sub	sp, #80	; 0x50
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	  char axisLabel[3] = {'X','Y','Z'}; //Var for printing labels
 8001f98:	4a5c      	ldr	r2, [pc, #368]	; (800210c <imuTask+0x17c>)
 8001f9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	8019      	strh	r1, [r3, #0]
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	0c12      	lsrs	r2, r2, #16
 8001fa8:	701a      	strb	r2, [r3, #0]
	  printf("Initiating IMU...\r\n"); //Initiating MPU9250
 8001faa:	4859      	ldr	r0, [pc, #356]	; (8002110 <imuTask+0x180>)
 8001fac:	f00e f9c4 	bl	8010338 <puts>
	  initMPU9250(&mpu, AFS_2G, GFS_250DPS, M_8Hz);
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4857      	ldr	r0, [pc, #348]	; (8002114 <imuTask+0x184>)
 8001fb8:	f001 fadb 	bl	8003572 <initMPU9250>

	  printf("Calibrating IMU...\r\n");
 8001fbc:	4856      	ldr	r0, [pc, #344]	; (8002118 <imuTask+0x188>)
 8001fbe:	f00e f9bb 	bl	8010338 <puts>
	  float accelBias[3], gyroBias[3]; //Calibrating and Printing Biases MPU9250
	  calibrateMPU9250(gyroBias, accelBias);
 8001fc2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f001 fb9d 	bl	800370c <calibrateMPU9250>
	  printf("AccBias {");
 8001fd2:	4852      	ldr	r0, [pc, #328]	; (800211c <imuTask+0x18c>)
 8001fd4:	f00e f92a 	bl	801022c <iprintf>
	  for(int i=0; i<3; i++){
 8001fd8:	2300      	movs	r3, #0
 8001fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fdc:	e016      	b.n	800200c <imuTask+0x7c>
		  printf(" %c %.3f ",axisLabel[i],gyroBias[i]);
 8001fde:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe4:	4413      	add	r3, r2
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	3350      	adds	r3, #80	; 0x50
 8001ff0:	443b      	add	r3, r7
 8001ff2:	3b2c      	subs	r3, #44	; 0x2c
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ffc:	ec53 2b17 	vmov	r2, r3, d7
 8002000:	4847      	ldr	r0, [pc, #284]	; (8002120 <imuTask+0x190>)
 8002002:	f00e f913 	bl	801022c <iprintf>
	  for(int i=0; i<3; i++){
 8002006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002008:	3301      	adds	r3, #1
 800200a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800200c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800200e:	2b02      	cmp	r3, #2
 8002010:	dde5      	ble.n	8001fde <imuTask+0x4e>
	  }
	  printf("} GyroBias{");
 8002012:	4844      	ldr	r0, [pc, #272]	; (8002124 <imuTask+0x194>)
 8002014:	f00e f90a 	bl	801022c <iprintf>
	  for(int i=0; i<3; i++){
 8002018:	2300      	movs	r3, #0
 800201a:	64bb      	str	r3, [r7, #72]	; 0x48
 800201c:	e016      	b.n	800204c <imuTask+0xbc>
		  printf(" %c %.3f ",axisLabel[i],accelBias[i]);
 800201e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002024:	4413      	add	r3, r2
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	3350      	adds	r3, #80	; 0x50
 8002030:	443b      	add	r3, r7
 8002032:	3b20      	subs	r3, #32
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800203c:	ec53 2b17 	vmov	r2, r3, d7
 8002040:	4837      	ldr	r0, [pc, #220]	; (8002120 <imuTask+0x190>)
 8002042:	f00e f8f3 	bl	801022c <iprintf>
	  for(int i=0; i<3; i++){
 8002046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002048:	3301      	adds	r3, #1
 800204a:	64bb      	str	r3, [r7, #72]	; 0x48
 800204c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800204e:	2b02      	cmp	r3, #2
 8002050:	dde5      	ble.n	800201e <imuTask+0x8e>
	  }
	  printf("}\r\n");
 8002052:	4835      	ldr	r0, [pc, #212]	; (8002128 <imuTask+0x198>)
 8002054:	f00e f970 	bl	8010338 <puts>

	  printf("Starting IMU...\r\n");
 8002058:	4834      	ldr	r0, [pc, #208]	; (800212c <imuTask+0x19c>)
 800205a:	f00e f96d 	bl	8010338 <puts>
	  float initPose[] = {0,0,0};
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
	  float pose[] = {0,0,0};
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
	  setPose(&mpu, initPose);
 8002082:	f107 0318 	add.w	r3, r7, #24
 8002086:	4619      	mov	r1, r3
 8002088:	4822      	ldr	r0, [pc, #136]	; (8002114 <imuTask+0x184>)
 800208a:	f002 f865 	bl	8004158 <setPose>
	  int counter = 1;
 800208e:	2301      	movs	r3, #1
 8002090:	647b      	str	r3, [r7, #68]	; 0x44

	wirelessTaskHandle = osThreadNew(wirelessTask, NULL, &wirelessTaskHandle_attributes);
 8002092:	4a27      	ldr	r2, [pc, #156]	; (8002130 <imuTask+0x1a0>)
 8002094:	2100      	movs	r1, #0
 8002096:	4827      	ldr	r0, [pc, #156]	; (8002134 <imuTask+0x1a4>)
 8002098:	f00a f950 	bl	800c33c <osThreadNew>
 800209c:	4603      	mov	r3, r0
 800209e:	4a26      	ldr	r2, [pc, #152]	; (8002138 <imuTask+0x1a8>)
 80020a0:	6013      	str	r3, [r2, #0]

    float dt = 0.1;
 80020a2:	4b26      	ldr	r3, [pc, #152]	; (800213c <imuTask+0x1ac>)
 80020a4:	643b      	str	r3, [r7, #64]	; 0x40
	for(;;)
	{
		updateData(&mpu, dt, speed); //Printing with func from header file
 80020a6:	4b26      	ldr	r3, [pc, #152]	; (8002140 <imuTask+0x1b0>)
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	eef0 0a67 	vmov.f32	s1, s15
 80020b0:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 80020b4:	4817      	ldr	r0, [pc, #92]	; (8002114 <imuTask+0x184>)
 80020b6:	f001 fe9b 	bl	8003df0 <updateData>
		if(counter % 30 == 0){
 80020ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <imuTask+0x1b4>)
 80020be:	fb83 1302 	smull	r1, r3, r3, r2
 80020c2:	4413      	add	r3, r2
 80020c4:	1119      	asrs	r1, r3, #4
 80020c6:	17d3      	asrs	r3, r2, #31
 80020c8:	1ac9      	subs	r1, r1, r3
 80020ca:	460b      	mov	r3, r1
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	1a5b      	subs	r3, r3, r1
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	1ad1      	subs	r1, r2, r3
 80020d4:	2900      	cmp	r1, #0
 80020d6:	d108      	bne.n	80020ea <imuTask+0x15a>
			pose[2] = dataCam.psi;
 80020d8:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <imuTask+0x1b8>)
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	617b      	str	r3, [r7, #20]
			setPose(&mpu, pose);
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	4619      	mov	r1, r3
 80020e4:	480b      	ldr	r0, [pc, #44]	; (8002114 <imuTask+0x184>)
 80020e6:	f002 f837 	bl	8004158 <setPose>
		}
		counter++;
 80020ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ec:	3301      	adds	r3, #1
 80020ee:	647b      	str	r3, [r7, #68]	; 0x44
>>>>>>> Stashed changes
		//    printf("{%05.1f}",mpu.pose[i]);
		// }
		// printf("\r\n");
    // osMutexWait(myMutex01Handle, osWaitForever);
    // osMutexRelease(myMutex01Handle);
<<<<<<< Updated upstream
		osDelay(dt*1000);
 8000a0e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000a12:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000a60 <imuTask+0x160>
 8000a16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a1e:	ee17 0a90 	vmov	r0, s15
 8000a22:	f008 fb3b 	bl	800909c <osDelay>
		updateData(&mpu, 0.1, dt); //Printing with func from header file
 8000a26:	e7eb      	b.n	8000a00 <imuTask+0x100>
 8000a28:	0800fc9c 	.word	0x0800fc9c
 8000a2c:	0800fc38 	.word	0x0800fc38
 8000a30:	240001f8 	.word	0x240001f8
 8000a34:	0800fc4c 	.word	0x0800fc4c
 8000a38:	0800fc60 	.word	0x0800fc60
 8000a3c:	0800fc6c 	.word	0x0800fc6c
 8000a40:	0800fc78 	.word	0x0800fc78
 8000a44:	0800fc84 	.word	0x0800fc84
 8000a48:	0800fc88 	.word	0x0800fc88
 8000a4c:	0800fd90 	.word	0x0800fd90
 8000a50:	08000c69 	.word	0x08000c69
 8000a54:	240002ec 	.word	0x240002ec
 8000a58:	3d4ccccd 	.word	0x3d4ccccd
 8000a5c:	3dcccccd 	.word	0x3dcccccd
 8000a60:	447a0000 	.word	0x447a0000
=======
		osDelay(dt * 1000);
 80020f0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80020f4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800214c <imuTask+0x1bc>
 80020f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002100:	ee17 0a90 	vmov	r0, s15
 8002104:	f00a f9ac 	bl	800c460 <osDelay>
		updateData(&mpu, dt, speed); //Printing with func from header file
 8002108:	e7cd      	b.n	80020a6 <imuTask+0x116>
 800210a:	bf00      	nop
 800210c:	08013b28 	.word	0x08013b28
 8002110:	08013ac4 	.word	0x08013ac4
 8002114:	240003dc 	.word	0x240003dc
 8002118:	08013ad8 	.word	0x08013ad8
 800211c:	08013aec 	.word	0x08013aec
 8002120:	08013af8 	.word	0x08013af8
 8002124:	08013b04 	.word	0x08013b04
 8002128:	08013b10 	.word	0x08013b10
 800212c:	08013b14 	.word	0x08013b14
 8002130:	08013d38 	.word	0x08013d38
 8002134:	080026a9 	.word	0x080026a9
 8002138:	24000708 	.word	0x24000708
 800213c:	3dcccccd 	.word	0x3dcccccd
 8002140:	240004f8 	.word	0x240004f8
 8002144:	88888889 	.word	0x88888889
 8002148:	240004e4 	.word	0x240004e4
 800214c:	447a0000 	.word	0x447a0000
>>>>>>> Stashed changes

08000a64 <escTask>:
	}
}

void escTask(void *argument){
<<<<<<< Updated upstream
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b0a2      	sub	sp, #136	; 0x88
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Staring Timer 3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4830      	ldr	r0, [pc, #192]	; (8000b30 <escTask+0xcc>)
 8000a70:	f006 f922 	bl	8006cb8 <HAL_TIM_PWM_Start>
	int minPulseWidthEsc = 1000; //Range for right and left Esc
 8000a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int maxPulseWidthEsc = 1500;
 8000a7c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000a80:	67fb      	str	r3, [r7, #124]	; 0x7c
	unsigned int pwmPeriod = 20000;
 8000a82:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a86:	67bb      	str	r3, [r7, #120]	; 0x78
	int resolution = 100;
 8000a88:	2364      	movs	r3, #100	; 0x64
 8000a8a:	677b      	str	r3, [r7, #116]	; 0x74
	struct escValues escValues = {htim2, minPulseWidthEsc, //Struct Containing all
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	2268      	movs	r2, #104	; 0x68
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00c fa15 	bl	800cec4 <memset>
 8000a9a:	4a25      	ldr	r2, [pc, #148]	; (8000b30 <escTask+0xcc>)
 8000a9c:	f107 0308 	add.w	r3, r7, #8
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	224c      	movs	r2, #76	; 0x4c
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f00c fae2 	bl	800d06e <memcpy>
 8000aaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000aae:	657b      	str	r3, [r7, #84]	; 0x54
 8000ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ab2:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000aba:	663b      	str	r3, [r7, #96]	; 0x60
=======
 8002150:	b580      	push	{r7, lr}
 8002152:	b0a4      	sub	sp, #144	; 0x90
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Staring Timer 3
 8002158:	2100      	movs	r1, #0
 800215a:	4867      	ldr	r0, [pc, #412]	; (80022f8 <escTask+0x1a8>)
 800215c:	f007 ff8e 	bl	800a07c <HAL_TIM_PWM_Start>
	int minPulseWidthEsc = 1000; //Range for right and left Esc
 8002160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int maxPulseWidthEsc = 1500;
 8002168:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800216c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	unsigned int pwmPeriod = 20000;
 8002170:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002174:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int resolution = 100;
 8002178:	2364      	movs	r3, #100	; 0x64
 800217a:	67fb      	str	r3, [r7, #124]	; 0x7c
	struct escValues escValues = {htim2, minPulseWidthEsc, //Struct Containing all
 800217c:	f107 0308 	add.w	r3, r7, #8
 8002180:	2268      	movs	r2, #104	; 0x68
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f00d fb70 	bl	800f86a <memset>
 800218a:	4a5b      	ldr	r2, [pc, #364]	; (80022f8 <escTask+0x1a8>)
 800218c:	f107 0308 	add.w	r3, r7, #8
 8002190:	4611      	mov	r1, r2
 8002192:	224c      	movs	r2, #76	; 0x4c
 8002194:	4618      	mov	r0, r3
 8002196:	f00d fb5a 	bl	800f84e <memcpy>
 800219a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800219e:	657b      	str	r3, [r7, #84]	; 0x54
 80021a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80021a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ae:	663b      	str	r3, [r7, #96]	; 0x60
>>>>>>> Stashed changes
	maxPulseWidthEsc, pwmPeriod, resolution};	  	 //PWM Variables for Esc

  // Calibration
  int i = 100;
<<<<<<< Updated upstream
 8000abc:	2364      	movs	r3, #100	; 0x64
 8000abe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  int dt = 1;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	673b      	str	r3, [r7, #112]	; 0x70
  do{
	  setPwmS(&escValues);
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fe74 	bl	80007b8 <setPwmS>
	  escValues.percentage=(unsigned int)i;
 8000ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ad4:	667b      	str	r3, [r7, #100]	; 0x64
	  HAL_Delay(10);
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f002 fa08 	bl	8002eec <HAL_Delay>
	  i=i-dt;
 8000adc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000ae0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  }while(i > 50);
 8000ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000aec:	2b32      	cmp	r3, #50	; 0x32
 8000aee:	dcea      	bgt.n	8000ac6 <escTask+0x62>

  minPulseWidthEsc = 1500;
 8000af0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000af4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  maxPulseWidthEsc = 2000;
 8000af8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000afc:	67fb      	str	r3, [r7, #124]	; 0x7c
  escValues.maxPulseWidth = maxPulseWidthEsc;
 8000afe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b00:	65bb      	str	r3, [r7, #88]	; 0x58
  escValues.minPulseWidth = minPulseWidthEsc;
 8000b02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b06:	657b      	str	r3, [r7, #84]	; 0x54

  imuTaskHandle = osThreadNew(imuTask, NULL, &imuTaskHandle_attributes);
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <escTask+0xd0>)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	480a      	ldr	r0, [pc, #40]	; (8000b38 <escTask+0xd4>)
 8000b0e:	f008 fa33 	bl	8008f78 <osThreadNew>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <escTask+0xd8>)
 8000b16:	6013      	str	r3, [r2, #0]

	escValues.percentage = 30;
 8000b18:	231e      	movs	r3, #30
 8000b1a:	667b      	str	r3, [r7, #100]	; 0x64
	setPwmS(&escValues);
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fe49 	bl	80007b8 <setPwmS>
	for(;;){
    osDelay(100);
 8000b26:	2064      	movs	r0, #100	; 0x64
 8000b28:	f008 fab8 	bl	800909c <osDelay>
 8000b2c:	e7fb      	b.n	8000b26 <escTask+0xc2>
 8000b2e:	bf00      	nop
 8000b30:	2400040c 	.word	0x2400040c
 8000b34:	0800fd24 	.word	0x0800fd24
 8000b38:	08000901 	.word	0x08000901
 8000b3c:	240002e0 	.word	0x240002e0

08000b40 <servoTask>:
=======
 80021b0:	2364      	movs	r3, #100	; 0x64
 80021b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int dt = 1;
 80021b6:	2301      	movs	r3, #1
 80021b8:	67bb      	str	r3, [r7, #120]	; 0x78
  do{
	osMutexWait(myMutex01Handle, osWaitForever);
 80021ba:	4b50      	ldr	r3, [pc, #320]	; (80022fc <escTask+0x1ac>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f04f 31ff 	mov.w	r1, #4294967295
 80021c2:	4618      	mov	r0, r3
 80021c4:	f00a f9ed 	bl	800c5a2 <osMutexAcquire>
	setPwmS(&escValues);
 80021c8:	f107 0308 	add.w	r3, r7, #8
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fc27 	bl	8001a20 <setPwmS>
	osMutexRelease(myMutex01Handle);
 80021d2:	4b4a      	ldr	r3, [pc, #296]	; (80022fc <escTask+0x1ac>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f00a fa2e 	bl	800c638 <osMutexRelease>

	escValues.percentage=(unsigned int)i;
 80021dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021e0:	667b      	str	r3, [r7, #100]	; 0x64
	HAL_Delay(10);
 80021e2:	200a      	movs	r0, #10
 80021e4:	f003 faec 	bl	80057c0 <HAL_Delay>
	i=i-dt;
 80021e8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80021ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  }while(i > 50);
 80021f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021f8:	2b32      	cmp	r3, #50	; 0x32
 80021fa:	dcde      	bgt.n	80021ba <escTask+0x6a>

  float dtTask = 0.1;
 80021fc:	4b40      	ldr	r3, [pc, #256]	; (8002300 <escTask+0x1b0>)
 80021fe:	677b      	str	r3, [r7, #116]	; 0x74

  initPI(&pi, dtTask, 190.0, 80.0, 10.0, 100, 10);
 8002200:	eef2 2a04 	vmov.f32	s5, #36	; 0x41200000  10.0
 8002204:	ed9f 2a3f 	vldr	s4, [pc, #252]	; 8002304 <escTask+0x1b4>
 8002208:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 800220c:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 8002308 <escTask+0x1b8>
 8002210:	eddf 0a3e 	vldr	s1, [pc, #248]	; 800230c <escTask+0x1bc>
 8002214:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8002218:	483d      	ldr	r0, [pc, #244]	; (8002310 <escTask+0x1c0>)
 800221a:	f001 ffff 	bl	800421c <initPI>

  minPulseWidthEsc = 1500;
 800221e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002222:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  maxPulseWidthEsc = 2000;
 8002226:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800222a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  escValues.maxPulseWidth = maxPulseWidthEsc;
 800222e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002232:	65bb      	str	r3, [r7, #88]	; 0x58
  escValues.minPulseWidth = minPulseWidthEsc;
 8002234:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002238:	657b      	str	r3, [r7, #84]	; 0x54

  imuTaskHandle = osThreadNew(imuTask, NULL, &imuTaskHandle_attributes);
 800223a:	4a36      	ldr	r2, [pc, #216]	; (8002314 <escTask+0x1c4>)
 800223c:	2100      	movs	r1, #0
 800223e:	4836      	ldr	r0, [pc, #216]	; (8002318 <escTask+0x1c8>)
 8002240:	f00a f87c 	bl	800c33c <osThreadNew>
 8002244:	4603      	mov	r3, r0
 8002246:	4a35      	ldr	r2, [pc, #212]	; (800231c <escTask+0x1cc>)
 8002248:	6013      	str	r3, [r2, #0]

  //escValues.percentage = 0;
  //setPwmS(&escValues);

  updateReferences(&pi, 0.5);
 800224a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800224e:	4830      	ldr	r0, [pc, #192]	; (8002310 <escTask+0x1c0>)
 8002250:	f002 f81c 	bl	800428c <updateReferences>
  saturateManipulation(&pi, speed);
 8002254:	4b32      	ldr	r3, [pc, #200]	; (8002320 <escTask+0x1d0>)
 8002256:	edd3 7a00 	vldr	s15, [r3]
 800225a:	eeb0 0a67 	vmov.f32	s0, s15
 800225e:	482c      	ldr	r0, [pc, #176]	; (8002310 <escTask+0x1c0>)
 8002260:	f002 f893 	bl	800438a <saturateManipulation>
  //escValues.percentage = (unsigned int)pi.u;
//  escValues.percentage = 30;
  escValues.percentage = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	667b      	str	r3, [r7, #100]	; 0x64
//    osMutexRelease(myMutex01Handle);
	setPwmS(&escValues);
 8002268:	f107 0308 	add.w	r3, r7, #8
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fbd7 	bl	8001a20 <setPwmS>
//	osMutexWait(myMutex01Handle, osWaitForever);
  HAL_Delay(10);
 8002272:	200a      	movs	r0, #10
 8002274:	f003 faa4 	bl	80057c0 <HAL_Delay>

	for(;;){

		if(wp_buf.to == wp_buf.size - 1 && (stanley.e_a < 0.1 || stanley.e_a > -0.1)){
 8002278:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <escTask+0x1d4>)
 800227a:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800227e:	4b29      	ldr	r3, [pc, #164]	; (8002324 <escTask+0x1d4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	3b01      	subs	r3, #1
 8002284:	429a      	cmp	r2, r3
 8002286:	d11a      	bne.n	80022be <escTask+0x16e>
 8002288:	4b27      	ldr	r3, [pc, #156]	; (8002328 <escTask+0x1d8>)
 800228a:	edd3 7a06 	vldr	s15, [r3, #24]
 800228e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002292:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80022e8 <escTask+0x198>
 8002296:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800229a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229e:	d40b      	bmi.n	80022b8 <escTask+0x168>
 80022a0:	4b21      	ldr	r3, [pc, #132]	; (8002328 <escTask+0x1d8>)
 80022a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80022a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022aa:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80022f0 <escTask+0x1a0>
 80022ae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80022b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b6:	dd02      	ble.n	80022be <escTask+0x16e>
		  escValues.percentage = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	667b      	str	r3, [r7, #100]	; 0x64
 80022bc:	e007      	b.n	80022ce <escTask+0x17e>
//		    osMutexWait(myMutex01Handle, osWaitForever);
//		  setPwmS(&escValues);
//    		osMutexRelease(myMutex01Handle);
		} else {
		  saturateManipulation(&pi, speed);
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <escTask+0x1d0>)
 80022c0:	edd3 7a00 	vldr	s15, [r3]
 80022c4:	eeb0 0a67 	vmov.f32	s0, s15
 80022c8:	4811      	ldr	r0, [pc, #68]	; (8002310 <escTask+0x1c0>)
 80022ca:	f002 f85e 	bl	800438a <saturateManipulation>
//			osMutexWait(myMutex01Handle, osWaitForever);
//		  setPwmS(&escValues);
//    		osMutexRelease(myMutex01Handle);
		  ;
		}
		osDelay(1000 * dtTask);
 80022ce:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80022d2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800232c <escTask+0x1dc>
 80022d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022de:	ee17 0a90 	vmov	r0, s15
 80022e2:	f00a f8bd 	bl	800c460 <osDelay>
		if(wp_buf.to == wp_buf.size - 1 && (stanley.e_a < 0.1 || stanley.e_a > -0.1)){
 80022e6:	e7c7      	b.n	8002278 <escTask+0x128>
 80022e8:	9999999a 	.word	0x9999999a
 80022ec:	3fb99999 	.word	0x3fb99999
 80022f0:	9999999a 	.word	0x9999999a
 80022f4:	bfb99999 	.word	0xbfb99999
 80022f8:	240008c0 	.word	0x240008c0
 80022fc:	2400071c 	.word	0x2400071c
 8002300:	3dcccccd 	.word	0x3dcccccd
 8002304:	42c80000 	.word	0x42c80000
 8002308:	42a00000 	.word	0x42a00000
 800230c:	433e0000 	.word	0x433e0000
 8002310:	24000534 	.word	0x24000534
 8002314:	08013ca8 	.word	0x08013ca8
 8002318:	08001f91 	.word	0x08001f91
 800231c:	240006f8 	.word	0x240006f8
 8002320:	240004f8 	.word	0x240004f8
 8002324:	2400055c 	.word	0x2400055c
 8002328:	2400049c 	.word	0x2400049c
 800232c:	447a0000 	.word	0x447a0000

08002330 <servoTask>:
>>>>>>> Stashed changes
	}
}

void servoTask(void *argument){
<<<<<<< Updated upstream
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0a6      	sub	sp, #152	; 0x98
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Staring Timer 3
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4841      	ldr	r0, [pc, #260]	; (8000c50 <servoTask+0x110>)
 8000b4c:	f006 f8b4 	bl	8006cb8 <HAL_TIM_PWM_Start>
  int minPulseWidthServo = 1000; //Range for right and left Servo
 8000b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int maxPulseWidthServo = 2000;
 8000b58:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  unsigned int pwmPeriod = 20000;
 8000b60:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  int resolution = 100;
 8000b68:	2364      	movs	r3, #100	; 0x64
 8000b6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  struct escValues servoValues = {htim3, minPulseWidthServo, //Struct Containing all
 8000b6e:	f107 0318 	add.w	r3, r7, #24
 8000b72:	2268      	movs	r2, #104	; 0x68
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f00c f9a4 	bl	800cec4 <memset>
 8000b7c:	4a34      	ldr	r2, [pc, #208]	; (8000c50 <servoTask+0x110>)
 8000b7e:	f107 0318 	add.w	r3, r7, #24
 8000b82:	4611      	mov	r1, r2
 8000b84:	224c      	movs	r2, #76	; 0x4c
 8000b86:	4618      	mov	r0, r3
 8000b88:	f00c fa71 	bl	800d06e <memcpy>
 8000b8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b90:	667b      	str	r3, [r7, #100]	; 0x64
 8000b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8000b98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000b9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ba2:	673b      	str	r3, [r7, #112]	; 0x70
  maxPulseWidthServo, pwmPeriod, resolution};	  	 //PWM Variables for Servo

  float in[2] = {stanley.sat[1], stanley.sat[0]}; // min, max delta values
 8000ba4:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <servoTask+0x114>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <servoTask+0x114>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	617b      	str	r3, [r7, #20]
  float out[2] = {90, 0}; // min, max percentage values
 8000bb0:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <servoTask+0x118>)
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  float slope = (float)(out[1] - out[0]) / (in[1] - in[0]);
 8000bba:	ed97 7a03 	vldr	s14, [r7, #12]
 8000bbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bc2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000bc6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bca:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bd6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80

  uint8_t last_steer = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  servoValues.percentage = 50;
 8000be0:	2332      	movs	r3, #50	; 0x32
 8000be2:	677b      	str	r3, [r7, #116]	; 0x74
  setPwmS(&servoValues);
 8000be4:	f107 0318 	add.w	r3, r7, #24
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fde5 	bl	80007b8 <setPwmS>

	for(;;){
     servoValues.percentage = (int) ( (out[0] + (slope * (stanley.delta - in[0]))));
 8000bee:	ed97 7a02 	vldr	s14, [r7, #8]
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <servoTask+0x114>)
 8000bf4:	edd3 6a02 	vldr	s13, [r3, #8]
 8000bf8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bfc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000c00:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8000c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c10:	ee17 3a90 	vmov	r3, s15
 8000c14:	677b      	str	r3, [r7, #116]	; 0x74
//     osMutexWait(myMutex01Handle, osWaitForever);
	 printf("Y {%u}",servoValues.percentage);
 8000c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4810      	ldr	r0, [pc, #64]	; (8000c5c <servoTask+0x11c>)
 8000c1c:	f00c f80c 	bl	800cc38 <iprintf>
     if(servoValues.percentage != last_steer){
 8000c20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000c22:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d00b      	beq.n	8000c42 <servoTask+0x102>
       setPwmS(&servoValues);
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fdc2 	bl	80007b8 <setPwmS>
	   printf("servo {%u},last {%u}",servoValues.percentage, last_steer);
 8000c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c36:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4808      	ldr	r0, [pc, #32]	; (8000c60 <servoTask+0x120>)
 8000c3e:	f00b fffb 	bl	800cc38 <iprintf>
     }
//     osMutexRelease(myMutex01Handle);
     last_steer = servoValues.percentage;
 8000c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c44:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    osDelay(100);
 8000c48:	2064      	movs	r0, #100	; 0x64
 8000c4a:	f008 fa27 	bl	800909c <osDelay>
     servoValues.percentage = (int) ( (out[0] + (slope * (stanley.delta - in[0]))));
 8000c4e:	e7ce      	b.n	8000bee <servoTask+0xae>
 8000c50:	24000458 	.word	0x24000458
 8000c54:	240002b8 	.word	0x240002b8
 8000c58:	42b40000 	.word	0x42b40000
 8000c5c:	0800fca0 	.word	0x0800fca0
 8000c60:	0800fca8 	.word	0x0800fca8
 8000c64:	00000000 	.word	0x00000000

08000c68 <stanleyTask>:
=======
 8002330:	b580      	push	{r7, lr}
 8002332:	b0a8      	sub	sp, #160	; 0xa0
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Staring Timer 3
 8002338:	2100      	movs	r1, #0
 800233a:	4844      	ldr	r0, [pc, #272]	; (800244c <servoTask+0x11c>)
 800233c:	f007 fe9e 	bl	800a07c <HAL_TIM_PWM_Start>
  int minPulseWidthServo = 1000; //Range for right and left Servo
 8002340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int maxPulseWidthServo = 2000;
 8002348:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800234c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  unsigned int pwmPeriod = 20000;
 8002350:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002354:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int resolution = 100;
 8002358:	2364      	movs	r3, #100	; 0x64
 800235a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  struct escValues servoValues = {htim3, minPulseWidthServo, //Struct Containing all
 800235e:	f107 0318 	add.w	r3, r7, #24
 8002362:	2268      	movs	r2, #104	; 0x68
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f00d fa7f 	bl	800f86a <memset>
 800236c:	4a37      	ldr	r2, [pc, #220]	; (800244c <servoTask+0x11c>)
 800236e:	f107 0318 	add.w	r3, r7, #24
 8002372:	4611      	mov	r1, r2
 8002374:	224c      	movs	r2, #76	; 0x4c
 8002376:	4618      	mov	r0, r3
 8002378:	f00d fa69 	bl	800f84e <memcpy>
 800237c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002380:	667b      	str	r3, [r7, #100]	; 0x64
 8002382:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002386:	66bb      	str	r3, [r7, #104]	; 0x68
 8002388:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800238c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800238e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002392:	673b      	str	r3, [r7, #112]	; 0x70
  maxPulseWidthServo, pwmPeriod, resolution};	  	 //PWM Variables for Servo
  
  float in[2] = {st_saturation_limits[1], st_saturation_limits[0]}; // min, max delta values
 8002394:	4b2e      	ldr	r3, [pc, #184]	; (8002450 <servoTask+0x120>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <servoTask+0x120>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	617b      	str	r3, [r7, #20]
  float out[2] = {10, 90}; // min, max percentage values
 80023a0:	4a2c      	ldr	r2, [pc, #176]	; (8002454 <servoTask+0x124>)
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023aa:	e883 0003 	stmia.w	r3, {r0, r1}
  float slope = (float)((out[1] - out[0]) / (in[1] - in[0]));
 80023ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80023b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80023b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80023be:	edd7 7a04 	vldr	s15, [r7, #16]
 80023c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ca:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

  uint8_t last_steer = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  servoValues.percentage = 50;
 80023d4:	2332      	movs	r3, #50	; 0x32
 80023d6:	677b      	str	r3, [r7, #116]	; 0x74
  setPwmS(&servoValues);
 80023d8:	f107 0318 	add.w	r3, r7, #24
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fb1f 	bl	8001a20 <setPwmS>

  canTaskHandle = osThreadNew(canTask, NULL, &canTaskHandle_attributes);
 80023e2:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <servoTask+0x128>)
 80023e4:	2100      	movs	r1, #0
 80023e6:	481d      	ldr	r0, [pc, #116]	; (800245c <servoTask+0x12c>)
 80023e8:	f009 ffa8 	bl	800c33c <osThreadNew>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <servoTask+0x130>)
 80023f0:	6013      	str	r3, [r2, #0]
  float offset_delta = 21.4;
 80023f2:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <servoTask+0x134>)
 80023f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	for(;;){
     servoValues.percentage = (int) ( (out[0] + (slope * ((stanley.delta+offset_delta) - in[0]))));
 80023f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80023fc:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <servoTask+0x138>)
 80023fe:	edd3 6a02 	vldr	s13, [r3, #8]
 8002402:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002406:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800240a:	edd7 7a04 	vldr	s15, [r7, #16]
 800240e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002412:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002416:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800241a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800241e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002422:	ee17 3a90 	vmov	r3, s15
 8002426:	677b      	str	r3, [r7, #116]	; 0x74
     if(servoValues.percentage != last_steer){
 8002428:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800242a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800242e:	429a      	cmp	r2, r3
 8002430:	d004      	beq.n	800243c <servoTask+0x10c>
   		setPwmS(&servoValues);
 8002432:	f107 0318 	add.w	r3, r7, #24
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff faf2 	bl	8001a20 <setPwmS>
     }
     last_steer = servoValues.percentage;
 800243c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800243e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    osDelay(100);
 8002442:	2064      	movs	r0, #100	; 0x64
 8002444:	f00a f80c 	bl	800c460 <osDelay>
     servoValues.percentage = (int) ( (out[0] + (slope * ((stanley.delta+offset_delta) - in[0]))));
 8002448:	e7d6      	b.n	80023f8 <servoTask+0xc8>
 800244a:	bf00      	nop
 800244c:	2400090c 	.word	0x2400090c
 8002450:	24000008 	.word	0x24000008
 8002454:	08013b2c 	.word	0x08013b2c
 8002458:	08013d5c 	.word	0x08013d5c
 800245c:	080028e1 	.word	0x080028e1
 8002460:	2400070c 	.word	0x2400070c
 8002464:	41ab3333 	.word	0x41ab3333
 8002468:	2400049c 	.word	0x2400049c
 800246c:	00000000 	.word	0x00000000

08002470 <stanleyTask>:
>>>>>>> Stashed changes
	}
}

void stanleyTask(void *argument){
<<<<<<< Updated upstream
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b090      	sub	sp, #64	; 0x40
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  float st_saturation_limits[] = {21.4 * M_PI / 180, -21.4 * M_PI / 180}; // Saturation array
 8000c70:	4a59      	ldr	r2, [pc, #356]	; (8000dd8 <stanleyTask+0x170>)
 8000c72:	f107 0320 	add.w	r3, r7, #32
 8000c76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c7a:	e883 0003 	stmia.w	r3, {r0, r1}
  float st_k = 5; // Gain
 8000c7e:	4b57      	ldr	r3, [pc, #348]	; (8000ddc <stanleyTask+0x174>)
 8000c80:	63bb      	str	r3, [r7, #56]	; 0x38
  float st_k_soft = 0.01; // Soft gain
 8000c82:	4b57      	ldr	r3, [pc, #348]	; (8000de0 <stanleyTask+0x178>)
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t precision = 10; // Result's float resolution
 8000c86:	230a      	movs	r3, #10
 8000c88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  // Control signals
  float vel = 0;
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Vehicle pose
  struct Point vehicle_pos = {0, 0};
 8000c92:	f04f 0300 	mov.w	r3, #0
 8000c96:	61bb      	str	r3, [r7, #24]
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  float psi = 0;
 8000c9e:	f04f 0300 	mov.w	r3, #0
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 8002470:	b580      	push	{r7, lr}
 8002472:	ed2d 8b0a 	vpush	{d8-d12}
 8002476:	b0a6      	sub	sp, #152	; 0x98
 8002478:	af18      	add	r7, sp, #96	; 0x60
 800247a:	6078      	str	r0, [r7, #4]
  float st_k = 1; // Gain
 800247c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002480:	637b      	str	r3, [r7, #52]	; 0x34
  float st_k_soft = 0.01; // Soft gain
 8002482:	4b7d      	ldr	r3, [pc, #500]	; (8002678 <stanleyTask+0x208>)
 8002484:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t precision = 10; // Result's float resolution
 8002486:	230a      	movs	r3, #10
 8002488:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  // Control signals
  float vel = 0;
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28

  // Vehicle pose
  struct Point vehicle_pos = {0, 0};
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
  float psi = 0;
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes

  // Path
  struct Point p1;
  struct Point p2;

  p1.x = 0;
<<<<<<< Updated upstream
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  p1.y = 0;
 8000caa:	f04f 0300 	mov.w	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  p2.x = 10;
 8000cb0:	4b4c      	ldr	r3, [pc, #304]	; (8000de4 <stanleyTask+0x17c>)
 8000cb2:	60bb      	str	r3, [r7, #8]
  p2.y = 0;
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]

  initStanley(&stanley,st_saturation_limits, st_k, st_k_soft);
 8000cba:	f107 0320 	add.w	r3, r7, #32
 8000cbe:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8000cc2:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4847      	ldr	r0, [pc, #284]	; (8000de8 <stanleyTask+0x180>)
 8000cca:	f001 fa17 	bl	80020fc <initStanley>
  servoTaskHandle = osThreadNew(servoTask, NULL, &servoTaskHandle_attributes);
 8000cce:	4a47      	ldr	r2, [pc, #284]	; (8000dec <stanleyTask+0x184>)
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4847      	ldr	r0, [pc, #284]	; (8000df0 <stanleyTask+0x188>)
 8000cd4:	f008 f950 	bl	8008f78 <osThreadNew>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4a46      	ldr	r2, [pc, #280]	; (8000df4 <stanleyTask+0x18c>)
 8000cdc:	6013      	str	r3, [r2, #0]
  
	for(;;){
    vehicle_pos.x = mpu.pose[0];
 8000cde:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <stanleyTask+0x190>)
 8000ce0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000ce4:	61bb      	str	r3, [r7, #24]
    vehicle_pos.y = mpu.pose[1];
 8000ce6:	4b44      	ldr	r3, [pc, #272]	; (8000df8 <stanleyTask+0x190>)
 8000ce8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000cec:	61fb      	str	r3, [r7, #28]
    psi = mpu.pose[2] * M_PI / 180;
 8000cee:	4b42      	ldr	r3, [pc, #264]	; (8000df8 <stanleyTask+0x190>)
 8000cf0:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8000cf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cf8:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8000dc8 <stanleyTask+0x160>
 8000cfc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d00:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8000dd0 <stanleyTask+0x168>
 8000d04:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d08:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d0c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    vel = 0.5;
 8000d10:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    calculateCrosstrackError(&stanley, &vehicle_pos, &p1, &p2);
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	f107 0210 	add.w	r2, r7, #16
 8000d1e:	f107 0118 	add.w	r1, r7, #24
 8000d22:	4831      	ldr	r0, [pc, #196]	; (8000de8 <stanleyTask+0x180>)
 8000d24:	f001 fa0c 	bl	8002140 <calculateCrosstrackError>
    setYawAngle(&stanley, psi);
 8000d28:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8000d2c:	482e      	ldr	r0, [pc, #184]	; (8000de8 <stanleyTask+0x180>)
 8000d2e:	f001 fbbd 	bl	80024ac <setYawAngle>
    calculateSteering(&stanley, vel, precision);
 8000d32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d36:	4619      	mov	r1, r3
 8000d38:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8000d3c:	482a      	ldr	r0, [pc, #168]	; (8000de8 <stanleyTask+0x180>)
 8000d3e:	f001 fbc7 	bl	80024d0 <calculateSteering>
    osMutexWait(myMutex01Handle, osWaitForever);
 8000d42:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <stanleyTask+0x194>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f008 fa47 	bl	80091de <osMutexAcquire>
    printf(" Pose XYZ:");
 8000d50:	482b      	ldr	r0, [pc, #172]	; (8000e00 <stanleyTask+0x198>)
 8000d52:	f00b ff71 	bl	800cc38 <iprintf>
	for(int i = 0; i<3;i++){
 8000d56:	2300      	movs	r3, #0
 8000d58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d5a:	e011      	b.n	8000d80 <stanleyTask+0x118>
	   printf("{%05.1f}",mpu.pose[i]);
 8000d5c:	4a26      	ldr	r2, [pc, #152]	; (8000df8 <stanleyTask+0x190>)
 8000d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d60:	332c      	adds	r3, #44	; 0x2c
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	3304      	adds	r3, #4
 8000d68:	edd3 7a00 	vldr	s15, [r3]
 8000d6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d70:	ec53 2b17 	vmov	r2, r3, d7
 8000d74:	4823      	ldr	r0, [pc, #140]	; (8000e04 <stanleyTask+0x19c>)
 8000d76:	f00b ff5f 	bl	800cc38 <iprintf>
	for(int i = 0; i<3;i++){
 8000d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	ddea      	ble.n	8000d5c <stanleyTask+0xf4>
=======
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  p1.y = 0;
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	61bb      	str	r3, [r7, #24]
  p2.x = 10;
 80024b0:	4b72      	ldr	r3, [pc, #456]	; (800267c <stanleyTask+0x20c>)
 80024b2:	60fb      	str	r3, [r7, #12]
  p2.y = 0;
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]

  initStanley(&stanley,st_saturation_limits, st_k, st_k_soft);
 80024ba:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 80024be:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80024c2:	496f      	ldr	r1, [pc, #444]	; (8002680 <stanleyTask+0x210>)
 80024c4:	486f      	ldr	r0, [pc, #444]	; (8002684 <stanleyTask+0x214>)
 80024c6:	f002 fa0d 	bl	80048e4 <initStanley>
  
	for(;;){
    vehicle_pos.x = kf.x[0];
 80024ca:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <stanleyTask+0x218>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	61fb      	str	r3, [r7, #28]
    vehicle_pos.y = kf.y[0];
 80024d0:	4b6d      	ldr	r3, [pc, #436]	; (8002688 <stanleyTask+0x218>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	623b      	str	r3, [r7, #32]

    if(wp_buf.size > 2){
 80024d6:	4b6d      	ldr	r3, [pc, #436]	; (800268c <stanleyTask+0x21c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	dd23      	ble.n	8002526 <stanleyTask+0xb6>
      p1.x = wp_buf.wp_buf[wp_buf.from].x;
 80024de:	4b6b      	ldr	r3, [pc, #428]	; (800268c <stanleyTask+0x21c>)
 80024e0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80024e4:	4a69      	ldr	r2, [pc, #420]	; (800268c <stanleyTask+0x21c>)
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	3304      	adds	r3, #4
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	617b      	str	r3, [r7, #20]
      p1.y = wp_buf.wp_buf[wp_buf.from].y;
 80024f0:	4b66      	ldr	r3, [pc, #408]	; (800268c <stanleyTask+0x21c>)
 80024f2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80024f6:	4a65      	ldr	r2, [pc, #404]	; (800268c <stanleyTask+0x21c>)
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	3308      	adds	r3, #8
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	61bb      	str	r3, [r7, #24]
      p2.x = wp_buf.wp_buf[wp_buf.to].x;
 8002502:	4b62      	ldr	r3, [pc, #392]	; (800268c <stanleyTask+0x21c>)
 8002504:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8002508:	4a60      	ldr	r2, [pc, #384]	; (800268c <stanleyTask+0x21c>)
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	3304      	adds	r3, #4
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]
      p2.y = wp_buf.wp_buf[wp_buf.to].y;
 8002514:	4b5d      	ldr	r3, [pc, #372]	; (800268c <stanleyTask+0x21c>)
 8002516:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800251a:	4a5c      	ldr	r2, [pc, #368]	; (800268c <stanleyTask+0x21c>)
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	3308      	adds	r3, #8
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	613b      	str	r3, [r7, #16]
    }
    psi = mpu.pose[2] * M_PI / 180;
 8002526:	4b5a      	ldr	r3, [pc, #360]	; (8002690 <stanleyTask+0x220>)
 8002528:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800252c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002530:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8002668 <stanleyTask+0x1f8>
 8002534:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002538:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8002670 <stanleyTask+0x200>
 800253c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002540:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002544:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    vel = speed;
 8002548:	4b52      	ldr	r3, [pc, #328]	; (8002694 <stanleyTask+0x224>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	62bb      	str	r3, [r7, #40]	; 0x28
    calculateCrosstrackError(&stanley, &vehicle_pos, &p1, &p2);
 800254e:	f107 030c 	add.w	r3, r7, #12
 8002552:	f107 0214 	add.w	r2, r7, #20
 8002556:	f107 011c 	add.w	r1, r7, #28
 800255a:	484a      	ldr	r0, [pc, #296]	; (8002684 <stanleyTask+0x214>)
 800255c:	f002 f9e4 	bl	8004928 <calculateCrosstrackError>
    setYawAngle(&stanley, psi);
 8002560:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002564:	4847      	ldr	r0, [pc, #284]	; (8002684 <stanleyTask+0x214>)
 8002566:	f002 fb95 	bl	8004c94 <setYawAngle>
    calculateSteering(&stanley, vel, precision);
 800256a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800256e:	4619      	mov	r1, r3
 8002570:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8002574:	4843      	ldr	r0, [pc, #268]	; (8002684 <stanleyTask+0x214>)
 8002576:	f002 fb9f 	bl	8004cb8 <calculateSteering>

    printf("Pose{%3.1f,%3.1f,%3.1f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
    		"E{%3.1f}, S{%1.2f}, PI{sp:%3.3f,u:%3.3f} Cam{%3.3f,%3.3f,%3.3f}\r\n",
      kf.x[0], kf.y[0], mpu.pose[2],
 800257a:	4b43      	ldr	r3, [pc, #268]	; (8002688 <stanleyTask+0x218>)
 800257c:	edd3 7a00 	vldr	s15, [r3]
    printf("Pose{%3.1f,%3.1f,%3.1f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 8002580:	eeb7 cae7 	vcvt.f64.f32	d12, s15
      kf.x[0], kf.y[0], mpu.pose[2],
 8002584:	4b40      	ldr	r3, [pc, #256]	; (8002688 <stanleyTask+0x218>)
 8002586:	edd3 7a02 	vldr	s15, [r3, #8]
    printf("Pose{%3.1f,%3.1f,%3.1f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 800258a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
      kf.x[0], kf.y[0], mpu.pose[2],
 800258e:	4b40      	ldr	r3, [pc, #256]	; (8002690 <stanleyTask+0x220>)
 8002590:	edd3 6a2f 	vldr	s13, [r3, #188]	; 0xbc
    printf("Pose{%3.1f,%3.1f,%3.1f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 8002594:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
      wp_buf.wp_buf[wp_buf.to].x, wp_buf.wp_buf[wp_buf.to].y,
 8002598:	4b3c      	ldr	r3, [pc, #240]	; (800268c <stanleyTask+0x21c>)
 800259a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800259e:	4a3b      	ldr	r2, [pc, #236]	; (800268c <stanleyTask+0x21c>)
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	3304      	adds	r3, #4
 80025a6:	edd3 5a00 	vldr	s11, [r3]
    printf("Pose{%3.1f,%3.1f,%3.1f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 80025aa:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
      wp_buf.wp_buf[wp_buf.to].x, wp_buf.wp_buf[wp_buf.to].y,
 80025ae:	4b37      	ldr	r3, [pc, #220]	; (800268c <stanleyTask+0x21c>)
 80025b0:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80025b4:	4a35      	ldr	r2, [pc, #212]	; (800268c <stanleyTask+0x21c>)
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	3308      	adds	r3, #8
 80025bc:	edd3 4a00 	vldr	s9, [r3]
    printf("Pose{%3.1f,%3.1f,%3.1f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 80025c0:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
      (stanley.delta * 180 / M_PI), stanley.e_a, speed, pi.chi1_d, pi.u,
 80025c4:	4b2f      	ldr	r3, [pc, #188]	; (8002684 <stanleyTask+0x214>)
 80025c6:	edd3 3a02 	vldr	s7, [r3, #8]
 80025ca:	ed9f 3a33 	vldr	s6, [pc, #204]	; 8002698 <stanleyTask+0x228>
 80025ce:	ee63 3a83 	vmul.f32	s7, s7, s6
 80025d2:	eeb7 2ae3 	vcvt.f64.f32	d2, s7
    printf("Pose{%3.1f,%3.1f,%3.1f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 80025d6:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8002668 <stanleyTask+0x1f8>
 80025da:	ee82 3b01 	vdiv.f64	d3, d2, d1
      (stanley.delta * 180 / M_PI), stanley.e_a, speed, pi.chi1_d, pi.u,
 80025de:	4b29      	ldr	r3, [pc, #164]	; (8002684 <stanleyTask+0x214>)
 80025e0:	edd3 2a06 	vldr	s5, [r3, #24]
    printf("Pose{%3.1f,%3.1f,%3.1f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 80025e4:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 80025e8:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <stanleyTask+0x224>)
 80025ea:	edd3 1a00 	vldr	s3, [r3]
 80025ee:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
      (stanley.delta * 180 / M_PI), stanley.e_a, speed, pi.chi1_d, pi.u,
 80025f2:	4b2a      	ldr	r3, [pc, #168]	; (800269c <stanleyTask+0x22c>)
 80025f4:	edd3 0a09 	vldr	s1, [r3, #36]	; 0x24
    printf("Pose{%3.1f,%3.1f,%3.1f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 80025f8:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
      (stanley.delta * 180 / M_PI), stanley.e_a, speed, pi.chi1_d, pi.u,
 80025fc:	4b27      	ldr	r3, [pc, #156]	; (800269c <stanleyTask+0x22c>)
 80025fe:	ed93 8a08 	vldr	s16, [r3, #32]
    printf("Pose{%3.1f,%3.1f,%3.1f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 8002602:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
	  dataCam.px,dataCam.py,dataCam.psi);
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <stanleyTask+0x230>)
 8002608:	ed93 9a02 	vldr	s18, [r3, #8]
    printf("Pose{%3.1f,%3.1f,%3.1f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 800260c:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
	  dataCam.px,dataCam.py,dataCam.psi);
 8002610:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <stanleyTask+0x230>)
 8002612:	ed93 aa03 	vldr	s20, [r3, #12]
    printf("Pose{%3.1f,%3.1f,%3.1f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 8002616:	eeb7 aaca 	vcvt.f64.f32	d10, s20
	  dataCam.px,dataCam.py,dataCam.psi);
 800261a:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <stanleyTask+0x230>)
 800261c:	ed93 ba04 	vldr	s22, [r3, #16]
    printf("Pose{%3.1f,%3.1f,%3.1f}, WP{%3.1f,%3.1f}, Delta{%3.1f},"
 8002620:	eeb7 bacb 	vcvt.f64.f32	d11, s22
 8002624:	ed8d bb16 	vstr	d11, [sp, #88]	; 0x58
 8002628:	ed8d ab14 	vstr	d10, [sp, #80]	; 0x50
 800262c:	ed8d 9b12 	vstr	d9, [sp, #72]	; 0x48
 8002630:	ed8d 8b10 	vstr	d8, [sp, #64]	; 0x40
 8002634:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
 8002638:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 800263c:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 8002640:	ed8d 3b08 	vstr	d3, [sp, #32]
 8002644:	ed8d 4b06 	vstr	d4, [sp, #24]
 8002648:	ed8d 5b04 	vstr	d5, [sp, #16]
 800264c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002650:	ed8d 7b00 	vstr	d7, [sp]
 8002654:	ec53 2b1c 	vmov	r2, r3, d12
 8002658:	4812      	ldr	r0, [pc, #72]	; (80026a4 <stanleyTask+0x234>)
 800265a:	f00d fde7 	bl	801022c <iprintf>
    osDelay(100);
 800265e:	2064      	movs	r0, #100	; 0x64
 8002660:	f009 fefe 	bl	800c460 <osDelay>
    vehicle_pos.x = kf.x[0];
 8002664:	e731      	b.n	80024ca <stanleyTask+0x5a>
 8002666:	bf00      	nop
 8002668:	54442d18 	.word	0x54442d18
 800266c:	400921fb 	.word	0x400921fb
 8002670:	00000000 	.word	0x00000000
 8002674:	40668000 	.word	0x40668000
 8002678:	3c23d70a 	.word	0x3c23d70a
 800267c:	41200000 	.word	0x41200000
 8002680:	24000008 	.word	0x24000008
 8002684:	2400049c 	.word	0x2400049c
 8002688:	240004fc 	.word	0x240004fc
 800268c:	2400055c 	.word	0x2400055c
 8002690:	240003dc 	.word	0x240003dc
 8002694:	240004f8 	.word	0x240004f8
 8002698:	43340000 	.word	0x43340000
 800269c:	24000534 	.word	0x24000534
 80026a0:	240004e4 	.word	0x240004e4
 80026a4:	08013b34 	.word	0x08013b34

080026a8 <wirelessTask>:
>>>>>>> Stashed changes
	}
	printf(" Delta: {%05.1f}",stanley.delta * 180 / M_PI);
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <stanleyTask+0x180>)
 8000d88:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d8c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000e08 <stanleyTask+0x1a0>
 8000d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d98:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000dc8 <stanleyTask+0x160>
 8000d9c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000da0:	ec53 2b15 	vmov	r2, r3, d5
 8000da4:	4819      	ldr	r0, [pc, #100]	; (8000e0c <stanleyTask+0x1a4>)
 8000da6:	f00b ff47 	bl	800cc38 <iprintf>
	printf("\r\n");
 8000daa:	4819      	ldr	r0, [pc, #100]	; (8000e10 <stanleyTask+0x1a8>)
 8000dac:	f00b ffaa 	bl	800cd04 <puts>
    osMutexRelease(myMutex01Handle);
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <stanleyTask+0x194>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f008 fa5d 	bl	8009274 <osMutexRelease>
    osDelay(50);
 8000dba:	2032      	movs	r0, #50	; 0x32
 8000dbc:	f008 f96e 	bl	800909c <osDelay>
    vehicle_pos.x = mpu.pose[0];
 8000dc0:	e78d      	b.n	8000cde <stanleyTask+0x76>
 8000dc2:	bf00      	nop
 8000dc4:	f3af 8000 	nop.w
 8000dc8:	54442d18 	.word	0x54442d18
 8000dcc:	400921fb 	.word	0x400921fb
 8000dd0:	00000000 	.word	0x00000000
 8000dd4:	40668000 	.word	0x40668000
 8000dd8:	0800fcf0 	.word	0x0800fcf0
 8000ddc:	40a00000 	.word	0x40a00000
 8000de0:	3c23d70a 	.word	0x3c23d70a
 8000de4:	41200000 	.word	0x41200000
 8000de8:	240002b8 	.word	0x240002b8
 8000dec:	0800fd6c 	.word	0x0800fd6c
 8000df0:	08000b41 	.word	0x08000b41
 8000df4:	240002e8 	.word	0x240002e8
 8000df8:	240001f8 	.word	0x240001f8
 8000dfc:	240002f4 	.word	0x240002f4
 8000e00:	0800fcc0 	.word	0x0800fcc0
 8000e04:	0800fccc 	.word	0x0800fccc
 8000e08:	43340000 	.word	0x43340000
 8000e0c:	0800fcd8 	.word	0x0800fcd8
 8000e10:	0800fcec 	.word	0x0800fcec

<<<<<<< Updated upstream
08000e14 <MX_GPIO_Init>:
=======
void wirelessTask(void *argument){
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b0d7      	sub	sp, #348	; 0x15c
 80026ac:	af4a      	add	r7, sp, #296	; 0x128
 80026ae:	6078      	str	r0, [r7, #4]
	uint64_t RxpipeAddrs = 0x11223344AA; //Address of sender
 80026b0:	a389      	add	r3, pc, #548	; (adr r3, 80028d8 <wirelessTask+0x230>)
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint8_t m;
//	osMutexWait(myMutex02Handle, osWaitForever); //Setting up Radio
//	mySetupNRF24(nrf_CSN_PORT, nrf_CSN_PIN, nrf_CE_PIN,
//			  hspi2,huart3,52, RxpipeAddrs, 1);
	mySetupNRF24(nrf_CSN_PORT3_2, nrf_CSN_PIN3_2, nrf_CE_PIN3_2,
 80026ba:	4c7b      	ldr	r4, [pc, #492]	; (80028a8 <wirelessTask+0x200>)
 80026bc:	2301      	movs	r3, #1
 80026be:	9348      	str	r3, [sp, #288]	; 0x120
 80026c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026c4:	e9cd 2346 	strd	r2, r3, [sp, #280]	; 0x118
 80026c8:	2334      	movs	r3, #52	; 0x34
 80026ca:	9345      	str	r3, [sp, #276]	; 0x114
 80026cc:	4a77      	ldr	r2, [pc, #476]	; (80028ac <wirelessTask+0x204>)
 80026ce:	ab21      	add	r3, sp, #132	; 0x84
 80026d0:	4611      	mov	r1, r2
 80026d2:	2290      	movs	r2, #144	; 0x90
 80026d4:	4618      	mov	r0, r3
 80026d6:	f00d f8ba 	bl	800f84e <memcpy>
 80026da:	4668      	mov	r0, sp
 80026dc:	1d23      	adds	r3, r4, #4
 80026de:	2284      	movs	r2, #132	; 0x84
 80026e0:	4619      	mov	r1, r3
 80026e2:	f00d f8b4 	bl	800f84e <memcpy>
 80026e6:	6823      	ldr	r3, [r4, #0]
 80026e8:	2240      	movs	r2, #64	; 0x40
 80026ea:	2180      	movs	r1, #128	; 0x80
 80026ec:	4870      	ldr	r0, [pc, #448]	; (80028b0 <wirelessTask+0x208>)
 80026ee:	f7ff f931 	bl	8001954 <mySetupNRF24>
				  hspi3,huart3,52, RxpipeAddrs, 1);
//	osMutexRelease(myMutex02Handle);

	int maxX = 306; //Max and min values
 80026f2:	f44f 7399 	mov.w	r3, #306	; 0x132
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
	int minX = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	623b      	str	r3, [r7, #32]
	int maxY = 170;
 80026fc:	23aa      	movs	r3, #170	; 0xaa
 80026fe:	61fb      	str	r3, [r7, #28]
	int minY = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
	int maxA = 360;
 8002704:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002708:	617b      	str	r3, [r7, #20]
	int minA = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]

	stanleyTaskHandle = osThreadNew(stanleyTask, NULL, &stanleyTaskHandle_attributes);
 800270e:	4a69      	ldr	r2, [pc, #420]	; (80028b4 <wirelessTask+0x20c>)
 8002710:	2100      	movs	r1, #0
 8002712:	4869      	ldr	r0, [pc, #420]	; (80028b8 <wirelessTask+0x210>)
 8002714:	f009 fe12 	bl	800c33c <osThreadNew>
 8002718:	4603      	mov	r3, r0
 800271a:	4a68      	ldr	r2, [pc, #416]	; (80028bc <wirelessTask+0x214>)
 800271c:	6013      	str	r3, [r2, #0]

	for(;;){
		m = myReadData(myRxData);
 800271e:	4868      	ldr	r0, [pc, #416]	; (80028c0 <wirelessTask+0x218>)
 8002720:	f7ff f95f 	bl	80019e2 <myReadData>
 8002724:	4603      	mov	r3, r0
 8002726:	73fb      	strb	r3, [r7, #15]
		dataCam.x = (uint16_t)myRxData[0] << 8 | myRxData[1];
 8002728:	4b65      	ldr	r3, [pc, #404]	; (80028c0 <wirelessTask+0x218>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	b21a      	sxth	r2, r3
 8002730:	4b63      	ldr	r3, [pc, #396]	; (80028c0 <wirelessTask+0x218>)
 8002732:	785b      	ldrb	r3, [r3, #1]
 8002734:	b21b      	sxth	r3, r3
 8002736:	4313      	orrs	r3, r2
 8002738:	b21b      	sxth	r3, r3
 800273a:	b29a      	uxth	r2, r3
 800273c:	4b61      	ldr	r3, [pc, #388]	; (80028c4 <wirelessTask+0x21c>)
 800273e:	801a      	strh	r2, [r3, #0]
		dataCam.y = (uint16_t)myRxData[2] << 8 | myRxData[3];
 8002740:	4b5f      	ldr	r3, [pc, #380]	; (80028c0 <wirelessTask+0x218>)
 8002742:	789b      	ldrb	r3, [r3, #2]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	b21a      	sxth	r2, r3
 8002748:	4b5d      	ldr	r3, [pc, #372]	; (80028c0 <wirelessTask+0x218>)
 800274a:	78db      	ldrb	r3, [r3, #3]
 800274c:	b21b      	sxth	r3, r3
 800274e:	4313      	orrs	r3, r2
 8002750:	b21b      	sxth	r3, r3
 8002752:	b29a      	uxth	r2, r3
 8002754:	4b5b      	ldr	r3, [pc, #364]	; (80028c4 <wirelessTask+0x21c>)
 8002756:	805a      	strh	r2, [r3, #2]
		dataCam.theta = (uint16_t)myRxData[4] << 8 | myRxData[5];
 8002758:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <wirelessTask+0x218>)
 800275a:	791b      	ldrb	r3, [r3, #4]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	b21a      	sxth	r2, r3
 8002760:	4b57      	ldr	r3, [pc, #348]	; (80028c0 <wirelessTask+0x218>)
 8002762:	795b      	ldrb	r3, [r3, #5]
 8002764:	b21b      	sxth	r3, r3
 8002766:	4313      	orrs	r3, r2
 8002768:	b21b      	sxth	r3, r3
 800276a:	b29a      	uxth	r2, r3
 800276c:	4b55      	ldr	r3, [pc, #340]	; (80028c4 <wirelessTask+0x21c>)
 800276e:	809a      	strh	r2, [r3, #4]

		dataCam.x = dataCam.x < minX ? minX : dataCam.x;
 8002770:	4b54      	ldr	r3, [pc, #336]	; (80028c4 <wirelessTask+0x21c>)
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	4293      	cmp	r3, r2
 800277a:	bfb8      	it	lt
 800277c:	4613      	movlt	r3, r2
 800277e:	b29a      	uxth	r2, r3
 8002780:	4b50      	ldr	r3, [pc, #320]	; (80028c4 <wirelessTask+0x21c>)
 8002782:	801a      	strh	r2, [r3, #0]
		dataCam.x = dataCam.x > maxX ? maxX : dataCam.x;
 8002784:	4b4f      	ldr	r3, [pc, #316]	; (80028c4 <wirelessTask+0x21c>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	4293      	cmp	r3, r2
 800278e:	bfa8      	it	ge
 8002790:	4613      	movge	r3, r2
 8002792:	b29a      	uxth	r2, r3
 8002794:	4b4b      	ldr	r3, [pc, #300]	; (80028c4 <wirelessTask+0x21c>)
 8002796:	801a      	strh	r2, [r3, #0]
		dataCam.y = dataCam.y < minY ? minY : dataCam.y;
 8002798:	4b4a      	ldr	r3, [pc, #296]	; (80028c4 <wirelessTask+0x21c>)
 800279a:	885b      	ldrh	r3, [r3, #2]
 800279c:	461a      	mov	r2, r3
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	4293      	cmp	r3, r2
 80027a2:	bfb8      	it	lt
 80027a4:	4613      	movlt	r3, r2
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	4b46      	ldr	r3, [pc, #280]	; (80028c4 <wirelessTask+0x21c>)
 80027aa:	805a      	strh	r2, [r3, #2]
		dataCam.y = dataCam.y > maxY ? maxY : dataCam.y;
 80027ac:	4b45      	ldr	r3, [pc, #276]	; (80028c4 <wirelessTask+0x21c>)
 80027ae:	885b      	ldrh	r3, [r3, #2]
 80027b0:	461a      	mov	r2, r3
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4293      	cmp	r3, r2
 80027b6:	bfa8      	it	ge
 80027b8:	4613      	movge	r3, r2
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <wirelessTask+0x21c>)
 80027be:	805a      	strh	r2, [r3, #2]
		dataCam.theta = dataCam.theta < minA ? minA : dataCam.theta;
 80027c0:	4b40      	ldr	r3, [pc, #256]	; (80028c4 <wirelessTask+0x21c>)
 80027c2:	889b      	ldrh	r3, [r3, #4]
 80027c4:	461a      	mov	r2, r3
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4293      	cmp	r3, r2
 80027ca:	bfb8      	it	lt
 80027cc:	4613      	movlt	r3, r2
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	4b3c      	ldr	r3, [pc, #240]	; (80028c4 <wirelessTask+0x21c>)
 80027d2:	809a      	strh	r2, [r3, #4]
		dataCam.theta = dataCam.theta > maxA ? maxA : dataCam.theta;
 80027d4:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <wirelessTask+0x21c>)
 80027d6:	889b      	ldrh	r3, [r3, #4]
 80027d8:	461a      	mov	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	4293      	cmp	r3, r2
 80027de:	bfa8      	it	ge
 80027e0:	4613      	movge	r3, r2
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <wirelessTask+0x21c>)
 80027e6:	809a      	strh	r2, [r3, #4]

		dataCam.px = dataCam.x / 100.0;
 80027e8:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <wirelessTask+0x21c>)
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	ee07 3a90 	vmov	s15, r3
 80027f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80027f4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80028a0 <wirelessTask+0x1f8>
 80027f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80027fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002800:	4b30      	ldr	r3, [pc, #192]	; (80028c4 <wirelessTask+0x21c>)
 8002802:	edc3 7a02 	vstr	s15, [r3, #8]
		dataCam.py = dataCam.y / 100.0;
 8002806:	4b2f      	ldr	r3, [pc, #188]	; (80028c4 <wirelessTask+0x21c>)
 8002808:	885b      	ldrh	r3, [r3, #2]
 800280a:	ee07 3a90 	vmov	s15, r3
 800280e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002812:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80028a0 <wirelessTask+0x1f8>
 8002816:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800281a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800281e:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <wirelessTask+0x21c>)
 8002820:	edc3 7a03 	vstr	s15, [r3, #12]
		dataCam.psi = dataCam.theta;
 8002824:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <wirelessTask+0x21c>)
 8002826:	889b      	ldrh	r3, [r3, #4]
 8002828:	ee07 3a90 	vmov	s15, r3
 800282c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002830:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <wirelessTask+0x21c>)
 8002832:	edc3 7a04 	vstr	s15, [r3, #16]

		if(dataCam.psi > 180)
 8002836:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <wirelessTask+0x21c>)
 8002838:	edd3 7a04 	vldr	s15, [r3, #16]
 800283c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80028c8 <wirelessTask+0x220>
 8002840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002848:	dd09      	ble.n	800285e <wirelessTask+0x1b6>
			dataCam.psi -= 360;
 800284a:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <wirelessTask+0x21c>)
 800284c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002850:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80028cc <wirelessTask+0x224>
 8002854:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002858:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <wirelessTask+0x21c>)
 800285a:	edc3 7a04 	vstr	s15, [r3, #16]

//		printf("S: %d |",m);
//		printf("%x%x %x%x %x%x",myRxData2[0],myRxData2[1],myRxData2[2],myRxData2[3],myRxData2[4],myRxData2[5]);
//		printf("%x%x %x%x %x%x",myRxData[0],myRxData[1],myRxData[2],myRxData[3],myRxData[4],myRxData[5]);
//		printf("\r\n");
		printf("X:%3.3f Y:%3.3f Angle:%3.3f\r\n",dataCam.px,dataCam.py,dataCam.psi);
 800285e:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <wirelessTask+0x21c>)
 8002860:	edd3 7a02 	vldr	s15, [r3, #8]
 8002864:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002868:	4b16      	ldr	r3, [pc, #88]	; (80028c4 <wirelessTask+0x21c>)
 800286a:	edd3 7a03 	vldr	s15, [r3, #12]
 800286e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002872:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <wirelessTask+0x21c>)
 8002874:	edd3 6a04 	vldr	s13, [r3, #16]
 8002878:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800287c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002880:	ed8d 7b00 	vstr	d7, [sp]
 8002884:	ec53 2b15 	vmov	r2, r3, d5
 8002888:	4811      	ldr	r0, [pc, #68]	; (80028d0 <wirelessTask+0x228>)
 800288a:	f00d fccf 	bl	801022c <iprintf>
		printf("\r\n");
 800288e:	4811      	ldr	r0, [pc, #68]	; (80028d4 <wirelessTask+0x22c>)
 8002890:	f00d fd52 	bl	8010338 <puts>
		osDelay(100);
 8002894:	2064      	movs	r0, #100	; 0x64
 8002896:	f009 fde3 	bl	800c460 <osDelay>
		m = myReadData(myRxData);
 800289a:	e740      	b.n	800271e <wirelessTask+0x76>
 800289c:	f3af 8000 	nop.w
 80028a0:	00000000 	.word	0x00000000
 80028a4:	40590000 	.word	0x40590000
 80028a8:	24000834 	.word	0x24000834
 80028ac:	24000958 	.word	0x24000958
 80028b0:	58020c00 	.word	0x58020c00
 80028b4:	08013d14 	.word	0x08013d14
 80028b8:	08002471 	.word	0x08002471
 80028bc:	24000704 	.word	0x24000704
 80028c0:	240004c4 	.word	0x240004c4
 80028c4:	240004e4 	.word	0x240004e4
 80028c8:	43340000 	.word	0x43340000
 80028cc:	43b40000 	.word	0x43b40000
 80028d0:	08013bb0 	.word	0x08013bb0
 80028d4:	08013bd0 	.word	0x08013bd0
 80028d8:	223344aa 	.word	0x223344aa
 80028dc:	00000011 	.word	0x00000011

080028e0 <canTask>:
	}
}

void canTask(void *argument){
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b094      	sub	sp, #80	; 0x50
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	//float speed=1.3;
	uint8_t m;
	float loc_speed;

	printf("Starting CAN...\r\n");
 80028e8:	4817      	ldr	r0, [pc, #92]	; (8002948 <canTask+0x68>)
 80028ea:	f00d fd25 	bl	8010338 <puts>
	for(;;){
		// osMutexWait(myMutex01Handle, osWaitForever); //Setting up Radio
		readSpeed(&hfdcan1, &RxHeader, bf, RxData, &m, &loc_speed);
 80028ee:	f107 0214 	add.w	r2, r7, #20
 80028f2:	f107 0120 	add.w	r1, r7, #32
 80028f6:	f107 030c 	add.w	r3, r7, #12
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	f107 0313 	add.w	r3, r7, #19
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	4613      	mov	r3, r2
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	4811      	ldr	r0, [pc, #68]	; (800294c <canTask+0x6c>)
 8002908:	f001 fc48 	bl	800419c <readSpeed>
		speed = loc_speed / 10;
 800290c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002910:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <canTask+0x70>)
 800291a:	edc3 7a00 	vstr	s15, [r3]
		if(speed<0){
 800291e:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <canTask+0x70>)
 8002920:	edd3 7a00 	vldr	s15, [r3]
 8002924:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292c:	d507      	bpl.n	800293e <canTask+0x5e>
			speed=speed*-1;
 800292e:	4b08      	ldr	r3, [pc, #32]	; (8002950 <canTask+0x70>)
 8002930:	edd3 7a00 	vldr	s15, [r3]
 8002934:	eef1 7a67 	vneg.f32	s15, s15
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <canTask+0x70>)
 800293a:	edc3 7a00 	vstr	s15, [r3]
//		for(int i=0;i<8;i++){
//			printf("%x",RxData[i]);
//		}
////		speed = (float)loc_sp;
//		printf("} %3.3f, CAN: %3.3f \r\n",speed, speed);
		osDelay(100);
 800293e:	2064      	movs	r0, #100	; 0x64
 8002940:	f009 fd8e 	bl	800c460 <osDelay>
		readSpeed(&hfdcan1, &RxHeader, bf, RxData, &m, &loc_speed);
 8002944:	e7d3      	b.n	80028ee <canTask+0xe>
 8002946:	bf00      	nop
 8002948:	08013bd4 	.word	0x08013bd4
 800294c:	2400033c 	.word	0x2400033c
 8002950:	240004f8 	.word	0x240004f8

08002954 <MX_GPIO_Init>:
>>>>>>> Stashed changes
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
<<<<<<< Updated upstream
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	; 0x30
 8000e18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	4b56      	ldr	r3, [pc, #344]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	4a54      	ldr	r2, [pc, #336]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3a:	4b52      	ldr	r3, [pc, #328]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
 8000e46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e48:	4b4e      	ldr	r3, [pc, #312]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	4a4d      	ldr	r2, [pc, #308]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e58:	4b4a      	ldr	r3, [pc, #296]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b47      	ldr	r3, [pc, #284]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6c:	4a45      	ldr	r2, [pc, #276]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e76:	4b43      	ldr	r3, [pc, #268]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e84:	4b3f      	ldr	r3, [pc, #252]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8a:	4a3e      	ldr	r2, [pc, #248]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e94:	4b3b      	ldr	r3, [pc, #236]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea2:	4b38      	ldr	r3, [pc, #224]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	4a36      	ldr	r2, [pc, #216]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000eaa:	f043 0308 	orr.w	r3, r3, #8
 8000eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb2:	4b34      	ldr	r3, [pc, #208]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb8:	f003 0308 	and.w	r3, r3, #8
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec0:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec6:	4a2f      	ldr	r2, [pc, #188]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000ec8:	f043 0310 	orr.w	r3, r3, #16
 8000ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <MX_GPIO_Init+0x170>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2110      	movs	r1, #16
 8000ee2:	4829      	ldr	r0, [pc, #164]	; (8000f88 <MX_GPIO_Init+0x174>)
 8000ee4:	f002 fac6 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_Green_GPIO_Port, LD1_Green_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2101      	movs	r1, #1
 8000eec:	4827      	ldr	r0, [pc, #156]	; (8000f8c <MX_GPIO_Init+0x178>)
 8000eee:	f002 fac1 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CE_Pin_Pin|CSN_Pin_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000ef8:	4825      	ldr	r0, [pc, #148]	; (8000f90 <MX_GPIO_Init+0x17c>)
 8000efa:	f002 fabb 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_yellow_GPIO_Port, LD2_yellow_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2102      	movs	r1, #2
 8000f02:	4824      	ldr	r0, [pc, #144]	; (8000f94 <MX_GPIO_Init+0x180>)
 8000f04:	f002 fab6 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000f08:	2310      	movs	r3, #16
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	481a      	ldr	r0, [pc, #104]	; (8000f88 <MX_GPIO_Init+0x174>)
 8000f20:	f002 f8f8 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Green_Pin;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_Green_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4814      	ldr	r0, [pc, #80]	; (8000f8c <MX_GPIO_Init+0x178>)
 8000f3c:	f002 f8ea 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CE_Pin_Pin|CSN_Pin_Pin;
 8000f40:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	480d      	ldr	r0, [pc, #52]	; (8000f90 <MX_GPIO_Init+0x17c>)
 8000f5a:	f002 f8db 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_yellow_Pin;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_yellow_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4807      	ldr	r0, [pc, #28]	; (8000f94 <MX_GPIO_Init+0x180>)
 8000f76:	f002 f8cd 	bl	8003114 <HAL_GPIO_Init>

}
 8000f7a:	bf00      	nop
 8000f7c:	3730      	adds	r7, #48	; 0x30
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	58024400 	.word	0x58024400
 8000f88:	58020000 	.word	0x58020000
 8000f8c:	58020400 	.word	0x58020400
 8000f90:	58020c00 	.word	0x58020c00
 8000f94:	58021000 	.word	0x58021000

08000f98 <main>:
=======
 8002954:	b580      	push	{r7, lr}
 8002956:	b08c      	sub	sp, #48	; 0x30
 8002958:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295a:	f107 031c 	add.w	r3, r7, #28
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	609a      	str	r2, [r3, #8]
 8002966:	60da      	str	r2, [r3, #12]
 8002968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800296a:	4b67      	ldr	r3, [pc, #412]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 800296c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002970:	4a65      	ldr	r2, [pc, #404]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 8002972:	f043 0304 	orr.w	r3, r3, #4
 8002976:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800297a:	4b63      	ldr	r3, [pc, #396]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 800297c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	61bb      	str	r3, [r7, #24]
 8002986:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002988:	4b5f      	ldr	r3, [pc, #380]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 800298a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298e:	4a5e      	ldr	r2, [pc, #376]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 8002990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002994:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002998:	4b5b      	ldr	r3, [pc, #364]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 800299a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a6:	4b58      	ldr	r3, [pc, #352]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 80029a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ac:	4a56      	ldr	r2, [pc, #344]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029b6:	4b54      	ldr	r3, [pc, #336]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 80029b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c4:	4b50      	ldr	r3, [pc, #320]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 80029c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ca:	4a4f      	ldr	r2, [pc, #316]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029d4:	4b4c      	ldr	r3, [pc, #304]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 80029d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029e2:	4b49      	ldr	r3, [pc, #292]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 80029e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e8:	4a47      	ldr	r2, [pc, #284]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 80029ea:	f043 0308 	orr.w	r3, r3, #8
 80029ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f2:	4b45      	ldr	r3, [pc, #276]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 80029f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a00:	4b41      	ldr	r3, [pc, #260]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 8002a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a06:	4a40      	ldr	r2, [pc, #256]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 8002a08:	f043 0310 	orr.w	r3, r3, #16
 8002a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a10:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <MX_GPIO_Init+0x1b4>)
 8002a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	607b      	str	r3, [r7, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2110      	movs	r1, #16
 8002a22:	483a      	ldr	r0, [pc, #232]	; (8002b0c <MX_GPIO_Init+0x1b8>)
 8002a24:	f003 ff08 	bl	8006838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_Green_GPIO_Port, LD1_Green_Pin, GPIO_PIN_RESET);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	4838      	ldr	r0, [pc, #224]	; (8002b10 <MX_GPIO_Init+0x1bc>)
 8002a2e:	f003 ff03 	bl	8006838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15|CE_2__Pin|CSN3_2__Pin, GPIO_PIN_RESET);
 8002a32:	2200      	movs	r2, #0
 8002a34:	f24c 01c0 	movw	r1, #49344	; 0xc0c0
 8002a38:	4836      	ldr	r0, [pc, #216]	; (8002b14 <MX_GPIO_Init+0x1c0>)
 8002a3a:	f003 fefd 	bl	8006838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_Pin_GPIO_Port, CSN_Pin_Pin, GPIO_PIN_RESET);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a44:	4834      	ldr	r0, [pc, #208]	; (8002b18 <MX_GPIO_Init+0x1c4>)
 8002a46:	f003 fef7 	bl	8006838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_yellow_GPIO_Port, LD2_yellow_Pin, GPIO_PIN_RESET);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	4833      	ldr	r0, [pc, #204]	; (8002b1c <MX_GPIO_Init+0x1c8>)
 8002a50:	f003 fef2 	bl	8006838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8002a54:	2310      	movs	r3, #16
 8002a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a60:	2300      	movs	r3, #0
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002a64:	f107 031c 	add.w	r3, r7, #28
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4828      	ldr	r0, [pc, #160]	; (8002b0c <MX_GPIO_Init+0x1b8>)
 8002a6c:	f003 fd34 	bl	80064d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Green_Pin;
 8002a70:	2301      	movs	r3, #1
 8002a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a74:	2301      	movs	r3, #1
 8002a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_Green_GPIO_Port, &GPIO_InitStruct);
 8002a80:	f107 031c 	add.w	r3, r7, #28
 8002a84:	4619      	mov	r1, r3
 8002a86:	4822      	ldr	r0, [pc, #136]	; (8002b10 <MX_GPIO_Init+0x1bc>)
 8002a88:	f003 fd26 	bl	80064d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|CE_2__Pin|CSN3_2__Pin;
 8002a8c:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 8002a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a92:	2301      	movs	r3, #1
 8002a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a9e:	f107 031c 	add.w	r3, r7, #28
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	481b      	ldr	r0, [pc, #108]	; (8002b14 <MX_GPIO_Init+0x1c0>)
 8002aa6:	f003 fd17 	bl	80064d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin_Pin;
 8002aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CSN_Pin_GPIO_Port, &GPIO_InitStruct);
 8002abc:	f107 031c 	add.w	r3, r7, #28
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4815      	ldr	r0, [pc, #84]	; (8002b18 <MX_GPIO_Init+0x1c4>)
 8002ac4:	f003 fd08 	bl	80064d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin_Pin;
 8002ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CE_Pin_GPIO_Port, &GPIO_InitStruct);
 8002ad6:	f107 031c 	add.w	r3, r7, #28
 8002ada:	4619      	mov	r1, r3
 8002adc:	480e      	ldr	r0, [pc, #56]	; (8002b18 <MX_GPIO_Init+0x1c4>)
 8002ade:	f003 fcfb 	bl	80064d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_yellow_Pin;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aee:	2300      	movs	r3, #0
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_yellow_GPIO_Port, &GPIO_InitStruct);
 8002af2:	f107 031c 	add.w	r3, r7, #28
 8002af6:	4619      	mov	r1, r3
 8002af8:	4808      	ldr	r0, [pc, #32]	; (8002b1c <MX_GPIO_Init+0x1c8>)
 8002afa:	f003 fced 	bl	80064d8 <HAL_GPIO_Init>

}
 8002afe:	bf00      	nop
 8002b00:	3730      	adds	r7, #48	; 0x30
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	58024400 	.word	0x58024400
 8002b0c:	58020000 	.word	0x58020000
 8002b10:	58020400 	.word	0x58020400
 8002b14:	58020c00 	.word	0x58020c00
 8002b18:	58020800 	.word	0x58020800
 8002b1c:	58021000 	.word	0x58021000

08002b20 <initKalman>:
#include "myprintf.h"

void initKalman(struct KF * kf, 
    float initial_x, float initial_y,
    float initial_vx, float initial_vy,
    float accel_var_x, float accel_var_y) {
 8002b20:	b490      	push	{r4, r7}
 8002b22:	b08e      	sub	sp, #56	; 0x38
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	61f8      	str	r0, [r7, #28]
 8002b28:	ed87 0a06 	vstr	s0, [r7, #24]
 8002b2c:	edc7 0a05 	vstr	s1, [r7, #20]
 8002b30:	ed87 1a04 	vstr	s2, [r7, #16]
 8002b34:	edc7 1a03 	vstr	s3, [r7, #12]
 8002b38:	ed87 2a02 	vstr	s4, [r7, #8]
 8002b3c:	edc7 2a01 	vstr	s5, [r7, #4]
    float I[2][2] = {{1.0,0.0},{0.0,1.0}};
 8002b40:	4b29      	ldr	r3, [pc, #164]	; (8002be8 <initKalman+0xc8>)
 8002b42:	f107 0420 	add.w	r4, r7, #32
 8002b46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    kf->x[0] = initial_x;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	601a      	str	r2, [r3, #0]
    kf->x[1] = initial_vx;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	605a      	str	r2, [r3, #4]
    kf->y[0] = initial_y;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	609a      	str	r2, [r3, #8]
    kf->y[1] = initial_vy;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	60da      	str	r2, [r3, #12]
    kf->accel_variance_x = accel_var_x;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	611a      	str	r2, [r3, #16]
    kf->accel_variance_y = accel_var_y;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	615a      	str	r2, [r3, #20]

    for(int i = 0 ; i < 2 ; i++){
 8002b70:	2300      	movs	r3, #0
 8002b72:	637b      	str	r3, [r7, #52]	; 0x34
 8002b74:	e02f      	b.n	8002bd6 <initKalman+0xb6>
        for(int j = 0 ; j < 2 ; j++){
 8002b76:	2300      	movs	r3, #0
 8002b78:	633b      	str	r3, [r7, #48]	; 0x30
 8002b7a:	e026      	b.n	8002bca <initKalman+0xaa>
            kf->Px[i][j] = I[i][j];
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7e:	005a      	lsls	r2, r3, #1
 8002b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	3338      	adds	r3, #56	; 0x38
 8002b88:	443b      	add	r3, r7
 8002b8a:	3b18      	subs	r3, #24
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	69f9      	ldr	r1, [r7, #28]
 8002b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b92:	0058      	lsls	r0, r3, #1
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	4403      	add	r3, r0
 8002b98:	3306      	adds	r3, #6
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	601a      	str	r2, [r3, #0]
            kf->Py[i][j] = I[i][j];
 8002ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba2:	005a      	lsls	r2, r3, #1
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	3338      	adds	r3, #56	; 0x38
 8002bac:	443b      	add	r3, r7
 8002bae:	3b18      	subs	r3, #24
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	69f9      	ldr	r1, [r7, #28]
 8002bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb6:	0058      	lsls	r0, r3, #1
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	4403      	add	r3, r0
 8002bbc:	330a      	adds	r3, #10
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	601a      	str	r2, [r3, #0]
        for(int j = 0 ; j < 2 ; j++){
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	ddd5      	ble.n	8002b7c <initKalman+0x5c>
    for(int i = 0 ; i < 2 ; i++){
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	ddcc      	ble.n	8002b76 <initKalman+0x56>
        }
    }
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3738      	adds	r7, #56	; 0x38
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc90      	pop	{r4, r7}
 8002be6:	4770      	bx	lr
 8002be8:	08013be8 	.word	0x08013be8

08002bec <predict>:

void predict(struct KF * kf, float dt) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b0aa      	sub	sp, #168	; 0xa8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	ed87 0a00 	vstr	s0, [r7]
    float F[2][2] = {{1, dt}, {0, 1}};
 8002bf8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002bfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c0e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float G[2] = {0.5 * dt * dt, dt};
 8002c16:	edd7 7a00 	vldr	s15, [r7]
 8002c1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c1e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002c22:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002c26:	edd7 7a00 	vldr	s15, [r7]
 8002c2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c2e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002c32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c36:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    // x = F * x
    float x_new[2];
    float y_new[2];
    dotV(kf->x, F, x_new);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c46:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fa4a 	bl	80030e4 <dotV>
    dotV(kf->y, F, y_new);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3308      	adds	r3, #8
 8002c54:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002c58:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fa41 	bl	80030e4 <dotV>
    copy(x_new, kf->x);
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 faa6 	bl	80031bc <copy>
    copy(y_new, kf->y);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f103 0208 	add.w	r2, r3, #8
 8002c76:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fa9d 	bl	80031bc <copy>
    float temp2_y[2][2];
    float FPx[2][2];
    float FPy[2][2];

    // FP = F * P
    dot(F, kf->Px, FPx);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f103 0118 	add.w	r1, r3, #24
 8002c88:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002c8c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 f9cd 	bl	8003030 <dot>
    dot(F, kf->Py, FPy);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002c9c:	f107 021c 	add.w	r2, r7, #28
 8002ca0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 f9c3 	bl	8003030 <dot>

    // P = FP * Ft
    float Ft[2][2];
    trans(F, Ft);
 8002caa:	f107 020c 	add.w	r2, r7, #12
 8002cae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fae5 	bl	8003284 <trans>
    dot(FPx, Ft, kf->Px);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f103 0218 	add.w	r2, r3, #24
 8002cc0:	f107 010c 	add.w	r1, r7, #12
 8002cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 f9b1 	bl	8003030 <dot>
    dot(FPy, Ft, kf->Py);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002cd4:	f107 010c 	add.w	r1, r7, #12
 8002cd8:	f107 031c 	add.w	r3, r7, #28
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 f9a7 	bl	8003030 <dot>

    // G * Gt
    float GGt = G[0] * G[0] + G[1] * G[1];
 8002ce2:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002ce6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cee:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8002cf2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002cf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfe:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

    // P = P + GGt * accel_variance
    kf->Px[0][0] += GGt * kf->accel_variance_x;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	edd3 6a04 	vldr	s13, [r3, #16]
 8002d0e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002d12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	edc3 7a06 	vstr	s15, [r3, #24]
    kf->Px[1][1] += GGt * kf->accel_variance_x;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	edd3 6a04 	vldr	s13, [r3, #16]
 8002d2c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    kf->Py[0][0] += GGt * kf->accel_variance_y;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	edd3 6a05 	vldr	s13, [r3, #20]
 8002d4a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002d4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    kf->Py[1][1] += GGt * kf->accel_variance_y;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	edd3 6a05 	vldr	s13, [r3, #20]
 8002d68:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8002d7a:	bf00      	nop
 8002d7c:	37a8      	adds	r7, #168	; 0xa8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <update>:

void update(struct KF * kf, float meas_value_x, float meas_value_y, float meas_variance) {
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b0ad      	sub	sp, #180	; 0xb4
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d90:	edc7 0a01 	vstr	s1, [r7, #4]
 8002d94:	ed87 1a00 	vstr	s2, [r7]
    float H[2] = {1, 0};
 8002d98:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    // Y = z - H * x
    float Yx = meas_value_x - H[0] * kf->x[0] - H[1] * kf->x[1];
 8002da8:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db6:	ed97 7a02 	vldr	s14, [r7, #8]
 8002dba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dbe:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
    float Yy = meas_value_y - H[0] * kf->y[0] - H[1] * kf->y[1];
 8002dd4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de2:	ed97 7a01 	vldr	s14, [r7, #4]
 8002de6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dea:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002df4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfc:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

    // S = H * P * Ht + R
    float Hpx[2];
    float Hpy[2];
    dotV(H, kf->Px, Hpx);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f103 0118 	add.w	r1, r3, #24
 8002e06:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 f968 	bl	80030e4 <dotV>
    dotV(H, kf->Py, Hpy);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002e1a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002e1e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f95e 	bl	80030e4 <dotV>
    
    float Sx = Hpx[0]*H[0] + Hpx[1]*H[1] + meas_variance;
 8002e28:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002e2c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e34:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8002e38:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e44:	ed97 7a00 	vldr	s14, [r7]
 8002e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
    float Sy = Hpy[0]*H[0] + Hpy[1]*H[1] + meas_variance;
 8002e50:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002e54:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002e58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e5c:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8002e60:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e6c:	ed97 7a00 	vldr	s14, [r7]
 8002e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e74:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
    // K = P * Ht * S^-1
    float Kx[2];
    float Ky[2];
    float PHtx[2];
    float PHty[2];
    dotV(H, kf->Px, PHtx);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f103 0118 	add.w	r1, r3, #24
 8002e7e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002e82:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 f92c 	bl	80030e4 <dotV>
    dotV(H, kf->Py, PHty);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002e92:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e96:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f922 	bl	80030e4 <dotV>
    dotS(1/Sx, PHtx, Kx);
 8002ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ea4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002ea8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eac:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002eb0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	eeb0 0a47 	vmov.f32	s0, s14
 8002ebc:	f000 f957 	bl	800316e <dotS>
    dotS(1/Sy, PHty, Ky);
 8002ec0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ec4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ecc:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002ed0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	eeb0 0a47 	vmov.f32	s0, s14
 8002edc:	f000 f947 	bl	800316e <dotS>

    // x = x + K * y
    kf->x[0] = kf->x[0] + Kx[0] * Yx;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	ed93 7a00 	vldr	s14, [r3]
 8002ee6:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8002eea:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	edc3 7a00 	vstr	s15, [r3]
    kf->x[1] = kf->x[1] + Kx[1] * Yx;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f02:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002f06:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	edc3 7a01 	vstr	s15, [r3, #4]
    kf->y[0] = kf->y[0] + Ky[0] * Yy;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f1e:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8002f22:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002f26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->y[1] = kf->y[1] + Ky[1] * Yy;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f3a:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8002f3e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	edc3 7a03 	vstr	s15, [r3, #12]

    // P = (I - K * H) * P
    float I[2][2] = {{1 , 0} , {0 , 1}};
 8002f50:	4b36      	ldr	r3, [pc, #216]	; (800302c <update+0x2a8>)
 8002f52:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002f56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    float KHx = Kx[0] * H[0] + Kx[1] * H[1];
 8002f5c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002f60:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002f64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f68:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002f6c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f78:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float KHy = Ky[0] * H[0] + Ky[1] * H[1];
 8002f7c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002f80:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f88:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8002f8c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f98:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

    float IKHx[2][2];
    float IKHy[2][2];
    sumS(KHx, I, IKHx);
 8002f9c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002fa0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	ed97 0a27 	vldr	s0, [r7, #156]	; 0x9c
 8002fac:	f000 f934 	bl	8003218 <sumS>
    sumS(KHy, I, IKHy);
 8002fb0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002fb4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8002fc0:	f000 f92a 	bl	8003218 <sumS>

    float Px_t[2][2];
    float Py_t[2][2];

    dot(IKHx, kf->Px, Px_t);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f103 0118 	add.w	r1, r3, #24
 8002fca:	f107 0220 	add.w	r2, r7, #32
 8002fce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f82c 	bl	8003030 <dot>
    dot(IKHy, kf->Py, Py_t);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002fde:	f107 0210 	add.w	r2, r7, #16
 8002fe2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f822 	bl	8003030 <dot>
    copy(Px_t, kf->Px);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f103 0218 	add.w	r2, r3, #24
 8002ff2:	f107 0320 	add.w	r3, r7, #32
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 f8df 	bl	80031bc <copy>
    copy(Py_t, kf->Py);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003004:	f107 0310 	add.w	r3, r7, #16
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f8d6 	bl	80031bc <copy>
    sat(kf->Px);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3318      	adds	r3, #24
 8003014:	4618      	mov	r0, r3
 8003016:	f000 f963 	bl	80032e0 <sat>
    sat(kf->Py);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3328      	adds	r3, #40	; 0x28
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f95e 	bl	80032e0 <sat>
}
 8003024:	bf00      	nop
 8003026:	37b4      	adds	r7, #180	; 0xb4
 8003028:	46bd      	mov	sp, r7
 800302a:	bd90      	pop	{r4, r7, pc}
 800302c:	08013be8 	.word	0x08013be8

08003030 <dot>:

void dot(float a[2][2], float b[2][2], float r[2][2]){
 8003030:	b480      	push	{r7}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 2; ++i) {
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
 8003040:	e046      	b.n	80030d0 <dot+0xa0>
        for (int j = 0; j < 2; ++j) {
 8003042:	2300      	movs	r3, #0
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	e03d      	b.n	80030c4 <dot+0x94>
            r[i][j] = 0.0;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	441a      	add	r2, r3
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 2; ++k) {
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	e02a      	b.n	80030b8 <dot+0x88>
                r[i][j] += a[i][k] * b[k][j];
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	441a      	add	r2, r3
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	ed93 7a00 	vldr	s14, [r3]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	441a      	add	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	edd3 6a00 	vldr	s13, [r3]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	441a      	add	r2, r3
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	441a      	add	r2, r3
 80030a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 2; ++k) {
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	3301      	adds	r3, #1
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	ddd1      	ble.n	8003062 <dot+0x32>
        for (int j = 0; j < 2; ++j) {
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	3301      	adds	r3, #1
 80030c2:	61bb      	str	r3, [r7, #24]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	ddbe      	ble.n	8003048 <dot+0x18>
    for (int i = 0; i < 2; ++i) {
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3301      	adds	r3, #1
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	ddb5      	ble.n	8003042 <dot+0x12>
            }
        }
    }
}
 80030d6:	bf00      	nop
 80030d8:	bf00      	nop
 80030da:	3724      	adds	r7, #36	; 0x24
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <dotV>:

void dotV(float a[2], float b[2][2], float r[2]){
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 2; ++i) {
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e031      	b.n	800315a <dotV+0x76>
        r[i] = 0;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 2; ++j) {
 8003104:	2300      	movs	r3, #0
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	e021      	b.n	800314e <dotV+0x6a>
            r[i] += b[i][j] * a[j];
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	ed93 7a00 	vldr	s14, [r3]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	441a      	add	r2, r3
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	edd3 6a00 	vldr	s13, [r3]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	edd3 7a00 	vldr	s15, [r3]
 8003134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	4413      	add	r3, r2
 8003140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003144:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 2; ++j) {
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	3301      	adds	r3, #1
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b01      	cmp	r3, #1
 8003152:	ddda      	ble.n	800310a <dotV+0x26>
    for (int i = 0; i < 2; ++i) {
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	3301      	adds	r3, #1
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b01      	cmp	r3, #1
 800315e:	ddca      	ble.n	80030f6 <dotV+0x12>
        }
    }
}
 8003160:	bf00      	nop
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <dotS>:

void dotS(float a, float b[2], float r[2]){
 800316e:	b480      	push	{r7}
 8003170:	b087      	sub	sp, #28
 8003172:	af00      	add	r7, sp, #0
 8003174:	ed87 0a03 	vstr	s0, [r7, #12]
 8003178:	60b8      	str	r0, [r7, #8]
 800317a:	6079      	str	r1, [r7, #4]
    for (int i = 0; i < 2; ++i) {
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	e012      	b.n	80031a8 <dotS+0x3a>
        r[i] = b[i]*a;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	4413      	add	r3, r2
 800318a:	ed93 7a00 	vldr	s14, [r3]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	edd7 7a03 	vldr	s15, [r7, #12]
 800319a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 2; ++i) {
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	3301      	adds	r3, #1
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	dde9      	ble.n	8003182 <dotS+0x14>
    }
}
 80031ae:	bf00      	nop
 80031b0:	bf00      	nop
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <copy>:

void copy(float a[2][2], float r[2][2]){
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
    for(int i = 0 ; i < 2 ; i++){
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	e01b      	b.n	8003204 <copy+0x48>
        for(int j = 0 ; j < 2 ; j++){
 80031cc:	2300      	movs	r3, #0
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	e012      	b.n	80031f8 <copy+0x3c>
            r[i][j] = a[i][j];
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	441a      	add	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	6839      	ldr	r1, [r7, #0]
 80031e0:	4419      	add	r1, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	601a      	str	r2, [r3, #0]
        for(int j = 0 ; j < 2 ; j++){
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3301      	adds	r3, #1
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	dde9      	ble.n	80031d2 <copy+0x16>
    for(int i = 0 ; i < 2 ; i++){
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3301      	adds	r3, #1
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b01      	cmp	r3, #1
 8003208:	dde0      	ble.n	80031cc <copy+0x10>
        }
    }
}
 800320a:	bf00      	nop
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <sumS>:

void sumS(float a, float b[2][2],  float r[2][2]){
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003222:	60b8      	str	r0, [r7, #8]
 8003224:	6079      	str	r1, [r7, #4]
    for(int i = 0 ; i < 2 ; i++){
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	e021      	b.n	8003270 <sumS+0x58>
        for(int j = 0 ; j < 2 ; j++){
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	e018      	b.n	8003264 <sumS+0x4c>
            r[i][j] = b[i][j] + a;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	441a      	add	r2, r3
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	ed93 7a00 	vldr	s14, [r3]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	441a      	add	r2, r3
 800324c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0 ; j < 2 ; j++){
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	3301      	adds	r3, #1
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	2b01      	cmp	r3, #1
 8003268:	dde3      	ble.n	8003232 <sumS+0x1a>
    for(int i = 0 ; i < 2 ; i++){
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	3301      	adds	r3, #1
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2b01      	cmp	r3, #1
 8003274:	ddda      	ble.n	800322c <sumS+0x14>
        }
    }
}
 8003276:	bf00      	nop
 8003278:	bf00      	nop
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <trans>:

void trans(float a[2][2], float r[2][2]){
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
    for(int i = 0 ; i < 2 ; i++){
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	e01b      	b.n	80032cc <trans+0x48>
        for(int j = 0 ; j < 2 ; j++){
 8003294:	2300      	movs	r3, #0
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	e012      	b.n	80032c0 <trans+0x3c>
            r[i][j] = a[j][i];
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	441a      	add	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	6839      	ldr	r1, [r7, #0]
 80032a8:	4419      	add	r1, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	601a      	str	r2, [r3, #0]
        for(int j = 0 ; j < 2 ; j++){
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	3301      	adds	r3, #1
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	dde9      	ble.n	800329a <trans+0x16>
    for(int i = 0 ; i < 2 ; i++){
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	3301      	adds	r3, #1
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	dde0      	ble.n	8003294 <trans+0x10>
        }
    }
}
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <sat>:

void sat(float r[2][2]){
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
    float sat[2] = {10000.0, -10000.0};
 80032e8:	4a31      	ldr	r2, [pc, #196]	; (80033b0 <sat+0xd0>)
 80032ea:	f107 0308 	add.w	r3, r7, #8
 80032ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032f2:	e883 0003 	stmia.w	r3, {r0, r1}
    for(int i = 0 ; i < 2 ; i++){
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	e04f      	b.n	800339c <sat+0xbc>
        for(int j = 0 ; j < 2 ; j++){
 80032fc:	2300      	movs	r3, #0
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	e046      	b.n	8003390 <sat+0xb0>
            r[i][j] = r[i][j] < sat[1] ? sat[1] : r[i][j];
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	441a      	add	r2, r3
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	ed93 7a00 	vldr	s14, [r3]
 8003314:	edd7 7a03 	vldr	s15, [r7, #12]
 8003318:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800331c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003320:	d501      	bpl.n	8003326 <sat+0x46>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	e007      	b.n	8003336 <sat+0x56>
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	441a      	add	r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	00d2      	lsls	r2, r2, #3
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4411      	add	r1, r2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	0092      	lsls	r2, r2, #2
 8003342:	440a      	add	r2, r1
 8003344:	6013      	str	r3, [r2, #0]
            r[i][j] = r[i][j] > sat[0] ? sat[0] : r[i][j];
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	441a      	add	r2, r3
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	ed93 7a00 	vldr	s14, [r3]
 8003358:	edd7 7a02 	vldr	s15, [r7, #8]
 800335c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003364:	dd01      	ble.n	800336a <sat+0x8a>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	e007      	b.n	800337a <sat+0x9a>
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	441a      	add	r2, r3
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	00d2      	lsls	r2, r2, #3
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4411      	add	r1, r2
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	0092      	lsls	r2, r2, #2
 8003386:	440a      	add	r2, r1
 8003388:	6013      	str	r3, [r2, #0]
        for(int j = 0 ; j < 2 ; j++){
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	3301      	adds	r3, #1
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b01      	cmp	r3, #1
 8003394:	ddb5      	ble.n	8003302 <sat+0x22>
    for(int i = 0 ; i < 2 ; i++){
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	3301      	adds	r3, #1
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	ddac      	ble.n	80032fc <sat+0x1c>
        }
    }
}
 80033a2:	bf00      	nop
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	08013bf8 	.word	0x08013bf8

080033b4 <main>:
>>>>>>> Stashed changes
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< Updated upstream
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
=======
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
<<<<<<< Updated upstream
 8000f9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fa2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000fa4:	bf00      	nop
 8000fa6:	4b28      	ldr	r3, [pc, #160]	; (8001048 <main+0xb0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d004      	beq.n	8000fbc <main+0x24>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	1e5a      	subs	r2, r3, #1
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	dcf4      	bgt.n	8000fa6 <main+0xe>
  if ( timeout < 0 )
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da01      	bge.n	8000fc6 <main+0x2e>
  {
  Error_Handler();
 8000fc2:	f000 f8bd 	bl	8001140 <Error_Handler>
=======
 80033ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033be:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80033c0:	bf00      	nop
 80033c2:	4b2a      	ldr	r3, [pc, #168]	; (800346c <main+0xb8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d004      	beq.n	80033d8 <main+0x24>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	1e5a      	subs	r2, r3, #1
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	dcf4      	bgt.n	80033c2 <main+0xe>
  if ( timeout < 0 )
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	da01      	bge.n	80033e2 <main+0x2e>
  {
  Error_Handler();
 80033de:	f000 f8c3 	bl	8003568 <Error_Handler>
>>>>>>> Stashed changes
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 8000fc6:	f001 feff 	bl	8002dc8 <HAL_Init>
=======
 80033e2:	f002 f95b 	bl	800569c <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
 8000fca:	f000 f83f 	bl	800104c <SystemClock_Config>
=======
 80033e6:	f000 f843 	bl	8003470 <SystemClock_Config>
>>>>>>> Stashed changes
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
<<<<<<< Updated upstream
 8000fce:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <main+0xb0>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	4a1c      	ldr	r2, [pc, #112]	; (8001048 <main+0xb0>)
 8000fd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <main+0xb0>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000fec:	2000      	movs	r0, #0
 8000fee:	f002 fa5b 	bl	80034a8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f002 fa71 	bl	80034dc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ffe:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001000:	bf00      	nop
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <main+0xb0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d104      	bne.n	8001018 <main+0x80>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	1e5a      	subs	r2, r3, #1
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	dcf4      	bgt.n	8001002 <main+0x6a>
if ( timeout < 0 )
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	da01      	bge.n	8001022 <main+0x8a>
{
Error_Handler();
 800101e:	f000 f88f 	bl	8001140 <Error_Handler>
=======
 80033ea:	4b20      	ldr	r3, [pc, #128]	; (800346c <main+0xb8>)
 80033ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f0:	4a1e      	ldr	r2, [pc, #120]	; (800346c <main+0xb8>)
 80033f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033fa:	4b1c      	ldr	r3, [pc, #112]	; (800346c <main+0xb8>)
 80033fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8003408:	2000      	movs	r0, #0
 800340a:	f003 fa2f 	bl	800686c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800340e:	2100      	movs	r1, #0
 8003410:	2000      	movs	r0, #0
 8003412:	f003 fa45 	bl	80068a0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8003416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800341a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800341c:	bf00      	nop
 800341e:	4b13      	ldr	r3, [pc, #76]	; (800346c <main+0xb8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d104      	bne.n	8003434 <main+0x80>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	1e5a      	subs	r2, r3, #1
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	dcf4      	bgt.n	800341e <main+0x6a>
if ( timeout < 0 )
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	da01      	bge.n	800343e <main+0x8a>
{
Error_Handler();
 800343a:	f000 f895 	bl	8003568 <Error_Handler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
 8001022:	f7ff fef7 	bl	8000e14 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001026:	f000 feb7 	bl	8001d98 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800102a:	f001 fdf1 	bl	8002c10 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 800102e:	f000 ff0b 	bl	8001e48 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001032:	f001 fc67 	bl	8002904 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001036:	f001 fcdb 	bl	80029f0 <MX_TIM3_Init>
//  setPwmS(&servoValues);
=======
 800343e:	f7ff fa89 	bl	8002954 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003442:	f000 fffb 	bl	800443c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8003446:	f001 ffd7 	bl	80053f8 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 800344a:	f001 f84f 	bl	80044ec <MX_SPI2_Init>
  MX_TIM2_Init();
 800344e:	f001 fe4d 	bl	80050ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8003452:	f001 fec1 	bl	80051d8 <MX_TIM3_Init>
  MX_SPI3_Init();
 8003456:	f001 f89f 	bl	8004598 <MX_SPI3_Init>
  MX_FDCAN1_Init();
 800345a:	f7fe fb51 	bl	8001b00 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
>>>>>>> Stashed changes

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
<<<<<<< Updated upstream
 800103a:	f007 ff53 	bl	8008ee4 <osKernelInitialize>
  MX_FREERTOS_Init();
 800103e:	f7ff fc2b 	bl	8000898 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001042:	f007 ff73 	bl	8008f2c <osKernelStart>
=======
 800345e:	f008 ff23 	bl	800c2a8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003462:	f7fe fc1f 	bl	8001ca4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003466:	f008 ff43 	bl	800c2f0 <osKernelStart>
>>>>>>> Stashed changes

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
<<<<<<< Updated upstream
 8001046:	e7fe      	b.n	8001046 <main+0xae>
 8001048:	58024400 	.word	0x58024400

0800104c <SystemClock_Config>:
=======
 800346a:	e7fe      	b.n	800346a <main+0xb6>
 800346c:	58024400 	.word	0x58024400

08003470 <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
 800104c:	b580      	push	{r7, lr}
 800104e:	b09c      	sub	sp, #112	; 0x70
 8001050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	224c      	movs	r2, #76	; 0x4c
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00b ff32 	bl	800cec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2220      	movs	r2, #32
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f00b ff2c 	bl	800cec4 <memset>
=======
 8003470:	b580      	push	{r7, lr}
 8003472:	b09c      	sub	sp, #112	; 0x70
 8003474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800347a:	224c      	movs	r2, #76	; 0x4c
 800347c:	2100      	movs	r1, #0
 800347e:	4618      	mov	r0, r3
 8003480:	f00c f9f3 	bl	800f86a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003484:	1d3b      	adds	r3, r7, #4
 8003486:	2220      	movs	r2, #32
 8003488:	2100      	movs	r1, #0
 800348a:	4618      	mov	r0, r3
 800348c:	f00c f9ed 	bl	800f86a <memset>
>>>>>>> Stashed changes

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
<<<<<<< Updated upstream
 800106c:	2004      	movs	r0, #4
 800106e:	f002 fa49 	bl	8003504 <HAL_PWREx_ConfigSupply>
=======
 8003490:	2004      	movs	r0, #4
 8003492:	f003 fa19 	bl	80068c8 <HAL_PWREx_ConfigSupply>
>>>>>>> Stashed changes

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
<<<<<<< Updated upstream
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	4b30      	ldr	r3, [pc, #192]	; (8001138 <SystemClock_Config+0xec>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	4a2f      	ldr	r2, [pc, #188]	; (8001138 <SystemClock_Config+0xec>)
 800107c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001080:	6193      	str	r3, [r2, #24]
 8001082:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <SystemClock_Config+0xec>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	4b2b      	ldr	r3, [pc, #172]	; (800113c <SystemClock_Config+0xf0>)
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001090:	4a2a      	ldr	r2, [pc, #168]	; (800113c <SystemClock_Config+0xf0>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001098:	4b28      	ldr	r3, [pc, #160]	; (800113c <SystemClock_Config+0xf0>)
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010a4:	bf00      	nop
 80010a6:	4b24      	ldr	r3, [pc, #144]	; (8001138 <SystemClock_Config+0xec>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010b2:	d1f8      	bne.n	80010a6 <SystemClock_Config+0x5a>
=======
 8003496:	2300      	movs	r3, #0
 8003498:	603b      	str	r3, [r7, #0]
 800349a:	4b31      	ldr	r3, [pc, #196]	; (8003560 <SystemClock_Config+0xf0>)
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	4a30      	ldr	r2, [pc, #192]	; (8003560 <SystemClock_Config+0xf0>)
 80034a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034a4:	6193      	str	r3, [r2, #24]
 80034a6:	4b2e      	ldr	r3, [pc, #184]	; (8003560 <SystemClock_Config+0xf0>)
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	4b2c      	ldr	r3, [pc, #176]	; (8003564 <SystemClock_Config+0xf4>)
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	4a2b      	ldr	r2, [pc, #172]	; (8003564 <SystemClock_Config+0xf4>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80034bc:	4b29      	ldr	r3, [pc, #164]	; (8003564 <SystemClock_Config+0xf4>)
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	603b      	str	r3, [r7, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80034c8:	bf00      	nop
 80034ca:	4b25      	ldr	r3, [pc, #148]	; (8003560 <SystemClock_Config+0xf0>)
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d6:	d1f8      	bne.n	80034ca <SystemClock_Config+0x5a>
>>>>>>> Stashed changes

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
<<<<<<< Updated upstream
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b4:	2301      	movs	r3, #1
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2302      	movs	r3, #2
 80010c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c2:	2302      	movs	r3, #2
 80010c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80010ca:	2378      	movs	r3, #120	; 0x78
 80010cc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80010d2:	2305      	movs	r3, #5
 80010d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010da:	230c      	movs	r3, #12
 80010dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010de:	2300      	movs	r3, #0
 80010e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 fa64 	bl	80035b8 <HAL_RCC_OscConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010f6:	f000 f823 	bl	8001140 <Error_Handler>
=======
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034d8:	2302      	movs	r3, #2
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80034dc:	2301      	movs	r3, #1
 80034de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034e0:	2340      	movs	r3, #64	; 0x40
 80034e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034e4:	2302      	movs	r3, #2
 80034e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80034e8:	2300      	movs	r3, #0
 80034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80034ec:	2304      	movs	r3, #4
 80034ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80034f0:	233c      	movs	r3, #60	; 0x3c
 80034f2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80034f4:	2302      	movs	r3, #2
 80034f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 80034f8:	2318      	movs	r3, #24
 80034fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80034fc:	2302      	movs	r3, #2
 80034fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003500:	230c      	movs	r3, #12
 8003502:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003504:	2300      	movs	r3, #0
 8003506:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800350c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003510:	4618      	mov	r0, r3
 8003512:	f003 fa33 	bl	800697c <HAL_RCC_OscConfig>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800351c:	f000 f824 	bl	8003568 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< Updated upstream
 80010fa:	233f      	movs	r3, #63	; 0x3f
 80010fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fe:	2303      	movs	r3, #3
 8001100:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001106:	2308      	movs	r3, #8
 8001108:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800110a:	2340      	movs	r3, #64	; 0x40
 800110c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800110e:	2340      	movs	r3, #64	; 0x40
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001116:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001118:	2340      	movs	r3, #64	; 0x40
 800111a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2104      	movs	r1, #4
 8001120:	4618      	mov	r0, r3
 8001122:	f002 fe77 	bl	8003e14 <HAL_RCC_ClockConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800112c:	f000 f808 	bl	8001140 <Error_Handler>
  }
}
 8001130:	bf00      	nop
 8001132:	3770      	adds	r7, #112	; 0x70
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	58024800 	.word	0x58024800
 800113c:	58000400 	.word	0x58000400

08001140 <Error_Handler>:
=======
 8003520:	233f      	movs	r3, #63	; 0x3f
 8003522:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003524:	2303      	movs	r3, #3
 8003526:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800352c:	2308      	movs	r3, #8
 800352e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003530:	2340      	movs	r3, #64	; 0x40
 8003532:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003534:	2340      	movs	r3, #64	; 0x40
 8003536:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800353c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800353e:	2340      	movs	r3, #64	; 0x40
 8003540:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003542:	1d3b      	adds	r3, r7, #4
 8003544:	2104      	movs	r1, #4
 8003546:	4618      	mov	r0, r3
 8003548:	f003 fe46 	bl	80071d8 <HAL_RCC_ClockConfig>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8003552:	f000 f809 	bl	8003568 <Error_Handler>
  }
}
 8003556:	bf00      	nop
 8003558:	3770      	adds	r7, #112	; 0x70
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	58024800 	.word	0x58024800
 8003564:	58000400 	.word	0x58000400

08003568 <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
=======
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 8001144:	b672      	cpsid	i
}
 8001146:	bf00      	nop
=======
 800356c:	b672      	cpsid	i
}
 800356e:	bf00      	nop
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< Updated upstream
 8001148:	e7fe      	b.n	8001148 <Error_Handler+0x8>

0800114a <initMPU9250>:
=======
 8003570:	e7fe      	b.n	8003570 <Error_Handler+0x8>

08003572 <initMPU9250>:
>>>>>>> Stashed changes
#include "spi.h"
#include "stm32h7xx_hal.h"
#include "myprintf.h"

void initMPU9250(struct mpu9250 * mpu9250, uint8_t Ascale, uint8_t Gscale, uint8_t sampleRate)
{
<<<<<<< Updated upstream
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	4608      	mov	r0, r1
 8001154:	4611      	mov	r1, r2
 8001156:	461a      	mov	r2, r3
 8001158:	4603      	mov	r3, r0
 800115a:	70fb      	strb	r3, [r7, #3]
 800115c:	460b      	mov	r3, r1
 800115e:	70bb      	strb	r3, [r7, #2]
 8001160:	4613      	mov	r3, r2
 8001162:	707b      	strb	r3, [r7, #1]
  for (int i = 0 ; i < 3 ; i++){
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	e040      	b.n	80011ec <initMPU9250+0xa2>
    for(int j = 0 ; j < filt_size ; j++){
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	e01d      	b.n	80011ac <initMPU9250+0x62>
      mpu9250->accBuff[i][j] = 0;
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4413      	add	r3, r2
 800117e:	330e      	adds	r3, #14
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
      mpu9250->gyroBuff[i][j] = 0;
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4413      	add	r3, r2
 8001198:	331c      	adds	r3, #28
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	3304      	adds	r3, #4
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
    for(int j = 0 ; j < filt_size ; j++){
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	3301      	adds	r3, #1
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	ddde      	ble.n	8001170 <initMPU9250+0x26>
    }
    mpu9250->acc[i] = 0;
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	3306      	adds	r3, #6
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	3304      	adds	r3, #4
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
    mpu9250->gyro[i] = 0;
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	330a      	adds	r3, #10
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
    mpu9250->pose[i] = 0;
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	332c      	adds	r3, #44	; 0x2c
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	3304      	adds	r3, #4
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
  for (int i = 0 ; i < 3 ; i++){
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	ddbb      	ble.n	800116a <initMPU9250+0x20>
  }

  mpu9250->buffPointer = 0;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 8003572:	b580      	push	{r7, lr}
 8003574:	b086      	sub	sp, #24
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	4608      	mov	r0, r1
 800357c:	4611      	mov	r1, r2
 800357e:	461a      	mov	r2, r3
 8003580:	4603      	mov	r3, r0
 8003582:	70fb      	strb	r3, [r7, #3]
 8003584:	460b      	mov	r3, r1
 8003586:	70bb      	strb	r3, [r7, #2]
 8003588:	4613      	mov	r3, r2
 800358a:	707b      	strb	r3, [r7, #1]
  for (int i = 0 ; i < 3 ; i++){
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	e040      	b.n	8003614 <initMPU9250+0xa2>
    for(int j = 0 ; j < filt_size ; j++){
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	e01d      	b.n	80035d4 <initMPU9250+0x62>
      mpu9250->accBuff[i][j] = 0;
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4413      	add	r3, r2
 80035a6:	330e      	adds	r3, #14
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
      mpu9250->gyroBuff[i][j] = 0;
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4413      	add	r3, r2
 80035c0:	331c      	adds	r3, #28
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	3304      	adds	r3, #4
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
    for(int j = 0 ; j < filt_size ; j++){
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	3301      	adds	r3, #1
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	ddde      	ble.n	8003598 <initMPU9250+0x26>
    }
    mpu9250->acc[i] = 0;
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	3306      	adds	r3, #6
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	3304      	adds	r3, #4
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
    mpu9250->gyro[i] = 0;
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	330a      	adds	r3, #10
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
    mpu9250->pose[i] = 0;
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	332c      	adds	r3, #44	; 0x2c
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	3304      	adds	r3, #4
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
  for (int i = 0 ; i < 3 ; i++){
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	3301      	adds	r3, #1
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b02      	cmp	r3, #2
 8003618:	ddbb      	ble.n	8003592 <initMPU9250+0x20>
  }

  mpu9250->buffPointer = 0;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> Stashed changes

	uint8_t c;
 // wake up device
  mpu9250_write_reg(PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
<<<<<<< Updated upstream
 80011fa:	2100      	movs	r1, #0
 80011fc:	206b      	movs	r0, #107	; 0x6b
 80011fe:	f000 ff29 	bl	8002054 <mpu9250_write_reg>
  HAL_Delay(100); // Wait for all registers to reset
 8001202:	2064      	movs	r0, #100	; 0x64
 8001204:	f001 fe72 	bl	8002eec <HAL_Delay>

 // get stable time source
  mpu9250_write_reg(PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 8001208:	2101      	movs	r1, #1
 800120a:	206b      	movs	r0, #107	; 0x6b
 800120c:	f000 ff22 	bl	8002054 <mpu9250_write_reg>
  HAL_Delay(200);
 8001210:	20c8      	movs	r0, #200	; 0xc8
 8001212:	f001 fe6b 	bl	8002eec <HAL_Delay>
=======
 8003622:	2100      	movs	r1, #0
 8003624:	206b      	movs	r0, #107	; 0x6b
 8003626:	f001 f909 	bl	800483c <mpu9250_write_reg>
  HAL_Delay(100); // Wait for all registers to reset
 800362a:	2064      	movs	r0, #100	; 0x64
 800362c:	f002 f8c8 	bl	80057c0 <HAL_Delay>

 // get stable time source
  mpu9250_write_reg(PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 8003630:	2101      	movs	r1, #1
 8003632:	206b      	movs	r0, #107	; 0x6b
 8003634:	f001 f902 	bl	800483c <mpu9250_write_reg>
  HAL_Delay(200);
 8003638:	20c8      	movs	r0, #200	; 0xc8
 800363a:	f002 f8c1 	bl	80057c0 <HAL_Delay>
>>>>>>> Stashed changes
 // Disable FSYNC and set thermometer and gyro bandwidth to 41 and 42 Hz, respectively;
 // minimum HAL_HAL_Delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
 // be higher than 1 / 0.0059 = 170 Hz
 // DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
 // With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
  mpu9250_write_reg(CONFIG, 0x03);
<<<<<<< Updated upstream
 8001216:	2103      	movs	r1, #3
 8001218:	201a      	movs	r0, #26
 800121a:	f000 ff1b 	bl	8002054 <mpu9250_write_reg>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  mpu9250_write_reg(SMPLRT_DIV, sampleRate);  // Use a 200 Hz rate; a rate consistent with the filter update rate
 800121e:	787b      	ldrb	r3, [r7, #1]
 8001220:	4619      	mov	r1, r3
 8001222:	2019      	movs	r0, #25
 8001224:	f000 ff16 	bl	8002054 <mpu9250_write_reg>
=======
 800363e:	2103      	movs	r1, #3
 8003640:	201a      	movs	r0, #26
 8003642:	f001 f8fb 	bl	800483c <mpu9250_write_reg>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  mpu9250_write_reg(SMPLRT_DIV, sampleRate);  // Use a 200 Hz rate; a rate consistent with the filter update rate
 8003646:	787b      	ldrb	r3, [r7, #1]
 8003648:	4619      	mov	r1, r3
 800364a:	2019      	movs	r0, #25
 800364c:	f001 f8f6 	bl	800483c <mpu9250_write_reg>
>>>>>>> Stashed changes
                                                       // determined inset in CONFIG above

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  mpu9250_read_reg(GYRO_CONFIG, &c,sizeof(c)); // get current GYRO_CONFIG register value
<<<<<<< Updated upstream
 8001228:	f107 030f 	add.w	r3, r7, #15
 800122c:	2201      	movs	r2, #1
 800122e:	4619      	mov	r1, r3
 8001230:	201b      	movs	r0, #27
 8001232:	f000 ff35 	bl	80020a0 <mpu9250_read_reg>
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	f023 0302 	bic.w	r3, r3, #2
 800123c:	b2db      	uxtb	r3, r3
 800123e:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x18; // Clear AFS bits [4:3]
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	f023 0318 	bic.w	r3, r3, #24
 8001246:	b2db      	uxtb	r3, r3
 8001248:	73fb      	strb	r3, [r7, #15]
  c = c | Gscale << 3; // Set full scale range for the gyro
 800124a:	78bb      	ldrb	r3, [r7, #2]
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	b25a      	sxtb	r2, r3
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	b25b      	sxtb	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b25b      	sxtb	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	73fb      	strb	r3, [r7, #15]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
  mpu9250_write_reg(GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	4619      	mov	r1, r3
 8001260:	201b      	movs	r0, #27
 8001262:	f000 fef7 	bl	8002054 <mpu9250_write_reg>

 // Set accelerometer full-scale range configuration
  mpu9250_read_reg(ACCEL_CONFIG, &c, sizeof(c)); // get current ACCEL_CONFIG register value
 8001266:	f107 030f 	add.w	r3, r7, #15
 800126a:	2201      	movs	r2, #1
 800126c:	4619      	mov	r1, r3
 800126e:	201c      	movs	r0, #28
 8001270:	f000 ff16 	bl	80020a0 <mpu9250_read_reg>
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	f023 0318 	bic.w	r3, r3, #24
 800127a:	b2db      	uxtb	r3, r3
 800127c:	73fb      	strb	r3, [r7, #15]
  c = c | Ascale << 3; // Set full scale range for the accelerometer
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	b25a      	sxtb	r2, r3
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	b25b      	sxtb	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b25b      	sxtb	r3, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	73fb      	strb	r3, [r7, #15]
  mpu9250_write_reg(ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	4619      	mov	r1, r3
 8001294:	201c      	movs	r0, #28
 8001296:	f000 fedd 	bl	8002054 <mpu9250_write_reg>
=======
 8003650:	f107 030f 	add.w	r3, r7, #15
 8003654:	2201      	movs	r2, #1
 8003656:	4619      	mov	r1, r3
 8003658:	201b      	movs	r0, #27
 800365a:	f001 f915 	bl	8004888 <mpu9250_read_reg>
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	f023 0302 	bic.w	r3, r3, #2
 8003664:	b2db      	uxtb	r3, r3
 8003666:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x18; // Clear AFS bits [4:3]
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	f023 0318 	bic.w	r3, r3, #24
 800366e:	b2db      	uxtb	r3, r3
 8003670:	73fb      	strb	r3, [r7, #15]
  c = c | Gscale << 3; // Set full scale range for the gyro
 8003672:	78bb      	ldrb	r3, [r7, #2]
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	b25a      	sxtb	r2, r3
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	b25b      	sxtb	r3, r3
 800367c:	4313      	orrs	r3, r2
 800367e:	b25b      	sxtb	r3, r3
 8003680:	b2db      	uxtb	r3, r3
 8003682:	73fb      	strb	r3, [r7, #15]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
  mpu9250_write_reg(GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	4619      	mov	r1, r3
 8003688:	201b      	movs	r0, #27
 800368a:	f001 f8d7 	bl	800483c <mpu9250_write_reg>

 // Set accelerometer full-scale range configuration
  mpu9250_read_reg(ACCEL_CONFIG, &c, sizeof(c)); // get current ACCEL_CONFIG register value
 800368e:	f107 030f 	add.w	r3, r7, #15
 8003692:	2201      	movs	r2, #1
 8003694:	4619      	mov	r1, r3
 8003696:	201c      	movs	r0, #28
 8003698:	f001 f8f6 	bl	8004888 <mpu9250_read_reg>
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	f023 0318 	bic.w	r3, r3, #24
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	73fb      	strb	r3, [r7, #15]
  c = c | Ascale << 3; // Set full scale range for the accelerometer
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	b25a      	sxtb	r2, r3
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	b25b      	sxtb	r3, r3
 80036b0:	4313      	orrs	r3, r2
 80036b2:	b25b      	sxtb	r3, r3
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	73fb      	strb	r3, [r7, #15]
  mpu9250_write_reg(ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	4619      	mov	r1, r3
 80036bc:	201c      	movs	r0, #28
 80036be:	f001 f8bd 	bl	800483c <mpu9250_write_reg>
>>>>>>> Stashed changes

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  mpu9250_read_reg(ACCEL_CONFIG2, &c, sizeof(c)); // get current ACCEL_CONFIG2 register value
<<<<<<< Updated upstream
 800129a:	f107 030f 	add.w	r3, r7, #15
 800129e:	2201      	movs	r2, #1
 80012a0:	4619      	mov	r1, r3
 80012a2:	201d      	movs	r0, #29
 80012a4:	f000 fefc 	bl	80020a0 <mpu9250_read_reg>
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	f023 030f 	bic.w	r3, r3, #15
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	73fb      	strb	r3, [r7, #15]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	f043 0303 	orr.w	r3, r3, #3
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	73fb      	strb	r3, [r7, #15]
  mpu9250_write_reg(ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	4619      	mov	r1, r3
 80012c0:	201d      	movs	r0, #29
 80012c2:	f000 fec7 	bl	8002054 <mpu9250_write_reg>
=======
 80036c2:	f107 030f 	add.w	r3, r7, #15
 80036c6:	2201      	movs	r2, #1
 80036c8:	4619      	mov	r1, r3
 80036ca:	201d      	movs	r0, #29
 80036cc:	f001 f8dc 	bl	8004888 <mpu9250_read_reg>
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	f023 030f 	bic.w	r3, r3, #15
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	73fb      	strb	r3, [r7, #15]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	f043 0303 	orr.w	r3, r3, #3
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	73fb      	strb	r3, [r7, #15]
  mpu9250_write_reg(ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	4619      	mov	r1, r3
 80036e8:	201d      	movs	r0, #29
 80036ea:	f001 f8a7 	bl	800483c <mpu9250_write_reg>
>>>>>>> Stashed changes
  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
  // clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
//   mpu9250_write_reg(INT_PIN_CFG, 0x22);
   mpu9250_write_reg(INT_PIN_CFG, 0x12);  // INT is 50 microsecond pulse and any read to clear
<<<<<<< Updated upstream
 80012c6:	2112      	movs	r1, #18
 80012c8:	2037      	movs	r0, #55	; 0x37
 80012ca:	f000 fec3 	bl	8002054 <mpu9250_write_reg>
   mpu9250_write_reg(INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 80012ce:	2101      	movs	r1, #1
 80012d0:	2038      	movs	r0, #56	; 0x38
 80012d2:	f000 febf 	bl	8002054 <mpu9250_write_reg>
   HAL_Delay(100);
 80012d6:	2064      	movs	r0, #100	; 0x64
 80012d8:	f001 fe08 	bl	8002eec <HAL_Delay>
}
 80012dc:	bf00      	nop
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <calibrateMPU9250>:

void calibrateMPU9250(float * dest1, float * dest2)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b098      	sub	sp, #96	; 0x60
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 80012ee:	2300      	movs	r3, #0
 80012f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80012f2:	2300      	movs	r3, #0
 80012f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012f6:	2300      	movs	r3, #0
 80012f8:	643b      	str	r3, [r7, #64]	; 0x40
 80012fa:	2300      	movs	r3, #0
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
 8001302:	2300      	movs	r3, #0
 8001304:	637b      	str	r3, [r7, #52]	; 0x34

 // reset device
  mpu9250_write_reg(PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001306:	2180      	movs	r1, #128	; 0x80
 8001308:	206b      	movs	r0, #107	; 0x6b
 800130a:	f000 fea3 	bl	8002054 <mpu9250_write_reg>
  HAL_Delay(100);
 800130e:	2064      	movs	r0, #100	; 0x64
 8001310:	f001 fdec 	bl	8002eec <HAL_Delay>
=======
 80036ee:	2112      	movs	r1, #18
 80036f0:	2037      	movs	r0, #55	; 0x37
 80036f2:	f001 f8a3 	bl	800483c <mpu9250_write_reg>
   mpu9250_write_reg(INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 80036f6:	2101      	movs	r1, #1
 80036f8:	2038      	movs	r0, #56	; 0x38
 80036fa:	f001 f89f 	bl	800483c <mpu9250_write_reg>
   HAL_Delay(100);
 80036fe:	2064      	movs	r0, #100	; 0x64
 8003700:	f002 f85e 	bl	80057c0 <HAL_Delay>
}
 8003704:	bf00      	nop
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <calibrateMPU9250>:

void calibrateMPU9250(float * dest1, float * dest2)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b098      	sub	sp, #96	; 0x60
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8003716:	2300      	movs	r3, #0
 8003718:	63bb      	str	r3, [r7, #56]	; 0x38
 800371a:	2300      	movs	r3, #0
 800371c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800371e:	2300      	movs	r3, #0
 8003720:	643b      	str	r3, [r7, #64]	; 0x40
 8003722:	2300      	movs	r3, #0
 8003724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003726:	2300      	movs	r3, #0
 8003728:	633b      	str	r3, [r7, #48]	; 0x30
 800372a:	2300      	movs	r3, #0
 800372c:	637b      	str	r3, [r7, #52]	; 0x34

 // reset device
  mpu9250_write_reg(PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800372e:	2180      	movs	r1, #128	; 0x80
 8003730:	206b      	movs	r0, #107	; 0x6b
 8003732:	f001 f883 	bl	800483c <mpu9250_write_reg>
  HAL_Delay(100);
 8003736:	2064      	movs	r0, #100	; 0x64
 8003738:	f002 f842 	bl	80057c0 <HAL_Delay>
>>>>>>> Stashed changes

 // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
 // else use the internal oscillator, bits 2:0 = 001
  mpu9250_write_reg(PWR_MGMT_1, 0x01);
<<<<<<< Updated upstream
 8001314:	2101      	movs	r1, #1
 8001316:	206b      	movs	r0, #107	; 0x6b
 8001318:	f000 fe9c 	bl	8002054 <mpu9250_write_reg>
  mpu9250_write_reg(PWR_MGMT_2, 0x00);
 800131c:	2100      	movs	r1, #0
 800131e:	206c      	movs	r0, #108	; 0x6c
 8001320:	f000 fe98 	bl	8002054 <mpu9250_write_reg>
  HAL_Delay(200);
 8001324:	20c8      	movs	r0, #200	; 0xc8
 8001326:	f001 fde1 	bl	8002eec <HAL_Delay>

// Configure device for bias calculation
  mpu9250_write_reg(INT_ENABLE, 0x00);   // Disable all interrupts
 800132a:	2100      	movs	r1, #0
 800132c:	2038      	movs	r0, #56	; 0x38
 800132e:	f000 fe91 	bl	8002054 <mpu9250_write_reg>
  mpu9250_write_reg(FIFO_EN, 0x00);      // Disable FIFO
 8001332:	2100      	movs	r1, #0
 8001334:	2023      	movs	r0, #35	; 0x23
 8001336:	f000 fe8d 	bl	8002054 <mpu9250_write_reg>
  mpu9250_write_reg(PWR_MGMT_1, 0x00);   // Turn on internal clock source
 800133a:	2100      	movs	r1, #0
 800133c:	206b      	movs	r0, #107	; 0x6b
 800133e:	f000 fe89 	bl	8002054 <mpu9250_write_reg>
  mpu9250_write_reg(I2C_MST_CTRL, 0x00); // Disable I2C master
 8001342:	2100      	movs	r1, #0
 8001344:	2024      	movs	r0, #36	; 0x24
 8001346:	f000 fe85 	bl	8002054 <mpu9250_write_reg>
  mpu9250_write_reg(USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 800134a:	2100      	movs	r1, #0
 800134c:	206a      	movs	r0, #106	; 0x6a
 800134e:	f000 fe81 	bl	8002054 <mpu9250_write_reg>
  mpu9250_write_reg(USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001352:	210c      	movs	r1, #12
 8001354:	206a      	movs	r0, #106	; 0x6a
 8001356:	f000 fe7d 	bl	8002054 <mpu9250_write_reg>
  HAL_Delay(15);
 800135a:	200f      	movs	r0, #15
 800135c:	f001 fdc6 	bl	8002eec <HAL_Delay>

// Configure MPU6050 gyro and accelerometer for bias calculation
  mpu9250_write_reg(CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8001360:	2101      	movs	r1, #1
 8001362:	201a      	movs	r0, #26
 8001364:	f000 fe76 	bl	8002054 <mpu9250_write_reg>
  mpu9250_write_reg(SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8001368:	2100      	movs	r1, #0
 800136a:	2019      	movs	r0, #25
 800136c:	f000 fe72 	bl	8002054 <mpu9250_write_reg>
  mpu9250_write_reg(GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001370:	2100      	movs	r1, #0
 8001372:	201b      	movs	r0, #27
 8001374:	f000 fe6e 	bl	8002054 <mpu9250_write_reg>
  mpu9250_write_reg(ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001378:	2100      	movs	r1, #0
 800137a:	201c      	movs	r0, #28
 800137c:	f000 fe6a 	bl	8002054 <mpu9250_write_reg>

  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8001380:	2383      	movs	r3, #131	; 0x83
 8001382:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8001386:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800138a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
  mpu9250_write_reg(USER_CTRL, 0x40);   // Enable FIFO
 800138e:	2140      	movs	r1, #64	; 0x40
 8001390:	206a      	movs	r0, #106	; 0x6a
 8001392:	f000 fe5f 	bl	8002054 <mpu9250_write_reg>
  mpu9250_write_reg(FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8001396:	2178      	movs	r1, #120	; 0x78
 8001398:	2023      	movs	r0, #35	; 0x23
 800139a:	f000 fe5b 	bl	8002054 <mpu9250_write_reg>
  HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 800139e:	2028      	movs	r0, #40	; 0x28
 80013a0:	f001 fda4 	bl	8002eec <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  mpu9250_write_reg(FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 80013a4:	2100      	movs	r1, #0
 80013a6:	2023      	movs	r0, #35	; 0x23
 80013a8:	f000 fe54 	bl	8002054 <mpu9250_write_reg>
  mpu9250_read_reg(FIFO_COUNTH,  &data[0], 2); // read FIFO sample count
 80013ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013b0:	2202      	movs	r2, #2
 80013b2:	4619      	mov	r1, r3
 80013b4:	2072      	movs	r0, #114	; 0x72
 80013b6:	f000 fe73 	bl	80020a0 <mpu9250_read_reg>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 80013ba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 80013d0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80013d4:	4ac0      	ldr	r2, [pc, #768]	; (80016d8 <calibrateMPU9250+0x3f4>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	08db      	lsrs	r3, r3, #3
 80013dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

  for (ii = 0; ii < packet_count; ii++) {
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80013e6:	e071      	b.n	80014cc <calibrateMPU9250+0x1e8>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 80013e8:	2300      	movs	r3, #0
 80013ea:	82bb      	strh	r3, [r7, #20]
 80013ec:	2300      	movs	r3, #0
 80013ee:	82fb      	strh	r3, [r7, #22]
 80013f0:	2300      	movs	r3, #0
 80013f2:	833b      	strh	r3, [r7, #24]
 80013f4:	2300      	movs	r3, #0
 80013f6:	81bb      	strh	r3, [r7, #12]
 80013f8:	2300      	movs	r3, #0
 80013fa:	81fb      	strh	r3, [r7, #14]
 80013fc:	2300      	movs	r3, #0
 80013fe:	823b      	strh	r3, [r7, #16]
    mpu9250_read_reg(FIFO_R_W,  &data[0], 12); // read data for averaging
 8001400:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001404:	220c      	movs	r2, #12
 8001406:	4619      	mov	r1, r3
 8001408:	2074      	movs	r0, #116	; 0x74
 800140a:	f000 fe49 	bl	80020a0 <mpu9250_read_reg>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 800140e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	b21a      	sxth	r2, r3
 8001416:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800141a:	b21b      	sxth	r3, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	b21b      	sxth	r3, r3
 8001420:	82bb      	strh	r3, [r7, #20]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8001422:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	b21a      	sxth	r2, r3
 800142a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800142e:	b21b      	sxth	r3, r3
 8001430:	4313      	orrs	r3, r2
 8001432:	b21b      	sxth	r3, r3
 8001434:	82fb      	strh	r3, [r7, #22]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8001436:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001442:	b21b      	sxth	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b21b      	sxth	r3, r3
 8001448:	833b      	strh	r3, [r7, #24]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 800144a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001456:	b21b      	sxth	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	b21b      	sxth	r3, r3
 800145c:	81bb      	strh	r3, [r7, #12]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 800145e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21a      	sxth	r2, r3
 8001466:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	81fb      	strh	r3, [r7, #14]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001472:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	b21a      	sxth	r2, r3
 800147a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800147e:	b21b      	sxth	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b21b      	sxth	r3, r3
 8001484:	823b      	strh	r3, [r7, #16]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001488:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800148c:	4413      	add	r3, r2
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] += (int32_t) accel_temp[1];
 8001490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001492:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001496:	4413      	add	r3, r2
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] += (int32_t) accel_temp[2];
 800149a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014a0:	4413      	add	r3, r2
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 80014a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 80014ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014b4:	4413      	add	r3, r2
 80014b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 80014b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014ba:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80014be:	4413      	add	r3, r2
 80014c0:	643b      	str	r3, [r7, #64]	; 0x40
  for (ii = 0; ii < packet_count; ii++) {
 80014c2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80014c6:	3301      	adds	r3, #1
 80014c8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80014cc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80014d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d387      	bcc.n	80013e8 <calibrateMPU9250+0x104>
=======
 800373c:	2101      	movs	r1, #1
 800373e:	206b      	movs	r0, #107	; 0x6b
 8003740:	f001 f87c 	bl	800483c <mpu9250_write_reg>
  mpu9250_write_reg(PWR_MGMT_2, 0x00);
 8003744:	2100      	movs	r1, #0
 8003746:	206c      	movs	r0, #108	; 0x6c
 8003748:	f001 f878 	bl	800483c <mpu9250_write_reg>
  HAL_Delay(200);
 800374c:	20c8      	movs	r0, #200	; 0xc8
 800374e:	f002 f837 	bl	80057c0 <HAL_Delay>

// Configure device for bias calculation
  mpu9250_write_reg(INT_ENABLE, 0x00);   // Disable all interrupts
 8003752:	2100      	movs	r1, #0
 8003754:	2038      	movs	r0, #56	; 0x38
 8003756:	f001 f871 	bl	800483c <mpu9250_write_reg>
  mpu9250_write_reg(FIFO_EN, 0x00);      // Disable FIFO
 800375a:	2100      	movs	r1, #0
 800375c:	2023      	movs	r0, #35	; 0x23
 800375e:	f001 f86d 	bl	800483c <mpu9250_write_reg>
  mpu9250_write_reg(PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8003762:	2100      	movs	r1, #0
 8003764:	206b      	movs	r0, #107	; 0x6b
 8003766:	f001 f869 	bl	800483c <mpu9250_write_reg>
  mpu9250_write_reg(I2C_MST_CTRL, 0x00); // Disable I2C master
 800376a:	2100      	movs	r1, #0
 800376c:	2024      	movs	r0, #36	; 0x24
 800376e:	f001 f865 	bl	800483c <mpu9250_write_reg>
  mpu9250_write_reg(USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8003772:	2100      	movs	r1, #0
 8003774:	206a      	movs	r0, #106	; 0x6a
 8003776:	f001 f861 	bl	800483c <mpu9250_write_reg>
  mpu9250_write_reg(USER_CTRL, 0x0C);    // Reset FIFO and DMP
 800377a:	210c      	movs	r1, #12
 800377c:	206a      	movs	r0, #106	; 0x6a
 800377e:	f001 f85d 	bl	800483c <mpu9250_write_reg>
  HAL_Delay(15);
 8003782:	200f      	movs	r0, #15
 8003784:	f002 f81c 	bl	80057c0 <HAL_Delay>

// Configure MPU6050 gyro and accelerometer for bias calculation
  mpu9250_write_reg(CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8003788:	2101      	movs	r1, #1
 800378a:	201a      	movs	r0, #26
 800378c:	f001 f856 	bl	800483c <mpu9250_write_reg>
  mpu9250_write_reg(SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8003790:	2100      	movs	r1, #0
 8003792:	2019      	movs	r0, #25
 8003794:	f001 f852 	bl	800483c <mpu9250_write_reg>
  mpu9250_write_reg(GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8003798:	2100      	movs	r1, #0
 800379a:	201b      	movs	r0, #27
 800379c:	f001 f84e 	bl	800483c <mpu9250_write_reg>
  mpu9250_write_reg(ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 80037a0:	2100      	movs	r1, #0
 80037a2:	201c      	movs	r0, #28
 80037a4:	f001 f84a 	bl	800483c <mpu9250_write_reg>

  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 80037a8:	2383      	movs	r3, #131	; 0x83
 80037aa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 80037ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037b2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
  mpu9250_write_reg(USER_CTRL, 0x40);   // Enable FIFO
 80037b6:	2140      	movs	r1, #64	; 0x40
 80037b8:	206a      	movs	r0, #106	; 0x6a
 80037ba:	f001 f83f 	bl	800483c <mpu9250_write_reg>
  mpu9250_write_reg(FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 80037be:	2178      	movs	r1, #120	; 0x78
 80037c0:	2023      	movs	r0, #35	; 0x23
 80037c2:	f001 f83b 	bl	800483c <mpu9250_write_reg>
  HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 80037c6:	2028      	movs	r0, #40	; 0x28
 80037c8:	f001 fffa 	bl	80057c0 <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  mpu9250_write_reg(FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 80037cc:	2100      	movs	r1, #0
 80037ce:	2023      	movs	r0, #35	; 0x23
 80037d0:	f001 f834 	bl	800483c <mpu9250_write_reg>
  mpu9250_read_reg(FIFO_COUNTH,  &data[0], 2); // read FIFO sample count
 80037d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037d8:	2202      	movs	r2, #2
 80037da:	4619      	mov	r1, r3
 80037dc:	2072      	movs	r0, #114	; 0x72
 80037de:	f001 f853 	bl	8004888 <mpu9250_read_reg>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 80037e2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	b21a      	sxth	r2, r3
 80037ea:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80037ee:	b21b      	sxth	r3, r3
 80037f0:	4313      	orrs	r3, r2
 80037f2:	b21b      	sxth	r3, r3
 80037f4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 80037f8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80037fc:	4ac0      	ldr	r2, [pc, #768]	; (8003b00 <calibrateMPU9250+0x3f4>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	08db      	lsrs	r3, r3, #3
 8003804:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

  for (ii = 0; ii < packet_count; ii++) {
 8003808:	2300      	movs	r3, #0
 800380a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800380e:	e071      	b.n	80038f4 <calibrateMPU9250+0x1e8>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8003810:	2300      	movs	r3, #0
 8003812:	82bb      	strh	r3, [r7, #20]
 8003814:	2300      	movs	r3, #0
 8003816:	82fb      	strh	r3, [r7, #22]
 8003818:	2300      	movs	r3, #0
 800381a:	833b      	strh	r3, [r7, #24]
 800381c:	2300      	movs	r3, #0
 800381e:	81bb      	strh	r3, [r7, #12]
 8003820:	2300      	movs	r3, #0
 8003822:	81fb      	strh	r3, [r7, #14]
 8003824:	2300      	movs	r3, #0
 8003826:	823b      	strh	r3, [r7, #16]
    mpu9250_read_reg(FIFO_R_W,  &data[0], 12); // read data for averaging
 8003828:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800382c:	220c      	movs	r2, #12
 800382e:	4619      	mov	r1, r3
 8003830:	2074      	movs	r0, #116	; 0x74
 8003832:	f001 f829 	bl	8004888 <mpu9250_read_reg>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8003836:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	b21a      	sxth	r2, r3
 800383e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003842:	b21b      	sxth	r3, r3
 8003844:	4313      	orrs	r3, r2
 8003846:	b21b      	sxth	r3, r3
 8003848:	82bb      	strh	r3, [r7, #20]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 800384a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	b21a      	sxth	r2, r3
 8003852:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003856:	b21b      	sxth	r3, r3
 8003858:	4313      	orrs	r3, r2
 800385a:	b21b      	sxth	r3, r3
 800385c:	82fb      	strh	r3, [r7, #22]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 800385e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	b21a      	sxth	r2, r3
 8003866:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800386a:	b21b      	sxth	r3, r3
 800386c:	4313      	orrs	r3, r2
 800386e:	b21b      	sxth	r3, r3
 8003870:	833b      	strh	r3, [r7, #24]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8003872:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	b21a      	sxth	r2, r3
 800387a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800387e:	b21b      	sxth	r3, r3
 8003880:	4313      	orrs	r3, r2
 8003882:	b21b      	sxth	r3, r3
 8003884:	81bb      	strh	r3, [r7, #12]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8003886:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	b21a      	sxth	r2, r3
 800388e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003892:	b21b      	sxth	r3, r3
 8003894:	4313      	orrs	r3, r2
 8003896:	b21b      	sxth	r3, r3
 8003898:	81fb      	strh	r3, [r7, #14]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 800389a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800389e:	021b      	lsls	r3, r3, #8
 80038a0:	b21a      	sxth	r2, r3
 80038a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80038a6:	b21b      	sxth	r3, r3
 80038a8:	4313      	orrs	r3, r2
 80038aa:	b21b      	sxth	r3, r3
 80038ac:	823b      	strh	r3, [r7, #16]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 80038ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80038b4:	4413      	add	r3, r2
 80038b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] += (int32_t) accel_temp[1];
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80038be:	4413      	add	r3, r2
 80038c0:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] += (int32_t) accel_temp[2];
 80038c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80038c8:	4413      	add	r3, r2
 80038ca:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 80038cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 80038d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80038dc:	4413      	add	r3, r2
 80038de:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 80038e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	643b      	str	r3, [r7, #64]	; 0x40
  for (ii = 0; ii < packet_count; ii++) {
 80038ea:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80038ee:	3301      	adds	r3, #1
 80038f0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80038f4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80038f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d387      	bcc.n	8003810 <calibrateMPU9250+0x104>
>>>>>>> Stashed changes

  }

    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
<<<<<<< Updated upstream
 80014d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80014de:	fb92 f3f3 	sdiv	r3, r2, r3
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] /= (int32_t) packet_count;
 80014e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80014ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80014ee:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] /= (int32_t) packet_count;
 80014f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80014f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80014fa:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  /= (int32_t) packet_count;
 80014fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001502:	fb92 f3f3 	sdiv	r3, r2, r3
 8001506:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  /= (int32_t) packet_count;
 8001508:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800150a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800150e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001512:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  /= (int32_t) packet_count;
 8001514:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001516:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800151a:	fb92 f3f3 	sdiv	r3, r2, r3
 800151e:	643b      	str	r3, [r7, #64]	; 0x40

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8001520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001522:	2b00      	cmp	r3, #0
 8001524:	dd05      	ble.n	8001532 <calibrateMPU9250+0x24e>
 8001526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001528:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
 8001530:	e004      	b.n	800153c <calibrateMPU9250+0x258>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 8001532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001534:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001538:	4413      	add	r3, r2
 800153a:	637b      	str	r3, [r7, #52]	; 0x34

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 800153c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800153e:	425b      	negs	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	da00      	bge.n	8001546 <calibrateMPU9250+0x262>
 8001544:	3303      	adds	r3, #3
 8001546:	109b      	asrs	r3, r3, #2
 8001548:	121b      	asrs	r3, r3, #8
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001552:	425b      	negs	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	da00      	bge.n	800155a <calibrateMPU9250+0x276>
 8001558:	3303      	adds	r3, #3
 800155a:	109b      	asrs	r3, r3, #2
 800155c:	b2db      	uxtb	r3, r3
 800155e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8001562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001564:	425b      	negs	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	da00      	bge.n	800156c <calibrateMPU9250+0x288>
 800156a:	3303      	adds	r3, #3
 800156c:	109b      	asrs	r3, r3, #2
 800156e:	121b      	asrs	r3, r3, #8
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 8001576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001578:	425b      	negs	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	da00      	bge.n	8001580 <calibrateMPU9250+0x29c>
 800157e:	3303      	adds	r3, #3
 8001580:	109b      	asrs	r3, r3, #2
 8001582:	b2db      	uxtb	r3, r3
 8001584:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8001588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800158a:	425b      	negs	r3, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	da00      	bge.n	8001592 <calibrateMPU9250+0x2ae>
 8001590:	3303      	adds	r3, #3
 8001592:	109b      	asrs	r3, r3, #2
 8001594:	121b      	asrs	r3, r3, #8
 8001596:	b2db      	uxtb	r3, r3
 8001598:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 800159c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800159e:	425b      	negs	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	da00      	bge.n	80015a6 <calibrateMPU9250+0x2c2>
 80015a4:	3303      	adds	r3, #3
 80015a6:	109b      	asrs	r3, r3, #2
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

// Push gyro biases to hardware registers
  mpu9250_write_reg(XG_OFFSET_H, data[0]);
 80015ae:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80015b2:	4619      	mov	r1, r3
 80015b4:	2013      	movs	r0, #19
 80015b6:	f000 fd4d 	bl	8002054 <mpu9250_write_reg>
  mpu9250_write_reg(XG_OFFSET_L, data[1]);
 80015ba:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80015be:	4619      	mov	r1, r3
 80015c0:	2014      	movs	r0, #20
 80015c2:	f000 fd47 	bl	8002054 <mpu9250_write_reg>
  mpu9250_write_reg(YG_OFFSET_H, data[2]);
 80015c6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80015ca:	4619      	mov	r1, r3
 80015cc:	2015      	movs	r0, #21
 80015ce:	f000 fd41 	bl	8002054 <mpu9250_write_reg>
  mpu9250_write_reg(YG_OFFSET_L, data[3]);
 80015d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015d6:	4619      	mov	r1, r3
 80015d8:	2016      	movs	r0, #22
 80015da:	f000 fd3b 	bl	8002054 <mpu9250_write_reg>
  mpu9250_write_reg(ZG_OFFSET_H, data[4]);
 80015de:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80015e2:	4619      	mov	r1, r3
 80015e4:	2017      	movs	r0, #23
 80015e6:	f000 fd35 	bl	8002054 <mpu9250_write_reg>
  mpu9250_write_reg(ZG_OFFSET_L, data[5]);
 80015ea:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80015ee:	4619      	mov	r1, r3
 80015f0:	2018      	movs	r0, #24
 80015f2:	f000 fd2f 	bl	8002054 <mpu9250_write_reg>

// Output scaled gyro biases for display in the main program
  dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 80015f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001600:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800160c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	edc3 7a00 	vstr	s15, [r3]
  dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8001616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001618:	ee07 3a90 	vmov	s15, r3
 800161c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001620:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3304      	adds	r3, #4
 8001630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001634:	edc3 7a00 	vstr	s15, [r3]
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8001638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001642:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3308      	adds	r3, #8
 8001652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001656:	edc3 7a00 	vstr	s15, [r3]
=======
 8003900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003902:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003906:	fb92 f3f3 	sdiv	r3, r2, r3
 800390a:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] /= (int32_t) packet_count;
 800390c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800390e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003912:	fb92 f3f3 	sdiv	r3, r2, r3
 8003916:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] /= (int32_t) packet_count;
 8003918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800391a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800391e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003922:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  /= (int32_t) packet_count;
 8003924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003926:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800392a:	fb92 f3f3 	sdiv	r3, r2, r3
 800392e:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  /= (int32_t) packet_count;
 8003930:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003932:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003936:	fb92 f3f3 	sdiv	r3, r2, r3
 800393a:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  /= (int32_t) packet_count;
 800393c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800393e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003942:	fb92 f3f3 	sdiv	r3, r2, r3
 8003946:	643b      	str	r3, [r7, #64]	; 0x40

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8003948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394a:	2b00      	cmp	r3, #0
 800394c:	dd05      	ble.n	800395a <calibrateMPU9250+0x24e>
 800394e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003950:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	637b      	str	r3, [r7, #52]	; 0x34
 8003958:	e004      	b.n	8003964 <calibrateMPU9250+0x258>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 800395a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800395c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003960:	4413      	add	r3, r2
 8003962:	637b      	str	r3, [r7, #52]	; 0x34

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8003964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003966:	425b      	negs	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	da00      	bge.n	800396e <calibrateMPU9250+0x262>
 800396c:	3303      	adds	r3, #3
 800396e:	109b      	asrs	r3, r3, #2
 8003970:	121b      	asrs	r3, r3, #8
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8003978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397a:	425b      	negs	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	da00      	bge.n	8003982 <calibrateMPU9250+0x276>
 8003980:	3303      	adds	r3, #3
 8003982:	109b      	asrs	r3, r3, #2
 8003984:	b2db      	uxtb	r3, r3
 8003986:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 800398a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800398c:	425b      	negs	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	da00      	bge.n	8003994 <calibrateMPU9250+0x288>
 8003992:	3303      	adds	r3, #3
 8003994:	109b      	asrs	r3, r3, #2
 8003996:	121b      	asrs	r3, r3, #8
 8003998:	b2db      	uxtb	r3, r3
 800399a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 800399e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a0:	425b      	negs	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	da00      	bge.n	80039a8 <calibrateMPU9250+0x29c>
 80039a6:	3303      	adds	r3, #3
 80039a8:	109b      	asrs	r3, r3, #2
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 80039b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b2:	425b      	negs	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	da00      	bge.n	80039ba <calibrateMPU9250+0x2ae>
 80039b8:	3303      	adds	r3, #3
 80039ba:	109b      	asrs	r3, r3, #2
 80039bc:	121b      	asrs	r3, r3, #8
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 80039c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039c6:	425b      	negs	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	da00      	bge.n	80039ce <calibrateMPU9250+0x2c2>
 80039cc:	3303      	adds	r3, #3
 80039ce:	109b      	asrs	r3, r3, #2
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

// Push gyro biases to hardware registers
  mpu9250_write_reg(XG_OFFSET_H, data[0]);
 80039d6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80039da:	4619      	mov	r1, r3
 80039dc:	2013      	movs	r0, #19
 80039de:	f000 ff2d 	bl	800483c <mpu9250_write_reg>
  mpu9250_write_reg(XG_OFFSET_L, data[1]);
 80039e2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80039e6:	4619      	mov	r1, r3
 80039e8:	2014      	movs	r0, #20
 80039ea:	f000 ff27 	bl	800483c <mpu9250_write_reg>
  mpu9250_write_reg(YG_OFFSET_H, data[2]);
 80039ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80039f2:	4619      	mov	r1, r3
 80039f4:	2015      	movs	r0, #21
 80039f6:	f000 ff21 	bl	800483c <mpu9250_write_reg>
  mpu9250_write_reg(YG_OFFSET_L, data[3]);
 80039fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039fe:	4619      	mov	r1, r3
 8003a00:	2016      	movs	r0, #22
 8003a02:	f000 ff1b 	bl	800483c <mpu9250_write_reg>
  mpu9250_write_reg(ZG_OFFSET_H, data[4]);
 8003a06:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	2017      	movs	r0, #23
 8003a0e:	f000 ff15 	bl	800483c <mpu9250_write_reg>
  mpu9250_write_reg(ZG_OFFSET_L, data[5]);
 8003a12:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003a16:	4619      	mov	r1, r3
 8003a18:	2018      	movs	r0, #24
 8003a1a:	f000 ff0f 	bl	800483c <mpu9250_write_reg>

// Output scaled gyro biases for display in the main program
  dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a20:	ee07 3a90 	vmov	s15, r3
 8003a24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a28:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003a2c:	ee07 3a90 	vmov	s15, r3
 8003a30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	edc3 7a00 	vstr	s15, [r3]
  dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8003a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a40:	ee07 3a90 	vmov	s15, r3
 8003a44:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a48:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003a4c:	ee07 3a90 	vmov	s15, r3
 8003a50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3304      	adds	r3, #4
 8003a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a5c:	edc3 7a00 	vstr	s15, [r3]
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8003a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a62:	ee07 3a90 	vmov	s15, r3
 8003a66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a6a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a7e:	edc3 7a00 	vstr	s15, [r3]
>>>>>>> Stashed changes
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
<<<<<<< Updated upstream
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
 8001662:	2300      	movs	r3, #0
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  mpu9250_read_reg(XA_OFFSET_H, &data[0] ,2); // Read factory accelerometer trim values
 8001666:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800166a:	2202      	movs	r2, #2
 800166c:	4619      	mov	r1, r3
 800166e:	2077      	movs	r0, #119	; 0x77
 8001670:	f000 fd16 	bl	80020a0 <mpu9250_read_reg>
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8001674:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800167e:	4313      	orrs	r3, r2
 8001680:	623b      	str	r3, [r7, #32]
  mpu9250_read_reg(YA_OFFSET_H, &data[0], 2);
 8001682:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001686:	2202      	movs	r2, #2
 8001688:	4619      	mov	r1, r3
 800168a:	207a      	movs	r0, #122	; 0x7a
 800168c:	f000 fd08 	bl	80020a0 <mpu9250_read_reg>
  accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8001690:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800169a:	4313      	orrs	r3, r2
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  mpu9250_read_reg(ZA_OFFSET_H,  &data[0], 2);
 800169e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016a2:	2202      	movs	r2, #2
 80016a4:	4619      	mov	r1, r3
 80016a6:	207d      	movs	r0, #125	; 0x7d
 80016a8:	f000 fcfa 	bl	80020a0 <mpu9250_read_reg>
  accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 80016ac:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80016b6:	4313      	orrs	r3, r2
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 80016ba:	2301      	movs	r3, #1
 80016bc:	653b      	str	r3, [r7, #80]	; 0x50
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 80016be:	4a07      	ldr	r2, [pc, #28]	; (80016dc <calibrateMPU9250+0x3f8>)
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	4611      	mov	r1, r2
 80016c8:	8019      	strh	r1, [r3, #0]
 80016ca:	3302      	adds	r3, #2
 80016cc:	0c12      	lsrs	r2, r2, #16
 80016ce:	701a      	strb	r2, [r3, #0]

  for(ii = 0; ii < 3; ii++) {
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80016d6:	e01b      	b.n	8001710 <calibrateMPU9250+0x42c>
 80016d8:	aaaaaaab 	.word	0xaaaaaaab
 80016dc:	0800fcf8 	.word	0x0800fcf8
    if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 80016e0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	3360      	adds	r3, #96	; 0x60
 80016e8:	443b      	add	r3, r7
 80016ea:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80016ee:	461a      	mov	r2, r3
 80016f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d006      	beq.n	8001706 <calibrateMPU9250+0x422>
 80016f8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80016fc:	3360      	adds	r3, #96	; 0x60
 80016fe:	443b      	add	r3, r7
 8001700:	2201      	movs	r2, #1
 8001702:	f803 2c44 	strb.w	r2, [r3, #-68]
  for(ii = 0; ii < 3; ii++) {
 8001706:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800170a:	3301      	adds	r3, #1
 800170c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001710:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001714:	2b02      	cmp	r3, #2
 8001716:	d9e3      	bls.n	80016e0 <calibrateMPU9250+0x3fc>
=======
 8003a82:	2300      	movs	r3, #0
 8003a84:	623b      	str	r3, [r7, #32]
 8003a86:	2300      	movs	r3, #0
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  mpu9250_read_reg(XA_OFFSET_H, &data[0] ,2); // Read factory accelerometer trim values
 8003a8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a92:	2202      	movs	r2, #2
 8003a94:	4619      	mov	r1, r3
 8003a96:	2077      	movs	r0, #119	; 0x77
 8003a98:	f000 fef6 	bl	8004888 <mpu9250_read_reg>
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8003a9c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	623b      	str	r3, [r7, #32]
  mpu9250_read_reg(YA_OFFSET_H, &data[0], 2);
 8003aaa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003aae:	2202      	movs	r2, #2
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	207a      	movs	r0, #122	; 0x7a
 8003ab4:	f000 fee8 	bl	8004888 <mpu9250_read_reg>
  accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8003ab8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
  mpu9250_read_reg(ZA_OFFSET_H,  &data[0], 2);
 8003ac6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003aca:	2202      	movs	r2, #2
 8003acc:	4619      	mov	r1, r3
 8003ace:	207d      	movs	r0, #125	; 0x7d
 8003ad0:	f000 feda 	bl	8004888 <mpu9250_read_reg>
  accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8003ad4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003ad8:	021b      	lsls	r3, r3, #8
 8003ada:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	653b      	str	r3, [r7, #80]	; 0x50
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8003ae6:	4a07      	ldr	r2, [pc, #28]	; (8003b04 <calibrateMPU9250+0x3f8>)
 8003ae8:	f107 031c 	add.w	r3, r7, #28
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	4611      	mov	r1, r2
 8003af0:	8019      	strh	r1, [r3, #0]
 8003af2:	3302      	adds	r3, #2
 8003af4:	0c12      	lsrs	r2, r2, #16
 8003af6:	701a      	strb	r2, [r3, #0]

  for(ii = 0; ii < 3; ii++) {
 8003af8:	2300      	movs	r3, #0
 8003afa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003afe:	e01b      	b.n	8003b38 <calibrateMPU9250+0x42c>
 8003b00:	aaaaaaab 	.word	0xaaaaaaab
 8003b04:	08013c00 	.word	0x08013c00
    if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8003b08:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	3360      	adds	r3, #96	; 0x60
 8003b10:	443b      	add	r3, r7
 8003b12:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003b16:	461a      	mov	r2, r3
 8003b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d006      	beq.n	8003b2e <calibrateMPU9250+0x422>
 8003b20:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003b24:	3360      	adds	r3, #96	; 0x60
 8003b26:	443b      	add	r3, r7
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f803 2c44 	strb.w	r2, [r3, #-68]
  for(ii = 0; ii < 3; ii++) {
 8003b2e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003b32:	3301      	adds	r3, #1
 8003b34:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003b38:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d9e3      	bls.n	8003b08 <calibrateMPU9250+0x3fc>
>>>>>>> Stashed changes
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
<<<<<<< Updated upstream
 8001718:	6a3a      	ldr	r2, [r7, #32]
 800171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171c:	2b00      	cmp	r3, #0
 800171e:	da00      	bge.n	8001722 <calibrateMPU9250+0x43e>
 8001720:	3307      	adds	r3, #7
 8001722:	10db      	asrs	r3, r3, #3
 8001724:	425b      	negs	r3, r3
 8001726:	4413      	add	r3, r2
 8001728:	623b      	str	r3, [r7, #32]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 800172a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800172c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172e:	2b00      	cmp	r3, #0
 8001730:	da00      	bge.n	8001734 <calibrateMPU9250+0x450>
 8001732:	3307      	adds	r3, #7
 8001734:	10db      	asrs	r3, r3, #3
 8001736:	425b      	negs	r3, r3
 8001738:	4413      	add	r3, r2
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  accel_bias_reg[2] -= (accel_bias[2]/8);
 800173c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800173e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001740:	2b00      	cmp	r3, #0
 8001742:	da00      	bge.n	8001746 <calibrateMPU9250+0x462>
 8001744:	3307      	adds	r3, #7
 8001746:	10db      	asrs	r3, r3, #3
 8001748:	425b      	negs	r3, r3
 800174a:	4413      	add	r3, r2
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	121b      	asrs	r3, r3, #8
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (accel_bias_reg[0])      & 0xFF;
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001760:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001764:	7f3b      	ldrb	r3, [r7, #28]
 8001766:	4313      	orrs	r3, r2
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	121b      	asrs	r3, r3, #8
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001780:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001784:	7f7b      	ldrb	r3, [r7, #29]
 8001786:	4313      	orrs	r3, r2
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 800178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001790:	121b      	asrs	r3, r3, #8
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (accel_bias_reg[2])      & 0xFF;
 8001798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80017a0:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80017a4:	7fbb      	ldrb	r3, [r7, #30]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
=======
 8003b40:	6a3a      	ldr	r2, [r7, #32]
 8003b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	da00      	bge.n	8003b4a <calibrateMPU9250+0x43e>
 8003b48:	3307      	adds	r3, #7
 8003b4a:	10db      	asrs	r3, r3, #3
 8003b4c:	425b      	negs	r3, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	623b      	str	r3, [r7, #32]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 8003b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	da00      	bge.n	8003b5c <calibrateMPU9250+0x450>
 8003b5a:	3307      	adds	r3, #7
 8003b5c:	10db      	asrs	r3, r3, #3
 8003b5e:	425b      	negs	r3, r3
 8003b60:	4413      	add	r3, r2
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
  accel_bias_reg[2] -= (accel_bias[2]/8);
 8003b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	da00      	bge.n	8003b6e <calibrateMPU9250+0x462>
 8003b6c:	3307      	adds	r3, #7
 8003b6e:	10db      	asrs	r3, r3, #3
 8003b70:	425b      	negs	r3, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	121b      	asrs	r3, r3, #8
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (accel_bias_reg[0])      & 0xFF;
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003b88:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003b8c:	7f3b      	ldrb	r3, [r7, #28]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	121b      	asrs	r3, r3, #8
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003ba8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003bac:	7f7b      	ldrb	r3, [r7, #29]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8003bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb8:	121b      	asrs	r3, r3, #8
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (accel_bias_reg[2])      & 0xFF;
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003bc8:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8003bcc:	7fbb      	ldrb	r3, [r7, #30]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
>>>>>>> Stashed changes
//  mpu9250_write_reg(YA_OFFSET_L, data[3]);
//  mpu9250_write_reg(ZA_OFFSET_H, data[4]);
//  mpu9250_write_reg(ZA_OFFSET_L, data[5]);

// Output scaled accelerometer biases for display in the main program
   dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
<<<<<<< Updated upstream
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	ee07 3a90 	vmov	s15, r3
 80017b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017b8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80017bc:	ee07 3a90 	vmov	s15, r3
 80017c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	edc3 7a00 	vstr	s15, [r3]
   dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 80017ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d0:	ee07 3a90 	vmov	s15, r3
 80017d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017d8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	3304      	adds	r3, #4
 80017e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ec:	edc3 7a00 	vstr	s15, [r3]
   dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 80017f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017fa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80017fe:	ee07 3a90 	vmov	s15, r3
 8001802:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	3308      	adds	r3, #8
 800180a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180e:	edc3 7a00 	vstr	s15, [r3]
}
 8001812:	bf00      	nop
 8001814:	3760      	adds	r7, #96	; 0x60
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop

0800181c <readMPU9250Data>:

void readMPU9250Data(int16_t * destination)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint8_t rawData[14];  // x/y/z accel register data stored here
  mpu9250_read_reg(ACCEL_XOUT_H ,rawData, 14);  // Read the 14 raw data registers into data array
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	220e      	movs	r2, #14
 800182a:	4619      	mov	r1, r3
 800182c:	203b      	movs	r0, #59	; 0x3b
 800182e:	f000 fc37 	bl	80020a0 <mpu9250_read_reg>
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
 8001832:	7a3b      	ldrb	r3, [r7, #8]
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	b21a      	sxth	r2, r3
 8001838:	7a7b      	ldrb	r3, [r7, #9]
 800183a:	b21b      	sxth	r3, r3
 800183c:	4313      	orrs	r3, r2
 800183e:	b21a      	sxth	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
 8001844:	7abb      	ldrb	r3, [r7, #10]
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	b219      	sxth	r1, r3
 800184a:	7afb      	ldrb	r3, [r7, #11]
 800184c:	b21a      	sxth	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3302      	adds	r3, #2
 8001852:	430a      	orrs	r2, r1
 8001854:	b212      	sxth	r2, r2
 8001856:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
 8001858:	7b3b      	ldrb	r3, [r7, #12]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	b219      	sxth	r1, r3
 800185e:	7b7b      	ldrb	r3, [r7, #13]
 8001860:	b21a      	sxth	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3304      	adds	r3, #4
 8001866:	430a      	orrs	r2, r1
 8001868:	b212      	sxth	r2, r2
 800186a:	801a      	strh	r2, [r3, #0]
  destination[3] = ((int16_t)rawData[6] << 8) | rawData[7] ;
 800186c:	7bbb      	ldrb	r3, [r7, #14]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b219      	sxth	r1, r3
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	b21a      	sxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3306      	adds	r3, #6
 800187a:	430a      	orrs	r2, r1
 800187c:	b212      	sxth	r2, r2
 800187e:	801a      	strh	r2, [r3, #0]
  destination[4] = ((int16_t)rawData[8] << 8) | rawData[9] ;
 8001880:	7c3b      	ldrb	r3, [r7, #16]
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	b219      	sxth	r1, r3
 8001886:	7c7b      	ldrb	r3, [r7, #17]
 8001888:	b21a      	sxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3308      	adds	r3, #8
 800188e:	430a      	orrs	r2, r1
 8001890:	b212      	sxth	r2, r2
 8001892:	801a      	strh	r2, [r3, #0]
  destination[5] = ((int16_t)rawData[10] << 8) | rawData[11] ;
 8001894:	7cbb      	ldrb	r3, [r7, #18]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	b219      	sxth	r1, r3
 800189a:	7cfb      	ldrb	r3, [r7, #19]
 800189c:	b21a      	sxth	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	330a      	adds	r3, #10
 80018a2:	430a      	orrs	r2, r1
 80018a4:	b212      	sxth	r2, r2
 80018a6:	801a      	strh	r2, [r3, #0]
  destination[6] = ((int16_t)rawData[12] << 8) | rawData[13] ;
 80018a8:	7d3b      	ldrb	r3, [r7, #20]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	b219      	sxth	r1, r3
 80018ae:	7d7b      	ldrb	r3, [r7, #21]
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	330c      	adds	r3, #12
 80018b6:	430a      	orrs	r2, r1
 80018b8:	b212      	sxth	r2, r2
 80018ba:	801a      	strh	r2, [r3, #0]
}
 80018bc:	bf00      	nop
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <getGres>:

float getGres(struct mpu9250 * mpu9250) {
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint8_t Gscale = mpu9250->Gscale;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	785b      	ldrb	r3, [r3, #1]
 80018d0:	73fb      	strb	r3, [r7, #15]
  switch (Gscale)
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d823      	bhi.n	8001920 <getGres+0x5c>
 80018d8:	a201      	add	r2, pc, #4	; (adr r2, 80018e0 <getGres+0x1c>)
 80018da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018de:	bf00      	nop
 80018e0:	080018f1 	.word	0x080018f1
 80018e4:	080018fd 	.word	0x080018fd
 80018e8:	08001909 	.word	0x08001909
 80018ec:	08001915 	.word	0x08001915
=======
 8003bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd8:	ee07 3a90 	vmov	s15, r3
 8003bdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003be0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003be4:	ee07 3a90 	vmov	s15, r3
 8003be8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	edc3 7a00 	vstr	s15, [r3]
   dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	ee07 3a90 	vmov	s15, r3
 8003bfc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c00:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003c04:	ee07 3a90 	vmov	s15, r3
 8003c08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c14:	edc3 7a00 	vstr	s15, [r3]
   dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8003c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c22:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	3308      	adds	r3, #8
 8003c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c36:	edc3 7a00 	vstr	s15, [r3]
}
 8003c3a:	bf00      	nop
 8003c3c:	3760      	adds	r7, #96	; 0x60
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop

08003c44 <readMPU9250Data>:

void readMPU9250Data(int16_t * destination)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint8_t rawData[14];  // x/y/z accel register data stored here
  mpu9250_read_reg(ACCEL_XOUT_H ,rawData, 14);  // Read the 14 raw data registers into data array
 8003c4c:	f107 0308 	add.w	r3, r7, #8
 8003c50:	220e      	movs	r2, #14
 8003c52:	4619      	mov	r1, r3
 8003c54:	203b      	movs	r0, #59	; 0x3b
 8003c56:	f000 fe17 	bl	8004888 <mpu9250_read_reg>
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
 8003c5a:	7a3b      	ldrb	r3, [r7, #8]
 8003c5c:	021b      	lsls	r3, r3, #8
 8003c5e:	b21a      	sxth	r2, r3
 8003c60:	7a7b      	ldrb	r3, [r7, #9]
 8003c62:	b21b      	sxth	r3, r3
 8003c64:	4313      	orrs	r3, r2
 8003c66:	b21a      	sxth	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
 8003c6c:	7abb      	ldrb	r3, [r7, #10]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	b219      	sxth	r1, r3
 8003c72:	7afb      	ldrb	r3, [r7, #11]
 8003c74:	b21a      	sxth	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3302      	adds	r3, #2
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	b212      	sxth	r2, r2
 8003c7e:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
 8003c80:	7b3b      	ldrb	r3, [r7, #12]
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	b219      	sxth	r1, r3
 8003c86:	7b7b      	ldrb	r3, [r7, #13]
 8003c88:	b21a      	sxth	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	b212      	sxth	r2, r2
 8003c92:	801a      	strh	r2, [r3, #0]
  destination[3] = ((int16_t)rawData[6] << 8) | rawData[7] ;
 8003c94:	7bbb      	ldrb	r3, [r7, #14]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	b219      	sxth	r1, r3
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	b21a      	sxth	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3306      	adds	r3, #6
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	b212      	sxth	r2, r2
 8003ca6:	801a      	strh	r2, [r3, #0]
  destination[4] = ((int16_t)rawData[8] << 8) | rawData[9] ;
 8003ca8:	7c3b      	ldrb	r3, [r7, #16]
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	b219      	sxth	r1, r3
 8003cae:	7c7b      	ldrb	r3, [r7, #17]
 8003cb0:	b21a      	sxth	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3308      	adds	r3, #8
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	b212      	sxth	r2, r2
 8003cba:	801a      	strh	r2, [r3, #0]
  destination[5] = ((int16_t)rawData[10] << 8) | rawData[11] ;
 8003cbc:	7cbb      	ldrb	r3, [r7, #18]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	b219      	sxth	r1, r3
 8003cc2:	7cfb      	ldrb	r3, [r7, #19]
 8003cc4:	b21a      	sxth	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	330a      	adds	r3, #10
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	b212      	sxth	r2, r2
 8003cce:	801a      	strh	r2, [r3, #0]
  destination[6] = ((int16_t)rawData[12] << 8) | rawData[13] ;
 8003cd0:	7d3b      	ldrb	r3, [r7, #20]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	b219      	sxth	r1, r3
 8003cd6:	7d7b      	ldrb	r3, [r7, #21]
 8003cd8:	b21a      	sxth	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	b212      	sxth	r2, r2
 8003ce2:	801a      	strh	r2, [r3, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <getGres>:

float getGres(struct mpu9250 * mpu9250) {
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint8_t Gscale = mpu9250->Gscale;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	785b      	ldrb	r3, [r3, #1]
 8003cf8:	73fb      	strb	r3, [r7, #15]
  switch (Gscale)
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d823      	bhi.n	8003d48 <getGres+0x5c>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <getGres+0x1c>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d19 	.word	0x08003d19
 8003d0c:	08003d25 	.word	0x08003d25
 8003d10:	08003d31 	.word	0x08003d31
 8003d14:	08003d3d 	.word	0x08003d3d
>>>>>>> Stashed changes
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
    case GFS_250DPS:
    		mpu9250->_gRes = 250.0/32768.0;
<<<<<<< Updated upstream
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a11      	ldr	r2, [pc, #68]	; (8001938 <getGres+0x74>)
 80018f4:	609a      	str	r2, [r3, #8]
          return mpu9250->_gRes;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	e013      	b.n	8001924 <getGres+0x60>
          break;
    case GFS_500DPS:
    		mpu9250->_gRes = 500.0/32768.0;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a0f      	ldr	r2, [pc, #60]	; (800193c <getGres+0x78>)
 8001900:	609a      	str	r2, [r3, #8]
          return mpu9250->_gRes;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	e00d      	b.n	8001924 <getGres+0x60>
          break;
    case GFS_1000DPS:
    		mpu9250->_gRes = 1000.0/32768.0;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <getGres+0x7c>)
 800190c:	609a      	str	r2, [r3, #8]
         return mpu9250->_gRes;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	e007      	b.n	8001924 <getGres+0x60>
         break;
    case GFS_2000DPS:
    		mpu9250->_gRes = 2000.0/32768.0;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <getGres+0x80>)
 8001918:	609a      	str	r2, [r3, #8]
         return mpu9250->_gRes;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	e001      	b.n	8001924 <getGres+0x60>
         break;
  }
  return 0.0;
 8001920:	f04f 0300 	mov.w	r3, #0
}
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eeb0 0a67 	vmov.f32	s0, s15
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	3bfa0000 	.word	0x3bfa0000
 800193c:	3c7a0000 	.word	0x3c7a0000
 8001940:	3cfa0000 	.word	0x3cfa0000
 8001944:	3d7a0000 	.word	0x3d7a0000

08001948 <getAres>:

float getAres(struct mpu9250 * mpu9250) {
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint8_t Ascale = mpu9250->Ascale;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	73fb      	strb	r3, [r7, #15]
  switch (Ascale)
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d827      	bhi.n	80019ac <getAres+0x64>
 800195c:	a201      	add	r2, pc, #4	; (adr r2, 8001964 <getAres+0x1c>)
 800195e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001962:	bf00      	nop
 8001964:	08001975 	.word	0x08001975
 8001968:	08001983 	.word	0x08001983
 800196c:	08001991 	.word	0x08001991
 8001970:	0800199f 	.word	0x0800199f
=======
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a11      	ldr	r2, [pc, #68]	; (8003d60 <getGres+0x74>)
 8003d1c:	609a      	str	r2, [r3, #8]
          return mpu9250->_gRes;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	e013      	b.n	8003d4c <getGres+0x60>
          break;
    case GFS_500DPS:
    		mpu9250->_gRes = 500.0/32768.0;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a0f      	ldr	r2, [pc, #60]	; (8003d64 <getGres+0x78>)
 8003d28:	609a      	str	r2, [r3, #8]
          return mpu9250->_gRes;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	e00d      	b.n	8003d4c <getGres+0x60>
          break;
    case GFS_1000DPS:
    		mpu9250->_gRes = 1000.0/32768.0;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a0d      	ldr	r2, [pc, #52]	; (8003d68 <getGres+0x7c>)
 8003d34:	609a      	str	r2, [r3, #8]
         return mpu9250->_gRes;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	e007      	b.n	8003d4c <getGres+0x60>
         break;
    case GFS_2000DPS:
    		mpu9250->_gRes = 2000.0/32768.0;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a0b      	ldr	r2, [pc, #44]	; (8003d6c <getGres+0x80>)
 8003d40:	609a      	str	r2, [r3, #8]
         return mpu9250->_gRes;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	e001      	b.n	8003d4c <getGres+0x60>
         break;
  }
  return 0.0;
 8003d48:	f04f 0300 	mov.w	r3, #0
}
 8003d4c:	ee07 3a90 	vmov	s15, r3
 8003d50:	eeb0 0a67 	vmov.f32	s0, s15
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	3bfa0000 	.word	0x3bfa0000
 8003d64:	3c7a0000 	.word	0x3c7a0000
 8003d68:	3cfa0000 	.word	0x3cfa0000
 8003d6c:	3d7a0000 	.word	0x3d7a0000

08003d70 <getAres>:

float getAres(struct mpu9250 * mpu9250) {
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint8_t Ascale = mpu9250->Ascale;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	73fb      	strb	r3, [r7, #15]
  switch (Ascale)
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d827      	bhi.n	8003dd4 <getAres+0x64>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <getAres+0x1c>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003d9d 	.word	0x08003d9d
 8003d90:	08003dab 	.word	0x08003dab
 8003d94:	08003db9 	.word	0x08003db9
 8003d98:	08003dc7 	.word	0x08003dc7
>>>>>>> Stashed changes
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
		 mpu9250->_aRes = 2.0f/32768.0f;
<<<<<<< Updated upstream
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800197a:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	e016      	b.n	80019b0 <getAres+0x68>
         break;
    case AFS_4G:
		mpu9250->_aRes = 4.0f/32768.0f;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001988:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	e00f      	b.n	80019b0 <getAres+0x68>
         break;
    case AFS_8G:
		mpu9250->_aRes = 8.0f/32768.0f;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001996:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	e008      	b.n	80019b0 <getAres+0x68>
         break;
    case AFS_16G:
		mpu9250->_aRes = 16.0f/32768.0f;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80019a4:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	e001      	b.n	80019b0 <getAres+0x68>
         break;
  }
  return 0.0;
 80019ac:	f04f 0300 	mov.w	r3, #0
}
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eeb0 0a67 	vmov.f32	s0, s15
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	0000      	movs	r0, r0
	...

080019c8 <updateData>:

void updateData(struct mpu9250 * mpu9250, float dt, float vel){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	ed2d 8b02 	vpush	{d8}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80019d8:	edc7 0a01 	vstr	s1, [r7, #4]
	readMPU9250Data(mpu9250->rawData);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	330c      	adds	r3, #12
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff1b 	bl	800181c <readMPU9250Data>

  // Update buffers' values
	for (int i = 0; i<3; i++){
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	e023      	b.n	8001a34 <updateData+0x6c>
		mpu9250->accBuff[i][mpu9250->buffPointer] = (float)(mpu9250->rawData[i] * getAres(mpu9250));
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3304      	adds	r3, #4
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f7ff ffa0 	bl	8001948 <getAres>
 8001a08:	eef0 7a40 	vmov.f32	s15, s0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a12:	4618      	mov	r0, r3
 8001a14:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001a18:	68f9      	ldr	r1, [r7, #12]
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	4403      	add	r3, r0
 8001a24:	330e      	adds	r3, #14
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i<3; i++){
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3301      	adds	r3, #1
 8001a32:	61fb      	str	r3, [r7, #28]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	ddd8      	ble.n	80019ec <updateData+0x24>
	}
	for (int i = 4; i<7; i++){
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	e025      	b.n	8001a8c <updateData+0xc4>
		mpu9250->gyroBuff[i-4][mpu9250->buffPointer] = (float)(mpu9250->rawData[i] * getGres(mpu9250));
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	3304      	adds	r3, #4
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f7ff ff34 	bl	80018c4 <getGres>
 8001a5c:	eef0 7a40 	vmov.f32	s15, s0
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	1f1a      	subs	r2, r3, #4
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001a70:	68f9      	ldr	r1, [r7, #12]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	4403      	add	r3, r0
 8001a7a:	331c      	adds	r3, #28
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	3304      	adds	r3, #4
 8001a82:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 4; i<7; i++){
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	61bb      	str	r3, [r7, #24]
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	ddd6      	ble.n	8001a40 <updateData+0x78>
	}

	mpu9250->buffPointer = (mpu9250->buffPointer+1) % filt_size;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	4ba1      	ldr	r3, [pc, #644]	; (8001d20 <updateData+0x358>)
 8001a9c:	fb83 1302 	smull	r1, r3, r3, r2
 8001aa0:	1059      	asrs	r1, r3, #1
 8001aa2:	17d3      	asrs	r3, r2, #31
 8001aa4:	1ac9      	subs	r1, r1, r3
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	1ad1      	subs	r1, r2, r3
 8001aae:	b2ca      	uxtb	r2, r1
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mpu9250->lastAngVel = mpu9250->gyro[2];
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  // Calculate moving average's new iteration
	for(int i = 0 ; i < 3 ; i++){
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e07d      	b.n	8001bc2 <updateData+0x1fa>
		mpu9250->acc[i] = 0;
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3306      	adds	r3, #6
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
		mpu9250->gyro[i] = 0;
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	330a      	adds	r3, #10
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < filt_size ; j++){
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	e03d      	b.n	8001b6a <updateData+0x1a2>
			mpu9250->acc[i]+= mpu9250->accBuff[i][j];
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	3306      	adds	r3, #6
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	3304      	adds	r3, #4
 8001afa:	ed93 7a00 	vldr	s14, [r3]
 8001afe:	68f9      	ldr	r1, [r7, #12]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	330e      	adds	r3, #14
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	edd3 7a00 	vldr	s15, [r3]
 8001b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	3306      	adds	r3, #6
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	3304      	adds	r3, #4
 8001b26:	edc3 7a00 	vstr	s15, [r3]
			mpu9250->gyro[i]+= mpu9250->gyroBuff[i][j];
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	330a      	adds	r3, #10
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	ed93 7a00 	vldr	s14, [r3]
 8001b38:	68f9      	ldr	r1, [r7, #12]
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4413      	add	r3, r2
 8001b46:	331c      	adds	r3, #28
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	edd3 7a00 	vldr	s15, [r3]
 8001b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	330a      	adds	r3, #10
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	edc3 7a00 	vstr	s15, [r3]
		for(int j = 0 ; j < filt_size ; j++){
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	3301      	adds	r3, #1
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	ddbe      	ble.n	8001aee <updateData+0x126>
		}
		mpu9250->acc[i]/= filt_size;
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3306      	adds	r3, #6
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	ed93 7a00 	vldr	s14, [r3]
 8001b80:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001b84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3306      	adds	r3, #6
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	3304      	adds	r3, #4
 8001b94:	edc3 7a00 	vstr	s15, [r3]
		mpu9250->gyro[i]/= filt_size;
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	330a      	adds	r3, #10
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	ed93 7a00 	vldr	s14, [r3]
 8001ba6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001baa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	330a      	adds	r3, #10
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0 ; i < 3 ; i++){
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	f77f af7e 	ble.w	8001ac6 <updateData+0xfe>
=======
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8003da2:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	e016      	b.n	8003dd8 <getAres+0x68>
         break;
    case AFS_4G:
		mpu9250->_aRes = 4.0f/32768.0f;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8003db0:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	e00f      	b.n	8003dd8 <getAres+0x68>
         break;
    case AFS_8G:
		mpu9250->_aRes = 8.0f/32768.0f;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8003dbe:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	e008      	b.n	8003dd8 <getAres+0x68>
         break;
    case AFS_16G:
		mpu9250->_aRes = 16.0f/32768.0f;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8003dcc:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	e001      	b.n	8003dd8 <getAres+0x68>
         break;
  }
  return 0.0;
 8003dd4:	f04f 0300 	mov.w	r3, #0
}
 8003dd8:	ee07 3a90 	vmov	s15, r3
 8003ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	0000      	movs	r0, r0
	...

08003df0 <updateData>:

void updateData(struct mpu9250 * mpu9250, float dt, float vel){
 8003df0:	b580      	push	{r7, lr}
 8003df2:	ed2d 8b02 	vpush	{d8}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e00:	edc7 0a01 	vstr	s1, [r7, #4]
	readMPU9250Data(mpu9250->rawData);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	330c      	adds	r3, #12
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff ff1b 	bl	8003c44 <readMPU9250Data>

  // Update buffers' values
	for (int i = 0; i<3; i++){
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	e023      	b.n	8003e5c <updateData+0x6c>
		mpu9250->accBuff[i][mpu9250->buffPointer] = (float)(mpu9250->rawData[i] * getAres(mpu9250));
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f7ff ffa0 	bl	8003d70 <getAres>
 8003e30:	eef0 7a40 	vmov.f32	s15, s0
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003e40:	68f9      	ldr	r1, [r7, #12]
 8003e42:	69fa      	ldr	r2, [r7, #28]
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	4403      	add	r3, r0
 8003e4c:	330e      	adds	r3, #14
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i<3; i++){
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	ddd8      	ble.n	8003e14 <updateData+0x24>
	}
	for (int i = 4; i<7; i++){
 8003e62:	2304      	movs	r3, #4
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	e025      	b.n	8003eb4 <updateData+0xc4>
		mpu9250->gyroBuff[i-4][mpu9250->buffPointer] = (float)(mpu9250->rawData[i] * getGres(mpu9250));
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	4413      	add	r3, r2
 8003e72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f7ff ff34 	bl	8003cec <getGres>
 8003e84:	eef0 7a40 	vmov.f32	s15, s0
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	1f1a      	subs	r2, r3, #4
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e92:	4618      	mov	r0, r3
 8003e94:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003e98:	68f9      	ldr	r1, [r7, #12]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	4403      	add	r3, r0
 8003ea2:	331c      	adds	r3, #28
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 4; i<7; i++){
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b06      	cmp	r3, #6
 8003eb8:	ddd6      	ble.n	8003e68 <updateData+0x78>
	}

	mpu9250->buffPointer = (mpu9250->buffPointer+1) % filt_size;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	4ba1      	ldr	r3, [pc, #644]	; (8004148 <updateData+0x358>)
 8003ec4:	fb83 1302 	smull	r1, r3, r3, r2
 8003ec8:	1059      	asrs	r1, r3, #1
 8003eca:	17d3      	asrs	r3, r2, #31
 8003ecc:	1ac9      	subs	r1, r1, r3
 8003ece:	460b      	mov	r3, r1
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	1ad1      	subs	r1, r2, r3
 8003ed6:	b2ca      	uxtb	r2, r1
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mpu9250->lastAngVel = mpu9250->gyro[2];
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  // Calculate moving average's new iteration
	for(int i = 0 ; i < 3 ; i++){
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	e07d      	b.n	8003fea <updateData+0x1fa>
		mpu9250->acc[i] = 0;
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	3306      	adds	r3, #6
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3304      	adds	r3, #4
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
		mpu9250->gyro[i] = 0;
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	330a      	adds	r3, #10
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < filt_size ; j++){
 8003f10:	2300      	movs	r3, #0
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	e03d      	b.n	8003f92 <updateData+0x1a2>
			mpu9250->acc[i]+= mpu9250->accBuff[i][j];
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	3306      	adds	r3, #6
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	3304      	adds	r3, #4
 8003f22:	ed93 7a00 	vldr	s14, [r3]
 8003f26:	68f9      	ldr	r1, [r7, #12]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4413      	add	r3, r2
 8003f34:	330e      	adds	r3, #14
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	edd3 7a00 	vldr	s15, [r3]
 8003f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	3306      	adds	r3, #6
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	edc3 7a00 	vstr	s15, [r3]
			mpu9250->gyro[i]+= mpu9250->gyroBuff[i][j];
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	330a      	adds	r3, #10
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	ed93 7a00 	vldr	s14, [r3]
 8003f60:	68f9      	ldr	r1, [r7, #12]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	331c      	adds	r3, #28
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	3304      	adds	r3, #4
 8003f76:	edd3 7a00 	vldr	s15, [r3]
 8003f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	330a      	adds	r3, #10
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	edc3 7a00 	vstr	s15, [r3]
		for(int j = 0 ; j < filt_size ; j++){
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	ddbe      	ble.n	8003f16 <updateData+0x126>
		}
		mpu9250->acc[i]/= filt_size;
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	3306      	adds	r3, #6
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	ed93 7a00 	vldr	s14, [r3]
 8003fa8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	3306      	adds	r3, #6
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	3304      	adds	r3, #4
 8003fbc:	edc3 7a00 	vstr	s15, [r3]
		mpu9250->gyro[i]/= filt_size;
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	330a      	adds	r3, #10
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	ed93 7a00 	vldr	s14, [r3]
 8003fce:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	330a      	adds	r3, #10
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0 ; i < 3 ; i++){
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	f77f af7e 	ble.w	8003eee <updateData+0xfe>
>>>>>>> Stashed changes
	}

  // Update orientation
	// 1.1 = gyroscope's error
	mpu9250->pose[2] += 1.1* dt * (mpu9250->gyro[2] + mpu9250->lastAngVel) / 2;
<<<<<<< Updated upstream
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001bd0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001bd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bdc:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8001d10 <updateData+0x348>
 8001be0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8001bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bf8:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001bfc:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8001c00:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001c04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c08:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	if(mpu9250->pose[2] < -180)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001c18:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001d24 <updateData+0x35c>
 8001c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c24:	d50a      	bpl.n	8001c3c <updateData+0x274>
		mpu9250->pose[2] += 360;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001c2c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001d28 <updateData+0x360>
 8001c30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
 8001c3a:	e013      	b.n	8001c64 <updateData+0x29c>
	else if(mpu9250->pose[2] > 180)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001c42:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001d2c <updateData+0x364>
 8001c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	dd09      	ble.n	8001c64 <updateData+0x29c>
		mpu9250->pose[2] -= 360;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001c56:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001d28 <updateData+0x360>
 8001c5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

  //Update position
  mpu9250->pose[0] += cos(M_PI/180 * mpu9250->pose[2]) * dt * vel;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8001c6a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001c74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c78:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001d18 <updateData+0x350>
 8001c7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c80:	eeb0 0b47 	vmov.f64	d0, d7
 8001c84:	f00c ffb0 	bl	800ebe8 <cos>
 8001c88:	eeb0 6b40 	vmov.f64	d6, d0
 8001c8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c94:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001c98:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ca0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001ca4:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001ca8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
  mpu9250->pose[1] += sin(M_PI/180 * mpu9250->pose[2]) * dt * vel;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001cb8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001cc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cc6:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8001d18 <updateData+0x350>
 8001cca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cce:	eeb0 0b47 	vmov.f64	d0, d7
 8001cd2:	f00c ffd5 	bl	800ec80 <sin>
 8001cd6:	eeb0 6b40 	vmov.f64	d6, d0
 8001cda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ce2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ce6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cee:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001cf2:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001cf6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
}
 8001d00:	bf00      	nop
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	ecbd 8b02 	vpop	{d8}
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	f3af 8000 	nop.w
 8001d10:	9999999a 	.word	0x9999999a
 8001d14:	3ff19999 	.word	0x3ff19999
 8001d18:	a2529d39 	.word	0xa2529d39
 8001d1c:	3f91df46 	.word	0x3f91df46
 8001d20:	66666667 	.word	0x66666667
 8001d24:	c3340000 	.word	0xc3340000
 8001d28:	43b40000 	.word	0x43b40000
 8001d2c:	43340000 	.word	0x43340000

08001d30 <setPose>:

void setPose(struct mpu9250 * mpu9250, float *pos){
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
	for(int i = 0 ; i < 3 ; i++){
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	e00e      	b.n	8001d5e <setPose+0x2e>
		mpu9250->pose[i] = pos[i];
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	332c      	adds	r3, #44	; 0x2c
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	3304      	adds	r3, #4
 8001d56:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < 3 ; i++){
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	dded      	ble.n	8001d40 <setPose+0x10>
	}
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <__io_putchar>:
=======
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003ff8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ffc:	edd7 7a02 	vldr	s15, [r7, #8]
 8004000:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004004:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8004138 <updateData+0x348>
 8004008:	ee27 5b05 	vmul.f64	d5, d7, d5
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8004018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800401c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004020:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004024:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004028:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800402c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004030:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	if(mpu9250->pose[2] < -180)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8004040:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800414c <updateData+0x35c>
 8004044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800404c:	d50a      	bpl.n	8004064 <updateData+0x274>
		mpu9250->pose[2] += 360;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8004054:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004150 <updateData+0x360>
 8004058:	ee77 7a87 	vadd.f32	s15, s15, s14
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
 8004062:	e013      	b.n	800408c <updateData+0x29c>
	else if(mpu9250->pose[2] > 180)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800406a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8004154 <updateData+0x364>
 800406e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004076:	dd09      	ble.n	800408c <updateData+0x29c>
		mpu9250->pose[2] -= 360;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800407e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004150 <updateData+0x360>
 8004082:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

  //Update position
  mpu9250->pose[0] += cos(M_PI/180 * mpu9250->pose[2]) * dt * vel;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004092:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800409c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040a0:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8004140 <updateData+0x350>
 80040a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80040a8:	eeb0 0b47 	vmov.f64	d0, d7
 80040ac:	f00e fa14 	bl	80124d8 <cos>
 80040b0:	eeb0 6b40 	vmov.f64	d6, d0
 80040b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80040b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80040c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80040c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80040cc:	ee38 7b07 	vadd.f64	d7, d8, d7
 80040d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
  mpu9250->pose[1] += sin(M_PI/180 * mpu9250->pose[2]) * dt * vel;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 80040e0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80040ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040ee:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8004140 <updateData+0x350>
 80040f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80040f6:	eeb0 0b47 	vmov.f64	d0, d7
 80040fa:	f00e fa39 	bl	8012570 <sin>
 80040fe:	eeb0 6b40 	vmov.f64	d6, d0
 8004102:	edd7 7a02 	vldr	s15, [r7, #8]
 8004106:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800410a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800410e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004112:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004116:	ee26 7b07 	vmul.f64	d7, d6, d7
 800411a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800411e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
}
 8004128:	bf00      	nop
 800412a:	3720      	adds	r7, #32
 800412c:	46bd      	mov	sp, r7
 800412e:	ecbd 8b02 	vpop	{d8}
 8004132:	bd80      	pop	{r7, pc}
 8004134:	f3af 8000 	nop.w
 8004138:	9999999a 	.word	0x9999999a
 800413c:	3ff19999 	.word	0x3ff19999
 8004140:	a2529d39 	.word	0xa2529d39
 8004144:	3f91df46 	.word	0x3f91df46
 8004148:	66666667 	.word	0x66666667
 800414c:	c3340000 	.word	0xc3340000
 8004150:	43b40000 	.word	0x43b40000
 8004154:	43340000 	.word	0x43340000

08004158 <setPose>:

void setPose(struct mpu9250 * mpu9250, float *pos){
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
	for(int i = 0 ; i < 3 ; i++){
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e00e      	b.n	8004186 <setPose+0x2e>
		mpu9250->pose[i] = pos[i];
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	4413      	add	r3, r2
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	332c      	adds	r3, #44	; 0x2c
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	3304      	adds	r3, #4
 800417e:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < 3 ; i++){
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	3301      	adds	r3, #1
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b02      	cmp	r3, #2
 800418a:	dded      	ble.n	8004168 <setPose+0x10>
	}
}
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <readSpeed>:
 */

#include "myCAN.h"

void readSpeed(FDCAN_HandleTypeDef *hfdcan, FDCAN_RxHeaderTypeDef *pRxHeader,
		union BytesFloat bf, uint8_t *pRxData, uint8_t *m, float *sp){
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
	uint8_t m2;
	m2 = HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, pRxHeader, pRxData);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	2140      	movs	r1, #64	; 0x40
 80041b0:	4810      	ldr	r0, [pc, #64]	; (80041f4 <readSpeed+0x58>)
 80041b2:	f001 fe23 	bl	8005dfc <HAL_FDCAN_GetRxMessage>
 80041b6:	4603      	mov	r3, r0
 80041b8:	74fb      	strb	r3, [r7, #19]
	*m = m2;
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	7cfa      	ldrb	r2, [r7, #19]
 80041be:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < sizeof(float); i++) {
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	e00c      	b.n	80041e0 <readSpeed+0x44>
		uint8_t receivedByte = pRxData[i];
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	4413      	add	r3, r2
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	74bb      	strb	r3, [r7, #18]
		bf.byteValue[i] = receivedByte;
 80041d0:	1d3a      	adds	r2, r7, #4
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	4413      	add	r3, r2
 80041d6:	7cba      	ldrb	r2, [r7, #18]
 80041d8:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < sizeof(float); i++) {
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	3301      	adds	r3, #1
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d9ef      	bls.n	80041c6 <readSpeed+0x2a>
	}

	*sp = bf.floatValue;
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	601a      	str	r2, [r3, #0]

	// return m;
}
 80041ec:	bf00      	nop
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	2400033c 	.word	0x2400033c

080041f8 <__io_putchar>:
>>>>>>> Stashed changes
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
<<<<<<< Updated upstream
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001d7c:	1d39      	adds	r1, r7, #4
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	2201      	movs	r2, #1
 8001d84:	4803      	ldr	r0, [pc, #12]	; (8001d94 <__io_putchar+0x20>)
 8001d86:	f005 ffc3 	bl	8007d10 <HAL_UART_Transmit>
  return ch;
 8001d8a:	687b      	ldr	r3, [r7, #4]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	240004a4 	.word	0x240004a4

08001d98 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
=======
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004200:	1d39      	adds	r1, r7, #4
 8004202:	f04f 33ff 	mov.w	r3, #4294967295
 8004206:	2201      	movs	r2, #1
 8004208:	4803      	ldr	r0, [pc, #12]	; (8004218 <__io_putchar+0x20>)
 800420a:	f006 ff63 	bl	800b0d4 <HAL_UART_Transmit>
  return ch;
 800420e:	687b      	ldr	r3, [r7, #4]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	24000958 	.word	0x24000958

0800421c <initPI>:
 * */

#include "pi.h"
#include "myprintf.h"

void initPI(struct PI * pi, float sample_time, float k_p, float k_i, float k_d, float u_max, float u_min){
 800421c:	b480      	push	{r7}
 800421e:	b089      	sub	sp, #36	; 0x24
 8004220:	af00      	add	r7, sp, #0
 8004222:	61f8      	str	r0, [r7, #28]
 8004224:	ed87 0a06 	vstr	s0, [r7, #24]
 8004228:	edc7 0a05 	vstr	s1, [r7, #20]
 800422c:	ed87 1a04 	vstr	s2, [r7, #16]
 8004230:	edc7 1a03 	vstr	s3, [r7, #12]
 8004234:	ed87 2a02 	vstr	s4, [r7, #8]
 8004238:	edc7 2a01 	vstr	s5, [r7, #4]
  pi->sample_time = sample_time;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	601a      	str	r2, [r3, #0]
  pi->k_p = k_p;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	60da      	str	r2, [r3, #12]
  pi->k_i = k_i;
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	611a      	str	r2, [r3, #16]
  pi->k_d = k_d;
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	615a      	str	r2, [r3, #20]

  pi->error = 0;
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	605a      	str	r2, [r3, #4]
  pi->prev_error = 0;
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	609a      	str	r2, [r3, #8]
  pi->chi1_d = 0;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	625a      	str	r2, [r3, #36]	; 0x24
  pi->u = 0;
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	621a      	str	r2, [r3, #32]

  pi->U_MAX = u_max;
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	61da      	str	r2, [r3, #28]
  pi->U_MIN = u_min;
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	619a      	str	r2, [r3, #24]
}
 8004280:	bf00      	nop
 8004282:	3724      	adds	r7, #36	; 0x24
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <updateReferences>:

void updateReferences(struct PI * pi, float chi1_d){
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	ed87 0a00 	vstr	s0, [r7]
    pi->chi1_d = chi1_d;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <calculateManipulation>:

void calculateManipulation(struct PI * pi, float chi1){
 80042aa:	b480      	push	{r7}
 80042ac:	b087      	sub	sp, #28
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	ed87 0a00 	vstr	s0, [r7]
  float error_d;
  float error_i;
  float u;

  pi->prev_error   = pi->error;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	609a      	str	r2, [r3, #8]
  pi->error        = pi->chi1_d- chi1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80042c4:	edd7 7a00 	vldr	s15, [r7]
 80042c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	edc3 7a01 	vstr	s15, [r3, #4]

  error_d = (pi->error- pi->prev_error) / pi->sample_time;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	edd3 7a02 	vldr	s15, [r3, #8]
 80042de:	ee77 6a67 	vsub.f32	s13, s14, s15
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	ed93 7a00 	vldr	s14, [r3]
 80042e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ec:	edc7 7a05 	vstr	s15, [r7, #20]
  error_i = ((pi->error+ pi->prev_error) / 2 * pi->sample_time) + pi->error;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80042fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004300:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004304:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	edd3 7a00 	vldr	s15, [r3]
 800430e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	edd3 7a01 	vldr	s15, [r3, #4]
 8004318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800431c:	edc7 7a04 	vstr	s15, [r7, #16]

  u  = pi->k_p* pi->error+ pi->k_i* error_i + pi->k_d* error_d;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	ed93 7a03 	vldr	s14, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	edd3 7a01 	vldr	s15, [r3, #4]
 800432c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	edd3 6a04 	vldr	s13, [r3, #16]
 8004336:	edd7 7a04 	vldr	s15, [r7, #16]
 800433a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800433e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	edd3 6a05 	vldr	s13, [r3, #20]
 8004348:	edd7 7a05 	vldr	s15, [r7, #20]
 800434c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004354:	edc7 7a03 	vstr	s15, [r7, #12]
  // printf("U: %3.3f, K{%3.3f, %3.3f, %3.3f}\r\n",u, pi->error, error_i, error_d);
                                                              
  if(!isnan(u) || u != 0.0)
 8004358:	ed97 7a03 	vldr	s14, [r7, #12]
 800435c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004360:	eeb4 7a67 	vcmp.f32	s14, s15
 8004364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004368:	d706      	bvc.n	8004378 <calculateManipulation+0xce>
 800436a:	edd7 7a03 	vldr	s15, [r7, #12]
 800436e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004376:	d002      	beq.n	800437e <calculateManipulation+0xd4>
      pi->u= u;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	bf00      	nop
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <saturateManipulation>:

void saturateManipulation(struct PI * pi, float chi1){
 800438a:	b580      	push	{r7, lr}
 800438c:	ed2d 8b02 	vpush	{d8}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	ed87 0a00 	vstr	s0, [r7]
  calculateManipulation(pi, chi1);
 800439a:	ed97 0a00 	vldr	s0, [r7]
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff ff83 	bl	80042aa <calculateManipulation>
  pi->u = abs(pi->u) > pi->U_MAX ? pi->u / abs(pi->u) * pi->U_MAX : pi->u;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	edd3 7a08 	vldr	s15, [r3, #32]
 80043aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043ae:	eeb0 0b47 	vmov.f64	d0, d7
 80043b2:	f00b f925 	bl	800f600 <abs>
 80043b6:	ee07 0a90 	vmov	s15, r0
 80043ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	edd3 7a07 	vldr	s15, [r3, #28]
 80043c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043cc:	dd17      	ble.n	80043fe <saturateManipulation+0x74>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	ed93 8a08 	vldr	s16, [r3, #32]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80043da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043de:	eeb0 0b47 	vmov.f64	d0, d7
 80043e2:	f00b f90d 	bl	800f600 <abs>
 80043e6:	ee07 0a90 	vmov	s15, r0
 80043ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ee:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	edd3 7a07 	vldr	s15, [r3, #28]
 80043f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fc:	e002      	b.n	8004404 <saturateManipulation+0x7a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	edd3 7a08 	vldr	s15, [r3, #32]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	edc3 7a08 	vstr	s15, [r3, #32]
  pi->u = pi->u < pi->U_MIN ? pi->U_MIN : pi->u;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	ed93 7a08 	vldr	s14, [r3, #32]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	edd3 7a06 	vldr	s15, [r3, #24]
 8004416:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800441a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441e:	d502      	bpl.n	8004426 <saturateManipulation+0x9c>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	e001      	b.n	800442a <saturateManipulation+0xa0>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6213      	str	r3, [r2, #32]
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	ecbd 8b02 	vpop	{d8}
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <MX_SPI1_Init>:
>>>>>>> Stashed changes
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
<<<<<<< Updated upstream
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
=======
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
<<<<<<< Updated upstream
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001d9e:	4a29      	ldr	r2, [pc, #164]	; (8001e44 <MX_SPI1_Init+0xac>)
 8001da0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001da2:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001da4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001da8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001daa:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001db0:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001db2:	2207      	movs	r2, #7
 8001db4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001db6:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dbc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001dc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001dc8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dcc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001dd0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001dd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001df0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e02:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e2c:	4804      	ldr	r0, [pc, #16]	; (8001e40 <MX_SPI1_Init+0xa8>)
 8001e2e:	f003 fee5 	bl	8005bfc <HAL_SPI_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001e38:	f7ff f982 	bl	8001140 <Error_Handler>
=======
 8004440:	4b28      	ldr	r3, [pc, #160]	; (80044e4 <MX_SPI1_Init+0xa8>)
 8004442:	4a29      	ldr	r2, [pc, #164]	; (80044e8 <MX_SPI1_Init+0xac>)
 8004444:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004446:	4b27      	ldr	r3, [pc, #156]	; (80044e4 <MX_SPI1_Init+0xa8>)
 8004448:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800444c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800444e:	4b25      	ldr	r3, [pc, #148]	; (80044e4 <MX_SPI1_Init+0xa8>)
 8004450:	2200      	movs	r2, #0
 8004452:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004454:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <MX_SPI1_Init+0xa8>)
 8004456:	2207      	movs	r2, #7
 8004458:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800445a:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <MX_SPI1_Init+0xa8>)
 800445c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004460:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004462:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <MX_SPI1_Init+0xa8>)
 8004464:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004468:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800446a:	4b1e      	ldr	r3, [pc, #120]	; (80044e4 <MX_SPI1_Init+0xa8>)
 800446c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004470:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004472:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <MX_SPI1_Init+0xa8>)
 8004474:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8004478:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800447a:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <MX_SPI1_Init+0xa8>)
 800447c:	2200      	movs	r2, #0
 800447e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004480:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <MX_SPI1_Init+0xa8>)
 8004482:	2200      	movs	r2, #0
 8004484:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004486:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <MX_SPI1_Init+0xa8>)
 8004488:	2200      	movs	r2, #0
 800448a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800448c:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <MX_SPI1_Init+0xa8>)
 800448e:	2200      	movs	r2, #0
 8004490:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004492:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <MX_SPI1_Init+0xa8>)
 8004494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004498:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800449a:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <MX_SPI1_Init+0xa8>)
 800449c:	2200      	movs	r2, #0
 800449e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80044a0:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <MX_SPI1_Init+0xa8>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80044a6:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <MX_SPI1_Init+0xa8>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80044ac:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <MX_SPI1_Init+0xa8>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80044b2:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <MX_SPI1_Init+0xa8>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <MX_SPI1_Init+0xa8>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80044be:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <MX_SPI1_Init+0xa8>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80044c4:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <MX_SPI1_Init+0xa8>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <MX_SPI1_Init+0xa8>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80044d0:	4804      	ldr	r0, [pc, #16]	; (80044e4 <MX_SPI1_Init+0xa8>)
 80044d2:	f004 fd75 	bl	8008fc0 <HAL_SPI_Init>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80044dc:	f7ff f844 	bl	8003568 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
<<<<<<< Updated upstream
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	240002f8 	.word	0x240002f8
 8001e44:	40013000 	.word	0x40013000

08001e48 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
=======
 80044e0:	bf00      	nop
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	24000724 	.word	0x24000724
 80044e8:	40013000 	.word	0x40013000

080044ec <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
<<<<<<< Updated upstream
 8001e4c:	4b27      	ldr	r3, [pc, #156]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001e4e:	4a28      	ldr	r2, [pc, #160]	; (8001ef0 <MX_SPI2_Init+0xa8>)
 8001e50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001e54:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e5a:	4b24      	ldr	r3, [pc, #144]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e60:	4b22      	ldr	r3, [pc, #136]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001e62:	2207      	movs	r2, #7
 8001e64:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e72:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001e74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e78:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001e7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e80:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e88:	4b18      	ldr	r3, [pc, #96]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001e94:	4b15      	ldr	r3, [pc, #84]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001e9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ea0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ea8:	4b10      	ldr	r3, [pc, #64]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ecc:	4b07      	ldr	r3, [pc, #28]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ed8:	4804      	ldr	r0, [pc, #16]	; (8001eec <MX_SPI2_Init+0xa4>)
 8001eda:	f003 fe8f 	bl	8005bfc <HAL_SPI_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001ee4:	f7ff f92c 	bl	8001140 <Error_Handler>
=======
 80044f0:	4b27      	ldr	r3, [pc, #156]	; (8004590 <MX_SPI2_Init+0xa4>)
 80044f2:	4a28      	ldr	r2, [pc, #160]	; (8004594 <MX_SPI2_Init+0xa8>)
 80044f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80044f6:	4b26      	ldr	r3, [pc, #152]	; (8004590 <MX_SPI2_Init+0xa4>)
 80044f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80044fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80044fe:	4b24      	ldr	r3, [pc, #144]	; (8004590 <MX_SPI2_Init+0xa4>)
 8004500:	2200      	movs	r2, #0
 8004502:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004504:	4b22      	ldr	r3, [pc, #136]	; (8004590 <MX_SPI2_Init+0xa4>)
 8004506:	2207      	movs	r2, #7
 8004508:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800450a:	4b21      	ldr	r3, [pc, #132]	; (8004590 <MX_SPI2_Init+0xa4>)
 800450c:	2200      	movs	r2, #0
 800450e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004510:	4b1f      	ldr	r3, [pc, #124]	; (8004590 <MX_SPI2_Init+0xa4>)
 8004512:	2200      	movs	r2, #0
 8004514:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004516:	4b1e      	ldr	r3, [pc, #120]	; (8004590 <MX_SPI2_Init+0xa4>)
 8004518:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800451c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800451e:	4b1c      	ldr	r3, [pc, #112]	; (8004590 <MX_SPI2_Init+0xa4>)
 8004520:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8004524:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004526:	4b1a      	ldr	r3, [pc, #104]	; (8004590 <MX_SPI2_Init+0xa4>)
 8004528:	2200      	movs	r2, #0
 800452a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800452c:	4b18      	ldr	r3, [pc, #96]	; (8004590 <MX_SPI2_Init+0xa4>)
 800452e:	2200      	movs	r2, #0
 8004530:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004532:	4b17      	ldr	r3, [pc, #92]	; (8004590 <MX_SPI2_Init+0xa4>)
 8004534:	2200      	movs	r2, #0
 8004536:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004538:	4b15      	ldr	r3, [pc, #84]	; (8004590 <MX_SPI2_Init+0xa4>)
 800453a:	2200      	movs	r2, #0
 800453c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800453e:	4b14      	ldr	r3, [pc, #80]	; (8004590 <MX_SPI2_Init+0xa4>)
 8004540:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004544:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004546:	4b12      	ldr	r3, [pc, #72]	; (8004590 <MX_SPI2_Init+0xa4>)
 8004548:	2200      	movs	r2, #0
 800454a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <MX_SPI2_Init+0xa4>)
 800454e:	2200      	movs	r2, #0
 8004550:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004552:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <MX_SPI2_Init+0xa4>)
 8004554:	2200      	movs	r2, #0
 8004556:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004558:	4b0d      	ldr	r3, [pc, #52]	; (8004590 <MX_SPI2_Init+0xa4>)
 800455a:	2200      	movs	r2, #0
 800455c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800455e:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <MX_SPI2_Init+0xa4>)
 8004560:	2200      	movs	r2, #0
 8004562:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004564:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <MX_SPI2_Init+0xa4>)
 8004566:	2200      	movs	r2, #0
 8004568:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800456a:	4b09      	ldr	r3, [pc, #36]	; (8004590 <MX_SPI2_Init+0xa4>)
 800456c:	2200      	movs	r2, #0
 800456e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <MX_SPI2_Init+0xa4>)
 8004572:	2200      	movs	r2, #0
 8004574:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004576:	4b06      	ldr	r3, [pc, #24]	; (8004590 <MX_SPI2_Init+0xa4>)
 8004578:	2200      	movs	r2, #0
 800457a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800457c:	4804      	ldr	r0, [pc, #16]	; (8004590 <MX_SPI2_Init+0xa4>)
 800457e:	f004 fd1f 	bl	8008fc0 <HAL_SPI_Init>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8004588:	f7fe ffee 	bl	8003568 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
<<<<<<< Updated upstream
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	24000380 	.word	0x24000380
 8001ef0:	40003800 	.word	0x40003800

08001ef4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b0ba      	sub	sp, #232	; 0xe8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f0c:	f107 0318 	add.w	r3, r7, #24
 8001f10:	22bc      	movs	r2, #188	; 0xbc
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f00a ffd5 	bl	800cec4 <memset>
  if(spiHandle->Instance==SPI1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a49      	ldr	r2, [pc, #292]	; (8002044 <HAL_SPI_MspInit+0x150>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d142      	bne.n	8001faa <HAL_SPI_MspInit+0xb6>
=======
 800458c:	bf00      	nop
 800458e:	bd80      	pop	{r7, pc}
 8004590:	240007ac 	.word	0x240007ac
 8004594:	40003800 	.word	0x40003800

08004598 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800459c:	4b27      	ldr	r3, [pc, #156]	; (800463c <MX_SPI3_Init+0xa4>)
 800459e:	4a28      	ldr	r2, [pc, #160]	; (8004640 <MX_SPI3_Init+0xa8>)
 80045a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80045a2:	4b26      	ldr	r3, [pc, #152]	; (800463c <MX_SPI3_Init+0xa4>)
 80045a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80045a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80045aa:	4b24      	ldr	r3, [pc, #144]	; (800463c <MX_SPI3_Init+0xa4>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80045b0:	4b22      	ldr	r3, [pc, #136]	; (800463c <MX_SPI3_Init+0xa4>)
 80045b2:	2207      	movs	r2, #7
 80045b4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045b6:	4b21      	ldr	r3, [pc, #132]	; (800463c <MX_SPI3_Init+0xa4>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045bc:	4b1f      	ldr	r3, [pc, #124]	; (800463c <MX_SPI3_Init+0xa4>)
 80045be:	2200      	movs	r2, #0
 80045c0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80045c2:	4b1e      	ldr	r3, [pc, #120]	; (800463c <MX_SPI3_Init+0xa4>)
 80045c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80045c8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80045ca:	4b1c      	ldr	r3, [pc, #112]	; (800463c <MX_SPI3_Init+0xa4>)
 80045cc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80045d0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045d2:	4b1a      	ldr	r3, [pc, #104]	; (800463c <MX_SPI3_Init+0xa4>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80045d8:	4b18      	ldr	r3, [pc, #96]	; (800463c <MX_SPI3_Init+0xa4>)
 80045da:	2200      	movs	r2, #0
 80045dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045de:	4b17      	ldr	r3, [pc, #92]	; (800463c <MX_SPI3_Init+0xa4>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80045e4:	4b15      	ldr	r3, [pc, #84]	; (800463c <MX_SPI3_Init+0xa4>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80045ea:	4b14      	ldr	r3, [pc, #80]	; (800463c <MX_SPI3_Init+0xa4>)
 80045ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045f0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80045f2:	4b12      	ldr	r3, [pc, #72]	; (800463c <MX_SPI3_Init+0xa4>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80045f8:	4b10      	ldr	r3, [pc, #64]	; (800463c <MX_SPI3_Init+0xa4>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80045fe:	4b0f      	ldr	r3, [pc, #60]	; (800463c <MX_SPI3_Init+0xa4>)
 8004600:	2200      	movs	r2, #0
 8004602:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004604:	4b0d      	ldr	r3, [pc, #52]	; (800463c <MX_SPI3_Init+0xa4>)
 8004606:	2200      	movs	r2, #0
 8004608:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800460a:	4b0c      	ldr	r3, [pc, #48]	; (800463c <MX_SPI3_Init+0xa4>)
 800460c:	2200      	movs	r2, #0
 800460e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <MX_SPI3_Init+0xa4>)
 8004612:	2200      	movs	r2, #0
 8004614:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004616:	4b09      	ldr	r3, [pc, #36]	; (800463c <MX_SPI3_Init+0xa4>)
 8004618:	2200      	movs	r2, #0
 800461a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800461c:	4b07      	ldr	r3, [pc, #28]	; (800463c <MX_SPI3_Init+0xa4>)
 800461e:	2200      	movs	r2, #0
 8004620:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <MX_SPI3_Init+0xa4>)
 8004624:	2200      	movs	r2, #0
 8004626:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004628:	4804      	ldr	r0, [pc, #16]	; (800463c <MX_SPI3_Init+0xa4>)
 800462a:	f004 fcc9 	bl	8008fc0 <HAL_SPI_Init>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8004634:	f7fe ff98 	bl	8003568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004638:	bf00      	nop
 800463a:	bd80      	pop	{r7, pc}
 800463c:	24000834 	.word	0x24000834
 8004640:	40003c00 	.word	0x40003c00

08004644 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b0bc      	sub	sp, #240	; 0xf0
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800464c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	609a      	str	r2, [r3, #8]
 8004658:	60da      	str	r2, [r3, #12]
 800465a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800465c:	f107 0320 	add.w	r3, r7, #32
 8004660:	22bc      	movs	r2, #188	; 0xbc
 8004662:	2100      	movs	r1, #0
 8004664:	4618      	mov	r0, r3
 8004666:	f00b f900 	bl	800f86a <memset>
  if(spiHandle->Instance==SPI1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a6d      	ldr	r2, [pc, #436]	; (8004824 <HAL_SPI_MspInit+0x1e0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d142      	bne.n	80046fa <HAL_SPI_MspInit+0xb6>
>>>>>>> Stashed changes

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
<<<<<<< Updated upstream
 8001f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f28:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2e:	f107 0318 	add.w	r3, r7, #24
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 fafa 	bl	800452c <HAL_RCCEx_PeriphCLKConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001f3e:	f7ff f8ff 	bl	8001140 <Error_Handler>
=======
 8004674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004678:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800467a:	2300      	movs	r3, #0
 800467c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800467e:	f107 0320 	add.w	r3, r7, #32
 8004682:	4618      	mov	r0, r3
 8004684:	f003 f934 	bl	80078f0 <HAL_RCCEx_PeriphCLKConfig>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800468e:	f7fe ff6b 	bl	8003568 <Error_Handler>
>>>>>>> Stashed changes
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< Updated upstream
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <HAL_SPI_MspInit+0x154>)
 8001f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f48:	4a3f      	ldr	r2, [pc, #252]	; (8002048 <HAL_SPI_MspInit+0x154>)
 8001f4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f52:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <HAL_SPI_MspInit+0x154>)
 8001f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f60:	4b39      	ldr	r3, [pc, #228]	; (8002048 <HAL_SPI_MspInit+0x154>)
 8001f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f66:	4a38      	ldr	r2, [pc, #224]	; (8002048 <HAL_SPI_MspInit+0x154>)
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f70:	4b35      	ldr	r3, [pc, #212]	; (8002048 <HAL_SPI_MspInit+0x154>)
 8001f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
=======
 8004692:	4b65      	ldr	r3, [pc, #404]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 8004694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004698:	4a63      	ldr	r2, [pc, #396]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 800469a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800469e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80046a2:	4b61      	ldr	r3, [pc, #388]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 80046a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b0:	4b5d      	ldr	r3, [pc, #372]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 80046b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046b6:	4a5c      	ldr	r2, [pc, #368]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 80046b8:	f043 0302 	orr.w	r3, r3, #2
 80046bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046c0:	4b59      	ldr	r3, [pc, #356]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 80046c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	61bb      	str	r3, [r7, #24]
 80046cc:	69bb      	ldr	r3, [r7, #24]
>>>>>>> Stashed changes
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
<<<<<<< Updated upstream
 8001f7e:	2338      	movs	r3, #56	; 0x38
 8001f80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f96:	2305      	movs	r3, #5
 8001f98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	482a      	ldr	r0, [pc, #168]	; (800204c <HAL_SPI_MspInit+0x158>)
 8001fa4:	f001 f8b6 	bl	8003114 <HAL_GPIO_Init>
=======
 80046ce:	2338      	movs	r3, #56	; 0x38
 80046d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d4:	2302      	movs	r3, #2
 80046d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046da:	2300      	movs	r3, #0
 80046dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e0:	2300      	movs	r3, #0
 80046e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80046e6:	2305      	movs	r3, #5
 80046e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80046f0:	4619      	mov	r1, r3
 80046f2:	484e      	ldr	r0, [pc, #312]	; (800482c <HAL_SPI_MspInit+0x1e8>)
 80046f4:	f001 fef0 	bl	80064d8 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 8001fa8:	e047      	b.n	800203a <HAL_SPI_MspInit+0x146>
  else if(spiHandle->Instance==SPI2)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a28      	ldr	r2, [pc, #160]	; (8002050 <HAL_SPI_MspInit+0x15c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d142      	bne.n	800203a <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fbe:	f107 0318 	add.w	r3, r7, #24
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f002 fab2 	bl	800452c <HAL_RCCEx_PeriphCLKConfig>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8001fce:	f7ff f8b7 	bl	8001140 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_SPI_MspInit+0x154>)
 8001fd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fd8:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <HAL_SPI_MspInit+0x154>)
 8001fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fe2:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_SPI_MspInit+0x154>)
 8001fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff0:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_SPI_MspInit+0x154>)
 8001ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff6:	4a14      	ldr	r2, [pc, #80]	; (8002048 <HAL_SPI_MspInit+0x154>)
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_SPI_MspInit+0x154>)
 8002002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800200e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002012:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002028:	2305      	movs	r3, #5
 800202a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002032:	4619      	mov	r1, r3
 8002034:	4805      	ldr	r0, [pc, #20]	; (800204c <HAL_SPI_MspInit+0x158>)
 8002036:	f001 f86d 	bl	8003114 <HAL_GPIO_Init>
}
 800203a:	bf00      	nop
 800203c:	37e8      	adds	r7, #232	; 0xe8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40013000 	.word	0x40013000
 8002048:	58024400 	.word	0x58024400
 800204c:	58020400 	.word	0x58020400
 8002050:	40003800 	.word	0x40003800

08002054 <mpu9250_write_reg>:
=======
 80046f8:	e090      	b.n	800481c <HAL_SPI_MspInit+0x1d8>
  else if(spiHandle->Instance==SPI2)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a4c      	ldr	r2, [pc, #304]	; (8004830 <HAL_SPI_MspInit+0x1ec>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d143      	bne.n	800478c <HAL_SPI_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8004704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004708:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800470a:	2300      	movs	r3, #0
 800470c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800470e:	f107 0320 	add.w	r3, r7, #32
 8004712:	4618      	mov	r0, r3
 8004714:	f003 f8ec 	bl	80078f0 <HAL_RCCEx_PeriphCLKConfig>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_SPI_MspInit+0xde>
      Error_Handler();
 800471e:	f7fe ff23 	bl	8003568 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004722:	4b41      	ldr	r3, [pc, #260]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 8004724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004728:	4a3f      	ldr	r2, [pc, #252]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 800472a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800472e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004732:	4b3d      	ldr	r3, [pc, #244]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 8004734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004740:	4b39      	ldr	r3, [pc, #228]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 8004742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004746:	4a38      	ldr	r2, [pc, #224]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 8004748:	f043 0302 	orr.w	r3, r3, #2
 800474c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004750:	4b35      	ldr	r3, [pc, #212]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 8004752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800475e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004762:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004766:	2302      	movs	r3, #2
 8004768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476c:	2300      	movs	r3, #0
 800476e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004772:	2300      	movs	r3, #0
 8004774:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004778:	2305      	movs	r3, #5
 800477a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800477e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004782:	4619      	mov	r1, r3
 8004784:	4829      	ldr	r0, [pc, #164]	; (800482c <HAL_SPI_MspInit+0x1e8>)
 8004786:	f001 fea7 	bl	80064d8 <HAL_GPIO_Init>
}
 800478a:	e047      	b.n	800481c <HAL_SPI_MspInit+0x1d8>
  else if(spiHandle->Instance==SPI3)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a28      	ldr	r2, [pc, #160]	; (8004834 <HAL_SPI_MspInit+0x1f0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d142      	bne.n	800481c <HAL_SPI_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800479a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800479c:	2300      	movs	r3, #0
 800479e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047a0:	f107 0320 	add.w	r3, r7, #32
 80047a4:	4618      	mov	r0, r3
 80047a6:	f003 f8a3 	bl	80078f0 <HAL_RCCEx_PeriphCLKConfig>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_SPI_MspInit+0x170>
      Error_Handler();
 80047b0:	f7fe feda 	bl	8003568 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80047b4:	4b1c      	ldr	r3, [pc, #112]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 80047b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047ba:	4a1b      	ldr	r2, [pc, #108]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 80047bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80047c4:	4b18      	ldr	r3, [pc, #96]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 80047c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047d2:	4b15      	ldr	r3, [pc, #84]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 80047d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047d8:	4a13      	ldr	r2, [pc, #76]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 80047da:	f043 0304 	orr.w	r3, r3, #4
 80047de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047e2:	4b11      	ldr	r3, [pc, #68]	; (8004828 <HAL_SPI_MspInit+0x1e4>)
 80047e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80047f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80047f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f8:	2302      	movs	r3, #2
 80047fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004804:	2300      	movs	r3, #0
 8004806:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800480a:	2306      	movs	r3, #6
 800480c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004810:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004814:	4619      	mov	r1, r3
 8004816:	4808      	ldr	r0, [pc, #32]	; (8004838 <HAL_SPI_MspInit+0x1f4>)
 8004818:	f001 fe5e 	bl	80064d8 <HAL_GPIO_Init>
}
 800481c:	bf00      	nop
 800481e:	37f0      	adds	r7, #240	; 0xf0
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40013000 	.word	0x40013000
 8004828:	58024400 	.word	0x58024400
 800482c:	58020400 	.word	0x58020400
 8004830:	40003800 	.word	0x40003800
 8004834:	40003c00 	.word	0x40003c00
 8004838:	58020800 	.word	0x58020800

0800483c <mpu9250_write_reg>:
>>>>>>> Stashed changes
  }
}

/* USER CODE BEGIN 1 */
void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
<<<<<<< Updated upstream
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	460a      	mov	r2, r1
 800205e:	71fb      	strb	r3, [r7, #7]
 8002060:	4613      	mov	r3, r2
 8002062:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8002064:	2200      	movs	r2, #0
 8002066:	2110      	movs	r1, #16
 8002068:	480b      	ldr	r0, [pc, #44]	; (8002098 <mpu9250_write_reg+0x44>)
 800206a:	f001 fa03 	bl	8003474 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 800206e:	1df9      	adds	r1, r7, #7
 8002070:	2364      	movs	r3, #100	; 0x64
 8002072:	2201      	movs	r2, #1
 8002074:	4809      	ldr	r0, [pc, #36]	; (800209c <mpu9250_write_reg+0x48>)
 8002076:	f003 fec7 	bl	8005e08 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 800207a:	1db9      	adds	r1, r7, #6
 800207c:	2364      	movs	r3, #100	; 0x64
 800207e:	2201      	movs	r2, #1
 8002080:	4806      	ldr	r0, [pc, #24]	; (800209c <mpu9250_write_reg+0x48>)
 8002082:	f003 fec1 	bl	8005e08 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8002086:	2201      	movs	r2, #1
 8002088:	2110      	movs	r1, #16
 800208a:	4803      	ldr	r0, [pc, #12]	; (8002098 <mpu9250_write_reg+0x44>)
 800208c:	f001 f9f2 	bl	8003474 <HAL_GPIO_WritePin>
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	58020000 	.word	0x58020000
 800209c:	240002f8 	.word	0x240002f8

080020a0 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	71fb      	strb	r3, [r7, #7]
 80020ac:	4613      	mov	r3, r2
 80020ae:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2110      	movs	r1, #16
 80020be:	480d      	ldr	r0, [pc, #52]	; (80020f4 <mpu9250_read_reg+0x54>)
 80020c0:	f001 f9d8 	bl	8003474 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 80020c4:	f107 010f 	add.w	r1, r7, #15
 80020c8:	2364      	movs	r3, #100	; 0x64
 80020ca:	2201      	movs	r2, #1
 80020cc:	480a      	ldr	r0, [pc, #40]	; (80020f8 <mpu9250_read_reg+0x58>)
 80020ce:	f003 fe9b 	bl	8005e08 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, len, 100);
 80020d2:	79bb      	ldrb	r3, [r7, #6]
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	2364      	movs	r3, #100	; 0x64
 80020d8:	6839      	ldr	r1, [r7, #0]
 80020da:	4807      	ldr	r0, [pc, #28]	; (80020f8 <mpu9250_read_reg+0x58>)
 80020dc:	f004 f886 	bl	80061ec <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80020e0:	2201      	movs	r2, #1
 80020e2:	2110      	movs	r1, #16
 80020e4:	4803      	ldr	r0, [pc, #12]	; (80020f4 <mpu9250_read_reg+0x54>)
 80020e6:	f001 f9c5 	bl	8003474 <HAL_GPIO_WritePin>
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	58020000 	.word	0x58020000
 80020f8:	240002f8 	.word	0x240002f8

080020fc <initStanley>:
=======
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	460a      	mov	r2, r1
 8004846:	71fb      	strb	r3, [r7, #7]
 8004848:	4613      	mov	r3, r2
 800484a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800484c:	2200      	movs	r2, #0
 800484e:	2110      	movs	r1, #16
 8004850:	480b      	ldr	r0, [pc, #44]	; (8004880 <mpu9250_write_reg+0x44>)
 8004852:	f001 fff1 	bl	8006838 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8004856:	1df9      	adds	r1, r7, #7
 8004858:	2364      	movs	r3, #100	; 0x64
 800485a:	2201      	movs	r2, #1
 800485c:	4809      	ldr	r0, [pc, #36]	; (8004884 <mpu9250_write_reg+0x48>)
 800485e:	f004 fcb5 	bl	80091cc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8004862:	1db9      	adds	r1, r7, #6
 8004864:	2364      	movs	r3, #100	; 0x64
 8004866:	2201      	movs	r2, #1
 8004868:	4806      	ldr	r0, [pc, #24]	; (8004884 <mpu9250_write_reg+0x48>)
 800486a:	f004 fcaf 	bl	80091cc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800486e:	2201      	movs	r2, #1
 8004870:	2110      	movs	r1, #16
 8004872:	4803      	ldr	r0, [pc, #12]	; (8004880 <mpu9250_write_reg+0x44>)
 8004874:	f001 ffe0 	bl	8006838 <HAL_GPIO_WritePin>
}
 8004878:	bf00      	nop
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	58020000 	.word	0x58020000
 8004884:	24000724 	.word	0x24000724

08004888 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	6039      	str	r1, [r7, #0]
 8004892:	71fb      	strb	r3, [r7, #7]
 8004894:	4613      	mov	r3, r2
 8004896:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80048a2:	2200      	movs	r2, #0
 80048a4:	2110      	movs	r1, #16
 80048a6:	480d      	ldr	r0, [pc, #52]	; (80048dc <mpu9250_read_reg+0x54>)
 80048a8:	f001 ffc6 	bl	8006838 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 80048ac:	f107 010f 	add.w	r1, r7, #15
 80048b0:	2364      	movs	r3, #100	; 0x64
 80048b2:	2201      	movs	r2, #1
 80048b4:	480a      	ldr	r0, [pc, #40]	; (80048e0 <mpu9250_read_reg+0x58>)
 80048b6:	f004 fc89 	bl	80091cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, len, 100);
 80048ba:	79bb      	ldrb	r3, [r7, #6]
 80048bc:	b29a      	uxth	r2, r3
 80048be:	2364      	movs	r3, #100	; 0x64
 80048c0:	6839      	ldr	r1, [r7, #0]
 80048c2:	4807      	ldr	r0, [pc, #28]	; (80048e0 <mpu9250_read_reg+0x58>)
 80048c4:	f004 fe74 	bl	80095b0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80048c8:	2201      	movs	r2, #1
 80048ca:	2110      	movs	r1, #16
 80048cc:	4803      	ldr	r0, [pc, #12]	; (80048dc <mpu9250_read_reg+0x54>)
 80048ce:	f001 ffb3 	bl	8006838 <HAL_GPIO_WritePin>
}
 80048d2:	bf00      	nop
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	58020000 	.word	0x58020000
 80048e0:	24000724 	.word	0x24000724

080048e4 <initStanley>:
>>>>>>> Stashed changes
 * */

#include "stanley_controller.h"

void initStanley(struct Stanley * stanley, float *delta_sat, float k, float k_soft)
{
<<<<<<< Updated upstream
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	ed87 0a01 	vstr	s0, [r7, #4]
 800210a:	edc7 0a00 	vstr	s1, [r7]
    stanley->sat[0] = delta_sat[0];
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	601a      	str	r2, [r3, #0]
    stanley->sat[1] = delta_sat[1];
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	605a      	str	r2, [r3, #4]
    stanley->psi = 0;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
    stanley->k = k;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	611a      	str	r2, [r3, #16]
    stanley->k_soft = k_soft;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	615a      	str	r2, [r3, #20]
}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <calculateCrosstrackError>:

void calculateCrosstrackError(struct Stanley * stanley, struct Point * vehicle_pos, struct Point * p1, struct Point * p2){
 8002140:	b580      	push	{r7, lr}
 8002142:	ed2d 8b04 	vpush	{d8-d9}
 8002146:	b08c      	sub	sp, #48	; 0x30
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
=======
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80048f2:	edc7 0a00 	vstr	s1, [r7]
    stanley->sat[0] = delta_sat[0];
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	601a      	str	r2, [r3, #0]
    stanley->sat[1] = delta_sat[1];
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	605a      	str	r2, [r3, #4]
    stanley->psi = 0;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	60da      	str	r2, [r3, #12]
    stanley->k = k;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	611a      	str	r2, [r3, #16]
    stanley->k_soft = k_soft;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	615a      	str	r2, [r3, #20]
}
 800491a:	bf00      	nop
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <calculateCrosstrackError>:

void calculateCrosstrackError(struct Stanley * stanley, struct Point * vehicle_pos, struct Point * p1, struct Point * p2){
 8004928:	b580      	push	{r7, lr}
 800492a:	ed2d 8b04 	vpush	{d8-d9}
 800492e:	b08c      	sub	sp, #48	; 0x30
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
    float b;
    float c;
    float xp;
    float yp;

    float ex = p2->x - p1->x;
<<<<<<< Updated upstream
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	ed93 7a00 	vldr	s14, [r3]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002162:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float ey = p2->y - p1->y;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	ed93 7a01 	vldr	s14, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002176:	edc7 7a08 	vstr	s15, [r7, #32]

    // Angle of path frame
    stanley->ak = atan2(ey,ex);
 800217a:	edd7 7a08 	vldr	s15, [r7, #32]
 800217e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002182:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002186:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800218a:	eeb0 1b46 	vmov.f64	d1, d6
 800218e:	eeb0 0b47 	vmov.f64	d0, d7
 8002192:	f00c fd25 	bl	800ebe0 <atan2>
 8002196:	eeb0 7b40 	vmov.f64	d7, d0
 800219a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    if(isnormal(ex) && isnormal(ey)){
 80021a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021a8:	eef0 7ae7 	vabs.f32	s15, s15
 80021ac:	ed9f 7abd 	vldr	s14, [pc, #756]	; 80024a4 <calculateCrosstrackError+0x364>
 80021b0:	eef4 7a47 	vcmp.f32	s15, s14
 80021b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b8:	bf8c      	ite	hi
 80021ba:	2301      	movhi	r3, #1
 80021bc:	2300      	movls	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f083 0301 	eor.w	r3, r3, #1
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021d0:	eef0 7ae7 	vabs.f32	s15, s15
 80021d4:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 80024a8 <calculateCrosstrackError+0x368>
 80021d8:	eef4 7a47 	vcmp.f32	s15, s14
 80021dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e0:	bfb4      	ite	lt
 80021e2:	2301      	movlt	r3, #1
 80021e4:	2300      	movge	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f083 0301 	eor.w	r3, r3, #1
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	4013      	ands	r3, r2
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d074      	beq.n	80022e6 <calculateCrosstrackError+0x1a6>
 80021fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8002200:	eef0 7ae7 	vabs.f32	s15, s15
 8002204:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80024a4 <calculateCrosstrackError+0x364>
 8002208:	eef4 7a47 	vcmp.f32	s15, s14
 800220c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002210:	bf8c      	ite	hi
 8002212:	2301      	movhi	r3, #1
 8002214:	2300      	movls	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	f083 0301 	eor.w	r3, r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	b2da      	uxtb	r2, r3
 8002224:	edd7 7a08 	vldr	s15, [r7, #32]
 8002228:	eef0 7ae7 	vabs.f32	s15, s15
 800222c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80024a8 <calculateCrosstrackError+0x368>
 8002230:	eef4 7a47 	vcmp.f32	s15, s14
 8002234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002238:	bfb4      	ite	lt
 800223a:	2301      	movlt	r3, #1
 800223c:	2300      	movge	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f083 0301 	eor.w	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	b2db      	uxtb	r3, r3
 800224c:	4013      	ands	r3, r2
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d048      	beq.n	80022e6 <calculateCrosstrackError+0x1a6>
        // Slope of path
        m1 = ex/ey;
 8002254:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002258:	ed97 7a08 	vldr	s14, [r7, #32]
 800225c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002260:	edc7 7a07 	vstr	s15, [r7, #28]
        b = p2->x - m1*p2->y;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	ed93 7a00 	vldr	s14, [r3]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002270:	edd7 7a07 	vldr	s15, [r7, #28]
 8002274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227c:	edc7 7a06 	vstr	s15, [r7, #24]

        // Slope of normal line to the path
        m2 = -1/m1;
 8002280:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8002284:	ed97 7a07 	vldr	s14, [r7, #28]
 8002288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800228c:	edc7 7a05 	vstr	s15, [r7, #20]
        c = vehicle_pos->x - m2*vehicle_pos->y;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	ed93 7a00 	vldr	s14, [r3]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	edd3 6a01 	vldr	s13, [r3, #4]
 800229c:	edd7 7a05 	vldr	s15, [r7, #20]
 80022a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a8:	edc7 7a04 	vstr	s15, [r7, #16]

        // Obtain intersection point
        yp = (c - b)/(m1 - m2);
 80022ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80022b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80022b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80022bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80022c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022c8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        xp = m1*yp + b;
 80022cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80022d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80022d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d8:	ed97 7a06 	vldr	s14, [r7, #24]
 80022dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80022e4:	e06f      	b.n	80023c6 <calculateCrosstrackError+0x286>

    } else {
        if(!isnormal(ex)){
 80022e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80022ea:	eef0 7ae7 	vabs.f32	s15, s15
 80022ee:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80024a4 <calculateCrosstrackError+0x364>
 80022f2:	eef4 7a47 	vcmp.f32	s15, s14
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	bf8c      	ite	hi
 80022fc:	2301      	movhi	r3, #1
 80022fe:	2300      	movls	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f083 0301 	eor.w	r3, r3, #1
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f083 0301 	eor.w	r3, r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002318:	eef0 7ae7 	vabs.f32	s15, s15
 800231c:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80024a8 <calculateCrosstrackError+0x368>
 8002320:	eef4 7a47 	vcmp.f32	s15, s14
 8002324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002328:	bfb4      	ite	lt
 800232a:	2301      	movlt	r3, #1
 800232c:	2300      	movge	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	f083 0301 	eor.w	r3, r3, #1
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f083 0301 	eor.w	r3, r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	4313      	orrs	r3, r2
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <calculateCrosstrackError+0x216>
            yp = vehicle_pos->y;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
            xp = p2->x; // or x1
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        if(!isnormal(ey)){
 8002356:	edd7 7a08 	vldr	s15, [r7, #32]
 800235a:	eef0 7ae7 	vabs.f32	s15, s15
 800235e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80024a4 <calculateCrosstrackError+0x364>
 8002362:	eef4 7a47 	vcmp.f32	s15, s14
 8002366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236a:	bf8c      	ite	hi
 800236c:	2301      	movhi	r3, #1
 800236e:	2300      	movls	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f083 0301 	eor.w	r3, r3, #1
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f083 0301 	eor.w	r3, r3, #1
 8002382:	b2da      	uxtb	r2, r3
 8002384:	edd7 7a08 	vldr	s15, [r7, #32]
 8002388:	eef0 7ae7 	vabs.f32	s15, s15
 800238c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80024a8 <calculateCrosstrackError+0x368>
 8002390:	eef4 7a47 	vcmp.f32	s15, s14
 8002394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002398:	bfb4      	ite	lt
 800239a:	2301      	movlt	r3, #1
 800239c:	2300      	movge	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f083 0301 	eor.w	r3, r3, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f083 0301 	eor.w	r3, r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	4313      	orrs	r3, r2
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <calculateCrosstrackError+0x286>
            yp = p2->y; // or y1
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
            xp = vehicle_pos->x;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	ed93 7a00 	vldr	s14, [r3]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	edd3 7a00 	vldr	s15, [r3]
 8004946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800494a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float ey = p2->y - p1->y;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	ed93 7a01 	vldr	s14, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	edd3 7a01 	vldr	s15, [r3, #4]
 800495a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800495e:	edc7 7a08 	vstr	s15, [r7, #32]

    // Angle of path frame
    stanley->ak = atan2(ey,ex);
 8004962:	edd7 7a08 	vldr	s15, [r7, #32]
 8004966:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800496a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800496e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8004972:	eeb0 1b46 	vmov.f64	d1, d6
 8004976:	eeb0 0b47 	vmov.f64	d0, d7
 800497a:	f00d fe45 	bl	8012608 <atan2>
 800497e:	eeb0 7b40 	vmov.f64	d7, d0
 8004982:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    if(isnormal(ex) && isnormal(ey)){
 800498c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004990:	eef0 7ae7 	vabs.f32	s15, s15
 8004994:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8004c8c <calculateCrosstrackError+0x364>
 8004998:	eef4 7a47 	vcmp.f32	s15, s14
 800499c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a0:	bf8c      	ite	hi
 80049a2:	2301      	movhi	r3, #1
 80049a4:	2300      	movls	r3, #0
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f083 0301 	eor.w	r3, r3, #1
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80049b8:	eef0 7ae7 	vabs.f32	s15, s15
 80049bc:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8004c90 <calculateCrosstrackError+0x368>
 80049c0:	eef4 7a47 	vcmp.f32	s15, s14
 80049c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c8:	bfb4      	ite	lt
 80049ca:	2301      	movlt	r3, #1
 80049cc:	2300      	movge	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	f083 0301 	eor.w	r3, r3, #1
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	4013      	ands	r3, r2
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d074      	beq.n	8004ace <calculateCrosstrackError+0x1a6>
 80049e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80049e8:	eef0 7ae7 	vabs.f32	s15, s15
 80049ec:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8004c8c <calculateCrosstrackError+0x364>
 80049f0:	eef4 7a47 	vcmp.f32	s15, s14
 80049f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f8:	bf8c      	ite	hi
 80049fa:	2301      	movhi	r3, #1
 80049fc:	2300      	movls	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	f083 0301 	eor.w	r3, r3, #1
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004a10:	eef0 7ae7 	vabs.f32	s15, s15
 8004a14:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8004c90 <calculateCrosstrackError+0x368>
 8004a18:	eef4 7a47 	vcmp.f32	s15, s14
 8004a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a20:	bfb4      	ite	lt
 8004a22:	2301      	movlt	r3, #1
 8004a24:	2300      	movge	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	f083 0301 	eor.w	r3, r3, #1
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	4013      	ands	r3, r2
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d048      	beq.n	8004ace <calculateCrosstrackError+0x1a6>
        // Slope of path
        m1 = ex/ey;
 8004a3c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004a40:	ed97 7a08 	vldr	s14, [r7, #32]
 8004a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a48:	edc7 7a07 	vstr	s15, [r7, #28]
        b = p2->x - m1*p2->y;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	ed93 7a00 	vldr	s14, [r3]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a58:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a64:	edc7 7a06 	vstr	s15, [r7, #24]

        // Slope of normal line to the path
        m2 = -1/m1;
 8004a68:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8004a6c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a74:	edc7 7a05 	vstr	s15, [r7, #20]
        c = vehicle_pos->x - m2*vehicle_pos->y;
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	ed93 7a00 	vldr	s14, [r3]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a84:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a90:	edc7 7a04 	vstr	s15, [r7, #16]

        // Obtain intersection point
        yp = (c - b)/(m1 - m2);
 8004a94:	ed97 7a04 	vldr	s14, [r7, #16]
 8004a98:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a9c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004aa0:	ed97 7a07 	vldr	s14, [r7, #28]
 8004aa4:	edd7 7a05 	vldr	s15, [r7, #20]
 8004aa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ab0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        xp = m1*yp + b;
 8004ab4:	ed97 7a07 	vldr	s14, [r7, #28]
 8004ab8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac0:	ed97 7a06 	vldr	s14, [r7, #24]
 8004ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ac8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8004acc:	e06f      	b.n	8004bae <calculateCrosstrackError+0x286>

    } else {
        if(!isnormal(ex)){
 8004ace:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004ad2:	eef0 7ae7 	vabs.f32	s15, s15
 8004ad6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004c8c <calculateCrosstrackError+0x364>
 8004ada:	eef4 7a47 	vcmp.f32	s15, s14
 8004ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae2:	bf8c      	ite	hi
 8004ae4:	2301      	movhi	r3, #1
 8004ae6:	2300      	movls	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	f083 0301 	eor.w	r3, r3, #1
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	f083 0301 	eor.w	r3, r3, #1
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004b00:	eef0 7ae7 	vabs.f32	s15, s15
 8004b04:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8004c90 <calculateCrosstrackError+0x368>
 8004b08:	eef4 7a47 	vcmp.f32	s15, s14
 8004b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b10:	bfb4      	ite	lt
 8004b12:	2301      	movlt	r3, #1
 8004b14:	2300      	movge	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	f083 0301 	eor.w	r3, r3, #1
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	f083 0301 	eor.w	r3, r3, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <calculateCrosstrackError+0x216>
            yp = vehicle_pos->y;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	62bb      	str	r3, [r7, #40]	; 0x28
            xp = p2->x; // or x1
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        if(!isnormal(ey)){
 8004b3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b42:	eef0 7ae7 	vabs.f32	s15, s15
 8004b46:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8004c8c <calculateCrosstrackError+0x364>
 8004b4a:	eef4 7a47 	vcmp.f32	s15, s14
 8004b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b52:	bf8c      	ite	hi
 8004b54:	2301      	movhi	r3, #1
 8004b56:	2300      	movls	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	f083 0301 	eor.w	r3, r3, #1
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f083 0301 	eor.w	r3, r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b70:	eef0 7ae7 	vabs.f32	s15, s15
 8004b74:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004c90 <calculateCrosstrackError+0x368>
 8004b78:	eef4 7a47 	vcmp.f32	s15, s14
 8004b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b80:	bfb4      	ite	lt
 8004b82:	2301      	movlt	r3, #1
 8004b84:	2300      	movge	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f083 0301 	eor.w	r3, r3, #1
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	f083 0301 	eor.w	r3, r3, #1
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d005      	beq.n	8004bae <calculateCrosstrackError+0x286>
            yp = p2->y; // or y1
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	62bb      	str	r3, [r7, #40]	; 0x28
            xp = vehicle_pos->x;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> Stashed changes
        }
    }

    // Along-track and crosstrack errors in path frame
    stanley->e_a = (p2->x - xp) * cos(stanley->ak) + (p2->y - yp) * sin(stanley->ak); // along-track error
<<<<<<< Updated upstream
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	ed93 7a00 	vldr	s14, [r3]
 80023cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023d4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80023de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023e2:	eeb0 0b47 	vmov.f64	d0, d7
 80023e6:	f00c fbff 	bl	800ebe8 <cos>
 80023ea:	eeb0 7b40 	vmov.f64	d7, d0
 80023ee:	ee28 8b07 	vmul.f64	d8, d8, d7
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80023f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80023fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002400:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800240a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800240e:	eeb0 0b47 	vmov.f64	d0, d7
 8002412:	f00c fc35 	bl	800ec80 <sin>
 8002416:	eeb0 7b40 	vmov.f64	d7, d0
 800241a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800241e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002422:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	edc3 7a06 	vstr	s15, [r3, #24]
    stanley->e_c = -(vehicle_pos->x - xp) * sin(stanley->ak) + (vehicle_pos->y - yp) * cos(stanley->ak); // crosstrack error
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	ed93 7a00 	vldr	s14, [r3]
 8002432:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002436:	ee77 7a67 	vsub.f32	s15, s14, s15
 800243a:	eef1 7a67 	vneg.f32	s15, s15
 800243e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002448:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800244c:	eeb0 0b47 	vmov.f64	d0, d7
 8002450:	f00c fc16 	bl	800ec80 <sin>
 8002454:	eeb0 7b40 	vmov.f64	d7, d0
 8002458:	ee28 8b07 	vmul.f64	d8, d8, d7
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002462:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002466:	ee77 7a67 	vsub.f32	s15, s14, s15
 800246a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002474:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002478:	eeb0 0b47 	vmov.f64	d0, d7
 800247c:	f00c fbb4 	bl	800ebe8 <cos>
 8002480:	eeb0 7b40 	vmov.f64	d7, d0
 8002484:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002488:	ee38 7b07 	vadd.f64	d7, d8, d7
 800248c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8002496:	bf00      	nop
 8002498:	3730      	adds	r7, #48	; 0x30
 800249a:	46bd      	mov	sp, r7
 800249c:	ecbd 8b04 	vpop	{d8-d9}
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	7f7fffff 	.word	0x7f7fffff
 80024a8:	00800000 	.word	0x00800000

080024ac <setYawAngle>:

void setYawAngle(struct Stanley * stanley, float psi){
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	ed87 0a00 	vstr	s0, [r7]
    stanley->psi = psi;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	60da      	str	r2, [r3, #12]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	0000      	movs	r0, r0
 80024cc:	0000      	movs	r0, r0
	...

080024d0 <calculateSteering>:

void calculateSteering(struct Stanley * stanley, float vel, uint8_t precision){
 80024d0:	b580      	push	{r7, lr}
 80024d2:	ed2d 8b02 	vpush	{d8}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80024e0:	460b      	mov	r3, r1
 80024e2:	71fb      	strb	r3, [r7, #7]
    stanley->vel = vel;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	621a      	str	r2, [r3, #32]

    // PI error fixed due to rounding in ak_ angle when the path is vertical that makes it greater than M_PI
    double PI = M_PI + 1e-3;
 80024ea:	a381      	add	r3, pc, #516	; (adr r3, 80026f0 <calculateSteering+0x220>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if(stanley->ak >= PI/2 && stanley->ak <=  PI && stanley->psi <= -PI/2 && stanley->psi >= - PI){
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80024fa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80024fe:	ed97 5b06 	vldr	d5, [r7, #24]
 8002502:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8002506:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800250a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002512:	db3c      	blt.n	800258e <calculateSteering+0xbe>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800251a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800251e:	ed97 6b06 	vldr	d6, [r7, #24]
 8002522:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252a:	db30      	blt.n	800258e <calculateSteering+0xbe>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002532:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002536:	ed97 7b06 	vldr	d7, [r7, #24]
 800253a:	eeb1 5b47 	vneg.f64	d5, d7
 800253e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8002542:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002546:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254e:	d81e      	bhi.n	800258e <calculateSteering+0xbe>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	edd3 7a03 	vldr	s15, [r3, #12]
 8002556:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800255a:	ed97 7b06 	vldr	d7, [r7, #24]
 800255e:	eeb1 7b47 	vneg.f64	d7, d7
 8002562:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256a:	db10      	blt.n	800258e <calculateSteering+0xbe>
        stanley->psi = stanley->psi + PI*2;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002572:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002576:	ed97 7b06 	vldr	d7, [r7, #24]
 800257a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800257e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002582:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	edc3 7a03 	vstr	s15, [r3, #12]
 800258c:	e04b      	b.n	8002626 <calculateSteering+0x156>
    } else if (stanley->ak < -PI/2 && stanley->ak > - PI && stanley->psi > PI/2 && stanley->psi <  PI){
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002594:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002598:	ed97 7b06 	vldr	d7, [r7, #24]
 800259c:	eeb1 5b47 	vneg.f64	d5, d7
 80025a0:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80025a4:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80025a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80025ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b0:	d539      	bpl.n	8002626 <calculateSteering+0x156>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80025b8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80025bc:	ed97 7b06 	vldr	d7, [r7, #24]
 80025c0:	eeb1 7b47 	vneg.f64	d7, d7
 80025c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80025c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025cc:	dd2b      	ble.n	8002626 <calculateSteering+0x156>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80025d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80025d8:	ed97 5b06 	vldr	d5, [r7, #24]
 80025dc:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80025e0:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80025e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80025e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ec:	dd1b      	ble.n	8002626 <calculateSteering+0x156>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80025f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025f8:	ed97 6b06 	vldr	d6, [r7, #24]
 80025fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002604:	dd0f      	ble.n	8002626 <calculateSteering+0x156>
        stanley->psi = stanley->psi - PI*2;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	edd3 7a03 	vldr	s15, [r3, #12]
 800260c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002610:	ed97 7b06 	vldr	d7, [r7, #24]
 8002614:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002618:	ee36 7b47 	vsub.f64	d7, d6, d7
 800261c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    float phi = stanley->psi - stanley->ak;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	ed93 7a03 	vldr	s14, [r3, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002632:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002636:	edc7 7a05 	vstr	s15, [r7, #20]
    stanley->delta = phi + atan2(stanley->k*stanley->e_c,stanley->k_soft + stanley->vel);
 800263a:	edd7 7a05 	vldr	s15, [r7, #20]
 800263e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	ed93 7a04 	vldr	s14, [r3, #16]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	edd3 7a07 	vldr	s15, [r3, #28]
 800264e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002652:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	ed93 6a05 	vldr	s12, [r3, #20]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	edd3 6a08 	vldr	s13, [r3, #32]
 8002662:	ee76 6a26 	vadd.f32	s13, s12, s13
 8002666:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800266a:	eeb0 1b46 	vmov.f64	d1, d6
 800266e:	eeb0 0b47 	vmov.f64	d0, d7
 8002672:	f00c fab5 	bl	800ebe0 <atan2>
 8002676:	eeb0 7b40 	vmov.f64	d7, d0
 800267a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800267e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	edc3 7a02 	vstr	s15, [r3, #8]

    // You want to reduce psi by delta so ...
    stanley->delta = -stanley->delta;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	edd3 7a02 	vldr	s15, [r3, #8]
 800268e:	eef1 7a67 	vneg.f32	s15, s15
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	edc3 7a02 	vstr	s15, [r3, #8]

    stanley->delta = stanley->delta < stanley->sat[1] ? stanley->sat[1] : stanley->delta;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	ed93 7a02 	vldr	s14, [r3, #8]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80026a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ac:	d502      	bpl.n	80026b4 <calculateSteering+0x1e4>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	e001      	b.n	80026b8 <calculateSteering+0x1e8>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	6093      	str	r3, [r2, #8]
    stanley->delta = stanley->delta > stanley->sat[0] ? stanley->sat[0] : stanley->delta;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	ed93 7a02 	vldr	s14, [r3, #8]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	edd3 7a00 	vldr	s15, [r3]
 80026c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d0:	dd02      	ble.n	80026d8 <calculateSteering+0x208>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	e001      	b.n	80026dc <calculateSteering+0x20c>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	6093      	str	r3, [r2, #8]
 80026e0:	bf00      	nop
 80026e2:	3720      	adds	r7, #32
 80026e4:	46bd      	mov	sp, r7
 80026e6:	ecbd 8b02 	vpop	{d8}
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	f3af 8000 	nop.w
 80026f0:	9dfe8b4d 	.word	0x9dfe8b4d
 80026f4:	40092407 	.word	0x40092407

080026f8 <HAL_MspInit>:
=======
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	ed93 7a00 	vldr	s14, [r3]
 8004bb4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bbc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004bc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004bca:	eeb0 0b47 	vmov.f64	d0, d7
 8004bce:	f00d fc83 	bl	80124d8 <cos>
 8004bd2:	eeb0 7b40 	vmov.f64	d7, d0
 8004bd6:	ee28 8b07 	vmul.f64	d8, d8, d7
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	ed93 7a01 	vldr	s14, [r3, #4]
 8004be0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004be8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004bf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004bf6:	eeb0 0b47 	vmov.f64	d0, d7
 8004bfa:	f00d fcb9 	bl	8012570 <sin>
 8004bfe:	eeb0 7b40 	vmov.f64	d7, d0
 8004c02:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004c06:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004c0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	edc3 7a06 	vstr	s15, [r3, #24]
    stanley->e_c = -(vehicle_pos->x - xp) * sin(stanley->ak) + (vehicle_pos->y - yp) * cos(stanley->ak); // crosstrack error
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	ed93 7a00 	vldr	s14, [r3]
 8004c1a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c22:	eef1 7a67 	vneg.f32	s15, s15
 8004c26:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004c30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c34:	eeb0 0b47 	vmov.f64	d0, d7
 8004c38:	f00d fc9a 	bl	8012570 <sin>
 8004c3c:	eeb0 7b40 	vmov.f64	d7, d0
 8004c40:	ee28 8b07 	vmul.f64	d8, d8, d7
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c4a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c52:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004c5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c60:	eeb0 0b47 	vmov.f64	d0, d7
 8004c64:	f00d fc38 	bl	80124d8 <cos>
 8004c68:	eeb0 7b40 	vmov.f64	d7, d0
 8004c6c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004c70:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004c74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8004c7e:	bf00      	nop
 8004c80:	3730      	adds	r7, #48	; 0x30
 8004c82:	46bd      	mov	sp, r7
 8004c84:	ecbd 8b04 	vpop	{d8-d9}
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	7f7fffff 	.word	0x7f7fffff
 8004c90:	00800000 	.word	0x00800000

08004c94 <setYawAngle>:

void setYawAngle(struct Stanley * stanley, float psi){
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	ed87 0a00 	vstr	s0, [r7]
    stanley->psi = psi;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	60da      	str	r2, [r3, #12]
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	0000      	movs	r0, r0
 8004cb4:	0000      	movs	r0, r0
	...

08004cb8 <calculateSteering>:

void calculateSteering(struct Stanley * stanley, float vel, uint8_t precision){
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	ed2d 8b02 	vpush	{d8}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	71fb      	strb	r3, [r7, #7]
    stanley->vel = vel;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	621a      	str	r2, [r3, #32]

    // PI error fixed due to rounding in ak_ angle when the path is vertical that makes it greater than M_PI
    double PI = M_PI + 1e-3;
 8004cd2:	a381      	add	r3, pc, #516	; (adr r3, 8004ed8 <calculateSteering+0x220>)
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if(stanley->ak >= PI/2 && stanley->ak <=  PI && stanley->psi <= -PI/2 && stanley->psi >= - PI){
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004ce2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004ce6:	ed97 5b06 	vldr	d5, [r7, #24]
 8004cea:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004cee:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004cf2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cfa:	db3c      	blt.n	8004d76 <calculateSteering+0xbe>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004d02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d06:	ed97 6b06 	vldr	d6, [r7, #24]
 8004d0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d12:	db30      	blt.n	8004d76 <calculateSteering+0xbe>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d1a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004d1e:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d22:	eeb1 5b47 	vneg.f64	d5, d7
 8004d26:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004d2a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004d2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d36:	d81e      	bhi.n	8004d76 <calculateSteering+0xbe>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d3e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004d42:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d46:	eeb1 7b47 	vneg.f64	d7, d7
 8004d4a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d52:	db10      	blt.n	8004d76 <calculateSteering+0xbe>
        stanley->psi = stanley->psi + PI*2;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d5a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004d5e:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d62:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004d66:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d6a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	edc3 7a03 	vstr	s15, [r3, #12]
 8004d74:	e04b      	b.n	8004e0e <calculateSteering+0x156>
    } else if (stanley->ak < -PI/2 && stanley->ak > - PI && stanley->psi > PI/2 && stanley->psi <  PI){
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004d7c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004d80:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d84:	eeb1 5b47 	vneg.f64	d5, d7
 8004d88:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004d8c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004d90:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d98:	d539      	bpl.n	8004e0e <calculateSteering+0x156>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004da0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004da4:	ed97 7b06 	vldr	d7, [r7, #24]
 8004da8:	eeb1 7b47 	vneg.f64	d7, d7
 8004dac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db4:	dd2b      	ble.n	8004e0e <calculateSteering+0x156>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004dbc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004dc0:	ed97 5b06 	vldr	d5, [r7, #24]
 8004dc4:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004dc8:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004dcc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd4:	dd1b      	ble.n	8004e0e <calculateSteering+0x156>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ddc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004de0:	ed97 6b06 	vldr	d6, [r7, #24]
 8004de4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dec:	dd0f      	ble.n	8004e0e <calculateSteering+0x156>
        stanley->psi = stanley->psi - PI*2;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	edd3 7a03 	vldr	s15, [r3, #12]
 8004df4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004df8:	ed97 7b06 	vldr	d7, [r7, #24]
 8004dfc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004e00:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004e04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    float phi = stanley->psi - stanley->ak;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	ed93 7a03 	vldr	s14, [r3, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e1e:	edc7 7a05 	vstr	s15, [r7, #20]
    stanley->delta = phi + atan2(stanley->k*stanley->e_c,stanley->k_soft + stanley->vel);
 8004e22:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e26:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	ed93 7a04 	vldr	s14, [r3, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	edd3 7a07 	vldr	s15, [r3, #28]
 8004e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	ed93 6a05 	vldr	s12, [r3, #20]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	edd3 6a08 	vldr	s13, [r3, #32]
 8004e4a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8004e4e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8004e52:	eeb0 1b46 	vmov.f64	d1, d6
 8004e56:	eeb0 0b47 	vmov.f64	d0, d7
 8004e5a:	f00d fbd5 	bl	8012608 <atan2>
 8004e5e:	eeb0 7b40 	vmov.f64	d7, d0
 8004e62:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004e66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	edc3 7a02 	vstr	s15, [r3, #8]

    // You want to reduce psi by delta so ...
    stanley->delta = -stanley->delta;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e76:	eef1 7a67 	vneg.f32	s15, s15
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	edc3 7a02 	vstr	s15, [r3, #8]

    stanley->delta = stanley->delta < stanley->sat[1] ? stanley->sat[1] : stanley->delta;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	ed93 7a02 	vldr	s14, [r3, #8]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e94:	d502      	bpl.n	8004e9c <calculateSteering+0x1e4>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	e001      	b.n	8004ea0 <calculateSteering+0x1e8>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	6093      	str	r3, [r2, #8]
    stanley->delta = stanley->delta > stanley->sat[0] ? stanley->sat[0] : stanley->delta;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	ed93 7a02 	vldr	s14, [r3, #8]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	edd3 7a00 	vldr	s15, [r3]
 8004eb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb8:	dd02      	ble.n	8004ec0 <calculateSteering+0x208>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	e001      	b.n	8004ec4 <calculateSteering+0x20c>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	6093      	str	r3, [r2, #8]
 8004ec8:	bf00      	nop
 8004eca:	3720      	adds	r7, #32
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	ecbd 8b02 	vpop	{d8}
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	f3af 8000 	nop.w
 8004ed8:	9dfe8b4d 	.word	0x9dfe8b4d
 8004edc:	40092407 	.word	0x40092407

08004ee0 <HAL_MspInit>:
>>>>>>> Stashed changes
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
=======
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <HAL_MspInit+0x38>)
 8002700:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002704:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <HAL_MspInit+0x38>)
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_MspInit+0x38>)
 8002710:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
=======
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <HAL_MspInit+0x38>)
 8004ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004eec:	4a0a      	ldr	r2, [pc, #40]	; (8004f18 <HAL_MspInit+0x38>)
 8004eee:	f043 0302 	orr.w	r3, r3, #2
 8004ef2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ef6:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <HAL_MspInit+0x38>)
 8004ef8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	607b      	str	r3, [r7, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
>>>>>>> Stashed changes

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< Updated upstream
 800271c:	2200      	movs	r2, #0
 800271e:	210f      	movs	r1, #15
 8002720:	f06f 0001 	mvn.w	r0, #1
 8002724:	f000 fccf 	bl	80030c6 <HAL_NVIC_SetPriority>
=======
 8004f04:	2200      	movs	r2, #0
 8004f06:	210f      	movs	r1, #15
 8004f08:	f06f 0001 	mvn.w	r0, #1
 8004f0c:	f000 fd45 	bl	800599a <HAL_NVIC_SetPriority>
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	58024400 	.word	0x58024400

08002734 <NMI_Handler>:
=======
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	58024400 	.word	0x58024400

08004f1c <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
=======
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< Updated upstream
 8002738:	e7fe      	b.n	8002738 <NMI_Handler+0x4>

0800273a <HardFault_Handler>:
=======
 8004f20:	e7fe      	b.n	8004f20 <NMI_Handler+0x4>

08004f22 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0
=======
 8004f22:	b480      	push	{r7}
 8004f24:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800273e:	e7fe      	b.n	800273e <HardFault_Handler+0x4>

08002740 <MemManage_Handler>:
=======
 8004f26:	e7fe      	b.n	8004f26 <HardFault_Handler+0x4>

08004f28 <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
=======
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8002744:	e7fe      	b.n	8002744 <MemManage_Handler+0x4>

08002746 <BusFault_Handler>:
=======
 8004f2c:	e7fe      	b.n	8004f2c <MemManage_Handler+0x4>

08004f2e <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0
=======
 8004f2e:	b480      	push	{r7}
 8004f30:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800274a:	e7fe      	b.n	800274a <BusFault_Handler+0x4>

0800274c <UsageFault_Handler>:
=======
 8004f32:	e7fe      	b.n	8004f32 <BusFault_Handler+0x4>

08004f34 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
=======
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8002750:	e7fe      	b.n	8002750 <UsageFault_Handler+0x4>

08002752 <DebugMon_Handler>:
=======
 8004f38:	e7fe      	b.n	8004f38 <UsageFault_Handler+0x4>

08004f3a <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
=======
 8004f3a:	b480      	push	{r7}
 8004f3c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <SysTick_Handler>:
=======
 8004f3e:	bf00      	nop
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <SysTick_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< Updated upstream
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
=======
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
 8002764:	f000 fba2 	bl	8002eac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002768:	f009 f83e 	bl	800b7e8 <xTaskGetSchedulerState>
 800276c:	4603      	mov	r3, r0
 800276e:	2b01      	cmp	r3, #1
 8002770:	d001      	beq.n	8002776 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002772:	f007 fa51 	bl	8009c18 <xPortSysTickHandler>
=======
 8004f4c:	f000 fc18 	bl	8005780 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004f50:	f009 fe2a 	bl	800eba8 <xTaskGetSchedulerState>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d001      	beq.n	8004f5e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004f5a:	f008 f83d 	bl	800cfd8 <xPortSysTickHandler>
>>>>>>> Stashed changes
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< Updated upstream
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}

0800277a <_getpid>:
=======
 8004f5e:	bf00      	nop
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <_getpid>:
>>>>>>> Stashed changes
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< Updated upstream
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
	return 1;
 800277e:	2301      	movs	r3, #1
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <_kill>:

int _kill(int pid, int sig)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002794:	f00a fc3e 	bl	800d014 <__errno>
 8002798:	4603      	mov	r3, r0
 800279a:	2216      	movs	r2, #22
 800279c:	601a      	str	r2, [r3, #0]
	return -1;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <_exit>:

void _exit (int status)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027b2:	f04f 31ff 	mov.w	r1, #4294967295
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ffe7 	bl	800278a <_kill>
	while (1) {}		/* Make sure we hang here */
 80027bc:	e7fe      	b.n	80027bc <_exit+0x12>

080027be <_read>:
=======
 8004f62:	b480      	push	{r7}
 8004f64:	af00      	add	r7, sp, #0
	return 1;
 8004f66:	2301      	movs	r3, #1
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <_kill>:

int _kill(int pid, int sig)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004f7c:	f00a fb44 	bl	800f608 <__errno>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2216      	movs	r2, #22
 8004f84:	601a      	str	r2, [r3, #0]
	return -1;
 8004f86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <_exit>:

void _exit (int status)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f9a:	f04f 31ff 	mov.w	r1, #4294967295
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff ffe7 	bl	8004f72 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004fa4:	e7fe      	b.n	8004fa4 <_exit+0x12>

08004fa6 <_read>:
>>>>>>> Stashed changes
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< Updated upstream
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e00a      	b.n	80027e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027d0:	f3af 8000 	nop.w
 80027d4:	4601      	mov	r1, r0
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	60ba      	str	r2, [r7, #8]
 80027dc:	b2ca      	uxtb	r2, r1
 80027de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3301      	adds	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	dbf0      	blt.n	80027d0 <_read+0x12>
	}

return len;
 80027ee:	687b      	ldr	r3, [r7, #4]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	e009      	b.n	800281e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	60ba      	str	r2, [r7, #8]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff faae 	bl	8001d74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	3301      	adds	r3, #1
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	429a      	cmp	r2, r3
 8002824:	dbf1      	blt.n	800280a <_write+0x12>
	}
	return len;
 8002826:	687b      	ldr	r3, [r7, #4]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_close>:

int _close(int file)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	return -1;
 8002838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <_fstat>:
=======
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b086      	sub	sp, #24
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	e00a      	b.n	8004fce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004fb8:	f3af 8000 	nop.w
 8004fbc:	4601      	mov	r1, r0
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	60ba      	str	r2, [r7, #8]
 8004fc4:	b2ca      	uxtb	r2, r1
 8004fc6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	dbf0      	blt.n	8004fb8 <_read+0x12>
	}

return len;
 8004fd6:	687b      	ldr	r3, [r7, #4]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	e009      	b.n	8005006 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	60ba      	str	r2, [r7, #8]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff f8fc 	bl	80041f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	3301      	adds	r3, #1
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	429a      	cmp	r2, r3
 800500c:	dbf1      	blt.n	8004ff2 <_write+0x12>
	}
	return len;
 800500e:	687b      	ldr	r3, [r7, #4]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <_close>:

int _close(int file)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
	return -1;
 8005020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <_fstat>:
>>>>>>> Stashed changes


int _fstat(int file, struct stat *st)
{
<<<<<<< Updated upstream
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002858:	605a      	str	r2, [r3, #4]
	return 0;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <_isatty>:

int _isatty(int file)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	return 1;
 8002870:	2301      	movs	r3, #1
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
	return 0;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <_sbrk>:
=======
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005040:	605a      	str	r2, [r3, #4]
	return 0;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <_isatty>:

int _isatty(int file)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
	return 1;
 8005058:	2301      	movs	r3, #1
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
	return 0;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <_sbrk>:
>>>>>>> Stashed changes
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< Updated upstream
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
=======
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< Updated upstream
 80028a0:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <_sbrk+0x5c>)
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <_sbrk+0x60>)
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	613b      	str	r3, [r7, #16]
=======
 8005088:	4a14      	ldr	r2, [pc, #80]	; (80050dc <_sbrk+0x5c>)
 800508a:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <_sbrk+0x60>)
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< Updated upstream
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <_sbrk+0x64>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d102      	bne.n	80028ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <_sbrk+0x64>)
 80028b6:	4a12      	ldr	r2, [pc, #72]	; (8002900 <_sbrk+0x68>)
 80028b8:	601a      	str	r2, [r3, #0]
=======
 8005094:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <_sbrk+0x64>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800509c:	4b11      	ldr	r3, [pc, #68]	; (80050e4 <_sbrk+0x64>)
 800509e:	4a12      	ldr	r2, [pc, #72]	; (80050e8 <_sbrk+0x68>)
 80050a0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< Updated upstream
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <_sbrk+0x64>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d207      	bcs.n	80028d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c8:	f00a fba4 	bl	800d014 <__errno>
 80028cc:	4603      	mov	r3, r0
 80028ce:	220c      	movs	r2, #12
 80028d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028d2:	f04f 33ff 	mov.w	r3, #4294967295
 80028d6:	e009      	b.n	80028ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <_sbrk+0x64>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028de:	4b07      	ldr	r3, [pc, #28]	; (80028fc <_sbrk+0x64>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	4a05      	ldr	r2, [pc, #20]	; (80028fc <_sbrk+0x64>)
 80028e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	24080000 	.word	0x24080000
 80028f8:	00000400 	.word	0x00000400
 80028fc:	24000408 	.word	0x24000408
 8002900:	24005070 	.word	0x24005070

08002904 <MX_TIM2_Init>:
=======
 80050a2:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <_sbrk+0x64>)
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4413      	add	r3, r2
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d207      	bcs.n	80050c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050b0:	f00a faaa 	bl	800f608 <__errno>
 80050b4:	4603      	mov	r3, r0
 80050b6:	220c      	movs	r2, #12
 80050b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050ba:	f04f 33ff 	mov.w	r3, #4294967295
 80050be:	e009      	b.n	80050d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050c0:	4b08      	ldr	r3, [pc, #32]	; (80050e4 <_sbrk+0x64>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050c6:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <_sbrk+0x64>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4413      	add	r3, r2
 80050ce:	4a05      	ldr	r2, [pc, #20]	; (80050e4 <_sbrk+0x64>)
 80050d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050d2:	68fb      	ldr	r3, [r7, #12]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	24080000 	.word	0x24080000
 80050e0:	00000400 	.word	0x00000400
 80050e4:	240008bc 	.word	0x240008bc
 80050e8:	24005410 	.word	0x24005410

080050ec <MX_TIM2_Init>:
>>>>>>> Stashed changes
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
<<<<<<< Updated upstream
 8002904:	b580      	push	{r7, lr}
 8002906:	b08e      	sub	sp, #56	; 0x38
 8002908:	af00      	add	r7, sp, #0
=======
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08e      	sub	sp, #56	; 0x38
 80050f0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< Updated upstream
 800290a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002918:	f107 031c 	add.w	r3, r7, #28
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002924:	463b      	mov	r3, r7
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]
 8002930:	611a      	str	r2, [r3, #16]
 8002932:	615a      	str	r2, [r3, #20]
 8002934:	619a      	str	r2, [r3, #24]
=======
 80050f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	605a      	str	r2, [r3, #4]
 80050fc:	609a      	str	r2, [r3, #8]
 80050fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005100:	f107 031c 	add.w	r3, r7, #28
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	605a      	str	r2, [r3, #4]
 800510a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800510c:	463b      	mov	r3, r7
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	605a      	str	r2, [r3, #4]
 8005114:	609a      	str	r2, [r3, #8]
 8005116:	60da      	str	r2, [r3, #12]
 8005118:	611a      	str	r2, [r3, #16]
 800511a:	615a      	str	r2, [r3, #20]
 800511c:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< Updated upstream
 8002936:	4b2d      	ldr	r3, [pc, #180]	; (80029ec <MX_TIM2_Init+0xe8>)
 8002938:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800293c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800293e:	4b2b      	ldr	r3, [pc, #172]	; (80029ec <MX_TIM2_Init+0xe8>)
 8002940:	2248      	movs	r2, #72	; 0x48
 8002942:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002944:	4b29      	ldr	r3, [pc, #164]	; (80029ec <MX_TIM2_Init+0xe8>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800294a:	4b28      	ldr	r3, [pc, #160]	; (80029ec <MX_TIM2_Init+0xe8>)
 800294c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002950:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002952:	4b26      	ldr	r3, [pc, #152]	; (80029ec <MX_TIM2_Init+0xe8>)
 8002954:	2200      	movs	r2, #0
 8002956:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002958:	4b24      	ldr	r3, [pc, #144]	; (80029ec <MX_TIM2_Init+0xe8>)
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800295e:	4823      	ldr	r0, [pc, #140]	; (80029ec <MX_TIM2_Init+0xe8>)
 8002960:	f004 f8f1 	bl	8006b46 <HAL_TIM_Base_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800296a:	f7fe fbe9 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800296e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002978:	4619      	mov	r1, r3
 800297a:	481c      	ldr	r0, [pc, #112]	; (80029ec <MX_TIM2_Init+0xe8>)
 800297c:	f004 fbbe 	bl	80070fc <HAL_TIM_ConfigClockSource>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002986:	f7fe fbdb 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800298a:	4818      	ldr	r0, [pc, #96]	; (80029ec <MX_TIM2_Init+0xe8>)
 800298c:	f004 f932 	bl	8006bf4 <HAL_TIM_PWM_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002996:	f7fe fbd3 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299e:	2300      	movs	r3, #0
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029a2:	f107 031c 	add.w	r3, r7, #28
 80029a6:	4619      	mov	r1, r3
 80029a8:	4810      	ldr	r0, [pc, #64]	; (80029ec <MX_TIM2_Init+0xe8>)
 80029aa:	f005 f8d3 	bl	8007b54 <HAL_TIMEx_MasterConfigSynchronization>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80029b4:	f7fe fbc4 	bl	8001140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029b8:	2360      	movs	r3, #96	; 0x60
 80029ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029c8:	463b      	mov	r3, r7
 80029ca:	2200      	movs	r2, #0
 80029cc:	4619      	mov	r1, r3
 80029ce:	4807      	ldr	r0, [pc, #28]	; (80029ec <MX_TIM2_Init+0xe8>)
 80029d0:	f004 fa80 	bl	8006ed4 <HAL_TIM_PWM_ConfigChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80029da:	f7fe fbb1 	bl	8001140 <Error_Handler>
=======
 800511e:	4b2d      	ldr	r3, [pc, #180]	; (80051d4 <MX_TIM2_Init+0xe8>)
 8005120:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005124:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8005126:	4b2b      	ldr	r3, [pc, #172]	; (80051d4 <MX_TIM2_Init+0xe8>)
 8005128:	2248      	movs	r2, #72	; 0x48
 800512a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800512c:	4b29      	ldr	r3, [pc, #164]	; (80051d4 <MX_TIM2_Init+0xe8>)
 800512e:	2200      	movs	r2, #0
 8005130:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005132:	4b28      	ldr	r3, [pc, #160]	; (80051d4 <MX_TIM2_Init+0xe8>)
 8005134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005138:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800513a:	4b26      	ldr	r3, [pc, #152]	; (80051d4 <MX_TIM2_Init+0xe8>)
 800513c:	2200      	movs	r2, #0
 800513e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005140:	4b24      	ldr	r3, [pc, #144]	; (80051d4 <MX_TIM2_Init+0xe8>)
 8005142:	2280      	movs	r2, #128	; 0x80
 8005144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005146:	4823      	ldr	r0, [pc, #140]	; (80051d4 <MX_TIM2_Init+0xe8>)
 8005148:	f004 fedf 	bl	8009f0a <HAL_TIM_Base_Init>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005152:	f7fe fa09 	bl	8003568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800515c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005160:	4619      	mov	r1, r3
 8005162:	481c      	ldr	r0, [pc, #112]	; (80051d4 <MX_TIM2_Init+0xe8>)
 8005164:	f005 f9ac 	bl	800a4c0 <HAL_TIM_ConfigClockSource>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800516e:	f7fe f9fb 	bl	8003568 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005172:	4818      	ldr	r0, [pc, #96]	; (80051d4 <MX_TIM2_Init+0xe8>)
 8005174:	f004 ff20 	bl	8009fb8 <HAL_TIM_PWM_Init>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800517e:	f7fe f9f3 	bl	8003568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005186:	2300      	movs	r3, #0
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800518a:	f107 031c 	add.w	r3, r7, #28
 800518e:	4619      	mov	r1, r3
 8005190:	4810      	ldr	r0, [pc, #64]	; (80051d4 <MX_TIM2_Init+0xe8>)
 8005192:	f005 fec1 	bl	800af18 <HAL_TIMEx_MasterConfigSynchronization>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800519c:	f7fe f9e4 	bl	8003568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051a0:	2360      	movs	r3, #96	; 0x60
 80051a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051a8:	2300      	movs	r3, #0
 80051aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051ac:	2300      	movs	r3, #0
 80051ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80051b0:	463b      	mov	r3, r7
 80051b2:	2200      	movs	r2, #0
 80051b4:	4619      	mov	r1, r3
 80051b6:	4807      	ldr	r0, [pc, #28]	; (80051d4 <MX_TIM2_Init+0xe8>)
 80051b8:	f005 f86e 	bl	800a298 <HAL_TIM_PWM_ConfigChannel>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80051c2:	f7fe f9d1 	bl	8003568 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
<<<<<<< Updated upstream
 80029de:	4803      	ldr	r0, [pc, #12]	; (80029ec <MX_TIM2_Init+0xe8>)
 80029e0:	f000 f8b6 	bl	8002b50 <HAL_TIM_MspPostInit>

}
 80029e4:	bf00      	nop
 80029e6:	3738      	adds	r7, #56	; 0x38
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	2400040c 	.word	0x2400040c

080029f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	; 0x38
 80029f4:	af00      	add	r7, sp, #0
=======
 80051c6:	4803      	ldr	r0, [pc, #12]	; (80051d4 <MX_TIM2_Init+0xe8>)
 80051c8:	f000 f8b6 	bl	8005338 <HAL_TIM_MspPostInit>

}
 80051cc:	bf00      	nop
 80051ce:	3738      	adds	r7, #56	; 0x38
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	240008c0 	.word	0x240008c0

080051d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08e      	sub	sp, #56	; 0x38
 80051dc:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< Updated upstream
 80029f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a10:	463b      	mov	r3, r7
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	60da      	str	r2, [r3, #12]
 8002a1c:	611a      	str	r2, [r3, #16]
 8002a1e:	615a      	str	r2, [r3, #20]
 8002a20:	619a      	str	r2, [r3, #24]
=======
 80051de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	605a      	str	r2, [r3, #4]
 80051e8:	609a      	str	r2, [r3, #8]
 80051ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051ec:	f107 031c 	add.w	r3, r7, #28
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80051f8:	463b      	mov	r3, r7
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	605a      	str	r2, [r3, #4]
 8005200:	609a      	str	r2, [r3, #8]
 8005202:	60da      	str	r2, [r3, #12]
 8005204:	611a      	str	r2, [r3, #16]
 8005206:	615a      	str	r2, [r3, #20]
 8005208:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< Updated upstream
 8002a22:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <MX_TIM3_Init+0xe8>)
 8002a24:	4a2d      	ldr	r2, [pc, #180]	; (8002adc <MX_TIM3_Init+0xec>)
 8002a26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <MX_TIM3_Init+0xe8>)
 8002a2a:	2248      	movs	r2, #72	; 0x48
 8002a2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <MX_TIM3_Init+0xe8>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <MX_TIM3_Init+0xe8>)
 8002a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a3c:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <MX_TIM3_Init+0xe8>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a42:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <MX_TIM3_Init+0xe8>)
 8002a44:	2280      	movs	r2, #128	; 0x80
 8002a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a48:	4823      	ldr	r0, [pc, #140]	; (8002ad8 <MX_TIM3_Init+0xe8>)
 8002a4a:	f004 f87c 	bl	8006b46 <HAL_TIM_Base_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002a54:	f7fe fb74 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a62:	4619      	mov	r1, r3
 8002a64:	481c      	ldr	r0, [pc, #112]	; (8002ad8 <MX_TIM3_Init+0xe8>)
 8002a66:	f004 fb49 	bl	80070fc <HAL_TIM_ConfigClockSource>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002a70:	f7fe fb66 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a74:	4818      	ldr	r0, [pc, #96]	; (8002ad8 <MX_TIM3_Init+0xe8>)
 8002a76:	f004 f8bd 	bl	8006bf4 <HAL_TIM_PWM_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002a80:	f7fe fb5e 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a8c:	f107 031c 	add.w	r3, r7, #28
 8002a90:	4619      	mov	r1, r3
 8002a92:	4811      	ldr	r0, [pc, #68]	; (8002ad8 <MX_TIM3_Init+0xe8>)
 8002a94:	f005 f85e 	bl	8007b54 <HAL_TIMEx_MasterConfigSynchronization>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002a9e:	f7fe fb4f 	bl	8001140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aa2:	2360      	movs	r3, #96	; 0x60
 8002aa4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4807      	ldr	r0, [pc, #28]	; (8002ad8 <MX_TIM3_Init+0xe8>)
 8002aba:	f004 fa0b 	bl	8006ed4 <HAL_TIM_PWM_ConfigChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002ac4:	f7fe fb3c 	bl	8001140 <Error_Handler>
=======
 800520a:	4b2d      	ldr	r3, [pc, #180]	; (80052c0 <MX_TIM3_Init+0xe8>)
 800520c:	4a2d      	ldr	r2, [pc, #180]	; (80052c4 <MX_TIM3_Init+0xec>)
 800520e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8005210:	4b2b      	ldr	r3, [pc, #172]	; (80052c0 <MX_TIM3_Init+0xe8>)
 8005212:	2248      	movs	r2, #72	; 0x48
 8005214:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005216:	4b2a      	ldr	r3, [pc, #168]	; (80052c0 <MX_TIM3_Init+0xe8>)
 8005218:	2200      	movs	r2, #0
 800521a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800521c:	4b28      	ldr	r3, [pc, #160]	; (80052c0 <MX_TIM3_Init+0xe8>)
 800521e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005222:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005224:	4b26      	ldr	r3, [pc, #152]	; (80052c0 <MX_TIM3_Init+0xe8>)
 8005226:	2200      	movs	r2, #0
 8005228:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800522a:	4b25      	ldr	r3, [pc, #148]	; (80052c0 <MX_TIM3_Init+0xe8>)
 800522c:	2280      	movs	r2, #128	; 0x80
 800522e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005230:	4823      	ldr	r0, [pc, #140]	; (80052c0 <MX_TIM3_Init+0xe8>)
 8005232:	f004 fe6a 	bl	8009f0a <HAL_TIM_Base_Init>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800523c:	f7fe f994 	bl	8003568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800524a:	4619      	mov	r1, r3
 800524c:	481c      	ldr	r0, [pc, #112]	; (80052c0 <MX_TIM3_Init+0xe8>)
 800524e:	f005 f937 	bl	800a4c0 <HAL_TIM_ConfigClockSource>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005258:	f7fe f986 	bl	8003568 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800525c:	4818      	ldr	r0, [pc, #96]	; (80052c0 <MX_TIM3_Init+0xe8>)
 800525e:	f004 feab 	bl	8009fb8 <HAL_TIM_PWM_Init>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005268:	f7fe f97e 	bl	8003568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005270:	2300      	movs	r3, #0
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005274:	f107 031c 	add.w	r3, r7, #28
 8005278:	4619      	mov	r1, r3
 800527a:	4811      	ldr	r0, [pc, #68]	; (80052c0 <MX_TIM3_Init+0xe8>)
 800527c:	f005 fe4c 	bl	800af18 <HAL_TIMEx_MasterConfigSynchronization>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005286:	f7fe f96f 	bl	8003568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800528a:	2360      	movs	r3, #96	; 0x60
 800528c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005292:	2300      	movs	r3, #0
 8005294:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005296:	2300      	movs	r3, #0
 8005298:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800529a:	463b      	mov	r3, r7
 800529c:	2200      	movs	r2, #0
 800529e:	4619      	mov	r1, r3
 80052a0:	4807      	ldr	r0, [pc, #28]	; (80052c0 <MX_TIM3_Init+0xe8>)
 80052a2:	f004 fff9 	bl	800a298 <HAL_TIM_PWM_ConfigChannel>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80052ac:	f7fe f95c 	bl	8003568 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
<<<<<<< Updated upstream
 8002ac8:	4803      	ldr	r0, [pc, #12]	; (8002ad8 <MX_TIM3_Init+0xe8>)
 8002aca:	f000 f841 	bl	8002b50 <HAL_TIM_MspPostInit>

}
 8002ace:	bf00      	nop
 8002ad0:	3738      	adds	r7, #56	; 0x38
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	24000458 	.word	0x24000458
 8002adc:	40000400 	.word	0x40000400

08002ae0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af0:	d10f      	bne.n	8002b12 <HAL_TIM_Base_MspInit+0x32>
=======
 80052b0:	4803      	ldr	r0, [pc, #12]	; (80052c0 <MX_TIM3_Init+0xe8>)
 80052b2:	f000 f841 	bl	8005338 <HAL_TIM_MspPostInit>

}
 80052b6:	bf00      	nop
 80052b8:	3738      	adds	r7, #56	; 0x38
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	2400090c 	.word	0x2400090c
 80052c4:	40000400 	.word	0x40000400

080052c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d8:	d10f      	bne.n	80052fa <HAL_TIM_Base_MspInit+0x32>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< Updated upstream
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <HAL_TIM_Base_MspInit+0x68>)
 8002af4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002af8:	4a13      	ldr	r2, [pc, #76]	; (8002b48 <HAL_TIM_Base_MspInit+0x68>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <HAL_TIM_Base_MspInit+0x68>)
 8002b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
=======
 80052da:	4b15      	ldr	r3, [pc, #84]	; (8005330 <HAL_TIM_Base_MspInit+0x68>)
 80052dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052e0:	4a13      	ldr	r2, [pc, #76]	; (8005330 <HAL_TIM_Base_MspInit+0x68>)
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80052ea:	4b11      	ldr	r3, [pc, #68]	; (8005330 <HAL_TIM_Base_MspInit+0x68>)
 80052ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 8002b10:	e013      	b.n	8002b3a <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM3)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a0d      	ldr	r2, [pc, #52]	; (8002b4c <HAL_TIM_Base_MspInit+0x6c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d10e      	bne.n	8002b3a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <HAL_TIM_Base_MspInit+0x68>)
 8002b1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b22:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <HAL_TIM_Base_MspInit+0x68>)
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_TIM_Base_MspInit+0x68>)
 8002b2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	58024400 	.word	0x58024400
 8002b4c:	40000400 	.word	0x40000400

08002b50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b70:	d120      	bne.n	8002bb4 <HAL_TIM_MspPostInit+0x64>
=======
 80052f8:	e013      	b.n	8005322 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM3)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a0d      	ldr	r2, [pc, #52]	; (8005334 <HAL_TIM_Base_MspInit+0x6c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d10e      	bne.n	8005322 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005304:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <HAL_TIM_Base_MspInit+0x68>)
 8005306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800530a:	4a09      	ldr	r2, [pc, #36]	; (8005330 <HAL_TIM_Base_MspInit+0x68>)
 800530c:	f043 0302 	orr.w	r3, r3, #2
 8005310:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005314:	4b06      	ldr	r3, [pc, #24]	; (8005330 <HAL_TIM_Base_MspInit+0x68>)
 8005316:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	60bb      	str	r3, [r7, #8]
 8005320:	68bb      	ldr	r3, [r7, #8]
}
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	58024400 	.word	0x58024400
 8005334:	40000400 	.word	0x40000400

08005338 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08a      	sub	sp, #40	; 0x28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005340:	f107 0314 	add.w	r3, r7, #20
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	609a      	str	r2, [r3, #8]
 800534c:	60da      	str	r2, [r3, #12]
 800534e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005358:	d120      	bne.n	800539c <HAL_TIM_MspPostInit+0x64>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< Updated upstream
 8002b72:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <HAL_TIM_MspPostInit+0xb4>)
 8002b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b78:	4a22      	ldr	r2, [pc, #136]	; (8002c04 <HAL_TIM_MspPostInit+0xb4>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b82:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <HAL_TIM_MspPostInit+0xb4>)
 8002b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]
=======
 800535a:	4b24      	ldr	r3, [pc, #144]	; (80053ec <HAL_TIM_MspPostInit+0xb4>)
 800535c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005360:	4a22      	ldr	r2, [pc, #136]	; (80053ec <HAL_TIM_MspPostInit+0xb4>)
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800536a:	4b20      	ldr	r3, [pc, #128]	; (80053ec <HAL_TIM_MspPostInit+0xb4>)
 800536c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	613b      	str	r3, [r7, #16]
 8005376:	693b      	ldr	r3, [r7, #16]
>>>>>>> Stashed changes
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
<<<<<<< Updated upstream
 8002b90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba6:	f107 0314 	add.w	r3, r7, #20
 8002baa:	4619      	mov	r1, r3
 8002bac:	4816      	ldr	r0, [pc, #88]	; (8002c08 <HAL_TIM_MspPostInit+0xb8>)
 8002bae:	f000 fab1 	bl	8003114 <HAL_GPIO_Init>
=======
 8005378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800537c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800537e:	2302      	movs	r3, #2
 8005380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005382:	2300      	movs	r3, #0
 8005384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005386:	2300      	movs	r3, #0
 8005388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800538a:	2301      	movs	r3, #1
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800538e:	f107 0314 	add.w	r3, r7, #20
 8005392:	4619      	mov	r1, r3
 8005394:	4816      	ldr	r0, [pc, #88]	; (80053f0 <HAL_TIM_MspPostInit+0xb8>)
 8005396:	f001 f89f 	bl	80064d8 <HAL_GPIO_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
<<<<<<< Updated upstream
 8002bb2:	e023      	b.n	8002bfc <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <HAL_TIM_MspPostInit+0xbc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d11e      	bne.n	8002bfc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_TIM_MspPostInit+0xb4>)
 8002bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bc4:	4a0f      	ldr	r2, [pc, #60]	; (8002c04 <HAL_TIM_MspPostInit+0xb4>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bce:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <HAL_TIM_MspPostInit+0xb4>)
 8002bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bdc:	2340      	movs	r3, #64	; 0x40
 8002bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be8:	2300      	movs	r3, #0
 8002bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bec:	2302      	movs	r3, #2
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4804      	ldr	r0, [pc, #16]	; (8002c08 <HAL_TIM_MspPostInit+0xb8>)
 8002bf8:	f000 fa8c 	bl	8003114 <HAL_GPIO_Init>
}
 8002bfc:	bf00      	nop
 8002bfe:	3728      	adds	r7, #40	; 0x28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	58024400 	.word	0x58024400
 8002c08:	58020000 	.word	0x58020000
 8002c0c:	40000400 	.word	0x40000400

08002c10 <MX_USART3_UART_Init>:
=======
 800539a:	e023      	b.n	80053e4 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a14      	ldr	r2, [pc, #80]	; (80053f4 <HAL_TIM_MspPostInit+0xbc>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d11e      	bne.n	80053e4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053a6:	4b11      	ldr	r3, [pc, #68]	; (80053ec <HAL_TIM_MspPostInit+0xb4>)
 80053a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053ac:	4a0f      	ldr	r2, [pc, #60]	; (80053ec <HAL_TIM_MspPostInit+0xb4>)
 80053ae:	f043 0301 	orr.w	r3, r3, #1
 80053b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053b6:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <HAL_TIM_MspPostInit+0xb4>)
 80053b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80053c4:	2340      	movs	r3, #64	; 0x40
 80053c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c8:	2302      	movs	r3, #2
 80053ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053cc:	2300      	movs	r3, #0
 80053ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053d0:	2300      	movs	r3, #0
 80053d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80053d4:	2302      	movs	r3, #2
 80053d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053d8:	f107 0314 	add.w	r3, r7, #20
 80053dc:	4619      	mov	r1, r3
 80053de:	4804      	ldr	r0, [pc, #16]	; (80053f0 <HAL_TIM_MspPostInit+0xb8>)
 80053e0:	f001 f87a 	bl	80064d8 <HAL_GPIO_Init>
}
 80053e4:	bf00      	nop
 80053e6:	3728      	adds	r7, #40	; 0x28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	58024400 	.word	0x58024400
 80053f0:	58020000 	.word	0x58020000
 80053f4:	40000400 	.word	0x40000400

080053f8 <MX_USART3_UART_Init>:
>>>>>>> Stashed changes
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
<<<<<<< Updated upstream
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
=======
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
<<<<<<< Updated upstream
 8002c14:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <MX_USART3_UART_Init+0x90>)
 8002c16:	4a23      	ldr	r2, [pc, #140]	; (8002ca4 <MX_USART3_UART_Init+0x94>)
 8002c18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002c1a:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <MX_USART3_UART_Init+0x90>)
 8002c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c22:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <MX_USART3_UART_Init+0x90>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c28:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <MX_USART3_UART_Init+0x90>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <MX_USART3_UART_Init+0x90>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <MX_USART3_UART_Init+0x90>)
 8002c36:	220c      	movs	r2, #12
 8002c38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <MX_USART3_UART_Init+0x90>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c40:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <MX_USART3_UART_Init+0x90>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <MX_USART3_UART_Init+0x90>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c4c:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <MX_USART3_UART_Init+0x90>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <MX_USART3_UART_Init+0x90>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c58:	4811      	ldr	r0, [pc, #68]	; (8002ca0 <MX_USART3_UART_Init+0x90>)
 8002c5a:	f005 f809 	bl	8007c70 <HAL_UART_Init>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002c64:	f7fe fa6c 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c68:	2100      	movs	r1, #0
 8002c6a:	480d      	ldr	r0, [pc, #52]	; (8002ca0 <MX_USART3_UART_Init+0x90>)
 8002c6c:	f006 f83c 	bl	8008ce8 <HAL_UARTEx_SetTxFifoThreshold>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002c76:	f7fe fa63 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4808      	ldr	r0, [pc, #32]	; (8002ca0 <MX_USART3_UART_Init+0x90>)
 8002c7e:	f006 f871 	bl	8008d64 <HAL_UARTEx_SetRxFifoThreshold>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002c88:	f7fe fa5a 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002c8c:	4804      	ldr	r0, [pc, #16]	; (8002ca0 <MX_USART3_UART_Init+0x90>)
 8002c8e:	f005 fff2 	bl	8008c76 <HAL_UARTEx_DisableFifoMode>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002c98:	f7fe fa52 	bl	8001140 <Error_Handler>
=======
 80053fc:	4b22      	ldr	r3, [pc, #136]	; (8005488 <MX_USART3_UART_Init+0x90>)
 80053fe:	4a23      	ldr	r2, [pc, #140]	; (800548c <MX_USART3_UART_Init+0x94>)
 8005400:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005402:	4b21      	ldr	r3, [pc, #132]	; (8005488 <MX_USART3_UART_Init+0x90>)
 8005404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005408:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800540a:	4b1f      	ldr	r3, [pc, #124]	; (8005488 <MX_USART3_UART_Init+0x90>)
 800540c:	2200      	movs	r2, #0
 800540e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005410:	4b1d      	ldr	r3, [pc, #116]	; (8005488 <MX_USART3_UART_Init+0x90>)
 8005412:	2200      	movs	r2, #0
 8005414:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005416:	4b1c      	ldr	r3, [pc, #112]	; (8005488 <MX_USART3_UART_Init+0x90>)
 8005418:	2200      	movs	r2, #0
 800541a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800541c:	4b1a      	ldr	r3, [pc, #104]	; (8005488 <MX_USART3_UART_Init+0x90>)
 800541e:	220c      	movs	r2, #12
 8005420:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005422:	4b19      	ldr	r3, [pc, #100]	; (8005488 <MX_USART3_UART_Init+0x90>)
 8005424:	2200      	movs	r2, #0
 8005426:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005428:	4b17      	ldr	r3, [pc, #92]	; (8005488 <MX_USART3_UART_Init+0x90>)
 800542a:	2200      	movs	r2, #0
 800542c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800542e:	4b16      	ldr	r3, [pc, #88]	; (8005488 <MX_USART3_UART_Init+0x90>)
 8005430:	2200      	movs	r2, #0
 8005432:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005434:	4b14      	ldr	r3, [pc, #80]	; (8005488 <MX_USART3_UART_Init+0x90>)
 8005436:	2200      	movs	r2, #0
 8005438:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800543a:	4b13      	ldr	r3, [pc, #76]	; (8005488 <MX_USART3_UART_Init+0x90>)
 800543c:	2200      	movs	r2, #0
 800543e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005440:	4811      	ldr	r0, [pc, #68]	; (8005488 <MX_USART3_UART_Init+0x90>)
 8005442:	f005 fdf7 	bl	800b034 <HAL_UART_Init>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800544c:	f7fe f88c 	bl	8003568 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005450:	2100      	movs	r1, #0
 8005452:	480d      	ldr	r0, [pc, #52]	; (8005488 <MX_USART3_UART_Init+0x90>)
 8005454:	f006 fe2a 	bl	800c0ac <HAL_UARTEx_SetTxFifoThreshold>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800545e:	f7fe f883 	bl	8003568 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005462:	2100      	movs	r1, #0
 8005464:	4808      	ldr	r0, [pc, #32]	; (8005488 <MX_USART3_UART_Init+0x90>)
 8005466:	f006 fe5f 	bl	800c128 <HAL_UARTEx_SetRxFifoThreshold>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005470:	f7fe f87a 	bl	8003568 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005474:	4804      	ldr	r0, [pc, #16]	; (8005488 <MX_USART3_UART_Init+0x90>)
 8005476:	f006 fde0 	bl	800c03a <HAL_UARTEx_DisableFifoMode>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005480:	f7fe f872 	bl	8003568 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
<<<<<<< Updated upstream
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	240004a4 	.word	0x240004a4
 8002ca4:	40004800 	.word	0x40004800

08002ca8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b0b8      	sub	sp, #224	; 0xe0
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	22bc      	movs	r2, #188	; 0xbc
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f00a f8fb 	bl	800cec4 <memset>
  if(uartHandle->Instance==USART3)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a25      	ldr	r2, [pc, #148]	; (8002d68 <HAL_UART_MspInit+0xc0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d142      	bne.n	8002d5e <HAL_UART_MspInit+0xb6>
=======
 8005484:	bf00      	nop
 8005486:	bd80      	pop	{r7, pc}
 8005488:	24000958 	.word	0x24000958
 800548c:	40004800 	.word	0x40004800

08005490 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b0b8      	sub	sp, #224	; 0xe0
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005498:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	609a      	str	r2, [r3, #8]
 80054a4:	60da      	str	r2, [r3, #12]
 80054a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80054a8:	f107 0310 	add.w	r3, r7, #16
 80054ac:	22bc      	movs	r2, #188	; 0xbc
 80054ae:	2100      	movs	r1, #0
 80054b0:	4618      	mov	r0, r3
 80054b2:	f00a f9da 	bl	800f86a <memset>
  if(uartHandle->Instance==USART3)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a25      	ldr	r2, [pc, #148]	; (8005550 <HAL_UART_MspInit+0xc0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d142      	bne.n	8005546 <HAL_UART_MspInit+0xb6>
>>>>>>> Stashed changes

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
<<<<<<< Updated upstream
 8002cd8:	2302      	movs	r3, #2
 8002cda:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ce2:	f107 0310 	add.w	r3, r7, #16
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f001 fc20 	bl	800452c <HAL_RCCEx_PeriphCLKConfig>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002cf2:	f7fe fa25 	bl	8001140 <Error_Handler>
=======
 80054c0:	2302      	movs	r3, #2
 80054c2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80054c4:	2300      	movs	r3, #0
 80054c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054ca:	f107 0310 	add.w	r3, r7, #16
 80054ce:	4618      	mov	r0, r3
 80054d0:	f002 fa0e 	bl	80078f0 <HAL_RCCEx_PeriphCLKConfig>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80054da:	f7fe f845 	bl	8003568 <Error_Handler>
>>>>>>> Stashed changes
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
<<<<<<< Updated upstream
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <HAL_UART_MspInit+0xc4>)
 8002cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cfc:	4a1b      	ldr	r2, [pc, #108]	; (8002d6c <HAL_UART_MspInit+0xc4>)
 8002cfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d06:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_UART_MspInit+0xc4>)
 8002d08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d14:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_UART_MspInit+0xc4>)
 8002d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d1a:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <HAL_UART_MspInit+0xc4>)
 8002d1c:	f043 0308 	orr.w	r3, r3, #8
 8002d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_UART_MspInit+0xc4>)
 8002d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
=======
 80054de:	4b1d      	ldr	r3, [pc, #116]	; (8005554 <HAL_UART_MspInit+0xc4>)
 80054e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054e4:	4a1b      	ldr	r2, [pc, #108]	; (8005554 <HAL_UART_MspInit+0xc4>)
 80054e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80054ee:	4b19      	ldr	r3, [pc, #100]	; (8005554 <HAL_UART_MspInit+0xc4>)
 80054f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054fc:	4b15      	ldr	r3, [pc, #84]	; (8005554 <HAL_UART_MspInit+0xc4>)
 80054fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005502:	4a14      	ldr	r2, [pc, #80]	; (8005554 <HAL_UART_MspInit+0xc4>)
 8005504:	f043 0308 	orr.w	r3, r3, #8
 8005508:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800550c:	4b11      	ldr	r3, [pc, #68]	; (8005554 <HAL_UART_MspInit+0xc4>)
 800550e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	60bb      	str	r3, [r7, #8]
 8005518:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
<<<<<<< Updated upstream
 8002d32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d4c:	2307      	movs	r3, #7
 8002d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d52:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d56:	4619      	mov	r1, r3
 8002d58:	4805      	ldr	r0, [pc, #20]	; (8002d70 <HAL_UART_MspInit+0xc8>)
 8002d5a:	f000 f9db 	bl	8003114 <HAL_GPIO_Init>
=======
 800551a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800551e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005522:	2302      	movs	r3, #2
 8005524:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005528:	2300      	movs	r3, #0
 800552a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800552e:	2300      	movs	r3, #0
 8005530:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005534:	2307      	movs	r3, #7
 8005536:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800553a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800553e:	4619      	mov	r1, r3
 8005540:	4805      	ldr	r0, [pc, #20]	; (8005558 <HAL_UART_MspInit+0xc8>)
 8005542:	f000 ffc9 	bl	80064d8 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 8002d5e:	bf00      	nop
 8002d60:	37e0      	adds	r7, #224	; 0xe0
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40004800 	.word	0x40004800
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	58020c00 	.word	0x58020c00

08002d74 <Reset_Handler>:
=======
 8005546:	bf00      	nop
 8005548:	37e0      	adds	r7, #224	; 0xe0
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40004800 	.word	0x40004800
 8005554:	58024400 	.word	0x58024400
 8005558:	58020c00 	.word	0x58020c00

0800555c <init_waypoint_buffer>:
#include "waypoints.h"
#include <stdio.h>

void init_waypoint_buffer(struct waypoint_buffer * wp_buf) {
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
    clean(wp_buf);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f859 	bl	800561c <clean>
}
 800556a:	bf00      	nop
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <add_wp>:

void add_wp(struct waypoint_buffer * wp_buf, float x, float y) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005580:	edc7 0a01 	vstr	s1, [r7, #4]
    if (wp_buf->size < MAX_WP) {
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b31      	cmp	r3, #49	; 0x31
 800558a:	dc1d      	bgt.n	80055c8 <add_wp+0x54>
        struct waypoint wp = {x, y};
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	613b      	str	r3, [r7, #16]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	617b      	str	r3, [r7, #20]
        wp_buf->wp_buf[wp_buf->size] = wp;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	4413      	add	r3, r2
 800559e:	3304      	adds	r3, #4
 80055a0:	f107 0210 	add.w	r2, r7, #16
 80055a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055a8:	e883 0003 	stmia.w	r3, {r0, r1}
        wp_buf->size++;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	601a      	str	r2, [r3, #0]
        if(wp_buf->size == 2)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d107      	bne.n	80055ce <add_wp+0x5a>
            wp_buf->to = 1;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    } else {
        printf("Error: Waypoint buffer is full.\n");
    }
}
 80055c6:	e002      	b.n	80055ce <add_wp+0x5a>
        printf("Error: Waypoint buffer is full.\n");
 80055c8:	4803      	ldr	r0, [pc, #12]	; (80055d8 <add_wp+0x64>)
 80055ca:	f00a feb5 	bl	8010338 <puts>
}
 80055ce:	bf00      	nop
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	08013c04 	.word	0x08013c04

080055dc <to_next>:

void to_next(struct waypoint_buffer * wp_buf) {
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
    if (wp_buf->to < wp_buf->size - 1) {
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	429a      	cmp	r2, r3
 80055f2:	da0d      	bge.n	8005610 <to_next+0x34>
        wp_buf->from++;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
        wp_buf->to++;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    }
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <clean>:

void clean(struct waypoint_buffer * wp_buf){
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
    wp_buf->size = 0;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]
    wp_buf->from = 0;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    wp_buf->to = 0;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
	...

08005648 <Reset_Handler>:
>>>>>>> Stashed changes

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
<<<<<<< Updated upstream
 8002d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d78:	f7fd fc88 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d7c:	480c      	ldr	r0, [pc, #48]	; (8002db0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d7e:	490d      	ldr	r1, [pc, #52]	; (8002db4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d80:	4a0d      	ldr	r2, [pc, #52]	; (8002db8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d84:	e002      	b.n	8002d8c <LoopCopyDataInit>

08002d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d8a:	3304      	adds	r3, #4

08002d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d90:	d3f9      	bcc.n	8002d86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d94:	4c0a      	ldr	r4, [pc, #40]	; (8002dc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d98:	e001      	b.n	8002d9e <LoopFillZerobss>

08002d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d9c:	3204      	adds	r2, #4

08002d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da0:	d3fb      	bcc.n	8002d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002da2:	f00a f93d 	bl	800d020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002da6:	f7fe f8f7 	bl	8000f98 <main>
  bx  lr
 8002daa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002db0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002db4:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8002db8:	080103e0 	.word	0x080103e0
  ldr r2, =_sbss
 8002dbc:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8002dc0:	2400506c 	.word	0x2400506c

08002dc4 <ADC3_IRQHandler>:
=======
 8005648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005680 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800564c:	f7fb f822 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005650:	480c      	ldr	r0, [pc, #48]	; (8005684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005652:	490d      	ldr	r1, [pc, #52]	; (8005688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005654:	4a0d      	ldr	r2, [pc, #52]	; (800568c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005658:	e002      	b.n	8005660 <LoopCopyDataInit>

0800565a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800565a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800565c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800565e:	3304      	adds	r3, #4

08005660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005664:	d3f9      	bcc.n	800565a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005666:	4a0a      	ldr	r2, [pc, #40]	; (8005690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005668:	4c0a      	ldr	r4, [pc, #40]	; (8005694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800566a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800566c:	e001      	b.n	8005672 <LoopFillZerobss>

0800566e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800566e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005670:	3204      	adds	r2, #4

08005672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005674:	d3fb      	bcc.n	800566e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005676:	f00a f8c3 	bl	800f800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800567a:	f7fd fe9b 	bl	80033b4 <main>
  bx  lr
 800567e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005680:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005684:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005688:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 800568c:	08014478 	.word	0x08014478
  ldr r2, =_sbss
 8005690:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 8005694:	2400540c 	.word	0x2400540c

08005698 <ADC3_IRQHandler>:
>>>>>>> Stashed changes
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< Updated upstream
 8002dc4:	e7fe      	b.n	8002dc4 <ADC3_IRQHandler>
	...

08002dc8 <HAL_Init>:
=======
 8005698:	e7fe      	b.n	8005698 <ADC3_IRQHandler>
	...

0800569c <HAL_Init>:
>>>>>>> Stashed changes
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
=======
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 8002dce:	2003      	movs	r0, #3
 8002dd0:	f000 f96e 	bl	80030b0 <HAL_NVIC_SetPriorityGrouping>
=======
 80056a2:	2003      	movs	r0, #3
 80056a4:	f000 f96e 	bl	8005984 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> Stashed changes

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
<<<<<<< Updated upstream
 8002dd4:	f001 f9d4 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <HAL_Init+0x68>)
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	4913      	ldr	r1, [pc, #76]	; (8002e34 <HAL_Init+0x6c>)
 8002de6:	5ccb      	ldrb	r3, [r1, r3]
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
 8002df0:	607b      	str	r3, [r7, #4]
=======
 80056a8:	f001 ff4c 	bl	8007544 <HAL_RCC_GetSysClockFreq>
 80056ac:	4602      	mov	r2, r0
 80056ae:	4b15      	ldr	r3, [pc, #84]	; (8005704 <HAL_Init+0x68>)
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	0a1b      	lsrs	r3, r3, #8
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	4913      	ldr	r1, [pc, #76]	; (8005708 <HAL_Init+0x6c>)
 80056ba:	5ccb      	ldrb	r3, [r1, r3]
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
 80056c4:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
<<<<<<< Updated upstream
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <HAL_Init+0x68>)
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	4a0e      	ldr	r2, [pc, #56]	; (8002e34 <HAL_Init+0x6c>)
 8002dfc:	5cd3      	ldrb	r3, [r2, r3]
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
 8002e08:	4a0b      	ldr	r2, [pc, #44]	; (8002e38 <HAL_Init+0x70>)
 8002e0a:	6013      	str	r3, [r2, #0]
=======
 80056c6:	4b0f      	ldr	r3, [pc, #60]	; (8005704 <HAL_Init+0x68>)
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	4a0e      	ldr	r2, [pc, #56]	; (8005708 <HAL_Init+0x6c>)
 80056d0:	5cd3      	ldrb	r3, [r2, r3]
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	fa22 f303 	lsr.w	r3, r2, r3
 80056dc:	4a0b      	ldr	r2, [pc, #44]	; (800570c <HAL_Init+0x70>)
 80056de:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
<<<<<<< Updated upstream
 8002e0c:	4a0b      	ldr	r2, [pc, #44]	; (8002e3c <HAL_Init+0x74>)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6013      	str	r3, [r2, #0]
=======
 80056e0:	4a0b      	ldr	r2, [pc, #44]	; (8005710 <HAL_Init+0x74>)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
<<<<<<< Updated upstream
 8002e12:	200f      	movs	r0, #15
 8002e14:	f000 f814 	bl	8002e40 <HAL_InitTick>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e002      	b.n	8002e28 <HAL_Init+0x60>
=======
 80056e6:	200f      	movs	r0, #15
 80056e8:	f000 f814 	bl	8005714 <HAL_InitTick>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e002      	b.n	80056fc <HAL_Init+0x60>
>>>>>>> Stashed changes
  }

  /* Init the low level hardware */
  HAL_MspInit();
<<<<<<< Updated upstream
 8002e22:	f7ff fc69 	bl	80026f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	58024400 	.word	0x58024400
 8002e34:	0800fd14 	.word	0x0800fd14
 8002e38:	24000004 	.word	0x24000004
 8002e3c:	24000000 	.word	0x24000000

08002e40 <HAL_InitTick>:
=======
 80056f6:	f7ff fbf3 	bl	8004ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	58024400 	.word	0x58024400
 8005708:	08013c88 	.word	0x08013c88
 800570c:	24000004 	.word	0x24000004
 8005710:	24000000 	.word	0x24000000

08005714 <HAL_InitTick>:
>>>>>>> Stashed changes
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002e48:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <HAL_InitTick+0x60>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e021      	b.n	8002e98 <HAL_InitTick+0x58>
=======
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800571c:	4b15      	ldr	r3, [pc, #84]	; (8005774 <HAL_InitTick+0x60>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e021      	b.n	800576c <HAL_InitTick+0x58>
>>>>>>> Stashed changes
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
<<<<<<< Updated upstream
 8002e54:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <HAL_InitTick+0x64>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <HAL_InitTick+0x60>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 f945 	bl	80030fa <HAL_SYSTICK_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e00e      	b.n	8002e98 <HAL_InitTick+0x58>
=======
 8005728:	4b13      	ldr	r3, [pc, #76]	; (8005778 <HAL_InitTick+0x64>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4b11      	ldr	r3, [pc, #68]	; (8005774 <HAL_InitTick+0x60>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	4619      	mov	r1, r3
 8005732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005736:	fbb3 f3f1 	udiv	r3, r3, r1
 800573a:	fbb2 f3f3 	udiv	r3, r2, r3
 800573e:	4618      	mov	r0, r3
 8005740:	f000 f945 	bl	80059ce <HAL_SYSTICK_Config>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e00e      	b.n	800576c <HAL_InitTick+0x58>
>>>>>>> Stashed changes
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< Updated upstream
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b0f      	cmp	r3, #15
 8002e7e:	d80a      	bhi.n	8002e96 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e80:	2200      	movs	r2, #0
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	f04f 30ff 	mov.w	r0, #4294967295
 8002e88:	f000 f91d 	bl	80030c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e8c:	4a06      	ldr	r2, [pc, #24]	; (8002ea8 <HAL_InitTick+0x68>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6013      	str	r3, [r2, #0]
=======
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b0f      	cmp	r3, #15
 8005752:	d80a      	bhi.n	800576a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005754:	2200      	movs	r2, #0
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	f04f 30ff 	mov.w	r0, #4294967295
 800575c:	f000 f91d 	bl	800599a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005760:	4a06      	ldr	r2, [pc, #24]	; (800577c <HAL_InitTick+0x68>)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8002e92:	2300      	movs	r3, #0
 8002e94:	e000      	b.n	8002e98 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	2400000c 	.word	0x2400000c
 8002ea4:	24000000 	.word	0x24000000
 8002ea8:	24000008 	.word	0x24000008

08002eac <HAL_IncTick>:
=======
 8005766:	2300      	movs	r3, #0
 8005768:	e000      	b.n	800576c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	24000014 	.word	0x24000014
 8005778:	24000000 	.word	0x24000000
 800577c:	24000010 	.word	0x24000010

08005780 <HAL_IncTick>:
>>>>>>> Stashed changes
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_IncTick+0x20>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_IncTick+0x24>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <HAL_IncTick+0x24>)
 8002ebe:	6013      	str	r3, [r2, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	2400000c 	.word	0x2400000c
 8002ed0:	24000534 	.word	0x24000534

08002ed4 <HAL_GetTick>:
=======
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005784:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <HAL_IncTick+0x20>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	461a      	mov	r2, r3
 800578a:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <HAL_IncTick+0x24>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4413      	add	r3, r2
 8005790:	4a04      	ldr	r2, [pc, #16]	; (80057a4 <HAL_IncTick+0x24>)
 8005792:	6013      	str	r3, [r2, #0]
}
 8005794:	bf00      	nop
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	24000014 	.word	0x24000014
 80057a4:	240009e8 	.word	0x240009e8

080057a8 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_GetTick+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	24000534 	.word	0x24000534

08002eec <HAL_Delay>:
=======
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  return uwTick;
 80057ac:	4b03      	ldr	r3, [pc, #12]	; (80057bc <HAL_GetTick+0x14>)
 80057ae:	681b      	ldr	r3, [r3, #0]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	240009e8 	.word	0x240009e8

080057c0 <HAL_Delay>:
>>>>>>> Stashed changes
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< Updated upstream
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef4:	f7ff ffee 	bl	8002ed4 <HAL_GetTick>
 8002ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d005      	beq.n	8002f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_Delay+0x44>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f12:	bf00      	nop
 8002f14:	f7ff ffde 	bl	8002ed4 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d8f7      	bhi.n	8002f14 <HAL_Delay+0x28>
  {
  }
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	2400000c 	.word	0x2400000c

08002f34 <HAL_GetREVID>:
=======
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057c8:	f7ff ffee 	bl	80057a8 <HAL_GetTick>
 80057cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d8:	d005      	beq.n	80057e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80057da:	4b0a      	ldr	r3, [pc, #40]	; (8005804 <HAL_Delay+0x44>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4413      	add	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80057e6:	bf00      	nop
 80057e8:	f7ff ffde 	bl	80057a8 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d8f7      	bhi.n	80057e8 <HAL_Delay+0x28>
  {
  }
}
 80057f8:	bf00      	nop
 80057fa:	bf00      	nop
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	24000014 	.word	0x24000014

08005808 <HAL_GetREVID>:
>>>>>>> Stashed changes
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
<<<<<<< Updated upstream
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <HAL_GetREVID+0x14>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0c1b      	lsrs	r3, r3, #16
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	5c001000 	.word	0x5c001000

08002f4c <__NVIC_SetPriorityGrouping>:
=======
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800580c:	4b03      	ldr	r3, [pc, #12]	; (800581c <HAL_GetREVID+0x14>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	0c1b      	lsrs	r3, r3, #16
}
 8005812:	4618      	mov	r0, r3
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	5c001000 	.word	0x5c001000

08005820 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <__NVIC_SetPriorityGrouping+0x40>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <__NVIC_SetPriorityGrouping+0x44>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f7a:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <__NVIC_SetPriorityGrouping+0x40>)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	60d3      	str	r3, [r2, #12]
}
 8002f80:	bf00      	nop
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000ed00 	.word	0xe000ed00
 8002f90:	05fa0000 	.word	0x05fa0000

08002f94 <__NVIC_GetPriorityGrouping>:
=======
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005830:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <__NVIC_SetPriorityGrouping+0x40>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800583c:	4013      	ands	r3, r2
 800583e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005848:	4b06      	ldr	r3, [pc, #24]	; (8005864 <__NVIC_SetPriorityGrouping+0x44>)
 800584a:	4313      	orrs	r3, r2
 800584c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800584e:	4a04      	ldr	r2, [pc, #16]	; (8005860 <__NVIC_SetPriorityGrouping+0x40>)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	60d3      	str	r3, [r2, #12]
}
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	e000ed00 	.word	0xe000ed00
 8005864:	05fa0000 	.word	0x05fa0000

08005868 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <__NVIC_GetPriorityGrouping+0x18>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	0a1b      	lsrs	r3, r3, #8
 8002f9e:	f003 0307 	and.w	r3, r3, #7
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <__NVIC_SetPriority>:
=======
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800586c:	4b04      	ldr	r3, [pc, #16]	; (8005880 <__NVIC_GetPriorityGrouping+0x18>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	0a1b      	lsrs	r3, r3, #8
 8005872:	f003 0307 	and.w	r3, r3, #7
}
 8005876:	4618      	mov	r0, r3
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	e000ed00 	.word	0xe000ed00

08005884 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	6039      	str	r1, [r7, #0]
 8002fba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	db0a      	blt.n	8002fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	490c      	ldr	r1, [pc, #48]	; (8002ffc <__NVIC_SetPriority+0x4c>)
 8002fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fce:	0112      	lsls	r2, r2, #4
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	4603      	mov	r3, r0
 800588c:	6039      	str	r1, [r7, #0]
 800588e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005894:	2b00      	cmp	r3, #0
 8005896:	db0a      	blt.n	80058ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	b2da      	uxtb	r2, r3
 800589c:	490c      	ldr	r1, [pc, #48]	; (80058d0 <__NVIC_SetPriority+0x4c>)
 800589e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058a2:	0112      	lsls	r2, r2, #4
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	440b      	add	r3, r1
 80058a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 8002fd8:	e00a      	b.n	8002ff0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	4908      	ldr	r1, [pc, #32]	; (8003000 <__NVIC_SetPriority+0x50>)
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	3b04      	subs	r3, #4
 8002fe8:	0112      	lsls	r2, r2, #4
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	440b      	add	r3, r1
 8002fee:	761a      	strb	r2, [r3, #24]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	e000e100 	.word	0xe000e100
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <NVIC_EncodePriority>:
=======
 80058ac:	e00a      	b.n	80058c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	4908      	ldr	r1, [pc, #32]	; (80058d4 <__NVIC_SetPriority+0x50>)
 80058b4:	88fb      	ldrh	r3, [r7, #6]
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	3b04      	subs	r3, #4
 80058bc:	0112      	lsls	r2, r2, #4
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	440b      	add	r3, r1
 80058c2:	761a      	strb	r2, [r3, #24]
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	e000e100 	.word	0xe000e100
 80058d4:	e000ed00 	.word	0xe000ed00

080058d8 <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	; 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	61fb      	str	r3, [r7, #28]
=======
 80058d8:	b480      	push	{r7}
 80058da:	b089      	sub	sp, #36	; 0x24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f1c3 0307 	rsb	r3, r3, #7
 800301e:	2b04      	cmp	r3, #4
 8003020:	bf28      	it	cs
 8003022:	2304      	movcs	r3, #4
 8003024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3304      	adds	r3, #4
 800302a:	2b06      	cmp	r3, #6
 800302c:	d902      	bls.n	8003034 <NVIC_EncodePriority+0x30>
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3b03      	subs	r3, #3
 8003032:	e000      	b.n	8003036 <NVIC_EncodePriority+0x32>
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	f04f 32ff 	mov.w	r2, #4294967295
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43da      	mvns	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	401a      	ands	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800304c:	f04f 31ff 	mov.w	r1, #4294967295
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	43d9      	mvns	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800305c:	4313      	orrs	r3, r2
         );
}
 800305e:	4618      	mov	r0, r3
 8003060:	3724      	adds	r7, #36	; 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <SysTick_Config>:
=======
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f1c3 0307 	rsb	r3, r3, #7
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	bf28      	it	cs
 80058f6:	2304      	movcs	r3, #4
 80058f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	3304      	adds	r3, #4
 80058fe:	2b06      	cmp	r3, #6
 8005900:	d902      	bls.n	8005908 <NVIC_EncodePriority+0x30>
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	3b03      	subs	r3, #3
 8005906:	e000      	b.n	800590a <NVIC_EncodePriority+0x32>
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800590c:	f04f 32ff 	mov.w	r2, #4294967295
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	43da      	mvns	r2, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	401a      	ands	r2, r3
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005920:	f04f 31ff 	mov.w	r1, #4294967295
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	fa01 f303 	lsl.w	r3, r1, r3
 800592a:	43d9      	mvns	r1, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005930:	4313      	orrs	r3, r2
         );
}
 8005932:	4618      	mov	r0, r3
 8005934:	3724      	adds	r7, #36	; 0x24
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
	...

08005940 <SysTick_Config>:
>>>>>>> Stashed changes
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< Updated upstream
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3b01      	subs	r3, #1
 8003078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800307c:	d301      	bcc.n	8003082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800307e:	2301      	movs	r3, #1
 8003080:	e00f      	b.n	80030a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003082:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <SysTick_Config+0x40>)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3b01      	subs	r3, #1
 8003088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800308a:	210f      	movs	r1, #15
 800308c:	f04f 30ff 	mov.w	r0, #4294967295
 8003090:	f7ff ff8e 	bl	8002fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <SysTick_Config+0x40>)
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800309a:	4b04      	ldr	r3, [pc, #16]	; (80030ac <SysTick_Config+0x40>)
 800309c:	2207      	movs	r2, #7
 800309e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	e000e010 	.word	0xe000e010

080030b0 <HAL_NVIC_SetPriorityGrouping>:
=======
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3b01      	subs	r3, #1
 800594c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005950:	d301      	bcc.n	8005956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005952:	2301      	movs	r3, #1
 8005954:	e00f      	b.n	8005976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005956:	4a0a      	ldr	r2, [pc, #40]	; (8005980 <SysTick_Config+0x40>)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3b01      	subs	r3, #1
 800595c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800595e:	210f      	movs	r1, #15
 8005960:	f04f 30ff 	mov.w	r0, #4294967295
 8005964:	f7ff ff8e 	bl	8005884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005968:	4b05      	ldr	r3, [pc, #20]	; (8005980 <SysTick_Config+0x40>)
 800596a:	2200      	movs	r2, #0
 800596c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800596e:	4b04      	ldr	r3, [pc, #16]	; (8005980 <SysTick_Config+0x40>)
 8005970:	2207      	movs	r2, #7
 8005972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	e000e010 	.word	0xe000e010

08005984 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
=======
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff ff47 	bl	8002f4c <__NVIC_SetPriorityGrouping>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_NVIC_SetPriority>:
=======
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff ff47 	bl	8005820 <__NVIC_SetPriorityGrouping>
}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4603      	mov	r3, r0
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	81fb      	strh	r3, [r7, #14]
=======
 800599a:	b580      	push	{r7, lr}
 800599c:	b086      	sub	sp, #24
 800599e:	af00      	add	r7, sp, #0
 80059a0:	4603      	mov	r3, r0
 80059a2:	60b9      	str	r1, [r7, #8]
 80059a4:	607a      	str	r2, [r7, #4]
 80059a6:	81fb      	strh	r3, [r7, #14]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 80030d4:	f7ff ff5e 	bl	8002f94 <__NVIC_GetPriorityGrouping>
 80030d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	6978      	ldr	r0, [r7, #20]
 80030e0:	f7ff ff90 	bl	8003004 <NVIC_EncodePriority>
 80030e4:	4602      	mov	r2, r0
 80030e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ff5f 	bl	8002fb0 <__NVIC_SetPriority>
}
 80030f2:	bf00      	nop
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_SYSTICK_Config>:
=======
 80059a8:	f7ff ff5e 	bl	8005868 <__NVIC_GetPriorityGrouping>
 80059ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	6978      	ldr	r0, [r7, #20]
 80059b4:	f7ff ff90 	bl	80058d8 <NVIC_EncodePriority>
 80059b8:	4602      	mov	r2, r0
 80059ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80059be:	4611      	mov	r1, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff ff5f 	bl	8005884 <__NVIC_SetPriority>
}
 80059c6:	bf00      	nop
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_SYSTICK_Config>:
>>>>>>> Stashed changes
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< Updated upstream
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff ffb2 	bl	800306c <SysTick_Config>
 8003108:	4603      	mov	r3, r0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <HAL_GPIO_Init>:
=======
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b082      	sub	sp, #8
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7ff ffb2 	bl	8005940 <SysTick_Config>
 80059dc:	4603      	mov	r3, r0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b098      	sub	sp, #96	; 0x60
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80059f0:	4a84      	ldr	r2, [pc, #528]	; (8005c04 <HAL_FDCAN_Init+0x21c>)
 80059f2:	f107 030c 	add.w	r3, r7, #12
 80059f6:	4611      	mov	r1, r2
 80059f8:	224c      	movs	r2, #76	; 0x4c
 80059fa:	4618      	mov	r0, r3
 80059fc:	f009 ff27 	bl	800f84e <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e1c6      	b.n	8005d98 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a7e      	ldr	r2, [pc, #504]	; (8005c08 <HAL_FDCAN_Init+0x220>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d106      	bne.n	8005a22 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fc f8ce 	bl	8001bd8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0210 	bic.w	r2, r2, #16
 8005a4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a4c:	f7ff feac 	bl	80057a8 <HAL_GetTick>
 8005a50:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005a52:	e014      	b.n	8005a7e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005a54:	f7ff fea8 	bl	80057a8 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b0a      	cmp	r3, #10
 8005a60:	d90d      	bls.n	8005a7e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a68:	f043 0201 	orr.w	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2203      	movs	r2, #3
 8005a76:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e18c      	b.n	8005d98 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d0e3      	beq.n	8005a54 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a9c:	f7ff fe84 	bl	80057a8 <HAL_GetTick>
 8005aa0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005aa2:	e014      	b.n	8005ace <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005aa4:	f7ff fe80 	bl	80057a8 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b0a      	cmp	r3, #10
 8005ab0:	d90d      	bls.n	8005ace <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ab8:	f043 0201 	orr.w	r2, r3, #1
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e164      	b.n	8005d98 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0e3      	beq.n	8005aa4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0202 	orr.w	r2, r2, #2
 8005aea:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	7c1b      	ldrb	r3, [r3, #16]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d108      	bne.n	8005b06 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b02:	619a      	str	r2, [r3, #24]
 8005b04:	e007      	b.n	8005b16 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	699a      	ldr	r2, [r3, #24]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b14:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	7c5b      	ldrb	r3, [r3, #17]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d108      	bne.n	8005b30 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	699a      	ldr	r2, [r3, #24]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b2c:	619a      	str	r2, [r3, #24]
 8005b2e:	e007      	b.n	8005b40 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b3e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	7c9b      	ldrb	r3, [r3, #18]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d108      	bne.n	8005b5a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b56:	619a      	str	r2, [r3, #24]
 8005b58:	e007      	b.n	8005b6a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699a      	ldr	r2, [r3, #24]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b68:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005b8e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0210 	bic.w	r2, r2, #16
 8005b9e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d108      	bne.n	8005bba <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0204 	orr.w	r2, r2, #4
 8005bb6:	619a      	str	r2, [r3, #24]
 8005bb8:	e030      	b.n	8005c1c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d02c      	beq.n	8005c1c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d020      	beq.n	8005c0c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699a      	ldr	r2, [r3, #24]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005bd8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691a      	ldr	r2, [r3, #16]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f042 0210 	orr.w	r2, r2, #16
 8005be8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d114      	bne.n	8005c1c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	699a      	ldr	r2, [r3, #24]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0220 	orr.w	r2, r2, #32
 8005c00:	619a      	str	r2, [r3, #24]
 8005c02:	e00b      	b.n	8005c1c <HAL_FDCAN_Init+0x234>
 8005c04:	08013c24 	.word	0x08013c24
 8005c08:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0220 	orr.w	r2, r2, #32
 8005c1a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c2c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c34:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005c44:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c46:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c50:	d115      	bne.n	8005c7e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c60:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c66:	3b01      	subs	r3, #1
 8005c68:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005c6a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	3b01      	subs	r3, #1
 8005c74:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005c7a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c7c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca4:	4413      	add	r3, r2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d011      	beq.n	8005cce <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005cb2:	f023 0107 	bic.w	r1, r3, #7
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	3360      	adds	r3, #96	; 0x60
 8005cbe:	443b      	add	r3, r7
 8005cc0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d011      	beq.n	8005cfa <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005cde:	f023 0107 	bic.w	r1, r3, #7
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	3360      	adds	r3, #96	; 0x60
 8005cea:	443b      	add	r3, r7
 8005cec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d012      	beq.n	8005d28 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005d0a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	3360      	adds	r3, #96	; 0x60
 8005d16:	443b      	add	r3, r7
 8005d18:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005d1c:	011a      	lsls	r2, r3, #4
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d012      	beq.n	8005d56 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005d38:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	3360      	adds	r3, #96	; 0x60
 8005d44:	443b      	add	r3, r7
 8005d46:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005d4a:	021a      	lsls	r2, r3, #8
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a11      	ldr	r2, [pc, #68]	; (8005da0 <HAL_FDCAN_Init+0x3b8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d107      	bne.n	8005d70 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f022 0203 	bic.w	r2, r2, #3
 8005d6e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fa1f 	bl	80061cc <FDCAN_CalcultateRamBlockAddresses>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005d94:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3760      	adds	r7, #96	; 0x60
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	4000a000 	.word	0x4000a000

08005da4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d111      	bne.n	8005ddc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0201 	bic.w	r2, r2, #1
 8005dce:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	e008      	b.n	8005dee <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005de2:	f043 0204 	orr.w	r2, r3, #4
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
  }
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
	...

08005dfc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b08b      	sub	sp, #44	; 0x2c
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005e14:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005e16:	7efb      	ldrb	r3, [r7, #27]
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	f040 814b 	bne.w	80060b4 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2b40      	cmp	r3, #64	; 0x40
 8005e22:	d14d      	bne.n	8005ec0 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e2c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d109      	bne.n	8005e48 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e3a:	f043 0220 	orr.w	r2, r3, #32
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e13e      	b.n	80060c6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d109      	bne.n	8005e6c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e12c      	b.n	80060c6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e74:	0e1b      	lsrs	r3, r3, #24
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d10b      	bne.n	8005e96 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e86:	0fdb      	lsrs	r3, r3, #31
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e90:	d101      	bne.n	8005e96 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005e92:	2301      	movs	r3, #1
 8005e94:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e9e:	0a1b      	lsrs	r3, r3, #8
 8005ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ea4:	69fa      	ldr	r2, [r7, #28]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb2:	69f9      	ldr	r1, [r7, #28]
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ebe:	e069      	b.n	8005f94 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2b41      	cmp	r3, #65	; 0x41
 8005ec4:	d14d      	bne.n	8005f62 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ece:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d109      	bne.n	8005eea <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005edc:	f043 0220 	orr.w	r2, r3, #32
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e0ed      	b.n	80060c6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e0db      	b.n	80060c6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f16:	0e1b      	lsrs	r3, r3, #24
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d10b      	bne.n	8005f38 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f28:	0fdb      	lsrs	r3, r3, #31
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f32:	d101      	bne.n	8005f38 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005f34:	2301      	movs	r3, #1
 8005f36:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f40:	0a1b      	lsrs	r3, r3, #8
 8005f42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	4413      	add	r3, r2
 8005f4a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f54:	69f9      	ldr	r1, [r7, #28]
 8005f56:	fb01 f303 	mul.w	r3, r1, r3
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f60:	e018      	b.n	8005f94 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d309      	bcc.n	8005f80 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f72:	f043 0220 	orr.w	r2, r3, #32
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0a2      	b.n	80060c6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	fb01 f303 	mul.w	r3, r1, r3
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d107      	bne.n	8005fb8 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	0c9b      	lsrs	r3, r3, #18
 8005fae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	e005      	b.n	8005fc4 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	3304      	adds	r3, #4
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	0e1b      	lsrs	r3, r3, #24
 8006016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	0fda      	lsrs	r2, r3, #31
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	3304      	adds	r3, #4
 800602c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006032:	2300      	movs	r3, #0
 8006034:	623b      	str	r3, [r7, #32]
 8006036:	e00a      	b.n	800604e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	441a      	add	r2, r3
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	440b      	add	r3, r1
 8006044:	7812      	ldrb	r2, [r2, #0]
 8006046:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	3301      	adds	r3, #1
 800604c:	623b      	str	r3, [r7, #32]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	0c1b      	lsrs	r3, r3, #16
 8006054:	4a1f      	ldr	r2, [pc, #124]	; (80060d4 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8006056:	5cd3      	ldrb	r3, [r2, r3]
 8006058:	461a      	mov	r2, r3
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	4293      	cmp	r3, r2
 800605e:	d3eb      	bcc.n	8006038 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2b40      	cmp	r3, #64	; 0x40
 8006064:	d105      	bne.n	8006072 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8006070:	e01e      	b.n	80060b0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b41      	cmp	r3, #65	; 0x41
 8006076:	d105      	bne.n	8006084 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8006082:	e015      	b.n	80060b0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b1f      	cmp	r3, #31
 8006088:	d808      	bhi.n	800609c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2101      	movs	r1, #1
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	fa01 f202 	lsl.w	r2, r1, r2
 8006096:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800609a:	e009      	b.n	80060b0 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f003 021f 	and.w	r2, r3, #31
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2101      	movs	r1, #1
 80060a8:	fa01 f202 	lsl.w	r2, r1, r2
 80060ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	e008      	b.n	80060c6 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060ba:	f043 0208 	orr.w	r2, r3, #8
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
  }
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	372c      	adds	r7, #44	; 0x2c
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	08013e0c 	.word	0x08013e0c

080060d8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80060ea:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80060ec:	7dfb      	ldrb	r3, [r7, #23]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d002      	beq.n	80060f8 <HAL_FDCAN_ActivateNotification+0x20>
 80060f2:	7dfb      	ldrb	r3, [r7, #23]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d155      	bne.n	80061a4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	4013      	ands	r3, r2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d108      	bne.n	8006118 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f042 0201 	orr.w	r2, r2, #1
 8006114:	65da      	str	r2, [r3, #92]	; 0x5c
 8006116:	e014      	b.n	8006142 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4013      	ands	r3, r2
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	429a      	cmp	r2, r3
 8006126:	d108      	bne.n	800613a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0202 	orr.w	r2, r2, #2
 8006136:	65da      	str	r2, [r3, #92]	; 0x5c
 8006138:	e003      	b.n	8006142 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2203      	movs	r2, #3
 8006140:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006148:	2b00      	cmp	r3, #0
 800614a:	d009      	beq.n	8006160 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	430a      	orrs	r2, r1
 800615c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	430a      	orrs	r2, r1
 800617a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <HAL_FDCAN_ActivateNotification+0xec>)
 8006188:	4013      	ands	r3, r2
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	430b      	orrs	r3, r1
 8006190:	6553      	str	r3, [r2, #84]	; 0x54
 8006192:	4b0d      	ldr	r3, [pc, #52]	; (80061c8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8006194:	695a      	ldr	r2, [r3, #20]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	0f9b      	lsrs	r3, r3, #30
 800619a:	490b      	ldr	r1, [pc, #44]	; (80061c8 <HAL_FDCAN_ActivateNotification+0xf0>)
 800619c:	4313      	orrs	r3, r2
 800619e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	e008      	b.n	80061b6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061aa:	f043 0202 	orr.w	r2, r3, #2
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
  }
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	371c      	adds	r7, #28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	3fcfffff 	.word	0x3fcfffff
 80061c8:	4000a800 	.word	0x4000a800

080061cc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80061e2:	4ba7      	ldr	r3, [pc, #668]	; (8006480 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	0091      	lsls	r1, r2, #2
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6812      	ldr	r2, [r2, #0]
 80061ee:	430b      	orrs	r3, r1
 80061f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061fc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	041a      	lsls	r2, r3, #16
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	4413      	add	r3, r2
 8006218:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006222:	4b97      	ldr	r3, [pc, #604]	; (8006480 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006224:	4013      	ands	r3, r2
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	0091      	lsls	r1, r2, #2
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6812      	ldr	r2, [r2, #0]
 800622e:	430b      	orrs	r3, r1
 8006230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006244:	041a      	lsls	r2, r3, #16
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	4413      	add	r3, r2
 800625a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006264:	4b86      	ldr	r3, [pc, #536]	; (8006480 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006266:	4013      	ands	r3, r2
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	0091      	lsls	r1, r2, #2
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6812      	ldr	r2, [r2, #0]
 8006270:	430b      	orrs	r3, r1
 8006272:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800627e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	041a      	lsls	r2, r3, #16
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800629a:	fb02 f303 	mul.w	r3, r2, r3
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	4413      	add	r3, r2
 80062a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80062ac:	4b74      	ldr	r3, [pc, #464]	; (8006480 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80062ae:	4013      	ands	r3, r2
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	0091      	lsls	r1, r2, #2
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	430b      	orrs	r3, r1
 80062ba:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062c6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ce:	041a      	lsls	r2, r3, #16
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80062e2:	fb02 f303 	mul.w	r3, r2, r3
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	4413      	add	r3, r2
 80062ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80062f4:	4b62      	ldr	r3, [pc, #392]	; (8006480 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80062f6:	4013      	ands	r3, r2
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	0091      	lsls	r1, r2, #2
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6812      	ldr	r2, [r2, #0]
 8006300:	430b      	orrs	r3, r1
 8006302:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800630e:	fb02 f303 	mul.w	r3, r2, r3
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	4413      	add	r3, r2
 8006316:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006320:	4b57      	ldr	r3, [pc, #348]	; (8006480 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006322:	4013      	ands	r3, r2
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	0091      	lsls	r1, r2, #2
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6812      	ldr	r2, [r2, #0]
 800632c:	430b      	orrs	r3, r1
 800632e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800633a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006342:	041a      	lsls	r2, r3, #16
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	4413      	add	r3, r2
 8006358:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006362:	4b47      	ldr	r3, [pc, #284]	; (8006480 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006364:	4013      	ands	r3, r2
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	0091      	lsls	r1, r2, #2
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	430b      	orrs	r3, r1
 8006370:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800637c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006384:	041a      	lsls	r2, r3, #16
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006398:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063a0:	061a      	lsls	r2, r3, #24
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063b0:	4b34      	ldr	r3, [pc, #208]	; (8006484 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80063b2:	4413      	add	r3, r2
 80063b4:	009a      	lsls	r2, r3, #2
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	441a      	add	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	441a      	add	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80063e6:	fb01 f303 	mul.w	r3, r1, r3
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	441a      	add	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80063fe:	fb01 f303 	mul.w	r3, r1, r3
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	441a      	add	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006416:	fb01 f303 	mul.w	r3, r1, r3
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	441a      	add	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	441a      	add	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006446:	fb01 f303 	mul.w	r3, r1, r3
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	441a      	add	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006462:	fb01 f303 	mul.w	r3, r1, r3
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	441a      	add	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006476:	4a04      	ldr	r2, [pc, #16]	; (8006488 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d915      	bls.n	80064a8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800647c:	e006      	b.n	800648c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800647e:	bf00      	nop
 8006480:	ffff0003 	.word	0xffff0003
 8006484:	10002b00 	.word	0x10002b00
 8006488:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006492:	f043 0220 	orr.w	r2, r3, #32
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2203      	movs	r2, #3
 80064a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e010      	b.n	80064ca <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	e005      	b.n	80064bc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3304      	adds	r3, #4
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d3f3      	bcc.n	80064b0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop

080064d8 <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	; 0x24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
=======
 80064d8:	b480      	push	{r7}
 80064da:	b089      	sub	sp, #36	; 0x24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
<<<<<<< Updated upstream
 8003122:	4b89      	ldr	r3, [pc, #548]	; (8003348 <HAL_GPIO_Init+0x234>)
 8003124:	617b      	str	r3, [r7, #20]
=======
 80064e6:	4b89      	ldr	r3, [pc, #548]	; (800670c <HAL_GPIO_Init+0x234>)
 80064e8:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
<<<<<<< Updated upstream
 8003126:	e194      	b.n	8003452 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	2101      	movs	r1, #1
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 8186 	beq.w	800344c <HAL_GPIO_Init+0x338>
=======
 80064ea:	e194      	b.n	8006816 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	2101      	movs	r1, #1
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	fa01 f303 	lsl.w	r3, r1, r3
 80064f8:	4013      	ands	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 8186 	beq.w	8006810 <HAL_GPIO_Init+0x338>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< Updated upstream
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	2b01      	cmp	r3, #1
 800314a:	d005      	beq.n	8003158 <HAL_GPIO_Init+0x44>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d130      	bne.n	80031ba <HAL_GPIO_Init+0xa6>
=======
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f003 0303 	and.w	r3, r3, #3
 800650c:	2b01      	cmp	r3, #1
 800650e:	d005      	beq.n	800651c <HAL_GPIO_Init+0x44>
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f003 0303 	and.w	r3, r3, #3
 8006518:	2b02      	cmp	r3, #2
 800651a:	d130      	bne.n	800657e <HAL_GPIO_Init+0xa6>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< Updated upstream
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	2203      	movs	r2, #3
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800318e:	2201      	movs	r2, #1
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	f003 0201 	and.w	r2, r3, #1
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d017      	beq.n	80031f6 <HAL_GPIO_Init+0xe2>
=======
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	2203      	movs	r2, #3
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	43db      	mvns	r3, r3
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4013      	ands	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	68da      	ldr	r2, [r3, #12]
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	fa02 f303 	lsl.w	r3, r2, r3
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	4313      	orrs	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006552:	2201      	movs	r2, #1
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	43db      	mvns	r3, r3
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	4013      	ands	r3, r2
 8006560:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	091b      	lsrs	r3, r3, #4
 8006568:	f003 0201 	and.w	r2, r3, #1
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	fa02 f303 	lsl.w	r3, r2, r3
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	4313      	orrs	r3, r2
 8006576:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f003 0303 	and.w	r3, r3, #3
 8006586:	2b03      	cmp	r3, #3
 8006588:	d017      	beq.n	80065ba <HAL_GPIO_Init+0xe2>
>>>>>>> Stashed changes
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	2203      	movs	r2, #3
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	60da      	str	r2, [r3, #12]
=======
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	2203      	movs	r2, #3
 8006596:	fa02 f303 	lsl.w	r3, r2, r3
 800659a:	43db      	mvns	r3, r3
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	4013      	ands	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	fa02 f303 	lsl.w	r3, r2, r3
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d123      	bne.n	800324a <HAL_GPIO_Init+0x136>
=======
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d123      	bne.n	800660e <HAL_GPIO_Init+0x136>
>>>>>>> Stashed changes
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< Updated upstream
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	08da      	lsrs	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3208      	adds	r2, #8
 800320a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800320e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	220f      	movs	r2, #15
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	08da      	lsrs	r2, r3, #3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3208      	adds	r2, #8
 8003244:	69b9      	ldr	r1, [r7, #24]
 8003246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	08da      	lsrs	r2, r3, #3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	3208      	adds	r2, #8
 80065ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	220f      	movs	r2, #15
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	43db      	mvns	r3, r3
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	4013      	ands	r3, r2
 80065e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	691a      	ldr	r2, [r3, #16]
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	f003 0307 	and.w	r3, r3, #7
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	08da      	lsrs	r2, r3, #3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3208      	adds	r2, #8
 8006608:	69b9      	ldr	r1, [r7, #24]
 800660a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	2203      	movs	r2, #3
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 0203 	and.w	r2, r3, #3
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	601a      	str	r2, [r3, #0]
=======
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	2203      	movs	r2, #3
 800661a:	fa02 f303 	lsl.w	r3, r2, r3
 800661e:	43db      	mvns	r3, r3
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	4013      	ands	r3, r2
 8006624:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f003 0203 	and.w	r2, r3, #3
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	fa02 f303 	lsl.w	r3, r2, r3
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	4313      	orrs	r3, r2
 800663a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< Updated upstream
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 80e0 	beq.w	800344c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328c:	4b2f      	ldr	r3, [pc, #188]	; (800334c <HAL_GPIO_Init+0x238>)
 800328e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003292:	4a2e      	ldr	r2, [pc, #184]	; (800334c <HAL_GPIO_Init+0x238>)
 8003294:	f043 0302 	orr.w	r3, r3, #2
 8003298:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800329c:	4b2b      	ldr	r3, [pc, #172]	; (800334c <HAL_GPIO_Init+0x238>)
 800329e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032aa:	4a29      	ldr	r2, [pc, #164]	; (8003350 <HAL_GPIO_Init+0x23c>)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	089b      	lsrs	r3, r3, #2
 80032b0:	3302      	adds	r3, #2
 80032b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	220f      	movs	r2, #15
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a20      	ldr	r2, [pc, #128]	; (8003354 <HAL_GPIO_Init+0x240>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d052      	beq.n	800337c <HAL_GPIO_Init+0x268>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1f      	ldr	r2, [pc, #124]	; (8003358 <HAL_GPIO_Init+0x244>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d031      	beq.n	8003342 <HAL_GPIO_Init+0x22e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a1e      	ldr	r2, [pc, #120]	; (800335c <HAL_GPIO_Init+0x248>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d02b      	beq.n	800333e <HAL_GPIO_Init+0x22a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <HAL_GPIO_Init+0x24c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d025      	beq.n	800333a <HAL_GPIO_Init+0x226>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <HAL_GPIO_Init+0x250>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01f      	beq.n	8003336 <HAL_GPIO_Init+0x222>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a1b      	ldr	r2, [pc, #108]	; (8003368 <HAL_GPIO_Init+0x254>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d019      	beq.n	8003332 <HAL_GPIO_Init+0x21e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a1a      	ldr	r2, [pc, #104]	; (800336c <HAL_GPIO_Init+0x258>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <HAL_GPIO_Init+0x21a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a19      	ldr	r2, [pc, #100]	; (8003370 <HAL_GPIO_Init+0x25c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00d      	beq.n	800332a <HAL_GPIO_Init+0x216>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a18      	ldr	r2, [pc, #96]	; (8003374 <HAL_GPIO_Init+0x260>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d007      	beq.n	8003326 <HAL_GPIO_Init+0x212>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a17      	ldr	r2, [pc, #92]	; (8003378 <HAL_GPIO_Init+0x264>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d101      	bne.n	8003322 <HAL_GPIO_Init+0x20e>
 800331e:	2309      	movs	r3, #9
 8003320:	e02d      	b.n	800337e <HAL_GPIO_Init+0x26a>
 8003322:	230a      	movs	r3, #10
 8003324:	e02b      	b.n	800337e <HAL_GPIO_Init+0x26a>
 8003326:	2308      	movs	r3, #8
 8003328:	e029      	b.n	800337e <HAL_GPIO_Init+0x26a>
 800332a:	2307      	movs	r3, #7
 800332c:	e027      	b.n	800337e <HAL_GPIO_Init+0x26a>
 800332e:	2306      	movs	r3, #6
 8003330:	e025      	b.n	800337e <HAL_GPIO_Init+0x26a>
 8003332:	2305      	movs	r3, #5
 8003334:	e023      	b.n	800337e <HAL_GPIO_Init+0x26a>
 8003336:	2304      	movs	r3, #4
 8003338:	e021      	b.n	800337e <HAL_GPIO_Init+0x26a>
 800333a:	2303      	movs	r3, #3
 800333c:	e01f      	b.n	800337e <HAL_GPIO_Init+0x26a>
 800333e:	2302      	movs	r3, #2
 8003340:	e01d      	b.n	800337e <HAL_GPIO_Init+0x26a>
 8003342:	2301      	movs	r3, #1
 8003344:	e01b      	b.n	800337e <HAL_GPIO_Init+0x26a>
 8003346:	bf00      	nop
 8003348:	58000080 	.word	0x58000080
 800334c:	58024400 	.word	0x58024400
 8003350:	58000400 	.word	0x58000400
 8003354:	58020000 	.word	0x58020000
 8003358:	58020400 	.word	0x58020400
 800335c:	58020800 	.word	0x58020800
 8003360:	58020c00 	.word	0x58020c00
 8003364:	58021000 	.word	0x58021000
 8003368:	58021400 	.word	0x58021400
 800336c:	58021800 	.word	0x58021800
 8003370:	58021c00 	.word	0x58021c00
 8003374:	58022000 	.word	0x58022000
 8003378:	58022400 	.word	0x58022400
 800337c:	2300      	movs	r3, #0
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	f002 0203 	and.w	r2, r2, #3
 8003384:	0092      	lsls	r2, r2, #2
 8003386:	4093      	lsls	r3, r2
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800338e:	4938      	ldr	r1, [pc, #224]	; (8003470 <HAL_GPIO_Init+0x35c>)
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	3302      	adds	r3, #2
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800339c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80033c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80033ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80033f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	43db      	mvns	r3, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4013      	ands	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	601a      	str	r2, [r3, #0]
=======
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 80e0 	beq.w	8006810 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006650:	4b2f      	ldr	r3, [pc, #188]	; (8006710 <HAL_GPIO_Init+0x238>)
 8006652:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006656:	4a2e      	ldr	r2, [pc, #184]	; (8006710 <HAL_GPIO_Init+0x238>)
 8006658:	f043 0302 	orr.w	r3, r3, #2
 800665c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006660:	4b2b      	ldr	r3, [pc, #172]	; (8006710 <HAL_GPIO_Init+0x238>)
 8006662:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800666e:	4a29      	ldr	r2, [pc, #164]	; (8006714 <HAL_GPIO_Init+0x23c>)
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	089b      	lsrs	r3, r3, #2
 8006674:	3302      	adds	r3, #2
 8006676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800667a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	220f      	movs	r2, #15
 8006686:	fa02 f303 	lsl.w	r3, r2, r3
 800668a:	43db      	mvns	r3, r3
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	4013      	ands	r3, r2
 8006690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a20      	ldr	r2, [pc, #128]	; (8006718 <HAL_GPIO_Init+0x240>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d052      	beq.n	8006740 <HAL_GPIO_Init+0x268>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a1f      	ldr	r2, [pc, #124]	; (800671c <HAL_GPIO_Init+0x244>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d031      	beq.n	8006706 <HAL_GPIO_Init+0x22e>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a1e      	ldr	r2, [pc, #120]	; (8006720 <HAL_GPIO_Init+0x248>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d02b      	beq.n	8006702 <HAL_GPIO_Init+0x22a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a1d      	ldr	r2, [pc, #116]	; (8006724 <HAL_GPIO_Init+0x24c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d025      	beq.n	80066fe <HAL_GPIO_Init+0x226>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a1c      	ldr	r2, [pc, #112]	; (8006728 <HAL_GPIO_Init+0x250>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01f      	beq.n	80066fa <HAL_GPIO_Init+0x222>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a1b      	ldr	r2, [pc, #108]	; (800672c <HAL_GPIO_Init+0x254>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d019      	beq.n	80066f6 <HAL_GPIO_Init+0x21e>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a1a      	ldr	r2, [pc, #104]	; (8006730 <HAL_GPIO_Init+0x258>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <HAL_GPIO_Init+0x21a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a19      	ldr	r2, [pc, #100]	; (8006734 <HAL_GPIO_Init+0x25c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d00d      	beq.n	80066ee <HAL_GPIO_Init+0x216>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a18      	ldr	r2, [pc, #96]	; (8006738 <HAL_GPIO_Init+0x260>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d007      	beq.n	80066ea <HAL_GPIO_Init+0x212>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a17      	ldr	r2, [pc, #92]	; (800673c <HAL_GPIO_Init+0x264>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d101      	bne.n	80066e6 <HAL_GPIO_Init+0x20e>
 80066e2:	2309      	movs	r3, #9
 80066e4:	e02d      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 80066e6:	230a      	movs	r3, #10
 80066e8:	e02b      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 80066ea:	2308      	movs	r3, #8
 80066ec:	e029      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 80066ee:	2307      	movs	r3, #7
 80066f0:	e027      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 80066f2:	2306      	movs	r3, #6
 80066f4:	e025      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 80066f6:	2305      	movs	r3, #5
 80066f8:	e023      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 80066fa:	2304      	movs	r3, #4
 80066fc:	e021      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 80066fe:	2303      	movs	r3, #3
 8006700:	e01f      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 8006702:	2302      	movs	r3, #2
 8006704:	e01d      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 8006706:	2301      	movs	r3, #1
 8006708:	e01b      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 800670a:	bf00      	nop
 800670c:	58000080 	.word	0x58000080
 8006710:	58024400 	.word	0x58024400
 8006714:	58000400 	.word	0x58000400
 8006718:	58020000 	.word	0x58020000
 800671c:	58020400 	.word	0x58020400
 8006720:	58020800 	.word	0x58020800
 8006724:	58020c00 	.word	0x58020c00
 8006728:	58021000 	.word	0x58021000
 800672c:	58021400 	.word	0x58021400
 8006730:	58021800 	.word	0x58021800
 8006734:	58021c00 	.word	0x58021c00
 8006738:	58022000 	.word	0x58022000
 800673c:	58022400 	.word	0x58022400
 8006740:	2300      	movs	r3, #0
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	f002 0203 	and.w	r2, r2, #3
 8006748:	0092      	lsls	r2, r2, #2
 800674a:	4093      	lsls	r3, r2
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	4313      	orrs	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006752:	4938      	ldr	r1, [pc, #224]	; (8006834 <HAL_GPIO_Init+0x35c>)
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	089b      	lsrs	r3, r3, #2
 8006758:	3302      	adds	r3, #2
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	43db      	mvns	r3, r3
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	4013      	ands	r3, r2
 8006770:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	4313      	orrs	r3, r2
 8006784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800678e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	43db      	mvns	r3, r3
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	4013      	ands	r3, r2
 800679e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80067b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	43db      	mvns	r3, r3
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	4013      	ands	r3, r2
 80067ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	43db      	mvns	r3, r3
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	4013      	ands	r3, r2
 80067f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	4313      	orrs	r3, r2
 8006808:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
      }
    }

    position++;
<<<<<<< Updated upstream
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	3301      	adds	r3, #1
 8003450:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	fa22 f303 	lsr.w	r3, r2, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	f47f ae63 	bne.w	8003128 <HAL_GPIO_Init+0x14>
  }
}
 8003462:	bf00      	nop
 8003464:	bf00      	nop
 8003466:	3724      	adds	r7, #36	; 0x24
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	58000400 	.word	0x58000400

08003474 <HAL_GPIO_WritePin>:
=======
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	3301      	adds	r3, #1
 8006814:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	fa22 f303 	lsr.w	r3, r2, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	f47f ae63 	bne.w	80064ec <HAL_GPIO_Init+0x14>
  }
}
 8006826:	bf00      	nop
 8006828:	bf00      	nop
 800682a:	3724      	adds	r7, #36	; 0x24
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	58000400 	.word	0x58000400

08006838 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	807b      	strh	r3, [r7, #2]
 8003480:	4613      	mov	r3, r2
 8003482:	707b      	strb	r3, [r7, #1]
=======
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	807b      	strh	r3, [r7, #2]
 8006844:	4613      	mov	r3, r2
 8006846:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 8003484:	787b      	ldrb	r3, [r7, #1]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800348a:	887a      	ldrh	r2, [r7, #2]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	619a      	str	r2, [r3, #24]
=======
 8006848:	787b      	ldrb	r3, [r7, #1]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800684e:	887a      	ldrh	r2, [r7, #2]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
<<<<<<< Updated upstream
 8003490:	e003      	b.n	800349a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003492:	887b      	ldrh	r3, [r7, #2]
 8003494:	041a      	lsls	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	619a      	str	r2, [r3, #24]
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_HSEM_FastTake>:
=======
 8006854:	e003      	b.n	800685e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006856:	887b      	ldrh	r3, [r7, #2]
 8006858:	041a      	lsls	r2, r3, #16
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	619a      	str	r2, [r3, #24]
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
	...

0800686c <HAL_HSEM_FastTake>:
>>>>>>> Stashed changes
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
<<<<<<< Updated upstream
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
=======
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
<<<<<<< Updated upstream
 80034b0:	4a08      	ldr	r2, [pc, #32]	; (80034d4 <HAL_HSEM_FastTake+0x2c>)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3320      	adds	r3, #32
 80034b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ba:	4a07      	ldr	r2, [pc, #28]	; (80034d8 <HAL_HSEM_FastTake+0x30>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d101      	bne.n	80034c4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	e000      	b.n	80034c6 <HAL_HSEM_FastTake+0x1e>
=======
 8006874:	4a08      	ldr	r2, [pc, #32]	; (8006898 <HAL_HSEM_FastTake+0x2c>)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3320      	adds	r3, #32
 800687a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800687e:	4a07      	ldr	r2, [pc, #28]	; (800689c <HAL_HSEM_FastTake+0x30>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d101      	bne.n	8006888 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	e000      	b.n	800688a <HAL_HSEM_FastTake+0x1e>
>>>>>>> Stashed changes
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
<<<<<<< Updated upstream
 80034c4:	2301      	movs	r3, #1
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	58026400 	.word	0x58026400
 80034d8:	80000300 	.word	0x80000300

080034dc <HAL_HSEM_Release>:
=======
 8006888:	2301      	movs	r3, #1
}
 800688a:	4618      	mov	r0, r3
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	58026400 	.word	0x58026400
 800689c:	80000300 	.word	0x80000300

080068a0 <HAL_HSEM_Release>:
>>>>>>> Stashed changes
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
<<<<<<< Updated upstream
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
=======
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
<<<<<<< Updated upstream
 80034e6:	4906      	ldr	r1, [pc, #24]	; (8003500 <HAL_HSEM_Release+0x24>)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	58026400 	.word	0x58026400

08003504 <HAL_PWREx_ConfigSupply>:
=======
 80068aa:	4906      	ldr	r1, [pc, #24]	; (80068c4 <HAL_HSEM_Release+0x24>)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	58026400 	.word	0x58026400

080068c8 <HAL_PWREx_ConfigSupply>:
>>>>>>> Stashed changes
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
<<<<<<< Updated upstream
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
=======
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
<<<<<<< Updated upstream
 800350c:	4b29      	ldr	r3, [pc, #164]	; (80035b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	2b06      	cmp	r3, #6
 8003516:	d00a      	beq.n	800352e <HAL_PWREx_ConfigSupply+0x2a>
=======
 80068d0:	4b29      	ldr	r3, [pc, #164]	; (8006978 <HAL_PWREx_ConfigSupply+0xb0>)
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	2b06      	cmp	r3, #6
 80068da:	d00a      	beq.n	80068f2 <HAL_PWREx_ConfigSupply+0x2a>
>>>>>>> Stashed changes
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
<<<<<<< Updated upstream
 8003518:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	429a      	cmp	r2, r3
 8003524:	d001      	beq.n	800352a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e040      	b.n	80035ac <HAL_PWREx_ConfigSupply+0xa8>
=======
 80068dc:	4b26      	ldr	r3, [pc, #152]	; (8006978 <HAL_PWREx_ConfigSupply+0xb0>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d001      	beq.n	80068ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e040      	b.n	8006970 <HAL_PWREx_ConfigSupply+0xa8>
>>>>>>> Stashed changes
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
<<<<<<< Updated upstream
 800352a:	2300      	movs	r3, #0
 800352c:	e03e      	b.n	80035ac <HAL_PWREx_ConfigSupply+0xa8>
=======
 80068ee:	2300      	movs	r3, #0
 80068f0:	e03e      	b.n	8006970 <HAL_PWREx_ConfigSupply+0xa8>
>>>>>>> Stashed changes
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
<<<<<<< Updated upstream
 800352e:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003536:	491f      	ldr	r1, [pc, #124]	; (80035b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4313      	orrs	r3, r2
 800353c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800353e:	f7ff fcc9 	bl	8002ed4 <HAL_GetTick>
 8003542:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003544:	e009      	b.n	800355a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003546:	f7ff fcc5 	bl	8002ed4 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003554:	d901      	bls.n	800355a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e028      	b.n	80035ac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800355a:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003566:	d1ee      	bne.n	8003546 <HAL_PWREx_ConfigSupply+0x42>
=======
 80068f2:	4b21      	ldr	r3, [pc, #132]	; (8006978 <HAL_PWREx_ConfigSupply+0xb0>)
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80068fa:	491f      	ldr	r1, [pc, #124]	; (8006978 <HAL_PWREx_ConfigSupply+0xb0>)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006902:	f7fe ff51 	bl	80057a8 <HAL_GetTick>
 8006906:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006908:	e009      	b.n	800691e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800690a:	f7fe ff4d 	bl	80057a8 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006918:	d901      	bls.n	800691e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e028      	b.n	8006970 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800691e:	4b16      	ldr	r3, [pc, #88]	; (8006978 <HAL_PWREx_ConfigSupply+0xb0>)
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800692a:	d1ee      	bne.n	800690a <HAL_PWREx_ConfigSupply+0x42>
>>>>>>> Stashed changes
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
<<<<<<< Updated upstream
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b1e      	cmp	r3, #30
 800356c:	d008      	beq.n	8003580 <HAL_PWREx_ConfigSupply+0x7c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b2e      	cmp	r3, #46	; 0x2e
 8003572:	d005      	beq.n	8003580 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b1d      	cmp	r3, #29
 8003578:	d002      	beq.n	8003580 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b2d      	cmp	r3, #45	; 0x2d
 800357e:	d114      	bne.n	80035aa <HAL_PWREx_ConfigSupply+0xa6>
=======
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b1e      	cmp	r3, #30
 8006930:	d008      	beq.n	8006944 <HAL_PWREx_ConfigSupply+0x7c>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b2e      	cmp	r3, #46	; 0x2e
 8006936:	d005      	beq.n	8006944 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b1d      	cmp	r3, #29
 800693c:	d002      	beq.n	8006944 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b2d      	cmp	r3, #45	; 0x2d
 8006942:	d114      	bne.n	800696e <HAL_PWREx_ConfigSupply+0xa6>
>>>>>>> Stashed changes
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
<<<<<<< Updated upstream
 8003580:	f7ff fca8 	bl	8002ed4 <HAL_GetTick>
 8003584:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003586:	e009      	b.n	800359c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003588:	f7ff fca4 	bl	8002ed4 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003596:	d901      	bls.n	800359c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e007      	b.n	80035ac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a8:	d1ee      	bne.n	8003588 <HAL_PWREx_ConfigSupply+0x84>
=======
 8006944:	f7fe ff30 	bl	80057a8 <HAL_GetTick>
 8006948:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800694a:	e009      	b.n	8006960 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800694c:	f7fe ff2c 	bl	80057a8 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800695a:	d901      	bls.n	8006960 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e007      	b.n	8006970 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006960:	4b05      	ldr	r3, [pc, #20]	; (8006978 <HAL_PWREx_ConfigSupply+0xb0>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800696c:	d1ee      	bne.n	800694c <HAL_PWREx_ConfigSupply+0x84>
>>>>>>> Stashed changes
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
<<<<<<< Updated upstream
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	58024800 	.word	0x58024800

080035b8 <HAL_RCC_OscConfig>:
=======
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	58024800 	.word	0x58024800

0800697c <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08c      	sub	sp, #48	; 0x30
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
=======
 800697c:	b580      	push	{r7, lr}
 800697e:	b08c      	sub	sp, #48	; 0x30
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d102      	bne.n	80035cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f000 bc1d 	b.w	8003e06 <HAL_RCC_OscConfig+0x84e>
=======
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d102      	bne.n	8006990 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	f000 bc1d 	b.w	80071ca <HAL_RCC_OscConfig+0x84e>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8087 	beq.w	80036e8 <HAL_RCC_OscConfig+0x130>
=======
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 8087 	beq.w	8006aac <HAL_RCC_OscConfig+0x130>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 80035da:	4b99      	ldr	r3, [pc, #612]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035e4:	4b96      	ldr	r3, [pc, #600]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80035ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ec:	2b10      	cmp	r3, #16
 80035ee:	d007      	beq.n	8003600 <HAL_RCC_OscConfig+0x48>
 80035f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f2:	2b18      	cmp	r3, #24
 80035f4:	d110      	bne.n	8003618 <HAL_RCC_OscConfig+0x60>
 80035f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d10b      	bne.n	8003618 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003600:	4b8f      	ldr	r3, [pc, #572]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d06c      	beq.n	80036e6 <HAL_RCC_OscConfig+0x12e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d168      	bne.n	80036e6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e3f6      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
=======
 800699e:	4b99      	ldr	r3, [pc, #612]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069a8:	4b96      	ldr	r3, [pc, #600]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 80069aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80069ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b0:	2b10      	cmp	r3, #16
 80069b2:	d007      	beq.n	80069c4 <HAL_RCC_OscConfig+0x48>
 80069b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b6:	2b18      	cmp	r3, #24
 80069b8:	d110      	bne.n	80069dc <HAL_RCC_OscConfig+0x60>
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	f003 0303 	and.w	r3, r3, #3
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d10b      	bne.n	80069dc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069c4:	4b8f      	ldr	r3, [pc, #572]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d06c      	beq.n	8006aaa <HAL_RCC_OscConfig+0x12e>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d168      	bne.n	8006aaa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e3f6      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003620:	d106      	bne.n	8003630 <HAL_RCC_OscConfig+0x78>
 8003622:	4b87      	ldr	r3, [pc, #540]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a86      	ldr	r2, [pc, #536]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 8003628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	e02e      	b.n	800368e <HAL_RCC_OscConfig+0xd6>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10c      	bne.n	8003652 <HAL_RCC_OscConfig+0x9a>
 8003638:	4b81      	ldr	r3, [pc, #516]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a80      	ldr	r2, [pc, #512]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 800363e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b7e      	ldr	r3, [pc, #504]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a7d      	ldr	r2, [pc, #500]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 800364a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	e01d      	b.n	800368e <HAL_RCC_OscConfig+0xd6>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800365a:	d10c      	bne.n	8003676 <HAL_RCC_OscConfig+0xbe>
 800365c:	4b78      	ldr	r3, [pc, #480]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a77      	ldr	r2, [pc, #476]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 8003662:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	4b75      	ldr	r3, [pc, #468]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a74      	ldr	r2, [pc, #464]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 800366e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	e00b      	b.n	800368e <HAL_RCC_OscConfig+0xd6>
 8003676:	4b72      	ldr	r3, [pc, #456]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a71      	ldr	r2, [pc, #452]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 800367c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b6f      	ldr	r3, [pc, #444]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a6e      	ldr	r2, [pc, #440]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 8003688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800368c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d013      	beq.n	80036be <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7ff fc1d 	bl	8002ed4 <HAL_GetTick>
 800369a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800369e:	f7ff fc19 	bl	8002ed4 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b64      	cmp	r3, #100	; 0x64
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e3aa      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036b0:	4b63      	ldr	r3, [pc, #396]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0xe6>
 80036bc:	e014      	b.n	80036e8 <HAL_RCC_OscConfig+0x130>
=======
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069e4:	d106      	bne.n	80069f4 <HAL_RCC_OscConfig+0x78>
 80069e6:	4b87      	ldr	r3, [pc, #540]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a86      	ldr	r2, [pc, #536]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 80069ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	e02e      	b.n	8006a52 <HAL_RCC_OscConfig+0xd6>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10c      	bne.n	8006a16 <HAL_RCC_OscConfig+0x9a>
 80069fc:	4b81      	ldr	r3, [pc, #516]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a80      	ldr	r2, [pc, #512]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	4b7e      	ldr	r3, [pc, #504]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a7d      	ldr	r2, [pc, #500]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	e01d      	b.n	8006a52 <HAL_RCC_OscConfig+0xd6>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a1e:	d10c      	bne.n	8006a3a <HAL_RCC_OscConfig+0xbe>
 8006a20:	4b78      	ldr	r3, [pc, #480]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a77      	ldr	r2, [pc, #476]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	4b75      	ldr	r3, [pc, #468]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a74      	ldr	r2, [pc, #464]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	e00b      	b.n	8006a52 <HAL_RCC_OscConfig+0xd6>
 8006a3a:	4b72      	ldr	r3, [pc, #456]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a71      	ldr	r2, [pc, #452]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	4b6f      	ldr	r3, [pc, #444]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a6e      	ldr	r2, [pc, #440]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d013      	beq.n	8006a82 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a5a:	f7fe fea5 	bl	80057a8 <HAL_GetTick>
 8006a5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a60:	e008      	b.n	8006a74 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a62:	f7fe fea1 	bl	80057a8 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	2b64      	cmp	r3, #100	; 0x64
 8006a6e:	d901      	bls.n	8006a74 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e3aa      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a74:	4b63      	ldr	r3, [pc, #396]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0f0      	beq.n	8006a62 <HAL_RCC_OscConfig+0xe6>
 8006a80:	e014      	b.n	8006aac <HAL_RCC_OscConfig+0x130>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80036be:	f7ff fc09 	bl	8002ed4 <HAL_GetTick>
 80036c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c6:	f7ff fc05 	bl	8002ed4 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b64      	cmp	r3, #100	; 0x64
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e396      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036d8:	4b59      	ldr	r3, [pc, #356]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f0      	bne.n	80036c6 <HAL_RCC_OscConfig+0x10e>
 80036e4:	e000      	b.n	80036e8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e6:	bf00      	nop
=======
 8006a82:	f7fe fe91 	bl	80057a8 <HAL_GetTick>
 8006a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a8a:	f7fe fe8d 	bl	80057a8 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b64      	cmp	r3, #100	; 0x64
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e396      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a9c:	4b59      	ldr	r3, [pc, #356]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1f0      	bne.n	8006a8a <HAL_RCC_OscConfig+0x10e>
 8006aa8:	e000      	b.n	8006aac <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aaa:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 80cb 	beq.w	800388c <HAL_RCC_OscConfig+0x2d4>
=======
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 80cb 	beq.w	8006c50 <HAL_RCC_OscConfig+0x2d4>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 80036f6:	4b52      	ldr	r3, [pc, #328]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036fe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003700:	4b4f      	ldr	r3, [pc, #316]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <HAL_RCC_OscConfig+0x164>
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	2b18      	cmp	r3, #24
 8003710:	d156      	bne.n	80037c0 <HAL_RCC_OscConfig+0x208>
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d151      	bne.n	80037c0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800371c:	4b48      	ldr	r3, [pc, #288]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_RCC_OscConfig+0x17c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e368      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
=======
 8006aba:	4b52      	ldr	r3, [pc, #328]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ac2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ac4:	4b4f      	ldr	r3, [pc, #316]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d007      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x164>
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	2b18      	cmp	r3, #24
 8006ad4:	d156      	bne.n	8006b84 <HAL_RCC_OscConfig+0x208>
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	f003 0303 	and.w	r3, r3, #3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d151      	bne.n	8006b84 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ae0:	4b48      	ldr	r3, [pc, #288]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <HAL_RCC_OscConfig+0x17c>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e368      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
>>>>>>> Stashed changes
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
<<<<<<< Updated upstream
 8003734:	4b42      	ldr	r3, [pc, #264]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 0219 	bic.w	r2, r3, #25
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	493f      	ldr	r1, [pc, #252]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003746:	f7ff fbc5 	bl	8002ed4 <HAL_GetTick>
 800374a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800374e:	f7ff fbc1 	bl	8002ed4 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e352      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003760:	4b37      	ldr	r3, [pc, #220]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x196>
=======
 8006af8:	4b42      	ldr	r3, [pc, #264]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f023 0219 	bic.w	r2, r3, #25
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	493f      	ldr	r1, [pc, #252]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b0a:	f7fe fe4d 	bl	80057a8 <HAL_GetTick>
 8006b0e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b10:	e008      	b.n	8006b24 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b12:	f7fe fe49 	bl	80057a8 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d901      	bls.n	8006b24 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e352      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b24:	4b37      	ldr	r3, [pc, #220]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d0f0      	beq.n	8006b12 <HAL_RCC_OscConfig+0x196>
>>>>>>> Stashed changes
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 800376c:	f7ff fbe2 	bl	8002f34 <HAL_GetREVID>
 8003770:	4603      	mov	r3, r0
 8003772:	f241 0203 	movw	r2, #4099	; 0x1003
 8003776:	4293      	cmp	r3, r2
 8003778:	d817      	bhi.n	80037aa <HAL_RCC_OscConfig+0x1f2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d108      	bne.n	8003794 <HAL_RCC_OscConfig+0x1dc>
 8003782:	4b2f      	ldr	r3, [pc, #188]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800378a:	4a2d      	ldr	r2, [pc, #180]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 800378c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003790:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003792:	e07b      	b.n	800388c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003794:	4b2a      	ldr	r3, [pc, #168]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	031b      	lsls	r3, r3, #12
 80037a2:	4927      	ldr	r1, [pc, #156]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037a8:	e070      	b.n	800388c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037aa:	4b25      	ldr	r3, [pc, #148]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	061b      	lsls	r3, r3, #24
 80037b8:	4921      	ldr	r1, [pc, #132]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037be:	e065      	b.n	800388c <HAL_RCC_OscConfig+0x2d4>
=======
 8006b30:	f7fe fe6a 	bl	8005808 <HAL_GetREVID>
 8006b34:	4603      	mov	r3, r0
 8006b36:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d817      	bhi.n	8006b6e <HAL_RCC_OscConfig+0x1f2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	2b40      	cmp	r3, #64	; 0x40
 8006b44:	d108      	bne.n	8006b58 <HAL_RCC_OscConfig+0x1dc>
 8006b46:	4b2f      	ldr	r3, [pc, #188]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b4e:	4a2d      	ldr	r2, [pc, #180]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b54:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b56:	e07b      	b.n	8006c50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b58:	4b2a      	ldr	r3, [pc, #168]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	031b      	lsls	r3, r3, #12
 8006b66:	4927      	ldr	r1, [pc, #156]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b6c:	e070      	b.n	8006c50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b6e:	4b25      	ldr	r3, [pc, #148]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	061b      	lsls	r3, r3, #24
 8006b7c:	4921      	ldr	r1, [pc, #132]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b82:	e065      	b.n	8006c50 <HAL_RCC_OscConfig+0x2d4>
>>>>>>> Stashed changes
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< Updated upstream
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d048      	beq.n	800385a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037c8:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f023 0219 	bic.w	r2, r3, #25
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	491a      	ldr	r1, [pc, #104]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7ff fb7b 	bl	8002ed4 <HAL_GetTick>
 80037de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e2:	f7ff fb77 	bl	8002ed4 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e308      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x22a>
=======
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d048      	beq.n	8006c1e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b8c:	4b1d      	ldr	r3, [pc, #116]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f023 0219 	bic.w	r2, r3, #25
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	491a      	ldr	r1, [pc, #104]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9e:	f7fe fe03 	bl	80057a8 <HAL_GetTick>
 8006ba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ba6:	f7fe fdff 	bl	80057a8 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e308      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bb8:	4b12      	ldr	r3, [pc, #72]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0304 	and.w	r3, r3, #4
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0f0      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x22a>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8003800:	f7ff fb98 	bl	8002f34 <HAL_GetREVID>
 8003804:	4603      	mov	r3, r0
 8003806:	f241 0203 	movw	r2, #4099	; 0x1003
 800380a:	4293      	cmp	r3, r2
 800380c:	d81a      	bhi.n	8003844 <HAL_RCC_OscConfig+0x28c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b40      	cmp	r3, #64	; 0x40
 8003814:	d108      	bne.n	8003828 <HAL_RCC_OscConfig+0x270>
 8003816:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800381e:	4a08      	ldr	r2, [pc, #32]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 8003820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003824:	6053      	str	r3, [r2, #4]
 8003826:	e031      	b.n	800388c <HAL_RCC_OscConfig+0x2d4>
 8003828:	4b05      	ldr	r3, [pc, #20]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	031b      	lsls	r3, r3, #12
 8003836:	4902      	ldr	r1, [pc, #8]	; (8003840 <HAL_RCC_OscConfig+0x288>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
 800383c:	e026      	b.n	800388c <HAL_RCC_OscConfig+0x2d4>
 800383e:	bf00      	nop
 8003840:	58024400 	.word	0x58024400
 8003844:	4b9a      	ldr	r3, [pc, #616]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	061b      	lsls	r3, r3, #24
 8003852:	4997      	ldr	r1, [pc, #604]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003854:	4313      	orrs	r3, r2
 8003856:	604b      	str	r3, [r1, #4]
 8003858:	e018      	b.n	800388c <HAL_RCC_OscConfig+0x2d4>
=======
 8006bc4:	f7fe fe20 	bl	8005808 <HAL_GetREVID>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	f241 0203 	movw	r2, #4099	; 0x1003
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d81a      	bhi.n	8006c08 <HAL_RCC_OscConfig+0x28c>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b40      	cmp	r3, #64	; 0x40
 8006bd8:	d108      	bne.n	8006bec <HAL_RCC_OscConfig+0x270>
 8006bda:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006be2:	4a08      	ldr	r2, [pc, #32]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006be8:	6053      	str	r3, [r2, #4]
 8006bea:	e031      	b.n	8006c50 <HAL_RCC_OscConfig+0x2d4>
 8006bec:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	031b      	lsls	r3, r3, #12
 8006bfa:	4902      	ldr	r1, [pc, #8]	; (8006c04 <HAL_RCC_OscConfig+0x288>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	604b      	str	r3, [r1, #4]
 8006c00:	e026      	b.n	8006c50 <HAL_RCC_OscConfig+0x2d4>
 8006c02:	bf00      	nop
 8006c04:	58024400 	.word	0x58024400
 8006c08:	4b9a      	ldr	r3, [pc, #616]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	061b      	lsls	r3, r3, #24
 8006c16:	4997      	ldr	r1, [pc, #604]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	604b      	str	r3, [r1, #4]
 8006c1c:	e018      	b.n	8006c50 <HAL_RCC_OscConfig+0x2d4>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 800385a:	4b95      	ldr	r3, [pc, #596]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a94      	ldr	r2, [pc, #592]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003860:	f023 0301 	bic.w	r3, r3, #1
 8003864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003866:	f7ff fb35 	bl	8002ed4 <HAL_GetTick>
 800386a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800386e:	f7ff fb31 	bl	8002ed4 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e2c2      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003880:	4b8b      	ldr	r3, [pc, #556]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f0      	bne.n	800386e <HAL_RCC_OscConfig+0x2b6>
=======
 8006c1e:	4b95      	ldr	r3, [pc, #596]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a94      	ldr	r2, [pc, #592]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006c24:	f023 0301 	bic.w	r3, r3, #1
 8006c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c2a:	f7fe fdbd 	bl	80057a8 <HAL_GetTick>
 8006c2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c30:	e008      	b.n	8006c44 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c32:	f7fe fdb9 	bl	80057a8 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e2c2      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c44:	4b8b      	ldr	r3, [pc, #556]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1f0      	bne.n	8006c32 <HAL_RCC_OscConfig+0x2b6>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
<<<<<<< Updated upstream
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80a9 	beq.w	80039ec <HAL_RCC_OscConfig+0x434>
=======
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0310 	and.w	r3, r3, #16
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 80a9 	beq.w	8006db0 <HAL_RCC_OscConfig+0x434>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 800389a:	4b85      	ldr	r3, [pc, #532]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038a4:	4b82      	ldr	r3, [pc, #520]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d007      	beq.n	80038c0 <HAL_RCC_OscConfig+0x308>
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	2b18      	cmp	r3, #24
 80038b4:	d13a      	bne.n	800392c <HAL_RCC_OscConfig+0x374>
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d135      	bne.n	800392c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038c0:	4b7b      	ldr	r3, [pc, #492]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_OscConfig+0x320>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	2b80      	cmp	r3, #128	; 0x80
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e296      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
=======
 8006c5e:	4b85      	ldr	r3, [pc, #532]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c68:	4b82      	ldr	r3, [pc, #520]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d007      	beq.n	8006c84 <HAL_RCC_OscConfig+0x308>
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	2b18      	cmp	r3, #24
 8006c78:	d13a      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x374>
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f003 0303 	and.w	r3, r3, #3
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d135      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c84:	4b7b      	ldr	r3, [pc, #492]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <HAL_RCC_OscConfig+0x320>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	2b80      	cmp	r3, #128	; 0x80
 8006c96:	d001      	beq.n	8006c9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e296      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
<<<<<<< Updated upstream
 80038d8:	f7ff fb2c 	bl	8002f34 <HAL_GetREVID>
 80038dc:	4603      	mov	r3, r0
 80038de:	f241 0203 	movw	r2, #4099	; 0x1003
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d817      	bhi.n	8003916 <HAL_RCC_OscConfig+0x35e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d108      	bne.n	8003900 <HAL_RCC_OscConfig+0x348>
 80038ee:	4b70      	ldr	r3, [pc, #448]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80038f6:	4a6e      	ldr	r2, [pc, #440]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 80038f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038fe:	e075      	b.n	80039ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003900:	4b6b      	ldr	r3, [pc, #428]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	069b      	lsls	r3, r3, #26
 800390e:	4968      	ldr	r1, [pc, #416]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003910:	4313      	orrs	r3, r2
 8003912:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003914:	e06a      	b.n	80039ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003916:	4b66      	ldr	r3, [pc, #408]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	061b      	lsls	r3, r3, #24
 8003924:	4962      	ldr	r1, [pc, #392]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003926:	4313      	orrs	r3, r2
 8003928:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800392a:	e05f      	b.n	80039ec <HAL_RCC_OscConfig+0x434>
=======
 8006c9c:	f7fe fdb4 	bl	8005808 <HAL_GetREVID>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d817      	bhi.n	8006cda <HAL_RCC_OscConfig+0x35e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d108      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x348>
 8006cb2:	4b70      	ldr	r3, [pc, #448]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006cba:	4a6e      	ldr	r2, [pc, #440]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006cbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cc0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cc2:	e075      	b.n	8006db0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cc4:	4b6b      	ldr	r3, [pc, #428]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	069b      	lsls	r3, r3, #26
 8006cd2:	4968      	ldr	r1, [pc, #416]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cd8:	e06a      	b.n	8006db0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cda:	4b66      	ldr	r3, [pc, #408]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	061b      	lsls	r3, r3, #24
 8006ce8:	4962      	ldr	r1, [pc, #392]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cee:	e05f      	b.n	8006db0 <HAL_RCC_OscConfig+0x434>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
<<<<<<< Updated upstream
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d042      	beq.n	80039ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003934:	4b5e      	ldr	r3, [pc, #376]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a5d      	ldr	r2, [pc, #372]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 800393a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7ff fac8 	bl	8002ed4 <HAL_GetTick>
 8003944:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003948:	f7ff fac4 	bl	8002ed4 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e255      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800395a:	4b55      	ldr	r3, [pc, #340]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0x390>
=======
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d042      	beq.n	8006d7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006cf8:	4b5e      	ldr	r3, [pc, #376]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a5d      	ldr	r2, [pc, #372]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d04:	f7fe fd50 	bl	80057a8 <HAL_GetTick>
 8006d08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d0c:	f7fe fd4c 	bl	80057a8 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e255      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d1e:	4b55      	ldr	r3, [pc, #340]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d0f0      	beq.n	8006d0c <HAL_RCC_OscConfig+0x390>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
<<<<<<< Updated upstream
 8003966:	f7ff fae5 	bl	8002f34 <HAL_GetREVID>
 800396a:	4603      	mov	r3, r0
 800396c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003970:	4293      	cmp	r3, r2
 8003972:	d817      	bhi.n	80039a4 <HAL_RCC_OscConfig+0x3ec>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	2b20      	cmp	r3, #32
 800397a:	d108      	bne.n	800398e <HAL_RCC_OscConfig+0x3d6>
 800397c:	4b4c      	ldr	r3, [pc, #304]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003984:	4a4a      	ldr	r2, [pc, #296]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003986:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800398a:	6053      	str	r3, [r2, #4]
 800398c:	e02e      	b.n	80039ec <HAL_RCC_OscConfig+0x434>
 800398e:	4b48      	ldr	r3, [pc, #288]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	069b      	lsls	r3, r3, #26
 800399c:	4944      	ldr	r1, [pc, #272]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	604b      	str	r3, [r1, #4]
 80039a2:	e023      	b.n	80039ec <HAL_RCC_OscConfig+0x434>
 80039a4:	4b42      	ldr	r3, [pc, #264]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	061b      	lsls	r3, r3, #24
 80039b2:	493f      	ldr	r1, [pc, #252]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60cb      	str	r3, [r1, #12]
 80039b8:	e018      	b.n	80039ec <HAL_RCC_OscConfig+0x434>
=======
 8006d2a:	f7fe fd6d 	bl	8005808 <HAL_GetREVID>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d817      	bhi.n	8006d68 <HAL_RCC_OscConfig+0x3ec>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d108      	bne.n	8006d52 <HAL_RCC_OscConfig+0x3d6>
 8006d40:	4b4c      	ldr	r3, [pc, #304]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006d48:	4a4a      	ldr	r2, [pc, #296]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006d4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d4e:	6053      	str	r3, [r2, #4]
 8006d50:	e02e      	b.n	8006db0 <HAL_RCC_OscConfig+0x434>
 8006d52:	4b48      	ldr	r3, [pc, #288]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	069b      	lsls	r3, r3, #26
 8006d60:	4944      	ldr	r1, [pc, #272]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	604b      	str	r3, [r1, #4]
 8006d66:	e023      	b.n	8006db0 <HAL_RCC_OscConfig+0x434>
 8006d68:	4b42      	ldr	r3, [pc, #264]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
 8006d74:	061b      	lsls	r3, r3, #24
 8006d76:	493f      	ldr	r1, [pc, #252]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60cb      	str	r3, [r1, #12]
 8006d7c:	e018      	b.n	8006db0 <HAL_RCC_OscConfig+0x434>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
<<<<<<< Updated upstream
 80039ba:	4b3d      	ldr	r3, [pc, #244]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a3c      	ldr	r2, [pc, #240]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 80039c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c6:	f7ff fa85 	bl	8002ed4 <HAL_GetTick>
 80039ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80039ce:	f7ff fa81 	bl	8002ed4 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e212      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039e0:	4b33      	ldr	r3, [pc, #204]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f0      	bne.n	80039ce <HAL_RCC_OscConfig+0x416>
=======
 8006d7e:	4b3d      	ldr	r3, [pc, #244]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a3c      	ldr	r2, [pc, #240]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d8a:	f7fe fd0d 	bl	80057a8 <HAL_GetTick>
 8006d8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d90:	e008      	b.n	8006da4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d92:	f7fe fd09 	bl	80057a8 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d901      	bls.n	8006da4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e212      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006da4:	4b33      	ldr	r3, [pc, #204]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1f0      	bne.n	8006d92 <HAL_RCC_OscConfig+0x416>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d036      	beq.n	8003a66 <HAL_RCC_OscConfig+0x4ae>
=======
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d036      	beq.n	8006e2a <HAL_RCC_OscConfig+0x4ae>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< Updated upstream
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d019      	beq.n	8003a34 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a00:	4b2b      	ldr	r3, [pc, #172]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a04:	4a2a      	ldr	r2, [pc, #168]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7ff fa62 	bl	8002ed4 <HAL_GetTick>
 8003a10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a14:	f7ff fa5e 	bl	8002ed4 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e1ef      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a26:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0x45c>
 8003a32:	e018      	b.n	8003a66 <HAL_RCC_OscConfig+0x4ae>
=======
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d019      	beq.n	8006df8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dc4:	4b2b      	ldr	r3, [pc, #172]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc8:	4a2a      	ldr	r2, [pc, #168]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006dca:	f043 0301 	orr.w	r3, r3, #1
 8006dce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd0:	f7fe fcea 	bl	80057a8 <HAL_GetTick>
 8006dd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dd8:	f7fe fce6 	bl	80057a8 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e1ef      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006dea:	4b22      	ldr	r3, [pc, #136]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0f0      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x45c>
 8006df6:	e018      	b.n	8006e2a <HAL_RCC_OscConfig+0x4ae>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 8003a34:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a38:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003a3a:	f023 0301 	bic.w	r3, r3, #1
 8003a3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7ff fa48 	bl	8002ed4 <HAL_GetTick>
 8003a44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a48:	f7ff fa44 	bl	8002ed4 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e1d5      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x490>
=======
 8006df8:	4b1e      	ldr	r3, [pc, #120]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dfc:	4a1d      	ldr	r2, [pc, #116]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006dfe:	f023 0301 	bic.w	r3, r3, #1
 8006e02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e04:	f7fe fcd0 	bl	80057a8 <HAL_GetTick>
 8006e08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e0a:	e008      	b.n	8006e1e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e0c:	f7fe fccc 	bl	80057a8 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d901      	bls.n	8006e1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e1d5      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e1e:	4b15      	ldr	r3, [pc, #84]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1f0      	bne.n	8006e0c <HAL_RCC_OscConfig+0x490>
>>>>>>> Stashed changes
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< Updated upstream
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d039      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x52e>
=======
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d039      	beq.n	8006eaa <HAL_RCC_OscConfig+0x52e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
<<<<<<< Updated upstream
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01c      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a0c      	ldr	r2, [pc, #48]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003a80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a86:	f7ff fa25 	bl	8002ed4 <HAL_GetTick>
 8003a8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a8e:	f7ff fa21 	bl	8002ed4 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e1b2      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003aa0:	4b03      	ldr	r3, [pc, #12]	; (8003ab0 <HAL_RCC_OscConfig+0x4f8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x4d6>
 8003aac:	e01b      	b.n	8003ae6 <HAL_RCC_OscConfig+0x52e>
 8003aae:	bf00      	nop
 8003ab0:	58024400 	.word	0x58024400
=======
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d01c      	beq.n	8006e78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e3e:	4b0d      	ldr	r3, [pc, #52]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a0c      	ldr	r2, [pc, #48]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006e44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e4a:	f7fe fcad 	bl	80057a8 <HAL_GetTick>
 8006e4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e50:	e008      	b.n	8006e64 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006e52:	f7fe fca9 	bl	80057a8 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d901      	bls.n	8006e64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e1b2      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e64:	4b03      	ldr	r3, [pc, #12]	; (8006e74 <HAL_RCC_OscConfig+0x4f8>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0f0      	beq.n	8006e52 <HAL_RCC_OscConfig+0x4d6>
 8006e70:	e01b      	b.n	8006eaa <HAL_RCC_OscConfig+0x52e>
 8006e72:	bf00      	nop
 8006e74:	58024400 	.word	0x58024400
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< Updated upstream
 8003ab4:	4b9b      	ldr	r3, [pc, #620]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a9a      	ldr	r2, [pc, #616]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003aba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003abe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ac0:	f7ff fa08 	bl	8002ed4 <HAL_GetTick>
 8003ac4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ac8:	f7ff fa04 	bl	8002ed4 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e195      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ada:	4b92      	ldr	r3, [pc, #584]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x510>
=======
 8006e78:	4b9b      	ldr	r3, [pc, #620]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a9a      	ldr	r2, [pc, #616]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e84:	f7fe fc90 	bl	80057a8 <HAL_GetTick>
 8006e88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e8a:	e008      	b.n	8006e9e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006e8c:	f7fe fc8c 	bl	80057a8 <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e195      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e9e:	4b92      	ldr	r3, [pc, #584]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1f0      	bne.n	8006e8c <HAL_RCC_OscConfig+0x510>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 8081 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x63e>
=======
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0304 	and.w	r3, r3, #4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 8081 	beq.w	8006fba <HAL_RCC_OscConfig+0x63e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
<<<<<<< Updated upstream
 8003af4:	4b8c      	ldr	r3, [pc, #560]	; (8003d28 <HAL_RCC_OscConfig+0x770>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a8b      	ldr	r2, [pc, #556]	; (8003d28 <HAL_RCC_OscConfig+0x770>)
 8003afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b00:	f7ff f9e8 	bl	8002ed4 <HAL_GetTick>
 8003b04:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b08:	f7ff f9e4 	bl	8002ed4 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	; 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e175      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b1a:	4b83      	ldr	r3, [pc, #524]	; (8003d28 <HAL_RCC_OscConfig+0x770>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0x550>
=======
 8006eb8:	4b8c      	ldr	r3, [pc, #560]	; (80070ec <HAL_RCC_OscConfig+0x770>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a8b      	ldr	r2, [pc, #556]	; (80070ec <HAL_RCC_OscConfig+0x770>)
 8006ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ec2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ec4:	f7fe fc70 	bl	80057a8 <HAL_GetTick>
 8006ec8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006eca:	e008      	b.n	8006ede <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006ecc:	f7fe fc6c 	bl	80057a8 <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	2b64      	cmp	r3, #100	; 0x64
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e175      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ede:	4b83      	ldr	r3, [pc, #524]	; (80070ec <HAL_RCC_OscConfig+0x770>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0f0      	beq.n	8006ecc <HAL_RCC_OscConfig+0x550>
>>>>>>> Stashed changes
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d106      	bne.n	8003b3c <HAL_RCC_OscConfig+0x584>
 8003b2e:	4b7d      	ldr	r3, [pc, #500]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	4a7c      	ldr	r2, [pc, #496]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3a:	e02d      	b.n	8003b98 <HAL_RCC_OscConfig+0x5e0>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10c      	bne.n	8003b5e <HAL_RCC_OscConfig+0x5a6>
 8003b44:	4b77      	ldr	r3, [pc, #476]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	4a76      	ldr	r2, [pc, #472]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003b4a:	f023 0301 	bic.w	r3, r3, #1
 8003b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b50:	4b74      	ldr	r3, [pc, #464]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	4a73      	ldr	r2, [pc, #460]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003b56:	f023 0304 	bic.w	r3, r3, #4
 8003b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5c:	e01c      	b.n	8003b98 <HAL_RCC_OscConfig+0x5e0>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b05      	cmp	r3, #5
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x5c8>
 8003b66:	4b6f      	ldr	r3, [pc, #444]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	4a6e      	ldr	r2, [pc, #440]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003b6c:	f043 0304 	orr.w	r3, r3, #4
 8003b70:	6713      	str	r3, [r2, #112]	; 0x70
 8003b72:	4b6c      	ldr	r3, [pc, #432]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	4a6b      	ldr	r2, [pc, #428]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7e:	e00b      	b.n	8003b98 <HAL_RCC_OscConfig+0x5e0>
 8003b80:	4b68      	ldr	r3, [pc, #416]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	4a67      	ldr	r2, [pc, #412]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8c:	4b65      	ldr	r3, [pc, #404]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	4a64      	ldr	r2, [pc, #400]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003b92:	f023 0304 	bic.w	r3, r3, #4
 8003b96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d015      	beq.n	8003bcc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7ff f998 	bl	8002ed4 <HAL_GetTick>
 8003ba4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba8:	f7ff f994 	bl	8002ed4 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e123      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bbe:	4b59      	ldr	r3, [pc, #356]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0ee      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x5f0>
 8003bca:	e014      	b.n	8003bf6 <HAL_RCC_OscConfig+0x63e>
=======
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d106      	bne.n	8006f00 <HAL_RCC_OscConfig+0x584>
 8006ef2:	4b7d      	ldr	r3, [pc, #500]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef6:	4a7c      	ldr	r2, [pc, #496]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006ef8:	f043 0301 	orr.w	r3, r3, #1
 8006efc:	6713      	str	r3, [r2, #112]	; 0x70
 8006efe:	e02d      	b.n	8006f5c <HAL_RCC_OscConfig+0x5e0>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10c      	bne.n	8006f22 <HAL_RCC_OscConfig+0x5a6>
 8006f08:	4b77      	ldr	r3, [pc, #476]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0c:	4a76      	ldr	r2, [pc, #472]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006f0e:	f023 0301 	bic.w	r3, r3, #1
 8006f12:	6713      	str	r3, [r2, #112]	; 0x70
 8006f14:	4b74      	ldr	r3, [pc, #464]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f18:	4a73      	ldr	r2, [pc, #460]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006f1a:	f023 0304 	bic.w	r3, r3, #4
 8006f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f20:	e01c      	b.n	8006f5c <HAL_RCC_OscConfig+0x5e0>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b05      	cmp	r3, #5
 8006f28:	d10c      	bne.n	8006f44 <HAL_RCC_OscConfig+0x5c8>
 8006f2a:	4b6f      	ldr	r3, [pc, #444]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2e:	4a6e      	ldr	r2, [pc, #440]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006f30:	f043 0304 	orr.w	r3, r3, #4
 8006f34:	6713      	str	r3, [r2, #112]	; 0x70
 8006f36:	4b6c      	ldr	r3, [pc, #432]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3a:	4a6b      	ldr	r2, [pc, #428]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006f3c:	f043 0301 	orr.w	r3, r3, #1
 8006f40:	6713      	str	r3, [r2, #112]	; 0x70
 8006f42:	e00b      	b.n	8006f5c <HAL_RCC_OscConfig+0x5e0>
 8006f44:	4b68      	ldr	r3, [pc, #416]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f48:	4a67      	ldr	r2, [pc, #412]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006f4a:	f023 0301 	bic.w	r3, r3, #1
 8006f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f50:	4b65      	ldr	r3, [pc, #404]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f54:	4a64      	ldr	r2, [pc, #400]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006f56:	f023 0304 	bic.w	r3, r3, #4
 8006f5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d015      	beq.n	8006f90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f64:	f7fe fc20 	bl	80057a8 <HAL_GetTick>
 8006f68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f6a:	e00a      	b.n	8006f82 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f6c:	f7fe fc1c 	bl	80057a8 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e123      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f82:	4b59      	ldr	r3, [pc, #356]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0ee      	beq.n	8006f6c <HAL_RCC_OscConfig+0x5f0>
 8006f8e:	e014      	b.n	8006fba <HAL_RCC_OscConfig+0x63e>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8003bcc:	f7ff f982 	bl	8002ed4 <HAL_GetTick>
 8003bd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bd2:	e00a      	b.n	8003bea <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd4:	f7ff f97e 	bl	8002ed4 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e10d      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bea:	4b4e      	ldr	r3, [pc, #312]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1ee      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x61c>
=======
 8006f90:	f7fe fc0a 	bl	80057a8 <HAL_GetTick>
 8006f94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f96:	e00a      	b.n	8006fae <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f98:	f7fe fc06 	bl	80057a8 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e10d      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006fae:	4b4e      	ldr	r3, [pc, #312]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1ee      	bne.n	8006f98 <HAL_RCC_OscConfig+0x61c>
>>>>>>> Stashed changes
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< Updated upstream
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 8102 	beq.w	8003e04 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c00:	4b48      	ldr	r3, [pc, #288]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c08:	2b18      	cmp	r3, #24
 8003c0a:	f000 80bd 	beq.w	8003d88 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	f040 809e 	bne.w	8003d54 <HAL_RCC_OscConfig+0x79c>
=======
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 8102 	beq.w	80071c8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006fc4:	4b48      	ldr	r3, [pc, #288]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fcc:	2b18      	cmp	r3, #24
 8006fce:	f000 80bd 	beq.w	800714c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	f040 809e 	bne.w	8007118 <HAL_RCC_OscConfig+0x79c>
>>>>>>> Stashed changes
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8003c18:	4b42      	ldr	r3, [pc, #264]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a41      	ldr	r2, [pc, #260]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003c1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c24:	f7ff f956 	bl	8002ed4 <HAL_GetTick>
 8003c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c2c:	f7ff f952 	bl	8002ed4 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e0e3      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c3e:	4b39      	ldr	r3, [pc, #228]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0x674>
=======
 8006fdc:	4b42      	ldr	r3, [pc, #264]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a41      	ldr	r2, [pc, #260]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8006fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe8:	f7fe fbde 	bl	80057a8 <HAL_GetTick>
 8006fec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fee:	e008      	b.n	8007002 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ff0:	f7fe fbda 	bl	80057a8 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e0e3      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007002:	4b39      	ldr	r3, [pc, #228]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1f0      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x674>
>>>>>>> Stashed changes
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< Updated upstream
 8003c4a:	4b36      	ldr	r3, [pc, #216]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c4e:	4b37      	ldr	r3, [pc, #220]	; (8003d2c <HAL_RCC_OscConfig+0x774>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c5a:	0112      	lsls	r2, r2, #4
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	4931      	ldr	r1, [pc, #196]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	628b      	str	r3, [r1, #40]	; 0x28
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c72:	3b01      	subs	r3, #1
 8003c74:	025b      	lsls	r3, r3, #9
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	041b      	lsls	r3, r3, #16
 8003c82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	061b      	lsls	r3, r3, #24
 8003c90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c94:	4923      	ldr	r1, [pc, #140]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	630b      	str	r3, [r1, #48]	; 0x30
=======
 800700e:	4b36      	ldr	r3, [pc, #216]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8007010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007012:	4b37      	ldr	r3, [pc, #220]	; (80070f0 <HAL_RCC_OscConfig+0x774>)
 8007014:	4013      	ands	r3, r2
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800701e:	0112      	lsls	r2, r2, #4
 8007020:	430a      	orrs	r2, r1
 8007022:	4931      	ldr	r1, [pc, #196]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8007024:	4313      	orrs	r3, r2
 8007026:	628b      	str	r3, [r1, #40]	; 0x28
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702c:	3b01      	subs	r3, #1
 800702e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007036:	3b01      	subs	r3, #1
 8007038:	025b      	lsls	r3, r3, #9
 800703a:	b29b      	uxth	r3, r3
 800703c:	431a      	orrs	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007042:	3b01      	subs	r3, #1
 8007044:	041b      	lsls	r3, r3, #16
 8007046:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007050:	3b01      	subs	r3, #1
 8007052:	061b      	lsls	r3, r3, #24
 8007054:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007058:	4923      	ldr	r1, [pc, #140]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 800705a:	4313      	orrs	r3, r2
 800705c:	630b      	str	r3, [r1, #48]	; 0x30
>>>>>>> Stashed changes
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
<<<<<<< Updated upstream
 8003c9a:	4b22      	ldr	r3, [pc, #136]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003caa:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <HAL_RCC_OscConfig+0x778>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003cb2:	00d2      	lsls	r2, r2, #3
 8003cb4:	491b      	ldr	r1, [pc, #108]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003cba:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	f023 020c 	bic.w	r2, r3, #12
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	4917      	ldr	r1, [pc, #92]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ccc:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	f023 0202 	bic.w	r2, r3, #2
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd8:	4912      	ldr	r1, [pc, #72]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cde:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	4a10      	ldr	r2, [pc, #64]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cea:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	4a0d      	ldr	r2, [pc, #52]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003d02:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	4a07      	ldr	r2, [pc, #28]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d0e:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <HAL_RCC_OscConfig+0x76c>)
 8003d14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1a:	f7ff f8db 	bl	8002ed4 <HAL_GetTick>
 8003d1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d20:	e011      	b.n	8003d46 <HAL_RCC_OscConfig+0x78e>
 8003d22:	bf00      	nop
 8003d24:	58024400 	.word	0x58024400
 8003d28:	58024800 	.word	0x58024800
 8003d2c:	fffffc0c 	.word	0xfffffc0c
 8003d30:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d34:	f7ff f8ce 	bl	8002ed4 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e05f      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d46:	4b32      	ldr	r3, [pc, #200]	; (8003e10 <HAL_RCC_OscConfig+0x858>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x77c>
 8003d52:	e057      	b.n	8003e04 <HAL_RCC_OscConfig+0x84c>
=======
 800705e:	4b22      	ldr	r3, [pc, #136]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8007060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007062:	4a21      	ldr	r2, [pc, #132]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8007064:	f023 0301 	bic.w	r3, r3, #1
 8007068:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800706a:	4b1f      	ldr	r3, [pc, #124]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 800706c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800706e:	4b21      	ldr	r3, [pc, #132]	; (80070f4 <HAL_RCC_OscConfig+0x778>)
 8007070:	4013      	ands	r3, r2
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007076:	00d2      	lsls	r2, r2, #3
 8007078:	491b      	ldr	r1, [pc, #108]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 800707a:	4313      	orrs	r3, r2
 800707c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800707e:	4b1a      	ldr	r3, [pc, #104]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8007080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007082:	f023 020c 	bic.w	r2, r3, #12
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	4917      	ldr	r1, [pc, #92]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 800708c:	4313      	orrs	r3, r2
 800708e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007090:	4b15      	ldr	r3, [pc, #84]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 8007092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007094:	f023 0202 	bic.w	r2, r3, #2
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709c:	4912      	ldr	r1, [pc, #72]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80070a2:	4b11      	ldr	r3, [pc, #68]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 80070a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a6:	4a10      	ldr	r2, [pc, #64]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 80070a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070ae:	4b0e      	ldr	r3, [pc, #56]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b2:	4a0d      	ldr	r2, [pc, #52]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 80070b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80070ba:	4b0b      	ldr	r3, [pc, #44]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	4a0a      	ldr	r2, [pc, #40]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 80070c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80070c6:	4b08      	ldr	r3, [pc, #32]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 80070c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ca:	4a07      	ldr	r2, [pc, #28]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 80070cc:	f043 0301 	orr.w	r3, r3, #1
 80070d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070d2:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a04      	ldr	r2, [pc, #16]	; (80070e8 <HAL_RCC_OscConfig+0x76c>)
 80070d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070de:	f7fe fb63 	bl	80057a8 <HAL_GetTick>
 80070e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070e4:	e011      	b.n	800710a <HAL_RCC_OscConfig+0x78e>
 80070e6:	bf00      	nop
 80070e8:	58024400 	.word	0x58024400
 80070ec:	58024800 	.word	0x58024800
 80070f0:	fffffc0c 	.word	0xfffffc0c
 80070f4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070f8:	f7fe fb56 	bl	80057a8 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e05f      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800710a:	4b32      	ldr	r3, [pc, #200]	; (80071d4 <HAL_RCC_OscConfig+0x858>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0f0      	beq.n	80070f8 <HAL_RCC_OscConfig+0x77c>
 8007116:	e057      	b.n	80071c8 <HAL_RCC_OscConfig+0x84c>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8003d54:	4b2e      	ldr	r3, [pc, #184]	; (8003e10 <HAL_RCC_OscConfig+0x858>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a2d      	ldr	r2, [pc, #180]	; (8003e10 <HAL_RCC_OscConfig+0x858>)
 8003d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f7ff f8b8 	bl	8002ed4 <HAL_GetTick>
 8003d64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d68:	f7ff f8b4 	bl	8002ed4 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e045      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d7a:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <HAL_RCC_OscConfig+0x858>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x7b0>
 8003d86:	e03d      	b.n	8003e04 <HAL_RCC_OscConfig+0x84c>
=======
 8007118:	4b2e      	ldr	r3, [pc, #184]	; (80071d4 <HAL_RCC_OscConfig+0x858>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a2d      	ldr	r2, [pc, #180]	; (80071d4 <HAL_RCC_OscConfig+0x858>)
 800711e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007124:	f7fe fb40 	bl	80057a8 <HAL_GetTick>
 8007128:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800712a:	e008      	b.n	800713e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800712c:	f7fe fb3c 	bl	80057a8 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e045      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800713e:	4b25      	ldr	r3, [pc, #148]	; (80071d4 <HAL_RCC_OscConfig+0x858>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1f0      	bne.n	800712c <HAL_RCC_OscConfig+0x7b0>
 800714a:	e03d      	b.n	80071c8 <HAL_RCC_OscConfig+0x84c>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
<<<<<<< Updated upstream
 8003d88:	4b21      	ldr	r3, [pc, #132]	; (8003e10 <HAL_RCC_OscConfig+0x858>)
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d8e:	4b20      	ldr	r3, [pc, #128]	; (8003e10 <HAL_RCC_OscConfig+0x858>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d031      	beq.n	8003e00 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f003 0203 	and.w	r2, r3, #3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d12a      	bne.n	8003e00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d122      	bne.n	8003e00 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d11a      	bne.n	8003e00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	0a5b      	lsrs	r3, r3, #9
 8003dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d111      	bne.n	8003e00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	0c1b      	lsrs	r3, r3, #16
 8003de0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d108      	bne.n	8003e00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	0e1b      	lsrs	r3, r3, #24
 8003df2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x84e>
=======
 800714c:	4b21      	ldr	r3, [pc, #132]	; (80071d4 <HAL_RCC_OscConfig+0x858>)
 800714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007150:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007152:	4b20      	ldr	r3, [pc, #128]	; (80071d4 <HAL_RCC_OscConfig+0x858>)
 8007154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007156:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	2b01      	cmp	r3, #1
 800715e:	d031      	beq.n	80071c4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f003 0203 	and.w	r2, r3, #3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800716a:	429a      	cmp	r2, r3
 800716c:	d12a      	bne.n	80071c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	091b      	lsrs	r3, r3, #4
 8007172:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800717a:	429a      	cmp	r2, r3
 800717c:	d122      	bne.n	80071c4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007188:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800718a:	429a      	cmp	r2, r3
 800718c:	d11a      	bne.n	80071c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	0a5b      	lsrs	r3, r3, #9
 8007192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800719c:	429a      	cmp	r2, r3
 800719e:	d111      	bne.n	80071c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	0c1b      	lsrs	r3, r3, #16
 80071a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d108      	bne.n	80071c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	0e1b      	lsrs	r3, r3, #24
 80071b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071be:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d001      	beq.n	80071c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e000      	b.n	80071ca <HAL_RCC_OscConfig+0x84e>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3730      	adds	r7, #48	; 0x30
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	58024400 	.word	0x58024400

08003e14 <HAL_RCC_ClockConfig>:
=======
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3730      	adds	r7, #48	; 0x30
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	58024400 	.word	0x58024400

080071d8 <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
=======
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< Updated upstream
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e19c      	b.n	8004162 <HAL_RCC_ClockConfig+0x34e>
=======
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e19c      	b.n	8007526 <HAL_RCC_ClockConfig+0x34e>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8003e28:	4b8a      	ldr	r3, [pc, #552]	; (8004054 <HAL_RCC_ClockConfig+0x240>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d910      	bls.n	8003e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e36:	4b87      	ldr	r3, [pc, #540]	; (8004054 <HAL_RCC_ClockConfig+0x240>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 020f 	bic.w	r2, r3, #15
 8003e3e:	4985      	ldr	r1, [pc, #532]	; (8004054 <HAL_RCC_ClockConfig+0x240>)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]
=======
 80071ec:	4b8a      	ldr	r3, [pc, #552]	; (8007418 <HAL_RCC_ClockConfig+0x240>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d910      	bls.n	800721c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071fa:	4b87      	ldr	r3, [pc, #540]	; (8007418 <HAL_RCC_ClockConfig+0x240>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f023 020f 	bic.w	r2, r3, #15
 8007202:	4985      	ldr	r1, [pc, #532]	; (8007418 <HAL_RCC_ClockConfig+0x240>)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	4313      	orrs	r3, r2
 8007208:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8003e46:	4b83      	ldr	r3, [pc, #524]	; (8004054 <HAL_RCC_ClockConfig+0x240>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e184      	b.n	8004162 <HAL_RCC_ClockConfig+0x34e>
=======
 800720a:	4b83      	ldr	r3, [pc, #524]	; (8007418 <HAL_RCC_ClockConfig+0x240>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 030f 	and.w	r3, r3, #15
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d001      	beq.n	800721c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e184      	b.n	8007526 <HAL_RCC_ClockConfig+0x34e>
>>>>>>> Stashed changes

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
<<<<<<< Updated upstream
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d010      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	4b7b      	ldr	r3, [pc, #492]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d908      	bls.n	8003e86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e74:	4b78      	ldr	r3, [pc, #480]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	4975      	ldr	r1, [pc, #468]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	618b      	str	r3, [r1, #24]
=======
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d010      	beq.n	800724a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	4b7b      	ldr	r3, [pc, #492]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007234:	429a      	cmp	r2, r3
 8007236:	d908      	bls.n	800724a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007238:	4b78      	ldr	r3, [pc, #480]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	4975      	ldr	r1, [pc, #468]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 8007246:	4313      	orrs	r3, r2
 8007248:	618b      	str	r3, [r1, #24]
>>>>>>> Stashed changes
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d010      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	4b70      	ldr	r3, [pc, #448]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d908      	bls.n	8003eb4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ea2:	4b6d      	ldr	r3, [pc, #436]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	496a      	ldr	r1, [pc, #424]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	61cb      	str	r3, [r1, #28]
=======
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0308 	and.w	r3, r3, #8
 8007252:	2b00      	cmp	r3, #0
 8007254:	d010      	beq.n	8007278 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695a      	ldr	r2, [r3, #20]
 800725a:	4b70      	ldr	r3, [pc, #448]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007262:	429a      	cmp	r2, r3
 8007264:	d908      	bls.n	8007278 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007266:	4b6d      	ldr	r3, [pc, #436]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	496a      	ldr	r1, [pc, #424]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 8007274:	4313      	orrs	r3, r2
 8007276:	61cb      	str	r3, [r1, #28]
>>>>>>> Stashed changes
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d010      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699a      	ldr	r2, [r3, #24]
 8003ec4:	4b64      	ldr	r3, [pc, #400]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d908      	bls.n	8003ee2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ed0:	4b61      	ldr	r3, [pc, #388]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	495e      	ldr	r1, [pc, #376]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61cb      	str	r3, [r1, #28]
=======
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0310 	and.w	r3, r3, #16
 8007280:	2b00      	cmp	r3, #0
 8007282:	d010      	beq.n	80072a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	699a      	ldr	r2, [r3, #24]
 8007288:	4b64      	ldr	r3, [pc, #400]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007290:	429a      	cmp	r2, r3
 8007292:	d908      	bls.n	80072a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007294:	4b61      	ldr	r3, [pc, #388]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	495e      	ldr	r1, [pc, #376]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	61cb      	str	r3, [r1, #28]
>>>>>>> Stashed changes
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
<<<<<<< Updated upstream
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d010      	beq.n	8003f10 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69da      	ldr	r2, [r3, #28]
 8003ef2:	4b59      	ldr	r3, [pc, #356]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d908      	bls.n	8003f10 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003efe:	4b56      	ldr	r3, [pc, #344]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	4953      	ldr	r1, [pc, #332]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	620b      	str	r3, [r1, #32]
=======
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d010      	beq.n	80072d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	69da      	ldr	r2, [r3, #28]
 80072b6:	4b59      	ldr	r3, [pc, #356]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072be:	429a      	cmp	r2, r3
 80072c0:	d908      	bls.n	80072d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80072c2:	4b56      	ldr	r3, [pc, #344]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	4953      	ldr	r1, [pc, #332]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	620b      	str	r3, [r1, #32]
>>>>>>> Stashed changes
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d010      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	4b4d      	ldr	r3, [pc, #308]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f003 030f 	and.w	r3, r3, #15
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d908      	bls.n	8003f3e <HAL_RCC_ClockConfig+0x12a>
=======
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d010      	beq.n	8007302 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68da      	ldr	r2, [r3, #12]
 80072e4:	4b4d      	ldr	r3, [pc, #308]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	f003 030f 	and.w	r3, r3, #15
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d908      	bls.n	8007302 <HAL_RCC_ClockConfig+0x12a>
>>>>>>> Stashed changes
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
 8003f2c:	4b4a      	ldr	r3, [pc, #296]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	f023 020f 	bic.w	r2, r3, #15
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4947      	ldr	r1, [pc, #284]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	618b      	str	r3, [r1, #24]
=======
 80072f0:	4b4a      	ldr	r3, [pc, #296]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	f023 020f 	bic.w	r2, r3, #15
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	4947      	ldr	r1, [pc, #284]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	618b      	str	r3, [r1, #24]
>>>>>>> Stashed changes
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d055      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x1e2>
=======
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d055      	beq.n	80073ba <HAL_RCC_ClockConfig+0x1e2>
>>>>>>> Stashed changes
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
<<<<<<< Updated upstream
 8003f4a:	4b43      	ldr	r3, [pc, #268]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	4940      	ldr	r1, [pc, #256]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	618b      	str	r3, [r1, #24]
=======
 800730e:	4b43      	ldr	r3, [pc, #268]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	4940      	ldr	r1, [pc, #256]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 800731c:	4313      	orrs	r3, r2
 800731e:	618b      	str	r3, [r1, #24]
>>>>>>> Stashed changes
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d107      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f64:	4b3c      	ldr	r3, [pc, #240]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d121      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0f6      	b.n	8004162 <HAL_RCC_ClockConfig+0x34e>
=======
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	2b02      	cmp	r3, #2
 8007326:	d107      	bne.n	8007338 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007328:	4b3c      	ldr	r3, [pc, #240]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d121      	bne.n	8007378 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e0f6      	b.n	8007526 <HAL_RCC_ClockConfig+0x34e>
>>>>>>> Stashed changes
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< Updated upstream
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d107      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f7c:	4b36      	ldr	r3, [pc, #216]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d115      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0ea      	b.n	8004162 <HAL_RCC_ClockConfig+0x34e>
=======
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	2b03      	cmp	r3, #3
 800733e:	d107      	bne.n	8007350 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007340:	4b36      	ldr	r3, [pc, #216]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d115      	bne.n	8007378 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e0ea      	b.n	8007526 <HAL_RCC_ClockConfig+0x34e>
>>>>>>> Stashed changes
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
<<<<<<< Updated upstream
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d107      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f94:	4b30      	ldr	r3, [pc, #192]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d109      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0de      	b.n	8004162 <HAL_RCC_ClockConfig+0x34e>
=======
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d107      	bne.n	8007368 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007358:	4b30      	ldr	r3, [pc, #192]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007360:	2b00      	cmp	r3, #0
 8007362:	d109      	bne.n	8007378 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e0de      	b.n	8007526 <HAL_RCC_ClockConfig+0x34e>
>>>>>>> Stashed changes
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
<<<<<<< Updated upstream
 8003fa4:	4b2c      	ldr	r3, [pc, #176]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0d6      	b.n	8004162 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fb4:	4b28      	ldr	r3, [pc, #160]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f023 0207 	bic.w	r2, r3, #7
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4925      	ldr	r1, [pc, #148]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc6:	f7fe ff85 	bl	8002ed4 <HAL_GetTick>
 8003fca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fcc:	e00a      	b.n	8003fe4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fce:	f7fe ff81 	bl	8002ed4 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e0be      	b.n	8004162 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe4:	4b1c      	ldr	r3, [pc, #112]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d1eb      	bne.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
=======
 8007368:	4b2c      	ldr	r3, [pc, #176]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e0d6      	b.n	8007526 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007378:	4b28      	ldr	r3, [pc, #160]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	f023 0207 	bic.w	r2, r3, #7
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	4925      	ldr	r1, [pc, #148]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 8007386:	4313      	orrs	r3, r2
 8007388:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800738a:	f7fe fa0d 	bl	80057a8 <HAL_GetTick>
 800738e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007390:	e00a      	b.n	80073a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007392:	f7fe fa09 	bl	80057a8 <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d901      	bls.n	80073a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e0be      	b.n	8007526 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073a8:	4b1c      	ldr	r3, [pc, #112]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d1eb      	bne.n	8007392 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d010      	beq.n	8004024 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	4b14      	ldr	r3, [pc, #80]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	429a      	cmp	r2, r3
 8004010:	d208      	bcs.n	8004024 <HAL_RCC_ClockConfig+0x210>
=======
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d010      	beq.n	80073e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	4b14      	ldr	r3, [pc, #80]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	f003 030f 	and.w	r3, r3, #15
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d208      	bcs.n	80073e8 <HAL_RCC_ClockConfig+0x210>
>>>>>>> Stashed changes
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
 8004012:	4b11      	ldr	r3, [pc, #68]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f023 020f 	bic.w	r2, r3, #15
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	490e      	ldr	r1, [pc, #56]	; (8004058 <HAL_RCC_ClockConfig+0x244>)
 8004020:	4313      	orrs	r3, r2
 8004022:	618b      	str	r3, [r1, #24]
=======
 80073d6:	4b11      	ldr	r3, [pc, #68]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	f023 020f 	bic.w	r2, r3, #15
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	490e      	ldr	r1, [pc, #56]	; (800741c <HAL_RCC_ClockConfig+0x244>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	618b      	str	r3, [r1, #24]
>>>>>>> Stashed changes
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_RCC_ClockConfig+0x240>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 030f 	and.w	r3, r3, #15
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d214      	bcs.n	800405c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <HAL_RCC_ClockConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f023 020f 	bic.w	r2, r3, #15
 800403a:	4906      	ldr	r1, [pc, #24]	; (8004054 <HAL_RCC_ClockConfig+0x240>)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	4313      	orrs	r3, r2
 8004040:	600b      	str	r3, [r1, #0]
=======
 80073e8:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <HAL_RCC_ClockConfig+0x240>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 030f 	and.w	r3, r3, #15
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d214      	bcs.n	8007420 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073f6:	4b08      	ldr	r3, [pc, #32]	; (8007418 <HAL_RCC_ClockConfig+0x240>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f023 020f 	bic.w	r2, r3, #15
 80073fe:	4906      	ldr	r1, [pc, #24]	; (8007418 <HAL_RCC_ClockConfig+0x240>)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	4313      	orrs	r3, r2
 8007404:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8004042:	4b04      	ldr	r3, [pc, #16]	; (8004054 <HAL_RCC_ClockConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d005      	beq.n	800405c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e086      	b.n	8004162 <HAL_RCC_ClockConfig+0x34e>
 8004054:	52002000 	.word	0x52002000
 8004058:	58024400 	.word	0x58024400
=======
 8007406:	4b04      	ldr	r3, [pc, #16]	; (8007418 <HAL_RCC_ClockConfig+0x240>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d005      	beq.n	8007420 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e086      	b.n	8007526 <HAL_RCC_ClockConfig+0x34e>
 8007418:	52002000 	.word	0x52002000
 800741c:	58024400 	.word	0x58024400
>>>>>>> Stashed changes
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
<<<<<<< Updated upstream
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d010      	beq.n	800408a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	4b3f      	ldr	r3, [pc, #252]	; (800416c <HAL_RCC_ClockConfig+0x358>)
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004074:	429a      	cmp	r2, r3
 8004076:	d208      	bcs.n	800408a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004078:	4b3c      	ldr	r3, [pc, #240]	; (800416c <HAL_RCC_ClockConfig+0x358>)
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	4939      	ldr	r1, [pc, #228]	; (800416c <HAL_RCC_ClockConfig+0x358>)
 8004086:	4313      	orrs	r3, r2
 8004088:	618b      	str	r3, [r1, #24]
=======
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0304 	and.w	r3, r3, #4
 8007428:	2b00      	cmp	r3, #0
 800742a:	d010      	beq.n	800744e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691a      	ldr	r2, [r3, #16]
 8007430:	4b3f      	ldr	r3, [pc, #252]	; (8007530 <HAL_RCC_ClockConfig+0x358>)
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007438:	429a      	cmp	r2, r3
 800743a:	d208      	bcs.n	800744e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800743c:	4b3c      	ldr	r3, [pc, #240]	; (8007530 <HAL_RCC_ClockConfig+0x358>)
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	4939      	ldr	r1, [pc, #228]	; (8007530 <HAL_RCC_ClockConfig+0x358>)
 800744a:	4313      	orrs	r3, r2
 800744c:	618b      	str	r3, [r1, #24]
>>>>>>> Stashed changes
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d010      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	4b34      	ldr	r3, [pc, #208]	; (800416c <HAL_RCC_ClockConfig+0x358>)
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d208      	bcs.n	80040b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040a6:	4b31      	ldr	r3, [pc, #196]	; (800416c <HAL_RCC_ClockConfig+0x358>)
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	492e      	ldr	r1, [pc, #184]	; (800416c <HAL_RCC_ClockConfig+0x358>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	61cb      	str	r3, [r1, #28]
=======
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0308 	and.w	r3, r3, #8
 8007456:	2b00      	cmp	r3, #0
 8007458:	d010      	beq.n	800747c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	695a      	ldr	r2, [r3, #20]
 800745e:	4b34      	ldr	r3, [pc, #208]	; (8007530 <HAL_RCC_ClockConfig+0x358>)
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007466:	429a      	cmp	r2, r3
 8007468:	d208      	bcs.n	800747c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800746a:	4b31      	ldr	r3, [pc, #196]	; (8007530 <HAL_RCC_ClockConfig+0x358>)
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	492e      	ldr	r1, [pc, #184]	; (8007530 <HAL_RCC_ClockConfig+0x358>)
 8007478:	4313      	orrs	r3, r2
 800747a:	61cb      	str	r3, [r1, #28]
>>>>>>> Stashed changes
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d010      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699a      	ldr	r2, [r3, #24]
 80040c8:	4b28      	ldr	r3, [pc, #160]	; (800416c <HAL_RCC_ClockConfig+0x358>)
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d208      	bcs.n	80040e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040d4:	4b25      	ldr	r3, [pc, #148]	; (800416c <HAL_RCC_ClockConfig+0x358>)
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	4922      	ldr	r1, [pc, #136]	; (800416c <HAL_RCC_ClockConfig+0x358>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61cb      	str	r3, [r1, #28]
=======
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0310 	and.w	r3, r3, #16
 8007484:	2b00      	cmp	r3, #0
 8007486:	d010      	beq.n	80074aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	699a      	ldr	r2, [r3, #24]
 800748c:	4b28      	ldr	r3, [pc, #160]	; (8007530 <HAL_RCC_ClockConfig+0x358>)
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007494:	429a      	cmp	r2, r3
 8007496:	d208      	bcs.n	80074aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007498:	4b25      	ldr	r3, [pc, #148]	; (8007530 <HAL_RCC_ClockConfig+0x358>)
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	4922      	ldr	r1, [pc, #136]	; (8007530 <HAL_RCC_ClockConfig+0x358>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	61cb      	str	r3, [r1, #28]
>>>>>>> Stashed changes
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
<<<<<<< Updated upstream
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d010      	beq.n	8004114 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69da      	ldr	r2, [r3, #28]
 80040f6:	4b1d      	ldr	r3, [pc, #116]	; (800416c <HAL_RCC_ClockConfig+0x358>)
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040fe:	429a      	cmp	r2, r3
 8004100:	d208      	bcs.n	8004114 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004102:	4b1a      	ldr	r3, [pc, #104]	; (800416c <HAL_RCC_ClockConfig+0x358>)
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	4917      	ldr	r1, [pc, #92]	; (800416c <HAL_RCC_ClockConfig+0x358>)
 8004110:	4313      	orrs	r3, r2
 8004112:	620b      	str	r3, [r1, #32]
=======
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d010      	beq.n	80074d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	69da      	ldr	r2, [r3, #28]
 80074ba:	4b1d      	ldr	r3, [pc, #116]	; (8007530 <HAL_RCC_ClockConfig+0x358>)
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d208      	bcs.n	80074d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80074c6:	4b1a      	ldr	r3, [pc, #104]	; (8007530 <HAL_RCC_ClockConfig+0x358>)
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	4917      	ldr	r1, [pc, #92]	; (8007530 <HAL_RCC_ClockConfig+0x358>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	620b      	str	r3, [r1, #32]
>>>>>>> Stashed changes
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
<<<<<<< Updated upstream
 8004114:	f000 f834 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 8004118:	4602      	mov	r2, r0
 800411a:	4b14      	ldr	r3, [pc, #80]	; (800416c <HAL_RCC_ClockConfig+0x358>)
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	0a1b      	lsrs	r3, r3, #8
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	4912      	ldr	r1, [pc, #72]	; (8004170 <HAL_RCC_ClockConfig+0x35c>)
 8004126:	5ccb      	ldrb	r3, [r1, r3]
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
 8004130:	613b      	str	r3, [r7, #16]
=======
 80074d8:	f000 f834 	bl	8007544 <HAL_RCC_GetSysClockFreq>
 80074dc:	4602      	mov	r2, r0
 80074de:	4b14      	ldr	r3, [pc, #80]	; (8007530 <HAL_RCC_ClockConfig+0x358>)
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	0a1b      	lsrs	r3, r3, #8
 80074e4:	f003 030f 	and.w	r3, r3, #15
 80074e8:	4912      	ldr	r1, [pc, #72]	; (8007534 <HAL_RCC_ClockConfig+0x35c>)
 80074ea:	5ccb      	ldrb	r3, [r1, r3]
 80074ec:	f003 031f 	and.w	r3, r3, #31
 80074f0:	fa22 f303 	lsr.w	r3, r2, r3
 80074f4:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
<<<<<<< Updated upstream
 8004132:	4b0e      	ldr	r3, [pc, #56]	; (800416c <HAL_RCC_ClockConfig+0x358>)
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	4a0d      	ldr	r2, [pc, #52]	; (8004170 <HAL_RCC_ClockConfig+0x35c>)
 800413c:	5cd3      	ldrb	r3, [r2, r3]
 800413e:	f003 031f 	and.w	r3, r3, #31
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
 8004148:	4a0a      	ldr	r2, [pc, #40]	; (8004174 <HAL_RCC_ClockConfig+0x360>)
 800414a:	6013      	str	r3, [r2, #0]
=======
 80074f6:	4b0e      	ldr	r3, [pc, #56]	; (8007530 <HAL_RCC_ClockConfig+0x358>)
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	f003 030f 	and.w	r3, r3, #15
 80074fe:	4a0d      	ldr	r2, [pc, #52]	; (8007534 <HAL_RCC_ClockConfig+0x35c>)
 8007500:	5cd3      	ldrb	r3, [r2, r3]
 8007502:	f003 031f 	and.w	r3, r3, #31
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	fa22 f303 	lsr.w	r3, r2, r3
 800750c:	4a0a      	ldr	r2, [pc, #40]	; (8007538 <HAL_RCC_ClockConfig+0x360>)
 800750e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
<<<<<<< Updated upstream
 800414c:	4a0a      	ldr	r2, [pc, #40]	; (8004178 <HAL_RCC_ClockConfig+0x364>)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	6013      	str	r3, [r2, #0]
=======
 8007510:	4a0a      	ldr	r2, [pc, #40]	; (800753c <HAL_RCC_ClockConfig+0x364>)
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
<<<<<<< Updated upstream
 8004152:	4b0a      	ldr	r3, [pc, #40]	; (800417c <HAL_RCC_ClockConfig+0x368>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe fe72 	bl	8002e40 <HAL_InitTick>
 800415c:	4603      	mov	r3, r0
 800415e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004160:	7bfb      	ldrb	r3, [r7, #15]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	58024400 	.word	0x58024400
 8004170:	0800fd14 	.word	0x0800fd14
 8004174:	24000004 	.word	0x24000004
 8004178:	24000000 	.word	0x24000000
 800417c:	24000008 	.word	0x24000008

08004180 <HAL_RCC_GetSysClockFreq>:
=======
 8007516:	4b0a      	ldr	r3, [pc, #40]	; (8007540 <HAL_RCC_ClockConfig+0x368>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4618      	mov	r0, r3
 800751c:	f7fe f8fa 	bl	8005714 <HAL_InitTick>
 8007520:	4603      	mov	r3, r0
 8007522:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007524:	7bfb      	ldrb	r3, [r7, #15]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	58024400 	.word	0x58024400
 8007534:	08013c88 	.word	0x08013c88
 8007538:	24000004 	.word	0x24000004
 800753c:	24000000 	.word	0x24000000
 8007540:	24000010 	.word	0x24000010

08007544 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8004180:	b480      	push	{r7}
 8004182:	b089      	sub	sp, #36	; 0x24
 8004184:	af00      	add	r7, sp, #0
=======
 8007544:	b480      	push	{r7}
 8007546:	b089      	sub	sp, #36	; 0x24
 8007548:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
<<<<<<< Updated upstream
 8004186:	4bb3      	ldr	r3, [pc, #716]	; (8004454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800418e:	2b18      	cmp	r3, #24
 8004190:	f200 8155 	bhi.w	800443e <HAL_RCC_GetSysClockFreq+0x2be>
 8004194:	a201      	add	r2, pc, #4	; (adr r2, 800419c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	08004201 	.word	0x08004201
 80041a0:	0800443f 	.word	0x0800443f
 80041a4:	0800443f 	.word	0x0800443f
 80041a8:	0800443f 	.word	0x0800443f
 80041ac:	0800443f 	.word	0x0800443f
 80041b0:	0800443f 	.word	0x0800443f
 80041b4:	0800443f 	.word	0x0800443f
 80041b8:	0800443f 	.word	0x0800443f
 80041bc:	08004227 	.word	0x08004227
 80041c0:	0800443f 	.word	0x0800443f
 80041c4:	0800443f 	.word	0x0800443f
 80041c8:	0800443f 	.word	0x0800443f
 80041cc:	0800443f 	.word	0x0800443f
 80041d0:	0800443f 	.word	0x0800443f
 80041d4:	0800443f 	.word	0x0800443f
 80041d8:	0800443f 	.word	0x0800443f
 80041dc:	0800422d 	.word	0x0800422d
 80041e0:	0800443f 	.word	0x0800443f
 80041e4:	0800443f 	.word	0x0800443f
 80041e8:	0800443f 	.word	0x0800443f
 80041ec:	0800443f 	.word	0x0800443f
 80041f0:	0800443f 	.word	0x0800443f
 80041f4:	0800443f 	.word	0x0800443f
 80041f8:	0800443f 	.word	0x0800443f
 80041fc:	08004233 	.word	0x08004233
=======
 800754a:	4bb3      	ldr	r3, [pc, #716]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007552:	2b18      	cmp	r3, #24
 8007554:	f200 8155 	bhi.w	8007802 <HAL_RCC_GetSysClockFreq+0x2be>
 8007558:	a201      	add	r2, pc, #4	; (adr r2, 8007560 <HAL_RCC_GetSysClockFreq+0x1c>)
 800755a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755e:	bf00      	nop
 8007560:	080075c5 	.word	0x080075c5
 8007564:	08007803 	.word	0x08007803
 8007568:	08007803 	.word	0x08007803
 800756c:	08007803 	.word	0x08007803
 8007570:	08007803 	.word	0x08007803
 8007574:	08007803 	.word	0x08007803
 8007578:	08007803 	.word	0x08007803
 800757c:	08007803 	.word	0x08007803
 8007580:	080075eb 	.word	0x080075eb
 8007584:	08007803 	.word	0x08007803
 8007588:	08007803 	.word	0x08007803
 800758c:	08007803 	.word	0x08007803
 8007590:	08007803 	.word	0x08007803
 8007594:	08007803 	.word	0x08007803
 8007598:	08007803 	.word	0x08007803
 800759c:	08007803 	.word	0x08007803
 80075a0:	080075f1 	.word	0x080075f1
 80075a4:	08007803 	.word	0x08007803
 80075a8:	08007803 	.word	0x08007803
 80075ac:	08007803 	.word	0x08007803
 80075b0:	08007803 	.word	0x08007803
 80075b4:	08007803 	.word	0x08007803
 80075b8:	08007803 	.word	0x08007803
 80075bc:	08007803 	.word	0x08007803
 80075c0:	080075f7 	.word	0x080075f7
>>>>>>> Stashed changes
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
<<<<<<< Updated upstream
 8004200:	4b94      	ldr	r3, [pc, #592]	; (8004454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800420c:	4b91      	ldr	r3, [pc, #580]	; (8004454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	08db      	lsrs	r3, r3, #3
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	4a90      	ldr	r2, [pc, #576]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
 800421c:	61bb      	str	r3, [r7, #24]
=======
 80075c4:	4b94      	ldr	r3, [pc, #592]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0320 	and.w	r3, r3, #32
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d009      	beq.n	80075e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075d0:	4b91      	ldr	r3, [pc, #580]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	08db      	lsrs	r3, r3, #3
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	4a90      	ldr	r2, [pc, #576]	; (800781c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075dc:	fa22 f303 	lsr.w	r3, r2, r3
 80075e0:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
<<<<<<< Updated upstream
 800421e:	e111      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004220:	4b8d      	ldr	r3, [pc, #564]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004222:	61bb      	str	r3, [r7, #24]
    break;
 8004224:	e10e      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004226:	4b8d      	ldr	r3, [pc, #564]	; (800445c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004228:	61bb      	str	r3, [r7, #24]
    break;
 800422a:	e10b      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800422c:	4b8c      	ldr	r3, [pc, #560]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800422e:	61bb      	str	r3, [r7, #24]
    break;
 8004230:	e108      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x2c4>
=======
 80075e2:	e111      	b.n	8007808 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80075e4:	4b8d      	ldr	r3, [pc, #564]	; (800781c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075e6:	61bb      	str	r3, [r7, #24]
    break;
 80075e8:	e10e      	b.n	8007808 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80075ea:	4b8d      	ldr	r3, [pc, #564]	; (8007820 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80075ec:	61bb      	str	r3, [r7, #24]
    break;
 80075ee:	e10b      	b.n	8007808 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80075f0:	4b8c      	ldr	r3, [pc, #560]	; (8007824 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80075f2:	61bb      	str	r3, [r7, #24]
    break;
 80075f4:	e108      	b.n	8007808 <HAL_RCC_GetSysClockFreq+0x2c4>
>>>>>>> Stashed changes
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
<<<<<<< Updated upstream
 8004232:	4b88      	ldr	r3, [pc, #544]	; (8004454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800423c:	4b85      	ldr	r3, [pc, #532]	; (8004454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004246:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004248:	4b82      	ldr	r3, [pc, #520]	; (8004454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004252:	4b80      	ldr	r3, [pc, #512]	; (8004454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004256:	08db      	lsrs	r3, r3, #3
 8004258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	fb02 f303 	mul.w	r3, r2, r3
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 80e1 	beq.w	8004438 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b02      	cmp	r3, #2
 800427a:	f000 8083 	beq.w	8004384 <HAL_RCC_GetSysClockFreq+0x204>
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b02      	cmp	r3, #2
 8004282:	f200 80a1 	bhi.w	80043c8 <HAL_RCC_GetSysClockFreq+0x248>
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0x114>
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d056      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004292:	e099      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x248>
=======
 80075f6:	4b88      	ldr	r3, [pc, #544]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fa:	f003 0303 	and.w	r3, r3, #3
 80075fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007600:	4b85      	ldr	r3, [pc, #532]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007604:	091b      	lsrs	r3, r3, #4
 8007606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800760a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800760c:	4b82      	ldr	r3, [pc, #520]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007616:	4b80      	ldr	r3, [pc, #512]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761a:	08db      	lsrs	r3, r3, #3
 800761c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	fb02 f303 	mul.w	r3, r2, r3
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 80e1 	beq.w	80077fc <HAL_RCC_GetSysClockFreq+0x2b8>
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b02      	cmp	r3, #2
 800763e:	f000 8083 	beq.w	8007748 <HAL_RCC_GetSysClockFreq+0x204>
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2b02      	cmp	r3, #2
 8007646:	f200 80a1 	bhi.w	800778c <HAL_RCC_GetSysClockFreq+0x248>
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <HAL_RCC_GetSysClockFreq+0x114>
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d056      	beq.n	8007704 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007656:	e099      	b.n	800778c <HAL_RCC_GetSysClockFreq+0x248>
>>>>>>> Stashed changes
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
<<<<<<< Updated upstream
 8004294:	4b6f      	ldr	r3, [pc, #444]	; (8004454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d02d      	beq.n	80042fc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042a0:	4b6c      	ldr	r3, [pc, #432]	; (8004454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	08db      	lsrs	r3, r3, #3
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	4a6b      	ldr	r2, [pc, #428]	; (8004458 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
 80042b0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	ee07 3a90 	vmov	s15, r3
 80042b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ca:	4b62      	ldr	r3, [pc, #392]	; (8004454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042da:	ed97 6a02 	vldr	s12, [r7, #8]
 80042de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004464 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f6:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 8007658:	4b6f      	ldr	r3, [pc, #444]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0320 	and.w	r3, r3, #32
 8007660:	2b00      	cmp	r3, #0
 8007662:	d02d      	beq.n	80076c0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007664:	4b6c      	ldr	r3, [pc, #432]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	08db      	lsrs	r3, r3, #3
 800766a:	f003 0303 	and.w	r3, r3, #3
 800766e:	4a6b      	ldr	r2, [pc, #428]	; (800781c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007670:	fa22 f303 	lsr.w	r3, r2, r3
 8007674:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	ee07 3a90 	vmov	s15, r3
 800767c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800768e:	4b62      	ldr	r3, [pc, #392]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007696:	ee07 3a90 	vmov	s15, r3
 800769a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800769e:	ed97 6a02 	vldr	s12, [r7, #8]
 80076a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007828 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ba:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> Stashed changes
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
<<<<<<< Updated upstream
 80042fa:	e087      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004306:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004468 <HAL_RCC_GetSysClockFreq+0x2e8>
 800430a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800430e:	4b51      	ldr	r3, [pc, #324]	; (8004454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800431e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004322:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004464 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800432a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800432e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800433e:	e065      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	ee07 3a90 	vmov	s15, r3
 8004346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800446c <HAL_RCC_GetSysClockFreq+0x2ec>
 800434e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004352:	4b40      	ldr	r3, [pc, #256]	; (8004454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004362:	ed97 6a02 	vldr	s12, [r7, #8]
 8004366:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004464 <HAL_RCC_GetSysClockFreq+0x2e4>
 800436a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800437a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004382:	e043      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004470 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004396:	4b2f      	ldr	r3, [pc, #188]	; (8004454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004464 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043c6:	e021      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800446c <HAL_RCC_GetSysClockFreq+0x2ec>
 80043d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043da:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004464 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800440a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	0a5b      	lsrs	r3, r3, #9
 8004412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004416:	3301      	adds	r3, #1
 8004418:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	ee07 3a90 	vmov	s15, r3
 8004420:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004424:	edd7 6a07 	vldr	s13, [r7, #28]
 8004428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800442c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004430:	ee17 3a90 	vmov	r3, s15
 8004434:	61bb      	str	r3, [r7, #24]
=======
 80076be:	e087      	b.n	80077d0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	ee07 3a90 	vmov	s15, r3
 80076c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 800782c <HAL_RCC_GetSysClockFreq+0x2e8>
 80076ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076d2:	4b51      	ldr	r3, [pc, #324]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076da:	ee07 3a90 	vmov	s15, r3
 80076de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80076e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007828 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007702:	e065      	b.n	80077d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	ee07 3a90 	vmov	s15, r3
 800770a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007830 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007716:	4b40      	ldr	r3, [pc, #256]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007726:	ed97 6a02 	vldr	s12, [r7, #8]
 800772a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007828 <HAL_RCC_GetSysClockFreq+0x2e4>
 800772e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800773a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800773e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007746:	e043      	b.n	80077d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007752:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007834 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800775a:	4b2f      	ldr	r3, [pc, #188]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800775c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776a:	ed97 6a02 	vldr	s12, [r7, #8]
 800776e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007828 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800777a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800777e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800778a:	e021      	b.n	80077d0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007796:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007830 <HAL_RCC_GetSysClockFreq+0x2ec>
 800779a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800779e:	4b1e      	ldr	r3, [pc, #120]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80077b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007828 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80077d0:	4b11      	ldr	r3, [pc, #68]	; (8007818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d4:	0a5b      	lsrs	r3, r3, #9
 80077d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077da:	3301      	adds	r3, #1
 80077dc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	ee07 3a90 	vmov	s15, r3
 80077e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80077e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077f4:	ee17 3a90 	vmov	r3, s15
 80077f8:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
<<<<<<< Updated upstream
 8004436:	e005      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	61bb      	str	r3, [r7, #24]
    break;
 800443c:	e002      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800443e:	4b07      	ldr	r3, [pc, #28]	; (800445c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004440:	61bb      	str	r3, [r7, #24]
    break;
 8004442:	bf00      	nop
  }

  return sysclockfreq;
 8004444:	69bb      	ldr	r3, [r7, #24]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3724      	adds	r7, #36	; 0x24
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	58024400 	.word	0x58024400
 8004458:	03d09000 	.word	0x03d09000
 800445c:	003d0900 	.word	0x003d0900
 8004460:	007a1200 	.word	0x007a1200
 8004464:	46000000 	.word	0x46000000
 8004468:	4c742400 	.word	0x4c742400
 800446c:	4a742400 	.word	0x4a742400
 8004470:	4af42400 	.word	0x4af42400

08004474 <HAL_RCC_GetHCLKFreq>:
=======
 80077fa:	e005      	b.n	8007808 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	61bb      	str	r3, [r7, #24]
    break;
 8007800:	e002      	b.n	8007808 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007802:	4b07      	ldr	r3, [pc, #28]	; (8007820 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007804:	61bb      	str	r3, [r7, #24]
    break;
 8007806:	bf00      	nop
  }

  return sysclockfreq;
 8007808:	69bb      	ldr	r3, [r7, #24]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3724      	adds	r7, #36	; 0x24
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	58024400 	.word	0x58024400
 800781c:	03d09000 	.word	0x03d09000
 8007820:	003d0900 	.word	0x003d0900
 8007824:	007a1200 	.word	0x007a1200
 8007828:	46000000 	.word	0x46000000
 800782c:	4c742400 	.word	0x4c742400
 8007830:	4a742400 	.word	0x4a742400
 8007834:	4af42400 	.word	0x4af42400

08007838 <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
=======
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
<<<<<<< Updated upstream
 800447a:	f7ff fe81 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 800447e:	4602      	mov	r2, r0
 8004480:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	0a1b      	lsrs	r3, r3, #8
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	490f      	ldr	r1, [pc, #60]	; (80044c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800448c:	5ccb      	ldrb	r3, [r1, r3]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	fa22 f303 	lsr.w	r3, r2, r3
 8004496:	607b      	str	r3, [r7, #4]
=======
 800783e:	f7ff fe81 	bl	8007544 <HAL_RCC_GetSysClockFreq>
 8007842:	4602      	mov	r2, r0
 8007844:	4b10      	ldr	r3, [pc, #64]	; (8007888 <HAL_RCC_GetHCLKFreq+0x50>)
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	0a1b      	lsrs	r3, r3, #8
 800784a:	f003 030f 	and.w	r3, r3, #15
 800784e:	490f      	ldr	r1, [pc, #60]	; (800788c <HAL_RCC_GetHCLKFreq+0x54>)
 8007850:	5ccb      	ldrb	r3, [r1, r3]
 8007852:	f003 031f 	and.w	r3, r3, #31
 8007856:	fa22 f303 	lsr.w	r3, r2, r3
 800785a:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
<<<<<<< Updated upstream
 8004498:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	4a09      	ldr	r2, [pc, #36]	; (80044c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80044a2:	5cd3      	ldrb	r3, [r2, r3]
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	fa22 f303 	lsr.w	r3, r2, r3
 80044ae:	4a07      	ldr	r2, [pc, #28]	; (80044cc <HAL_RCC_GetHCLKFreq+0x58>)
 80044b0:	6013      	str	r3, [r2, #0]
=======
 800785c:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <HAL_RCC_GetHCLKFreq+0x50>)
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	f003 030f 	and.w	r3, r3, #15
 8007864:	4a09      	ldr	r2, [pc, #36]	; (800788c <HAL_RCC_GetHCLKFreq+0x54>)
 8007866:	5cd3      	ldrb	r3, [r2, r3]
 8007868:	f003 031f 	and.w	r3, r3, #31
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	fa22 f303 	lsr.w	r3, r2, r3
 8007872:	4a07      	ldr	r2, [pc, #28]	; (8007890 <HAL_RCC_GetHCLKFreq+0x58>)
 8007874:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
<<<<<<< Updated upstream
 80044b2:	4a07      	ldr	r2, [pc, #28]	; (80044d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80044b8:	4b04      	ldr	r3, [pc, #16]	; (80044cc <HAL_RCC_GetHCLKFreq+0x58>)
 80044ba:	681b      	ldr	r3, [r3, #0]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	58024400 	.word	0x58024400
 80044c8:	0800fd14 	.word	0x0800fd14
 80044cc:	24000004 	.word	0x24000004
 80044d0:	24000000 	.word	0x24000000

080044d4 <HAL_RCC_GetPCLK1Freq>:
=======
 8007876:	4a07      	ldr	r2, [pc, #28]	; (8007894 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800787c:	4b04      	ldr	r3, [pc, #16]	; (8007890 <HAL_RCC_GetHCLKFreq+0x58>)
 800787e:	681b      	ldr	r3, [r3, #0]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	58024400 	.word	0x58024400
 800788c:	08013c88 	.word	0x08013c88
 8007890:	24000004 	.word	0x24000004
 8007894:	24000000 	.word	0x24000000

08007898 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80044d8:	f7ff ffcc 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 80044dc:	4602      	mov	r2, r0
 80044de:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	091b      	lsrs	r3, r3, #4
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	4904      	ldr	r1, [pc, #16]	; (80044fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80044ea:	5ccb      	ldrb	r3, [r1, r3]
 80044ec:	f003 031f 	and.w	r3, r3, #31
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
=======
 8007898:	b580      	push	{r7, lr}
 800789a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800789c:	f7ff ffcc 	bl	8007838 <HAL_RCC_GetHCLKFreq>
 80078a0:	4602      	mov	r2, r0
 80078a2:	4b06      	ldr	r3, [pc, #24]	; (80078bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	091b      	lsrs	r3, r3, #4
 80078a8:	f003 0307 	and.w	r3, r3, #7
 80078ac:	4904      	ldr	r1, [pc, #16]	; (80078c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078ae:	5ccb      	ldrb	r3, [r1, r3]
 80078b0:	f003 031f 	and.w	r3, r3, #31
 80078b4:	fa22 f303 	lsr.w	r3, r2, r3
>>>>>>> Stashed changes
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
<<<<<<< Updated upstream
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	58024400 	.word	0x58024400
 80044fc:	0800fd14 	.word	0x0800fd14

08004500 <HAL_RCC_GetPCLK2Freq>:
=======
 80078b8:	4618      	mov	r0, r3
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	58024400 	.word	0x58024400
 80078c0:	08013c88 	.word	0x08013c88

080078c4 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< Updated upstream
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004504:	f7ff ffb6 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 8004508:	4602      	mov	r2, r0
 800450a:	4b06      	ldr	r3, [pc, #24]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x24>)
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	0a1b      	lsrs	r3, r3, #8
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	4904      	ldr	r1, [pc, #16]	; (8004528 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004516:	5ccb      	ldrb	r3, [r1, r3]
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
=======
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80078c8:	f7ff ffb6 	bl	8007838 <HAL_RCC_GetHCLKFreq>
 80078cc:	4602      	mov	r2, r0
 80078ce:	4b06      	ldr	r3, [pc, #24]	; (80078e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	0a1b      	lsrs	r3, r3, #8
 80078d4:	f003 0307 	and.w	r3, r3, #7
 80078d8:	4904      	ldr	r1, [pc, #16]	; (80078ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80078da:	5ccb      	ldrb	r3, [r1, r3]
 80078dc:	f003 031f 	and.w	r3, r3, #31
 80078e0:	fa22 f303 	lsr.w	r3, r2, r3
>>>>>>> Stashed changes
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
<<<<<<< Updated upstream
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}
 8004524:	58024400 	.word	0x58024400
 8004528:	0800fd14 	.word	0x0800fd14

0800452c <HAL_RCCEx_PeriphCLKConfig>:
=======
 80078e4:	4618      	mov	r0, r3
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	58024400 	.word	0x58024400
 80078ec:	08013c88 	.word	0x08013c88

080078f0 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> Stashed changes
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< Updated upstream
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004534:	2300      	movs	r3, #0
 8004536:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004538:	2300      	movs	r3, #0
 800453a:	75bb      	strb	r3, [r7, #22]
=======
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078f8:	2300      	movs	r3, #0
 80078fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078fc:	2300      	movs	r3, #0
 80078fe:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
<<<<<<< Updated upstream
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d03f      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800454c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004550:	d02a      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004552:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004556:	d824      	bhi.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800455c:	d018      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800455e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004562:	d81e      	bhi.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800456c:	d007      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800456e:	e018      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
=======
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d03f      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007910:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007914:	d02a      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007916:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800791a:	d824      	bhi.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800791c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007920:	d018      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007926:	d81e      	bhi.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800792c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007930:	d007      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007932:	e018      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x76>
>>>>>>> Stashed changes
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< Updated upstream
 8004570:	4ba3      	ldr	r3, [pc, #652]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	4aa2      	ldr	r2, [pc, #648]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800457a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800457c:	e015      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
=======
 8007934:	4ba3      	ldr	r3, [pc, #652]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	4aa2      	ldr	r2, [pc, #648]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800793a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800793e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007940:	e015      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x7e>
>>>>>>> Stashed changes

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
<<<<<<< Updated upstream
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3304      	adds	r3, #4
 8004582:	2102      	movs	r1, #2
 8004584:	4618      	mov	r0, r3
 8004586:	f001 f9d5 	bl	8005934 <RCCEx_PLL2_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800458e:	e00c      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3324      	adds	r3, #36	; 0x24
 8004594:	2102      	movs	r1, #2
 8004596:	4618      	mov	r0, r3
 8004598:	f001 fa7e 	bl	8005a98 <RCCEx_PLL3_Config>
 800459c:	4603      	mov	r3, r0
 800459e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045a0:	e003      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
=======
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3304      	adds	r3, #4
 8007946:	2102      	movs	r1, #2
 8007948:	4618      	mov	r0, r3
 800794a:	f001 f9d5 	bl	8008cf8 <RCCEx_PLL2_Config>
 800794e:	4603      	mov	r3, r0
 8007950:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007952:	e00c      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3324      	adds	r3, #36	; 0x24
 8007958:	2102      	movs	r1, #2
 800795a:	4618      	mov	r0, r3
 800795c:	f001 fa7e 	bl	8008e5c <RCCEx_PLL3_Config>
 8007960:	4603      	mov	r3, r0
 8007962:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007964:	e003      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x7e>
>>>>>>> Stashed changes
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 80045a2:	2301      	movs	r3, #1
 80045a4:	75fb      	strb	r3, [r7, #23]
      break;
 80045a6:	e000      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80045a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045aa:	7dfb      	ldrb	r3, [r7, #23]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045b0:	4b93      	ldr	r3, [pc, #588]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045bc:	4990      	ldr	r1, [pc, #576]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	650b      	str	r3, [r1, #80]	; 0x50
 80045c2:	e001      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
=======
 8007966:	2301      	movs	r3, #1
 8007968:	75fb      	strb	r3, [r7, #23]
      break;
 800796a:	e000      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800796c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d109      	bne.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007974:	4b93      	ldr	r3, [pc, #588]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007978:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007980:	4990      	ldr	r1, [pc, #576]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007982:	4313      	orrs	r3, r2
 8007984:	650b      	str	r3, [r1, #80]	; 0x50
 8007986:	e001      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x9c>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	75bb      	strb	r3, [r7, #22]
=======
 8007988:	7dfb      	ldrb	r3, [r7, #23]
 800798a:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
<<<<<<< Updated upstream
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d03d      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d826      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80045dc:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	080045f9 	.word	0x080045f9
 80045e8:	08004607 	.word	0x08004607
 80045ec:	08004619 	.word	0x08004619
 80045f0:	08004631 	.word	0x08004631
 80045f4:	08004631 	.word	0x08004631
=======
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007994:	2b00      	cmp	r3, #0
 8007996:	d03d      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800799c:	2b04      	cmp	r3, #4
 800799e:	d826      	bhi.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80079a0:	a201      	add	r2, pc, #4	; (adr r2, 80079a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80079a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a6:	bf00      	nop
 80079a8:	080079bd 	.word	0x080079bd
 80079ac:	080079cb 	.word	0x080079cb
 80079b0:	080079dd 	.word	0x080079dd
 80079b4:	080079f5 	.word	0x080079f5
 80079b8:	080079f5 	.word	0x080079f5
>>>>>>> Stashed changes
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< Updated upstream
 80045f8:	4b81      	ldr	r3, [pc, #516]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	4a80      	ldr	r2, [pc, #512]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004604:	e015      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x106>
=======
 80079bc:	4b81      	ldr	r3, [pc, #516]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	4a80      	ldr	r2, [pc, #512]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079c8:	e015      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
>>>>>>> Stashed changes

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
<<<<<<< Updated upstream
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3304      	adds	r3, #4
 800460a:	2100      	movs	r1, #0
 800460c:	4618      	mov	r0, r3
 800460e:	f001 f991 	bl	8005934 <RCCEx_PLL2_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004616:	e00c      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3324      	adds	r3, #36	; 0x24
 800461c:	2100      	movs	r1, #0
 800461e:	4618      	mov	r0, r3
 8004620:	f001 fa3a 	bl	8005a98 <RCCEx_PLL3_Config>
 8004624:	4603      	mov	r3, r0
 8004626:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004628:	e003      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x106>
=======
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3304      	adds	r3, #4
 80079ce:	2100      	movs	r1, #0
 80079d0:	4618      	mov	r0, r3
 80079d2:	f001 f991 	bl	8008cf8 <RCCEx_PLL2_Config>
 80079d6:	4603      	mov	r3, r0
 80079d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079da:	e00c      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3324      	adds	r3, #36	; 0x24
 80079e0:	2100      	movs	r1, #0
 80079e2:	4618      	mov	r0, r3
 80079e4:	f001 fa3a 	bl	8008e5c <RCCEx_PLL3_Config>
 80079e8:	4603      	mov	r3, r0
 80079ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079ec:	e003      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
>>>>>>> Stashed changes
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
      break;
 800462e:	e000      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d109      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004638:	4b71      	ldr	r3, [pc, #452]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800463a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463c:	f023 0207 	bic.w	r2, r3, #7
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004644:	496e      	ldr	r1, [pc, #440]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004646:	4313      	orrs	r3, r2
 8004648:	650b      	str	r3, [r1, #80]	; 0x50
 800464a:	e001      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x124>
=======
 80079ee:	2301      	movs	r3, #1
 80079f0:	75fb      	strb	r3, [r7, #23]
      break;
 80079f2:	e000      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80079f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d109      	bne.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079fc:	4b71      	ldr	r3, [pc, #452]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a00:	f023 0207 	bic.w	r2, r3, #7
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a08:	496e      	ldr	r1, [pc, #440]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	650b      	str	r3, [r1, #80]	; 0x50
 8007a0e:	e001      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x124>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 800464c:	7dfb      	ldrb	r3, [r7, #23]
 800464e:	75bb      	strb	r3, [r7, #22]
=======
 8007a10:	7dfb      	ldrb	r3, [r7, #23]
 8007a12:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
<<<<<<< Updated upstream
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004658:	2b00      	cmp	r3, #0
 800465a:	d042      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004664:	d02b      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800466a:	d825      	bhi.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800466c:	2bc0      	cmp	r3, #192	; 0xc0
 800466e:	d028      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004670:	2bc0      	cmp	r3, #192	; 0xc0
 8004672:	d821      	bhi.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004674:	2b80      	cmp	r3, #128	; 0x80
 8004676:	d016      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004678:	2b80      	cmp	r3, #128	; 0x80
 800467a:	d81d      	bhi.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	d007      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004684:	e018      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
=======
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d042      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a28:	d02b      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a2e:	d825      	bhi.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007a30:	2bc0      	cmp	r3, #192	; 0xc0
 8007a32:	d028      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007a34:	2bc0      	cmp	r3, #192	; 0xc0
 8007a36:	d821      	bhi.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007a38:	2b80      	cmp	r3, #128	; 0x80
 8007a3a:	d016      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007a3c:	2b80      	cmp	r3, #128	; 0x80
 8007a3e:	d81d      	bhi.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007a44:	2b40      	cmp	r3, #64	; 0x40
 8007a46:	d007      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007a48:	e018      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
>>>>>>> Stashed changes
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< Updated upstream
 8004686:	4b5e      	ldr	r3, [pc, #376]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	4a5d      	ldr	r2, [pc, #372]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800468c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004690:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004692:	e017      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
=======
 8007a4a:	4b5e      	ldr	r3, [pc, #376]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4e:	4a5d      	ldr	r2, [pc, #372]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007a56:	e017      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x198>
>>>>>>> Stashed changes

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
<<<<<<< Updated upstream
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	2100      	movs	r1, #0
 800469a:	4618      	mov	r0, r3
 800469c:	f001 f94a 	bl	8005934 <RCCEx_PLL2_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80046a4:	e00e      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3324      	adds	r3, #36	; 0x24
 80046aa:	2100      	movs	r1, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f001 f9f3 	bl	8005a98 <RCCEx_PLL3_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80046b6:	e005      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
=======
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f001 f94a 	bl	8008cf8 <RCCEx_PLL2_Config>
 8007a64:	4603      	mov	r3, r0
 8007a66:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007a68:	e00e      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3324      	adds	r3, #36	; 0x24
 8007a6e:	2100      	movs	r1, #0
 8007a70:	4618      	mov	r0, r3
 8007a72:	f001 f9f3 	bl	8008e5c <RCCEx_PLL3_Config>
 8007a76:	4603      	mov	r3, r0
 8007a78:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007a7a:	e005      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x198>
>>>>>>> Stashed changes
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 80046b8:	2301      	movs	r3, #1
 80046ba:	75fb      	strb	r3, [r7, #23]
      break;
 80046bc:	e002      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80046be:	bf00      	nop
 80046c0:	e000      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80046c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d109      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80046ca:	4b4d      	ldr	r3, [pc, #308]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d6:	494a      	ldr	r1, [pc, #296]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	650b      	str	r3, [r1, #80]	; 0x50
 80046dc:	e001      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
=======
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a80:	e002      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007a82:	bf00      	nop
 8007a84:	e000      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d109      	bne.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007a8e:	4b4d      	ldr	r3, [pc, #308]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a92:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a9a:	494a      	ldr	r1, [pc, #296]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	650b      	str	r3, [r1, #80]	; 0x50
 8007aa0:	e001      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 80046de:	7dfb      	ldrb	r3, [r7, #23]
 80046e0:	75bb      	strb	r3, [r7, #22]
=======
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
 8007aa4:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
<<<<<<< Updated upstream
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d049      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046f8:	d030      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80046fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046fe:	d82a      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004700:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004704:	d02c      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004706:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800470a:	d824      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800470c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004710:	d018      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004716:	d81e      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800471c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004720:	d007      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004722:	e018      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x22a>
=======
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d049      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ab8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007abc:	d030      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007abe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ac2:	d82a      	bhi.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ac4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ac8:	d02c      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007aca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ace:	d824      	bhi.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ad4:	d018      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ada:	d81e      	bhi.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d003      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007ae0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ae4:	d007      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007ae6:	e018      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
>>>>>>> Stashed changes
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< Updated upstream
 8004724:	4b36      	ldr	r3, [pc, #216]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	4a35      	ldr	r2, [pc, #212]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800472a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800472e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004730:	e017      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x236>
=======
 8007ae8:	4b36      	ldr	r3, [pc, #216]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	4a35      	ldr	r2, [pc, #212]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007af2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007af4:	e017      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x236>
>>>>>>> Stashed changes

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
<<<<<<< Updated upstream
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3304      	adds	r3, #4
 8004736:	2100      	movs	r1, #0
 8004738:	4618      	mov	r0, r3
 800473a:	f001 f8fb 	bl	8005934 <RCCEx_PLL2_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004742:	e00e      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3324      	adds	r3, #36	; 0x24
 8004748:	2100      	movs	r1, #0
 800474a:	4618      	mov	r0, r3
 800474c:	f001 f9a4 	bl	8005a98 <RCCEx_PLL3_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004754:	e005      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x236>
=======
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3304      	adds	r3, #4
 8007afa:	2100      	movs	r1, #0
 8007afc:	4618      	mov	r0, r3
 8007afe:	f001 f8fb 	bl	8008cf8 <RCCEx_PLL2_Config>
 8007b02:	4603      	mov	r3, r0
 8007b04:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007b06:	e00e      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	3324      	adds	r3, #36	; 0x24
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f001 f9a4 	bl	8008e5c <RCCEx_PLL3_Config>
 8007b14:	4603      	mov	r3, r0
 8007b16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b18:	e005      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x236>
>>>>>>> Stashed changes
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 8004756:	2301      	movs	r3, #1
 8004758:	75fb      	strb	r3, [r7, #23]
      break;
 800475a:	e002      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800475c:	bf00      	nop
 800475e:	e000      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004762:	7dfb      	ldrb	r3, [r7, #23]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10a      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800476a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004776:	4922      	ldr	r1, [pc, #136]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004778:	4313      	orrs	r3, r2
 800477a:	658b      	str	r3, [r1, #88]	; 0x58
 800477c:	e001      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x256>
=======
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b1e:	e002      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007b20:	bf00      	nop
 8007b22:	e000      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b26:	7dfb      	ldrb	r3, [r7, #23]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10a      	bne.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007b2c:	4b25      	ldr	r3, [pc, #148]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b30:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b3a:	4922      	ldr	r1, [pc, #136]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	658b      	str	r3, [r1, #88]	; 0x58
 8007b40:	e001      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x256>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 800477e:	7dfb      	ldrb	r3, [r7, #23]
 8004780:	75bb      	strb	r3, [r7, #22]
=======
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
 8007b44:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
<<<<<<< Updated upstream
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800478a:	2b00      	cmp	r3, #0
 800478c:	d04b      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004794:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004798:	d030      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800479a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800479e:	d82a      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80047a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047a4:	d02e      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80047a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047aa:	d824      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80047ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047b0:	d018      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80047b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047b6:	d81e      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80047bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047c0:	d007      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80047c2:	e018      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
=======
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d04b      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b5c:	d030      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007b5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b62:	d82a      	bhi.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007b64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b68:	d02e      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007b6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b6e:	d824      	bhi.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b74:	d018      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007b76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b7a:	d81e      	bhi.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d003      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b84:	d007      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007b86:	e018      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
>>>>>>> Stashed changes
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< Updated upstream
 80047c4:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	4a0d      	ldr	r2, [pc, #52]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047d0:	e019      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x2da>
=======
 8007b88:	4b0e      	ldr	r3, [pc, #56]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	4a0d      	ldr	r2, [pc, #52]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b94:	e019      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x2da>
>>>>>>> Stashed changes

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
<<<<<<< Updated upstream
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3304      	adds	r3, #4
 80047d6:	2100      	movs	r1, #0
 80047d8:	4618      	mov	r0, r3
 80047da:	f001 f8ab 	bl	8005934 <RCCEx_PLL2_Config>
 80047de:	4603      	mov	r3, r0
 80047e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80047e2:	e010      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3324      	adds	r3, #36	; 0x24
 80047e8:	2100      	movs	r1, #0
 80047ea:	4618      	mov	r0, r3
 80047ec:	f001 f954 	bl	8005a98 <RCCEx_PLL3_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047f4:	e007      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x2da>
=======
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f001 f8ab 	bl	8008cf8 <RCCEx_PLL2_Config>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007ba6:	e010      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3324      	adds	r3, #36	; 0x24
 8007bac:	2100      	movs	r1, #0
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f001 f954 	bl	8008e5c <RCCEx_PLL3_Config>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bb8:	e007      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x2da>
>>>>>>> Stashed changes
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 80047f6:	2301      	movs	r3, #1
 80047f8:	75fb      	strb	r3, [r7, #23]
      break;
 80047fa:	e004      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80047fc:	bf00      	nop
 80047fe:	e002      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004800:	58024400 	.word	0x58024400
      break;
 8004804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004806:	7dfb      	ldrb	r3, [r7, #23]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10a      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800480c:	4b99      	ldr	r3, [pc, #612]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004810:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800481a:	4996      	ldr	r1, [pc, #600]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800481c:	4313      	orrs	r3, r2
 800481e:	658b      	str	r3, [r1, #88]	; 0x58
 8004820:	e001      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
=======
 8007bba:	2301      	movs	r3, #1
 8007bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8007bbe:	e004      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007bc0:	bf00      	nop
 8007bc2:	e002      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007bc4:	58024400 	.word	0x58024400
      break;
 8007bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bca:	7dfb      	ldrb	r3, [r7, #23]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10a      	bne.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007bd0:	4b99      	ldr	r3, [pc, #612]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007bde:	4996      	ldr	r1, [pc, #600]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	658b      	str	r3, [r1, #88]	; 0x58
 8007be4:	e001      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8004822:	7dfb      	ldrb	r3, [r7, #23]
 8004824:	75bb      	strb	r3, [r7, #22]
=======
 8007be6:	7dfb      	ldrb	r3, [r7, #23]
 8007be8:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
<<<<<<< Updated upstream
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d032      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004836:	2b30      	cmp	r3, #48	; 0x30
 8004838:	d01c      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800483a:	2b30      	cmp	r3, #48	; 0x30
 800483c:	d817      	bhi.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800483e:	2b20      	cmp	r3, #32
 8004840:	d00c      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004842:	2b20      	cmp	r3, #32
 8004844:	d813      	bhi.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d016      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800484a:	2b10      	cmp	r3, #16
 800484c:	d10f      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x342>
=======
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d032      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bfa:	2b30      	cmp	r3, #48	; 0x30
 8007bfc:	d01c      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007bfe:	2b30      	cmp	r3, #48	; 0x30
 8007c00:	d817      	bhi.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	d00c      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007c06:	2b20      	cmp	r3, #32
 8007c08:	d813      	bhi.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d016      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007c0e:	2b10      	cmp	r3, #16
 8007c10:	d10f      	bne.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x342>
>>>>>>> Stashed changes
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< Updated upstream
 800484e:	4b89      	ldr	r3, [pc, #548]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	4a88      	ldr	r2, [pc, #544]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004858:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800485a:	e00e      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x34e>
=======
 8007c12:	4b89      	ldr	r3, [pc, #548]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	4a88      	ldr	r2, [pc, #544]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007c1e:	e00e      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
>>>>>>> Stashed changes

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
<<<<<<< Updated upstream
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3304      	adds	r3, #4
 8004860:	2102      	movs	r1, #2
 8004862:	4618      	mov	r0, r3
 8004864:	f001 f866 	bl	8005934 <RCCEx_PLL2_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800486c:	e005      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x34e>
=======
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3304      	adds	r3, #4
 8007c24:	2102      	movs	r1, #2
 8007c26:	4618      	mov	r0, r3
 8007c28:	f001 f866 	bl	8008cf8 <RCCEx_PLL2_Config>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007c30:	e005      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
>>>>>>> Stashed changes
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 800486e:	2301      	movs	r3, #1
 8004870:	75fb      	strb	r3, [r7, #23]
      break;
 8004872:	e002      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004874:	bf00      	nop
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d109      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004880:	4b7c      	ldr	r3, [pc, #496]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004884:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488c:	4979      	ldr	r1, [pc, #484]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800488e:	4313      	orrs	r3, r2
 8004890:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004892:	e001      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x36c>
=======
 8007c32:	2301      	movs	r3, #1
 8007c34:	75fb      	strb	r3, [r7, #23]
      break;
 8007c36:	e002      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007c38:	bf00      	nop
 8007c3a:	e000      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d109      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c44:	4b7c      	ldr	r3, [pc, #496]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c50:	4979      	ldr	r1, [pc, #484]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007c56:	e001      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8004894:	7dfb      	ldrb	r3, [r7, #23]
 8004896:	75bb      	strb	r3, [r7, #22]
=======
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
<<<<<<< Updated upstream
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d047      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048ac:	d030      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80048ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048b2:	d82a      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80048b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048b8:	d02c      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80048ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048be:	d824      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80048c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c4:	d018      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80048c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ca:	d81e      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80048d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d4:	d007      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80048d6:	e018      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x3de>
=======
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d047      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c70:	d030      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c76:	d82a      	bhi.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007c78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c7c:	d02c      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007c7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c82:	d824      	bhi.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c88:	d018      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c8e:	d81e      	bhi.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c98:	d007      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007c9a:	e018      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x3de>
>>>>>>> Stashed changes
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< Updated upstream
 80048d8:	4b66      	ldr	r3, [pc, #408]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	4a65      	ldr	r2, [pc, #404]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80048e4:	e017      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3304      	adds	r3, #4
 80048ea:	2100      	movs	r1, #0
 80048ec:	4618      	mov	r0, r3
 80048ee:	f001 f821 	bl	8005934 <RCCEx_PLL2_Config>
 80048f2:	4603      	mov	r3, r0
 80048f4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80048f6:	e00e      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3324      	adds	r3, #36	; 0x24
 80048fc:	2100      	movs	r1, #0
 80048fe:	4618      	mov	r0, r3
 8004900:	f001 f8ca 	bl	8005a98 <RCCEx_PLL3_Config>
 8004904:	4603      	mov	r3, r0
 8004906:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004908:	e005      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
=======
 8007c9c:	4b66      	ldr	r3, [pc, #408]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca0:	4a65      	ldr	r2, [pc, #404]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ca8:	e017      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3304      	adds	r3, #4
 8007cae:	2100      	movs	r1, #0
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f001 f821 	bl	8008cf8 <RCCEx_PLL2_Config>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007cba:	e00e      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3324      	adds	r3, #36	; 0x24
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f001 f8ca 	bl	8008e5c <RCCEx_PLL3_Config>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ccc:	e005      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x3ea>
>>>>>>> Stashed changes
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 800490a:	2301      	movs	r3, #1
 800490c:	75fb      	strb	r3, [r7, #23]
      break;
 800490e:	e002      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004910:	bf00      	nop
 8004912:	e000      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004916:	7dfb      	ldrb	r3, [r7, #23]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800491c:	4b55      	ldr	r3, [pc, #340]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800491e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004920:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004928:	4952      	ldr	r1, [pc, #328]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800492a:	4313      	orrs	r3, r2
 800492c:	650b      	str	r3, [r1, #80]	; 0x50
 800492e:	e001      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x408>
=======
 8007cce:	2301      	movs	r3, #1
 8007cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd2:	e002      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007cd4:	bf00      	nop
 8007cd6:	e000      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d109      	bne.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007ce0:	4b55      	ldr	r3, [pc, #340]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ce4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cec:	4952      	ldr	r1, [pc, #328]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	650b      	str	r3, [r1, #80]	; 0x50
 8007cf2:	e001      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x408>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8004930:	7dfb      	ldrb	r3, [r7, #23]
 8004932:	75bb      	strb	r3, [r7, #22]
=======
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
 8007cf6:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
<<<<<<< Updated upstream
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d049      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004948:	d02e      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800494a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800494e:	d828      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004950:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004954:	d02a      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004956:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800495a:	d822      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800495c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004960:	d026      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004962:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004966:	d81c      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800496c:	d010      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800496e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004972:	d816      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01d      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497c:	d111      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
=======
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d049      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d0c:	d02e      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d12:	d828      	bhi.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007d14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d18:	d02a      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007d1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d1e:	d822      	bhi.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007d20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d24:	d026      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007d26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d2a:	d81c      	bhi.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d30:	d010      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007d32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d36:	d816      	bhi.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d01d      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d40:	d111      	bne.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x476>
>>>>>>> Stashed changes
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
<<<<<<< Updated upstream
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3304      	adds	r3, #4
 8004982:	2101      	movs	r1, #1
 8004984:	4618      	mov	r0, r3
 8004986:	f000 ffd5 	bl	8005934 <RCCEx_PLL2_Config>
 800498a:	4603      	mov	r3, r0
 800498c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800498e:	e012      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3324      	adds	r3, #36	; 0x24
 8004994:	2101      	movs	r1, #1
 8004996:	4618      	mov	r0, r3
 8004998:	f001 f87e 	bl	8005a98 <RCCEx_PLL3_Config>
 800499c:	4603      	mov	r3, r0
 800499e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80049a0:	e009      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
=======
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	3304      	adds	r3, #4
 8007d46:	2101      	movs	r1, #1
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 ffd5 	bl	8008cf8 <RCCEx_PLL2_Config>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007d52:	e012      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	3324      	adds	r3, #36	; 0x24
 8007d58:	2101      	movs	r1, #1
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f001 f87e 	bl	8008e5c <RCCEx_PLL3_Config>
 8007d60:	4603      	mov	r3, r0
 8007d62:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007d64:	e009      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
>>>>>>> Stashed changes
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 80049a2:	2301      	movs	r3, #1
 80049a4:	75fb      	strb	r3, [r7, #23]
      break;
 80049a6:	e006      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80049a8:	bf00      	nop
 80049aa:	e004      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80049ac:	bf00      	nop
 80049ae:	e002      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80049b0:	bf00      	nop
 80049b2:	e000      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80049b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d109      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80049bc:	4b2d      	ldr	r3, [pc, #180]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c8:	492a      	ldr	r1, [pc, #168]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	650b      	str	r3, [r1, #80]	; 0x50
 80049ce:	e001      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
=======
 8007d66:	2301      	movs	r3, #1
 8007d68:	75fb      	strb	r3, [r7, #23]
      break;
 8007d6a:	e006      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007d6c:	bf00      	nop
 8007d6e:	e004      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007d70:	bf00      	nop
 8007d72:	e002      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007d74:	bf00      	nop
 8007d76:	e000      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d7a:	7dfb      	ldrb	r3, [r7, #23]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d109      	bne.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007d80:	4b2d      	ldr	r3, [pc, #180]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d84:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d8c:	492a      	ldr	r1, [pc, #168]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	650b      	str	r3, [r1, #80]	; 0x50
 8007d92:	e001      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
 80049d2:	75bb      	strb	r3, [r7, #22]
=======
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
 8007d96:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
<<<<<<< Updated upstream
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d04d      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80049e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049ea:	d02e      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80049ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049f0:	d828      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80049f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f6:	d02a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80049f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fc:	d822      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80049fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a02:	d026      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004a04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a08:	d81c      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a0e:	d010      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a14:	d816      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01d      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a1e:	d111      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x518>
=======
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d04d      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dae:	d02e      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007db4:	d828      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dba:	d02a      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dc0:	d822      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007dc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007dc6:	d026      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007dc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007dcc:	d81c      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dd2:	d010      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dd8:	d816      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d01d      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007de2:	d111      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x518>
>>>>>>> Stashed changes
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
<<<<<<< Updated upstream
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3304      	adds	r3, #4
 8004a24:	2101      	movs	r1, #1
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 ff84 	bl	8005934 <RCCEx_PLL2_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004a30:	e012      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3324      	adds	r3, #36	; 0x24
 8004a36:	2101      	movs	r1, #1
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f001 f82d 	bl	8005a98 <RCCEx_PLL3_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004a42:	e009      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
=======
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	3304      	adds	r3, #4
 8007de8:	2101      	movs	r1, #1
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 ff84 	bl	8008cf8 <RCCEx_PLL2_Config>
 8007df0:	4603      	mov	r3, r0
 8007df2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007df4:	e012      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3324      	adds	r3, #36	; 0x24
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f001 f82d 	bl	8008e5c <RCCEx_PLL3_Config>
 8007e02:	4603      	mov	r3, r0
 8007e04:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007e06:	e009      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
>>>>>>> Stashed changes
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 8004a44:	2301      	movs	r3, #1
 8004a46:	75fb      	strb	r3, [r7, #23]
      break;
 8004a48:	e006      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004a4a:	bf00      	nop
 8004a4c:	e004      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e002      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004a52:	bf00      	nop
 8004a54:	e000      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004a5e:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a6c:	4901      	ldr	r1, [pc, #4]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	658b      	str	r3, [r1, #88]	; 0x58
 8004a72:	e003      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004a74:	58024400 	.word	0x58024400
=======
 8007e08:	2301      	movs	r3, #1
 8007e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e0c:	e006      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007e0e:	bf00      	nop
 8007e10:	e004      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007e12:	bf00      	nop
 8007e14:	e002      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007e16:	bf00      	nop
 8007e18:	e000      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10c      	bne.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007e22:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e30:	4901      	ldr	r1, [pc, #4]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	658b      	str	r3, [r1, #88]	; 0x58
 8007e36:	e003      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007e38:	58024400 	.word	0x58024400
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
 8004a7a:	75bb      	strb	r3, [r7, #22]
=======
 8007e3c:	7dfb      	ldrb	r3, [r7, #23]
 8007e3e:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
<<<<<<< Updated upstream
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d02f      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a90:	d00e      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a96:	d814      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d015      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004a9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aa0:	d10f      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x596>
=======
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d02f      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e54:	d00e      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e5a:	d814      	bhi.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d015      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e64:	d10f      	bne.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x596>
>>>>>>> Stashed changes
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< Updated upstream
 8004aa2:	4baf      	ldr	r3, [pc, #700]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	4aae      	ldr	r2, [pc, #696]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004aae:	e00c      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x59e>
=======
 8007e66:	4baf      	ldr	r3, [pc, #700]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6a:	4aae      	ldr	r2, [pc, #696]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007e72:	e00c      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
>>>>>>> Stashed changes

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
<<<<<<< Updated upstream
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 ff3c 	bl	8005934 <RCCEx_PLL2_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ac0:	e003      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x59e>
=======
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3304      	adds	r3, #4
 8007e78:	2101      	movs	r1, #1
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 ff3c 	bl	8008cf8 <RCCEx_PLL2_Config>
 8007e80:	4603      	mov	r3, r0
 8007e82:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007e84:	e003      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
>>>>>>> Stashed changes
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac6:	e000      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aca:	7dfb      	ldrb	r3, [r7, #23]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d109      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ad0:	4ba3      	ldr	r3, [pc, #652]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004adc:	49a0      	ldr	r1, [pc, #640]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	650b      	str	r3, [r1, #80]	; 0x50
 8004ae2:	e001      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
=======
 8007e86:	2301      	movs	r3, #1
 8007e88:	75fb      	strb	r3, [r7, #23]
      break;
 8007e8a:	e000      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d109      	bne.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e94:	4ba3      	ldr	r3, [pc, #652]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ea0:	49a0      	ldr	r1, [pc, #640]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	650b      	str	r3, [r1, #80]	; 0x50
 8007ea6:	e001      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8004ae4:	7dfb      	ldrb	r3, [r7, #23]
 8004ae6:	75bb      	strb	r3, [r7, #22]
=======
 8007ea8:	7dfb      	ldrb	r3, [r7, #23]
 8007eaa:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
<<<<<<< Updated upstream
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d032      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d81b      	bhi.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004afc:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b02:	bf00      	nop
 8004b04:	08004b3b 	.word	0x08004b3b
 8004b08:	08004b15 	.word	0x08004b15
 8004b0c:	08004b23 	.word	0x08004b23
 8004b10:	08004b3b 	.word	0x08004b3b
=======
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d032      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d81b      	bhi.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007ec0:	a201      	add	r2, pc, #4	; (adr r2, 8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec6:	bf00      	nop
 8007ec8:	08007eff 	.word	0x08007eff
 8007ecc:	08007ed9 	.word	0x08007ed9
 8007ed0:	08007ee7 	.word	0x08007ee7
 8007ed4:	08007eff 	.word	0x08007eff
>>>>>>> Stashed changes
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< Updated upstream
 8004b14:	4b92      	ldr	r3, [pc, #584]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	4a91      	ldr	r2, [pc, #580]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004b20:	e00c      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x610>
=======
 8007ed8:	4b92      	ldr	r3, [pc, #584]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	4a91      	ldr	r2, [pc, #580]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ee2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007ee4:	e00c      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x610>
>>>>>>> Stashed changes

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
<<<<<<< Updated upstream
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3304      	adds	r3, #4
 8004b26:	2102      	movs	r1, #2
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 ff03 	bl	8005934 <RCCEx_PLL2_Config>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004b32:	e003      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x610>
=======
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	3304      	adds	r3, #4
 8007eea:	2102      	movs	r1, #2
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 ff03 	bl	8008cf8 <RCCEx_PLL2_Config>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007ef6:	e003      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x610>
>>>>>>> Stashed changes
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 8004b34:	2301      	movs	r3, #1
 8004b36:	75fb      	strb	r3, [r7, #23]
      break;
 8004b38:	e000      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004b42:	4b87      	ldr	r3, [pc, #540]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b46:	f023 0203 	bic.w	r2, r3, #3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4e:	4984      	ldr	r1, [pc, #528]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b54:	e001      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
=======
 8007ef8:	2301      	movs	r3, #1
 8007efa:	75fb      	strb	r3, [r7, #23]
      break;
 8007efc:	e000      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f00:	7dfb      	ldrb	r3, [r7, #23]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d109      	bne.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007f06:	4b87      	ldr	r3, [pc, #540]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f0a:	f023 0203 	bic.w	r2, r3, #3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f12:	4984      	ldr	r1, [pc, #528]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007f18:	e001      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	75bb      	strb	r3, [r7, #22]
=======
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< Updated upstream
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 8086 	beq.w	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x748>
=======
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 8086 	beq.w	8008038 <HAL_RCCEx_PeriphCLKConfig+0x748>
>>>>>>> Stashed changes
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< Updated upstream
 8004b68:	4b7e      	ldr	r3, [pc, #504]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a7d      	ldr	r2, [pc, #500]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b74:	f7fe f9ae 	bl	8002ed4 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b7a:	e009      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7c:	f7fe f9aa 	bl	8002ed4 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b64      	cmp	r3, #100	; 0x64
 8004b88:	d902      	bls.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	75fb      	strb	r3, [r7, #23]
        break;
 8004b8e:	e005      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b90:	4b74      	ldr	r3, [pc, #464]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0ef      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x650>
=======
 8007f2c:	4b7e      	ldr	r3, [pc, #504]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a7d      	ldr	r2, [pc, #500]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f38:	f7fd fc36 	bl	80057a8 <HAL_GetTick>
 8007f3c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f3e:	e009      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f40:	f7fd fc32 	bl	80057a8 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b64      	cmp	r3, #100	; 0x64
 8007f4c:	d902      	bls.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	75fb      	strb	r3, [r7, #23]
        break;
 8007f52:	e005      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f54:	4b74      	ldr	r3, [pc, #464]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0ef      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x650>
>>>>>>> Stashed changes
      }
    }

    if(ret == HAL_OK)
<<<<<<< Updated upstream
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d166      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ba2:	4b6f      	ldr	r3, [pc, #444]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ba4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bac:	4053      	eors	r3, r2
 8004bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d013      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bb6:	4b6a      	ldr	r3, [pc, #424]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bbe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bc0:	4b67      	ldr	r3, [pc, #412]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	4a66      	ldr	r2, [pc, #408]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bcc:	4b64      	ldr	r3, [pc, #400]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd0:	4a63      	ldr	r2, [pc, #396]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004bd8:	4a61      	ldr	r2, [pc, #388]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6713      	str	r3, [r2, #112]	; 0x70
=======
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d166      	bne.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007f66:	4b6f      	ldr	r3, [pc, #444]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f70:	4053      	eors	r3, r2
 8007f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d013      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f7a:	4b6a      	ldr	r3, [pc, #424]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f82:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f84:	4b67      	ldr	r3, [pc, #412]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f88:	4a66      	ldr	r2, [pc, #408]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f8e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f90:	4b64      	ldr	r3, [pc, #400]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f94:	4a63      	ldr	r2, [pc, #396]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f9a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007f9c:	4a61      	ldr	r2, [pc, #388]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6713      	str	r3, [r2, #112]	; 0x70
>>>>>>> Stashed changes
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
<<<<<<< Updated upstream
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be8:	d115      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bea:	f7fe f973 	bl	8002ed4 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bf0:	e00b      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf2:	f7fe f96f 	bl	8002ed4 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d902      	bls.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	75fb      	strb	r3, [r7, #23]
            break;
 8004c08:	e005      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c0a:	4b55      	ldr	r3, [pc, #340]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0ed      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
=======
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fac:	d115      	bne.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fae:	f7fd fbfb 	bl	80057a8 <HAL_GetTick>
 8007fb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fb4:	e00b      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fb6:	f7fd fbf7 	bl	80057a8 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d902      	bls.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	75fb      	strb	r3, [r7, #23]
            break;
 8007fcc:	e005      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fce:	4b55      	ldr	r3, [pc, #340]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0ed      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
>>>>>>> Stashed changes
          }
        }
      }

      if(ret == HAL_OK)
<<<<<<< Updated upstream
 8004c16:	7dfb      	ldrb	r3, [r7, #23]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d126      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c2a:	d10d      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004c2c:	4b4c      	ldr	r3, [pc, #304]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c3a:	0919      	lsrs	r1, r3, #4
 8004c3c:	4b4a      	ldr	r3, [pc, #296]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004c3e:	400b      	ands	r3, r1
 8004c40:	4947      	ldr	r1, [pc, #284]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	610b      	str	r3, [r1, #16]
 8004c46:	e005      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004c48:	4b45      	ldr	r3, [pc, #276]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	4a44      	ldr	r2, [pc, #272]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c52:	6113      	str	r3, [r2, #16]
 8004c54:	4b42      	ldr	r3, [pc, #264]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c62:	493f      	ldr	r1, [pc, #252]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	670b      	str	r3, [r1, #112]	; 0x70
 8004c68:	e004      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x748>
=======
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d126      	bne.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fee:	d10d      	bne.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007ff0:	4b4c      	ldr	r3, [pc, #304]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ffe:	0919      	lsrs	r1, r3, #4
 8008000:	4b4a      	ldr	r3, [pc, #296]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008002:	400b      	ands	r3, r1
 8008004:	4947      	ldr	r1, [pc, #284]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008006:	4313      	orrs	r3, r2
 8008008:	610b      	str	r3, [r1, #16]
 800800a:	e005      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800800c:	4b45      	ldr	r3, [pc, #276]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	4a44      	ldr	r2, [pc, #272]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008012:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008016:	6113      	str	r3, [r2, #16]
 8008018:	4b42      	ldr	r3, [pc, #264]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800801a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008026:	493f      	ldr	r1, [pc, #252]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008028:	4313      	orrs	r3, r2
 800802a:	670b      	str	r3, [r1, #112]	; 0x70
 800802c:	e004      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x748>
>>>>>>> Stashed changes
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< Updated upstream
 8004c6a:	7dfb      	ldrb	r3, [r7, #23]
 8004c6c:	75bb      	strb	r3, [r7, #22]
 8004c6e:	e001      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x748>
=======
 800802e:	7dfb      	ldrb	r3, [r7, #23]
 8008030:	75bb      	strb	r3, [r7, #22]
 8008032:	e001      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x748>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
 8004c72:	75bb      	strb	r3, [r7, #22]
=======
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
<<<<<<< Updated upstream
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8085 	beq.w	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c86:	2b28      	cmp	r3, #40	; 0x28
 8004c88:	d866      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004c8a:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004d6d 	.word	0x08004d6d
 8004c94:	08004d59 	.word	0x08004d59
 8004c98:	08004d59 	.word	0x08004d59
 8004c9c:	08004d59 	.word	0x08004d59
 8004ca0:	08004d59 	.word	0x08004d59
 8004ca4:	08004d59 	.word	0x08004d59
 8004ca8:	08004d59 	.word	0x08004d59
 8004cac:	08004d59 	.word	0x08004d59
 8004cb0:	08004d35 	.word	0x08004d35
 8004cb4:	08004d59 	.word	0x08004d59
 8004cb8:	08004d59 	.word	0x08004d59
 8004cbc:	08004d59 	.word	0x08004d59
 8004cc0:	08004d59 	.word	0x08004d59
 8004cc4:	08004d59 	.word	0x08004d59
 8004cc8:	08004d59 	.word	0x08004d59
 8004ccc:	08004d59 	.word	0x08004d59
 8004cd0:	08004d47 	.word	0x08004d47
 8004cd4:	08004d59 	.word	0x08004d59
 8004cd8:	08004d59 	.word	0x08004d59
 8004cdc:	08004d59 	.word	0x08004d59
 8004ce0:	08004d59 	.word	0x08004d59
 8004ce4:	08004d59 	.word	0x08004d59
 8004ce8:	08004d59 	.word	0x08004d59
 8004cec:	08004d59 	.word	0x08004d59
 8004cf0:	08004d6d 	.word	0x08004d6d
 8004cf4:	08004d59 	.word	0x08004d59
 8004cf8:	08004d59 	.word	0x08004d59
 8004cfc:	08004d59 	.word	0x08004d59
 8004d00:	08004d59 	.word	0x08004d59
 8004d04:	08004d59 	.word	0x08004d59
 8004d08:	08004d59 	.word	0x08004d59
 8004d0c:	08004d59 	.word	0x08004d59
 8004d10:	08004d6d 	.word	0x08004d6d
 8004d14:	08004d59 	.word	0x08004d59
 8004d18:	08004d59 	.word	0x08004d59
 8004d1c:	08004d59 	.word	0x08004d59
 8004d20:	08004d59 	.word	0x08004d59
 8004d24:	08004d59 	.word	0x08004d59
 8004d28:	08004d59 	.word	0x08004d59
 8004d2c:	08004d59 	.word	0x08004d59
 8004d30:	08004d6d 	.word	0x08004d6d
=======
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 8085 	beq.w	8008150 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800804a:	2b28      	cmp	r3, #40	; 0x28
 800804c:	d866      	bhi.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800804e:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	08008131 	.word	0x08008131
 8008058:	0800811d 	.word	0x0800811d
 800805c:	0800811d 	.word	0x0800811d
 8008060:	0800811d 	.word	0x0800811d
 8008064:	0800811d 	.word	0x0800811d
 8008068:	0800811d 	.word	0x0800811d
 800806c:	0800811d 	.word	0x0800811d
 8008070:	0800811d 	.word	0x0800811d
 8008074:	080080f9 	.word	0x080080f9
 8008078:	0800811d 	.word	0x0800811d
 800807c:	0800811d 	.word	0x0800811d
 8008080:	0800811d 	.word	0x0800811d
 8008084:	0800811d 	.word	0x0800811d
 8008088:	0800811d 	.word	0x0800811d
 800808c:	0800811d 	.word	0x0800811d
 8008090:	0800811d 	.word	0x0800811d
 8008094:	0800810b 	.word	0x0800810b
 8008098:	0800811d 	.word	0x0800811d
 800809c:	0800811d 	.word	0x0800811d
 80080a0:	0800811d 	.word	0x0800811d
 80080a4:	0800811d 	.word	0x0800811d
 80080a8:	0800811d 	.word	0x0800811d
 80080ac:	0800811d 	.word	0x0800811d
 80080b0:	0800811d 	.word	0x0800811d
 80080b4:	08008131 	.word	0x08008131
 80080b8:	0800811d 	.word	0x0800811d
 80080bc:	0800811d 	.word	0x0800811d
 80080c0:	0800811d 	.word	0x0800811d
 80080c4:	0800811d 	.word	0x0800811d
 80080c8:	0800811d 	.word	0x0800811d
 80080cc:	0800811d 	.word	0x0800811d
 80080d0:	0800811d 	.word	0x0800811d
 80080d4:	08008131 	.word	0x08008131
 80080d8:	0800811d 	.word	0x0800811d
 80080dc:	0800811d 	.word	0x0800811d
 80080e0:	0800811d 	.word	0x0800811d
 80080e4:	0800811d 	.word	0x0800811d
 80080e8:	0800811d 	.word	0x0800811d
 80080ec:	0800811d 	.word	0x0800811d
 80080f0:	0800811d 	.word	0x0800811d
 80080f4:	08008131 	.word	0x08008131
>>>>>>> Stashed changes
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
<<<<<<< Updated upstream
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3304      	adds	r3, #4
 8004d38:	2101      	movs	r1, #1
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fdfa 	bl	8005934 <RCCEx_PLL2_Config>
 8004d40:	4603      	mov	r3, r0
 8004d42:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004d44:	e013      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3324      	adds	r3, #36	; 0x24
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fea3 	bl	8005a98 <RCCEx_PLL3_Config>
 8004d52:	4603      	mov	r3, r0
 8004d54:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004d56:	e00a      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x842>
=======
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3304      	adds	r3, #4
 80080fc:	2101      	movs	r1, #1
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 fdfa 	bl	8008cf8 <RCCEx_PLL2_Config>
 8008104:	4603      	mov	r3, r0
 8008106:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008108:	e013      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	3324      	adds	r3, #36	; 0x24
 800810e:	2101      	movs	r1, #1
 8008110:	4618      	mov	r0, r3
 8008112:	f000 fea3 	bl	8008e5c <RCCEx_PLL3_Config>
 8008116:	4603      	mov	r3, r0
 8008118:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800811a:	e00a      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x842>
>>>>>>> Stashed changes
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 8004d58:	2301      	movs	r3, #1
 8004d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d5c:	e007      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004d5e:	bf00      	nop
 8004d60:	58024400 	.word	0x58024400
 8004d64:	58024800 	.word	0x58024800
 8004d68:	00ffffcf 	.word	0x00ffffcf
      break;
 8004d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d109      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004d74:	4b96      	ldr	r3, [pc, #600]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d78:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d80:	4993      	ldr	r1, [pc, #588]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	654b      	str	r3, [r1, #84]	; 0x54
 8004d86:	e001      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x860>
=======
 800811c:	2301      	movs	r3, #1
 800811e:	75fb      	strb	r3, [r7, #23]
      break;
 8008120:	e007      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008122:	bf00      	nop
 8008124:	58024400 	.word	0x58024400
 8008128:	58024800 	.word	0x58024800
 800812c:	00ffffcf 	.word	0x00ffffcf
      break;
 8008130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008132:	7dfb      	ldrb	r3, [r7, #23]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d109      	bne.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008138:	4b96      	ldr	r3, [pc, #600]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800813a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800813c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008144:	4993      	ldr	r1, [pc, #588]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008146:	4313      	orrs	r3, r2
 8008148:	654b      	str	r3, [r1, #84]	; 0x54
 800814a:	e001      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x860>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
 8004d8a:	75bb      	strb	r3, [r7, #22]
=======
 800814c:	7dfb      	ldrb	r3, [r7, #23]
 800814e:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
<<<<<<< Updated upstream
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d038      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9c:	2b05      	cmp	r3, #5
 8004d9e:	d821      	bhi.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004da0:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da6:	bf00      	nop
 8004da8:	08004deb 	.word	0x08004deb
 8004dac:	08004dc1 	.word	0x08004dc1
 8004db0:	08004dd3 	.word	0x08004dd3
 8004db4:	08004deb 	.word	0x08004deb
 8004db8:	08004deb 	.word	0x08004deb
 8004dbc:	08004deb 	.word	0x08004deb
=======
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d038      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008160:	2b05      	cmp	r3, #5
 8008162:	d821      	bhi.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008164:	a201      	add	r2, pc, #4	; (adr r2, 800816c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816a:	bf00      	nop
 800816c:	080081af 	.word	0x080081af
 8008170:	08008185 	.word	0x08008185
 8008174:	08008197 	.word	0x08008197
 8008178:	080081af 	.word	0x080081af
 800817c:	080081af 	.word	0x080081af
 8008180:	080081af 	.word	0x080081af
>>>>>>> Stashed changes
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
<<<<<<< Updated upstream
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fdb4 	bl	8005934 <RCCEx_PLL2_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004dd0:	e00c      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3324      	adds	r3, #36	; 0x24
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 fe5d 	bl	8005a98 <RCCEx_PLL3_Config>
 8004dde:	4603      	mov	r3, r0
 8004de0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004de2:	e003      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
=======
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3304      	adds	r3, #4
 8008188:	2101      	movs	r1, #1
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fdb4 	bl	8008cf8 <RCCEx_PLL2_Config>
 8008190:	4603      	mov	r3, r0
 8008192:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008194:	e00c      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	3324      	adds	r3, #36	; 0x24
 800819a:	2101      	movs	r1, #1
 800819c:	4618      	mov	r0, r3
 800819e:	f000 fe5d 	bl	8008e5c <RCCEx_PLL3_Config>
 80081a2:	4603      	mov	r3, r0
 80081a4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80081a6:	e003      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
>>>>>>> Stashed changes
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 8004de4:	2301      	movs	r3, #1
 8004de6:	75fb      	strb	r3, [r7, #23]
      break;
 8004de8:	e000      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004dea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dec:	7dfb      	ldrb	r3, [r7, #23]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d109      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004df2:	4b77      	ldr	r3, [pc, #476]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df6:	f023 0207 	bic.w	r2, r3, #7
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfe:	4974      	ldr	r1, [pc, #464]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	654b      	str	r3, [r1, #84]	; 0x54
 8004e04:	e001      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x8de>
=======
 80081a8:	2301      	movs	r3, #1
 80081aa:	75fb      	strb	r3, [r7, #23]
      break;
 80081ac:	e000      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80081ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d109      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80081b6:	4b77      	ldr	r3, [pc, #476]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80081b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ba:	f023 0207 	bic.w	r2, r3, #7
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081c2:	4974      	ldr	r1, [pc, #464]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	654b      	str	r3, [r1, #84]	; 0x54
 80081c8:	e001      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x8de>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8004e06:	7dfb      	ldrb	r3, [r7, #23]
 8004e08:	75bb      	strb	r3, [r7, #22]
=======
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
 80081cc:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< Updated upstream
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d03a      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1c:	2b05      	cmp	r3, #5
 8004e1e:	d821      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004e20:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e26:	bf00      	nop
 8004e28:	08004e6b 	.word	0x08004e6b
 8004e2c:	08004e41 	.word	0x08004e41
 8004e30:	08004e53 	.word	0x08004e53
 8004e34:	08004e6b 	.word	0x08004e6b
 8004e38:	08004e6b 	.word	0x08004e6b
 8004e3c:	08004e6b 	.word	0x08004e6b
=======
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0304 	and.w	r3, r3, #4
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d03a      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e0:	2b05      	cmp	r3, #5
 80081e2:	d821      	bhi.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80081e4:	a201      	add	r2, pc, #4	; (adr r2, 80081ec <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80081e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ea:	bf00      	nop
 80081ec:	0800822f 	.word	0x0800822f
 80081f0:	08008205 	.word	0x08008205
 80081f4:	08008217 	.word	0x08008217
 80081f8:	0800822f 	.word	0x0800822f
 80081fc:	0800822f 	.word	0x0800822f
 8008200:	0800822f 	.word	0x0800822f
>>>>>>> Stashed changes
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
<<<<<<< Updated upstream
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	2101      	movs	r1, #1
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fd74 	bl	8005934 <RCCEx_PLL2_Config>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004e50:	e00c      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3324      	adds	r3, #36	; 0x24
 8004e56:	2101      	movs	r1, #1
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 fe1d 	bl	8005a98 <RCCEx_PLL3_Config>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004e62:	e003      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x940>
=======
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3304      	adds	r3, #4
 8008208:	2101      	movs	r1, #1
 800820a:	4618      	mov	r0, r3
 800820c:	f000 fd74 	bl	8008cf8 <RCCEx_PLL2_Config>
 8008210:	4603      	mov	r3, r0
 8008212:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008214:	e00c      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	3324      	adds	r3, #36	; 0x24
 800821a:	2101      	movs	r1, #1
 800821c:	4618      	mov	r0, r3
 800821e:	f000 fe1d 	bl	8008e5c <RCCEx_PLL3_Config>
 8008222:	4603      	mov	r3, r0
 8008224:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008226:	e003      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x940>
>>>>>>> Stashed changes
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 8004e64:	2301      	movs	r3, #1
 8004e66:	75fb      	strb	r3, [r7, #23]
      break;
 8004e68:	e000      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e6c:	7dfb      	ldrb	r3, [r7, #23]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e72:	4b57      	ldr	r3, [pc, #348]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	f023 0207 	bic.w	r2, r3, #7
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e80:	4953      	ldr	r1, [pc, #332]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	658b      	str	r3, [r1, #88]	; 0x58
 8004e86:	e001      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x960>
=======
 8008228:	2301      	movs	r3, #1
 800822a:	75fb      	strb	r3, [r7, #23]
      break;
 800822c:	e000      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800822e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10a      	bne.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008236:	4b57      	ldr	r3, [pc, #348]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800823a:	f023 0207 	bic.w	r2, r3, #7
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008244:	4953      	ldr	r1, [pc, #332]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008246:	4313      	orrs	r3, r2
 8008248:	658b      	str	r3, [r1, #88]	; 0x58
 800824a:	e001      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x960>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
 8004e8a:	75bb      	strb	r3, [r7, #22]
=======
 800824c:	7dfb      	ldrb	r3, [r7, #23]
 800824e:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
<<<<<<< Updated upstream
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d04b      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ea2:	d02e      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ea8:	d828      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eae:	d02a      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb4:	d822      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004eb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004eba:	d026      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004ebc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ec0:	d81c      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec6:	d010      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ecc:	d816      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d01d      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ed6:	d111      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
=======
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0320 	and.w	r3, r3, #32
 8008258:	2b00      	cmp	r3, #0
 800825a:	d04b      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008266:	d02e      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800826c:	d828      	bhi.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800826e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008272:	d02a      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008278:	d822      	bhi.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800827a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800827e:	d026      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008280:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008284:	d81c      	bhi.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800828a:	d010      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800828c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008290:	d816      	bhi.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008292:	2b00      	cmp	r3, #0
 8008294:	d01d      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8008296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800829a:	d111      	bne.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
>>>>>>> Stashed changes
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
<<<<<<< Updated upstream
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	2100      	movs	r1, #0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fd28 	bl	8005934 <RCCEx_PLL2_Config>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ee8:	e012      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3324      	adds	r3, #36	; 0x24
 8004eee:	2102      	movs	r1, #2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fdd1 	bl	8005a98 <RCCEx_PLL3_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004efa:	e009      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
=======
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3304      	adds	r3, #4
 80082a0:	2100      	movs	r1, #0
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 fd28 	bl	8008cf8 <RCCEx_PLL2_Config>
 80082a8:	4603      	mov	r3, r0
 80082aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80082ac:	e012      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3324      	adds	r3, #36	; 0x24
 80082b2:	2102      	movs	r1, #2
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 fdd1 	bl	8008e5c <RCCEx_PLL3_Config>
 80082ba:	4603      	mov	r3, r0
 80082bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80082be:	e009      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
>>>>>>> Stashed changes
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 8004efc:	2301      	movs	r3, #1
 8004efe:	75fb      	strb	r3, [r7, #23]
      break;
 8004f00:	e006      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f02:	bf00      	nop
 8004f04:	e004      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f06:	bf00      	nop
 8004f08:	e002      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e000      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10a      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f16:	4b2e      	ldr	r3, [pc, #184]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f24:	492a      	ldr	r1, [pc, #168]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	654b      	str	r3, [r1, #84]	; 0x54
 8004f2a:	e001      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xa04>
=======
 80082c0:	2301      	movs	r3, #1
 80082c2:	75fb      	strb	r3, [r7, #23]
      break;
 80082c4:	e006      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80082c6:	bf00      	nop
 80082c8:	e004      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80082ca:	bf00      	nop
 80082cc:	e002      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80082ce:	bf00      	nop
 80082d0:	e000      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80082d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10a      	bne.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082da:	4b2e      	ldr	r3, [pc, #184]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80082dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082e8:	492a      	ldr	r1, [pc, #168]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	654b      	str	r3, [r1, #84]	; 0x54
 80082ee:	e001      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
 8004f2e:	75bb      	strb	r3, [r7, #22]
=======
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
 80082f2:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
<<<<<<< Updated upstream
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d04d      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f42:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f46:	d02e      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004f48:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f4c:	d828      	bhi.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f52:	d02a      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f58:	d822      	bhi.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004f5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f5e:	d026      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004f60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f64:	d81c      	bhi.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f6a:	d010      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f70:	d816      	bhi.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d01d      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f7a:	d111      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
=======
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d04d      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008306:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800830a:	d02e      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800830c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008310:	d828      	bhi.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008316:	d02a      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800831c:	d822      	bhi.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800831e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008322:	d026      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008328:	d81c      	bhi.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800832a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800832e:	d010      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008334:	d816      	bhi.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008336:	2b00      	cmp	r3, #0
 8008338:	d01d      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800833a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800833e:	d111      	bne.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xa74>
>>>>>>> Stashed changes
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
<<<<<<< Updated upstream
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	2100      	movs	r1, #0
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fcd6 	bl	8005934 <RCCEx_PLL2_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004f8c:	e012      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3324      	adds	r3, #36	; 0x24
 8004f92:	2102      	movs	r1, #2
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fd7f 	bl	8005a98 <RCCEx_PLL3_Config>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004f9e:	e009      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
=======
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	3304      	adds	r3, #4
 8008344:	2100      	movs	r1, #0
 8008346:	4618      	mov	r0, r3
 8008348:	f000 fcd6 	bl	8008cf8 <RCCEx_PLL2_Config>
 800834c:	4603      	mov	r3, r0
 800834e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008350:	e012      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	3324      	adds	r3, #36	; 0x24
 8008356:	2102      	movs	r1, #2
 8008358:	4618      	mov	r0, r3
 800835a:	f000 fd7f 	bl	8008e5c <RCCEx_PLL3_Config>
 800835e:	4603      	mov	r3, r0
 8008360:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008362:	e009      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xa88>
>>>>>>> Stashed changes
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa4:	e006      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004fa6:	bf00      	nop
 8004fa8:	e004      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004faa:	bf00      	nop
 8004fac:	e002      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004fae:	bf00      	nop
 8004fb0:	e000      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fba:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fc8:	4901      	ldr	r1, [pc, #4]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	658b      	str	r3, [r1, #88]	; 0x58
 8004fce:	e003      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004fd0:	58024400 	.word	0x58024400
=======
 8008364:	2301      	movs	r3, #1
 8008366:	75fb      	strb	r3, [r7, #23]
      break;
 8008368:	e006      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800836a:	bf00      	nop
 800836c:	e004      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800836e:	bf00      	nop
 8008370:	e002      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008372:	bf00      	nop
 8008374:	e000      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10c      	bne.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800837e:	4b05      	ldr	r3, [pc, #20]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008382:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800838c:	4901      	ldr	r1, [pc, #4]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800838e:	4313      	orrs	r3, r2
 8008390:	658b      	str	r3, [r1, #88]	; 0x58
 8008392:	e003      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008394:	58024400 	.word	0x58024400
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
 8004fd6:	75bb      	strb	r3, [r7, #22]
=======
 8008398:	7dfb      	ldrb	r3, [r7, #23]
 800839a:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
<<<<<<< Updated upstream
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d04b      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004fee:	d02e      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004ff0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ff4:	d828      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ffa:	d02a      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005000:	d822      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005002:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005006:	d026      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005008:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800500c:	d81c      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800500e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005012:	d010      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005018:	d816      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d01d      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800501e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005022:	d111      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
=======
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d04b      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80083b2:	d02e      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80083b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80083b8:	d828      	bhi.n	800840c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80083ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083be:	d02a      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80083c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083c4:	d822      	bhi.n	800840c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80083c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80083ca:	d026      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80083cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80083d0:	d81c      	bhi.n	800840c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80083d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083d6:	d010      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80083d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083dc:	d816      	bhi.n	800840c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d01d      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80083e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083e6:	d111      	bne.n	800840c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
>>>>>>> Stashed changes
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
<<<<<<< Updated upstream
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3304      	adds	r3, #4
 8005028:	2100      	movs	r1, #0
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fc82 	bl	8005934 <RCCEx_PLL2_Config>
 8005030:	4603      	mov	r3, r0
 8005032:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005034:	e012      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3324      	adds	r3, #36	; 0x24
 800503a:	2102      	movs	r1, #2
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fd2b 	bl	8005a98 <RCCEx_PLL3_Config>
 8005042:	4603      	mov	r3, r0
 8005044:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005046:	e009      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xb30>
=======
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3304      	adds	r3, #4
 80083ec:	2100      	movs	r1, #0
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 fc82 	bl	8008cf8 <RCCEx_PLL2_Config>
 80083f4:	4603      	mov	r3, r0
 80083f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80083f8:	e012      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	3324      	adds	r3, #36	; 0x24
 80083fe:	2102      	movs	r1, #2
 8008400:	4618      	mov	r0, r3
 8008402:	f000 fd2b 	bl	8008e5c <RCCEx_PLL3_Config>
 8008406:	4603      	mov	r3, r0
 8008408:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800840a:	e009      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xb30>
>>>>>>> Stashed changes
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 8005048:	2301      	movs	r3, #1
 800504a:	75fb      	strb	r3, [r7, #23]
      break;
 800504c:	e006      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800504e:	bf00      	nop
 8005050:	e004      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005052:	bf00      	nop
 8005054:	e002      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005056:	bf00      	nop
 8005058:	e000      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800505a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800505c:	7dfb      	ldrb	r3, [r7, #23]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005062:	4b9d      	ldr	r3, [pc, #628]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005066:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005070:	4999      	ldr	r1, [pc, #612]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005072:	4313      	orrs	r3, r2
 8005074:	658b      	str	r3, [r1, #88]	; 0x58
 8005076:	e001      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xb50>
=======
 800840c:	2301      	movs	r3, #1
 800840e:	75fb      	strb	r3, [r7, #23]
      break;
 8008410:	e006      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008412:	bf00      	nop
 8008414:	e004      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008416:	bf00      	nop
 8008418:	e002      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800841a:	bf00      	nop
 800841c:	e000      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800841e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008420:	7dfb      	ldrb	r3, [r7, #23]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10a      	bne.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008426:	4b9d      	ldr	r3, [pc, #628]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800842a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008434:	4999      	ldr	r1, [pc, #612]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008436:	4313      	orrs	r3, r2
 8008438:	658b      	str	r3, [r1, #88]	; 0x58
 800843a:	e001      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xb50>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8005078:	7dfb      	ldrb	r3, [r7, #23]
 800507a:	75bb      	strb	r3, [r7, #22]
=======
 800843c:	7dfb      	ldrb	r3, [r7, #23]
 800843e:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
<<<<<<< Updated upstream
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01a      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xb92>
=======
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0308 	and.w	r3, r3, #8
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01a      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0xb92>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
<<<<<<< Updated upstream
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800508e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005092:	d10a      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3324      	adds	r3, #36	; 0x24
 8005098:	2102      	movs	r1, #2
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fcfc 	bl	8005a98 <RCCEx_PLL3_Config>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	75bb      	strb	r3, [r7, #22]
=======
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008456:	d10a      	bne.n	800846e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	3324      	adds	r3, #36	; 0x24
 800845c:	2102      	movs	r1, #2
 800845e:	4618      	mov	r0, r3
 8008460:	f000 fcfc 	bl	8008e5c <RCCEx_PLL3_Config>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
<<<<<<< Updated upstream
 80050aa:	4b8b      	ldr	r3, [pc, #556]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050b8:	4987      	ldr	r1, [pc, #540]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	654b      	str	r3, [r1, #84]	; 0x54
=======
 800846e:	4b8b      	ldr	r3, [pc, #556]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008472:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800847c:	4987      	ldr	r1, [pc, #540]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800847e:	4313      	orrs	r3, r2
 8008480:	654b      	str	r3, [r1, #84]	; 0x54
>>>>>>> Stashed changes

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
<<<<<<< Updated upstream
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d01a      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
=======
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0310 	and.w	r3, r3, #16
 800848a:	2b00      	cmp	r3, #0
 800848c:	d01a      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
<<<<<<< Updated upstream
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d4:	d10a      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3324      	adds	r3, #36	; 0x24
 80050da:	2102      	movs	r1, #2
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 fcdb 	bl	8005a98 <RCCEx_PLL3_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	75bb      	strb	r3, [r7, #22]
=======
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008498:	d10a      	bne.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3324      	adds	r3, #36	; 0x24
 800849e:	2102      	movs	r1, #2
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 fcdb 	bl	8008e5c <RCCEx_PLL3_Config>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
<<<<<<< Updated upstream
 80050ec:	4b7a      	ldr	r3, [pc, #488]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050fa:	4977      	ldr	r1, [pc, #476]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	658b      	str	r3, [r1, #88]	; 0x58
=======
 80084b0:	4b7a      	ldr	r3, [pc, #488]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084be:	4977      	ldr	r1, [pc, #476]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	658b      	str	r3, [r1, #88]	; 0x58
>>>>>>> Stashed changes

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< Updated upstream
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d034      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005112:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005116:	d01d      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800511c:	d817      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005126:	d009      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005128:	e011      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc22>
=======
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d034      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80084d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084da:	d01d      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80084dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084e0:	d817      	bhi.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80084e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084ea:	d009      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80084ec:	e011      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xc22>
>>>>>>> Stashed changes
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
<<<<<<< Updated upstream
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3304      	adds	r3, #4
 800512e:	2100      	movs	r1, #0
 8005130:	4618      	mov	r0, r3
 8005132:	f000 fbff 	bl	8005934 <RCCEx_PLL2_Config>
 8005136:	4603      	mov	r3, r0
 8005138:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800513a:	e00c      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3324      	adds	r3, #36	; 0x24
 8005140:	2102      	movs	r1, #2
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fca8 	bl	8005a98 <RCCEx_PLL3_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800514c:	e003      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
=======
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	3304      	adds	r3, #4
 80084f2:	2100      	movs	r1, #0
 80084f4:	4618      	mov	r0, r3
 80084f6:	f000 fbff 	bl	8008cf8 <RCCEx_PLL2_Config>
 80084fa:	4603      	mov	r3, r0
 80084fc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80084fe:	e00c      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3324      	adds	r3, #36	; 0x24
 8008504:	2102      	movs	r1, #2
 8008506:	4618      	mov	r0, r3
 8008508:	f000 fca8 	bl	8008e5c <RCCEx_PLL3_Config>
 800850c:	4603      	mov	r3, r0
 800850e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008510:	e003      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
>>>>>>> Stashed changes
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 800514e:	2301      	movs	r3, #1
 8005150:	75fb      	strb	r3, [r7, #23]
      break;
 8005152:	e000      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005156:	7dfb      	ldrb	r3, [r7, #23]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800515c:	4b5e      	ldr	r3, [pc, #376]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800515e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005160:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800516a:	495b      	ldr	r1, [pc, #364]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800516c:	4313      	orrs	r3, r2
 800516e:	658b      	str	r3, [r1, #88]	; 0x58
 8005170:	e001      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
=======
 8008512:	2301      	movs	r3, #1
 8008514:	75fb      	strb	r3, [r7, #23]
      break;
 8008516:	e000      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800851a:	7dfb      	ldrb	r3, [r7, #23]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10a      	bne.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008520:	4b5e      	ldr	r3, [pc, #376]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008524:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800852e:	495b      	ldr	r1, [pc, #364]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008530:	4313      	orrs	r3, r2
 8008532:	658b      	str	r3, [r1, #88]	; 0x58
 8008534:	e001      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8005172:	7dfb      	ldrb	r3, [r7, #23]
 8005174:	75bb      	strb	r3, [r7, #22]
=======
 8008536:	7dfb      	ldrb	r3, [r7, #23]
 8008538:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
<<<<<<< Updated upstream
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d033      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005188:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800518c:	d01c      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800518e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005192:	d816      	bhi.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005198:	d003      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800519a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800519e:	d007      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80051a0:	e00f      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
=======
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d033      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800854c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008550:	d01c      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8008552:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008556:	d816      	bhi.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8008558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800855c:	d003      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800855e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008562:	d007      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8008564:	e00f      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xc96>
>>>>>>> Stashed changes
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< Updated upstream
 80051a2:	4b4d      	ldr	r3, [pc, #308]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	4a4c      	ldr	r2, [pc, #304]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80051ae:	e00c      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
=======
 8008566:	4b4d      	ldr	r3, [pc, #308]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856a:	4a4c      	ldr	r2, [pc, #304]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800856c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008570:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008572:	e00c      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
>>>>>>> Stashed changes

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
<<<<<<< Updated upstream
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3324      	adds	r3, #36	; 0x24
 80051b4:	2101      	movs	r1, #1
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fc6e 	bl	8005a98 <RCCEx_PLL3_Config>
 80051bc:	4603      	mov	r3, r0
 80051be:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80051c0:	e003      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
=======
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	3324      	adds	r3, #36	; 0x24
 8008578:	2101      	movs	r1, #1
 800857a:	4618      	mov	r0, r3
 800857c:	f000 fc6e 	bl	8008e5c <RCCEx_PLL3_Config>
 8008580:	4603      	mov	r3, r0
 8008582:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008584:	e003      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
>>>>>>> Stashed changes
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 80051c2:	2301      	movs	r3, #1
 80051c4:	75fb      	strb	r3, [r7, #23]
      break;
 80051c6:	e000      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80051c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051ca:	7dfb      	ldrb	r3, [r7, #23]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051d0:	4b41      	ldr	r3, [pc, #260]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051de:	493e      	ldr	r1, [pc, #248]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	654b      	str	r3, [r1, #84]	; 0x54
 80051e4:	e001      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
=======
 8008586:	2301      	movs	r3, #1
 8008588:	75fb      	strb	r3, [r7, #23]
      break;
 800858a:	e000      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800858c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800858e:	7dfb      	ldrb	r3, [r7, #23]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008594:	4b41      	ldr	r3, [pc, #260]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008598:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085a2:	493e      	ldr	r1, [pc, #248]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	654b      	str	r3, [r1, #84]	; 0x54
 80085a8:	e001      	b.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 80051e6:	7dfb      	ldrb	r3, [r7, #23]
 80051e8:	75bb      	strb	r3, [r7, #22]
=======
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
 80085ac:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
<<<<<<< Updated upstream
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d029      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
=======
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d029      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
<<<<<<< Updated upstream
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80051fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005202:	d007      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005204:	e00f      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
=======
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d003      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80085c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085c6:	d007      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80085c8:	e00f      	b.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0xcfa>
>>>>>>> Stashed changes
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< Updated upstream
 8005206:	4b34      	ldr	r3, [pc, #208]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520a:	4a33      	ldr	r2, [pc, #204]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800520c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005210:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005212:	e00b      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xd00>
=======
 80085ca:	4b34      	ldr	r3, [pc, #208]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ce:	4a33      	ldr	r2, [pc, #204]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80085d6:	e00b      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
>>>>>>> Stashed changes

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
<<<<<<< Updated upstream
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	2102      	movs	r1, #2
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fb8a 	bl	8005934 <RCCEx_PLL2_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005224:	e002      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	75fb      	strb	r3, [r7, #23]
      break;
 800522a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800522c:	7dfb      	ldrb	r3, [r7, #23]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d109      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005232:	4b29      	ldr	r3, [pc, #164]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005236:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523e:	4926      	ldr	r1, [pc, #152]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005240:	4313      	orrs	r3, r2
 8005242:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005244:	e001      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
=======
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	3304      	adds	r3, #4
 80085dc:	2102      	movs	r1, #2
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 fb8a 	bl	8008cf8 <RCCEx_PLL2_Config>
 80085e4:	4603      	mov	r3, r0
 80085e6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80085e8:	e002      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	75fb      	strb	r3, [r7, #23]
      break;
 80085ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085f0:	7dfb      	ldrb	r3, [r7, #23]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d109      	bne.n	800860a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80085f6:	4b29      	ldr	r3, [pc, #164]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008602:	4926      	ldr	r1, [pc, #152]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008604:	4313      	orrs	r3, r2
 8008606:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008608:	e001      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8005246:	7dfb      	ldrb	r3, [r7, #23]
 8005248:	75bb      	strb	r3, [r7, #22]
=======
 800860a:	7dfb      	ldrb	r3, [r7, #23]
 800860c:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
<<<<<<< Updated upstream
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3324      	adds	r3, #36	; 0x24
 800525a:	2102      	movs	r1, #2
 800525c:	4618      	mov	r0, r3
 800525e:	f000 fc1b 	bl	8005a98 <RCCEx_PLL3_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	75bb      	strb	r3, [r7, #22]
=======
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00a      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	3324      	adds	r3, #36	; 0x24
 800861e:	2102      	movs	r1, #2
 8008620:	4618      	mov	r0, r3
 8008622:	f000 fc1b 	bl	8008e5c <RCCEx_PLL3_Config>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
<<<<<<< Updated upstream
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d033      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800527c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005280:	d017      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005282:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005286:	d811      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800528c:	d013      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800528e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005292:	d80b      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005294:	2b00      	cmp	r3, #0
 8005296:	d010      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800529c:	d106      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
=======
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d033      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008644:	d017      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800864a:	d811      	bhi.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800864c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008650:	d013      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008656:	d80b      	bhi.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008658:	2b00      	cmp	r3, #0
 800865a:	d010      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800865c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008660:	d106      	bne.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xd80>
>>>>>>> Stashed changes
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< Updated upstream
 800529e:	4b0e      	ldr	r3, [pc, #56]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	4a0d      	ldr	r2, [pc, #52]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80052aa:	e007      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
=======
 8008662:	4b0e      	ldr	r3, [pc, #56]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008666:	4a0d      	ldr	r2, [pc, #52]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800866c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800866e:	e007      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xd90>
>>>>>>> Stashed changes
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 80052ac:	2301      	movs	r3, #1
 80052ae:	75fb      	strb	r3, [r7, #23]
      break;
 80052b0:	e004      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80052b2:	bf00      	nop
 80052b4:	e002      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80052b6:	bf00      	nop
 80052b8:	e000      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80052ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10c      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052c2:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ce:	4902      	ldr	r1, [pc, #8]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	654b      	str	r3, [r1, #84]	; 0x54
 80052d4:	e004      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80052d6:	bf00      	nop
 80052d8:	58024400 	.word	0x58024400
=======
 8008670:	2301      	movs	r3, #1
 8008672:	75fb      	strb	r3, [r7, #23]
      break;
 8008674:	e004      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008676:	bf00      	nop
 8008678:	e002      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800867a:	bf00      	nop
 800867c:	e000      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800867e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008680:	7dfb      	ldrb	r3, [r7, #23]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10c      	bne.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008686:	4b05      	ldr	r3, [pc, #20]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008692:	4902      	ldr	r1, [pc, #8]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008694:	4313      	orrs	r3, r2
 8008696:	654b      	str	r3, [r1, #84]	; 0x54
 8008698:	e004      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800869a:	bf00      	nop
 800869c:	58024400 	.word	0x58024400
>>>>>>> Stashed changes
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 80052dc:	7dfb      	ldrb	r3, [r7, #23]
 80052de:	75bb      	strb	r3, [r7, #22]
=======
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
 80086a2:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
<<<<<<< Updated upstream
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d008      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
=======
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d008      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
<<<<<<< Updated upstream
 80052ec:	4b31      	ldr	r3, [pc, #196]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f8:	492e      	ldr	r1, [pc, #184]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	650b      	str	r3, [r1, #80]	; 0x50
=======
 80086b0:	4b31      	ldr	r3, [pc, #196]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086bc:	492e      	ldr	r1, [pc, #184]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	650b      	str	r3, [r1, #80]	; 0x50
>>>>>>> Stashed changes
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
<<<<<<< Updated upstream
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
=======
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d009      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
<<<<<<< Updated upstream
 800530a:	4b2a      	ldr	r3, [pc, #168]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005318:	4926      	ldr	r1, [pc, #152]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800531a:	4313      	orrs	r3, r2
 800531c:	610b      	str	r3, [r1, #16]
=======
 80086ce:	4b2a      	ldr	r3, [pc, #168]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086dc:	4926      	ldr	r1, [pc, #152]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	610b      	str	r3, [r1, #16]
>>>>>>> Stashed changes
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
<<<<<<< Updated upstream
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d008      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xe10>
=======
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d008      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xe10>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
<<<<<<< Updated upstream
 800532a:	4b22      	ldr	r3, [pc, #136]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800532c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005336:	491f      	ldr	r1, [pc, #124]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005338:	4313      	orrs	r3, r2
 800533a:	650b      	str	r3, [r1, #80]	; 0x50
=======
 80086ee:	4b22      	ldr	r3, [pc, #136]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086fa:	491f      	ldr	r1, [pc, #124]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	650b      	str	r3, [r1, #80]	; 0x50
>>>>>>> Stashed changes
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
<<<<<<< Updated upstream
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00d      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xe38>
=======
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00d      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xe38>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
<<<<<<< Updated upstream
 8005348:	4b1a      	ldr	r3, [pc, #104]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	4a19      	ldr	r2, [pc, #100]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800534e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005352:	6113      	str	r3, [r2, #16]
 8005354:	4b17      	ldr	r3, [pc, #92]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800535e:	4915      	ldr	r1, [pc, #84]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005360:	4313      	orrs	r3, r2
 8005362:	610b      	str	r3, [r1, #16]
=======
 800870c:	4b1a      	ldr	r3, [pc, #104]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	4a19      	ldr	r2, [pc, #100]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008712:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008716:	6113      	str	r3, [r2, #16]
 8008718:	4b17      	ldr	r3, [pc, #92]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800871a:	691a      	ldr	r2, [r3, #16]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008722:	4915      	ldr	r1, [pc, #84]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008724:	4313      	orrs	r3, r2
 8008726:	610b      	str	r3, [r1, #16]
>>>>>>> Stashed changes
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
<<<<<<< Updated upstream
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	da08      	bge.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xe52>
=======
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	da08      	bge.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xe52>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
<<<<<<< Updated upstream
 800536c:	4b11      	ldr	r3, [pc, #68]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800536e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005370:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005378:	490e      	ldr	r1, [pc, #56]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800537a:	4313      	orrs	r3, r2
 800537c:	64cb      	str	r3, [r1, #76]	; 0x4c
=======
 8008730:	4b11      	ldr	r3, [pc, #68]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008734:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800873c:	490e      	ldr	r1, [pc, #56]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800873e:	4313      	orrs	r3, r2
 8008740:	64cb      	str	r3, [r1, #76]	; 0x4c
>>>>>>> Stashed changes
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
<<<<<<< Updated upstream
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xe72>
=======
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d009      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xe72>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
<<<<<<< Updated upstream
 800538a:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	4906      	ldr	r1, [pc, #24]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800539a:	4313      	orrs	r3, r2
 800539c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800539e:	7dbb      	ldrb	r3, [r7, #22]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e000      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	58024400 	.word	0x58024400

080053b8 <HAL_RCCEx_GetD3PCLK1Freq>:
=======
 800874e:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008752:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800875c:	4906      	ldr	r1, [pc, #24]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800875e:	4313      	orrs	r3, r2
 8008760:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008762:	7dbb      	ldrb	r3, [r7, #22]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	e000      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
}
 800876e:	4618      	mov	r0, r3
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	58024400 	.word	0x58024400

0800877c <HAL_RCCEx_GetD3PCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
<<<<<<< Updated upstream
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80053bc:	f7ff f85a 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 80053c0:	4602      	mov	r2, r0
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	091b      	lsrs	r3, r3, #4
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	4904      	ldr	r1, [pc, #16]	; (80053e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80053ce:	5ccb      	ldrb	r3, [r1, r3]
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
=======
 800877c:	b580      	push	{r7, lr}
 800877e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008780:	f7ff f85a 	bl	8007838 <HAL_RCC_GetHCLKFreq>
 8008784:	4602      	mov	r2, r0
 8008786:	4b06      	ldr	r3, [pc, #24]	; (80087a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	091b      	lsrs	r3, r3, #4
 800878c:	f003 0307 	and.w	r3, r3, #7
 8008790:	4904      	ldr	r1, [pc, #16]	; (80087a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008792:	5ccb      	ldrb	r3, [r1, r3]
 8008794:	f003 031f 	and.w	r3, r3, #31
 8008798:	fa22 f303 	lsr.w	r3, r2, r3
>>>>>>> Stashed changes
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
<<<<<<< Updated upstream
 80053d8:	4618      	mov	r0, r3
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	58024400 	.word	0x58024400
 80053e0:	0800fd14 	.word	0x0800fd14

080053e4 <HAL_RCCEx_GetPLL2ClockFreq>:
=======
 800879c:	4618      	mov	r0, r3
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	58024400 	.word	0x58024400
 80087a4:	08013c88 	.word	0x08013c88

080087a8 <HAL_RCCEx_GetPLL2ClockFreq>:
>>>>>>> Stashed changes
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
<<<<<<< Updated upstream
 80053e4:	b480      	push	{r7}
 80053e6:	b089      	sub	sp, #36	; 0x24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
=======
 80087a8:	b480      	push	{r7}
 80087aa:	b089      	sub	sp, #36	; 0x24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
<<<<<<< Updated upstream
 80053ec:	4ba1      	ldr	r3, [pc, #644]	; (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80053f6:	4b9f      	ldr	r3, [pc, #636]	; (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	0b1b      	lsrs	r3, r3, #12
 80053fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005400:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005402:	4b9c      	ldr	r3, [pc, #624]	; (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	091b      	lsrs	r3, r3, #4
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800540e:	4b99      	ldr	r3, [pc, #612]	; (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005412:	08db      	lsrs	r3, r3, #3
 8005414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	fb02 f303 	mul.w	r3, r2, r3
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005426:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 8111 	beq.w	8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b02      	cmp	r3, #2
 8005436:	f000 8083 	beq.w	8005540 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2b02      	cmp	r3, #2
 800543e:	f200 80a1 	bhi.w	8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d056      	beq.n	80054fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800544e:	e099      	b.n	8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
=======
 80087b0:	4ba1      	ldr	r3, [pc, #644]	; (8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b4:	f003 0303 	and.w	r3, r3, #3
 80087b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80087ba:	4b9f      	ldr	r3, [pc, #636]	; (8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087be:	0b1b      	lsrs	r3, r3, #12
 80087c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80087c6:	4b9c      	ldr	r3, [pc, #624]	; (8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ca:	091b      	lsrs	r3, r3, #4
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80087d2:	4b99      	ldr	r3, [pc, #612]	; (8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d6:	08db      	lsrs	r3, r3, #3
 80087d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087dc:	693a      	ldr	r2, [r7, #16]
 80087de:	fb02 f303 	mul.w	r3, r2, r3
 80087e2:	ee07 3a90 	vmov	s15, r3
 80087e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 8111 	beq.w	8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	f000 8083 	beq.w	8008904 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	2b02      	cmp	r3, #2
 8008802:	f200 80a1 	bhi.w	8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d056      	beq.n	80088c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008812:	e099      	b.n	8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
>>>>>>> Stashed changes
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
<<<<<<< Updated upstream
 8005450:	4b88      	ldr	r3, [pc, #544]	; (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d02d      	beq.n	80054b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800545c:	4b85      	ldr	r3, [pc, #532]	; (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	08db      	lsrs	r3, r3, #3
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	4a84      	ldr	r2, [pc, #528]	; (8005678 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
 800546c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	ee07 3a90 	vmov	s15, r3
 8005474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005486:	4b7b      	ldr	r3, [pc, #492]	; (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005496:	ed97 6a03 	vldr	s12, [r7, #12]
 800549a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800567c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800549e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b2:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 8008814:	4b88      	ldr	r3, [pc, #544]	; (8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0320 	and.w	r3, r3, #32
 800881c:	2b00      	cmp	r3, #0
 800881e:	d02d      	beq.n	800887c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008820:	4b85      	ldr	r3, [pc, #532]	; (8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	08db      	lsrs	r3, r3, #3
 8008826:	f003 0303 	and.w	r3, r3, #3
 800882a:	4a84      	ldr	r2, [pc, #528]	; (8008a3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800882c:	fa22 f303 	lsr.w	r3, r2, r3
 8008830:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	ee07 3a90 	vmov	s15, r3
 8008838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800884a:	4b7b      	ldr	r3, [pc, #492]	; (8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800884c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008852:	ee07 3a90 	vmov	s15, r3
 8008856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800885a:	ed97 6a03 	vldr	s12, [r7, #12]
 800885e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800886a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800886e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008876:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> Stashed changes
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
<<<<<<< Updated upstream
 80054b6:	e087      	b.n	80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80054c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ca:	4b6a      	ldr	r3, [pc, #424]	; (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054da:	ed97 6a03 	vldr	s12, [r7, #12]
 80054de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800567c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054fa:	e065      	b.n	80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	ee07 3a90 	vmov	s15, r3
 8005502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005506:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800550a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800550e:	4b59      	ldr	r3, [pc, #356]	; (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005516:	ee07 3a90 	vmov	s15, r3
 800551a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005522:	eddf 5a56 	vldr	s11, [pc, #344]	; 800567c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800552a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800552e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800553e:	e043      	b.n	80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800554e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005552:	4b48      	ldr	r3, [pc, #288]	; (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555a:	ee07 3a90 	vmov	s15, r3
 800555e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005562:	ed97 6a03 	vldr	s12, [r7, #12]
 8005566:	eddf 5a45 	vldr	s11, [pc, #276]	; 800567c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800556a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800556e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800557a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005582:	e021      	b.n	80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005596:	4b37      	ldr	r3, [pc, #220]	; (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800567c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80055c8:	4b2a      	ldr	r3, [pc, #168]	; (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	0a5b      	lsrs	r3, r3, #9
 80055ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80055e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ee:	ee17 2a90 	vmov	r2, s15
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80055f6:	4b1f      	ldr	r3, [pc, #124]	; (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	0c1b      	lsrs	r3, r3, #16
 80055fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005600:	ee07 3a90 	vmov	s15, r3
 8005604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800560c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005610:	edd7 6a07 	vldr	s13, [r7, #28]
 8005614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800561c:	ee17 2a90 	vmov	r2, s15
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005624:	4b13      	ldr	r3, [pc, #76]	; (8005674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	0e1b      	lsrs	r3, r3, #24
 800562a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005636:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800563a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800563e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800564a:	ee17 2a90 	vmov	r2, s15
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	609a      	str	r2, [r3, #8]
=======
 800887a:	e087      	b.n	800898c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008886:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800888a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800888e:	4b6a      	ldr	r3, [pc, #424]	; (8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008896:	ee07 3a90 	vmov	s15, r3
 800889a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800889e:	ed97 6a03 	vldr	s12, [r7, #12]
 80088a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088be:	e065      	b.n	800898c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	ee07 3a90 	vmov	s15, r3
 80088c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d2:	4b59      	ldr	r3, [pc, #356]	; (8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088da:	ee07 3a90 	vmov	s15, r3
 80088de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008902:	e043      	b.n	800898c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	ee07 3a90 	vmov	s15, r3
 800890a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008916:	4b48      	ldr	r3, [pc, #288]	; (8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008926:	ed97 6a03 	vldr	s12, [r7, #12]
 800892a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800892e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800893a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008942:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008946:	e021      	b.n	800898c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	ee07 3a90 	vmov	s15, r3
 800894e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008952:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800895a:	4b37      	ldr	r3, [pc, #220]	; (8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800895c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008962:	ee07 3a90 	vmov	s15, r3
 8008966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800896a:	ed97 6a03 	vldr	s12, [r7, #12]
 800896e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800897a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800897e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008986:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800898a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800898c:	4b2a      	ldr	r3, [pc, #168]	; (8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800898e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008990:	0a5b      	lsrs	r3, r3, #9
 8008992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008996:	ee07 3a90 	vmov	s15, r3
 800899a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80089aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089b2:	ee17 2a90 	vmov	r2, s15
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80089ba:	4b1f      	ldr	r3, [pc, #124]	; (8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089be:	0c1b      	lsrs	r3, r3, #16
 80089c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c4:	ee07 3a90 	vmov	s15, r3
 80089c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089e0:	ee17 2a90 	vmov	r2, s15
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80089e8:	4b13      	ldr	r3, [pc, #76]	; (8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ec:	0e1b      	lsrs	r3, r3, #24
 80089ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089f2:	ee07 3a90 	vmov	s15, r3
 80089f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a0e:	ee17 2a90 	vmov	r2, s15
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
<<<<<<< Updated upstream
 8005652:	e008      	b.n	8005666 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	609a      	str	r2, [r3, #8]
}
 8005666:	bf00      	nop
 8005668:	3724      	adds	r7, #36	; 0x24
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	58024400 	.word	0x58024400
 8005678:	03d09000 	.word	0x03d09000
 800567c:	46000000 	.word	0x46000000
 8005680:	4c742400 	.word	0x4c742400
 8005684:	4a742400 	.word	0x4a742400
 8005688:	4af42400 	.word	0x4af42400

0800568c <HAL_RCCEx_GetPLL3ClockFreq>:
=======
 8008a16:	e008      	b.n	8008a2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	609a      	str	r2, [r3, #8]
}
 8008a2a:	bf00      	nop
 8008a2c:	3724      	adds	r7, #36	; 0x24
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	58024400 	.word	0x58024400
 8008a3c:	03d09000 	.word	0x03d09000
 8008a40:	46000000 	.word	0x46000000
 8008a44:	4c742400 	.word	0x4c742400
 8008a48:	4a742400 	.word	0x4a742400
 8008a4c:	4af42400 	.word	0x4af42400

08008a50 <HAL_RCCEx_GetPLL3ClockFreq>:
>>>>>>> Stashed changes
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
<<<<<<< Updated upstream
 800568c:	b480      	push	{r7}
 800568e:	b089      	sub	sp, #36	; 0x24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
=======
 8008a50:	b480      	push	{r7}
 8008a52:	b089      	sub	sp, #36	; 0x24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
<<<<<<< Updated upstream
 8005694:	4ba1      	ldr	r3, [pc, #644]	; (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005698:	f003 0303 	and.w	r3, r3, #3
 800569c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800569e:	4b9f      	ldr	r3, [pc, #636]	; (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a2:	0d1b      	lsrs	r3, r3, #20
 80056a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80056aa:	4b9c      	ldr	r3, [pc, #624]	; (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ae:	0a1b      	lsrs	r3, r3, #8
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80056b6:	4b99      	ldr	r3, [pc, #612]	; (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ba:	08db      	lsrs	r3, r3, #3
 80056bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	fb02 f303 	mul.w	r3, r2, r3
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8111 	beq.w	80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	2b02      	cmp	r3, #2
 80056de:	f000 8083 	beq.w	80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	f200 80a1 	bhi.w	800582c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d056      	beq.n	80057a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80056f6:	e099      	b.n	800582c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
=======
 8008a58:	4ba1      	ldr	r3, [pc, #644]	; (8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5c:	f003 0303 	and.w	r3, r3, #3
 8008a60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008a62:	4b9f      	ldr	r3, [pc, #636]	; (8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a66:	0d1b      	lsrs	r3, r3, #20
 8008a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008a6e:	4b9c      	ldr	r3, [pc, #624]	; (8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a72:	0a1b      	lsrs	r3, r3, #8
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008a7a:	4b99      	ldr	r3, [pc, #612]	; (8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7e:	08db      	lsrs	r3, r3, #3
 8008a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	fb02 f303 	mul.w	r3, r2, r3
 8008a8a:	ee07 3a90 	vmov	s15, r3
 8008a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 8111 	beq.w	8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	f000 8083 	beq.w	8008bac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	f200 80a1 	bhi.w	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d003      	beq.n	8008abc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d056      	beq.n	8008b68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008aba:	e099      	b.n	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
>>>>>>> Stashed changes
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
<<<<<<< Updated upstream
 80056f8:	4b88      	ldr	r3, [pc, #544]	; (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0320 	and.w	r3, r3, #32
 8005700:	2b00      	cmp	r3, #0
 8005702:	d02d      	beq.n	8005760 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005704:	4b85      	ldr	r3, [pc, #532]	; (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	08db      	lsrs	r3, r3, #3
 800570a:	f003 0303 	and.w	r3, r3, #3
 800570e:	4a84      	ldr	r2, [pc, #528]	; (8005920 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005710:	fa22 f303 	lsr.w	r3, r2, r3
 8005714:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	ee07 3a90 	vmov	s15, r3
 800571c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800572e:	4b7b      	ldr	r3, [pc, #492]	; (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800573e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005742:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800574a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800574e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575a:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 8008abc:	4b88      	ldr	r3, [pc, #544]	; (8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0320 	and.w	r3, r3, #32
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d02d      	beq.n	8008b24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ac8:	4b85      	ldr	r3, [pc, #532]	; (8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	08db      	lsrs	r3, r3, #3
 8008ace:	f003 0303 	and.w	r3, r3, #3
 8008ad2:	4a84      	ldr	r2, [pc, #528]	; (8008ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	ee07 3a90 	vmov	s15, r3
 8008ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	ee07 3a90 	vmov	s15, r3
 8008aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008af2:	4b7b      	ldr	r3, [pc, #492]	; (8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afa:	ee07 3a90 	vmov	s15, r3
 8008afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b1e:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> Stashed changes
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
<<<<<<< Updated upstream
 800575e:	e087      	b.n	8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800576e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005772:	4b6a      	ldr	r3, [pc, #424]	; (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005782:	ed97 6a03 	vldr	s12, [r7, #12]
 8005786:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800578a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800578e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800579a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057a2:	e065      	b.n	8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800592c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80057b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057b6:	4b59      	ldr	r3, [pc, #356]	; (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80057ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057e6:	e043      	b.n	8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	ee07 3a90 	vmov	s15, r3
 80057ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80057f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057fa:	4b48      	ldr	r3, [pc, #288]	; (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800580a:	ed97 6a03 	vldr	s12, [r7, #12]
 800580e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800581a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800581e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005826:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800582a:	e021      	b.n	8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005836:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800592c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800583a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800583e:	4b37      	ldr	r3, [pc, #220]	; (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005852:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800585a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800585e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800586e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005870:	4b2a      	ldr	r3, [pc, #168]	; (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	0a5b      	lsrs	r3, r3, #9
 8005876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005886:	ee37 7a87 	vadd.f32	s14, s15, s14
 800588a:	edd7 6a07 	vldr	s13, [r7, #28]
 800588e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005896:	ee17 2a90 	vmov	r2, s15
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800589e:	4b1f      	ldr	r3, [pc, #124]	; (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	0c1b      	lsrs	r3, r3, #16
 80058a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058a8:	ee07 3a90 	vmov	s15, r3
 80058ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80058bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058c4:	ee17 2a90 	vmov	r2, s15
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80058cc:	4b13      	ldr	r3, [pc, #76]	; (800591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d0:	0e1b      	lsrs	r3, r3, #24
 80058d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058f2:	ee17 2a90 	vmov	r2, s15
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	609a      	str	r2, [r3, #8]
=======
 8008b22:	e087      	b.n	8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	ee07 3a90 	vmov	s15, r3
 8008b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008cec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b36:	4b6a      	ldr	r3, [pc, #424]	; (8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b3e:	ee07 3a90 	vmov	s15, r3
 8008b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b66:	e065      	b.n	8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	ee07 3a90 	vmov	s15, r3
 8008b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b7a:	4b59      	ldr	r3, [pc, #356]	; (8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b82:	ee07 3a90 	vmov	s15, r3
 8008b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008baa:	e043      	b.n	8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	ee07 3a90 	vmov	s15, r3
 8008bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bbe:	4b48      	ldr	r3, [pc, #288]	; (8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc6:	ee07 3a90 	vmov	s15, r3
 8008bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bee:	e021      	b.n	8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	ee07 3a90 	vmov	s15, r3
 8008bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c02:	4b37      	ldr	r3, [pc, #220]	; (8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c0a:	ee07 3a90 	vmov	s15, r3
 8008c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008c34:	4b2a      	ldr	r3, [pc, #168]	; (8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c38:	0a5b      	lsrs	r3, r3, #9
 8008c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c3e:	ee07 3a90 	vmov	s15, r3
 8008c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c5a:	ee17 2a90 	vmov	r2, s15
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008c62:	4b1f      	ldr	r3, [pc, #124]	; (8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	0c1b      	lsrs	r3, r3, #16
 8008c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c6c:	ee07 3a90 	vmov	s15, r3
 8008c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c88:	ee17 2a90 	vmov	r2, s15
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008c90:	4b13      	ldr	r3, [pc, #76]	; (8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c94:	0e1b      	lsrs	r3, r3, #24
 8008c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c9a:	ee07 3a90 	vmov	s15, r3
 8008c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cb6:	ee17 2a90 	vmov	r2, s15
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
<<<<<<< Updated upstream
 80058fa:	e008      	b.n	800590e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	609a      	str	r2, [r3, #8]
}
 800590e:	bf00      	nop
 8005910:	3724      	adds	r7, #36	; 0x24
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	58024400 	.word	0x58024400
 8005920:	03d09000 	.word	0x03d09000
 8005924:	46000000 	.word	0x46000000
 8005928:	4c742400 	.word	0x4c742400
 800592c:	4a742400 	.word	0x4a742400
 8005930:	4af42400 	.word	0x4af42400

08005934 <RCCEx_PLL2_Config>:
=======
 8008cbe:	e008      	b.n	8008cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	609a      	str	r2, [r3, #8]
}
 8008cd2:	bf00      	nop
 8008cd4:	3724      	adds	r7, #36	; 0x24
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	58024400 	.word	0x58024400
 8008ce4:	03d09000 	.word	0x03d09000
 8008ce8:	46000000 	.word	0x46000000
 8008cec:	4c742400 	.word	0x4c742400
 8008cf0:	4a742400 	.word	0x4a742400
 8008cf4:	4af42400 	.word	0x4af42400

08008cf8 <RCCEx_PLL2_Config>:
>>>>>>> Stashed changes
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
<<<<<<< Updated upstream
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	73fb      	strb	r3, [r7, #15]
=======
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
<<<<<<< Updated upstream
 8005942:	4b53      	ldr	r3, [pc, #332]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	2b03      	cmp	r3, #3
 800594c:	d101      	bne.n	8005952 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e099      	b.n	8005a86 <RCCEx_PLL2_Config+0x152>
=======
 8008d06:	4b53      	ldr	r3, [pc, #332]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d101      	bne.n	8008d16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e099      	b.n	8008e4a <RCCEx_PLL2_Config+0x152>
>>>>>>> Stashed changes


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
<<<<<<< Updated upstream
 8005952:	4b4f      	ldr	r3, [pc, #316]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a4e      	ldr	r2, [pc, #312]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005958:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800595c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800595e:	f7fd fab9 	bl	8002ed4 <HAL_GetTick>
 8005962:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005964:	e008      	b.n	8005978 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005966:	f7fd fab5 	bl	8002ed4 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e086      	b.n	8005a86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005978:	4b45      	ldr	r3, [pc, #276]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1f0      	bne.n	8005966 <RCCEx_PLL2_Config+0x32>
=======
 8008d16:	4b4f      	ldr	r3, [pc, #316]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a4e      	ldr	r2, [pc, #312]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008d1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d22:	f7fc fd41 	bl	80057a8 <HAL_GetTick>
 8008d26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d28:	e008      	b.n	8008d3c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008d2a:	f7fc fd3d 	bl	80057a8 <HAL_GetTick>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d901      	bls.n	8008d3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	e086      	b.n	8008e4a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d3c:	4b45      	ldr	r3, [pc, #276]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1f0      	bne.n	8008d2a <RCCEx_PLL2_Config+0x32>
>>>>>>> Stashed changes
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
<<<<<<< Updated upstream
 8005984:	4b42      	ldr	r3, [pc, #264]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005988:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	031b      	lsls	r3, r3, #12
 8005992:	493f      	ldr	r1, [pc, #252]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005994:	4313      	orrs	r3, r2
 8005996:	628b      	str	r3, [r1, #40]	; 0x28
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	3b01      	subs	r3, #1
 800599e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	025b      	lsls	r3, r3, #9
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	041b      	lsls	r3, r3, #16
 80059b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	061b      	lsls	r3, r3, #24
 80059c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059c8:	4931      	ldr	r1, [pc, #196]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	638b      	str	r3, [r1, #56]	; 0x38
=======
 8008d48:	4b42      	ldr	r3, [pc, #264]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	031b      	lsls	r3, r3, #12
 8008d56:	493f      	ldr	r1, [pc, #252]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	628b      	str	r3, [r1, #40]	; 0x28
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	3b01      	subs	r3, #1
 8008d62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	025b      	lsls	r3, r3, #9
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	431a      	orrs	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	041b      	lsls	r3, r3, #16
 8008d7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d7e:	431a      	orrs	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	3b01      	subs	r3, #1
 8008d86:	061b      	lsls	r3, r3, #24
 8008d88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d8c:	4931      	ldr	r1, [pc, #196]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	638b      	str	r3, [r1, #56]	; 0x38
>>>>>>> Stashed changes
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
<<<<<<< Updated upstream
 80059ce:	4b30      	ldr	r3, [pc, #192]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	492d      	ldr	r1, [pc, #180]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80059e0:	4b2b      	ldr	r3, [pc, #172]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	f023 0220 	bic.w	r2, r3, #32
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	4928      	ldr	r1, [pc, #160]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80059f2:	4b27      	ldr	r3, [pc, #156]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	4a26      	ldr	r2, [pc, #152]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 80059f8:	f023 0310 	bic.w	r3, r3, #16
 80059fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80059fe:	4b24      	ldr	r3, [pc, #144]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a02:	4b24      	ldr	r3, [pc, #144]	; (8005a94 <RCCEx_PLL2_Config+0x160>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	69d2      	ldr	r2, [r2, #28]
 8005a0a:	00d2      	lsls	r2, r2, #3
 8005a0c:	4920      	ldr	r1, [pc, #128]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a12:	4b1f      	ldr	r3, [pc, #124]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	4a1e      	ldr	r2, [pc, #120]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a18:	f043 0310 	orr.w	r3, r3, #16
 8005a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d106      	bne.n	8005a32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a24:	4b1a      	ldr	r3, [pc, #104]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	4a19      	ldr	r2, [pc, #100]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a30:	e00f      	b.n	8005a52 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d106      	bne.n	8005a46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a38:	4b15      	ldr	r3, [pc, #84]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	4a14      	ldr	r2, [pc, #80]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a44:	e005      	b.n	8005a52 <RCCEx_PLL2_Config+0x11e>
=======
 8008d92:	4b30      	ldr	r3, [pc, #192]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	492d      	ldr	r1, [pc, #180]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008da0:	4313      	orrs	r3, r2
 8008da2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008da4:	4b2b      	ldr	r3, [pc, #172]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da8:	f023 0220 	bic.w	r2, r3, #32
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	4928      	ldr	r1, [pc, #160]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008db2:	4313      	orrs	r3, r2
 8008db4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008db6:	4b27      	ldr	r3, [pc, #156]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dba:	4a26      	ldr	r2, [pc, #152]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008dbc:	f023 0310 	bic.w	r3, r3, #16
 8008dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008dc2:	4b24      	ldr	r3, [pc, #144]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dc6:	4b24      	ldr	r3, [pc, #144]	; (8008e58 <RCCEx_PLL2_Config+0x160>)
 8008dc8:	4013      	ands	r3, r2
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	69d2      	ldr	r2, [r2, #28]
 8008dce:	00d2      	lsls	r2, r2, #3
 8008dd0:	4920      	ldr	r1, [pc, #128]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008dd6:	4b1f      	ldr	r3, [pc, #124]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dda:	4a1e      	ldr	r2, [pc, #120]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008ddc:	f043 0310 	orr.w	r3, r3, #16
 8008de0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d106      	bne.n	8008df6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008de8:	4b1a      	ldr	r3, [pc, #104]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dec:	4a19      	ldr	r2, [pc, #100]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008dee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008df2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008df4:	e00f      	b.n	8008e16 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d106      	bne.n	8008e0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008dfc:	4b15      	ldr	r3, [pc, #84]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e00:	4a14      	ldr	r2, [pc, #80]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e08:	e005      	b.n	8008e16 <RCCEx_PLL2_Config+0x11e>
>>>>>>> Stashed changes
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
<<<<<<< Updated upstream
 8005a46:	4b12      	ldr	r3, [pc, #72]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	4a11      	ldr	r2, [pc, #68]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a50:	62d3      	str	r3, [r2, #44]	; 0x2c
=======
 8008e0a:	4b12      	ldr	r3, [pc, #72]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0e:	4a11      	ldr	r2, [pc, #68]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008e10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e14:	62d3      	str	r3, [r2, #44]	; 0x2c
>>>>>>> Stashed changes
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
<<<<<<< Updated upstream
 8005a52:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a0e      	ldr	r2, [pc, #56]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a5e:	f7fd fa39 	bl	8002ed4 <HAL_GetTick>
 8005a62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a64:	e008      	b.n	8005a78 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a66:	f7fd fa35 	bl	8002ed4 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e006      	b.n	8005a86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a78:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <RCCEx_PLL2_Config+0x15c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0f0      	beq.n	8005a66 <RCCEx_PLL2_Config+0x132>
=======
 8008e16:	4b0f      	ldr	r3, [pc, #60]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a0e      	ldr	r2, [pc, #56]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008e1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e22:	f7fc fcc1 	bl	80057a8 <HAL_GetTick>
 8008e26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e28:	e008      	b.n	8008e3c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008e2a:	f7fc fcbd 	bl	80057a8 <HAL_GetTick>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d901      	bls.n	8008e3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e006      	b.n	8008e4a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e3c:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <RCCEx_PLL2_Config+0x15c>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d0f0      	beq.n	8008e2a <RCCEx_PLL2_Config+0x132>
>>>>>>> Stashed changes
    }

  }


  return status;
<<<<<<< Updated upstream
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	58024400 	.word	0x58024400
 8005a94:	ffff0007 	.word	0xffff0007

08005a98 <RCCEx_PLL3_Config>:
=======
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	58024400 	.word	0x58024400
 8008e58:	ffff0007 	.word	0xffff0007

08008e5c <RCCEx_PLL3_Config>:
>>>>>>> Stashed changes
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
<<<<<<< Updated upstream
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	73fb      	strb	r3, [r7, #15]
=======
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
<<<<<<< Updated upstream
 8005aa6:	4b53      	ldr	r3, [pc, #332]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d101      	bne.n	8005ab6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e099      	b.n	8005bea <RCCEx_PLL3_Config+0x152>
=======
 8008e6a:	4b53      	ldr	r3, [pc, #332]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6e:	f003 0303 	and.w	r3, r3, #3
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d101      	bne.n	8008e7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e099      	b.n	8008fae <RCCEx_PLL3_Config+0x152>
>>>>>>> Stashed changes


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
<<<<<<< Updated upstream
 8005ab6:	4b4f      	ldr	r3, [pc, #316]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a4e      	ldr	r2, [pc, #312]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ac2:	f7fd fa07 	bl	8002ed4 <HAL_GetTick>
 8005ac6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ac8:	e008      	b.n	8005adc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005aca:	f7fd fa03 	bl	8002ed4 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e086      	b.n	8005bea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005adc:	4b45      	ldr	r3, [pc, #276]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1f0      	bne.n	8005aca <RCCEx_PLL3_Config+0x32>
=======
 8008e7a:	4b4f      	ldr	r3, [pc, #316]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a4e      	ldr	r2, [pc, #312]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e86:	f7fc fc8f 	bl	80057a8 <HAL_GetTick>
 8008e8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e8c:	e008      	b.n	8008ea0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008e8e:	f7fc fc8b 	bl	80057a8 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d901      	bls.n	8008ea0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e086      	b.n	8008fae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ea0:	4b45      	ldr	r3, [pc, #276]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1f0      	bne.n	8008e8e <RCCEx_PLL3_Config+0x32>
>>>>>>> Stashed changes
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
<<<<<<< Updated upstream
 8005ae8:	4b42      	ldr	r3, [pc, #264]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	051b      	lsls	r3, r3, #20
 8005af6:	493f      	ldr	r1, [pc, #252]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	628b      	str	r3, [r1, #40]	; 0x28
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	025b      	lsls	r3, r3, #9
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	041b      	lsls	r3, r3, #16
 8005b1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	061b      	lsls	r3, r3, #24
 8005b28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b2c:	4931      	ldr	r1, [pc, #196]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	640b      	str	r3, [r1, #64]	; 0x40
=======
 8008eac:	4b42      	ldr	r3, [pc, #264]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	051b      	lsls	r3, r3, #20
 8008eba:	493f      	ldr	r1, [pc, #252]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	628b      	str	r3, [r1, #40]	; 0x28
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	025b      	lsls	r3, r3, #9
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	431a      	orrs	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	3b01      	subs	r3, #1
 8008edc:	041b      	lsls	r3, r3, #16
 8008ede:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	061b      	lsls	r3, r3, #24
 8008eec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ef0:	4931      	ldr	r1, [pc, #196]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	640b      	str	r3, [r1, #64]	; 0x40
>>>>>>> Stashed changes
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
<<<<<<< Updated upstream
 8005b32:	4b30      	ldr	r3, [pc, #192]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	492d      	ldr	r1, [pc, #180]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b44:	4b2b      	ldr	r3, [pc, #172]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	4928      	ldr	r1, [pc, #160]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b56:	4b27      	ldr	r3, [pc, #156]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	4a26      	ldr	r2, [pc, #152]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b62:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b66:	4b24      	ldr	r3, [pc, #144]	; (8005bf8 <RCCEx_PLL3_Config+0x160>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	69d2      	ldr	r2, [r2, #28]
 8005b6e:	00d2      	lsls	r2, r2, #3
 8005b70:	4920      	ldr	r1, [pc, #128]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b76:	4b1f      	ldr	r3, [pc, #124]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7a:	4a1e      	ldr	r2, [pc, #120]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d106      	bne.n	8005b96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b88:	4b1a      	ldr	r3, [pc, #104]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	4a19      	ldr	r2, [pc, #100]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b94:	e00f      	b.n	8005bb6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d106      	bne.n	8005baa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b9c:	4b15      	ldr	r3, [pc, #84]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba0:	4a14      	ldr	r2, [pc, #80]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005ba2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ba8:	e005      	b.n	8005bb6 <RCCEx_PLL3_Config+0x11e>
=======
 8008ef6:	4b30      	ldr	r3, [pc, #192]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	492d      	ldr	r1, [pc, #180]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f04:	4313      	orrs	r3, r2
 8008f06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008f08:	4b2b      	ldr	r3, [pc, #172]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	4928      	ldr	r1, [pc, #160]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f16:	4313      	orrs	r3, r2
 8008f18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008f1a:	4b27      	ldr	r3, [pc, #156]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1e:	4a26      	ldr	r2, [pc, #152]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008f26:	4b24      	ldr	r3, [pc, #144]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f2a:	4b24      	ldr	r3, [pc, #144]	; (8008fbc <RCCEx_PLL3_Config+0x160>)
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	69d2      	ldr	r2, [r2, #28]
 8008f32:	00d2      	lsls	r2, r2, #3
 8008f34:	4920      	ldr	r1, [pc, #128]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008f3a:	4b1f      	ldr	r3, [pc, #124]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3e:	4a1e      	ldr	r2, [pc, #120]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d106      	bne.n	8008f5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008f4c:	4b1a      	ldr	r3, [pc, #104]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	4a19      	ldr	r2, [pc, #100]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008f56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f58:	e00f      	b.n	8008f7a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d106      	bne.n	8008f6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008f60:	4b15      	ldr	r3, [pc, #84]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f64:	4a14      	ldr	r2, [pc, #80]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f6c:	e005      	b.n	8008f7a <RCCEx_PLL3_Config+0x11e>
>>>>>>> Stashed changes
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
<<<<<<< Updated upstream
 8005baa:	4b12      	ldr	r3, [pc, #72]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	4a11      	ldr	r2, [pc, #68]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005bb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bb4:	62d3      	str	r3, [r2, #44]	; 0x2c
=======
 8008f6e:	4b12      	ldr	r3, [pc, #72]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f72:	4a11      	ldr	r2, [pc, #68]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f78:	62d3      	str	r3, [r2, #44]	; 0x2c
>>>>>>> Stashed changes
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
<<<<<<< Updated upstream
 8005bb6:	4b0f      	ldr	r3, [pc, #60]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a0e      	ldr	r2, [pc, #56]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bc2:	f7fd f987 	bl	8002ed4 <HAL_GetTick>
 8005bc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bc8:	e008      	b.n	8005bdc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005bca:	f7fd f983 	bl	8002ed4 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e006      	b.n	8005bea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bdc:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <RCCEx_PLL3_Config+0x15c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0f0      	beq.n	8005bca <RCCEx_PLL3_Config+0x132>
=======
 8008f7a:	4b0f      	ldr	r3, [pc, #60]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a0e      	ldr	r2, [pc, #56]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f86:	f7fc fc0f 	bl	80057a8 <HAL_GetTick>
 8008f8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f8c:	e008      	b.n	8008fa0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008f8e:	f7fc fc0b 	bl	80057a8 <HAL_GetTick>
 8008f92:	4602      	mov	r2, r0
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d901      	bls.n	8008fa0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e006      	b.n	8008fae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008fa0:	4b05      	ldr	r3, [pc, #20]	; (8008fb8 <RCCEx_PLL3_Config+0x15c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d0f0      	beq.n	8008f8e <RCCEx_PLL3_Config+0x132>
>>>>>>> Stashed changes
    }

  }


  return status;
<<<<<<< Updated upstream
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	58024400 	.word	0x58024400
 8005bf8:	ffff0007 	.word	0xffff0007

08005bfc <HAL_SPI_Init>:
=======
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	58024400 	.word	0x58024400
 8008fbc:	ffff0007 	.word	0xffff0007

08008fc0 <HAL_SPI_Init>:
>>>>>>> Stashed changes
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
=======
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
<<<<<<< Updated upstream
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e0f1      	b.n	8005df2 <HAL_SPI_Init+0x1f6>
=======
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e0f1      	b.n	80091b6 <HAL_SPI_Init+0x1f6>
>>>>>>> Stashed changes
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< Updated upstream
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
<<<<<<< Updated upstream
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a78      	ldr	r2, [pc, #480]	; (8005dfc <HAL_SPI_Init+0x200>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00f      	beq.n	8005c3e <HAL_SPI_Init+0x42>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a77      	ldr	r2, [pc, #476]	; (8005e00 <HAL_SPI_Init+0x204>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00a      	beq.n	8005c3e <HAL_SPI_Init+0x42>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a75      	ldr	r2, [pc, #468]	; (8005e04 <HAL_SPI_Init+0x208>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d005      	beq.n	8005c3e <HAL_SPI_Init+0x42>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	2b0f      	cmp	r3, #15
 8005c38:	d901      	bls.n	8005c3e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e0d9      	b.n	8005df2 <HAL_SPI_Init+0x1f6>
=======
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a78      	ldr	r2, [pc, #480]	; (80091c0 <HAL_SPI_Init+0x200>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d00f      	beq.n	8009002 <HAL_SPI_Init+0x42>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a77      	ldr	r2, [pc, #476]	; (80091c4 <HAL_SPI_Init+0x204>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d00a      	beq.n	8009002 <HAL_SPI_Init+0x42>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a75      	ldr	r2, [pc, #468]	; (80091c8 <HAL_SPI_Init+0x208>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d005      	beq.n	8009002 <HAL_SPI_Init+0x42>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	2b0f      	cmp	r3, #15
 8008ffc:	d901      	bls.n	8009002 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e0d9      	b.n	80091b6 <HAL_SPI_Init+0x1f6>
>>>>>>> Stashed changes
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
<<<<<<< Updated upstream
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 ff66 	bl	8006b10 <SPI_GetPacketSize>
 8005c44:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a6c      	ldr	r2, [pc, #432]	; (8005dfc <HAL_SPI_Init+0x200>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00c      	beq.n	8005c6a <HAL_SPI_Init+0x6e>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a6a      	ldr	r2, [pc, #424]	; (8005e00 <HAL_SPI_Init+0x204>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d007      	beq.n	8005c6a <HAL_SPI_Init+0x6e>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a69      	ldr	r2, [pc, #420]	; (8005e04 <HAL_SPI_Init+0x208>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d002      	beq.n	8005c6a <HAL_SPI_Init+0x6e>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d811      	bhi.n	8005c8e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c6e:	4a63      	ldr	r2, [pc, #396]	; (8005dfc <HAL_SPI_Init+0x200>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d009      	beq.n	8005c88 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a61      	ldr	r2, [pc, #388]	; (8005e00 <HAL_SPI_Init+0x204>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d004      	beq.n	8005c88 <HAL_SPI_Init+0x8c>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a60      	ldr	r2, [pc, #384]	; (8005e04 <HAL_SPI_Init+0x208>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d104      	bne.n	8005c92 <HAL_SPI_Init+0x96>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d901      	bls.n	8005c92 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e0af      	b.n	8005df2 <HAL_SPI_Init+0x1f6>
=======
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 ff66 	bl	8009ed4 <SPI_GetPacketSize>
 8009008:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a6c      	ldr	r2, [pc, #432]	; (80091c0 <HAL_SPI_Init+0x200>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d00c      	beq.n	800902e <HAL_SPI_Init+0x6e>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a6a      	ldr	r2, [pc, #424]	; (80091c4 <HAL_SPI_Init+0x204>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d007      	beq.n	800902e <HAL_SPI_Init+0x6e>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a69      	ldr	r2, [pc, #420]	; (80091c8 <HAL_SPI_Init+0x208>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d002      	beq.n	800902e <HAL_SPI_Init+0x6e>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b08      	cmp	r3, #8
 800902c:	d811      	bhi.n	8009052 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009032:	4a63      	ldr	r2, [pc, #396]	; (80091c0 <HAL_SPI_Init+0x200>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d009      	beq.n	800904c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a61      	ldr	r2, [pc, #388]	; (80091c4 <HAL_SPI_Init+0x204>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d004      	beq.n	800904c <HAL_SPI_Init+0x8c>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a60      	ldr	r2, [pc, #384]	; (80091c8 <HAL_SPI_Init+0x208>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d104      	bne.n	8009056 <HAL_SPI_Init+0x96>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2b10      	cmp	r3, #16
 8009050:	d901      	bls.n	8009056 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e0af      	b.n	80091b6 <HAL_SPI_Init+0x1f6>
>>>>>>> Stashed changes
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
<<<<<<< Updated upstream
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d106      	bne.n	8005cac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
=======
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800905c:	b2db      	uxtb	r3, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	d106      	bne.n	8009070 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< Updated upstream
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7fc f924 	bl	8001ef4 <HAL_SPI_MspInit>
=======
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7fb faea 	bl	8004644 <HAL_SPI_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< Updated upstream
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0201 	bic.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
=======
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2202      	movs	r2, #2
 8009074:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f022 0201 	bic.w	r2, r2, #1
 8009086:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
<<<<<<< Updated upstream
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005cce:	60bb      	str	r3, [r7, #8]
=======
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009092:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
<<<<<<< Updated upstream
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cd8:	d119      	bne.n	8005d0e <HAL_SPI_Init+0x112>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ce2:	d103      	bne.n	8005cec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d008      	beq.n	8005cfe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10c      	bne.n	8005d0e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005cf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cfc:	d107      	bne.n	8005d0e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d0c:	601a      	str	r2, [r3, #0]
=======
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800909c:	d119      	bne.n	80090d2 <HAL_SPI_Init+0x112>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090a6:	d103      	bne.n	80090b0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d008      	beq.n	80090c2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10c      	bne.n	80090d2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80090bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090c0:	d107      	bne.n	80090d2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80090d0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
<<<<<<< Updated upstream
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69da      	ldr	r2, [r3, #28]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	431a      	orrs	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d20:	ea42 0103 	orr.w	r1, r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	609a      	str	r2, [r3, #8]
=======
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	69da      	ldr	r2, [r3, #28]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090da:	431a      	orrs	r2, r3
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	431a      	orrs	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e4:	ea42 0103 	orr.w	r1, r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68da      	ldr	r2, [r3, #12]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	430a      	orrs	r2, r1
 80090f2:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
<<<<<<< Updated upstream
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	431a      	orrs	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d6e:	ea42 0103 	orr.w	r1, r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	60da      	str	r2, [r3, #12]
=======
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fc:	431a      	orrs	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009102:	431a      	orrs	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	431a      	orrs	r2, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	431a      	orrs	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	695b      	ldr	r3, [r3, #20]
 8009114:	431a      	orrs	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a1b      	ldr	r3, [r3, #32]
 800911a:	431a      	orrs	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	431a      	orrs	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009126:	431a      	orrs	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	431a      	orrs	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009132:	ea42 0103 	orr.w	r1, r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	430a      	orrs	r2, r1
 8009140:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
<<<<<<< Updated upstream
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d113      	bne.n	8005dae <HAL_SPI_Init+0x1b2>
=======
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d113      	bne.n	8009172 <HAL_SPI_Init+0x1b2>
>>>>>>> Stashed changes
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
<<<<<<< Updated upstream
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d98:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dac:	609a      	str	r2, [r3, #8]
=======
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800915c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009170:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< Updated upstream
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0201 	bic.w	r2, r2, #1
 8005dbc:	651a      	str	r2, [r3, #80]	; 0x50
=======
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f022 0201 	bic.w	r2, r2, #1
 8009180:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> Stashed changes
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
<<<<<<< Updated upstream
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	40013000 	.word	0x40013000
 8005e00:	40003800 	.word	0x40003800
 8005e04:	40003c00 	.word	0x40003c00

08005e08 <HAL_SPI_Transmit>:
=======
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00a      	beq.n	80091a4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	430a      	orrs	r2, r1
 80091a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	40013000 	.word	0x40013000
 80091c4:	40003800 	.word	0x40003800
 80091c8:	40003c00 	.word	0x40003c00

080091cc <HAL_SPI_Transmit>:
>>>>>>> Stashed changes
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08a      	sub	sp, #40	; 0x28
 8005e0c:	af02      	add	r7, sp, #8
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	4613      	mov	r3, r2
 8005e16:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3320      	adds	r3, #32
 8005e1e:	61fb      	str	r3, [r7, #28]
=======
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08a      	sub	sp, #40	; 0x28
 80091d0:	af02      	add	r7, sp, #8
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	603b      	str	r3, [r7, #0]
 80091d8:	4613      	mov	r3, r2
 80091da:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3320      	adds	r3, #32
 80091e2:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
<<<<<<< Updated upstream
 8005e20:	2300      	movs	r3, #0
 8005e22:	76fb      	strb	r3, [r7, #27]
=======
 80091e4:	2300      	movs	r3, #0
 80091e6:	76fb      	strb	r3, [r7, #27]
>>>>>>> Stashed changes

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
<<<<<<< Updated upstream
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d101      	bne.n	8005e32 <HAL_SPI_Transmit+0x2a>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e1d7      	b.n	80061e2 <HAL_SPI_Transmit+0x3da>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e3a:	f7fd f84b 	bl	8002ed4 <HAL_GetTick>
 8005e3e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d007      	beq.n	8005e5c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005e58:	7efb      	ldrb	r3, [r7, #27]
 8005e5a:	e1c2      	b.n	80061e2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <HAL_SPI_Transmit+0x60>
 8005e62:	88fb      	ldrh	r3, [r7, #6]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d107      	bne.n	8005e78 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005e74:	7efb      	ldrb	r3, [r7, #27]
 8005e76:	e1b4      	b.n	80061e2 <HAL_SPI_Transmit+0x3da>
=======
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d101      	bne.n	80091f6 <HAL_SPI_Transmit+0x2a>
 80091f2:	2302      	movs	r3, #2
 80091f4:	e1d7      	b.n	80095a6 <HAL_SPI_Transmit+0x3da>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091fe:	f7fc fad3 	bl	80057a8 <HAL_GetTick>
 8009202:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b01      	cmp	r3, #1
 800920e:	d007      	beq.n	8009220 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009210:	2302      	movs	r3, #2
 8009212:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800921c:	7efb      	ldrb	r3, [r7, #27]
 800921e:	e1c2      	b.n	80095a6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d002      	beq.n	800922c <HAL_SPI_Transmit+0x60>
 8009226:	88fb      	ldrh	r3, [r7, #6]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d107      	bne.n	800923c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009238:	7efb      	ldrb	r3, [r7, #27]
 800923a:	e1b4      	b.n	80095a6 <HAL_SPI_Transmit+0x3da>
>>>>>>> Stashed changes
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
<<<<<<< Updated upstream
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2203      	movs	r2, #3
 8005e7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	88fa      	ldrh	r2, [r7, #6]
 8005e92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	88fa      	ldrh	r2, [r7, #6]
 8005e9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005ec8:	d107      	bne.n	8005eda <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ed8:	601a      	str	r2, [r3, #0]
=======
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2203      	movs	r2, #3
 8009240:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	88fa      	ldrh	r2, [r7, #6]
 8009256:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	88fa      	ldrh	r2, [r7, #6]
 800925e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800928c:	d107      	bne.n	800929e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800929c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
<<<<<<< Updated upstream
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	4b96      	ldr	r3, [pc, #600]	; (800613c <HAL_SPI_Transmit+0x334>)
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	88f9      	ldrh	r1, [r7, #6]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	6812      	ldr	r2, [r2, #0]
 8005eea:	430b      	orrs	r3, r1
 8005eec:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f042 0201 	orr.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f06:	d107      	bne.n	8005f18 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f16:	601a      	str	r2, [r3, #0]
=======
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	685a      	ldr	r2, [r3, #4]
 80092a4:	4b96      	ldr	r3, [pc, #600]	; (8009500 <HAL_SPI_Transmit+0x334>)
 80092a6:	4013      	ands	r3, r2
 80092a8:	88f9      	ldrh	r1, [r7, #6]
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	6812      	ldr	r2, [r2, #0]
 80092ae:	430b      	orrs	r3, r1
 80092b0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f042 0201 	orr.w	r2, r2, #1
 80092c0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092ca:	d107      	bne.n	80092dc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092da:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
<<<<<<< Updated upstream
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	2b0f      	cmp	r3, #15
 8005f1e:	d947      	bls.n	8005fb0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005f20:	e03f      	b.n	8005fa2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d114      	bne.n	8005f5a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6812      	ldr	r2, [r2, #0]
 8005f3a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f40:	1d1a      	adds	r2, r3, #4
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005f58:	e023      	b.n	8005fa2 <HAL_SPI_Transmit+0x19a>
=======
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	2b0f      	cmp	r3, #15
 80092e2:	d947      	bls.n	8009374 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80092e4:	e03f      	b.n	8009366 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	695b      	ldr	r3, [r3, #20]
 80092ec:	f003 0302 	and.w	r3, r3, #2
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d114      	bne.n	800931e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6812      	ldr	r2, [r2, #0]
 80092fe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009304:	1d1a      	adds	r2, r3, #4
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009310:	b29b      	uxth	r3, r3
 8009312:	3b01      	subs	r3, #1
 8009314:	b29a      	uxth	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800931c:	e023      	b.n	8009366 <HAL_SPI_Transmit+0x19a>
>>>>>>> Stashed changes
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 8005f5a:	f7fc ffbb 	bl	8002ed4 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d803      	bhi.n	8005f72 <HAL_SPI_Transmit+0x16a>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d102      	bne.n	8005f78 <HAL_SPI_Transmit+0x170>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d114      	bne.n	8005fa2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 fcfb 	bl	8006974 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e11f      	b.n	80061e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1b9      	bne.n	8005f22 <HAL_SPI_Transmit+0x11a>
 8005fae:	e0f2      	b.n	8006196 <HAL_SPI_Transmit+0x38e>
=======
 800931e:	f7fc fa43 	bl	80057a8 <HAL_GetTick>
 8009322:	4602      	mov	r2, r0
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	429a      	cmp	r2, r3
 800932c:	d803      	bhi.n	8009336 <HAL_SPI_Transmit+0x16a>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009334:	d102      	bne.n	800933c <HAL_SPI_Transmit+0x170>
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d114      	bne.n	8009366 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 fcfb 	bl	8009d38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009350:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e11f      	b.n	80095a6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800936c:	b29b      	uxth	r3, r3
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1b9      	bne.n	80092e6 <HAL_SPI_Transmit+0x11a>
 8009372:	e0f2      	b.n	800955a <HAL_SPI_Transmit+0x38e>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
<<<<<<< Updated upstream
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	2b07      	cmp	r3, #7
 8005fb6:	f240 80e7 	bls.w	8006188 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005fba:	e05d      	b.n	8006078 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d132      	bne.n	8006030 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d918      	bls.n	8006008 <HAL_SPI_Transmit+0x200>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d014      	beq.n	8006008 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6812      	ldr	r2, [r2, #0]
 8005fe8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fee:	1d1a      	adds	r2, r3, #4
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	3b02      	subs	r3, #2
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006006:	e037      	b.n	8006078 <HAL_SPI_Transmit+0x270>
=======
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	2b07      	cmp	r3, #7
 800937a:	f240 80e7 	bls.w	800954c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800937e:	e05d      	b.n	800943c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	695b      	ldr	r3, [r3, #20]
 8009386:	f003 0302 	and.w	r3, r3, #2
 800938a:	2b02      	cmp	r3, #2
 800938c:	d132      	bne.n	80093f4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009394:	b29b      	uxth	r3, r3
 8009396:	2b01      	cmp	r3, #1
 8009398:	d918      	bls.n	80093cc <HAL_SPI_Transmit+0x200>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d014      	beq.n	80093cc <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6812      	ldr	r2, [r2, #0]
 80093ac:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093b2:	1d1a      	adds	r2, r3, #4
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093be:	b29b      	uxth	r3, r3
 80093c0:	3b02      	subs	r3, #2
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80093ca:	e037      	b.n	800943c <HAL_SPI_Transmit+0x270>
>>>>>>> Stashed changes
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
<<<<<<< Updated upstream
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600c:	881a      	ldrh	r2, [r3, #0]
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	801a      	strh	r2, [r3, #0]
=======
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093d0:	881a      	ldrh	r2, [r3, #0]
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
<<<<<<< Updated upstream
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006016:	1c9a      	adds	r2, r3, #2
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006022:	b29b      	uxth	r3, r3
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800602e:	e023      	b.n	8006078 <HAL_SPI_Transmit+0x270>
=======
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093da:	1c9a      	adds	r2, r3, #2
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80093f2:	e023      	b.n	800943c <HAL_SPI_Transmit+0x270>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 8006030:	f7fc ff50 	bl	8002ed4 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	429a      	cmp	r2, r3
 800603e:	d803      	bhi.n	8006048 <HAL_SPI_Transmit+0x240>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006046:	d102      	bne.n	800604e <HAL_SPI_Transmit+0x246>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d114      	bne.n	8006078 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 fc90 	bl	8006974 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006062:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e0b4      	b.n	80061e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800607e:	b29b      	uxth	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d19b      	bne.n	8005fbc <HAL_SPI_Transmit+0x1b4>
 8006084:	e087      	b.n	8006196 <HAL_SPI_Transmit+0x38e>
=======
 80093f4:	f7fc f9d8 	bl	80057a8 <HAL_GetTick>
 80093f8:	4602      	mov	r2, r0
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	429a      	cmp	r2, r3
 8009402:	d803      	bhi.n	800940c <HAL_SPI_Transmit+0x240>
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940a:	d102      	bne.n	8009412 <HAL_SPI_Transmit+0x246>
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d114      	bne.n	800943c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f000 fc90 	bl	8009d38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009426:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009438:	2303      	movs	r3, #3
 800943a:	e0b4      	b.n	80095a6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009442:	b29b      	uxth	r3, r3
 8009444:	2b00      	cmp	r3, #0
 8009446:	d19b      	bne.n	8009380 <HAL_SPI_Transmit+0x1b4>
 8009448:	e087      	b.n	800955a <HAL_SPI_Transmit+0x38e>
>>>>>>> Stashed changes
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
<<<<<<< Updated upstream
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b02      	cmp	r3, #2
 8006092:	d155      	bne.n	8006140 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b03      	cmp	r3, #3
 800609e:	d918      	bls.n	80060d2 <HAL_SPI_Transmit+0x2ca>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a4:	2b40      	cmp	r3, #64	; 0x40
 80060a6:	d914      	bls.n	80060d2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6812      	ldr	r2, [r2, #0]
 80060b2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b8:	1d1a      	adds	r2, r3, #4
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b04      	subs	r3, #4
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80060d0:	e05a      	b.n	8006188 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d917      	bls.n	800610e <HAL_SPI_Transmit+0x306>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d013      	beq.n	800610e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ea:	881a      	ldrh	r2, [r3, #0]
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	801a      	strh	r2, [r3, #0]
=======
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	695b      	ldr	r3, [r3, #20]
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b02      	cmp	r3, #2
 8009456:	d155      	bne.n	8009504 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800945e:	b29b      	uxth	r3, r3
 8009460:	2b03      	cmp	r3, #3
 8009462:	d918      	bls.n	8009496 <HAL_SPI_Transmit+0x2ca>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009468:	2b40      	cmp	r3, #64	; 0x40
 800946a:	d914      	bls.n	8009496 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6812      	ldr	r2, [r2, #0]
 8009476:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800947c:	1d1a      	adds	r2, r3, #4
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009488:	b29b      	uxth	r3, r3
 800948a:	3b04      	subs	r3, #4
 800948c:	b29a      	uxth	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009494:	e05a      	b.n	800954c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800949c:	b29b      	uxth	r3, r3
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d917      	bls.n	80094d2 <HAL_SPI_Transmit+0x306>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d013      	beq.n	80094d2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ae:	881a      	ldrh	r2, [r3, #0]
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
<<<<<<< Updated upstream
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f4:	1c9a      	adds	r2, r3, #2
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006100:	b29b      	uxth	r3, r3
 8006102:	3b02      	subs	r3, #2
 8006104:	b29a      	uxth	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800610c:	e03c      	b.n	8006188 <HAL_SPI_Transmit+0x380>
=======
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b8:	1c9a      	adds	r2, r3, #2
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	3b02      	subs	r3, #2
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80094d0:	e03c      	b.n	800954c <HAL_SPI_Transmit+0x380>
>>>>>>> Stashed changes
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
<<<<<<< Updated upstream
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3320      	adds	r3, #32
 8006118:	7812      	ldrb	r2, [r2, #0]
 800611a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006138:	e026      	b.n	8006188 <HAL_SPI_Transmit+0x380>
 800613a:	bf00      	nop
 800613c:	ffff0000 	.word	0xffff0000
=======
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3320      	adds	r3, #32
 80094dc:	7812      	ldrb	r2, [r2, #0]
 80094de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094e4:	1c5a      	adds	r2, r3, #1
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	3b01      	subs	r3, #1
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80094fc:	e026      	b.n	800954c <HAL_SPI_Transmit+0x380>
 80094fe:	bf00      	nop
 8009500:	ffff0000 	.word	0xffff0000
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 8006140:	f7fc fec8 	bl	8002ed4 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	429a      	cmp	r2, r3
 800614e:	d803      	bhi.n	8006158 <HAL_SPI_Transmit+0x350>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d102      	bne.n	800615e <HAL_SPI_Transmit+0x356>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d114      	bne.n	8006188 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 fc08 	bl	8006974 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006172:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e02c      	b.n	80061e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800618e:	b29b      	uxth	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	f47f af78 	bne.w	8006086 <HAL_SPI_Transmit+0x27e>
=======
 8009504:	f7fc f950 	bl	80057a8 <HAL_GetTick>
 8009508:	4602      	mov	r2, r0
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	1ad3      	subs	r3, r2, r3
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	429a      	cmp	r2, r3
 8009512:	d803      	bhi.n	800951c <HAL_SPI_Transmit+0x350>
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951a:	d102      	bne.n	8009522 <HAL_SPI_Transmit+0x356>
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d114      	bne.n	800954c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 fc08 	bl	8009d38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009536:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009548:	2303      	movs	r3, #3
 800954a:	e02c      	b.n	80095a6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009552:	b29b      	uxth	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	f47f af78 	bne.w	800944a <HAL_SPI_Transmit+0x27e>
>>>>>>> Stashed changes
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< Updated upstream
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2200      	movs	r2, #0
 800619e:	2108      	movs	r1, #8
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 fc87 	bl	8006ab4 <SPI_WaitOnFlagUntilTimeout>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d007      	beq.n	80061bc <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061b2:	f043 0220 	orr.w	r2, r3, #32
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	2200      	movs	r2, #0
 8009562:	2108      	movs	r1, #8
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f000 fc87 	bl	8009e78 <SPI_WaitOnFlagUntilTimeout>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d007      	beq.n	8009580 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009576:	f043 0220 	orr.w	r2, r3, #32
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
<<<<<<< Updated upstream
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fbd9 	bl	8006974 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80061e0:	7efb      	ldrb	r3, [r7, #27]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3720      	adds	r7, #32
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop

080061ec <HAL_SPI_Receive>:
=======
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f000 fbd9 	bl	8009d38 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	e000      	b.n	80095a6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80095a4:	7efb      	ldrb	r3, [r7, #27]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3720      	adds	r7, #32
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop

080095b0 <HAL_SPI_Receive>:
>>>>>>> Stashed changes
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	; 0x28
 80061f0:	af02      	add	r7, sp, #8
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	4613      	mov	r3, r2
 80061fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3330      	adds	r3, #48	; 0x30
 8006206:	61bb      	str	r3, [r7, #24]
=======
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b08a      	sub	sp, #40	; 0x28
 80095b4:	af02      	add	r7, sp, #8
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	603b      	str	r3, [r7, #0]
 80095bc:	4613      	mov	r3, r2
 80095be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	3330      	adds	r3, #48	; 0x30
 80095ca:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
<<<<<<< Updated upstream
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006210:	d112      	bne.n	8006238 <HAL_SPI_Receive+0x4c>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10e      	bne.n	8006238 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2204      	movs	r2, #4
 800621e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006222:	88fa      	ldrh	r2, [r7, #6]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	4613      	mov	r3, r2
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f978 	bl	8006524 <HAL_SPI_TransmitReceive>
 8006234:	4603      	mov	r3, r0
 8006236:	e16f      	b.n	8006518 <HAL_SPI_Receive+0x32c>
=======
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095d4:	d112      	bne.n	80095fc <HAL_SPI_Receive+0x4c>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10e      	bne.n	80095fc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2204      	movs	r2, #4
 80095e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80095e6:	88fa      	ldrh	r2, [r7, #6]
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	4613      	mov	r3, r2
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	68b9      	ldr	r1, [r7, #8]
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f000 f978 	bl	80098e8 <HAL_SPI_TransmitReceive>
 80095f8:	4603      	mov	r3, r0
 80095fa:	e16f      	b.n	80098dc <HAL_SPI_Receive+0x32c>
>>>>>>> Stashed changes
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
<<<<<<< Updated upstream
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_SPI_Receive+0x5a>
 8006242:	2302      	movs	r3, #2
 8006244:	e168      	b.n	8006518 <HAL_SPI_Receive+0x32c>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800624e:	f7fc fe41 	bl	8002ed4 <HAL_GetTick>
 8006252:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b01      	cmp	r3, #1
 800625e:	d007      	beq.n	8006270 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8006260:	2302      	movs	r3, #2
 8006262:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800626c:	7ffb      	ldrb	r3, [r7, #31]
 800626e:	e153      	b.n	8006518 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <HAL_SPI_Receive+0x90>
 8006276:	88fb      	ldrh	r3, [r7, #6]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d107      	bne.n	800628c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006288:	7ffb      	ldrb	r3, [r7, #31]
 800628a:	e145      	b.n	8006518 <HAL_SPI_Receive+0x32c>
=======
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009602:	2b01      	cmp	r3, #1
 8009604:	d101      	bne.n	800960a <HAL_SPI_Receive+0x5a>
 8009606:	2302      	movs	r3, #2
 8009608:	e168      	b.n	80098dc <HAL_SPI_Receive+0x32c>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009612:	f7fc f8c9 	bl	80057a8 <HAL_GetTick>
 8009616:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b01      	cmp	r3, #1
 8009622:	d007      	beq.n	8009634 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8009624:	2302      	movs	r3, #2
 8009626:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009630:	7ffb      	ldrb	r3, [r7, #31]
 8009632:	e153      	b.n	80098dc <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d002      	beq.n	8009640 <HAL_SPI_Receive+0x90>
 800963a:	88fb      	ldrh	r3, [r7, #6]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d107      	bne.n	8009650 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800964c:	7ffb      	ldrb	r3, [r7, #31]
 800964e:	e145      	b.n	80098dc <HAL_SPI_Receive+0x32c>
>>>>>>> Stashed changes
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
<<<<<<< Updated upstream
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2204      	movs	r2, #4
 8006290:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	88fa      	ldrh	r2, [r7, #6]
 80062a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	88fa      	ldrh	r2, [r7, #6]
 80062ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80062dc:	d107      	bne.n	80062ee <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062ec:	601a      	str	r2, [r3, #0]
=======
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2204      	movs	r2, #4
 8009654:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	88fa      	ldrh	r2, [r7, #6]
 800966a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	88fa      	ldrh	r2, [r7, #6]
 8009672:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2200      	movs	r2, #0
 8009690:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80096a0:	d107      	bne.n	80096b2 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096b0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
<<<<<<< Updated upstream
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	4b8a      	ldr	r3, [pc, #552]	; (8006520 <HAL_SPI_Receive+0x334>)
 80062f6:	4013      	ands	r3, r2
 80062f8:	88f9      	ldrh	r1, [r7, #6]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	6812      	ldr	r2, [r2, #0]
 80062fe:	430b      	orrs	r3, r1
 8006300:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0201 	orr.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800631a:	d107      	bne.n	800632c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800632a:	601a      	str	r2, [r3, #0]
=======
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	685a      	ldr	r2, [r3, #4]
 80096b8:	4b8a      	ldr	r3, [pc, #552]	; (80098e4 <HAL_SPI_Receive+0x334>)
 80096ba:	4013      	ands	r3, r2
 80096bc:	88f9      	ldrh	r1, [r7, #6]
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	6812      	ldr	r2, [r2, #0]
 80096c2:	430b      	orrs	r3, r1
 80096c4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f042 0201 	orr.w	r2, r2, #1
 80096d4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096de:	d107      	bne.n	80096f0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096ee:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
<<<<<<< Updated upstream
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	2b0f      	cmp	r3, #15
 8006332:	d948      	bls.n	80063c6 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006334:	e040      	b.n	80063b8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	695a      	ldr	r2, [r3, #20]
 800633c:	f248 0308 	movw	r3, #32776	; 0x8008
 8006340:	4013      	ands	r3, r2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d014      	beq.n	8006370 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800634e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006350:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006356:	1d1a      	adds	r2, r3, #4
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006362:	b29b      	uxth	r3, r3
 8006364:	3b01      	subs	r3, #1
 8006366:	b29a      	uxth	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800636e:	e023      	b.n	80063b8 <HAL_SPI_Receive+0x1cc>
=======
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	2b0f      	cmp	r3, #15
 80096f6:	d948      	bls.n	800978a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80096f8:	e040      	b.n	800977c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	695a      	ldr	r2, [r3, #20]
 8009700:	f248 0308 	movw	r3, #32776	; 0x8008
 8009704:	4013      	ands	r3, r2
 8009706:	2b00      	cmp	r3, #0
 8009708:	d014      	beq.n	8009734 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009712:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009714:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800971a:	1d1a      	adds	r2, r3, #4
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009726:	b29b      	uxth	r3, r3
 8009728:	3b01      	subs	r3, #1
 800972a:	b29a      	uxth	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009732:	e023      	b.n	800977c <HAL_SPI_Receive+0x1cc>
>>>>>>> Stashed changes
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 8006370:	f7fc fdb0 	bl	8002ed4 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	429a      	cmp	r2, r3
 800637e:	d803      	bhi.n	8006388 <HAL_SPI_Receive+0x19c>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006386:	d102      	bne.n	800638e <HAL_SPI_Receive+0x1a2>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d114      	bne.n	80063b8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 faf0 	bl	8006974 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e0af      	b.n	8006518 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80063be:	b29b      	uxth	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1b8      	bne.n	8006336 <HAL_SPI_Receive+0x14a>
 80063c4:	e095      	b.n	80064f2 <HAL_SPI_Receive+0x306>
=======
 8009734:	f7fc f838 	bl	80057a8 <HAL_GetTick>
 8009738:	4602      	mov	r2, r0
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	683a      	ldr	r2, [r7, #0]
 8009740:	429a      	cmp	r2, r3
 8009742:	d803      	bhi.n	800974c <HAL_SPI_Receive+0x19c>
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974a:	d102      	bne.n	8009752 <HAL_SPI_Receive+0x1a2>
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d114      	bne.n	800977c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f000 faf0 	bl	8009d38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009766:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009778:	2303      	movs	r3, #3
 800977a:	e0af      	b.n	80098dc <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009782:	b29b      	uxth	r3, r3
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1b8      	bne.n	80096fa <HAL_SPI_Receive+0x14a>
 8009788:	e095      	b.n	80098b6 <HAL_SPI_Receive+0x306>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
<<<<<<< Updated upstream
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	2b07      	cmp	r3, #7
 80063cc:	f240 808b 	bls.w	80064e6 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80063d0:	e03f      	b.n	8006452 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d114      	bne.n	800640a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	8812      	ldrh	r2, [r2, #0]
 80063e8:	b292      	uxth	r2, r2
 80063ea:	801a      	strh	r2, [r3, #0]
=======
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	2b07      	cmp	r3, #7
 8009790:	f240 808b 	bls.w	80098aa <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009794:	e03f      	b.n	8009816 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	695b      	ldr	r3, [r3, #20]
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d114      	bne.n	80097ce <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097a8:	69ba      	ldr	r2, [r7, #24]
 80097aa:	8812      	ldrh	r2, [r2, #0]
 80097ac:	b292      	uxth	r2, r2
 80097ae:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
<<<<<<< Updated upstream
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063f0:	1c9a      	adds	r2, r3, #2
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006408:	e023      	b.n	8006452 <HAL_SPI_Receive+0x266>
=======
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097b4:	1c9a      	adds	r2, r3, #2
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	3b01      	subs	r3, #1
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80097cc:	e023      	b.n	8009816 <HAL_SPI_Receive+0x266>
>>>>>>> Stashed changes
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 800640a:	f7fc fd63 	bl	8002ed4 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d803      	bhi.n	8006422 <HAL_SPI_Receive+0x236>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d102      	bne.n	8006428 <HAL_SPI_Receive+0x23c>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d114      	bne.n	8006452 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 faa3 	bl	8006974 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800643c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e062      	b.n	8006518 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1b9      	bne.n	80063d2 <HAL_SPI_Receive+0x1e6>
 800645e:	e048      	b.n	80064f2 <HAL_SPI_Receive+0x306>
=======
 80097ce:	f7fb ffeb 	bl	80057a8 <HAL_GetTick>
 80097d2:	4602      	mov	r2, r0
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	1ad3      	subs	r3, r2, r3
 80097d8:	683a      	ldr	r2, [r7, #0]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d803      	bhi.n	80097e6 <HAL_SPI_Receive+0x236>
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e4:	d102      	bne.n	80097ec <HAL_SPI_Receive+0x23c>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d114      	bne.n	8009816 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f000 faa3 	bl	8009d38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009800:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2201      	movs	r2, #1
 800980e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e062      	b.n	80098dc <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800981c:	b29b      	uxth	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1b9      	bne.n	8009796 <HAL_SPI_Receive+0x1e6>
 8009822:	e048      	b.n	80098b6 <HAL_SPI_Receive+0x306>
>>>>>>> Stashed changes
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
<<<<<<< Updated upstream
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b01      	cmp	r3, #1
 800646c:	d117      	bne.n	800649e <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800647a:	7812      	ldrb	r2, [r2, #0]
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800649c:	e023      	b.n	80064e6 <HAL_SPI_Receive+0x2fa>
=======
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	695b      	ldr	r3, [r3, #20]
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b01      	cmp	r3, #1
 8009830:	d117      	bne.n	8009862 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800983e:	7812      	ldrb	r2, [r2, #0]
 8009840:	b2d2      	uxtb	r2, r2
 8009842:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009848:	1c5a      	adds	r2, r3, #1
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009854:	b29b      	uxth	r3, r3
 8009856:	3b01      	subs	r3, #1
 8009858:	b29a      	uxth	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009860:	e023      	b.n	80098aa <HAL_SPI_Receive+0x2fa>
>>>>>>> Stashed changes
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 800649e:	f7fc fd19 	bl	8002ed4 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d803      	bhi.n	80064b6 <HAL_SPI_Receive+0x2ca>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b4:	d102      	bne.n	80064bc <HAL_SPI_Receive+0x2d0>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d114      	bne.n	80064e6 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 fa59 	bl	8006974 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e018      	b.n	8006518 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1b6      	bne.n	8006460 <HAL_SPI_Receive+0x274>
=======
 8009862:	f7fb ffa1 	bl	80057a8 <HAL_GetTick>
 8009866:	4602      	mov	r2, r0
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	683a      	ldr	r2, [r7, #0]
 800986e:	429a      	cmp	r2, r3
 8009870:	d803      	bhi.n	800987a <HAL_SPI_Receive+0x2ca>
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009878:	d102      	bne.n	8009880 <HAL_SPI_Receive+0x2d0>
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d114      	bne.n	80098aa <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f000 fa59 	bl	8009d38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009894:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80098a6:	2303      	movs	r3, #3
 80098a8:	e018      	b.n	80098dc <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1b6      	bne.n	8009824 <HAL_SPI_Receive+0x274>
>>>>>>> Stashed changes
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
<<<<<<< Updated upstream
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 fa3e 	bl	8006974 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e000      	b.n	8006518 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8006516:	7ffb      	ldrb	r3, [r7, #31]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3720      	adds	r7, #32
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	ffff0000 	.word	0xffff0000

08006524 <HAL_SPI_TransmitReceive>:
=======
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f000 fa3e 	bl	8009d38 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e000      	b.n	80098dc <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 80098da:	7ffb      	ldrb	r3, [r7, #31]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3720      	adds	r7, #32
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	ffff0000 	.word	0xffff0000

080098e8 <HAL_SPI_TransmitReceive>:
>>>>>>> Stashed changes
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
<<<<<<< Updated upstream
 8006524:	b580      	push	{r7, lr}
 8006526:	b08e      	sub	sp, #56	; 0x38
 8006528:	af02      	add	r7, sp, #8
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3320      	adds	r3, #32
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3330      	adds	r3, #48	; 0x30
 8006546:	623b      	str	r3, [r7, #32]
=======
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b08e      	sub	sp, #56	; 0x38
 80098ec:	af02      	add	r7, sp, #8
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
 80098f4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3320      	adds	r3, #32
 8009902:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	3330      	adds	r3, #48	; 0x30
 800990a:	623b      	str	r3, [r7, #32]
>>>>>>> Stashed changes

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
<<<<<<< Updated upstream
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800654e:	2b01      	cmp	r3, #1
 8006550:	d101      	bne.n	8006556 <HAL_SPI_TransmitReceive+0x32>
 8006552:	2302      	movs	r3, #2
 8006554:	e209      	b.n	800696a <HAL_SPI_TransmitReceive+0x446>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800655e:	f7fc fcb9 	bl	8002ed4 <HAL_GetTick>
 8006562:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006564:	887b      	ldrh	r3, [r7, #2]
 8006566:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006568:	887b      	ldrh	r3, [r7, #2]
 800656a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006572:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800657a:	7efb      	ldrb	r3, [r7, #27]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d014      	beq.n	80065aa <HAL_SPI_TransmitReceive+0x86>
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006586:	d106      	bne.n	8006596 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800658c:	2b00      	cmp	r3, #0
 800658e:	d102      	bne.n	8006596 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006590:	7efb      	ldrb	r3, [r7, #27]
 8006592:	2b04      	cmp	r3, #4
 8006594:	d009      	beq.n	80065aa <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8006596:	2302      	movs	r3, #2
 8006598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80065a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065a8:	e1df      	b.n	800696a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <HAL_SPI_TransmitReceive+0x98>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d002      	beq.n	80065bc <HAL_SPI_TransmitReceive+0x98>
 80065b6:	887b      	ldrh	r3, [r7, #2]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80065ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065ce:	e1cc      	b.n	800696a <HAL_SPI_TransmitReceive+0x446>
=======
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009912:	2b01      	cmp	r3, #1
 8009914:	d101      	bne.n	800991a <HAL_SPI_TransmitReceive+0x32>
 8009916:	2302      	movs	r3, #2
 8009918:	e209      	b.n	8009d2e <HAL_SPI_TransmitReceive+0x446>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009922:	f7fb ff41 	bl	80057a8 <HAL_GetTick>
 8009926:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8009928:	887b      	ldrh	r3, [r7, #2]
 800992a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800992c:	887b      	ldrh	r3, [r7, #2]
 800992e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009936:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800993e:	7efb      	ldrb	r3, [r7, #27]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d014      	beq.n	800996e <HAL_SPI_TransmitReceive+0x86>
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800994a:	d106      	bne.n	800995a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8009950:	2b00      	cmp	r3, #0
 8009952:	d102      	bne.n	800995a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8009954:	7efb      	ldrb	r3, [r7, #27]
 8009956:	2b04      	cmp	r3, #4
 8009958:	d009      	beq.n	800996e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800995a:	2302      	movs	r3, #2
 800995c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009968:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800996c:	e1df      	b.n	8009d2e <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d005      	beq.n	8009980 <HAL_SPI_TransmitReceive+0x98>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d002      	beq.n	8009980 <HAL_SPI_TransmitReceive+0x98>
 800997a:	887b      	ldrh	r3, [r7, #2]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d109      	bne.n	8009994 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800998e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009992:	e1cc      	b.n	8009d2e <HAL_SPI_TransmitReceive+0x446>
>>>>>>> Stashed changes
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
<<<<<<< Updated upstream
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d003      	beq.n	80065e4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2205      	movs	r2, #5
 80065e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
=======
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800999a:	b2db      	uxtb	r3, r3
 800999c:	2b04      	cmp	r3, #4
 800999e:	d003      	beq.n	80099a8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2205      	movs	r2, #5
 80099a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
>>>>>>> Stashed changes
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
<<<<<<< Updated upstream
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	887a      	ldrh	r2, [r7, #2]
 80065f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	887a      	ldrh	r2, [r7, #2]
 80065fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	887a      	ldrh	r2, [r7, #2]
 800660c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	887a      	ldrh	r2, [r7, #2]
 8006614:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	4b82      	ldr	r3, [pc, #520]	; (8006834 <HAL_SPI_TransmitReceive+0x310>)
 800662c:	4013      	ands	r3, r2
 800662e:	8879      	ldrh	r1, [r7, #2]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	6812      	ldr	r2, [r2, #0]
 8006634:	430b      	orrs	r3, r1
 8006636:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0201 	orr.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006650:	d107      	bne.n	8006662 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006660:	601a      	str	r2, [r3, #0]
=======
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	887a      	ldrh	r2, [r7, #2]
 80099ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	887a      	ldrh	r2, [r7, #2]
 80099c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	887a      	ldrh	r2, [r7, #2]
 80099d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	887a      	ldrh	r2, [r7, #2]
 80099d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2200      	movs	r2, #0
 80099e6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	4b82      	ldr	r3, [pc, #520]	; (8009bf8 <HAL_SPI_TransmitReceive+0x310>)
 80099f0:	4013      	ands	r3, r2
 80099f2:	8879      	ldrh	r1, [r7, #2]
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	6812      	ldr	r2, [r2, #0]
 80099f8:	430b      	orrs	r3, r1
 80099fa:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f042 0201 	orr.w	r2, r2, #1
 8009a0a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a14:	d107      	bne.n	8009a26 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a24:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
<<<<<<< Updated upstream
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	2b0f      	cmp	r3, #15
 8006668:	d970      	bls.n	800674c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800666a:	e068      	b.n	800673e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b02      	cmp	r3, #2
 8006678:	d11a      	bne.n	80066b0 <HAL_SPI_TransmitReceive+0x18c>
 800667a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800667c:	2b00      	cmp	r3, #0
 800667e:	d017      	beq.n	80066b0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6812      	ldr	r2, [r2, #0]
 800668a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006690:	1d1a      	adds	r2, r3, #4
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80066ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
=======
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	2b0f      	cmp	r3, #15
 8009a2c:	d970      	bls.n	8009b10 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009a2e:	e068      	b.n	8009b02 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	f003 0302 	and.w	r3, r3, #2
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d11a      	bne.n	8009a74 <HAL_SPI_TransmitReceive+0x18c>
 8009a3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d017      	beq.n	8009a74 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	6812      	ldr	r2, [r2, #0]
 8009a4e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a54:	1d1a      	adds	r2, r3, #4
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	3b01      	subs	r3, #1
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a72:	85fb      	strh	r3, [r7, #46]	; 0x2e
>>>>>>> Stashed changes
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
<<<<<<< Updated upstream
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695a      	ldr	r2, [r3, #20]
 80066b6:	f248 0308 	movw	r3, #32776	; 0x8008
 80066ba:	4013      	ands	r3, r2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01a      	beq.n	80066f6 <HAL_SPI_TransmitReceive+0x1d2>
 80066c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d017      	beq.n	80066f6 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80066d0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066d6:	1d1a      	adds	r2, r3, #4
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80066f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
=======
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	695a      	ldr	r2, [r3, #20]
 8009a7a:	f248 0308 	movw	r3, #32776	; 0x8008
 8009a7e:	4013      	ands	r3, r2
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d01a      	beq.n	8009aba <HAL_SPI_TransmitReceive+0x1d2>
 8009a84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d017      	beq.n	8009aba <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009a94:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a9a:	1d1a      	adds	r2, r3, #4
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009ab8:	85bb      	strh	r3, [r7, #44]	; 0x2c
>>>>>>> Stashed changes
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 80066f6:	f7fc fbed 	bl	8002ed4 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006702:	429a      	cmp	r2, r3
 8006704:	d803      	bhi.n	800670e <HAL_SPI_TransmitReceive+0x1ea>
 8006706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670c:	d102      	bne.n	8006714 <HAL_SPI_TransmitReceive+0x1f0>
 800670e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006710:	2b00      	cmp	r3, #0
 8006712:	d114      	bne.n	800673e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 f92d 	bl	8006974 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006728:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e115      	b.n	800696a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800673e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006740:	2b00      	cmp	r3, #0
 8006742:	d193      	bne.n	800666c <HAL_SPI_TransmitReceive+0x148>
 8006744:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006746:	2b00      	cmp	r3, #0
 8006748:	d190      	bne.n	800666c <HAL_SPI_TransmitReceive+0x148>
 800674a:	e0e7      	b.n	800691c <HAL_SPI_TransmitReceive+0x3f8>
=======
 8009aba:	f7fb fe75 	bl	80057a8 <HAL_GetTick>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d803      	bhi.n	8009ad2 <HAL_SPI_TransmitReceive+0x1ea>
 8009aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad0:	d102      	bne.n	8009ad8 <HAL_SPI_TransmitReceive+0x1f0>
 8009ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d114      	bne.n	8009b02 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 f92d 	bl	8009d38 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009aec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e115      	b.n	8009d2e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009b02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d193      	bne.n	8009a30 <HAL_SPI_TransmitReceive+0x148>
 8009b08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d190      	bne.n	8009a30 <HAL_SPI_TransmitReceive+0x148>
 8009b0e:	e0e7      	b.n	8009ce0 <HAL_SPI_TransmitReceive+0x3f8>
>>>>>>> Stashed changes
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
<<<<<<< Updated upstream
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	2b07      	cmp	r3, #7
 8006752:	f240 80dd 	bls.w	8006910 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006756:	e066      	b.n	8006826 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b02      	cmp	r3, #2
 8006764:	d119      	bne.n	800679a <HAL_SPI_TransmitReceive+0x276>
 8006766:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006768:	2b00      	cmp	r3, #0
 800676a:	d016      	beq.n	800679a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006770:	881a      	ldrh	r2, [r3, #0]
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	801a      	strh	r2, [r3, #0]
=======
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	2b07      	cmp	r3, #7
 8009b16:	f240 80dd 	bls.w	8009cd4 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009b1a:	e066      	b.n	8009bea <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	695b      	ldr	r3, [r3, #20]
 8009b22:	f003 0302 	and.w	r3, r3, #2
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d119      	bne.n	8009b5e <HAL_SPI_TransmitReceive+0x276>
 8009b2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d016      	beq.n	8009b5e <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b34:	881a      	ldrh	r2, [r3, #0]
 8009b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b38:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
<<<<<<< Updated upstream
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800677a:	1c9a      	adds	r2, r3, #2
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006786:	b29b      	uxth	r3, r3
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006798:	85fb      	strh	r3, [r7, #46]	; 0x2e
=======
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b3e:	1c9a      	adds	r2, r3, #2
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
>>>>>>> Stashed changes
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
<<<<<<< Updated upstream
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d11a      	bne.n	80067de <HAL_SPI_TransmitReceive+0x2ba>
 80067a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d017      	beq.n	80067de <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b2:	6a3a      	ldr	r2, [r7, #32]
 80067b4:	8812      	ldrh	r2, [r2, #0]
 80067b6:	b292      	uxth	r2, r2
 80067b8:	801a      	strh	r2, [r3, #0]
=======
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	695b      	ldr	r3, [r3, #20]
 8009b64:	f003 0301 	and.w	r3, r3, #1
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d11a      	bne.n	8009ba2 <HAL_SPI_TransmitReceive+0x2ba>
 8009b6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d017      	beq.n	8009ba2 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b76:	6a3a      	ldr	r2, [r7, #32]
 8009b78:	8812      	ldrh	r2, [r2, #0]
 8009b7a:	b292      	uxth	r2, r2
 8009b7c:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
<<<<<<< Updated upstream
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067be:	1c9a      	adds	r2, r3, #2
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	3b01      	subs	r3, #1
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067dc:	85bb      	strh	r3, [r7, #44]	; 0x2c
=======
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b82:	1c9a      	adds	r2, r3, #2
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	3b01      	subs	r3, #1
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009ba0:	85bb      	strh	r3, [r7, #44]	; 0x2c
>>>>>>> Stashed changes
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 80067de:	f7fc fb79 	bl	8002ed4 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d803      	bhi.n	80067f6 <HAL_SPI_TransmitReceive+0x2d2>
 80067ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f4:	d102      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x2d8>
 80067f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d114      	bne.n	8006826 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f8b9 	bl	8006974 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006810:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e0a1      	b.n	800696a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006826:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006828:	2b00      	cmp	r3, #0
 800682a:	d195      	bne.n	8006758 <HAL_SPI_TransmitReceive+0x234>
 800682c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800682e:	2b00      	cmp	r3, #0
 8006830:	d192      	bne.n	8006758 <HAL_SPI_TransmitReceive+0x234>
 8006832:	e073      	b.n	800691c <HAL_SPI_TransmitReceive+0x3f8>
 8006834:	ffff0000 	.word	0xffff0000
=======
 8009ba2:	f7fb fe01 	bl	80057a8 <HAL_GetTick>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d803      	bhi.n	8009bba <HAL_SPI_TransmitReceive+0x2d2>
 8009bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb8:	d102      	bne.n	8009bc0 <HAL_SPI_TransmitReceive+0x2d8>
 8009bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d114      	bne.n	8009bea <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 f8b9 	bl	8009d38 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e0a1      	b.n	8009d2e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009bea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d195      	bne.n	8009b1c <HAL_SPI_TransmitReceive+0x234>
 8009bf0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d192      	bne.n	8009b1c <HAL_SPI_TransmitReceive+0x234>
 8009bf6:	e073      	b.n	8009ce0 <HAL_SPI_TransmitReceive+0x3f8>
 8009bf8:	ffff0000 	.word	0xffff0000
>>>>>>> Stashed changes
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
<<<<<<< Updated upstream
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b02      	cmp	r3, #2
 8006844:	d11b      	bne.n	800687e <HAL_SPI_TransmitReceive+0x35a>
 8006846:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006848:	2b00      	cmp	r3, #0
 800684a:	d018      	beq.n	800687e <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3320      	adds	r3, #32
 8006856:	7812      	ldrb	r2, [r2, #0]
 8006858:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b29a      	uxth	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800687c:	85fb      	strh	r3, [r7, #46]	; 0x2e
=======
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	f003 0302 	and.w	r3, r3, #2
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	d11b      	bne.n	8009c42 <HAL_SPI_TransmitReceive+0x35a>
 8009c0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d018      	beq.n	8009c42 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	3320      	adds	r3, #32
 8009c1a:	7812      	ldrb	r2, [r2, #0]
 8009c1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c22:	1c5a      	adds	r2, r3, #1
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	3b01      	subs	r3, #1
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c40:	85fb      	strh	r3, [r7, #46]	; 0x2e
>>>>>>> Stashed changes
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
<<<<<<< Updated upstream
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b01      	cmp	r3, #1
 800688a:	d11d      	bne.n	80068c8 <HAL_SPI_TransmitReceive+0x3a4>
 800688c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800688e:	2b00      	cmp	r3, #0
 8006890:	d01a      	beq.n	80068c8 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800689e:	7812      	ldrb	r2, [r2, #0]
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
=======
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	f003 0301 	and.w	r3, r3, #1
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d11d      	bne.n	8009c8c <HAL_SPI_TransmitReceive+0x3a4>
 8009c50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d01a      	beq.n	8009c8c <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c62:	7812      	ldrb	r2, [r2, #0]
 8009c64:	b2d2      	uxtb	r2, r2
 8009c66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c8a:	85bb      	strh	r3, [r7, #44]	; 0x2c
>>>>>>> Stashed changes
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 80068c8:	f7fc fb04 	bl	8002ed4 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d803      	bhi.n	80068e0 <HAL_SPI_TransmitReceive+0x3bc>
 80068d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068de:	d102      	bne.n	80068e6 <HAL_SPI_TransmitReceive+0x3c2>
 80068e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d114      	bne.n	8006910 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 f844 	bl	8006974 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e02c      	b.n	800696a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006910:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006912:	2b00      	cmp	r3, #0
 8006914:	d190      	bne.n	8006838 <HAL_SPI_TransmitReceive+0x314>
 8006916:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006918:	2b00      	cmp	r3, #0
 800691a:	d18d      	bne.n	8006838 <HAL_SPI_TransmitReceive+0x314>
=======
 8009c8c:	f7fb fd8c 	bl	80057a8 <HAL_GetTick>
 8009c90:	4602      	mov	r2, r0
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d803      	bhi.n	8009ca4 <HAL_SPI_TransmitReceive+0x3bc>
 8009c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca2:	d102      	bne.n	8009caa <HAL_SPI_TransmitReceive+0x3c2>
 8009ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d114      	bne.n	8009cd4 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f000 f844 	bl	8009d38 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	e02c      	b.n	8009d2e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009cd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d190      	bne.n	8009bfc <HAL_SPI_TransmitReceive+0x314>
 8009cda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d18d      	bne.n	8009bfc <HAL_SPI_TransmitReceive+0x314>
>>>>>>> Stashed changes
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< Updated upstream
 800691c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	2200      	movs	r2, #0
 8006924:	2108      	movs	r1, #8
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 f8c4 	bl	8006ab4 <SPI_WaitOnFlagUntilTimeout>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d007      	beq.n	8006942 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006938:	f043 0220 	orr.w	r2, r3, #32
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	2108      	movs	r1, #8
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 f8c4 	bl	8009e78 <SPI_WaitOnFlagUntilTimeout>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d007      	beq.n	8009d06 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cfc:	f043 0220 	orr.w	r2, r3, #32
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
<<<<<<< Updated upstream
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 f816 	bl	8006974 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e001      	b.n	800696a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8006966:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800696a:	4618      	mov	r0, r3
 800696c:	3730      	adds	r7, #48	; 0x30
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop

08006974 <SPI_CloseTransfer>:
=======
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f000 f816 	bl	8009d38 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d001      	beq.n	8009d2a <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	e001      	b.n	8009d2e <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8009d2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3730      	adds	r7, #48	; 0x30
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop

08009d38 <SPI_CloseTransfer>:
>>>>>>> Stashed changes
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0208 	orr.w	r2, r2, #8
 8006992:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699a      	ldr	r2, [r3, #24]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0210 	orr.w	r2, r2, #16
 80069a2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0201 	bic.w	r2, r2, #1
 80069b2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6919      	ldr	r1, [r3, #16]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	4b3c      	ldr	r3, [pc, #240]	; (8006ab0 <SPI_CloseTransfer+0x13c>)
 80069c0:	400b      	ands	r3, r1
 80069c2:	6113      	str	r3, [r2, #16]
=======
 8009d38:	b480      	push	{r7}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	695b      	ldr	r3, [r3, #20]
 8009d46:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	699a      	ldr	r2, [r3, #24]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f042 0208 	orr.w	r2, r2, #8
 8009d56:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	699a      	ldr	r2, [r3, #24]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f042 0210 	orr.w	r2, r2, #16
 8009d66:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f022 0201 	bic.w	r2, r2, #1
 8009d76:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	6919      	ldr	r1, [r3, #16]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	4b3c      	ldr	r3, [pc, #240]	; (8009e74 <SPI_CloseTransfer+0x13c>)
 8009d84:	400b      	ands	r3, r1
 8009d86:	6113      	str	r3, [r2, #16]
>>>>>>> Stashed changes
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
<<<<<<< Updated upstream
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80069d2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b04      	cmp	r3, #4
 80069de:	d014      	beq.n	8006a0a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00f      	beq.n	8006a0a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	699a      	ldr	r2, [r3, #24]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f042 0220 	orr.w	r2, r2, #32
 8006a08:	619a      	str	r2, [r3, #24]
=======
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	689a      	ldr	r2, [r3, #8]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009d96:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	2b04      	cmp	r3, #4
 8009da2:	d014      	beq.n	8009dce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f003 0320 	and.w	r3, r3, #32
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00f      	beq.n	8009dce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009db4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	699a      	ldr	r2, [r3, #24]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f042 0220 	orr.w	r2, r2, #32
 8009dcc:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
<<<<<<< Updated upstream
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d014      	beq.n	8006a40 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00f      	beq.n	8006a40 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a26:	f043 0204 	orr.w	r2, r3, #4
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699a      	ldr	r2, [r3, #24]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a3e:	619a      	str	r2, [r3, #24]
=======
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	2b03      	cmp	r3, #3
 8009dd8:	d014      	beq.n	8009e04 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00f      	beq.n	8009e04 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dea:	f043 0204 	orr.w	r2, r3, #4
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	699a      	ldr	r2, [r3, #24]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e02:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
<<<<<<< Updated upstream
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00f      	beq.n	8006a6a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a50:	f043 0201 	orr.w	r2, r3, #1
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	699a      	ldr	r2, [r3, #24]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a68:	619a      	str	r2, [r3, #24]
=======
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00f      	beq.n	8009e2e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e14:	f043 0201 	orr.w	r2, r3, #1
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	699a      	ldr	r2, [r3, #24]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e2c:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
<<<<<<< Updated upstream
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00f      	beq.n	8006a94 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a7a:	f043 0208 	orr.w	r2, r3, #8
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a92:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006aa4:	bf00      	nop
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	fffffc90 	.word	0xfffffc90

08006ab4 <SPI_WaitOnFlagUntilTimeout>:
=======
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00f      	beq.n	8009e58 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e3e:	f043 0208 	orr.w	r2, r3, #8
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	699a      	ldr	r2, [r3, #24]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e56:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009e68:	bf00      	nop
 8009e6a:	3714      	adds	r7, #20
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr
 8009e74:	fffffc90 	.word	0xfffffc90

08009e78 <SPI_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006ac4:	e010      	b.n	8006ae8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ac6:	f7fc fa05 	bl	8002ed4 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d803      	bhi.n	8006ade <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006adc:	d102      	bne.n	8006ae4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e00f      	b.n	8006b08 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	695a      	ldr	r2, [r3, #20]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	4013      	ands	r3, r2
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	bf0c      	ite	eq
 8006af8:	2301      	moveq	r3, #1
 8006afa:	2300      	movne	r3, #0
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	461a      	mov	r2, r3
 8006b00:	79fb      	ldrb	r3, [r7, #7]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d0df      	beq.n	8006ac6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <SPI_GetPacketSize>:
=======
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	603b      	str	r3, [r7, #0]
 8009e84:	4613      	mov	r3, r2
 8009e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e88:	e010      	b.n	8009eac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e8a:	f7fb fc8d 	bl	80057a8 <HAL_GetTick>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	69ba      	ldr	r2, [r7, #24]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d803      	bhi.n	8009ea2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea0:	d102      	bne.n	8009ea8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e00f      	b.n	8009ecc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	695a      	ldr	r2, [r3, #20]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	bf0c      	ite	eq
 8009ebc:	2301      	moveq	r3, #1
 8009ebe:	2300      	movne	r3, #0
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	79fb      	ldrb	r3, [r7, #7]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d0df      	beq.n	8009e8a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <SPI_GetPacketSize>:
>>>>>>> Stashed changes
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1c:	095b      	lsrs	r3, r3, #5
 8006b1e:	3301      	adds	r3, #1
 8006b20:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	3301      	adds	r3, #1
 8006b28:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	3307      	adds	r3, #7
 8006b2e:	08db      	lsrs	r3, r3, #3
 8006b30:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	fb02 f303 	mul.w	r3, r2, r3
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <HAL_TIM_Base_Init>:
=======
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ee0:	095b      	lsrs	r3, r3, #5
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	3301      	adds	r3, #1
 8009eec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	3307      	adds	r3, #7
 8009ef2:	08db      	lsrs	r3, r3, #3
 8009ef4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	fb02 f303 	mul.w	r3, r2, r3
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <HAL_TIM_Base_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e049      	b.n	8006bec <HAL_TIM_Base_Init+0xa6>
=======
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b082      	sub	sp, #8
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d101      	bne.n	8009f1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e049      	b.n	8009fb0 <HAL_TIM_Base_Init+0xa6>
>>>>>>> Stashed changes
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d106      	bne.n	8006b72 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d106      	bne.n	8009f36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< Updated upstream
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7fb ffb7 	bl	8002ae0 <HAL_TIM_Base_MspInit>
=======
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f7fb f9c9 	bl	80052c8 <HAL_TIM_Base_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2202      	movs	r2, #2
 8006b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4619      	mov	r1, r3
 8006b84:	4610      	mov	r0, r2
 8006b86:	f000 fbb1 	bl	80072ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_TIM_PWM_Init>:
=======
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2202      	movs	r2, #2
 8009f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	3304      	adds	r3, #4
 8009f46:	4619      	mov	r1, r3
 8009f48:	4610      	mov	r0, r2
 8009f4a:	f000 fbb1 	bl	800a6b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3708      	adds	r7, #8
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <HAL_TIM_PWM_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e049      	b.n	8006c9a <HAL_TIM_PWM_Init+0xa6>
=======
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d101      	bne.n	8009fca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e049      	b.n	800a05e <HAL_TIM_PWM_Init+0xa6>
>>>>>>> Stashed changes
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d106      	bne.n	8006c20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d106      	bne.n	8009fe4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< Updated upstream
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f841 	bl	8006ca2 <HAL_TIM_PWM_MspInit>
=======
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f841 	bl	800a066 <HAL_TIM_PWM_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	4619      	mov	r1, r3
 8006c32:	4610      	mov	r0, r2
 8006c34:	f000 fb5a 	bl	80072ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <HAL_TIM_PWM_MspInit>:
=======
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	f000 fb5a 	bl	800a6b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <HAL_TIM_PWM_MspInit>:
>>>>>>> Stashed changes
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
=======
 800a066:	b480      	push	{r7}
 800a068:	b083      	sub	sp, #12
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8006caa:	bf00      	nop
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
	...

08006cb8 <HAL_TIM_PWM_Start>:
=======
 800a06e:	bf00      	nop
 800a070:	370c      	adds	r7, #12
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
	...

0800a07c <HAL_TIM_PWM_Start>:
>>>>>>> Stashed changes
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< Updated upstream
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
=======
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< Updated upstream
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d109      	bne.n	8006cdc <HAL_TIM_PWM_Start+0x24>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	bf14      	ite	ne
 8006cd4:	2301      	movne	r3, #1
 8006cd6:	2300      	moveq	r3, #0
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	e03c      	b.n	8006d56 <HAL_TIM_PWM_Start+0x9e>
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	d109      	bne.n	8006cf6 <HAL_TIM_PWM_Start+0x3e>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	bf14      	ite	ne
 8006cee:	2301      	movne	r3, #1
 8006cf0:	2300      	moveq	r3, #0
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	e02f      	b.n	8006d56 <HAL_TIM_PWM_Start+0x9e>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d109      	bne.n	8006d10 <HAL_TIM_PWM_Start+0x58>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	bf14      	ite	ne
 8006d08:	2301      	movne	r3, #1
 8006d0a:	2300      	moveq	r3, #0
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	e022      	b.n	8006d56 <HAL_TIM_PWM_Start+0x9e>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2b0c      	cmp	r3, #12
 8006d14:	d109      	bne.n	8006d2a <HAL_TIM_PWM_Start+0x72>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	bf14      	ite	ne
 8006d22:	2301      	movne	r3, #1
 8006d24:	2300      	moveq	r3, #0
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	e015      	b.n	8006d56 <HAL_TIM_PWM_Start+0x9e>
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b10      	cmp	r3, #16
 8006d2e:	d109      	bne.n	8006d44 <HAL_TIM_PWM_Start+0x8c>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	bf14      	ite	ne
 8006d3c:	2301      	movne	r3, #1
 8006d3e:	2300      	moveq	r3, #0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	e008      	b.n	8006d56 <HAL_TIM_PWM_Start+0x9e>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	bf14      	ite	ne
 8006d50:	2301      	movne	r3, #1
 8006d52:	2300      	moveq	r3, #0
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e0a1      	b.n	8006ea2 <HAL_TIM_PWM_Start+0x1ea>
=======
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d109      	bne.n	800a0a0 <HAL_TIM_PWM_Start+0x24>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2b01      	cmp	r3, #1
 800a096:	bf14      	ite	ne
 800a098:	2301      	movne	r3, #1
 800a09a:	2300      	moveq	r3, #0
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	e03c      	b.n	800a11a <HAL_TIM_PWM_Start+0x9e>
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2b04      	cmp	r3, #4
 800a0a4:	d109      	bne.n	800a0ba <HAL_TIM_PWM_Start+0x3e>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	bf14      	ite	ne
 800a0b2:	2301      	movne	r3, #1
 800a0b4:	2300      	moveq	r3, #0
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	e02f      	b.n	800a11a <HAL_TIM_PWM_Start+0x9e>
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2b08      	cmp	r3, #8
 800a0be:	d109      	bne.n	800a0d4 <HAL_TIM_PWM_Start+0x58>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	bf14      	ite	ne
 800a0cc:	2301      	movne	r3, #1
 800a0ce:	2300      	moveq	r3, #0
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	e022      	b.n	800a11a <HAL_TIM_PWM_Start+0x9e>
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	2b0c      	cmp	r3, #12
 800a0d8:	d109      	bne.n	800a0ee <HAL_TIM_PWM_Start+0x72>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	bf14      	ite	ne
 800a0e6:	2301      	movne	r3, #1
 800a0e8:	2300      	moveq	r3, #0
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	e015      	b.n	800a11a <HAL_TIM_PWM_Start+0x9e>
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	2b10      	cmp	r3, #16
 800a0f2:	d109      	bne.n	800a108 <HAL_TIM_PWM_Start+0x8c>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	bf14      	ite	ne
 800a100:	2301      	movne	r3, #1
 800a102:	2300      	moveq	r3, #0
 800a104:	b2db      	uxtb	r3, r3
 800a106:	e008      	b.n	800a11a <HAL_TIM_PWM_Start+0x9e>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b01      	cmp	r3, #1
 800a112:	bf14      	ite	ne
 800a114:	2301      	movne	r3, #1
 800a116:	2300      	moveq	r3, #0
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e0a1      	b.n	800a266 <HAL_TIM_PWM_Start+0x1ea>
>>>>>>> Stashed changes
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< Updated upstream
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d104      	bne.n	8006d6e <HAL_TIM_PWM_Start+0xb6>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d6c:	e023      	b.n	8006db6 <HAL_TIM_PWM_Start+0xfe>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d104      	bne.n	8006d7e <HAL_TIM_PWM_Start+0xc6>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d7c:	e01b      	b.n	8006db6 <HAL_TIM_PWM_Start+0xfe>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d104      	bne.n	8006d8e <HAL_TIM_PWM_Start+0xd6>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d8c:	e013      	b.n	8006db6 <HAL_TIM_PWM_Start+0xfe>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b0c      	cmp	r3, #12
 8006d92:	d104      	bne.n	8006d9e <HAL_TIM_PWM_Start+0xe6>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d9c:	e00b      	b.n	8006db6 <HAL_TIM_PWM_Start+0xfe>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b10      	cmp	r3, #16
 8006da2:	d104      	bne.n	8006dae <HAL_TIM_PWM_Start+0xf6>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dac:	e003      	b.n	8006db6 <HAL_TIM_PWM_Start+0xfe>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2202      	movs	r2, #2
 8006db2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fea2 	bl	8007b08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a38      	ldr	r2, [pc, #224]	; (8006eac <HAL_TIM_PWM_Start+0x1f4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d013      	beq.n	8006df6 <HAL_TIM_PWM_Start+0x13e>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a37      	ldr	r2, [pc, #220]	; (8006eb0 <HAL_TIM_PWM_Start+0x1f8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d00e      	beq.n	8006df6 <HAL_TIM_PWM_Start+0x13e>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a35      	ldr	r2, [pc, #212]	; (8006eb4 <HAL_TIM_PWM_Start+0x1fc>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d009      	beq.n	8006df6 <HAL_TIM_PWM_Start+0x13e>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a34      	ldr	r2, [pc, #208]	; (8006eb8 <HAL_TIM_PWM_Start+0x200>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d004      	beq.n	8006df6 <HAL_TIM_PWM_Start+0x13e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a32      	ldr	r2, [pc, #200]	; (8006ebc <HAL_TIM_PWM_Start+0x204>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d101      	bne.n	8006dfa <HAL_TIM_PWM_Start+0x142>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e000      	b.n	8006dfc <HAL_TIM_PWM_Start+0x144>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d007      	beq.n	8006e10 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e0e:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d104      	bne.n	800a132 <HAL_TIM_PWM_Start+0xb6>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a130:	e023      	b.n	800a17a <HAL_TIM_PWM_Start+0xfe>
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	2b04      	cmp	r3, #4
 800a136:	d104      	bne.n	800a142 <HAL_TIM_PWM_Start+0xc6>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2202      	movs	r2, #2
 800a13c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a140:	e01b      	b.n	800a17a <HAL_TIM_PWM_Start+0xfe>
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b08      	cmp	r3, #8
 800a146:	d104      	bne.n	800a152 <HAL_TIM_PWM_Start+0xd6>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2202      	movs	r2, #2
 800a14c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a150:	e013      	b.n	800a17a <HAL_TIM_PWM_Start+0xfe>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b0c      	cmp	r3, #12
 800a156:	d104      	bne.n	800a162 <HAL_TIM_PWM_Start+0xe6>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2202      	movs	r2, #2
 800a15c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a160:	e00b      	b.n	800a17a <HAL_TIM_PWM_Start+0xfe>
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b10      	cmp	r3, #16
 800a166:	d104      	bne.n	800a172 <HAL_TIM_PWM_Start+0xf6>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2202      	movs	r2, #2
 800a16c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a170:	e003      	b.n	800a17a <HAL_TIM_PWM_Start+0xfe>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2202      	movs	r2, #2
 800a176:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2201      	movs	r2, #1
 800a180:	6839      	ldr	r1, [r7, #0]
 800a182:	4618      	mov	r0, r3
 800a184:	f000 fea2 	bl	800aecc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a38      	ldr	r2, [pc, #224]	; (800a270 <HAL_TIM_PWM_Start+0x1f4>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d013      	beq.n	800a1ba <HAL_TIM_PWM_Start+0x13e>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a37      	ldr	r2, [pc, #220]	; (800a274 <HAL_TIM_PWM_Start+0x1f8>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d00e      	beq.n	800a1ba <HAL_TIM_PWM_Start+0x13e>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a35      	ldr	r2, [pc, #212]	; (800a278 <HAL_TIM_PWM_Start+0x1fc>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d009      	beq.n	800a1ba <HAL_TIM_PWM_Start+0x13e>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a34      	ldr	r2, [pc, #208]	; (800a27c <HAL_TIM_PWM_Start+0x200>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d004      	beq.n	800a1ba <HAL_TIM_PWM_Start+0x13e>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a32      	ldr	r2, [pc, #200]	; (800a280 <HAL_TIM_PWM_Start+0x204>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d101      	bne.n	800a1be <HAL_TIM_PWM_Start+0x142>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e000      	b.n	800a1c0 <HAL_TIM_PWM_Start+0x144>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d007      	beq.n	800a1d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1d2:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< Updated upstream
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a25      	ldr	r2, [pc, #148]	; (8006eac <HAL_TIM_PWM_Start+0x1f4>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d022      	beq.n	8006e60 <HAL_TIM_PWM_Start+0x1a8>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e22:	d01d      	beq.n	8006e60 <HAL_TIM_PWM_Start+0x1a8>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a25      	ldr	r2, [pc, #148]	; (8006ec0 <HAL_TIM_PWM_Start+0x208>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d018      	beq.n	8006e60 <HAL_TIM_PWM_Start+0x1a8>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a24      	ldr	r2, [pc, #144]	; (8006ec4 <HAL_TIM_PWM_Start+0x20c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d013      	beq.n	8006e60 <HAL_TIM_PWM_Start+0x1a8>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a22      	ldr	r2, [pc, #136]	; (8006ec8 <HAL_TIM_PWM_Start+0x210>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00e      	beq.n	8006e60 <HAL_TIM_PWM_Start+0x1a8>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a1a      	ldr	r2, [pc, #104]	; (8006eb0 <HAL_TIM_PWM_Start+0x1f8>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d009      	beq.n	8006e60 <HAL_TIM_PWM_Start+0x1a8>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a1e      	ldr	r2, [pc, #120]	; (8006ecc <HAL_TIM_PWM_Start+0x214>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <HAL_TIM_PWM_Start+0x1a8>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a16      	ldr	r2, [pc, #88]	; (8006eb4 <HAL_TIM_PWM_Start+0x1fc>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d115      	bne.n	8006e8c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	4b1a      	ldr	r3, [pc, #104]	; (8006ed0 <HAL_TIM_PWM_Start+0x218>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b06      	cmp	r3, #6
 8006e70:	d015      	beq.n	8006e9e <HAL_TIM_PWM_Start+0x1e6>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e78:	d011      	beq.n	8006e9e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f042 0201 	orr.w	r2, r2, #1
 8006e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e8a:	e008      	b.n	8006e9e <HAL_TIM_PWM_Start+0x1e6>
=======
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a25      	ldr	r2, [pc, #148]	; (800a270 <HAL_TIM_PWM_Start+0x1f4>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d022      	beq.n	800a224 <HAL_TIM_PWM_Start+0x1a8>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1e6:	d01d      	beq.n	800a224 <HAL_TIM_PWM_Start+0x1a8>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a25      	ldr	r2, [pc, #148]	; (800a284 <HAL_TIM_PWM_Start+0x208>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d018      	beq.n	800a224 <HAL_TIM_PWM_Start+0x1a8>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a24      	ldr	r2, [pc, #144]	; (800a288 <HAL_TIM_PWM_Start+0x20c>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d013      	beq.n	800a224 <HAL_TIM_PWM_Start+0x1a8>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a22      	ldr	r2, [pc, #136]	; (800a28c <HAL_TIM_PWM_Start+0x210>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d00e      	beq.n	800a224 <HAL_TIM_PWM_Start+0x1a8>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a1a      	ldr	r2, [pc, #104]	; (800a274 <HAL_TIM_PWM_Start+0x1f8>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d009      	beq.n	800a224 <HAL_TIM_PWM_Start+0x1a8>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a1e      	ldr	r2, [pc, #120]	; (800a290 <HAL_TIM_PWM_Start+0x214>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d004      	beq.n	800a224 <HAL_TIM_PWM_Start+0x1a8>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a16      	ldr	r2, [pc, #88]	; (800a278 <HAL_TIM_PWM_Start+0x1fc>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d115      	bne.n	800a250 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689a      	ldr	r2, [r3, #8]
 800a22a:	4b1a      	ldr	r3, [pc, #104]	; (800a294 <HAL_TIM_PWM_Start+0x218>)
 800a22c:	4013      	ands	r3, r2
 800a22e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2b06      	cmp	r3, #6
 800a234:	d015      	beq.n	800a262 <HAL_TIM_PWM_Start+0x1e6>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a23c:	d011      	beq.n	800a262 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f042 0201 	orr.w	r2, r2, #1
 800a24c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a24e:	e008      	b.n	800a262 <HAL_TIM_PWM_Start+0x1e6>
>>>>>>> Stashed changes
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< Updated upstream
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0201 	orr.w	r2, r2, #1
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	e000      	b.n	8006ea0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e9e:	bf00      	nop
=======
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f042 0201 	orr.w	r2, r2, #1
 800a25e:	601a      	str	r2, [r3, #0]
 800a260:	e000      	b.n	800a264 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a262:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	40010000 	.word	0x40010000
 8006eb0:	40010400 	.word	0x40010400
 8006eb4:	40014000 	.word	0x40014000
 8006eb8:	40014400 	.word	0x40014400
 8006ebc:	40014800 	.word	0x40014800
 8006ec0:	40000400 	.word	0x40000400
 8006ec4:	40000800 	.word	0x40000800
 8006ec8:	40000c00 	.word	0x40000c00
 8006ecc:	40001800 	.word	0x40001800
 8006ed0:	00010007 	.word	0x00010007

08006ed4 <HAL_TIM_PWM_ConfigChannel>:
=======
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	40010000 	.word	0x40010000
 800a274:	40010400 	.word	0x40010400
 800a278:	40014000 	.word	0x40014000
 800a27c:	40014400 	.word	0x40014400
 800a280:	40014800 	.word	0x40014800
 800a284:	40000400 	.word	0x40000400
 800a288:	40000800 	.word	0x40000800
 800a28c:	40000c00 	.word	0x40000c00
 800a290:	40001800 	.word	0x40001800
 800a294:	00010007 	.word	0x00010007

0800a298 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> Stashed changes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< Updated upstream
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	75fb      	strb	r3, [r7, #23]
=======
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e0ff      	b.n	80070f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b14      	cmp	r3, #20
 8006efe:	f200 80f0 	bhi.w	80070e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f02:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f08:	08006f5d 	.word	0x08006f5d
 8006f0c:	080070e3 	.word	0x080070e3
 8006f10:	080070e3 	.word	0x080070e3
 8006f14:	080070e3 	.word	0x080070e3
 8006f18:	08006f9d 	.word	0x08006f9d
 8006f1c:	080070e3 	.word	0x080070e3
 8006f20:	080070e3 	.word	0x080070e3
 8006f24:	080070e3 	.word	0x080070e3
 8006f28:	08006fdf 	.word	0x08006fdf
 8006f2c:	080070e3 	.word	0x080070e3
 8006f30:	080070e3 	.word	0x080070e3
 8006f34:	080070e3 	.word	0x080070e3
 8006f38:	0800701f 	.word	0x0800701f
 8006f3c:	080070e3 	.word	0x080070e3
 8006f40:	080070e3 	.word	0x080070e3
 8006f44:	080070e3 	.word	0x080070e3
 8006f48:	08007061 	.word	0x08007061
 8006f4c:	080070e3 	.word	0x080070e3
 8006f50:	080070e3 	.word	0x080070e3
 8006f54:	080070e3 	.word	0x080070e3
 8006f58:	080070a1 	.word	0x080070a1
=======
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d101      	bne.n	800a2b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	e0ff      	b.n	800a4b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b14      	cmp	r3, #20
 800a2c2:	f200 80f0 	bhi.w	800a4a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a2c6:	a201      	add	r2, pc, #4	; (adr r2, 800a2cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2cc:	0800a321 	.word	0x0800a321
 800a2d0:	0800a4a7 	.word	0x0800a4a7
 800a2d4:	0800a4a7 	.word	0x0800a4a7
 800a2d8:	0800a4a7 	.word	0x0800a4a7
 800a2dc:	0800a361 	.word	0x0800a361
 800a2e0:	0800a4a7 	.word	0x0800a4a7
 800a2e4:	0800a4a7 	.word	0x0800a4a7
 800a2e8:	0800a4a7 	.word	0x0800a4a7
 800a2ec:	0800a3a3 	.word	0x0800a3a3
 800a2f0:	0800a4a7 	.word	0x0800a4a7
 800a2f4:	0800a4a7 	.word	0x0800a4a7
 800a2f8:	0800a4a7 	.word	0x0800a4a7
 800a2fc:	0800a3e3 	.word	0x0800a3e3
 800a300:	0800a4a7 	.word	0x0800a4a7
 800a304:	0800a4a7 	.word	0x0800a4a7
 800a308:	0800a4a7 	.word	0x0800a4a7
 800a30c:	0800a425 	.word	0x0800a425
 800a310:	0800a4a7 	.word	0x0800a4a7
 800a314:	0800a4a7 	.word	0x0800a4a7
 800a318:	0800a4a7 	.word	0x0800a4a7
 800a31c:	0800a465 	.word	0x0800a465
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68b9      	ldr	r1, [r7, #8]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fa5c 	bl	8007420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699a      	ldr	r2, [r3, #24]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0208 	orr.w	r2, r2, #8
 8006f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699a      	ldr	r2, [r3, #24]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 0204 	bic.w	r2, r2, #4
 8006f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6999      	ldr	r1, [r3, #24]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	619a      	str	r2, [r3, #24]
      break;
 8006f9a:	e0a5      	b.n	80070e8 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	68b9      	ldr	r1, [r7, #8]
 800a326:	4618      	mov	r0, r3
 800a328:	f000 fa5c 	bl	800a7e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	699a      	ldr	r2, [r3, #24]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f042 0208 	orr.w	r2, r2, #8
 800a33a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	699a      	ldr	r2, [r3, #24]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f022 0204 	bic.w	r2, r2, #4
 800a34a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6999      	ldr	r1, [r3, #24]
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	691a      	ldr	r2, [r3, #16]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	619a      	str	r2, [r3, #24]
      break;
 800a35e:	e0a5      	b.n	800a4ac <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 facc 	bl	8007540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699a      	ldr	r2, [r3, #24]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6999      	ldr	r1, [r3, #24]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	021a      	lsls	r2, r3, #8
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	619a      	str	r2, [r3, #24]
      break;
 8006fdc:	e084      	b.n	80070e8 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68b9      	ldr	r1, [r7, #8]
 800a366:	4618      	mov	r0, r3
 800a368:	f000 facc 	bl	800a904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	699a      	ldr	r2, [r3, #24]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a37a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	699a      	ldr	r2, [r3, #24]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a38a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6999      	ldr	r1, [r3, #24]
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	021a      	lsls	r2, r3, #8
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	430a      	orrs	r2, r1
 800a39e:	619a      	str	r2, [r3, #24]
      break;
 800a3a0:	e084      	b.n	800a4ac <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 fb35 	bl	8007654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	69da      	ldr	r2, [r3, #28]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f042 0208 	orr.w	r2, r2, #8
 8006ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69da      	ldr	r2, [r3, #28]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f022 0204 	bic.w	r2, r2, #4
 8007008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69d9      	ldr	r1, [r3, #28]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	691a      	ldr	r2, [r3, #16]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	61da      	str	r2, [r3, #28]
      break;
 800701c:	e064      	b.n	80070e8 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68b9      	ldr	r1, [r7, #8]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 fb35 	bl	800aa18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	69da      	ldr	r2, [r3, #28]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f042 0208 	orr.w	r2, r2, #8
 800a3bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	69da      	ldr	r2, [r3, #28]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f022 0204 	bic.w	r2, r2, #4
 800a3cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	69d9      	ldr	r1, [r3, #28]
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	691a      	ldr	r2, [r3, #16]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	430a      	orrs	r2, r1
 800a3de:	61da      	str	r2, [r3, #28]
      break;
 800a3e0:	e064      	b.n	800a4ac <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	4618      	mov	r0, r3
 8007026:	f000 fb9d 	bl	8007764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69da      	ldr	r2, [r3, #28]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69da      	ldr	r2, [r3, #28]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69d9      	ldr	r1, [r3, #28]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	021a      	lsls	r2, r3, #8
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	61da      	str	r2, [r3, #28]
      break;
 800705e:	e043      	b.n	80070e8 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68b9      	ldr	r1, [r7, #8]
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 fb9d 	bl	800ab28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	69da      	ldr	r2, [r3, #28]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	69da      	ldr	r2, [r3, #28]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a40c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	69d9      	ldr	r1, [r3, #28]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	021a      	lsls	r2, r3, #8
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	61da      	str	r2, [r3, #28]
      break;
 800a422:	e043      	b.n	800a4ac <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68b9      	ldr	r1, [r7, #8]
 8007066:	4618      	mov	r0, r3
 8007068:	f000 fbe6 	bl	8007838 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0208 	orr.w	r2, r2, #8
 800707a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0204 	bic.w	r2, r2, #4
 800708a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800709e:	e023      	b.n	80070e8 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68b9      	ldr	r1, [r7, #8]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 fbe6 	bl	800abfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f042 0208 	orr.w	r2, r2, #8
 800a43e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f022 0204 	bic.w	r2, r2, #4
 800a44e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	691a      	ldr	r2, [r3, #16]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	430a      	orrs	r2, r1
 800a460:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a462:	e023      	b.n	800a4ac <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68b9      	ldr	r1, [r7, #8]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 fc2a 	bl	8007900 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	021a      	lsls	r2, r3, #8
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070e0:	e002      	b.n	80070e8 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	68b9      	ldr	r1, [r7, #8]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f000 fc2a 	bl	800acc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a47e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a48e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	021a      	lsls	r2, r3, #8
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	430a      	orrs	r2, r1
 800a4a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a4a4:	e002      	b.n	800a4ac <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    }

    default:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 80070e2:	2301      	movs	r3, #1
 80070e4:	75fb      	strb	r3, [r7, #23]
      break;
 80070e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop

080070fc <HAL_TIM_ConfigClockSource>:
=======
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	75fb      	strb	r3, [r7, #23]
      break;
 800a4aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a4b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3718      	adds	r7, #24
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop

0800a4c0 <HAL_TIM_ConfigClockSource>:
>>>>>>> Stashed changes
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< Updated upstream
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	73fb      	strb	r3, [r7, #15]
=======
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007110:	2b01      	cmp	r3, #1
 8007112:	d101      	bne.n	8007118 <HAL_TIM_ConfigClockSource+0x1c>
 8007114:	2302      	movs	r3, #2
 8007116:	e0dc      	b.n	80072d2 <HAL_TIM_ConfigClockSource+0x1d6>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d101      	bne.n	800a4dc <HAL_TIM_ConfigClockSource+0x1c>
 800a4d8:	2302      	movs	r3, #2
 800a4da:	e0dc      	b.n	800a696 <HAL_TIM_ConfigClockSource+0x1d6>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2202      	movs	r2, #2
 800a4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< Updated upstream
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	4b6a      	ldr	r3, [pc, #424]	; (80072dc <HAL_TIM_ConfigClockSource+0x1e0>)
 8007134:	4013      	ands	r3, r2
 8007136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800713e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a64      	ldr	r2, [pc, #400]	; (80072e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800714e:	4293      	cmp	r3, r2
 8007150:	f000 80a9 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007154:	4a62      	ldr	r2, [pc, #392]	; (80072e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007156:	4293      	cmp	r3, r2
 8007158:	f200 80ae 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800715c:	4a61      	ldr	r2, [pc, #388]	; (80072e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800715e:	4293      	cmp	r3, r2
 8007160:	f000 80a1 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007164:	4a5f      	ldr	r2, [pc, #380]	; (80072e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	f200 80a6 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800716c:	4a5e      	ldr	r2, [pc, #376]	; (80072e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800716e:	4293      	cmp	r3, r2
 8007170:	f000 8099 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007174:	4a5c      	ldr	r2, [pc, #368]	; (80072e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007176:	4293      	cmp	r3, r2
 8007178:	f200 809e 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800717c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007180:	f000 8091 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007184:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007188:	f200 8096 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800718c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007190:	f000 8089 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007198:	f200 808e 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800719c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071a0:	d03e      	beq.n	8007220 <HAL_TIM_ConfigClockSource+0x124>
 80071a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071a6:	f200 8087 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80071aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ae:	f000 8086 	beq.w	80072be <HAL_TIM_ConfigClockSource+0x1c2>
 80071b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b6:	d87f      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80071b8:	2b70      	cmp	r3, #112	; 0x70
 80071ba:	d01a      	beq.n	80071f2 <HAL_TIM_ConfigClockSource+0xf6>
 80071bc:	2b70      	cmp	r3, #112	; 0x70
 80071be:	d87b      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80071c0:	2b60      	cmp	r3, #96	; 0x60
 80071c2:	d050      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x16a>
 80071c4:	2b60      	cmp	r3, #96	; 0x60
 80071c6:	d877      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80071c8:	2b50      	cmp	r3, #80	; 0x50
 80071ca:	d03c      	beq.n	8007246 <HAL_TIM_ConfigClockSource+0x14a>
 80071cc:	2b50      	cmp	r3, #80	; 0x50
 80071ce:	d873      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80071d0:	2b40      	cmp	r3, #64	; 0x40
 80071d2:	d058      	beq.n	8007286 <HAL_TIM_ConfigClockSource+0x18a>
 80071d4:	2b40      	cmp	r3, #64	; 0x40
 80071d6:	d86f      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80071d8:	2b30      	cmp	r3, #48	; 0x30
 80071da:	d064      	beq.n	80072a6 <HAL_TIM_ConfigClockSource+0x1aa>
 80071dc:	2b30      	cmp	r3, #48	; 0x30
 80071de:	d86b      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80071e0:	2b20      	cmp	r3, #32
 80071e2:	d060      	beq.n	80072a6 <HAL_TIM_ConfigClockSource+0x1aa>
 80071e4:	2b20      	cmp	r3, #32
 80071e6:	d867      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d05c      	beq.n	80072a6 <HAL_TIM_ConfigClockSource+0x1aa>
 80071ec:	2b10      	cmp	r3, #16
 80071ee:	d05a      	beq.n	80072a6 <HAL_TIM_ConfigClockSource+0x1aa>
 80071f0:	e062      	b.n	80072b8 <HAL_TIM_ConfigClockSource+0x1bc>
=======
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a4f4:	68ba      	ldr	r2, [r7, #8]
 800a4f6:	4b6a      	ldr	r3, [pc, #424]	; (800a6a0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a64      	ldr	r2, [pc, #400]	; (800a6a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a512:	4293      	cmp	r3, r2
 800a514:	f000 80a9 	beq.w	800a66a <HAL_TIM_ConfigClockSource+0x1aa>
 800a518:	4a62      	ldr	r2, [pc, #392]	; (800a6a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	f200 80ae 	bhi.w	800a67c <HAL_TIM_ConfigClockSource+0x1bc>
 800a520:	4a61      	ldr	r2, [pc, #388]	; (800a6a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a522:	4293      	cmp	r3, r2
 800a524:	f000 80a1 	beq.w	800a66a <HAL_TIM_ConfigClockSource+0x1aa>
 800a528:	4a5f      	ldr	r2, [pc, #380]	; (800a6a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	f200 80a6 	bhi.w	800a67c <HAL_TIM_ConfigClockSource+0x1bc>
 800a530:	4a5e      	ldr	r2, [pc, #376]	; (800a6ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800a532:	4293      	cmp	r3, r2
 800a534:	f000 8099 	beq.w	800a66a <HAL_TIM_ConfigClockSource+0x1aa>
 800a538:	4a5c      	ldr	r2, [pc, #368]	; (800a6ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	f200 809e 	bhi.w	800a67c <HAL_TIM_ConfigClockSource+0x1bc>
 800a540:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a544:	f000 8091 	beq.w	800a66a <HAL_TIM_ConfigClockSource+0x1aa>
 800a548:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a54c:	f200 8096 	bhi.w	800a67c <HAL_TIM_ConfigClockSource+0x1bc>
 800a550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a554:	f000 8089 	beq.w	800a66a <HAL_TIM_ConfigClockSource+0x1aa>
 800a558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a55c:	f200 808e 	bhi.w	800a67c <HAL_TIM_ConfigClockSource+0x1bc>
 800a560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a564:	d03e      	beq.n	800a5e4 <HAL_TIM_ConfigClockSource+0x124>
 800a566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a56a:	f200 8087 	bhi.w	800a67c <HAL_TIM_ConfigClockSource+0x1bc>
 800a56e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a572:	f000 8086 	beq.w	800a682 <HAL_TIM_ConfigClockSource+0x1c2>
 800a576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a57a:	d87f      	bhi.n	800a67c <HAL_TIM_ConfigClockSource+0x1bc>
 800a57c:	2b70      	cmp	r3, #112	; 0x70
 800a57e:	d01a      	beq.n	800a5b6 <HAL_TIM_ConfigClockSource+0xf6>
 800a580:	2b70      	cmp	r3, #112	; 0x70
 800a582:	d87b      	bhi.n	800a67c <HAL_TIM_ConfigClockSource+0x1bc>
 800a584:	2b60      	cmp	r3, #96	; 0x60
 800a586:	d050      	beq.n	800a62a <HAL_TIM_ConfigClockSource+0x16a>
 800a588:	2b60      	cmp	r3, #96	; 0x60
 800a58a:	d877      	bhi.n	800a67c <HAL_TIM_ConfigClockSource+0x1bc>
 800a58c:	2b50      	cmp	r3, #80	; 0x50
 800a58e:	d03c      	beq.n	800a60a <HAL_TIM_ConfigClockSource+0x14a>
 800a590:	2b50      	cmp	r3, #80	; 0x50
 800a592:	d873      	bhi.n	800a67c <HAL_TIM_ConfigClockSource+0x1bc>
 800a594:	2b40      	cmp	r3, #64	; 0x40
 800a596:	d058      	beq.n	800a64a <HAL_TIM_ConfigClockSource+0x18a>
 800a598:	2b40      	cmp	r3, #64	; 0x40
 800a59a:	d86f      	bhi.n	800a67c <HAL_TIM_ConfigClockSource+0x1bc>
 800a59c:	2b30      	cmp	r3, #48	; 0x30
 800a59e:	d064      	beq.n	800a66a <HAL_TIM_ConfigClockSource+0x1aa>
 800a5a0:	2b30      	cmp	r3, #48	; 0x30
 800a5a2:	d86b      	bhi.n	800a67c <HAL_TIM_ConfigClockSource+0x1bc>
 800a5a4:	2b20      	cmp	r3, #32
 800a5a6:	d060      	beq.n	800a66a <HAL_TIM_ConfigClockSource+0x1aa>
 800a5a8:	2b20      	cmp	r3, #32
 800a5aa:	d867      	bhi.n	800a67c <HAL_TIM_ConfigClockSource+0x1bc>
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d05c      	beq.n	800a66a <HAL_TIM_ConfigClockSource+0x1aa>
 800a5b0:	2b10      	cmp	r3, #16
 800a5b2:	d05a      	beq.n	800a66a <HAL_TIM_ConfigClockSource+0x1aa>
 800a5b4:	e062      	b.n	800a67c <HAL_TIM_ConfigClockSource+0x1bc>
>>>>>>> Stashed changes
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< Updated upstream
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6818      	ldr	r0, [r3, #0]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	6899      	ldr	r1, [r3, #8]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f000 fc61 	bl	8007ac8 <TIM_ETR_SetConfig>
=======
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6818      	ldr	r0, [r3, #0]
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	6899      	ldr	r1, [r3, #8]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	685a      	ldr	r2, [r3, #4]
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	f000 fc61 	bl	800ae8c <TIM_ETR_SetConfig>
>>>>>>> Stashed changes
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
<<<<<<< Updated upstream
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	609a      	str	r2, [r3, #8]
      break;
 800721e:	e04f      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1c4>
=======
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a5d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68ba      	ldr	r2, [r7, #8]
 800a5e0:	609a      	str	r2, [r3, #8]
      break;
 800a5e2:	e04f      	b.n	800a684 <HAL_TIM_ConfigClockSource+0x1c4>
>>>>>>> Stashed changes
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< Updated upstream
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6818      	ldr	r0, [r3, #0]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	6899      	ldr	r1, [r3, #8]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f000 fc4a 	bl	8007ac8 <TIM_ETR_SetConfig>
=======
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6818      	ldr	r0, [r3, #0]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	6899      	ldr	r1, [r3, #8]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	685a      	ldr	r2, [r3, #4]
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	f000 fc4a 	bl	800ae8c <TIM_ETR_SetConfig>
>>>>>>> Stashed changes
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
<<<<<<< Updated upstream
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007242:	609a      	str	r2, [r3, #8]
      break;
 8007244:	e03c      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1c4>
=======
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	689a      	ldr	r2, [r3, #8]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a606:	609a      	str	r2, [r3, #8]
      break;
 800a608:	e03c      	b.n	800a684 <HAL_TIM_ConfigClockSource+0x1c4>
>>>>>>> Stashed changes

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6818      	ldr	r0, [r3, #0]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6859      	ldr	r1, [r3, #4]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	461a      	mov	r2, r3
 8007254:	f000 fbba 	bl	80079cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2150      	movs	r1, #80	; 0x50
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fc14 	bl	8007a8c <TIM_ITRx_SetConfig>
      break;
 8007264:	e02c      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1c4>
=======
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6818      	ldr	r0, [r3, #0]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	6859      	ldr	r1, [r3, #4]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	461a      	mov	r2, r3
 800a618:	f000 fbba 	bl	800ad90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2150      	movs	r1, #80	; 0x50
 800a622:	4618      	mov	r0, r3
 800a624:	f000 fc14 	bl	800ae50 <TIM_ITRx_SetConfig>
      break;
 800a628:	e02c      	b.n	800a684 <HAL_TIM_ConfigClockSource+0x1c4>
>>>>>>> Stashed changes

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	6859      	ldr	r1, [r3, #4]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	461a      	mov	r2, r3
 8007274:	f000 fbd9 	bl	8007a2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2160      	movs	r1, #96	; 0x60
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fc04 	bl	8007a8c <TIM_ITRx_SetConfig>
      break;
 8007284:	e01c      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1c4>
=======
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6818      	ldr	r0, [r3, #0]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	6859      	ldr	r1, [r3, #4]
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	461a      	mov	r2, r3
 800a638:	f000 fbd9 	bl	800adee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2160      	movs	r1, #96	; 0x60
 800a642:	4618      	mov	r0, r3
 800a644:	f000 fc04 	bl	800ae50 <TIM_ITRx_SetConfig>
      break;
 800a648:	e01c      	b.n	800a684 <HAL_TIM_ConfigClockSource+0x1c4>
>>>>>>> Stashed changes

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6818      	ldr	r0, [r3, #0]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	6859      	ldr	r1, [r3, #4]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	461a      	mov	r2, r3
 8007294:	f000 fb9a 	bl	80079cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2140      	movs	r1, #64	; 0x40
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 fbf4 	bl	8007a8c <TIM_ITRx_SetConfig>
      break;
 80072a4:	e00c      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1c4>
=======
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6818      	ldr	r0, [r3, #0]
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	6859      	ldr	r1, [r3, #4]
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	461a      	mov	r2, r3
 800a658:	f000 fb9a 	bl	800ad90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2140      	movs	r1, #64	; 0x40
 800a662:	4618      	mov	r0, r3
 800a664:	f000 fbf4 	bl	800ae50 <TIM_ITRx_SetConfig>
      break;
 800a668:	e00c      	b.n	800a684 <HAL_TIM_ConfigClockSource+0x1c4>
>>>>>>> Stashed changes
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< Updated upstream
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4619      	mov	r1, r3
 80072b0:	4610      	mov	r0, r2
 80072b2:	f000 fbeb 	bl	8007a8c <TIM_ITRx_SetConfig>
      break;
 80072b6:	e003      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1c4>
=======
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4619      	mov	r1, r3
 800a674:	4610      	mov	r0, r2
 800a676:	f000 fbeb 	bl	800ae50 <TIM_ITRx_SetConfig>
      break;
 800a67a:	e003      	b.n	800a684 <HAL_TIM_ConfigClockSource+0x1c4>
>>>>>>> Stashed changes
    }

    default:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 80072b8:	2301      	movs	r3, #1
 80072ba:	73fb      	strb	r3, [r7, #15]
      break;
 80072bc:	e000      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80072be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	ffceff88 	.word	0xffceff88
 80072e0:	00100040 	.word	0x00100040
 80072e4:	00100030 	.word	0x00100030
 80072e8:	00100020 	.word	0x00100020

080072ec <TIM_Base_SetConfig>:
=======
 800a67c:	2301      	movs	r3, #1
 800a67e:	73fb      	strb	r3, [r7, #15]
      break;
 800a680:	e000      	b.n	800a684 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a694:	7bfb      	ldrb	r3, [r7, #15]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	ffceff88 	.word	0xffceff88
 800a6a4:	00100040 	.word	0x00100040
 800a6a8:	00100030 	.word	0x00100030
 800a6ac:	00100020 	.word	0x00100020

0800a6b0 <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a40      	ldr	r2, [pc, #256]	; (8007400 <TIM_Base_SetConfig+0x114>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d013      	beq.n	800732c <TIM_Base_SetConfig+0x40>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800730a:	d00f      	beq.n	800732c <TIM_Base_SetConfig+0x40>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a3d      	ldr	r2, [pc, #244]	; (8007404 <TIM_Base_SetConfig+0x118>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00b      	beq.n	800732c <TIM_Base_SetConfig+0x40>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a3c      	ldr	r2, [pc, #240]	; (8007408 <TIM_Base_SetConfig+0x11c>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d007      	beq.n	800732c <TIM_Base_SetConfig+0x40>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a3b      	ldr	r2, [pc, #236]	; (800740c <TIM_Base_SetConfig+0x120>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d003      	beq.n	800732c <TIM_Base_SetConfig+0x40>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a3a      	ldr	r2, [pc, #232]	; (8007410 <TIM_Base_SetConfig+0x124>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d108      	bne.n	800733e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	4313      	orrs	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a2f      	ldr	r2, [pc, #188]	; (8007400 <TIM_Base_SetConfig+0x114>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d01f      	beq.n	8007386 <TIM_Base_SetConfig+0x9a>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800734c:	d01b      	beq.n	8007386 <TIM_Base_SetConfig+0x9a>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a2c      	ldr	r2, [pc, #176]	; (8007404 <TIM_Base_SetConfig+0x118>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d017      	beq.n	8007386 <TIM_Base_SetConfig+0x9a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a2b      	ldr	r2, [pc, #172]	; (8007408 <TIM_Base_SetConfig+0x11c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d013      	beq.n	8007386 <TIM_Base_SetConfig+0x9a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a2a      	ldr	r2, [pc, #168]	; (800740c <TIM_Base_SetConfig+0x120>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d00f      	beq.n	8007386 <TIM_Base_SetConfig+0x9a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a29      	ldr	r2, [pc, #164]	; (8007410 <TIM_Base_SetConfig+0x124>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d00b      	beq.n	8007386 <TIM_Base_SetConfig+0x9a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a28      	ldr	r2, [pc, #160]	; (8007414 <TIM_Base_SetConfig+0x128>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d007      	beq.n	8007386 <TIM_Base_SetConfig+0x9a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a27      	ldr	r2, [pc, #156]	; (8007418 <TIM_Base_SetConfig+0x12c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d003      	beq.n	8007386 <TIM_Base_SetConfig+0x9a>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a26      	ldr	r2, [pc, #152]	; (800741c <TIM_Base_SetConfig+0x130>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d108      	bne.n	8007398 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800738c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	4313      	orrs	r3, r2
 8007396:	60fb      	str	r3, [r7, #12]
=======
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a40      	ldr	r2, [pc, #256]	; (800a7c4 <TIM_Base_SetConfig+0x114>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d013      	beq.n	800a6f0 <TIM_Base_SetConfig+0x40>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6ce:	d00f      	beq.n	800a6f0 <TIM_Base_SetConfig+0x40>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a3d      	ldr	r2, [pc, #244]	; (800a7c8 <TIM_Base_SetConfig+0x118>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d00b      	beq.n	800a6f0 <TIM_Base_SetConfig+0x40>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4a3c      	ldr	r2, [pc, #240]	; (800a7cc <TIM_Base_SetConfig+0x11c>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d007      	beq.n	800a6f0 <TIM_Base_SetConfig+0x40>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	4a3b      	ldr	r2, [pc, #236]	; (800a7d0 <TIM_Base_SetConfig+0x120>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d003      	beq.n	800a6f0 <TIM_Base_SetConfig+0x40>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4a3a      	ldr	r2, [pc, #232]	; (800a7d4 <TIM_Base_SetConfig+0x124>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d108      	bne.n	800a702 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a2f      	ldr	r2, [pc, #188]	; (800a7c4 <TIM_Base_SetConfig+0x114>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d01f      	beq.n	800a74a <TIM_Base_SetConfig+0x9a>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a710:	d01b      	beq.n	800a74a <TIM_Base_SetConfig+0x9a>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a2c      	ldr	r2, [pc, #176]	; (800a7c8 <TIM_Base_SetConfig+0x118>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d017      	beq.n	800a74a <TIM_Base_SetConfig+0x9a>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4a2b      	ldr	r2, [pc, #172]	; (800a7cc <TIM_Base_SetConfig+0x11c>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d013      	beq.n	800a74a <TIM_Base_SetConfig+0x9a>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a2a      	ldr	r2, [pc, #168]	; (800a7d0 <TIM_Base_SetConfig+0x120>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d00f      	beq.n	800a74a <TIM_Base_SetConfig+0x9a>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4a29      	ldr	r2, [pc, #164]	; (800a7d4 <TIM_Base_SetConfig+0x124>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d00b      	beq.n	800a74a <TIM_Base_SetConfig+0x9a>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4a28      	ldr	r2, [pc, #160]	; (800a7d8 <TIM_Base_SetConfig+0x128>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d007      	beq.n	800a74a <TIM_Base_SetConfig+0x9a>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4a27      	ldr	r2, [pc, #156]	; (800a7dc <TIM_Base_SetConfig+0x12c>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d003      	beq.n	800a74a <TIM_Base_SetConfig+0x9a>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4a26      	ldr	r2, [pc, #152]	; (800a7e0 <TIM_Base_SetConfig+0x130>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d108      	bne.n	800a75c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	68fa      	ldr	r2, [r7, #12]
 800a758:	4313      	orrs	r3, r2
 800a75a:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a10      	ldr	r2, [pc, #64]	; (8007400 <TIM_Base_SetConfig+0x114>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d00f      	beq.n	80073e4 <TIM_Base_SetConfig+0xf8>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a12      	ldr	r2, [pc, #72]	; (8007410 <TIM_Base_SetConfig+0x124>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00b      	beq.n	80073e4 <TIM_Base_SetConfig+0xf8>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a11      	ldr	r2, [pc, #68]	; (8007414 <TIM_Base_SetConfig+0x128>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d007      	beq.n	80073e4 <TIM_Base_SetConfig+0xf8>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a10      	ldr	r2, [pc, #64]	; (8007418 <TIM_Base_SetConfig+0x12c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d003      	beq.n	80073e4 <TIM_Base_SetConfig+0xf8>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a0f      	ldr	r2, [pc, #60]	; (800741c <TIM_Base_SetConfig+0x130>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d103      	bne.n	80073ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	691a      	ldr	r2, [r3, #16]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	4313      	orrs	r3, r2
 800a768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	689a      	ldr	r2, [r3, #8]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a10      	ldr	r2, [pc, #64]	; (800a7c4 <TIM_Base_SetConfig+0x114>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d00f      	beq.n	800a7a8 <TIM_Base_SetConfig+0xf8>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a12      	ldr	r2, [pc, #72]	; (800a7d4 <TIM_Base_SetConfig+0x124>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d00b      	beq.n	800a7a8 <TIM_Base_SetConfig+0xf8>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a11      	ldr	r2, [pc, #68]	; (800a7d8 <TIM_Base_SetConfig+0x128>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d007      	beq.n	800a7a8 <TIM_Base_SetConfig+0xf8>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4a10      	ldr	r2, [pc, #64]	; (800a7dc <TIM_Base_SetConfig+0x12c>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d003      	beq.n	800a7a8 <TIM_Base_SetConfig+0xf8>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a0f      	ldr	r2, [pc, #60]	; (800a7e0 <TIM_Base_SetConfig+0x130>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d103      	bne.n	800a7b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	691a      	ldr	r2, [r3, #16]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	615a      	str	r2, [r3, #20]
}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40010000 	.word	0x40010000
 8007404:	40000400 	.word	0x40000400
 8007408:	40000800 	.word	0x40000800
 800740c:	40000c00 	.word	0x40000c00
 8007410:	40010400 	.word	0x40010400
 8007414:	40014000 	.word	0x40014000
 8007418:	40014400 	.word	0x40014400
 800741c:	40014800 	.word	0x40014800

08007420 <TIM_OC1_SetConfig>:
=======
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	615a      	str	r2, [r3, #20]
}
 800a7b6:	bf00      	nop
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	40010000 	.word	0x40010000
 800a7c8:	40000400 	.word	0x40000400
 800a7cc:	40000800 	.word	0x40000800
 800a7d0:	40000c00 	.word	0x40000c00
 800a7d4:	40010400 	.word	0x40010400
 800a7d8:	40014000 	.word	0x40014000
 800a7dc:	40014400 	.word	0x40014400
 800a7e0:	40014800 	.word	0x40014800

0800a7e4 <TIM_OC1_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
=======
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< Updated upstream
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	f023 0201 	bic.w	r2, r3, #1
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	4b37      	ldr	r3, [pc, #220]	; (8007528 <TIM_OC1_SetConfig+0x108>)
 800744c:	4013      	ands	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f023 0303 	bic.w	r3, r3, #3
 8007456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f023 0302 	bic.w	r3, r3, #2
 8007468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	4313      	orrs	r3, r2
 8007472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a2d      	ldr	r2, [pc, #180]	; (800752c <TIM_OC1_SetConfig+0x10c>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00f      	beq.n	800749c <TIM_OC1_SetConfig+0x7c>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a2c      	ldr	r2, [pc, #176]	; (8007530 <TIM_OC1_SetConfig+0x110>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00b      	beq.n	800749c <TIM_OC1_SetConfig+0x7c>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a2b      	ldr	r2, [pc, #172]	; (8007534 <TIM_OC1_SetConfig+0x114>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d007      	beq.n	800749c <TIM_OC1_SetConfig+0x7c>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a2a      	ldr	r2, [pc, #168]	; (8007538 <TIM_OC1_SetConfig+0x118>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d003      	beq.n	800749c <TIM_OC1_SetConfig+0x7c>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a29      	ldr	r2, [pc, #164]	; (800753c <TIM_OC1_SetConfig+0x11c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d10c      	bne.n	80074b6 <TIM_OC1_SetConfig+0x96>
=======
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a1b      	ldr	r3, [r3, #32]
 800a7f2:	f023 0201 	bic.w	r2, r3, #1
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a1b      	ldr	r3, [r3, #32]
 800a7fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	699b      	ldr	r3, [r3, #24]
 800a80a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	4b37      	ldr	r3, [pc, #220]	; (800a8ec <TIM_OC1_SetConfig+0x108>)
 800a810:	4013      	ands	r3, r2
 800a812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f023 0303 	bic.w	r3, r3, #3
 800a81a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	4313      	orrs	r3, r2
 800a824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	f023 0302 	bic.w	r3, r3, #2
 800a82c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	4313      	orrs	r3, r2
 800a836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4a2d      	ldr	r2, [pc, #180]	; (800a8f0 <TIM_OC1_SetConfig+0x10c>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d00f      	beq.n	800a860 <TIM_OC1_SetConfig+0x7c>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a2c      	ldr	r2, [pc, #176]	; (800a8f4 <TIM_OC1_SetConfig+0x110>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d00b      	beq.n	800a860 <TIM_OC1_SetConfig+0x7c>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	4a2b      	ldr	r2, [pc, #172]	; (800a8f8 <TIM_OC1_SetConfig+0x114>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d007      	beq.n	800a860 <TIM_OC1_SetConfig+0x7c>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a2a      	ldr	r2, [pc, #168]	; (800a8fc <TIM_OC1_SetConfig+0x118>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d003      	beq.n	800a860 <TIM_OC1_SetConfig+0x7c>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a29      	ldr	r2, [pc, #164]	; (800a900 <TIM_OC1_SetConfig+0x11c>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d10c      	bne.n	800a87a <TIM_OC1_SetConfig+0x96>
>>>>>>> Stashed changes
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< Updated upstream
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f023 0308 	bic.w	r3, r3, #8
 80074a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f023 0304 	bic.w	r3, r3, #4
 80074b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a1c      	ldr	r2, [pc, #112]	; (800752c <TIM_OC1_SetConfig+0x10c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00f      	beq.n	80074de <TIM_OC1_SetConfig+0xbe>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a1b      	ldr	r2, [pc, #108]	; (8007530 <TIM_OC1_SetConfig+0x110>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00b      	beq.n	80074de <TIM_OC1_SetConfig+0xbe>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a1a      	ldr	r2, [pc, #104]	; (8007534 <TIM_OC1_SetConfig+0x114>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d007      	beq.n	80074de <TIM_OC1_SetConfig+0xbe>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a19      	ldr	r2, [pc, #100]	; (8007538 <TIM_OC1_SetConfig+0x118>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d003      	beq.n	80074de <TIM_OC1_SetConfig+0xbe>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a18      	ldr	r2, [pc, #96]	; (800753c <TIM_OC1_SetConfig+0x11c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d111      	bne.n	8007502 <TIM_OC1_SetConfig+0xe2>
=======
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	f023 0308 	bic.w	r3, r3, #8
 800a866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	697a      	ldr	r2, [r7, #20]
 800a86e:	4313      	orrs	r3, r2
 800a870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	f023 0304 	bic.w	r3, r3, #4
 800a878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a1c      	ldr	r2, [pc, #112]	; (800a8f0 <TIM_OC1_SetConfig+0x10c>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d00f      	beq.n	800a8a2 <TIM_OC1_SetConfig+0xbe>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a1b      	ldr	r2, [pc, #108]	; (800a8f4 <TIM_OC1_SetConfig+0x110>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d00b      	beq.n	800a8a2 <TIM_OC1_SetConfig+0xbe>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a1a      	ldr	r2, [pc, #104]	; (800a8f8 <TIM_OC1_SetConfig+0x114>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d007      	beq.n	800a8a2 <TIM_OC1_SetConfig+0xbe>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a19      	ldr	r2, [pc, #100]	; (800a8fc <TIM_OC1_SetConfig+0x118>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d003      	beq.n	800a8a2 <TIM_OC1_SetConfig+0xbe>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a18      	ldr	r2, [pc, #96]	; (800a900 <TIM_OC1_SetConfig+0x11c>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d111      	bne.n	800a8c6 <TIM_OC1_SetConfig+0xe2>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< Updated upstream
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	4313      	orrs	r3, r2
 8007500:	613b      	str	r3, [r7, #16]
=======
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	695b      	ldr	r3, [r3, #20]
 800a8b6:	693a      	ldr	r2, [r7, #16]
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	699b      	ldr	r3, [r3, #24]
 800a8c0:	693a      	ldr	r2, [r7, #16]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	621a      	str	r2, [r3, #32]
}
 800751c:	bf00      	nop
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	fffeff8f 	.word	0xfffeff8f
 800752c:	40010000 	.word	0x40010000
 8007530:	40010400 	.word	0x40010400
 8007534:	40014000 	.word	0x40014000
 8007538:	40014400 	.word	0x40014400
 800753c:	40014800 	.word	0x40014800

08007540 <TIM_OC2_SetConfig>:
=======
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	68fa      	ldr	r2, [r7, #12]
 800a8d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	621a      	str	r2, [r3, #32]
}
 800a8e0:	bf00      	nop
 800a8e2:	371c      	adds	r7, #28
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	fffeff8f 	.word	0xfffeff8f
 800a8f0:	40010000 	.word	0x40010000
 800a8f4:	40010400 	.word	0x40010400
 800a8f8:	40014000 	.word	0x40014000
 800a8fc:	40014400 	.word	0x40014400
 800a900:	40014800 	.word	0x40014800

0800a904 <TIM_OC2_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
=======
 800a904:	b480      	push	{r7}
 800a906:	b087      	sub	sp, #28
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< Updated upstream
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	f023 0210 	bic.w	r2, r3, #16
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	4b34      	ldr	r3, [pc, #208]	; (800763c <TIM_OC2_SetConfig+0xfc>)
 800756c:	4013      	ands	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	021b      	lsls	r3, r3, #8
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	4313      	orrs	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f023 0320 	bic.w	r3, r3, #32
 800758a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	4313      	orrs	r3, r2
 8007596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a29      	ldr	r2, [pc, #164]	; (8007640 <TIM_OC2_SetConfig+0x100>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d003      	beq.n	80075a8 <TIM_OC2_SetConfig+0x68>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a28      	ldr	r2, [pc, #160]	; (8007644 <TIM_OC2_SetConfig+0x104>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d10d      	bne.n	80075c4 <TIM_OC2_SetConfig+0x84>
=======
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a1b      	ldr	r3, [r3, #32]
 800a912:	f023 0210 	bic.w	r2, r3, #16
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a1b      	ldr	r3, [r3, #32]
 800a91e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	4b34      	ldr	r3, [pc, #208]	; (800aa00 <TIM_OC2_SetConfig+0xfc>)
 800a930:	4013      	ands	r3, r2
 800a932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a93a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	021b      	lsls	r3, r3, #8
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	4313      	orrs	r3, r2
 800a946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	f023 0320 	bic.w	r3, r3, #32
 800a94e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	011b      	lsls	r3, r3, #4
 800a956:	697a      	ldr	r2, [r7, #20]
 800a958:	4313      	orrs	r3, r2
 800a95a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a29      	ldr	r2, [pc, #164]	; (800aa04 <TIM_OC2_SetConfig+0x100>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d003      	beq.n	800a96c <TIM_OC2_SetConfig+0x68>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a28      	ldr	r2, [pc, #160]	; (800aa08 <TIM_OC2_SetConfig+0x104>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d10d      	bne.n	800a988 <TIM_OC2_SetConfig+0x84>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< Updated upstream
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	011b      	lsls	r3, r3, #4
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075c2:	617b      	str	r3, [r7, #20]
=======
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	011b      	lsls	r3, r3, #4
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a986:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< Updated upstream
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a1e      	ldr	r2, [pc, #120]	; (8007640 <TIM_OC2_SetConfig+0x100>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d00f      	beq.n	80075ec <TIM_OC2_SetConfig+0xac>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a1d      	ldr	r2, [pc, #116]	; (8007644 <TIM_OC2_SetConfig+0x104>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d00b      	beq.n	80075ec <TIM_OC2_SetConfig+0xac>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a1c      	ldr	r2, [pc, #112]	; (8007648 <TIM_OC2_SetConfig+0x108>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d007      	beq.n	80075ec <TIM_OC2_SetConfig+0xac>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a1b      	ldr	r2, [pc, #108]	; (800764c <TIM_OC2_SetConfig+0x10c>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d003      	beq.n	80075ec <TIM_OC2_SetConfig+0xac>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a1a      	ldr	r2, [pc, #104]	; (8007650 <TIM_OC2_SetConfig+0x110>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d113      	bne.n	8007614 <TIM_OC2_SetConfig+0xd4>
=======
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	4a1e      	ldr	r2, [pc, #120]	; (800aa04 <TIM_OC2_SetConfig+0x100>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d00f      	beq.n	800a9b0 <TIM_OC2_SetConfig+0xac>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4a1d      	ldr	r2, [pc, #116]	; (800aa08 <TIM_OC2_SetConfig+0x104>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d00b      	beq.n	800a9b0 <TIM_OC2_SetConfig+0xac>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4a1c      	ldr	r2, [pc, #112]	; (800aa0c <TIM_OC2_SetConfig+0x108>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d007      	beq.n	800a9b0 <TIM_OC2_SetConfig+0xac>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4a1b      	ldr	r2, [pc, #108]	; (800aa10 <TIM_OC2_SetConfig+0x10c>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d003      	beq.n	800a9b0 <TIM_OC2_SetConfig+0xac>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a1a      	ldr	r2, [pc, #104]	; (800aa14 <TIM_OC2_SetConfig+0x110>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d113      	bne.n	800a9d8 <TIM_OC2_SetConfig+0xd4>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< Updated upstream
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	4313      	orrs	r3, r2
 8007606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	4313      	orrs	r3, r2
 8007612:	613b      	str	r3, [r7, #16]
=======
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	695b      	ldr	r3, [r3, #20]
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	693a      	ldr	r2, [r7, #16]
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	693a      	ldr	r2, [r7, #16]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	621a      	str	r2, [r3, #32]
}
 800762e:	bf00      	nop
 8007630:	371c      	adds	r7, #28
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	feff8fff 	.word	0xfeff8fff
 8007640:	40010000 	.word	0x40010000
 8007644:	40010400 	.word	0x40010400
 8007648:	40014000 	.word	0x40014000
 800764c:	40014400 	.word	0x40014400
 8007650:	40014800 	.word	0x40014800

08007654 <TIM_OC3_SetConfig>:
=======
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	693a      	ldr	r2, [r7, #16]
 800a9dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	697a      	ldr	r2, [r7, #20]
 800a9f0:	621a      	str	r2, [r3, #32]
}
 800a9f2:	bf00      	nop
 800a9f4:	371c      	adds	r7, #28
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	feff8fff 	.word	0xfeff8fff
 800aa04:	40010000 	.word	0x40010000
 800aa08:	40010400 	.word	0x40010400
 800aa0c:	40014000 	.word	0x40014000
 800aa10:	40014400 	.word	0x40014400
 800aa14:	40014800 	.word	0x40014800

0800aa18 <TIM_OC3_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
=======
 800aa18:	b480      	push	{r7}
 800aa1a:	b087      	sub	sp, #28
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< Updated upstream
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	4b33      	ldr	r3, [pc, #204]	; (800774c <TIM_OC3_SetConfig+0xf8>)
 8007680:	4013      	ands	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 0303 	bic.w	r3, r3, #3
 800768a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4313      	orrs	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800769c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	021b      	lsls	r3, r3, #8
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a28      	ldr	r2, [pc, #160]	; (8007750 <TIM_OC3_SetConfig+0xfc>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d003      	beq.n	80076ba <TIM_OC3_SetConfig+0x66>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a27      	ldr	r2, [pc, #156]	; (8007754 <TIM_OC3_SetConfig+0x100>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d10d      	bne.n	80076d6 <TIM_OC3_SetConfig+0x82>
=======
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6a1b      	ldr	r3, [r3, #32]
 800aa32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	69db      	ldr	r3, [r3, #28]
 800aa3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	4b33      	ldr	r3, [pc, #204]	; (800ab10 <TIM_OC3_SetConfig+0xf8>)
 800aa44:	4013      	ands	r3, r2
 800aa46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f023 0303 	bic.w	r3, r3, #3
 800aa4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	021b      	lsls	r3, r3, #8
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a28      	ldr	r2, [pc, #160]	; (800ab14 <TIM_OC3_SetConfig+0xfc>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d003      	beq.n	800aa7e <TIM_OC3_SetConfig+0x66>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a27      	ldr	r2, [pc, #156]	; (800ab18 <TIM_OC3_SetConfig+0x100>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d10d      	bne.n	800aa9a <TIM_OC3_SetConfig+0x82>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< Updated upstream
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	021b      	lsls	r3, r3, #8
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a1d      	ldr	r2, [pc, #116]	; (8007750 <TIM_OC3_SetConfig+0xfc>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00f      	beq.n	80076fe <TIM_OC3_SetConfig+0xaa>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a1c      	ldr	r2, [pc, #112]	; (8007754 <TIM_OC3_SetConfig+0x100>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00b      	beq.n	80076fe <TIM_OC3_SetConfig+0xaa>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a1b      	ldr	r2, [pc, #108]	; (8007758 <TIM_OC3_SetConfig+0x104>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d007      	beq.n	80076fe <TIM_OC3_SetConfig+0xaa>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a1a      	ldr	r2, [pc, #104]	; (800775c <TIM_OC3_SetConfig+0x108>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d003      	beq.n	80076fe <TIM_OC3_SetConfig+0xaa>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a19      	ldr	r2, [pc, #100]	; (8007760 <TIM_OC3_SetConfig+0x10c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d113      	bne.n	8007726 <TIM_OC3_SetConfig+0xd2>
=======
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	021b      	lsls	r3, r3, #8
 800aa8c:	697a      	ldr	r2, [r7, #20]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a1d      	ldr	r2, [pc, #116]	; (800ab14 <TIM_OC3_SetConfig+0xfc>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d00f      	beq.n	800aac2 <TIM_OC3_SetConfig+0xaa>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a1c      	ldr	r2, [pc, #112]	; (800ab18 <TIM_OC3_SetConfig+0x100>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d00b      	beq.n	800aac2 <TIM_OC3_SetConfig+0xaa>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a1b      	ldr	r2, [pc, #108]	; (800ab1c <TIM_OC3_SetConfig+0x104>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d007      	beq.n	800aac2 <TIM_OC3_SetConfig+0xaa>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a1a      	ldr	r2, [pc, #104]	; (800ab20 <TIM_OC3_SetConfig+0x108>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d003      	beq.n	800aac2 <TIM_OC3_SetConfig+0xaa>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a19      	ldr	r2, [pc, #100]	; (800ab24 <TIM_OC3_SetConfig+0x10c>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d113      	bne.n	800aaea <TIM_OC3_SetConfig+0xd2>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< Updated upstream
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800770c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	011b      	lsls	r3, r3, #4
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	4313      	orrs	r3, r2
 8007718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	011b      	lsls	r3, r3, #4
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	4313      	orrs	r3, r2
 8007724:	613b      	str	r3, [r7, #16]
=======
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	695b      	ldr	r3, [r3, #20]
 800aad6:	011b      	lsls	r3, r3, #4
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	4313      	orrs	r3, r2
 800aadc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	699b      	ldr	r3, [r3, #24]
 800aae2:	011b      	lsls	r3, r3, #4
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	621a      	str	r2, [r3, #32]
}
 8007740:	bf00      	nop
 8007742:	371c      	adds	r7, #28
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	fffeff8f 	.word	0xfffeff8f
 8007750:	40010000 	.word	0x40010000
 8007754:	40010400 	.word	0x40010400
 8007758:	40014000 	.word	0x40014000
 800775c:	40014400 	.word	0x40014400
 8007760:	40014800 	.word	0x40014800

08007764 <TIM_OC4_SetConfig>:
=======
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	685a      	ldr	r2, [r3, #4]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	621a      	str	r2, [r3, #32]
}
 800ab04:	bf00      	nop
 800ab06:	371c      	adds	r7, #28
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr
 800ab10:	fffeff8f 	.word	0xfffeff8f
 800ab14:	40010000 	.word	0x40010000
 800ab18:	40010400 	.word	0x40010400
 800ab1c:	40014000 	.word	0x40014000
 800ab20:	40014400 	.word	0x40014400
 800ab24:	40014800 	.word	0x40014800

0800ab28 <TIM_OC4_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
=======
 800ab28:	b480      	push	{r7}
 800ab2a:	b087      	sub	sp, #28
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< Updated upstream
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	4b24      	ldr	r3, [pc, #144]	; (8007820 <TIM_OC4_SetConfig+0xbc>)
 8007790:	4013      	ands	r3, r2
 8007792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800779a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	021b      	lsls	r3, r3, #8
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	031b      	lsls	r3, r3, #12
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a19      	ldr	r2, [pc, #100]	; (8007824 <TIM_OC4_SetConfig+0xc0>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d00f      	beq.n	80077e4 <TIM_OC4_SetConfig+0x80>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a18      	ldr	r2, [pc, #96]	; (8007828 <TIM_OC4_SetConfig+0xc4>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d00b      	beq.n	80077e4 <TIM_OC4_SetConfig+0x80>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a17      	ldr	r2, [pc, #92]	; (800782c <TIM_OC4_SetConfig+0xc8>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d007      	beq.n	80077e4 <TIM_OC4_SetConfig+0x80>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a16      	ldr	r2, [pc, #88]	; (8007830 <TIM_OC4_SetConfig+0xcc>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d003      	beq.n	80077e4 <TIM_OC4_SetConfig+0x80>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a15      	ldr	r2, [pc, #84]	; (8007834 <TIM_OC4_SetConfig+0xd0>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d109      	bne.n	80077f8 <TIM_OC4_SetConfig+0x94>
=======
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a1b      	ldr	r3, [r3, #32]
 800ab42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	69db      	ldr	r3, [r3, #28]
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	4b24      	ldr	r3, [pc, #144]	; (800abe4 <TIM_OC4_SetConfig+0xbc>)
 800ab54:	4013      	ands	r3, r2
 800ab56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	021b      	lsls	r3, r3, #8
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	031b      	lsls	r3, r3, #12
 800ab7a:	693a      	ldr	r2, [r7, #16]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a19      	ldr	r2, [pc, #100]	; (800abe8 <TIM_OC4_SetConfig+0xc0>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d00f      	beq.n	800aba8 <TIM_OC4_SetConfig+0x80>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a18      	ldr	r2, [pc, #96]	; (800abec <TIM_OC4_SetConfig+0xc4>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d00b      	beq.n	800aba8 <TIM_OC4_SetConfig+0x80>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a17      	ldr	r2, [pc, #92]	; (800abf0 <TIM_OC4_SetConfig+0xc8>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d007      	beq.n	800aba8 <TIM_OC4_SetConfig+0x80>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a16      	ldr	r2, [pc, #88]	; (800abf4 <TIM_OC4_SetConfig+0xcc>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d003      	beq.n	800aba8 <TIM_OC4_SetConfig+0x80>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a15      	ldr	r2, [pc, #84]	; (800abf8 <TIM_OC4_SetConfig+0xd0>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d109      	bne.n	800abbc <TIM_OC4_SetConfig+0x94>
>>>>>>> Stashed changes
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< Updated upstream
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	019b      	lsls	r3, r3, #6
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	617b      	str	r3, [r7, #20]
=======
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	695b      	ldr	r3, [r3, #20]
 800abb4:	019b      	lsls	r3, r3, #6
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	4313      	orrs	r3, r2
 800abba:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	621a      	str	r2, [r3, #32]
}
 8007812:	bf00      	nop
 8007814:	371c      	adds	r7, #28
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	feff8fff 	.word	0xfeff8fff
 8007824:	40010000 	.word	0x40010000
 8007828:	40010400 	.word	0x40010400
 800782c:	40014000 	.word	0x40014000
 8007830:	40014400 	.word	0x40014400
 8007834:	40014800 	.word	0x40014800

08007838 <TIM_OC5_SetConfig>:
=======
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	693a      	ldr	r2, [r7, #16]
 800abd4:	621a      	str	r2, [r3, #32]
}
 800abd6:	bf00      	nop
 800abd8:	371c      	adds	r7, #28
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	feff8fff 	.word	0xfeff8fff
 800abe8:	40010000 	.word	0x40010000
 800abec:	40010400 	.word	0x40010400
 800abf0:	40014000 	.word	0x40014000
 800abf4:	40014400 	.word	0x40014400
 800abf8:	40014800 	.word	0x40014800

0800abfc <TIM_OC5_SetConfig>:
>>>>>>> Stashed changes
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
=======
 800abfc:	b480      	push	{r7}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
<<<<<<< Updated upstream
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4b21      	ldr	r3, [pc, #132]	; (80078e8 <TIM_OC5_SetConfig+0xb0>)
 8007864:	4013      	ands	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	4313      	orrs	r3, r2
 8007870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007878:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	041b      	lsls	r3, r3, #16
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	4313      	orrs	r3, r2
 8007884:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a18      	ldr	r2, [pc, #96]	; (80078ec <TIM_OC5_SetConfig+0xb4>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d00f      	beq.n	80078ae <TIM_OC5_SetConfig+0x76>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a17      	ldr	r2, [pc, #92]	; (80078f0 <TIM_OC5_SetConfig+0xb8>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d00b      	beq.n	80078ae <TIM_OC5_SetConfig+0x76>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a16      	ldr	r2, [pc, #88]	; (80078f4 <TIM_OC5_SetConfig+0xbc>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d007      	beq.n	80078ae <TIM_OC5_SetConfig+0x76>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a15      	ldr	r2, [pc, #84]	; (80078f8 <TIM_OC5_SetConfig+0xc0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d003      	beq.n	80078ae <TIM_OC5_SetConfig+0x76>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a14      	ldr	r2, [pc, #80]	; (80078fc <TIM_OC5_SetConfig+0xc4>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d109      	bne.n	80078c2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	621a      	str	r2, [r3, #32]
}
 80078dc:	bf00      	nop
 80078de:	371c      	adds	r7, #28
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	fffeff8f 	.word	0xfffeff8f
 80078ec:	40010000 	.word	0x40010000
 80078f0:	40010400 	.word	0x40010400
 80078f4:	40014000 	.word	0x40014000
 80078f8:	40014400 	.word	0x40014400
 80078fc:	40014800 	.word	0x40014800

08007900 <TIM_OC6_SetConfig>:
=======
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	4b21      	ldr	r3, [pc, #132]	; (800acac <TIM_OC5_SetConfig+0xb0>)
 800ac28:	4013      	ands	r3, r2
 800ac2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ac3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	041b      	lsls	r3, r3, #16
 800ac44:	693a      	ldr	r2, [r7, #16]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4a18      	ldr	r2, [pc, #96]	; (800acb0 <TIM_OC5_SetConfig+0xb4>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d00f      	beq.n	800ac72 <TIM_OC5_SetConfig+0x76>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4a17      	ldr	r2, [pc, #92]	; (800acb4 <TIM_OC5_SetConfig+0xb8>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d00b      	beq.n	800ac72 <TIM_OC5_SetConfig+0x76>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4a16      	ldr	r2, [pc, #88]	; (800acb8 <TIM_OC5_SetConfig+0xbc>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d007      	beq.n	800ac72 <TIM_OC5_SetConfig+0x76>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4a15      	ldr	r2, [pc, #84]	; (800acbc <TIM_OC5_SetConfig+0xc0>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d003      	beq.n	800ac72 <TIM_OC5_SetConfig+0x76>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4a14      	ldr	r2, [pc, #80]	; (800acc0 <TIM_OC5_SetConfig+0xc4>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d109      	bne.n	800ac86 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	021b      	lsls	r3, r3, #8
 800ac80:	697a      	ldr	r2, [r7, #20]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	685a      	ldr	r2, [r3, #4]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	621a      	str	r2, [r3, #32]
}
 800aca0:	bf00      	nop
 800aca2:	371c      	adds	r7, #28
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr
 800acac:	fffeff8f 	.word	0xfffeff8f
 800acb0:	40010000 	.word	0x40010000
 800acb4:	40010400 	.word	0x40010400
 800acb8:	40014000 	.word	0x40014000
 800acbc:	40014400 	.word	0x40014400
 800acc0:	40014800 	.word	0x40014800

0800acc4 <TIM_OC6_SetConfig>:
>>>>>>> Stashed changes
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
=======
 800acc4:	b480      	push	{r7}
 800acc6:	b087      	sub	sp, #28
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
<<<<<<< Updated upstream
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	4b22      	ldr	r3, [pc, #136]	; (80079b4 <TIM_OC6_SetConfig+0xb4>)
 800792c:	4013      	ands	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	021b      	lsls	r3, r3, #8
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	4313      	orrs	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	051b      	lsls	r3, r3, #20
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	4313      	orrs	r3, r2
 800794e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a19      	ldr	r2, [pc, #100]	; (80079b8 <TIM_OC6_SetConfig+0xb8>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d00f      	beq.n	8007978 <TIM_OC6_SetConfig+0x78>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a18      	ldr	r2, [pc, #96]	; (80079bc <TIM_OC6_SetConfig+0xbc>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d00b      	beq.n	8007978 <TIM_OC6_SetConfig+0x78>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a17      	ldr	r2, [pc, #92]	; (80079c0 <TIM_OC6_SetConfig+0xc0>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d007      	beq.n	8007978 <TIM_OC6_SetConfig+0x78>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a16      	ldr	r2, [pc, #88]	; (80079c4 <TIM_OC6_SetConfig+0xc4>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d003      	beq.n	8007978 <TIM_OC6_SetConfig+0x78>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a15      	ldr	r2, [pc, #84]	; (80079c8 <TIM_OC6_SetConfig+0xc8>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d109      	bne.n	800798c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800797e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	029b      	lsls	r3, r3, #10
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	4313      	orrs	r3, r2
 800798a:	617b      	str	r3, [r7, #20]
=======
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a1b      	ldr	r3, [r3, #32]
 800acd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a1b      	ldr	r3, [r3, #32]
 800acde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	4b22      	ldr	r3, [pc, #136]	; (800ad78 <TIM_OC6_SetConfig+0xb4>)
 800acf0:	4013      	ands	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	021b      	lsls	r3, r3, #8
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	051b      	lsls	r3, r3, #20
 800ad0e:	693a      	ldr	r2, [r7, #16]
 800ad10:	4313      	orrs	r3, r2
 800ad12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a19      	ldr	r2, [pc, #100]	; (800ad7c <TIM_OC6_SetConfig+0xb8>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d00f      	beq.n	800ad3c <TIM_OC6_SetConfig+0x78>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a18      	ldr	r2, [pc, #96]	; (800ad80 <TIM_OC6_SetConfig+0xbc>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d00b      	beq.n	800ad3c <TIM_OC6_SetConfig+0x78>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a17      	ldr	r2, [pc, #92]	; (800ad84 <TIM_OC6_SetConfig+0xc0>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d007      	beq.n	800ad3c <TIM_OC6_SetConfig+0x78>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a16      	ldr	r2, [pc, #88]	; (800ad88 <TIM_OC6_SetConfig+0xc4>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d003      	beq.n	800ad3c <TIM_OC6_SetConfig+0x78>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a15      	ldr	r2, [pc, #84]	; (800ad8c <TIM_OC6_SetConfig+0xc8>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d109      	bne.n	800ad50 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	695b      	ldr	r3, [r3, #20]
 800ad48:	029b      	lsls	r3, r3, #10
 800ad4a:	697a      	ldr	r2, [r7, #20]
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	621a      	str	r2, [r3, #32]
}
 80079a6:	bf00      	nop
 80079a8:	371c      	adds	r7, #28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	feff8fff 	.word	0xfeff8fff
 80079b8:	40010000 	.word	0x40010000
 80079bc:	40010400 	.word	0x40010400
 80079c0:	40014000 	.word	0x40014000
 80079c4:	40014400 	.word	0x40014400
 80079c8:	40014800 	.word	0x40014800

080079cc <TIM_TI1_ConfigInputStage>:
=======
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	68fa      	ldr	r2, [r7, #12]
 800ad5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	685a      	ldr	r2, [r3, #4]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	621a      	str	r2, [r3, #32]
}
 800ad6a:	bf00      	nop
 800ad6c:	371c      	adds	r7, #28
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	feff8fff 	.word	0xfeff8fff
 800ad7c:	40010000 	.word	0x40010000
 800ad80:	40010400 	.word	0x40010400
 800ad84:	40014000 	.word	0x40014000
 800ad88:	40014400 	.word	0x40014400
 800ad8c:	40014800 	.word	0x40014800

0800ad90 <TIM_TI1_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
=======
 800ad90:	b480      	push	{r7}
 800ad92:	b087      	sub	sp, #28
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	f023 0201 	bic.w	r2, r3, #1
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	011b      	lsls	r3, r3, #4
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f023 030a 	bic.w	r3, r3, #10
 8007a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	621a      	str	r2, [r3, #32]
}
 8007a1e:	bf00      	nop
 8007a20:	371c      	adds	r7, #28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <TIM_TI2_ConfigInputStage>:
=======
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6a1b      	ldr	r3, [r3, #32]
 800ada0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6a1b      	ldr	r3, [r3, #32]
 800ada6:	f023 0201 	bic.w	r2, r3, #1
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	699b      	ldr	r3, [r3, #24]
 800adb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800adba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	011b      	lsls	r3, r3, #4
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	f023 030a 	bic.w	r3, r3, #10
 800adcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800adce:	697a      	ldr	r2, [r7, #20]
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	4313      	orrs	r3, r2
 800add4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	621a      	str	r2, [r3, #32]
}
 800ade2:	bf00      	nop
 800ade4:	371c      	adds	r7, #28
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr

0800adee <TIM_TI2_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8007a2a:	b480      	push	{r7}
 8007a2c:	b087      	sub	sp, #28
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	607a      	str	r2, [r7, #4]
=======
 800adee:	b480      	push	{r7}
 800adf0:	b087      	sub	sp, #28
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	60f8      	str	r0, [r7, #12]
 800adf6:	60b9      	str	r1, [r7, #8]
 800adf8:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< Updated upstream
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	f023 0210 	bic.w	r2, r3, #16
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6a1b      	ldr	r3, [r3, #32]
 8007a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	031b      	lsls	r3, r3, #12
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	011b      	lsls	r3, r3, #4
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	621a      	str	r2, [r3, #32]
}
 8007a7e:	bf00      	nop
 8007a80:	371c      	adds	r7, #28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
	...

08007a8c <TIM_ITRx_SetConfig>:
=======
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6a1b      	ldr	r3, [r3, #32]
 800adfe:	f023 0210 	bic.w	r2, r3, #16
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	699b      	ldr	r3, [r3, #24]
 800ae0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6a1b      	ldr	r3, [r3, #32]
 800ae10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	031b      	lsls	r3, r3, #12
 800ae1e:	697a      	ldr	r2, [r7, #20]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	011b      	lsls	r3, r3, #4
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	697a      	ldr	r2, [r7, #20]
 800ae3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	621a      	str	r2, [r3, #32]
}
 800ae42:	bf00      	nop
 800ae44:	371c      	adds	r7, #28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
	...

0800ae50 <TIM_ITRx_SetConfig>:
>>>>>>> Stashed changes
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< Updated upstream
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
=======
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< Updated upstream
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	4b09      	ldr	r3, [pc, #36]	; (8007ac4 <TIM_ITRx_SetConfig+0x38>)
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	f043 0307 	orr.w	r3, r3, #7
 8007aae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	609a      	str	r2, [r3, #8]
}
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	ffcfff8f 	.word	0xffcfff8f

08007ac8 <TIM_ETR_SetConfig>:
=======
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	4b09      	ldr	r3, [pc, #36]	; (800ae88 <TIM_ITRx_SetConfig+0x38>)
 800ae64:	4013      	ands	r3, r2
 800ae66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae68:	683a      	ldr	r2, [r7, #0]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	f043 0307 	orr.w	r3, r3, #7
 800ae72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	609a      	str	r2, [r3, #8]
}
 800ae7a:	bf00      	nop
 800ae7c:	3714      	adds	r7, #20
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop
 800ae88:	ffcfff8f 	.word	0xffcfff8f

0800ae8c <TIM_ETR_SetConfig>:
>>>>>>> Stashed changes
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< Updated upstream
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
 8007ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ae2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	021a      	lsls	r2, r3, #8
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	431a      	orrs	r2, r3
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	609a      	str	r2, [r3, #8]
}
 8007afc:	bf00      	nop
 8007afe:	371c      	adds	r7, #28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <TIM_CCxChannelCmd>:
=======
 800ae8c:	b480      	push	{r7}
 800ae8e:	b087      	sub	sp, #28
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
 800ae98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	021a      	lsls	r2, r3, #8
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	431a      	orrs	r2, r3
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	697a      	ldr	r2, [r7, #20]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	697a      	ldr	r2, [r7, #20]
 800aebe:	609a      	str	r2, [r3, #8]
}
 800aec0:	bf00      	nop
 800aec2:	371c      	adds	r7, #28
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <TIM_CCxChannelCmd>:
>>>>>>> Stashed changes
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< Updated upstream
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
=======
 800aecc:	b480      	push	{r7}
 800aece:	b087      	sub	sp, #28
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< Updated upstream
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f003 031f 	and.w	r3, r3, #31
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6a1a      	ldr	r2, [r3, #32]
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	43db      	mvns	r3, r3
 8007b2a:	401a      	ands	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6a1a      	ldr	r2, [r3, #32]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f003 031f 	and.w	r3, r3, #31
 8007b3a:	6879      	ldr	r1, [r7, #4]
 8007b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b40:	431a      	orrs	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	621a      	str	r2, [r3, #32]
}
 8007b46:	bf00      	nop
 8007b48:	371c      	adds	r7, #28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
	...

08007b54 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	f003 031f 	and.w	r3, r3, #31
 800aede:	2201      	movs	r2, #1
 800aee0:	fa02 f303 	lsl.w	r3, r2, r3
 800aee4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6a1a      	ldr	r2, [r3, #32]
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	43db      	mvns	r3, r3
 800aeee:	401a      	ands	r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6a1a      	ldr	r2, [r3, #32]
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	f003 031f 	and.w	r3, r3, #31
 800aefe:	6879      	ldr	r1, [r7, #4]
 800af00:	fa01 f303 	lsl.w	r3, r1, r3
 800af04:	431a      	orrs	r2, r3
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	621a      	str	r2, [r3, #32]
}
 800af0a:	bf00      	nop
 800af0c:	371c      	adds	r7, #28
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr
	...

0800af18 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> Stashed changes
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< Updated upstream
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
=======
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d101      	bne.n	8007b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b68:	2302      	movs	r3, #2
 8007b6a:	e06d      	b.n	8007c48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a30      	ldr	r2, [pc, #192]	; (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d004      	beq.n	8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a2f      	ldr	r2, [pc, #188]	; (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d108      	bne.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
=======
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d101      	bne.n	800af30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af2c:	2302      	movs	r3, #2
 800af2e:	e06d      	b.n	800b00c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2202      	movs	r2, #2
 800af3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a30      	ldr	r2, [pc, #192]	; (800b018 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d004      	beq.n	800af64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a2f      	ldr	r2, [pc, #188]	; (800b01c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d108      	bne.n	800af76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< Updated upstream
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ba6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]
=======
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	4313      	orrs	r3, r2
 800af74:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< Updated upstream
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a20      	ldr	r2, [pc, #128]	; (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d022      	beq.n	8007c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bde:	d01d      	beq.n	8007c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a1d      	ldr	r2, [pc, #116]	; (8007c5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d018      	beq.n	8007c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a1c      	ldr	r2, [pc, #112]	; (8007c60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d013      	beq.n	8007c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a1a      	ldr	r2, [pc, #104]	; (8007c64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d00e      	beq.n	8007c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a15      	ldr	r2, [pc, #84]	; (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d009      	beq.n	8007c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a16      	ldr	r2, [pc, #88]	; (8007c68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d004      	beq.n	8007c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a15      	ldr	r2, [pc, #84]	; (8007c6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d10c      	bne.n	8007c36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	609a      	str	r2, [r3, #8]
=======
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	4313      	orrs	r3, r2
 800af86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	68fa      	ldr	r2, [r7, #12]
 800af8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a20      	ldr	r2, [pc, #128]	; (800b018 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d022      	beq.n	800afe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afa2:	d01d      	beq.n	800afe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a1d      	ldr	r2, [pc, #116]	; (800b020 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d018      	beq.n	800afe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a1c      	ldr	r2, [pc, #112]	; (800b024 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d013      	beq.n	800afe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a1a      	ldr	r2, [pc, #104]	; (800b028 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d00e      	beq.n	800afe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a15      	ldr	r2, [pc, #84]	; (800b01c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d009      	beq.n	800afe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a16      	ldr	r2, [pc, #88]	; (800b02c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d004      	beq.n	800afe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a15      	ldr	r2, [pc, #84]	; (800b030 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d10c      	bne.n	800affa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afe6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	4313      	orrs	r3, r2
 800aff0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	68ba      	ldr	r2, [r7, #8]
 800aff8:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< Updated upstream
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	40010000 	.word	0x40010000
 8007c58:	40010400 	.word	0x40010400
 8007c5c:	40000400 	.word	0x40000400
 8007c60:	40000800 	.word	0x40000800
 8007c64:	40000c00 	.word	0x40000c00
 8007c68:	40001800 	.word	0x40001800
 8007c6c:	40014000 	.word	0x40014000

08007c70 <HAL_UART_Init>:
=======
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2201      	movs	r2, #1
 800affe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3714      	adds	r7, #20
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr
 800b018:	40010000 	.word	0x40010000
 800b01c:	40010400 	.word	0x40010400
 800b020:	40000400 	.word	0x40000400
 800b024:	40000800 	.word	0x40000800
 800b028:	40000c00 	.word	0x40000c00
 800b02c:	40001800 	.word	0x40001800
 800b030:	40014000 	.word	0x40014000

0800b034 <HAL_UART_Init>:
>>>>>>> Stashed changes
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e042      	b.n	8007d08 <HAL_UART_Init+0x98>
=======
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d101      	bne.n	800b046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	e042      	b.n	800b0cc <HAL_UART_Init+0x98>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d106      	bne.n	8007c9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
=======
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d106      	bne.n	800b05e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
>>>>>>> Stashed changes

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< Updated upstream
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7fb f807 	bl	8002ca8 <HAL_UART_MspInit>
=======
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f7fa fa19 	bl	8005490 <HAL_UART_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2224      	movs	r2, #36	; 0x24
 8007c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 0201 	bic.w	r2, r2, #1
 8007cb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f8c2 	bl	8007e3c <UART_SetConfig>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d101      	bne.n	8007cc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e022      	b.n	8007d08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fe1e 	bl	800890c <UART_AdvFeatureConfig>
=======
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2224      	movs	r2, #36	; 0x24
 800b062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f022 0201 	bic.w	r2, r2, #1
 800b074:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 f8c2 	bl	800b200 <UART_SetConfig>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d101      	bne.n	800b086 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	e022      	b.n	800b0cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d002      	beq.n	800b094 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 fe1e 	bl	800bcd0 <UART_AdvFeatureConfig>
>>>>>>> Stashed changes
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689a      	ldr	r2, [r3, #8]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f042 0201 	orr.w	r2, r2, #1
 8007cfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fea5 	bl	8008a50 <UART_CheckIdleState>
 8007d06:	4603      	mov	r3, r0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <HAL_UART_Transmit>:
=======
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	685a      	ldr	r2, [r3, #4]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b0a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	689a      	ldr	r2, [r3, #8]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b0b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f042 0201 	orr.w	r2, r2, #1
 800b0c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 fea5 	bl	800be14 <UART_CheckIdleState>
 800b0ca:	4603      	mov	r3, r0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <HAL_UART_Transmit>:
>>>>>>> Stashed changes
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08a      	sub	sp, #40	; 0x28
 8007d14:	af02      	add	r7, sp, #8
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	603b      	str	r3, [r7, #0]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	80fb      	strh	r3, [r7, #6]
=======
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b08a      	sub	sp, #40	; 0x28
 800b0d8:	af02      	add	r7, sp, #8
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	603b      	str	r3, [r7, #0]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
<<<<<<< Updated upstream
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d26:	2b20      	cmp	r3, #32
 8007d28:	f040 8083 	bne.w	8007e32 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_UART_Transmit+0x28>
 8007d32:	88fb      	ldrh	r3, [r7, #6]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e07b      	b.n	8007e34 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d101      	bne.n	8007d4a <HAL_UART_Transmit+0x3a>
 8007d46:	2302      	movs	r3, #2
 8007d48:	e074      	b.n	8007e34 <HAL_UART_Transmit+0x124>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2221      	movs	r2, #33	; 0x21
 8007d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d62:	f7fb f8b7 	bl	8002ed4 <HAL_GetTick>
 8007d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	88fa      	ldrh	r2, [r7, #6]
 8007d6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	88fa      	ldrh	r2, [r7, #6]
 8007d74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d80:	d108      	bne.n	8007d94 <HAL_UART_Transmit+0x84>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d104      	bne.n	8007d94 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	61bb      	str	r3, [r7, #24]
 8007d92:	e003      	b.n	8007d9c <HAL_UART_Transmit+0x8c>
=======
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0ea:	2b20      	cmp	r3, #32
 800b0ec:	f040 8083 	bne.w	800b1f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d002      	beq.n	800b0fc <HAL_UART_Transmit+0x28>
 800b0f6:	88fb      	ldrh	r3, [r7, #6]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d101      	bne.n	800b100 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e07b      	b.n	800b1f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b106:	2b01      	cmp	r3, #1
 800b108:	d101      	bne.n	800b10e <HAL_UART_Transmit+0x3a>
 800b10a:	2302      	movs	r3, #2
 800b10c:	e074      	b.n	800b1f8 <HAL_UART_Transmit+0x124>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2201      	movs	r2, #1
 800b112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2221      	movs	r2, #33	; 0x21
 800b122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b126:	f7fa fb3f 	bl	80057a8 <HAL_GetTick>
 800b12a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	88fa      	ldrh	r2, [r7, #6]
 800b130:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	88fa      	ldrh	r2, [r7, #6]
 800b138:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b144:	d108      	bne.n	800b158 <HAL_UART_Transmit+0x84>
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d104      	bne.n	800b158 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b14e:	2300      	movs	r3, #0
 800b150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	61bb      	str	r3, [r7, #24]
 800b156:	e003      	b.n	800b160 <HAL_UART_Transmit+0x8c>
>>>>>>> Stashed changes
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< Updated upstream
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007da4:	e02c      	b.n	8007e00 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2200      	movs	r2, #0
 8007dae:	2180      	movs	r1, #128	; 0x80
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 fe98 	bl	8008ae6 <UART_WaitOnFlagUntilTimeout>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e039      	b.n	8007e34 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10b      	bne.n	8007dde <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	3302      	adds	r3, #2
 8007dda:	61bb      	str	r3, [r7, #24]
 8007ddc:	e007      	b.n	8007dee <HAL_UART_Transmit+0xde>
=======
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b15c:	2300      	movs	r3, #0
 800b15e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2200      	movs	r2, #0
 800b164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b168:	e02c      	b.n	800b1c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	2200      	movs	r2, #0
 800b172:	2180      	movs	r1, #128	; 0x80
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f000 fe98 	bl	800beaa <UART_WaitOnFlagUntilTimeout>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b180:	2303      	movs	r3, #3
 800b182:	e039      	b.n	800b1f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10b      	bne.n	800b1a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	881b      	ldrh	r3, [r3, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b198:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	3302      	adds	r3, #2
 800b19e:	61bb      	str	r3, [r7, #24]
 800b1a0:	e007      	b.n	800b1b2 <HAL_UART_Transmit+0xde>
>>>>>>> Stashed changes
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< Updated upstream
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	781a      	ldrb	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	3301      	adds	r3, #1
 8007dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	3b01      	subs	r3, #1
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1cc      	bne.n	8007da6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2200      	movs	r2, #0
 8007e14:	2140      	movs	r1, #64	; 0x40
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 fe65 	bl	8008ae6 <UART_WaitOnFlagUntilTimeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e006      	b.n	8007e34 <HAL_UART_Transmit+0x124>
=======
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	781a      	ldrb	r2, [r3, #0]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1cc      	bne.n	800b16a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	2140      	movs	r1, #64	; 0x40
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f000 fe65 	bl	800beaa <UART_WaitOnFlagUntilTimeout>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d001      	beq.n	800b1ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	e006      	b.n	800b1f8 <HAL_UART_Transmit+0x124>
>>>>>>> Stashed changes
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	e000      	b.n	8007e34 <HAL_UART_Transmit+0x124>
=======
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2220      	movs	r2, #32
 800b1ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	e000      	b.n	800b1f8 <HAL_UART_Transmit+0x124>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8007e32:	2302      	movs	r3, #2
  }
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3720      	adds	r7, #32
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <UART_SetConfig>:
=======
 800b1f6:	2302      	movs	r3, #2
  }
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3720      	adds	r7, #32
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <UART_SetConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8007e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e40:	b092      	sub	sp, #72	; 0x48
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6178      	str	r0, [r7, #20]
=======
 800b200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b204:	b092      	sub	sp, #72	; 0x48
 800b206:	af00      	add	r7, sp, #0
 800b208:	6178      	str	r0, [r7, #20]
>>>>>>> Stashed changes
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< Updated upstream
 8007e46:	2300      	movs	r3, #0
 8007e48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
=======
 800b20a:	2300      	movs	r3, #0
 800b20c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
>>>>>>> Stashed changes
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< Updated upstream
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	431a      	orrs	r2, r3
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	4bbe      	ldr	r3, [pc, #760]	; (8008164 <UART_SetConfig+0x328>)
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	6812      	ldr	r2, [r2, #0]
 8007e72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e74:	430b      	orrs	r3, r1
 8007e76:	6013      	str	r3, [r2, #0]
=======
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	689a      	ldr	r2, [r3, #8]
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	691b      	ldr	r3, [r3, #16]
 800b218:	431a      	orrs	r2, r3
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	431a      	orrs	r2, r3
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	69db      	ldr	r3, [r3, #28]
 800b224:	4313      	orrs	r3, r2
 800b226:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	4bbe      	ldr	r3, [pc, #760]	; (800b528 <UART_SetConfig+0x328>)
 800b230:	4013      	ands	r3, r2
 800b232:	697a      	ldr	r2, [r7, #20]
 800b234:	6812      	ldr	r2, [r2, #0]
 800b236:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b238:	430b      	orrs	r3, r1
 800b23a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	605a      	str	r2, [r3, #4]
=======
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	68da      	ldr	r2, [r3, #12]
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	430a      	orrs	r2, r1
 800b250:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< Updated upstream
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4ab3      	ldr	r2, [pc, #716]	; (8008168 <UART_SetConfig+0x32c>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d004      	beq.n	8007ea8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689a      	ldr	r2, [r3, #8]
 8007eae:	4baf      	ldr	r3, [pc, #700]	; (800816c <UART_SetConfig+0x330>)
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	6812      	ldr	r2, [r2, #0]
 8007eb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007eb8:	430b      	orrs	r3, r1
 8007eba:	6093      	str	r3, [r2, #8]
=======
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4ab3      	ldr	r2, [pc, #716]	; (800b52c <UART_SetConfig+0x32c>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d004      	beq.n	800b26c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	6a1b      	ldr	r3, [r3, #32]
 800b266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b268:	4313      	orrs	r3, r2
 800b26a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	689a      	ldr	r2, [r3, #8]
 800b272:	4baf      	ldr	r3, [pc, #700]	; (800b530 <UART_SetConfig+0x330>)
 800b274:	4013      	ands	r3, r2
 800b276:	697a      	ldr	r2, [r7, #20]
 800b278:	6812      	ldr	r2, [r2, #0]
 800b27a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b27c:	430b      	orrs	r3, r1
 800b27e:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
<<<<<<< Updated upstream
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec2:	f023 010f 	bic.w	r1, r3, #15
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4aa6      	ldr	r2, [pc, #664]	; (8008170 <UART_SetConfig+0x334>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d177      	bne.n	8007fcc <UART_SetConfig+0x190>
 8007edc:	4ba5      	ldr	r3, [pc, #660]	; (8008174 <UART_SetConfig+0x338>)
 8007ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ee4:	2b28      	cmp	r3, #40	; 0x28
 8007ee6:	d86d      	bhi.n	8007fc4 <UART_SetConfig+0x188>
 8007ee8:	a201      	add	r2, pc, #4	; (adr r2, 8007ef0 <UART_SetConfig+0xb4>)
 8007eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eee:	bf00      	nop
 8007ef0:	08007f95 	.word	0x08007f95
 8007ef4:	08007fc5 	.word	0x08007fc5
 8007ef8:	08007fc5 	.word	0x08007fc5
 8007efc:	08007fc5 	.word	0x08007fc5
 8007f00:	08007fc5 	.word	0x08007fc5
 8007f04:	08007fc5 	.word	0x08007fc5
 8007f08:	08007fc5 	.word	0x08007fc5
 8007f0c:	08007fc5 	.word	0x08007fc5
 8007f10:	08007f9d 	.word	0x08007f9d
 8007f14:	08007fc5 	.word	0x08007fc5
 8007f18:	08007fc5 	.word	0x08007fc5
 8007f1c:	08007fc5 	.word	0x08007fc5
 8007f20:	08007fc5 	.word	0x08007fc5
 8007f24:	08007fc5 	.word	0x08007fc5
 8007f28:	08007fc5 	.word	0x08007fc5
 8007f2c:	08007fc5 	.word	0x08007fc5
 8007f30:	08007fa5 	.word	0x08007fa5
 8007f34:	08007fc5 	.word	0x08007fc5
 8007f38:	08007fc5 	.word	0x08007fc5
 8007f3c:	08007fc5 	.word	0x08007fc5
 8007f40:	08007fc5 	.word	0x08007fc5
 8007f44:	08007fc5 	.word	0x08007fc5
 8007f48:	08007fc5 	.word	0x08007fc5
 8007f4c:	08007fc5 	.word	0x08007fc5
 8007f50:	08007fad 	.word	0x08007fad
 8007f54:	08007fc5 	.word	0x08007fc5
 8007f58:	08007fc5 	.word	0x08007fc5
 8007f5c:	08007fc5 	.word	0x08007fc5
 8007f60:	08007fc5 	.word	0x08007fc5
 8007f64:	08007fc5 	.word	0x08007fc5
 8007f68:	08007fc5 	.word	0x08007fc5
 8007f6c:	08007fc5 	.word	0x08007fc5
 8007f70:	08007fb5 	.word	0x08007fb5
 8007f74:	08007fc5 	.word	0x08007fc5
 8007f78:	08007fc5 	.word	0x08007fc5
 8007f7c:	08007fc5 	.word	0x08007fc5
 8007f80:	08007fc5 	.word	0x08007fc5
 8007f84:	08007fc5 	.word	0x08007fc5
 8007f88:	08007fc5 	.word	0x08007fc5
 8007f8c:	08007fc5 	.word	0x08007fc5
 8007f90:	08007fbd 	.word	0x08007fbd
 8007f94:	2301      	movs	r3, #1
 8007f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f9a:	e222      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8007f9c:	2304      	movs	r3, #4
 8007f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fa2:	e21e      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8007fa4:	2308      	movs	r3, #8
 8007fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007faa:	e21a      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8007fac:	2310      	movs	r3, #16
 8007fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fb2:	e216      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8007fb4:	2320      	movs	r3, #32
 8007fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fba:	e212      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8007fbc:	2340      	movs	r3, #64	; 0x40
 8007fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fc2:	e20e      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8007fc4:	2380      	movs	r3, #128	; 0x80
 8007fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fca:	e20a      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a69      	ldr	r2, [pc, #420]	; (8008178 <UART_SetConfig+0x33c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d130      	bne.n	8008038 <UART_SetConfig+0x1fc>
 8007fd6:	4b67      	ldr	r3, [pc, #412]	; (8008174 <UART_SetConfig+0x338>)
 8007fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fda:	f003 0307 	and.w	r3, r3, #7
 8007fde:	2b05      	cmp	r3, #5
 8007fe0:	d826      	bhi.n	8008030 <UART_SetConfig+0x1f4>
 8007fe2:	a201      	add	r2, pc, #4	; (adr r2, 8007fe8 <UART_SetConfig+0x1ac>)
 8007fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe8:	08008001 	.word	0x08008001
 8007fec:	08008009 	.word	0x08008009
 8007ff0:	08008011 	.word	0x08008011
 8007ff4:	08008019 	.word	0x08008019
 8007ff8:	08008021 	.word	0x08008021
 8007ffc:	08008029 	.word	0x08008029
 8008000:	2300      	movs	r3, #0
 8008002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008006:	e1ec      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008008:	2304      	movs	r3, #4
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800e:	e1e8      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008010:	2308      	movs	r3, #8
 8008012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008016:	e1e4      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008018:	2310      	movs	r3, #16
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801e:	e1e0      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008020:	2320      	movs	r3, #32
 8008022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008026:	e1dc      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008028:	2340      	movs	r3, #64	; 0x40
 800802a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800802e:	e1d8      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008030:	2380      	movs	r3, #128	; 0x80
 8008032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008036:	e1d4      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a4f      	ldr	r2, [pc, #316]	; (800817c <UART_SetConfig+0x340>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d130      	bne.n	80080a4 <UART_SetConfig+0x268>
 8008042:	4b4c      	ldr	r3, [pc, #304]	; (8008174 <UART_SetConfig+0x338>)
 8008044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008046:	f003 0307 	and.w	r3, r3, #7
 800804a:	2b05      	cmp	r3, #5
 800804c:	d826      	bhi.n	800809c <UART_SetConfig+0x260>
 800804e:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <UART_SetConfig+0x218>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	0800806d 	.word	0x0800806d
 8008058:	08008075 	.word	0x08008075
 800805c:	0800807d 	.word	0x0800807d
 8008060:	08008085 	.word	0x08008085
 8008064:	0800808d 	.word	0x0800808d
 8008068:	08008095 	.word	0x08008095
 800806c:	2300      	movs	r3, #0
 800806e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008072:	e1b6      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008074:	2304      	movs	r3, #4
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807a:	e1b2      	b.n	80083e2 <UART_SetConfig+0x5a6>
 800807c:	2308      	movs	r3, #8
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008082:	e1ae      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008084:	2310      	movs	r3, #16
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808a:	e1aa      	b.n	80083e2 <UART_SetConfig+0x5a6>
 800808c:	2320      	movs	r3, #32
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008092:	e1a6      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008094:	2340      	movs	r3, #64	; 0x40
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800809a:	e1a2      	b.n	80083e2 <UART_SetConfig+0x5a6>
 800809c:	2380      	movs	r3, #128	; 0x80
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080a2:	e19e      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a35      	ldr	r2, [pc, #212]	; (8008180 <UART_SetConfig+0x344>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d130      	bne.n	8008110 <UART_SetConfig+0x2d4>
 80080ae:	4b31      	ldr	r3, [pc, #196]	; (8008174 <UART_SetConfig+0x338>)
 80080b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	2b05      	cmp	r3, #5
 80080b8:	d826      	bhi.n	8008108 <UART_SetConfig+0x2cc>
 80080ba:	a201      	add	r2, pc, #4	; (adr r2, 80080c0 <UART_SetConfig+0x284>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	080080d9 	.word	0x080080d9
 80080c4:	080080e1 	.word	0x080080e1
 80080c8:	080080e9 	.word	0x080080e9
 80080cc:	080080f1 	.word	0x080080f1
 80080d0:	080080f9 	.word	0x080080f9
 80080d4:	08008101 	.word	0x08008101
 80080d8:	2300      	movs	r3, #0
 80080da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080de:	e180      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80080e0:	2304      	movs	r3, #4
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e6:	e17c      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80080e8:	2308      	movs	r3, #8
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ee:	e178      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80080f0:	2310      	movs	r3, #16
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f6:	e174      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80080f8:	2320      	movs	r3, #32
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080fe:	e170      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008100:	2340      	movs	r3, #64	; 0x40
 8008102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008106:	e16c      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008108:	2380      	movs	r3, #128	; 0x80
 800810a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800810e:	e168      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a1b      	ldr	r2, [pc, #108]	; (8008184 <UART_SetConfig+0x348>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d142      	bne.n	80081a0 <UART_SetConfig+0x364>
 800811a:	4b16      	ldr	r3, [pc, #88]	; (8008174 <UART_SetConfig+0x338>)
 800811c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	2b05      	cmp	r3, #5
 8008124:	d838      	bhi.n	8008198 <UART_SetConfig+0x35c>
 8008126:	a201      	add	r2, pc, #4	; (adr r2, 800812c <UART_SetConfig+0x2f0>)
 8008128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812c:	08008145 	.word	0x08008145
 8008130:	0800814d 	.word	0x0800814d
 8008134:	08008155 	.word	0x08008155
 8008138:	0800815d 	.word	0x0800815d
 800813c:	08008189 	.word	0x08008189
 8008140:	08008191 	.word	0x08008191
 8008144:	2300      	movs	r3, #0
 8008146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800814a:	e14a      	b.n	80083e2 <UART_SetConfig+0x5a6>
 800814c:	2304      	movs	r3, #4
 800814e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008152:	e146      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008154:	2308      	movs	r3, #8
 8008156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800815a:	e142      	b.n	80083e2 <UART_SetConfig+0x5a6>
 800815c:	2310      	movs	r3, #16
 800815e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008162:	e13e      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008164:	cfff69f3 	.word	0xcfff69f3
 8008168:	58000c00 	.word	0x58000c00
 800816c:	11fff4ff 	.word	0x11fff4ff
 8008170:	40011000 	.word	0x40011000
 8008174:	58024400 	.word	0x58024400
 8008178:	40004400 	.word	0x40004400
 800817c:	40004800 	.word	0x40004800
 8008180:	40004c00 	.word	0x40004c00
 8008184:	40005000 	.word	0x40005000
 8008188:	2320      	movs	r3, #32
 800818a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800818e:	e128      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008190:	2340      	movs	r3, #64	; 0x40
 8008192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008196:	e124      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008198:	2380      	movs	r3, #128	; 0x80
 800819a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800819e:	e120      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4acb      	ldr	r2, [pc, #812]	; (80084d4 <UART_SetConfig+0x698>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d176      	bne.n	8008298 <UART_SetConfig+0x45c>
 80081aa:	4bcb      	ldr	r3, [pc, #812]	; (80084d8 <UART_SetConfig+0x69c>)
 80081ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081b2:	2b28      	cmp	r3, #40	; 0x28
 80081b4:	d86c      	bhi.n	8008290 <UART_SetConfig+0x454>
 80081b6:	a201      	add	r2, pc, #4	; (adr r2, 80081bc <UART_SetConfig+0x380>)
 80081b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081bc:	08008261 	.word	0x08008261
 80081c0:	08008291 	.word	0x08008291
 80081c4:	08008291 	.word	0x08008291
 80081c8:	08008291 	.word	0x08008291
 80081cc:	08008291 	.word	0x08008291
 80081d0:	08008291 	.word	0x08008291
 80081d4:	08008291 	.word	0x08008291
 80081d8:	08008291 	.word	0x08008291
 80081dc:	08008269 	.word	0x08008269
 80081e0:	08008291 	.word	0x08008291
 80081e4:	08008291 	.word	0x08008291
 80081e8:	08008291 	.word	0x08008291
 80081ec:	08008291 	.word	0x08008291
 80081f0:	08008291 	.word	0x08008291
 80081f4:	08008291 	.word	0x08008291
 80081f8:	08008291 	.word	0x08008291
 80081fc:	08008271 	.word	0x08008271
 8008200:	08008291 	.word	0x08008291
 8008204:	08008291 	.word	0x08008291
 8008208:	08008291 	.word	0x08008291
 800820c:	08008291 	.word	0x08008291
 8008210:	08008291 	.word	0x08008291
 8008214:	08008291 	.word	0x08008291
 8008218:	08008291 	.word	0x08008291
 800821c:	08008279 	.word	0x08008279
 8008220:	08008291 	.word	0x08008291
 8008224:	08008291 	.word	0x08008291
 8008228:	08008291 	.word	0x08008291
 800822c:	08008291 	.word	0x08008291
 8008230:	08008291 	.word	0x08008291
 8008234:	08008291 	.word	0x08008291
 8008238:	08008291 	.word	0x08008291
 800823c:	08008281 	.word	0x08008281
 8008240:	08008291 	.word	0x08008291
 8008244:	08008291 	.word	0x08008291
 8008248:	08008291 	.word	0x08008291
 800824c:	08008291 	.word	0x08008291
 8008250:	08008291 	.word	0x08008291
 8008254:	08008291 	.word	0x08008291
 8008258:	08008291 	.word	0x08008291
 800825c:	08008289 	.word	0x08008289
 8008260:	2301      	movs	r3, #1
 8008262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008266:	e0bc      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008268:	2304      	movs	r3, #4
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800826e:	e0b8      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008270:	2308      	movs	r3, #8
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008276:	e0b4      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008278:	2310      	movs	r3, #16
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800827e:	e0b0      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008280:	2320      	movs	r3, #32
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008286:	e0ac      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008288:	2340      	movs	r3, #64	; 0x40
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800828e:	e0a8      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008290:	2380      	movs	r3, #128	; 0x80
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008296:	e0a4      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a8f      	ldr	r2, [pc, #572]	; (80084dc <UART_SetConfig+0x6a0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d130      	bne.n	8008304 <UART_SetConfig+0x4c8>
 80082a2:	4b8d      	ldr	r3, [pc, #564]	; (80084d8 <UART_SetConfig+0x69c>)
 80082a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	2b05      	cmp	r3, #5
 80082ac:	d826      	bhi.n	80082fc <UART_SetConfig+0x4c0>
 80082ae:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <UART_SetConfig+0x478>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082cd 	.word	0x080082cd
 80082b8:	080082d5 	.word	0x080082d5
 80082bc:	080082dd 	.word	0x080082dd
 80082c0:	080082e5 	.word	0x080082e5
 80082c4:	080082ed 	.word	0x080082ed
 80082c8:	080082f5 	.word	0x080082f5
 80082cc:	2300      	movs	r3, #0
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082d2:	e086      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80082d4:	2304      	movs	r3, #4
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082da:	e082      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80082dc:	2308      	movs	r3, #8
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e2:	e07e      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80082e4:	2310      	movs	r3, #16
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ea:	e07a      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80082ec:	2320      	movs	r3, #32
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f2:	e076      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80082f4:	2340      	movs	r3, #64	; 0x40
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fa:	e072      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80082fc:	2380      	movs	r3, #128	; 0x80
 80082fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008302:	e06e      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a75      	ldr	r2, [pc, #468]	; (80084e0 <UART_SetConfig+0x6a4>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d130      	bne.n	8008370 <UART_SetConfig+0x534>
 800830e:	4b72      	ldr	r3, [pc, #456]	; (80084d8 <UART_SetConfig+0x69c>)
 8008310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	2b05      	cmp	r3, #5
 8008318:	d826      	bhi.n	8008368 <UART_SetConfig+0x52c>
 800831a:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <UART_SetConfig+0x4e4>)
 800831c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008320:	08008339 	.word	0x08008339
 8008324:	08008341 	.word	0x08008341
 8008328:	08008349 	.word	0x08008349
 800832c:	08008351 	.word	0x08008351
 8008330:	08008359 	.word	0x08008359
 8008334:	08008361 	.word	0x08008361
 8008338:	2300      	movs	r3, #0
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833e:	e050      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008340:	2304      	movs	r3, #4
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008346:	e04c      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008348:	2308      	movs	r3, #8
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834e:	e048      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008350:	2310      	movs	r3, #16
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008356:	e044      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008358:	2320      	movs	r3, #32
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835e:	e040      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008360:	2340      	movs	r3, #64	; 0x40
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008366:	e03c      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008368:	2380      	movs	r3, #128	; 0x80
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836e:	e038      	b.n	80083e2 <UART_SetConfig+0x5a6>
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a5b      	ldr	r2, [pc, #364]	; (80084e4 <UART_SetConfig+0x6a8>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d130      	bne.n	80083dc <UART_SetConfig+0x5a0>
 800837a:	4b57      	ldr	r3, [pc, #348]	; (80084d8 <UART_SetConfig+0x69c>)
 800837c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837e:	f003 0307 	and.w	r3, r3, #7
 8008382:	2b05      	cmp	r3, #5
 8008384:	d826      	bhi.n	80083d4 <UART_SetConfig+0x598>
 8008386:	a201      	add	r2, pc, #4	; (adr r2, 800838c <UART_SetConfig+0x550>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083a5 	.word	0x080083a5
 8008390:	080083ad 	.word	0x080083ad
 8008394:	080083b5 	.word	0x080083b5
 8008398:	080083bd 	.word	0x080083bd
 800839c:	080083c5 	.word	0x080083c5
 80083a0:	080083cd 	.word	0x080083cd
 80083a4:	2302      	movs	r3, #2
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083aa:	e01a      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80083ac:	2304      	movs	r3, #4
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b2:	e016      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80083b4:	2308      	movs	r3, #8
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ba:	e012      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80083bc:	2310      	movs	r3, #16
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c2:	e00e      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80083c4:	2320      	movs	r3, #32
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ca:	e00a      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80083cc:	2340      	movs	r3, #64	; 0x40
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d2:	e006      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80083d4:	2380      	movs	r3, #128	; 0x80
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083da:	e002      	b.n	80083e2 <UART_SetConfig+0x5a6>
 80083dc:	2380      	movs	r3, #128	; 0x80
 80083de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a3f      	ldr	r2, [pc, #252]	; (80084e4 <UART_SetConfig+0x6a8>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	f040 80f8 	bne.w	80085de <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80083f2:	2b20      	cmp	r3, #32
 80083f4:	dc46      	bgt.n	8008484 <UART_SetConfig+0x648>
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	f2c0 8082 	blt.w	8008500 <UART_SetConfig+0x6c4>
 80083fc:	3b02      	subs	r3, #2
 80083fe:	2b1e      	cmp	r3, #30
 8008400:	d87e      	bhi.n	8008500 <UART_SetConfig+0x6c4>
 8008402:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <UART_SetConfig+0x5cc>)
 8008404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008408:	0800848b 	.word	0x0800848b
 800840c:	08008501 	.word	0x08008501
 8008410:	08008493 	.word	0x08008493
 8008414:	08008501 	.word	0x08008501
 8008418:	08008501 	.word	0x08008501
 800841c:	08008501 	.word	0x08008501
 8008420:	080084a3 	.word	0x080084a3
 8008424:	08008501 	.word	0x08008501
 8008428:	08008501 	.word	0x08008501
 800842c:	08008501 	.word	0x08008501
 8008430:	08008501 	.word	0x08008501
 8008434:	08008501 	.word	0x08008501
 8008438:	08008501 	.word	0x08008501
 800843c:	08008501 	.word	0x08008501
 8008440:	080084b3 	.word	0x080084b3
 8008444:	08008501 	.word	0x08008501
 8008448:	08008501 	.word	0x08008501
 800844c:	08008501 	.word	0x08008501
 8008450:	08008501 	.word	0x08008501
 8008454:	08008501 	.word	0x08008501
 8008458:	08008501 	.word	0x08008501
 800845c:	08008501 	.word	0x08008501
 8008460:	08008501 	.word	0x08008501
 8008464:	08008501 	.word	0x08008501
 8008468:	08008501 	.word	0x08008501
 800846c:	08008501 	.word	0x08008501
 8008470:	08008501 	.word	0x08008501
 8008474:	08008501 	.word	0x08008501
 8008478:	08008501 	.word	0x08008501
 800847c:	08008501 	.word	0x08008501
 8008480:	080084f3 	.word	0x080084f3
 8008484:	2b40      	cmp	r3, #64	; 0x40
 8008486:	d037      	beq.n	80084f8 <UART_SetConfig+0x6bc>
 8008488:	e03a      	b.n	8008500 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800848a:	f7fc ff95 	bl	80053b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800848e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008490:	e03c      	b.n	800850c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008496:	4618      	mov	r0, r3
 8008498:	f7fc ffa4 	bl	80053e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084a0:	e034      	b.n	800850c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084a2:	f107 0318 	add.w	r3, r7, #24
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fd f8f0 	bl	800568c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084b0:	e02c      	b.n	800850c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084b2:	4b09      	ldr	r3, [pc, #36]	; (80084d8 <UART_SetConfig+0x69c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0320 	and.w	r3, r3, #32
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d016      	beq.n	80084ec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80084be:	4b06      	ldr	r3, [pc, #24]	; (80084d8 <UART_SetConfig+0x69c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	08db      	lsrs	r3, r3, #3
 80084c4:	f003 0303 	and.w	r3, r3, #3
 80084c8:	4a07      	ldr	r2, [pc, #28]	; (80084e8 <UART_SetConfig+0x6ac>)
 80084ca:	fa22 f303 	lsr.w	r3, r2, r3
 80084ce:	63fb      	str	r3, [r7, #60]	; 0x3c
=======
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b286:	f023 010f 	bic.w	r1, r3, #15
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	430a      	orrs	r2, r1
 800b294:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4aa6      	ldr	r2, [pc, #664]	; (800b534 <UART_SetConfig+0x334>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d177      	bne.n	800b390 <UART_SetConfig+0x190>
 800b2a0:	4ba5      	ldr	r3, [pc, #660]	; (800b538 <UART_SetConfig+0x338>)
 800b2a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2a8:	2b28      	cmp	r3, #40	; 0x28
 800b2aa:	d86d      	bhi.n	800b388 <UART_SetConfig+0x188>
 800b2ac:	a201      	add	r2, pc, #4	; (adr r2, 800b2b4 <UART_SetConfig+0xb4>)
 800b2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b2:	bf00      	nop
 800b2b4:	0800b359 	.word	0x0800b359
 800b2b8:	0800b389 	.word	0x0800b389
 800b2bc:	0800b389 	.word	0x0800b389
 800b2c0:	0800b389 	.word	0x0800b389
 800b2c4:	0800b389 	.word	0x0800b389
 800b2c8:	0800b389 	.word	0x0800b389
 800b2cc:	0800b389 	.word	0x0800b389
 800b2d0:	0800b389 	.word	0x0800b389
 800b2d4:	0800b361 	.word	0x0800b361
 800b2d8:	0800b389 	.word	0x0800b389
 800b2dc:	0800b389 	.word	0x0800b389
 800b2e0:	0800b389 	.word	0x0800b389
 800b2e4:	0800b389 	.word	0x0800b389
 800b2e8:	0800b389 	.word	0x0800b389
 800b2ec:	0800b389 	.word	0x0800b389
 800b2f0:	0800b389 	.word	0x0800b389
 800b2f4:	0800b369 	.word	0x0800b369
 800b2f8:	0800b389 	.word	0x0800b389
 800b2fc:	0800b389 	.word	0x0800b389
 800b300:	0800b389 	.word	0x0800b389
 800b304:	0800b389 	.word	0x0800b389
 800b308:	0800b389 	.word	0x0800b389
 800b30c:	0800b389 	.word	0x0800b389
 800b310:	0800b389 	.word	0x0800b389
 800b314:	0800b371 	.word	0x0800b371
 800b318:	0800b389 	.word	0x0800b389
 800b31c:	0800b389 	.word	0x0800b389
 800b320:	0800b389 	.word	0x0800b389
 800b324:	0800b389 	.word	0x0800b389
 800b328:	0800b389 	.word	0x0800b389
 800b32c:	0800b389 	.word	0x0800b389
 800b330:	0800b389 	.word	0x0800b389
 800b334:	0800b379 	.word	0x0800b379
 800b338:	0800b389 	.word	0x0800b389
 800b33c:	0800b389 	.word	0x0800b389
 800b340:	0800b389 	.word	0x0800b389
 800b344:	0800b389 	.word	0x0800b389
 800b348:	0800b389 	.word	0x0800b389
 800b34c:	0800b389 	.word	0x0800b389
 800b350:	0800b389 	.word	0x0800b389
 800b354:	0800b381 	.word	0x0800b381
 800b358:	2301      	movs	r3, #1
 800b35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b35e:	e222      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b360:	2304      	movs	r3, #4
 800b362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b366:	e21e      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b368:	2308      	movs	r3, #8
 800b36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b36e:	e21a      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b370:	2310      	movs	r3, #16
 800b372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b376:	e216      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b378:	2320      	movs	r3, #32
 800b37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b37e:	e212      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b380:	2340      	movs	r3, #64	; 0x40
 800b382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b386:	e20e      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b388:	2380      	movs	r3, #128	; 0x80
 800b38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b38e:	e20a      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a69      	ldr	r2, [pc, #420]	; (800b53c <UART_SetConfig+0x33c>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d130      	bne.n	800b3fc <UART_SetConfig+0x1fc>
 800b39a:	4b67      	ldr	r3, [pc, #412]	; (800b538 <UART_SetConfig+0x338>)
 800b39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b39e:	f003 0307 	and.w	r3, r3, #7
 800b3a2:	2b05      	cmp	r3, #5
 800b3a4:	d826      	bhi.n	800b3f4 <UART_SetConfig+0x1f4>
 800b3a6:	a201      	add	r2, pc, #4	; (adr r2, 800b3ac <UART_SetConfig+0x1ac>)
 800b3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ac:	0800b3c5 	.word	0x0800b3c5
 800b3b0:	0800b3cd 	.word	0x0800b3cd
 800b3b4:	0800b3d5 	.word	0x0800b3d5
 800b3b8:	0800b3dd 	.word	0x0800b3dd
 800b3bc:	0800b3e5 	.word	0x0800b3e5
 800b3c0:	0800b3ed 	.word	0x0800b3ed
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ca:	e1ec      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b3cc:	2304      	movs	r3, #4
 800b3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3d2:	e1e8      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b3d4:	2308      	movs	r3, #8
 800b3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3da:	e1e4      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b3dc:	2310      	movs	r3, #16
 800b3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3e2:	e1e0      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b3e4:	2320      	movs	r3, #32
 800b3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ea:	e1dc      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b3ec:	2340      	movs	r3, #64	; 0x40
 800b3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3f2:	e1d8      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b3f4:	2380      	movs	r3, #128	; 0x80
 800b3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3fa:	e1d4      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a4f      	ldr	r2, [pc, #316]	; (800b540 <UART_SetConfig+0x340>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d130      	bne.n	800b468 <UART_SetConfig+0x268>
 800b406:	4b4c      	ldr	r3, [pc, #304]	; (800b538 <UART_SetConfig+0x338>)
 800b408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b40a:	f003 0307 	and.w	r3, r3, #7
 800b40e:	2b05      	cmp	r3, #5
 800b410:	d826      	bhi.n	800b460 <UART_SetConfig+0x260>
 800b412:	a201      	add	r2, pc, #4	; (adr r2, 800b418 <UART_SetConfig+0x218>)
 800b414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b418:	0800b431 	.word	0x0800b431
 800b41c:	0800b439 	.word	0x0800b439
 800b420:	0800b441 	.word	0x0800b441
 800b424:	0800b449 	.word	0x0800b449
 800b428:	0800b451 	.word	0x0800b451
 800b42c:	0800b459 	.word	0x0800b459
 800b430:	2300      	movs	r3, #0
 800b432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b436:	e1b6      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b438:	2304      	movs	r3, #4
 800b43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b43e:	e1b2      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b440:	2308      	movs	r3, #8
 800b442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b446:	e1ae      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b448:	2310      	movs	r3, #16
 800b44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b44e:	e1aa      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b450:	2320      	movs	r3, #32
 800b452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b456:	e1a6      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b458:	2340      	movs	r3, #64	; 0x40
 800b45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b45e:	e1a2      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b460:	2380      	movs	r3, #128	; 0x80
 800b462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b466:	e19e      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a35      	ldr	r2, [pc, #212]	; (800b544 <UART_SetConfig+0x344>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d130      	bne.n	800b4d4 <UART_SetConfig+0x2d4>
 800b472:	4b31      	ldr	r3, [pc, #196]	; (800b538 <UART_SetConfig+0x338>)
 800b474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b476:	f003 0307 	and.w	r3, r3, #7
 800b47a:	2b05      	cmp	r3, #5
 800b47c:	d826      	bhi.n	800b4cc <UART_SetConfig+0x2cc>
 800b47e:	a201      	add	r2, pc, #4	; (adr r2, 800b484 <UART_SetConfig+0x284>)
 800b480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b484:	0800b49d 	.word	0x0800b49d
 800b488:	0800b4a5 	.word	0x0800b4a5
 800b48c:	0800b4ad 	.word	0x0800b4ad
 800b490:	0800b4b5 	.word	0x0800b4b5
 800b494:	0800b4bd 	.word	0x0800b4bd
 800b498:	0800b4c5 	.word	0x0800b4c5
 800b49c:	2300      	movs	r3, #0
 800b49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4a2:	e180      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b4a4:	2304      	movs	r3, #4
 800b4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4aa:	e17c      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b4ac:	2308      	movs	r3, #8
 800b4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4b2:	e178      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b4b4:	2310      	movs	r3, #16
 800b4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ba:	e174      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b4bc:	2320      	movs	r3, #32
 800b4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4c2:	e170      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b4c4:	2340      	movs	r3, #64	; 0x40
 800b4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ca:	e16c      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b4cc:	2380      	movs	r3, #128	; 0x80
 800b4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4d2:	e168      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a1b      	ldr	r2, [pc, #108]	; (800b548 <UART_SetConfig+0x348>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d142      	bne.n	800b564 <UART_SetConfig+0x364>
 800b4de:	4b16      	ldr	r3, [pc, #88]	; (800b538 <UART_SetConfig+0x338>)
 800b4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4e2:	f003 0307 	and.w	r3, r3, #7
 800b4e6:	2b05      	cmp	r3, #5
 800b4e8:	d838      	bhi.n	800b55c <UART_SetConfig+0x35c>
 800b4ea:	a201      	add	r2, pc, #4	; (adr r2, 800b4f0 <UART_SetConfig+0x2f0>)
 800b4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f0:	0800b509 	.word	0x0800b509
 800b4f4:	0800b511 	.word	0x0800b511
 800b4f8:	0800b519 	.word	0x0800b519
 800b4fc:	0800b521 	.word	0x0800b521
 800b500:	0800b54d 	.word	0x0800b54d
 800b504:	0800b555 	.word	0x0800b555
 800b508:	2300      	movs	r3, #0
 800b50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b50e:	e14a      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b510:	2304      	movs	r3, #4
 800b512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b516:	e146      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b518:	2308      	movs	r3, #8
 800b51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b51e:	e142      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b520:	2310      	movs	r3, #16
 800b522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b526:	e13e      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b528:	cfff69f3 	.word	0xcfff69f3
 800b52c:	58000c00 	.word	0x58000c00
 800b530:	11fff4ff 	.word	0x11fff4ff
 800b534:	40011000 	.word	0x40011000
 800b538:	58024400 	.word	0x58024400
 800b53c:	40004400 	.word	0x40004400
 800b540:	40004800 	.word	0x40004800
 800b544:	40004c00 	.word	0x40004c00
 800b548:	40005000 	.word	0x40005000
 800b54c:	2320      	movs	r3, #32
 800b54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b552:	e128      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b554:	2340      	movs	r3, #64	; 0x40
 800b556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b55a:	e124      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b55c:	2380      	movs	r3, #128	; 0x80
 800b55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b562:	e120      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4acb      	ldr	r2, [pc, #812]	; (800b898 <UART_SetConfig+0x698>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d176      	bne.n	800b65c <UART_SetConfig+0x45c>
 800b56e:	4bcb      	ldr	r3, [pc, #812]	; (800b89c <UART_SetConfig+0x69c>)
 800b570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b572:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b576:	2b28      	cmp	r3, #40	; 0x28
 800b578:	d86c      	bhi.n	800b654 <UART_SetConfig+0x454>
 800b57a:	a201      	add	r2, pc, #4	; (adr r2, 800b580 <UART_SetConfig+0x380>)
 800b57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b580:	0800b625 	.word	0x0800b625
 800b584:	0800b655 	.word	0x0800b655
 800b588:	0800b655 	.word	0x0800b655
 800b58c:	0800b655 	.word	0x0800b655
 800b590:	0800b655 	.word	0x0800b655
 800b594:	0800b655 	.word	0x0800b655
 800b598:	0800b655 	.word	0x0800b655
 800b59c:	0800b655 	.word	0x0800b655
 800b5a0:	0800b62d 	.word	0x0800b62d
 800b5a4:	0800b655 	.word	0x0800b655
 800b5a8:	0800b655 	.word	0x0800b655
 800b5ac:	0800b655 	.word	0x0800b655
 800b5b0:	0800b655 	.word	0x0800b655
 800b5b4:	0800b655 	.word	0x0800b655
 800b5b8:	0800b655 	.word	0x0800b655
 800b5bc:	0800b655 	.word	0x0800b655
 800b5c0:	0800b635 	.word	0x0800b635
 800b5c4:	0800b655 	.word	0x0800b655
 800b5c8:	0800b655 	.word	0x0800b655
 800b5cc:	0800b655 	.word	0x0800b655
 800b5d0:	0800b655 	.word	0x0800b655
 800b5d4:	0800b655 	.word	0x0800b655
 800b5d8:	0800b655 	.word	0x0800b655
 800b5dc:	0800b655 	.word	0x0800b655
 800b5e0:	0800b63d 	.word	0x0800b63d
 800b5e4:	0800b655 	.word	0x0800b655
 800b5e8:	0800b655 	.word	0x0800b655
 800b5ec:	0800b655 	.word	0x0800b655
 800b5f0:	0800b655 	.word	0x0800b655
 800b5f4:	0800b655 	.word	0x0800b655
 800b5f8:	0800b655 	.word	0x0800b655
 800b5fc:	0800b655 	.word	0x0800b655
 800b600:	0800b645 	.word	0x0800b645
 800b604:	0800b655 	.word	0x0800b655
 800b608:	0800b655 	.word	0x0800b655
 800b60c:	0800b655 	.word	0x0800b655
 800b610:	0800b655 	.word	0x0800b655
 800b614:	0800b655 	.word	0x0800b655
 800b618:	0800b655 	.word	0x0800b655
 800b61c:	0800b655 	.word	0x0800b655
 800b620:	0800b64d 	.word	0x0800b64d
 800b624:	2301      	movs	r3, #1
 800b626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b62a:	e0bc      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b62c:	2304      	movs	r3, #4
 800b62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b632:	e0b8      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b634:	2308      	movs	r3, #8
 800b636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b63a:	e0b4      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b63c:	2310      	movs	r3, #16
 800b63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b642:	e0b0      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b644:	2320      	movs	r3, #32
 800b646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b64a:	e0ac      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b64c:	2340      	movs	r3, #64	; 0x40
 800b64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b652:	e0a8      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b654:	2380      	movs	r3, #128	; 0x80
 800b656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b65a:	e0a4      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a8f      	ldr	r2, [pc, #572]	; (800b8a0 <UART_SetConfig+0x6a0>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d130      	bne.n	800b6c8 <UART_SetConfig+0x4c8>
 800b666:	4b8d      	ldr	r3, [pc, #564]	; (800b89c <UART_SetConfig+0x69c>)
 800b668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b66a:	f003 0307 	and.w	r3, r3, #7
 800b66e:	2b05      	cmp	r3, #5
 800b670:	d826      	bhi.n	800b6c0 <UART_SetConfig+0x4c0>
 800b672:	a201      	add	r2, pc, #4	; (adr r2, 800b678 <UART_SetConfig+0x478>)
 800b674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b678:	0800b691 	.word	0x0800b691
 800b67c:	0800b699 	.word	0x0800b699
 800b680:	0800b6a1 	.word	0x0800b6a1
 800b684:	0800b6a9 	.word	0x0800b6a9
 800b688:	0800b6b1 	.word	0x0800b6b1
 800b68c:	0800b6b9 	.word	0x0800b6b9
 800b690:	2300      	movs	r3, #0
 800b692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b696:	e086      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b698:	2304      	movs	r3, #4
 800b69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b69e:	e082      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b6a0:	2308      	movs	r3, #8
 800b6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6a6:	e07e      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b6a8:	2310      	movs	r3, #16
 800b6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ae:	e07a      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b6b0:	2320      	movs	r3, #32
 800b6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6b6:	e076      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b6b8:	2340      	movs	r3, #64	; 0x40
 800b6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6be:	e072      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b6c0:	2380      	movs	r3, #128	; 0x80
 800b6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6c6:	e06e      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a75      	ldr	r2, [pc, #468]	; (800b8a4 <UART_SetConfig+0x6a4>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d130      	bne.n	800b734 <UART_SetConfig+0x534>
 800b6d2:	4b72      	ldr	r3, [pc, #456]	; (800b89c <UART_SetConfig+0x69c>)
 800b6d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6d6:	f003 0307 	and.w	r3, r3, #7
 800b6da:	2b05      	cmp	r3, #5
 800b6dc:	d826      	bhi.n	800b72c <UART_SetConfig+0x52c>
 800b6de:	a201      	add	r2, pc, #4	; (adr r2, 800b6e4 <UART_SetConfig+0x4e4>)
 800b6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e4:	0800b6fd 	.word	0x0800b6fd
 800b6e8:	0800b705 	.word	0x0800b705
 800b6ec:	0800b70d 	.word	0x0800b70d
 800b6f0:	0800b715 	.word	0x0800b715
 800b6f4:	0800b71d 	.word	0x0800b71d
 800b6f8:	0800b725 	.word	0x0800b725
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b702:	e050      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b704:	2304      	movs	r3, #4
 800b706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b70a:	e04c      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b70c:	2308      	movs	r3, #8
 800b70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b712:	e048      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b714:	2310      	movs	r3, #16
 800b716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b71a:	e044      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b71c:	2320      	movs	r3, #32
 800b71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b722:	e040      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b724:	2340      	movs	r3, #64	; 0x40
 800b726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b72a:	e03c      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b72c:	2380      	movs	r3, #128	; 0x80
 800b72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b732:	e038      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a5b      	ldr	r2, [pc, #364]	; (800b8a8 <UART_SetConfig+0x6a8>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d130      	bne.n	800b7a0 <UART_SetConfig+0x5a0>
 800b73e:	4b57      	ldr	r3, [pc, #348]	; (800b89c <UART_SetConfig+0x69c>)
 800b740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b742:	f003 0307 	and.w	r3, r3, #7
 800b746:	2b05      	cmp	r3, #5
 800b748:	d826      	bhi.n	800b798 <UART_SetConfig+0x598>
 800b74a:	a201      	add	r2, pc, #4	; (adr r2, 800b750 <UART_SetConfig+0x550>)
 800b74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b750:	0800b769 	.word	0x0800b769
 800b754:	0800b771 	.word	0x0800b771
 800b758:	0800b779 	.word	0x0800b779
 800b75c:	0800b781 	.word	0x0800b781
 800b760:	0800b789 	.word	0x0800b789
 800b764:	0800b791 	.word	0x0800b791
 800b768:	2302      	movs	r3, #2
 800b76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b76e:	e01a      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b770:	2304      	movs	r3, #4
 800b772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b776:	e016      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b778:	2308      	movs	r3, #8
 800b77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b77e:	e012      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b780:	2310      	movs	r3, #16
 800b782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b786:	e00e      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b788:	2320      	movs	r3, #32
 800b78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b78e:	e00a      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b790:	2340      	movs	r3, #64	; 0x40
 800b792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b796:	e006      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b798:	2380      	movs	r3, #128	; 0x80
 800b79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b79e:	e002      	b.n	800b7a6 <UART_SetConfig+0x5a6>
 800b7a0:	2380      	movs	r3, #128	; 0x80
 800b7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a3f      	ldr	r2, [pc, #252]	; (800b8a8 <UART_SetConfig+0x6a8>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	f040 80f8 	bne.w	800b9a2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b7b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b7b6:	2b20      	cmp	r3, #32
 800b7b8:	dc46      	bgt.n	800b848 <UART_SetConfig+0x648>
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	f2c0 8082 	blt.w	800b8c4 <UART_SetConfig+0x6c4>
 800b7c0:	3b02      	subs	r3, #2
 800b7c2:	2b1e      	cmp	r3, #30
 800b7c4:	d87e      	bhi.n	800b8c4 <UART_SetConfig+0x6c4>
 800b7c6:	a201      	add	r2, pc, #4	; (adr r2, 800b7cc <UART_SetConfig+0x5cc>)
 800b7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7cc:	0800b84f 	.word	0x0800b84f
 800b7d0:	0800b8c5 	.word	0x0800b8c5
 800b7d4:	0800b857 	.word	0x0800b857
 800b7d8:	0800b8c5 	.word	0x0800b8c5
 800b7dc:	0800b8c5 	.word	0x0800b8c5
 800b7e0:	0800b8c5 	.word	0x0800b8c5
 800b7e4:	0800b867 	.word	0x0800b867
 800b7e8:	0800b8c5 	.word	0x0800b8c5
 800b7ec:	0800b8c5 	.word	0x0800b8c5
 800b7f0:	0800b8c5 	.word	0x0800b8c5
 800b7f4:	0800b8c5 	.word	0x0800b8c5
 800b7f8:	0800b8c5 	.word	0x0800b8c5
 800b7fc:	0800b8c5 	.word	0x0800b8c5
 800b800:	0800b8c5 	.word	0x0800b8c5
 800b804:	0800b877 	.word	0x0800b877
 800b808:	0800b8c5 	.word	0x0800b8c5
 800b80c:	0800b8c5 	.word	0x0800b8c5
 800b810:	0800b8c5 	.word	0x0800b8c5
 800b814:	0800b8c5 	.word	0x0800b8c5
 800b818:	0800b8c5 	.word	0x0800b8c5
 800b81c:	0800b8c5 	.word	0x0800b8c5
 800b820:	0800b8c5 	.word	0x0800b8c5
 800b824:	0800b8c5 	.word	0x0800b8c5
 800b828:	0800b8c5 	.word	0x0800b8c5
 800b82c:	0800b8c5 	.word	0x0800b8c5
 800b830:	0800b8c5 	.word	0x0800b8c5
 800b834:	0800b8c5 	.word	0x0800b8c5
 800b838:	0800b8c5 	.word	0x0800b8c5
 800b83c:	0800b8c5 	.word	0x0800b8c5
 800b840:	0800b8c5 	.word	0x0800b8c5
 800b844:	0800b8b7 	.word	0x0800b8b7
 800b848:	2b40      	cmp	r3, #64	; 0x40
 800b84a:	d037      	beq.n	800b8bc <UART_SetConfig+0x6bc>
 800b84c:	e03a      	b.n	800b8c4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b84e:	f7fc ff95 	bl	800877c <HAL_RCCEx_GetD3PCLK1Freq>
 800b852:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b854:	e03c      	b.n	800b8d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fc ffa4 	bl	80087a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b864:	e034      	b.n	800b8d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b866:	f107 0318 	add.w	r3, r7, #24
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fd f8f0 	bl	8008a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b874:	e02c      	b.n	800b8d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b876:	4b09      	ldr	r3, [pc, #36]	; (800b89c <UART_SetConfig+0x69c>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f003 0320 	and.w	r3, r3, #32
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d016      	beq.n	800b8b0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b882:	4b06      	ldr	r3, [pc, #24]	; (800b89c <UART_SetConfig+0x69c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	08db      	lsrs	r3, r3, #3
 800b888:	f003 0303 	and.w	r3, r3, #3
 800b88c:	4a07      	ldr	r2, [pc, #28]	; (800b8ac <UART_SetConfig+0x6ac>)
 800b88e:	fa22 f303 	lsr.w	r3, r2, r3
 800b892:	63fb      	str	r3, [r7, #60]	; 0x3c
>>>>>>> Stashed changes
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
<<<<<<< Updated upstream
 80084d0:	e01c      	b.n	800850c <UART_SetConfig+0x6d0>
 80084d2:	bf00      	nop
 80084d4:	40011400 	.word	0x40011400
 80084d8:	58024400 	.word	0x58024400
 80084dc:	40007800 	.word	0x40007800
 80084e0:	40007c00 	.word	0x40007c00
 80084e4:	58000c00 	.word	0x58000c00
 80084e8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80084ec:	4b9d      	ldr	r3, [pc, #628]	; (8008764 <UART_SetConfig+0x928>)
 80084ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f0:	e00c      	b.n	800850c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80084f2:	4b9d      	ldr	r3, [pc, #628]	; (8008768 <UART_SetConfig+0x92c>)
 80084f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f6:	e009      	b.n	800850c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084fe:	e005      	b.n	800850c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008500:	2300      	movs	r3, #0
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800850a:	bf00      	nop
=======
 800b894:	e01c      	b.n	800b8d0 <UART_SetConfig+0x6d0>
 800b896:	bf00      	nop
 800b898:	40011400 	.word	0x40011400
 800b89c:	58024400 	.word	0x58024400
 800b8a0:	40007800 	.word	0x40007800
 800b8a4:	40007c00 	.word	0x40007c00
 800b8a8:	58000c00 	.word	0x58000c00
 800b8ac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b8b0:	4b9d      	ldr	r3, [pc, #628]	; (800bb28 <UART_SetConfig+0x928>)
 800b8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8b4:	e00c      	b.n	800b8d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b8b6:	4b9d      	ldr	r3, [pc, #628]	; (800bb2c <UART_SetConfig+0x92c>)
 800b8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8ba:	e009      	b.n	800b8d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8c2:	e005      	b.n	800b8d0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b8ce:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< Updated upstream
 800850c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 81de 	beq.w	80088d0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008518:	4a94      	ldr	r2, [pc, #592]	; (800876c <UART_SetConfig+0x930>)
 800851a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800851e:	461a      	mov	r2, r3
 8008520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008522:	fbb3 f3f2 	udiv	r3, r3, r2
 8008526:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	4613      	mov	r3, r2
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	4413      	add	r3, r2
 8008532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008534:	429a      	cmp	r2, r3
 8008536:	d305      	bcc.n	8008544 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800853e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008540:	429a      	cmp	r2, r3
 8008542:	d903      	bls.n	800854c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800854a:	e1c1      	b.n	80088d0 <UART_SetConfig+0xa94>
=======
 800b8d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f000 81de 	beq.w	800bc94 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8dc:	4a94      	ldr	r2, [pc, #592]	; (800bb30 <UART_SetConfig+0x930>)
 800b8de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8ea:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	685a      	ldr	r2, [r3, #4]
 800b8f0:	4613      	mov	r3, r2
 800b8f2:	005b      	lsls	r3, r3, #1
 800b8f4:	4413      	add	r3, r2
 800b8f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d305      	bcc.n	800b908 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b904:	429a      	cmp	r2, r3
 800b906:	d903      	bls.n	800b910 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b90e:	e1c1      	b.n	800bc94 <UART_SetConfig+0xa94>
>>>>>>> Stashed changes
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
<<<<<<< Updated upstream
 800854c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854e:	2200      	movs	r2, #0
 8008550:	60bb      	str	r3, [r7, #8]
 8008552:	60fa      	str	r2, [r7, #12]
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008558:	4a84      	ldr	r2, [pc, #528]	; (800876c <UART_SetConfig+0x930>)
 800855a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800855e:	b29b      	uxth	r3, r3
 8008560:	2200      	movs	r2, #0
 8008562:	603b      	str	r3, [r7, #0]
 8008564:	607a      	str	r2, [r7, #4]
 8008566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800856a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800856e:	f7f7 ff0f 	bl	8000390 <__aeabi_uldivmod>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4610      	mov	r0, r2
 8008578:	4619      	mov	r1, r3
 800857a:	f04f 0200 	mov.w	r2, #0
 800857e:	f04f 0300 	mov.w	r3, #0
 8008582:	020b      	lsls	r3, r1, #8
 8008584:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008588:	0202      	lsls	r2, r0, #8
 800858a:	6979      	ldr	r1, [r7, #20]
 800858c:	6849      	ldr	r1, [r1, #4]
 800858e:	0849      	lsrs	r1, r1, #1
 8008590:	2000      	movs	r0, #0
 8008592:	460c      	mov	r4, r1
 8008594:	4605      	mov	r5, r0
 8008596:	eb12 0804 	adds.w	r8, r2, r4
 800859a:	eb43 0905 	adc.w	r9, r3, r5
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	469a      	mov	sl, r3
 80085a6:	4693      	mov	fp, r2
 80085a8:	4652      	mov	r2, sl
 80085aa:	465b      	mov	r3, fp
 80085ac:	4640      	mov	r0, r8
 80085ae:	4649      	mov	r1, r9
 80085b0:	f7f7 feee 	bl	8000390 <__aeabi_uldivmod>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4613      	mov	r3, r2
 80085ba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085c2:	d308      	bcc.n	80085d6 <UART_SetConfig+0x79a>
 80085c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085ca:	d204      	bcs.n	80085d6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085d2:	60da      	str	r2, [r3, #12]
 80085d4:	e17c      	b.n	80088d0 <UART_SetConfig+0xa94>
=======
 800b910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b912:	2200      	movs	r2, #0
 800b914:	60bb      	str	r3, [r7, #8]
 800b916:	60fa      	str	r2, [r7, #12]
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91c:	4a84      	ldr	r2, [pc, #528]	; (800bb30 <UART_SetConfig+0x930>)
 800b91e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b922:	b29b      	uxth	r3, r3
 800b924:	2200      	movs	r2, #0
 800b926:	603b      	str	r3, [r7, #0]
 800b928:	607a      	str	r2, [r7, #4]
 800b92a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b92e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b932:	f7f4 fd2d 	bl	8000390 <__aeabi_uldivmod>
 800b936:	4602      	mov	r2, r0
 800b938:	460b      	mov	r3, r1
 800b93a:	4610      	mov	r0, r2
 800b93c:	4619      	mov	r1, r3
 800b93e:	f04f 0200 	mov.w	r2, #0
 800b942:	f04f 0300 	mov.w	r3, #0
 800b946:	020b      	lsls	r3, r1, #8
 800b948:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b94c:	0202      	lsls	r2, r0, #8
 800b94e:	6979      	ldr	r1, [r7, #20]
 800b950:	6849      	ldr	r1, [r1, #4]
 800b952:	0849      	lsrs	r1, r1, #1
 800b954:	2000      	movs	r0, #0
 800b956:	460c      	mov	r4, r1
 800b958:	4605      	mov	r5, r0
 800b95a:	eb12 0804 	adds.w	r8, r2, r4
 800b95e:	eb43 0905 	adc.w	r9, r3, r5
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	469a      	mov	sl, r3
 800b96a:	4693      	mov	fp, r2
 800b96c:	4652      	mov	r2, sl
 800b96e:	465b      	mov	r3, fp
 800b970:	4640      	mov	r0, r8
 800b972:	4649      	mov	r1, r9
 800b974:	f7f4 fd0c 	bl	8000390 <__aeabi_uldivmod>
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	4613      	mov	r3, r2
 800b97e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b986:	d308      	bcc.n	800b99a <UART_SetConfig+0x79a>
 800b988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b98e:	d204      	bcs.n	800b99a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b996:	60da      	str	r2, [r3, #12]
 800b998:	e17c      	b.n	800bc94 <UART_SetConfig+0xa94>
>>>>>>> Stashed changes
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< Updated upstream
 80085d6:	2301      	movs	r3, #1
 80085d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80085dc:	e178      	b.n	80088d0 <UART_SetConfig+0xa94>
=======
 800b99a:	2301      	movs	r3, #1
 800b99c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b9a0:	e178      	b.n	800bc94 <UART_SetConfig+0xa94>
>>>>>>> Stashed changes
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< Updated upstream
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085e6:	f040 80c5 	bne.w	8008774 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80085ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80085ee:	2b20      	cmp	r3, #32
 80085f0:	dc48      	bgt.n	8008684 <UART_SetConfig+0x848>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	db7b      	blt.n	80086ee <UART_SetConfig+0x8b2>
 80085f6:	2b20      	cmp	r3, #32
 80085f8:	d879      	bhi.n	80086ee <UART_SetConfig+0x8b2>
 80085fa:	a201      	add	r2, pc, #4	; (adr r2, 8008600 <UART_SetConfig+0x7c4>)
 80085fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008600:	0800868b 	.word	0x0800868b
 8008604:	08008693 	.word	0x08008693
 8008608:	080086ef 	.word	0x080086ef
 800860c:	080086ef 	.word	0x080086ef
 8008610:	0800869b 	.word	0x0800869b
 8008614:	080086ef 	.word	0x080086ef
 8008618:	080086ef 	.word	0x080086ef
 800861c:	080086ef 	.word	0x080086ef
 8008620:	080086ab 	.word	0x080086ab
 8008624:	080086ef 	.word	0x080086ef
 8008628:	080086ef 	.word	0x080086ef
 800862c:	080086ef 	.word	0x080086ef
 8008630:	080086ef 	.word	0x080086ef
 8008634:	080086ef 	.word	0x080086ef
 8008638:	080086ef 	.word	0x080086ef
 800863c:	080086ef 	.word	0x080086ef
 8008640:	080086bb 	.word	0x080086bb
 8008644:	080086ef 	.word	0x080086ef
 8008648:	080086ef 	.word	0x080086ef
 800864c:	080086ef 	.word	0x080086ef
 8008650:	080086ef 	.word	0x080086ef
 8008654:	080086ef 	.word	0x080086ef
 8008658:	080086ef 	.word	0x080086ef
 800865c:	080086ef 	.word	0x080086ef
 8008660:	080086ef 	.word	0x080086ef
 8008664:	080086ef 	.word	0x080086ef
 8008668:	080086ef 	.word	0x080086ef
 800866c:	080086ef 	.word	0x080086ef
 8008670:	080086ef 	.word	0x080086ef
 8008674:	080086ef 	.word	0x080086ef
 8008678:	080086ef 	.word	0x080086ef
 800867c:	080086ef 	.word	0x080086ef
 8008680:	080086e1 	.word	0x080086e1
 8008684:	2b40      	cmp	r3, #64	; 0x40
 8008686:	d02e      	beq.n	80086e6 <UART_SetConfig+0x8aa>
 8008688:	e031      	b.n	80086ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800868a:	f7fb ff23 	bl	80044d4 <HAL_RCC_GetPCLK1Freq>
 800868e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008690:	e033      	b.n	80086fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008692:	f7fb ff35 	bl	8004500 <HAL_RCC_GetPCLK2Freq>
 8008696:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008698:	e02f      	b.n	80086fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800869a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fc fea0 	bl	80053e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086a8:	e027      	b.n	80086fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086aa:	f107 0318 	add.w	r3, r7, #24
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fc ffec 	bl	800568c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086b8:	e01f      	b.n	80086fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086ba:	4b2d      	ldr	r3, [pc, #180]	; (8008770 <UART_SetConfig+0x934>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0320 	and.w	r3, r3, #32
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d009      	beq.n	80086da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086c6:	4b2a      	ldr	r3, [pc, #168]	; (8008770 <UART_SetConfig+0x934>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	08db      	lsrs	r3, r3, #3
 80086cc:	f003 0303 	and.w	r3, r3, #3
 80086d0:	4a24      	ldr	r2, [pc, #144]	; (8008764 <UART_SetConfig+0x928>)
 80086d2:	fa22 f303 	lsr.w	r3, r2, r3
 80086d6:	63fb      	str	r3, [r7, #60]	; 0x3c
=======
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	69db      	ldr	r3, [r3, #28]
 800b9a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9aa:	f040 80c5 	bne.w	800bb38 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b9ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b9b2:	2b20      	cmp	r3, #32
 800b9b4:	dc48      	bgt.n	800ba48 <UART_SetConfig+0x848>
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	db7b      	blt.n	800bab2 <UART_SetConfig+0x8b2>
 800b9ba:	2b20      	cmp	r3, #32
 800b9bc:	d879      	bhi.n	800bab2 <UART_SetConfig+0x8b2>
 800b9be:	a201      	add	r2, pc, #4	; (adr r2, 800b9c4 <UART_SetConfig+0x7c4>)
 800b9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c4:	0800ba4f 	.word	0x0800ba4f
 800b9c8:	0800ba57 	.word	0x0800ba57
 800b9cc:	0800bab3 	.word	0x0800bab3
 800b9d0:	0800bab3 	.word	0x0800bab3
 800b9d4:	0800ba5f 	.word	0x0800ba5f
 800b9d8:	0800bab3 	.word	0x0800bab3
 800b9dc:	0800bab3 	.word	0x0800bab3
 800b9e0:	0800bab3 	.word	0x0800bab3
 800b9e4:	0800ba6f 	.word	0x0800ba6f
 800b9e8:	0800bab3 	.word	0x0800bab3
 800b9ec:	0800bab3 	.word	0x0800bab3
 800b9f0:	0800bab3 	.word	0x0800bab3
 800b9f4:	0800bab3 	.word	0x0800bab3
 800b9f8:	0800bab3 	.word	0x0800bab3
 800b9fc:	0800bab3 	.word	0x0800bab3
 800ba00:	0800bab3 	.word	0x0800bab3
 800ba04:	0800ba7f 	.word	0x0800ba7f
 800ba08:	0800bab3 	.word	0x0800bab3
 800ba0c:	0800bab3 	.word	0x0800bab3
 800ba10:	0800bab3 	.word	0x0800bab3
 800ba14:	0800bab3 	.word	0x0800bab3
 800ba18:	0800bab3 	.word	0x0800bab3
 800ba1c:	0800bab3 	.word	0x0800bab3
 800ba20:	0800bab3 	.word	0x0800bab3
 800ba24:	0800bab3 	.word	0x0800bab3
 800ba28:	0800bab3 	.word	0x0800bab3
 800ba2c:	0800bab3 	.word	0x0800bab3
 800ba30:	0800bab3 	.word	0x0800bab3
 800ba34:	0800bab3 	.word	0x0800bab3
 800ba38:	0800bab3 	.word	0x0800bab3
 800ba3c:	0800bab3 	.word	0x0800bab3
 800ba40:	0800bab3 	.word	0x0800bab3
 800ba44:	0800baa5 	.word	0x0800baa5
 800ba48:	2b40      	cmp	r3, #64	; 0x40
 800ba4a:	d02e      	beq.n	800baaa <UART_SetConfig+0x8aa>
 800ba4c:	e031      	b.n	800bab2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba4e:	f7fb ff23 	bl	8007898 <HAL_RCC_GetPCLK1Freq>
 800ba52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba54:	e033      	b.n	800babe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba56:	f7fb ff35 	bl	80078c4 <HAL_RCC_GetPCLK2Freq>
 800ba5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba5c:	e02f      	b.n	800babe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fc fea0 	bl	80087a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba6c:	e027      	b.n	800babe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba6e:	f107 0318 	add.w	r3, r7, #24
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fc ffec 	bl	8008a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba78:	69fb      	ldr	r3, [r7, #28]
 800ba7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba7c:	e01f      	b.n	800babe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba7e:	4b2d      	ldr	r3, [pc, #180]	; (800bb34 <UART_SetConfig+0x934>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f003 0320 	and.w	r3, r3, #32
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d009      	beq.n	800ba9e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba8a:	4b2a      	ldr	r3, [pc, #168]	; (800bb34 <UART_SetConfig+0x934>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	08db      	lsrs	r3, r3, #3
 800ba90:	f003 0303 	and.w	r3, r3, #3
 800ba94:	4a24      	ldr	r2, [pc, #144]	; (800bb28 <UART_SetConfig+0x928>)
 800ba96:	fa22 f303 	lsr.w	r3, r2, r3
 800ba9a:	63fb      	str	r3, [r7, #60]	; 0x3c
>>>>>>> Stashed changes
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
<<<<<<< Updated upstream
 80086d8:	e00f      	b.n	80086fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80086da:	4b22      	ldr	r3, [pc, #136]	; (8008764 <UART_SetConfig+0x928>)
 80086dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086de:	e00c      	b.n	80086fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086e0:	4b21      	ldr	r3, [pc, #132]	; (8008768 <UART_SetConfig+0x92c>)
 80086e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086e4:	e009      	b.n	80086fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ec:	e005      	b.n	80086fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80086f8:	bf00      	nop
=======
 800ba9c:	e00f      	b.n	800babe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ba9e:	4b22      	ldr	r3, [pc, #136]	; (800bb28 <UART_SetConfig+0x928>)
 800baa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baa2:	e00c      	b.n	800babe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800baa4:	4b21      	ldr	r3, [pc, #132]	; (800bb2c <UART_SetConfig+0x92c>)
 800baa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baa8:	e009      	b.n	800babe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800baaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800baae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bab0:	e005      	b.n	800babe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bab2:	2300      	movs	r3, #0
 800bab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800babc:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< Updated upstream
 80086fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 80e7 	beq.w	80088d0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008706:	4a19      	ldr	r2, [pc, #100]	; (800876c <UART_SetConfig+0x930>)
 8008708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800870c:	461a      	mov	r2, r3
 800870e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008710:	fbb3 f3f2 	udiv	r3, r3, r2
 8008714:	005a      	lsls	r2, r3, #1
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	085b      	lsrs	r3, r3, #1
 800871c:	441a      	add	r2, r3
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	fbb2 f3f3 	udiv	r3, r2, r3
 8008726:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872a:	2b0f      	cmp	r3, #15
 800872c:	d916      	bls.n	800875c <UART_SetConfig+0x920>
 800872e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008734:	d212      	bcs.n	800875c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008738:	b29b      	uxth	r3, r3
 800873a:	f023 030f 	bic.w	r3, r3, #15
 800873e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	085b      	lsrs	r3, r3, #1
 8008744:	b29b      	uxth	r3, r3
 8008746:	f003 0307 	and.w	r3, r3, #7
 800874a:	b29a      	uxth	r2, r3
 800874c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800874e:	4313      	orrs	r3, r2
 8008750:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008758:	60da      	str	r2, [r3, #12]
 800875a:	e0b9      	b.n	80088d0 <UART_SetConfig+0xa94>
=======
 800babe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f000 80e7 	beq.w	800bc94 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baca:	4a19      	ldr	r2, [pc, #100]	; (800bb30 <UART_SetConfig+0x930>)
 800bacc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bad0:	461a      	mov	r2, r3
 800bad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bad8:	005a      	lsls	r2, r3, #1
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	085b      	lsrs	r3, r3, #1
 800bae0:	441a      	add	r2, r3
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	fbb2 f3f3 	udiv	r3, r2, r3
 800baea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800baec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baee:	2b0f      	cmp	r3, #15
 800baf0:	d916      	bls.n	800bb20 <UART_SetConfig+0x920>
 800baf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baf8:	d212      	bcs.n	800bb20 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	f023 030f 	bic.w	r3, r3, #15
 800bb02:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb06:	085b      	lsrs	r3, r3, #1
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	f003 0307 	and.w	r3, r3, #7
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bb12:	4313      	orrs	r3, r2
 800bb14:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bb1c:	60da      	str	r2, [r3, #12]
 800bb1e:	e0b9      	b.n	800bc94 <UART_SetConfig+0xa94>
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 800875c:	2301      	movs	r3, #1
 800875e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008762:	e0b5      	b.n	80088d0 <UART_SetConfig+0xa94>
 8008764:	03d09000 	.word	0x03d09000
 8008768:	003d0900 	.word	0x003d0900
 800876c:	0800fde8 	.word	0x0800fde8
 8008770:	58024400 	.word	0x58024400
=======
 800bb20:	2301      	movs	r3, #1
 800bb22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bb26:	e0b5      	b.n	800bc94 <UART_SetConfig+0xa94>
 800bb28:	03d09000 	.word	0x03d09000
 800bb2c:	003d0900 	.word	0x003d0900
 800bb30:	08013e1c 	.word	0x08013e1c
 800bb34:	58024400 	.word	0x58024400
>>>>>>> Stashed changes
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< Updated upstream
 8008774:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008778:	2b20      	cmp	r3, #32
 800877a:	dc49      	bgt.n	8008810 <UART_SetConfig+0x9d4>
 800877c:	2b00      	cmp	r3, #0
 800877e:	db7c      	blt.n	800887a <UART_SetConfig+0xa3e>
 8008780:	2b20      	cmp	r3, #32
 8008782:	d87a      	bhi.n	800887a <UART_SetConfig+0xa3e>
 8008784:	a201      	add	r2, pc, #4	; (adr r2, 800878c <UART_SetConfig+0x950>)
 8008786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878a:	bf00      	nop
 800878c:	08008817 	.word	0x08008817
 8008790:	0800881f 	.word	0x0800881f
 8008794:	0800887b 	.word	0x0800887b
 8008798:	0800887b 	.word	0x0800887b
 800879c:	08008827 	.word	0x08008827
 80087a0:	0800887b 	.word	0x0800887b
 80087a4:	0800887b 	.word	0x0800887b
 80087a8:	0800887b 	.word	0x0800887b
 80087ac:	08008837 	.word	0x08008837
 80087b0:	0800887b 	.word	0x0800887b
 80087b4:	0800887b 	.word	0x0800887b
 80087b8:	0800887b 	.word	0x0800887b
 80087bc:	0800887b 	.word	0x0800887b
 80087c0:	0800887b 	.word	0x0800887b
 80087c4:	0800887b 	.word	0x0800887b
 80087c8:	0800887b 	.word	0x0800887b
 80087cc:	08008847 	.word	0x08008847
 80087d0:	0800887b 	.word	0x0800887b
 80087d4:	0800887b 	.word	0x0800887b
 80087d8:	0800887b 	.word	0x0800887b
 80087dc:	0800887b 	.word	0x0800887b
 80087e0:	0800887b 	.word	0x0800887b
 80087e4:	0800887b 	.word	0x0800887b
 80087e8:	0800887b 	.word	0x0800887b
 80087ec:	0800887b 	.word	0x0800887b
 80087f0:	0800887b 	.word	0x0800887b
 80087f4:	0800887b 	.word	0x0800887b
 80087f8:	0800887b 	.word	0x0800887b
 80087fc:	0800887b 	.word	0x0800887b
 8008800:	0800887b 	.word	0x0800887b
 8008804:	0800887b 	.word	0x0800887b
 8008808:	0800887b 	.word	0x0800887b
 800880c:	0800886d 	.word	0x0800886d
 8008810:	2b40      	cmp	r3, #64	; 0x40
 8008812:	d02e      	beq.n	8008872 <UART_SetConfig+0xa36>
 8008814:	e031      	b.n	800887a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008816:	f7fb fe5d 	bl	80044d4 <HAL_RCC_GetPCLK1Freq>
 800881a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800881c:	e033      	b.n	8008886 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800881e:	f7fb fe6f 	bl	8004500 <HAL_RCC_GetPCLK2Freq>
 8008822:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008824:	e02f      	b.n	8008886 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800882a:	4618      	mov	r0, r3
 800882c:	f7fc fdda 	bl	80053e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008834:	e027      	b.n	8008886 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008836:	f107 0318 	add.w	r3, r7, #24
 800883a:	4618      	mov	r0, r3
 800883c:	f7fc ff26 	bl	800568c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008844:	e01f      	b.n	8008886 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008846:	4b2d      	ldr	r3, [pc, #180]	; (80088fc <UART_SetConfig+0xac0>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0320 	and.w	r3, r3, #32
 800884e:	2b00      	cmp	r3, #0
 8008850:	d009      	beq.n	8008866 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008852:	4b2a      	ldr	r3, [pc, #168]	; (80088fc <UART_SetConfig+0xac0>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	08db      	lsrs	r3, r3, #3
 8008858:	f003 0303 	and.w	r3, r3, #3
 800885c:	4a28      	ldr	r2, [pc, #160]	; (8008900 <UART_SetConfig+0xac4>)
 800885e:	fa22 f303 	lsr.w	r3, r2, r3
 8008862:	63fb      	str	r3, [r7, #60]	; 0x3c
=======
 800bb38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bb3c:	2b20      	cmp	r3, #32
 800bb3e:	dc49      	bgt.n	800bbd4 <UART_SetConfig+0x9d4>
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	db7c      	blt.n	800bc3e <UART_SetConfig+0xa3e>
 800bb44:	2b20      	cmp	r3, #32
 800bb46:	d87a      	bhi.n	800bc3e <UART_SetConfig+0xa3e>
 800bb48:	a201      	add	r2, pc, #4	; (adr r2, 800bb50 <UART_SetConfig+0x950>)
 800bb4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb4e:	bf00      	nop
 800bb50:	0800bbdb 	.word	0x0800bbdb
 800bb54:	0800bbe3 	.word	0x0800bbe3
 800bb58:	0800bc3f 	.word	0x0800bc3f
 800bb5c:	0800bc3f 	.word	0x0800bc3f
 800bb60:	0800bbeb 	.word	0x0800bbeb
 800bb64:	0800bc3f 	.word	0x0800bc3f
 800bb68:	0800bc3f 	.word	0x0800bc3f
 800bb6c:	0800bc3f 	.word	0x0800bc3f
 800bb70:	0800bbfb 	.word	0x0800bbfb
 800bb74:	0800bc3f 	.word	0x0800bc3f
 800bb78:	0800bc3f 	.word	0x0800bc3f
 800bb7c:	0800bc3f 	.word	0x0800bc3f
 800bb80:	0800bc3f 	.word	0x0800bc3f
 800bb84:	0800bc3f 	.word	0x0800bc3f
 800bb88:	0800bc3f 	.word	0x0800bc3f
 800bb8c:	0800bc3f 	.word	0x0800bc3f
 800bb90:	0800bc0b 	.word	0x0800bc0b
 800bb94:	0800bc3f 	.word	0x0800bc3f
 800bb98:	0800bc3f 	.word	0x0800bc3f
 800bb9c:	0800bc3f 	.word	0x0800bc3f
 800bba0:	0800bc3f 	.word	0x0800bc3f
 800bba4:	0800bc3f 	.word	0x0800bc3f
 800bba8:	0800bc3f 	.word	0x0800bc3f
 800bbac:	0800bc3f 	.word	0x0800bc3f
 800bbb0:	0800bc3f 	.word	0x0800bc3f
 800bbb4:	0800bc3f 	.word	0x0800bc3f
 800bbb8:	0800bc3f 	.word	0x0800bc3f
 800bbbc:	0800bc3f 	.word	0x0800bc3f
 800bbc0:	0800bc3f 	.word	0x0800bc3f
 800bbc4:	0800bc3f 	.word	0x0800bc3f
 800bbc8:	0800bc3f 	.word	0x0800bc3f
 800bbcc:	0800bc3f 	.word	0x0800bc3f
 800bbd0:	0800bc31 	.word	0x0800bc31
 800bbd4:	2b40      	cmp	r3, #64	; 0x40
 800bbd6:	d02e      	beq.n	800bc36 <UART_SetConfig+0xa36>
 800bbd8:	e031      	b.n	800bc3e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbda:	f7fb fe5d 	bl	8007898 <HAL_RCC_GetPCLK1Freq>
 800bbde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bbe0:	e033      	b.n	800bc4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbe2:	f7fb fe6f 	bl	80078c4 <HAL_RCC_GetPCLK2Freq>
 800bbe6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bbe8:	e02f      	b.n	800bc4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7fc fdda 	bl	80087a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbf8:	e027      	b.n	800bc4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbfa:	f107 0318 	add.w	r3, r7, #24
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fc ff26 	bl	8008a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc08:	e01f      	b.n	800bc4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc0a:	4b2d      	ldr	r3, [pc, #180]	; (800bcc0 <UART_SetConfig+0xac0>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f003 0320 	and.w	r3, r3, #32
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d009      	beq.n	800bc2a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc16:	4b2a      	ldr	r3, [pc, #168]	; (800bcc0 <UART_SetConfig+0xac0>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	08db      	lsrs	r3, r3, #3
 800bc1c:	f003 0303 	and.w	r3, r3, #3
 800bc20:	4a28      	ldr	r2, [pc, #160]	; (800bcc4 <UART_SetConfig+0xac4>)
 800bc22:	fa22 f303 	lsr.w	r3, r2, r3
 800bc26:	63fb      	str	r3, [r7, #60]	; 0x3c
>>>>>>> Stashed changes
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
<<<<<<< Updated upstream
 8008864:	e00f      	b.n	8008886 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008866:	4b26      	ldr	r3, [pc, #152]	; (8008900 <UART_SetConfig+0xac4>)
 8008868:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800886a:	e00c      	b.n	8008886 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800886c:	4b25      	ldr	r3, [pc, #148]	; (8008904 <UART_SetConfig+0xac8>)
 800886e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008870:	e009      	b.n	8008886 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008878:	e005      	b.n	8008886 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800887a:	2300      	movs	r3, #0
 800887c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008884:	bf00      	nop
    }

    if (pclk != 0U)
 8008886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008888:	2b00      	cmp	r3, #0
 800888a:	d021      	beq.n	80088d0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	4a1d      	ldr	r2, [pc, #116]	; (8008908 <UART_SetConfig+0xacc>)
 8008892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008896:	461a      	mov	r2, r3
 8008898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800889a:	fbb3 f2f2 	udiv	r2, r3, r2
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	085b      	lsrs	r3, r3, #1
 80088a4:	441a      	add	r2, r3
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	2b0f      	cmp	r3, #15
 80088b4:	d909      	bls.n	80088ca <UART_SetConfig+0xa8e>
 80088b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088bc:	d205      	bcs.n	80088ca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60da      	str	r2, [r3, #12]
 80088c8:	e002      	b.n	80088d0 <UART_SetConfig+0xa94>
=======
 800bc28:	e00f      	b.n	800bc4a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bc2a:	4b26      	ldr	r3, [pc, #152]	; (800bcc4 <UART_SetConfig+0xac4>)
 800bc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc2e:	e00c      	b.n	800bc4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc30:	4b25      	ldr	r3, [pc, #148]	; (800bcc8 <UART_SetConfig+0xac8>)
 800bc32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc34:	e009      	b.n	800bc4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc3c:	e005      	b.n	800bc4a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bc48:	bf00      	nop
    }

    if (pclk != 0U)
 800bc4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d021      	beq.n	800bc94 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc54:	4a1d      	ldr	r2, [pc, #116]	; (800bccc <UART_SetConfig+0xacc>)
 800bc56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc5e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	085b      	lsrs	r3, r3, #1
 800bc68:	441a      	add	r2, r3
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc76:	2b0f      	cmp	r3, #15
 800bc78:	d909      	bls.n	800bc8e <UART_SetConfig+0xa8e>
 800bc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc80:	d205      	bcs.n	800bc8e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	60da      	str	r2, [r3, #12]
 800bc8c:	e002      	b.n	800bc94 <UART_SetConfig+0xa94>
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 80088ca:	2301      	movs	r3, #1
 80088cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
=======
 800bc8e:	2301      	movs	r3, #1
 800bc90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
>>>>>>> Stashed changes
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
<<<<<<< Updated upstream
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	2201      	movs	r2, #1
 80088dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	2200      	movs	r2, #0
 80088e4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2200      	movs	r2, #0
 80088ea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80088ec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3748      	adds	r7, #72	; 0x48
 80088f4:	46bd      	mov	sp, r7
 80088f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088fa:	bf00      	nop
 80088fc:	58024400 	.word	0x58024400
 8008900:	03d09000 	.word	0x03d09000
 8008904:	003d0900 	.word	0x003d0900
 8008908:	0800fde8 	.word	0x0800fde8

0800890c <UART_AdvFeatureConfig>:
=======
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	2200      	movs	r2, #0
 800bca8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	2200      	movs	r2, #0
 800bcae:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bcb0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3748      	adds	r7, #72	; 0x48
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcbe:	bf00      	nop
 800bcc0:	58024400 	.word	0x58024400
 800bcc4:	03d09000 	.word	0x03d09000
 800bcc8:	003d0900 	.word	0x003d0900
 800bccc:	08013e1c 	.word	0x08013e1c

0800bcd0 <UART_AdvFeatureConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
=======
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< Updated upstream
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00a      	beq.n	8008936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	430a      	orrs	r2, r1
 8008934:	605a      	str	r2, [r3, #4]
=======
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcdc:	f003 0301 	and.w	r3, r3, #1
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d00a      	beq.n	800bcfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	430a      	orrs	r2, r1
 800bcf8:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< Updated upstream
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893a:	f003 0302 	and.w	r3, r3, #2
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00a      	beq.n	8008958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	430a      	orrs	r2, r1
 8008956:	605a      	str	r2, [r3, #4]
=======
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcfe:	f003 0302 	and.w	r3, r3, #2
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00a      	beq.n	800bd1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	430a      	orrs	r2, r1
 800bd1a:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< Updated upstream
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895c:	f003 0304 	and.w	r3, r3, #4
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00a      	beq.n	800897a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	605a      	str	r2, [r3, #4]
=======
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd20:	f003 0304 	and.w	r3, r3, #4
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00a      	beq.n	800bd3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	430a      	orrs	r2, r1
 800bd3c:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< Updated upstream
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897e:	f003 0308 	and.w	r3, r3, #8
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00a      	beq.n	800899c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	430a      	orrs	r2, r1
 800899a:	605a      	str	r2, [r3, #4]
=======
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd42:	f003 0308 	and.w	r3, r3, #8
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00a      	beq.n	800bd60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	430a      	orrs	r2, r1
 800bd5e:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< Updated upstream
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a0:	f003 0310 	and.w	r3, r3, #16
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00a      	beq.n	80089be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	609a      	str	r2, [r3, #8]
=======
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd64:	f003 0310 	and.w	r3, r3, #16
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00a      	beq.n	800bd82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	430a      	orrs	r2, r1
 800bd80:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< Updated upstream
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c2:	f003 0320 	and.w	r3, r3, #32
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00a      	beq.n	80089e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	609a      	str	r2, [r3, #8]
=======
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd86:	f003 0320 	and.w	r3, r3, #32
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00a      	beq.n	800bda4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	430a      	orrs	r2, r1
 800bda2:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< Updated upstream
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d01a      	beq.n	8008a22 <UART_AdvFeatureConfig+0x116>
=======
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d01a      	beq.n	800bde6 <UART_AdvFeatureConfig+0x116>
>>>>>>> Stashed changes
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< Updated upstream
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a0a:	d10a      	bne.n	8008a22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	605a      	str	r2, [r3, #4]
=======
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	430a      	orrs	r2, r1
 800bdc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdce:	d10a      	bne.n	800bde6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	430a      	orrs	r2, r1
 800bde4:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< Updated upstream
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00a      	beq.n	8008a44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	430a      	orrs	r2, r1
 8008a42:	605a      	str	r2, [r3, #4]
  }
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <UART_CheckIdleState>:
=======
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00a      	beq.n	800be08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	430a      	orrs	r2, r1
 800be06:	605a      	str	r2, [r3, #4]
  }
}
 800be08:	bf00      	nop
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <UART_CheckIdleState>:
>>>>>>> Stashed changes
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af02      	add	r7, sp, #8
 8008a56:	6078      	str	r0, [r7, #4]
=======
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af02      	add	r7, sp, #8
 800be1a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< Updated upstream
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a60:	f7fa fa38 	bl	8002ed4 <HAL_GetTick>
 8008a64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0308 	and.w	r3, r3, #8
 8008a70:	2b08      	cmp	r3, #8
 8008a72:	d10e      	bne.n	8008a92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f82f 	bl	8008ae6 <UART_WaitOnFlagUntilTimeout>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d001      	beq.n	8008a92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e025      	b.n	8008ade <UART_CheckIdleState+0x8e>
=======
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be24:	f7f9 fcc0 	bl	80057a8 <HAL_GetTick>
 800be28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f003 0308 	and.w	r3, r3, #8
 800be34:	2b08      	cmp	r3, #8
 800be36:	d10e      	bne.n	800be56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be3c:	9300      	str	r3, [sp, #0]
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2200      	movs	r2, #0
 800be42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 f82f 	bl	800beaa <UART_WaitOnFlagUntilTimeout>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d001      	beq.n	800be56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be52:	2303      	movs	r3, #3
 800be54:	e025      	b.n	800bea2 <UART_CheckIdleState+0x8e>
>>>>>>> Stashed changes
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< Updated upstream
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0304 	and.w	r3, r3, #4
 8008a9c:	2b04      	cmp	r3, #4
 8008a9e:	d10e      	bne.n	8008abe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f819 	bl	8008ae6 <UART_WaitOnFlagUntilTimeout>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d001      	beq.n	8008abe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e00f      	b.n	8008ade <UART_CheckIdleState+0x8e>
=======
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f003 0304 	and.w	r3, r3, #4
 800be60:	2b04      	cmp	r3, #4
 800be62:	d10e      	bne.n	800be82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be68:	9300      	str	r3, [sp, #0]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2200      	movs	r2, #0
 800be6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 f819 	bl	800beaa <UART_WaitOnFlagUntilTimeout>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be7e:	2303      	movs	r3, #3
 800be80:	e00f      	b.n	800bea2 <UART_CheckIdleState+0x8e>
>>>>>>> Stashed changes
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2220      	movs	r2, #32
 8008aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <UART_WaitOnFlagUntilTimeout>:
=======
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2220      	movs	r2, #32
 800be86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2220      	movs	r2, #32
 800be8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3710      	adds	r7, #16
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <UART_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b09c      	sub	sp, #112	; 0x70
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	603b      	str	r3, [r7, #0]
 8008af2:	4613      	mov	r3, r2
 8008af4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008af6:	e0a9      	b.n	8008c4c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008af8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afe:	f000 80a5 	beq.w	8008c4c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b02:	f7fa f9e7 	bl	8002ed4 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d302      	bcc.n	8008b18 <UART_WaitOnFlagUntilTimeout+0x32>
 8008b12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d140      	bne.n	8008b9a <UART_WaitOnFlagUntilTimeout+0xb4>
=======
 800beaa:	b580      	push	{r7, lr}
 800beac:	b09c      	sub	sp, #112	; 0x70
 800beae:	af00      	add	r7, sp, #0
 800beb0:	60f8      	str	r0, [r7, #12]
 800beb2:	60b9      	str	r1, [r7, #8]
 800beb4:	603b      	str	r3, [r7, #0]
 800beb6:	4613      	mov	r3, r2
 800beb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800beba:	e0a9      	b.n	800c010 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec2:	f000 80a5 	beq.w	800c010 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bec6:	f7f9 fc6f 	bl	80057a8 <HAL_GetTick>
 800beca:	4602      	mov	r2, r0
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	1ad3      	subs	r3, r2, r3
 800bed0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d302      	bcc.n	800bedc <UART_WaitOnFlagUntilTimeout+0x32>
 800bed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d140      	bne.n	800bf5e <UART_WaitOnFlagUntilTimeout+0xb4>
>>>>>>> Stashed changes
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
<<<<<<< Updated upstream
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	653b      	str	r3, [r7, #80]	; 0x50
=======
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	653b      	str	r3, [r7, #80]	; 0x50
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< Updated upstream
 8008b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b20:	e853 3f00 	ldrex	r3, [r3]
 8008b24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b2c:	667b      	str	r3, [r7, #100]	; 0x64
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b38:	65ba      	str	r2, [r7, #88]	; 0x58
=======
 800bee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bee4:	e853 3f00 	ldrex	r3, [r3]
 800bee8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800beea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bef0:	667b      	str	r3, [r7, #100]	; 0x64
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	461a      	mov	r2, r3
 800bef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800befa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800befc:	65ba      	str	r2, [r7, #88]	; 0x58
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< Updated upstream
 8008b3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b3e:	e841 2300 	strex	r3, r2, [r1]
 8008b42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1e6      	bne.n	8008b18 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	3308      	adds	r3, #8
 8008b50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b54:	e853 3f00 	ldrex	r3, [r3]
 8008b58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5c:	f023 0301 	bic.w	r3, r3, #1
 8008b60:	663b      	str	r3, [r7, #96]	; 0x60
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3308      	adds	r3, #8
 8008b68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b72:	e841 2300 	strex	r3, r2, [r1]
 8008b76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1e5      	bne.n	8008b4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2220      	movs	r2, #32
 8008b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2220      	movs	r2, #32
 8008b8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e069      	b.n	8008c6e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0304 	and.w	r3, r3, #4
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d051      	beq.n	8008c4c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bb6:	d149      	bne.n	8008c4c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bc0:	621a      	str	r2, [r3, #32]
=======
 800befe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf02:	e841 2300 	strex	r3, r2, [r1]
 800bf06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bf08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d1e6      	bne.n	800bedc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	3308      	adds	r3, #8
 800bf14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf18:	e853 3f00 	ldrex	r3, [r3]
 800bf1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf20:	f023 0301 	bic.w	r3, r3, #1
 800bf24:	663b      	str	r3, [r7, #96]	; 0x60
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	3308      	adds	r3, #8
 800bf2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bf2e:	64ba      	str	r2, [r7, #72]	; 0x48
 800bf30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf36:	e841 2300 	strex	r3, r2, [r1]
 800bf3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bf3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d1e5      	bne.n	800bf0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2220      	movs	r2, #32
 800bf46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2220      	movs	r2, #32
 800bf4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bf5a:	2303      	movs	r3, #3
 800bf5c:	e069      	b.n	800c032 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f003 0304 	and.w	r3, r3, #4
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d051      	beq.n	800c010 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	69db      	ldr	r3, [r3, #28]
 800bf72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf7a:	d149      	bne.n	800c010 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf84:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
<<<<<<< Updated upstream
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	e853 3f00 	ldrex	r3, [r3]
 8008bce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be0:	637b      	str	r3, [r7, #52]	; 0x34
 8008be2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008be8:	e841 2300 	strex	r3, r2, [r1]
 8008bec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e6      	bne.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	3308      	adds	r3, #8
 8008bfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	e853 3f00 	ldrex	r3, [r3]
 8008c02:	613b      	str	r3, [r7, #16]
   return(result);
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f023 0301 	bic.w	r3, r3, #1
 8008c0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3308      	adds	r3, #8
 8008c12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c14:	623a      	str	r2, [r7, #32]
 8008c16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c18:	69f9      	ldr	r1, [r7, #28]
 8008c1a:	6a3a      	ldr	r2, [r7, #32]
 8008c1c:	e841 2300 	strex	r3, r2, [r1]
 8008c20:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1e5      	bne.n	8008bf4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2220      	movs	r2, #32
 8008c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2220      	movs	r2, #32
 8008c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2220      	movs	r2, #32
 8008c3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e010      	b.n	8008c6e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	69da      	ldr	r2, [r3, #28]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	4013      	ands	r3, r2
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	bf0c      	ite	eq
 8008c5c:	2301      	moveq	r3, #1
 8008c5e:	2300      	movne	r3, #0
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	461a      	mov	r2, r3
 8008c64:	79fb      	ldrb	r3, [r7, #7]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	f43f af46 	beq.w	8008af8 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8e:	e853 3f00 	ldrex	r3, [r3]
 800bf92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bf9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfa4:	637b      	str	r3, [r7, #52]	; 0x34
 800bfa6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bfaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfac:	e841 2300 	strex	r3, r2, [r1]
 800bfb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1e6      	bne.n	800bf86 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	3308      	adds	r3, #8
 800bfbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	e853 3f00 	ldrex	r3, [r3]
 800bfc6:	613b      	str	r3, [r7, #16]
   return(result);
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	f023 0301 	bic.w	r3, r3, #1
 800bfce:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	3308      	adds	r3, #8
 800bfd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bfd8:	623a      	str	r2, [r7, #32]
 800bfda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfdc:	69f9      	ldr	r1, [r7, #28]
 800bfde:	6a3a      	ldr	r2, [r7, #32]
 800bfe0:	e841 2300 	strex	r3, r2, [r1]
 800bfe4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1e5      	bne.n	800bfb8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2220      	movs	r2, #32
 800bff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2220      	movs	r2, #32
 800bff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2220      	movs	r2, #32
 800c000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2200      	movs	r2, #0
 800c008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c00c:	2303      	movs	r3, #3
 800c00e:	e010      	b.n	800c032 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	69da      	ldr	r2, [r3, #28]
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	4013      	ands	r3, r2
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	bf0c      	ite	eq
 800c020:	2301      	moveq	r3, #1
 800c022:	2300      	movne	r3, #0
 800c024:	b2db      	uxtb	r3, r3
 800c026:	461a      	mov	r2, r3
 800c028:	79fb      	ldrb	r3, [r7, #7]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	f43f af46 	beq.w	800bebc <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3770      	adds	r7, #112	; 0x70
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <HAL_UARTEx_DisableFifoMode>:
=======
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	3770      	adds	r7, #112	; 0x70
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <HAL_UARTEx_DisableFifoMode>:
>>>>>>> Stashed changes
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008c76:	b480      	push	{r7}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
=======
 800c03a:	b480      	push	{r7}
 800c03c:	b085      	sub	sp, #20
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< Updated upstream
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d101      	bne.n	8008c8c <HAL_UARTEx_DisableFifoMode+0x16>
 8008c88:	2302      	movs	r3, #2
 8008c8a:	e027      	b.n	8008cdc <HAL_UARTEx_DisableFifoMode+0x66>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2224      	movs	r2, #36	; 0x24
 8008c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 0201 	bic.w	r2, r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008cba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_UARTEx_SetTxFifoThreshold>:
=======
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c048:	2b01      	cmp	r3, #1
 800c04a:	d101      	bne.n	800c050 <HAL_UARTEx_DisableFifoMode+0x16>
 800c04c:	2302      	movs	r3, #2
 800c04e:	e027      	b.n	800c0a0 <HAL_UARTEx_DisableFifoMode+0x66>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2224      	movs	r2, #36	; 0x24
 800c05c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f022 0201 	bic.w	r2, r2, #1
 800c076:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c07e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	68fa      	ldr	r2, [r7, #12]
 800c08c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2220      	movs	r2, #32
 800c092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3714      	adds	r7, #20
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <HAL_UARTEx_SetTxFifoThreshold>:
>>>>>>> Stashed changes
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< Updated upstream
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
=======
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< Updated upstream
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d101      	bne.n	8008d00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	e02d      	b.n	8008d5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2224      	movs	r2, #36	; 0x24
 8008d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f022 0201 	bic.w	r2, r2, #1
 8008d26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f84f 	bl	8008de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <HAL_UARTEx_SetRxFifoThreshold>:
=======
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d101      	bne.n	800c0c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c0c0:	2302      	movs	r3, #2
 800c0c2:	e02d      	b.n	800c120 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2224      	movs	r2, #36	; 0x24
 800c0d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f022 0201 	bic.w	r2, r2, #1
 800c0ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	430a      	orrs	r2, r1
 800c0fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 f84f 	bl	800c1a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2220      	movs	r2, #32
 800c112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	3710      	adds	r7, #16
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <HAL_UARTEx_SetRxFifoThreshold>:
>>>>>>> Stashed changes
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< Updated upstream
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
=======
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< Updated upstream
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d101      	bne.n	8008d7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d78:	2302      	movs	r3, #2
 8008d7a:	e02d      	b.n	8008dd8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2224      	movs	r2, #36	; 0x24
 8008d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f022 0201 	bic.w	r2, r2, #1
 8008da2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	430a      	orrs	r2, r1
 8008db6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f811 	bl	8008de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2220      	movs	r2, #32
 8008dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <UARTEx_SetNbDataToProcess>:
=======
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d101      	bne.n	800c140 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c13c:	2302      	movs	r3, #2
 800c13e:	e02d      	b.n	800c19c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2224      	movs	r2, #36	; 0x24
 800c14c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f022 0201 	bic.w	r2, r2, #1
 800c166:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	683a      	ldr	r2, [r7, #0]
 800c178:	430a      	orrs	r2, r1
 800c17a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 f811 	bl	800c1a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2220      	movs	r2, #32
 800c18e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c19a:	2300      	movs	r3, #0
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3710      	adds	r7, #16
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <UARTEx_SetNbDataToProcess>:
>>>>>>> Stashed changes
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
=======
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
<<<<<<< Updated upstream
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d108      	bne.n	8008e02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
=======
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d108      	bne.n	800c1c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
>>>>>>> Stashed changes
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
<<<<<<< Updated upstream
 8008e00:	e031      	b.n	8008e66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e02:	2310      	movs	r3, #16
 8008e04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e06:	2310      	movs	r3, #16
 8008e08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	0e5b      	lsrs	r3, r3, #25
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	f003 0307 	and.w	r3, r3, #7
 8008e18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	0f5b      	lsrs	r3, r3, #29
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	f003 0307 	and.w	r3, r3, #7
 8008e28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
 8008e2c:	7b3a      	ldrb	r2, [r7, #12]
 8008e2e:	4911      	ldr	r1, [pc, #68]	; (8008e74 <UARTEx_SetNbDataToProcess+0x94>)
 8008e30:	5c8a      	ldrb	r2, [r1, r2]
 8008e32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e36:	7b3a      	ldrb	r2, [r7, #12]
 8008e38:	490f      	ldr	r1, [pc, #60]	; (8008e78 <UARTEx_SetNbDataToProcess+0x98>)
 8008e3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	7b7a      	ldrb	r2, [r7, #13]
 8008e4c:	4909      	ldr	r1, [pc, #36]	; (8008e74 <UARTEx_SetNbDataToProcess+0x94>)
 8008e4e:	5c8a      	ldrb	r2, [r1, r2]
 8008e50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e54:	7b7a      	ldrb	r2, [r7, #13]
 8008e56:	4908      	ldr	r1, [pc, #32]	; (8008e78 <UARTEx_SetNbDataToProcess+0x98>)
 8008e58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e66:	bf00      	nop
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	0800fe00 	.word	0x0800fe00
 8008e78:	0800fe08 	.word	0x0800fe08

08008e7c <__NVIC_SetPriority>:
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4603      	mov	r3, r0
 8008e84:	6039      	str	r1, [r7, #0]
 8008e86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008e88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	db0a      	blt.n	8008ea6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	b2da      	uxtb	r2, r3
 8008e94:	490c      	ldr	r1, [pc, #48]	; (8008ec8 <__NVIC_SetPriority+0x4c>)
 8008e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e9a:	0112      	lsls	r2, r2, #4
 8008e9c:	b2d2      	uxtb	r2, r2
 8008e9e:	440b      	add	r3, r1
 8008ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008ea4:	e00a      	b.n	8008ebc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	4908      	ldr	r1, [pc, #32]	; (8008ecc <__NVIC_SetPriority+0x50>)
 8008eac:	88fb      	ldrh	r3, [r7, #6]
 8008eae:	f003 030f 	and.w	r3, r3, #15
 8008eb2:	3b04      	subs	r3, #4
 8008eb4:	0112      	lsls	r2, r2, #4
 8008eb6:	b2d2      	uxtb	r2, r2
 8008eb8:	440b      	add	r3, r1
 8008eba:	761a      	strb	r2, [r3, #24]
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr
 8008ec8:	e000e100 	.word	0xe000e100
 8008ecc:	e000ed00 	.word	0xe000ed00

08008ed0 <SVC_Setup>:
=======
 800c1c4:	e031      	b.n	800c22a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c1c6:	2310      	movs	r3, #16
 800c1c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c1ca:	2310      	movs	r3, #16
 800c1cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	0e5b      	lsrs	r3, r3, #25
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	f003 0307 	and.w	r3, r3, #7
 800c1dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	0f5b      	lsrs	r3, r3, #29
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	f003 0307 	and.w	r3, r3, #7
 800c1ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1ee:	7bbb      	ldrb	r3, [r7, #14]
 800c1f0:	7b3a      	ldrb	r2, [r7, #12]
 800c1f2:	4911      	ldr	r1, [pc, #68]	; (800c238 <UARTEx_SetNbDataToProcess+0x94>)
 800c1f4:	5c8a      	ldrb	r2, [r1, r2]
 800c1f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c1fa:	7b3a      	ldrb	r2, [r7, #12]
 800c1fc:	490f      	ldr	r1, [pc, #60]	; (800c23c <UARTEx_SetNbDataToProcess+0x98>)
 800c1fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c200:	fb93 f3f2 	sdiv	r3, r3, r2
 800c204:	b29a      	uxth	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c20c:	7bfb      	ldrb	r3, [r7, #15]
 800c20e:	7b7a      	ldrb	r2, [r7, #13]
 800c210:	4909      	ldr	r1, [pc, #36]	; (800c238 <UARTEx_SetNbDataToProcess+0x94>)
 800c212:	5c8a      	ldrb	r2, [r1, r2]
 800c214:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c218:	7b7a      	ldrb	r2, [r7, #13]
 800c21a:	4908      	ldr	r1, [pc, #32]	; (800c23c <UARTEx_SetNbDataToProcess+0x98>)
 800c21c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c21e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c222:	b29a      	uxth	r2, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c22a:	bf00      	nop
 800c22c:	3714      	adds	r7, #20
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop
 800c238:	08013e34 	.word	0x08013e34
 800c23c:	08013e3c 	.word	0x08013e3c

0800c240 <__NVIC_SetPriority>:
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	4603      	mov	r3, r0
 800c248:	6039      	str	r1, [r7, #0]
 800c24a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c24c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c250:	2b00      	cmp	r3, #0
 800c252:	db0a      	blt.n	800c26a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	b2da      	uxtb	r2, r3
 800c258:	490c      	ldr	r1, [pc, #48]	; (800c28c <__NVIC_SetPriority+0x4c>)
 800c25a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c25e:	0112      	lsls	r2, r2, #4
 800c260:	b2d2      	uxtb	r2, r2
 800c262:	440b      	add	r3, r1
 800c264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c268:	e00a      	b.n	800c280 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	b2da      	uxtb	r2, r3
 800c26e:	4908      	ldr	r1, [pc, #32]	; (800c290 <__NVIC_SetPriority+0x50>)
 800c270:	88fb      	ldrh	r3, [r7, #6]
 800c272:	f003 030f 	and.w	r3, r3, #15
 800c276:	3b04      	subs	r3, #4
 800c278:	0112      	lsls	r2, r2, #4
 800c27a:	b2d2      	uxtb	r2, r2
 800c27c:	440b      	add	r3, r1
 800c27e:	761a      	strb	r2, [r3, #24]
}
 800c280:	bf00      	nop
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr
 800c28c:	e000e100 	.word	0xe000e100
 800c290:	e000ed00 	.word	0xe000ed00

0800c294 <SVC_Setup>:
>>>>>>> Stashed changes
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
<<<<<<< Updated upstream
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	af00      	add	r7, sp, #0
=======
 800c294:	b580      	push	{r7, lr}
 800c296:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
<<<<<<< Updated upstream
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	f06f 0004 	mvn.w	r0, #4
 8008eda:	f7ff ffcf 	bl	8008e7c <__NVIC_SetPriority>
#endif
}
 8008ede:	bf00      	nop
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <osKernelInitialize>:
=======
 800c298:	2100      	movs	r1, #0
 800c29a:	f06f 0004 	mvn.w	r0, #4
 800c29e:	f7ff ffcf 	bl	800c240 <__NVIC_SetPriority>
#endif
}
 800c2a2:	bf00      	nop
 800c2a4:	bd80      	pop	{r7, pc}
	...

0800c2a8 <osKernelInitialize>:
>>>>>>> Stashed changes
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
<<<<<<< Updated upstream
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eea:	f3ef 8305 	mrs	r3, IPSR
 8008eee:	603b      	str	r3, [r7, #0]
  return(result);
 8008ef0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008ef6:	f06f 0305 	mvn.w	r3, #5
 8008efa:	607b      	str	r3, [r7, #4]
 8008efc:	e00c      	b.n	8008f18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008efe:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <osKernelInitialize+0x44>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d105      	bne.n	8008f12 <osKernelInitialize+0x2e>
=======
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2ae:	f3ef 8305 	mrs	r3, IPSR
 800c2b2:	603b      	str	r3, [r7, #0]
  return(result);
 800c2b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d003      	beq.n	800c2c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c2ba:	f06f 0305 	mvn.w	r3, #5
 800c2be:	607b      	str	r3, [r7, #4]
 800c2c0:	e00c      	b.n	800c2dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c2c2:	4b0a      	ldr	r3, [pc, #40]	; (800c2ec <osKernelInitialize+0x44>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d105      	bne.n	800c2d6 <osKernelInitialize+0x2e>
>>>>>>> Stashed changes
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
<<<<<<< Updated upstream
 8008f06:	4b08      	ldr	r3, [pc, #32]	; (8008f28 <osKernelInitialize+0x44>)
 8008f08:	2201      	movs	r2, #1
 8008f0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	607b      	str	r3, [r7, #4]
 8008f10:	e002      	b.n	8008f18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f12:	f04f 33ff 	mov.w	r3, #4294967295
 8008f16:	607b      	str	r3, [r7, #4]
=======
 800c2ca:	4b08      	ldr	r3, [pc, #32]	; (800c2ec <osKernelInitialize+0x44>)
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	607b      	str	r3, [r7, #4]
 800c2d4:	e002      	b.n	800c2dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c2d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c2da:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
    }
  }

  return (stat);
<<<<<<< Updated upstream
 8008f18:	687b      	ldr	r3, [r7, #4]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	370c      	adds	r7, #12
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	24000538 	.word	0x24000538

08008f2c <osKernelStart>:
=======
 800c2dc:	687b      	ldr	r3, [r7, #4]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	370c      	adds	r7, #12
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	240009ec 	.word	0x240009ec

0800c2f0 <osKernelStart>:
>>>>>>> Stashed changes
  }

  return (state);
}

osStatus_t osKernelStart (void) {
<<<<<<< Updated upstream
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f32:	f3ef 8305 	mrs	r3, IPSR
 8008f36:	603b      	str	r3, [r7, #0]
  return(result);
 8008f38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d003      	beq.n	8008f46 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008f3e:	f06f 0305 	mvn.w	r3, #5
 8008f42:	607b      	str	r3, [r7, #4]
 8008f44:	e010      	b.n	8008f68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f46:	4b0b      	ldr	r3, [pc, #44]	; (8008f74 <osKernelStart+0x48>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d109      	bne.n	8008f62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f4e:	f7ff ffbf 	bl	8008ed0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f52:	4b08      	ldr	r3, [pc, #32]	; (8008f74 <osKernelStart+0x48>)
 8008f54:	2202      	movs	r2, #2
 8008f56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f58:	f001 ffda 	bl	800af10 <vTaskStartScheduler>
      stat = osOK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	607b      	str	r3, [r7, #4]
 8008f60:	e002      	b.n	8008f68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f62:	f04f 33ff 	mov.w	r3, #4294967295
 8008f66:	607b      	str	r3, [r7, #4]
=======
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2f6:	f3ef 8305 	mrs	r3, IPSR
 800c2fa:	603b      	str	r3, [r7, #0]
  return(result);
 800c2fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d003      	beq.n	800c30a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c302:	f06f 0305 	mvn.w	r3, #5
 800c306:	607b      	str	r3, [r7, #4]
 800c308:	e010      	b.n	800c32c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c30a:	4b0b      	ldr	r3, [pc, #44]	; (800c338 <osKernelStart+0x48>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d109      	bne.n	800c326 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c312:	f7ff ffbf 	bl	800c294 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c316:	4b08      	ldr	r3, [pc, #32]	; (800c338 <osKernelStart+0x48>)
 800c318:	2202      	movs	r2, #2
 800c31a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c31c:	f001 ffd8 	bl	800e2d0 <vTaskStartScheduler>
      stat = osOK;
 800c320:	2300      	movs	r3, #0
 800c322:	607b      	str	r3, [r7, #4]
 800c324:	e002      	b.n	800c32c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c326:	f04f 33ff 	mov.w	r3, #4294967295
 800c32a:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
    }
  }

  return (stat);
<<<<<<< Updated upstream
 8008f68:	687b      	ldr	r3, [r7, #4]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	24000538 	.word	0x24000538

08008f78 <osThreadNew>:
=======
 800c32c:	687b      	ldr	r3, [r7, #4]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	240009ec 	.word	0x240009ec

0800c33c <osThreadNew>:
>>>>>>> Stashed changes
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
<<<<<<< Updated upstream
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08e      	sub	sp, #56	; 0x38
 8008f7c:	af04      	add	r7, sp, #16
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
=======
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b08e      	sub	sp, #56	; 0x38
 800c340:	af04      	add	r7, sp, #16
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
<<<<<<< Updated upstream
 8008f84:	2300      	movs	r3, #0
 8008f86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f88:	f3ef 8305 	mrs	r3, IPSR
 8008f8c:	617b      	str	r3, [r7, #20]
  return(result);
 8008f8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d17e      	bne.n	8009092 <osThreadNew+0x11a>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d07b      	beq.n	8009092 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008f9a:	2380      	movs	r3, #128	; 0x80
 8008f9c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008f9e:	2318      	movs	r3, #24
 8008fa0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8008faa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d045      	beq.n	800903e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d002      	beq.n	8008fc0 <osThreadNew+0x48>
        name = attr->name;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d008      	beq.n	8008fe6 <osThreadNew+0x6e>
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	2b38      	cmp	r3, #56	; 0x38
 8008fd8:	d805      	bhi.n	8008fe6 <osThreadNew+0x6e>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d001      	beq.n	8008fea <osThreadNew+0x72>
        return (NULL);
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	e054      	b.n	8009094 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	089b      	lsrs	r3, r3, #2
 8008ff8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00e      	beq.n	8009020 <osThreadNew+0xa8>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	2ba7      	cmp	r3, #167	; 0xa7
 8009008:	d90a      	bls.n	8009020 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800900e:	2b00      	cmp	r3, #0
 8009010:	d006      	beq.n	8009020 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d002      	beq.n	8009020 <osThreadNew+0xa8>
        mem = 1;
 800901a:	2301      	movs	r3, #1
 800901c:	61bb      	str	r3, [r7, #24]
 800901e:	e010      	b.n	8009042 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10c      	bne.n	8009042 <osThreadNew+0xca>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d108      	bne.n	8009042 <osThreadNew+0xca>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d104      	bne.n	8009042 <osThreadNew+0xca>
          mem = 0;
 8009038:	2300      	movs	r3, #0
 800903a:	61bb      	str	r3, [r7, #24]
 800903c:	e001      	b.n	8009042 <osThreadNew+0xca>
=======
 800c348:	2300      	movs	r3, #0
 800c34a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c34c:	f3ef 8305 	mrs	r3, IPSR
 800c350:	617b      	str	r3, [r7, #20]
  return(result);
 800c352:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c354:	2b00      	cmp	r3, #0
 800c356:	d17e      	bne.n	800c456 <osThreadNew+0x11a>
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d07b      	beq.n	800c456 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c35e:	2380      	movs	r3, #128	; 0x80
 800c360:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c362:	2318      	movs	r3, #24
 800c364:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c366:	2300      	movs	r3, #0
 800c368:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c36a:	f04f 33ff 	mov.w	r3, #4294967295
 800c36e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d045      	beq.n	800c402 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d002      	beq.n	800c384 <osThreadNew+0x48>
        name = attr->name;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	699b      	ldr	r3, [r3, #24]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d002      	beq.n	800c392 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	699b      	ldr	r3, [r3, #24]
 800c390:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d008      	beq.n	800c3aa <osThreadNew+0x6e>
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	2b38      	cmp	r3, #56	; 0x38
 800c39c:	d805      	bhi.n	800c3aa <osThreadNew+0x6e>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	f003 0301 	and.w	r3, r3, #1
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d001      	beq.n	800c3ae <osThreadNew+0x72>
        return (NULL);
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	e054      	b.n	800c458 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	695b      	ldr	r3, [r3, #20]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d003      	beq.n	800c3be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	695b      	ldr	r3, [r3, #20]
 800c3ba:	089b      	lsrs	r3, r3, #2
 800c3bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00e      	beq.n	800c3e4 <osThreadNew+0xa8>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	2bbb      	cmp	r3, #187	; 0xbb
 800c3cc:	d90a      	bls.n	800c3e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d006      	beq.n	800c3e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	695b      	ldr	r3, [r3, #20]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d002      	beq.n	800c3e4 <osThreadNew+0xa8>
        mem = 1;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	61bb      	str	r3, [r7, #24]
 800c3e2:	e010      	b.n	800c406 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10c      	bne.n	800c406 <osThreadNew+0xca>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d108      	bne.n	800c406 <osThreadNew+0xca>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	691b      	ldr	r3, [r3, #16]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d104      	bne.n	800c406 <osThreadNew+0xca>
          mem = 0;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	61bb      	str	r3, [r7, #24]
 800c400:	e001      	b.n	800c406 <osThreadNew+0xca>
>>>>>>> Stashed changes
        }
      }
    }
    else {
      mem = 0;
<<<<<<< Updated upstream
 800903e:	2300      	movs	r3, #0
 8009040:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d110      	bne.n	800906a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009050:	9202      	str	r2, [sp, #8]
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	6a3a      	ldr	r2, [r7, #32]
 800905c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f001 fd6a 	bl	800ab38 <xTaskCreateStatic>
 8009064:	4603      	mov	r3, r0
 8009066:	613b      	str	r3, [r7, #16]
 8009068:	e013      	b.n	8009092 <osThreadNew+0x11a>
=======
 800c402:	2300      	movs	r3, #0
 800c404:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d110      	bne.n	800c42e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c414:	9202      	str	r2, [sp, #8]
 800c416:	9301      	str	r3, [sp, #4]
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	9300      	str	r3, [sp, #0]
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	6a3a      	ldr	r2, [r7, #32]
 800c420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f001 fd68 	bl	800def8 <xTaskCreateStatic>
 800c428:	4603      	mov	r3, r0
 800c42a:	613b      	str	r3, [r7, #16]
 800c42c:	e013      	b.n	800c456 <osThreadNew+0x11a>
>>>>>>> Stashed changes
      #endif
    }
    else {
      if (mem == 0) {
<<<<<<< Updated upstream
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d110      	bne.n	8009092 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	b29a      	uxth	r2, r3
 8009074:	f107 0310 	add.w	r3, r7, #16
 8009078:	9301      	str	r3, [sp, #4]
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f001 fdb5 	bl	800abf2 <xTaskCreate>
 8009088:	4603      	mov	r3, r0
 800908a:	2b01      	cmp	r3, #1
 800908c:	d001      	beq.n	8009092 <osThreadNew+0x11a>
            hTask = NULL;
 800908e:	2300      	movs	r3, #0
 8009090:	613b      	str	r3, [r7, #16]
=======
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d110      	bne.n	800c456 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c434:	6a3b      	ldr	r3, [r7, #32]
 800c436:	b29a      	uxth	r2, r3
 800c438:	f107 0310 	add.w	r3, r7, #16
 800c43c:	9301      	str	r3, [sp, #4]
 800c43e:	69fb      	ldr	r3, [r7, #28]
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c446:	68f8      	ldr	r0, [r7, #12]
 800c448:	f001 fdb3 	bl	800dfb2 <xTaskCreate>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d001      	beq.n	800c456 <osThreadNew+0x11a>
            hTask = NULL;
 800c452:	2300      	movs	r3, #0
 800c454:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
<<<<<<< Updated upstream
 8009092:	693b      	ldr	r3, [r7, #16]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3728      	adds	r7, #40	; 0x28
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <osDelay>:
=======
 800c456:	693b      	ldr	r3, [r7, #16]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3728      	adds	r7, #40	; 0x28
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <osDelay>:
>>>>>>> Stashed changes
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
<<<<<<< Updated upstream
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090a4:	f3ef 8305 	mrs	r3, IPSR
 80090a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80090aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d003      	beq.n	80090b8 <osDelay+0x1c>
    stat = osErrorISR;
 80090b0:	f06f 0305 	mvn.w	r3, #5
 80090b4:	60fb      	str	r3, [r7, #12]
 80090b6:	e007      	b.n	80090c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d002      	beq.n	80090c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f001 fef0 	bl	800aea8 <vTaskDelay>
=======
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c468:	f3ef 8305 	mrs	r3, IPSR
 800c46c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c46e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c470:	2b00      	cmp	r3, #0
 800c472:	d003      	beq.n	800c47c <osDelay+0x1c>
    stat = osErrorISR;
 800c474:	f06f 0305 	mvn.w	r3, #5
 800c478:	60fb      	str	r3, [r7, #12]
 800c47a:	e007      	b.n	800c48c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c47c:	2300      	movs	r3, #0
 800c47e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d002      	beq.n	800c48c <osDelay+0x2c>
      vTaskDelay(ticks);
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f001 feee 	bl	800e268 <vTaskDelay>
>>>>>>> Stashed changes
    }
  }

  return (stat);
<<<<<<< Updated upstream
 80090c8:	68fb      	ldr	r3, [r7, #12]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <osMutexNew>:
=======
 800c48c:	68fb      	ldr	r3, [r7, #12]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <osMutexNew>:
>>>>>>> Stashed changes
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
<<<<<<< Updated upstream
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b088      	sub	sp, #32
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
=======
 800c496:	b580      	push	{r7, lr}
 800c498:	b088      	sub	sp, #32
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
<<<<<<< Updated upstream
 80090da:	2300      	movs	r3, #0
 80090dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090de:	f3ef 8305 	mrs	r3, IPSR
 80090e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80090e4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d174      	bne.n	80091d4 <osMutexNew+0x102>
    if (attr != NULL) {
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d003      	beq.n	80090f8 <osMutexNew+0x26>
      type = attr->attr_bits;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	61bb      	str	r3, [r7, #24]
 80090f6:	e001      	b.n	80090fc <osMutexNew+0x2a>
    } else {
      type = 0U;
 80090f8:	2300      	movs	r3, #0
 80090fa:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <osMutexNew+0x3a>
      rmtx = 1U;
 8009106:	2301      	movs	r3, #1
 8009108:	617b      	str	r3, [r7, #20]
 800910a:	e001      	b.n	8009110 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800910c:	2300      	movs	r3, #0
 800910e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	f003 0308 	and.w	r3, r3, #8
 8009116:	2b00      	cmp	r3, #0
 8009118:	d15c      	bne.n	80091d4 <osMutexNew+0x102>
      mem = -1;
 800911a:	f04f 33ff 	mov.w	r3, #4294967295
 800911e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d015      	beq.n	8009152 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d006      	beq.n	800913c <osMutexNew+0x6a>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	2b4f      	cmp	r3, #79	; 0x4f
 8009134:	d902      	bls.n	800913c <osMutexNew+0x6a>
          mem = 1;
 8009136:	2301      	movs	r3, #1
 8009138:	613b      	str	r3, [r7, #16]
 800913a:	e00c      	b.n	8009156 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d108      	bne.n	8009156 <osMutexNew+0x84>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d104      	bne.n	8009156 <osMutexNew+0x84>
            mem = 0;
 800914c:	2300      	movs	r3, #0
 800914e:	613b      	str	r3, [r7, #16]
 8009150:	e001      	b.n	8009156 <osMutexNew+0x84>
=======
 800c49e:	2300      	movs	r3, #0
 800c4a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4a2:	f3ef 8305 	mrs	r3, IPSR
 800c4a6:	60bb      	str	r3, [r7, #8]
  return(result);
 800c4a8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d174      	bne.n	800c598 <osMutexNew+0x102>
    if (attr != NULL) {
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d003      	beq.n	800c4bc <osMutexNew+0x26>
      type = attr->attr_bits;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	61bb      	str	r3, [r7, #24]
 800c4ba:	e001      	b.n	800c4c0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c4c0:	69bb      	ldr	r3, [r7, #24]
 800c4c2:	f003 0301 	and.w	r3, r3, #1
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d002      	beq.n	800c4d0 <osMutexNew+0x3a>
      rmtx = 1U;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	617b      	str	r3, [r7, #20]
 800c4ce:	e001      	b.n	800c4d4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	f003 0308 	and.w	r3, r3, #8
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d15c      	bne.n	800c598 <osMutexNew+0x102>
      mem = -1;
 800c4de:	f04f 33ff 	mov.w	r3, #4294967295
 800c4e2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d015      	beq.n	800c516 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d006      	beq.n	800c500 <osMutexNew+0x6a>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	68db      	ldr	r3, [r3, #12]
 800c4f6:	2b4f      	cmp	r3, #79	; 0x4f
 800c4f8:	d902      	bls.n	800c500 <osMutexNew+0x6a>
          mem = 1;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	613b      	str	r3, [r7, #16]
 800c4fe:	e00c      	b.n	800c51a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d108      	bne.n	800c51a <osMutexNew+0x84>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d104      	bne.n	800c51a <osMutexNew+0x84>
            mem = 0;
 800c510:	2300      	movs	r3, #0
 800c512:	613b      	str	r3, [r7, #16]
 800c514:	e001      	b.n	800c51a <osMutexNew+0x84>
>>>>>>> Stashed changes
          }
        }
      }
      else {
        mem = 0;
<<<<<<< Updated upstream
 8009152:	2300      	movs	r3, #0
 8009154:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d112      	bne.n	8009182 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d007      	beq.n	8009172 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	4619      	mov	r1, r3
 8009168:	2004      	movs	r0, #4
 800916a:	f000 ff54 	bl	800a016 <xQueueCreateMutexStatic>
 800916e:	61f8      	str	r0, [r7, #28]
 8009170:	e016      	b.n	80091a0 <osMutexNew+0xce>
=======
 800c516:	2300      	movs	r3, #0
 800c518:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d112      	bne.n	800c546 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d007      	beq.n	800c536 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	4619      	mov	r1, r3
 800c52c:	2004      	movs	r0, #4
 800c52e:	f000 ff52 	bl	800d3d6 <xQueueCreateMutexStatic>
 800c532:	61f8      	str	r0, [r7, #28]
 800c534:	e016      	b.n	800c564 <osMutexNew+0xce>
>>>>>>> Stashed changes
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
<<<<<<< Updated upstream
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	4619      	mov	r1, r3
 8009178:	2001      	movs	r0, #1
 800917a:	f000 ff4c 	bl	800a016 <xQueueCreateMutexStatic>
 800917e:	61f8      	str	r0, [r7, #28]
 8009180:	e00e      	b.n	80091a0 <osMutexNew+0xce>
=======
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	4619      	mov	r1, r3
 800c53c:	2001      	movs	r0, #1
 800c53e:	f000 ff4a 	bl	800d3d6 <xQueueCreateMutexStatic>
 800c542:	61f8      	str	r0, [r7, #28]
 800c544:	e00e      	b.n	800c564 <osMutexNew+0xce>
>>>>>>> Stashed changes
          }
        #endif
      }
      else {
        if (mem == 0) {
<<<<<<< Updated upstream
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10b      	bne.n	80091a0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d004      	beq.n	8009198 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800918e:	2004      	movs	r0, #4
 8009190:	f000 ff29 	bl	8009fe6 <xQueueCreateMutex>
 8009194:	61f8      	str	r0, [r7, #28]
 8009196:	e003      	b.n	80091a0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009198:	2001      	movs	r0, #1
 800919a:	f000 ff24 	bl	8009fe6 <xQueueCreateMutex>
 800919e:	61f8      	str	r0, [r7, #28]
=======
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d10b      	bne.n	800c564 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d004      	beq.n	800c55c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c552:	2004      	movs	r0, #4
 800c554:	f000 ff27 	bl	800d3a6 <xQueueCreateMutex>
 800c558:	61f8      	str	r0, [r7, #28]
 800c55a:	e003      	b.n	800c564 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c55c:	2001      	movs	r0, #1
 800c55e:	f000 ff22 	bl	800d3a6 <xQueueCreateMutex>
 800c562:	61f8      	str	r0, [r7, #28]
>>>>>>> Stashed changes
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
<<<<<<< Updated upstream
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00c      	beq.n	80091c0 <osMutexNew+0xee>
        if (attr != NULL) {
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d003      	beq.n	80091b4 <osMutexNew+0xe2>
          name = attr->name;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	60fb      	str	r3, [r7, #12]
 80091b2:	e001      	b.n	80091b8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80091b4:	2300      	movs	r3, #0
 80091b6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80091b8:	68f9      	ldr	r1, [r7, #12]
 80091ba:	69f8      	ldr	r0, [r7, #28]
 80091bc:	f001 fc5e 	bl	800aa7c <vQueueAddToRegistry>
=======
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00c      	beq.n	800c584 <osMutexNew+0xee>
        if (attr != NULL) {
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d003      	beq.n	800c578 <osMutexNew+0xe2>
          name = attr->name;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	60fb      	str	r3, [r7, #12]
 800c576:	e001      	b.n	800c57c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c578:	2300      	movs	r3, #0
 800c57a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c57c:	68f9      	ldr	r1, [r7, #12]
 800c57e:	69f8      	ldr	r0, [r7, #28]
 800c580:	f001 fc5c 	bl	800de3c <vQueueAddToRegistry>
>>>>>>> Stashed changes
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
<<<<<<< Updated upstream
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d006      	beq.n	80091d4 <osMutexNew+0x102>
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	f043 0301 	orr.w	r3, r3, #1
 80091d2:	61fb      	str	r3, [r7, #28]
=======
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d006      	beq.n	800c598 <osMutexNew+0x102>
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d003      	beq.n	800c598 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	f043 0301 	orr.w	r3, r3, #1
 800c596:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
      }
    }
  }

  return ((osMutexId_t)hMutex);
<<<<<<< Updated upstream
 80091d4:	69fb      	ldr	r3, [r7, #28]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3720      	adds	r7, #32
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80091de:	b580      	push	{r7, lr}
 80091e0:	b086      	sub	sp, #24
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	6039      	str	r1, [r7, #0]
=======
 800c598:	69fb      	ldr	r3, [r7, #28]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3720      	adds	r7, #32
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b086      	sub	sp, #24
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
 800c5aa:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
<<<<<<< Updated upstream
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f023 0301 	bic.w	r3, r3, #1
 80091ee:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091fc:	f3ef 8305 	mrs	r3, IPSR
 8009200:	60bb      	str	r3, [r7, #8]
  return(result);
 8009202:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009204:	2b00      	cmp	r3, #0
 8009206:	d003      	beq.n	8009210 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8009208:	f06f 0305 	mvn.w	r3, #5
 800920c:	617b      	str	r3, [r7, #20]
 800920e:	e02c      	b.n	800926a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d103      	bne.n	800921e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8009216:	f06f 0303 	mvn.w	r3, #3
 800921a:	617b      	str	r3, [r7, #20]
 800921c:	e025      	b.n	800926a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d011      	beq.n	8009248 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6938      	ldr	r0, [r7, #16]
 8009228:	f000 ff44 	bl	800a0b4 <xQueueTakeMutexRecursive>
 800922c:	4603      	mov	r3, r0
 800922e:	2b01      	cmp	r3, #1
 8009230:	d01b      	beq.n	800926a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d003      	beq.n	8009240 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009238:	f06f 0301 	mvn.w	r3, #1
 800923c:	617b      	str	r3, [r7, #20]
 800923e:	e014      	b.n	800926a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009240:	f06f 0302 	mvn.w	r3, #2
 8009244:	617b      	str	r3, [r7, #20]
 8009246:	e010      	b.n	800926a <osMutexAcquire+0x8c>
=======
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f023 0301 	bic.w	r3, r3, #1
 800c5b2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f003 0301 	and.w	r3, r3, #1
 800c5ba:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5c0:	f3ef 8305 	mrs	r3, IPSR
 800c5c4:	60bb      	str	r3, [r7, #8]
  return(result);
 800c5c6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d003      	beq.n	800c5d4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c5cc:	f06f 0305 	mvn.w	r3, #5
 800c5d0:	617b      	str	r3, [r7, #20]
 800c5d2:	e02c      	b.n	800c62e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d103      	bne.n	800c5e2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c5da:	f06f 0303 	mvn.w	r3, #3
 800c5de:	617b      	str	r3, [r7, #20]
 800c5e0:	e025      	b.n	800c62e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d011      	beq.n	800c60c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c5e8:	6839      	ldr	r1, [r7, #0]
 800c5ea:	6938      	ldr	r0, [r7, #16]
 800c5ec:	f000 ff42 	bl	800d474 <xQueueTakeMutexRecursive>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d01b      	beq.n	800c62e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d003      	beq.n	800c604 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c5fc:	f06f 0301 	mvn.w	r3, #1
 800c600:	617b      	str	r3, [r7, #20]
 800c602:	e014      	b.n	800c62e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c604:	f06f 0302 	mvn.w	r3, #2
 800c608:	617b      	str	r3, [r7, #20]
 800c60a:	e010      	b.n	800c62e <osMutexAcquire+0x8c>
>>>>>>> Stashed changes
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
<<<<<<< Updated upstream
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6938      	ldr	r0, [r7, #16]
 800924c:	f001 f9e2 	bl	800a614 <xQueueSemaphoreTake>
 8009250:	4603      	mov	r3, r0
 8009252:	2b01      	cmp	r3, #1
 8009254:	d009      	beq.n	800926a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800925c:	f06f 0301 	mvn.w	r3, #1
 8009260:	617b      	str	r3, [r7, #20]
 8009262:	e002      	b.n	800926a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009264:	f06f 0302 	mvn.w	r3, #2
 8009268:	617b      	str	r3, [r7, #20]
=======
 800c60c:	6839      	ldr	r1, [r7, #0]
 800c60e:	6938      	ldr	r0, [r7, #16]
 800c610:	f001 f9e0 	bl	800d9d4 <xQueueSemaphoreTake>
 800c614:	4603      	mov	r3, r0
 800c616:	2b01      	cmp	r3, #1
 800c618:	d009      	beq.n	800c62e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d003      	beq.n	800c628 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c620:	f06f 0301 	mvn.w	r3, #1
 800c624:	617b      	str	r3, [r7, #20]
 800c626:	e002      	b.n	800c62e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c628:	f06f 0302 	mvn.w	r3, #2
 800c62c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
        }
      }
    }
  }

  return (stat);
<<<<<<< Updated upstream
 800926a:	697b      	ldr	r3, [r7, #20]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
=======
 800c62e:	697b      	ldr	r3, [r7, #20]
}
 800c630:	4618      	mov	r0, r3
 800c632:	3718      	adds	r7, #24
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c638:	b580      	push	{r7, lr}
 800c63a:	b086      	sub	sp, #24
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
<<<<<<< Updated upstream
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f023 0301 	bic.w	r3, r3, #1
 8009282:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800928c:	2300      	movs	r3, #0
 800928e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009290:	f3ef 8305 	mrs	r3, IPSR
 8009294:	60bb      	str	r3, [r7, #8]
  return(result);
 8009296:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <osMutexRelease+0x30>
    stat = osErrorISR;
 800929c:	f06f 0305 	mvn.w	r3, #5
 80092a0:	617b      	str	r3, [r7, #20]
 80092a2:	e01f      	b.n	80092e4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d103      	bne.n	80092b2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80092aa:	f06f 0303 	mvn.w	r3, #3
 80092ae:	617b      	str	r3, [r7, #20]
 80092b0:	e018      	b.n	80092e4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d009      	beq.n	80092cc <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80092b8:	6938      	ldr	r0, [r7, #16]
 80092ba:	f000 fec7 	bl	800a04c <xQueueGiveMutexRecursive>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d00f      	beq.n	80092e4 <osMutexRelease+0x70>
        stat = osErrorResource;
 80092c4:	f06f 0302 	mvn.w	r3, #2
 80092c8:	617b      	str	r3, [r7, #20]
 80092ca:	e00b      	b.n	80092e4 <osMutexRelease+0x70>
=======
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f023 0301 	bic.w	r3, r3, #1
 800c646:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f003 0301 	and.w	r3, r3, #1
 800c64e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c650:	2300      	movs	r3, #0
 800c652:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c654:	f3ef 8305 	mrs	r3, IPSR
 800c658:	60bb      	str	r3, [r7, #8]
  return(result);
 800c65a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d003      	beq.n	800c668 <osMutexRelease+0x30>
    stat = osErrorISR;
 800c660:	f06f 0305 	mvn.w	r3, #5
 800c664:	617b      	str	r3, [r7, #20]
 800c666:	e01f      	b.n	800c6a8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d103      	bne.n	800c676 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c66e:	f06f 0303 	mvn.w	r3, #3
 800c672:	617b      	str	r3, [r7, #20]
 800c674:	e018      	b.n	800c6a8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d009      	beq.n	800c690 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c67c:	6938      	ldr	r0, [r7, #16]
 800c67e:	f000 fec5 	bl	800d40c <xQueueGiveMutexRecursive>
 800c682:	4603      	mov	r3, r0
 800c684:	2b01      	cmp	r3, #1
 800c686:	d00f      	beq.n	800c6a8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c688:	f06f 0302 	mvn.w	r3, #2
 800c68c:	617b      	str	r3, [r7, #20]
 800c68e:	e00b      	b.n	800c6a8 <osMutexRelease+0x70>
>>>>>>> Stashed changes
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
<<<<<<< Updated upstream
 80092cc:	2300      	movs	r3, #0
 80092ce:	2200      	movs	r2, #0
 80092d0:	2100      	movs	r1, #0
 80092d2:	6938      	ldr	r0, [r7, #16]
 80092d4:	f000 ff24 	bl	800a120 <xQueueGenericSend>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d002      	beq.n	80092e4 <osMutexRelease+0x70>
        stat = osErrorResource;
 80092de:	f06f 0302 	mvn.w	r3, #2
 80092e2:	617b      	str	r3, [r7, #20]
=======
 800c690:	2300      	movs	r3, #0
 800c692:	2200      	movs	r2, #0
 800c694:	2100      	movs	r1, #0
 800c696:	6938      	ldr	r0, [r7, #16]
 800c698:	f000 ff22 	bl	800d4e0 <xQueueGenericSend>
 800c69c:	4603      	mov	r3, r0
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d002      	beq.n	800c6a8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c6a2:	f06f 0302 	mvn.w	r3, #2
 800c6a6:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
      }
    }
  }

  return (stat);
<<<<<<< Updated upstream
 80092e4:	697b      	ldr	r3, [r7, #20]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <vApplicationGetIdleTaskMemory>:
=======
 800c6a8:	697b      	ldr	r3, [r7, #20]
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3718      	adds	r7, #24
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
	...

0800c6b4 <vApplicationGetIdleTaskMemory>:
>>>>>>> Stashed changes

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
<<<<<<< Updated upstream
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
=======
 800c6b4:	b480      	push	{r7}
 800c6b6:	b085      	sub	sp, #20
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
<<<<<<< Updated upstream
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	4a07      	ldr	r2, [pc, #28]	; (800931c <vApplicationGetIdleTaskMemory+0x2c>)
 8009300:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	4a06      	ldr	r2, [pc, #24]	; (8009320 <vApplicationGetIdleTaskMemory+0x30>)
 8009306:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2280      	movs	r2, #128	; 0x80
 800930c:	601a      	str	r2, [r3, #0]
}
 800930e:	bf00      	nop
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	2400053c 	.word	0x2400053c
 8009320:	240005e4 	.word	0x240005e4

08009324 <vApplicationGetTimerTaskMemory>:
=======
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	4a07      	ldr	r2, [pc, #28]	; (800c6e0 <vApplicationGetIdleTaskMemory+0x2c>)
 800c6c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	4a06      	ldr	r2, [pc, #24]	; (800c6e4 <vApplicationGetIdleTaskMemory+0x30>)
 800c6ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2280      	movs	r2, #128	; 0x80
 800c6d0:	601a      	str	r2, [r3, #0]
}
 800c6d2:	bf00      	nop
 800c6d4:	3714      	adds	r7, #20
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	240009f0 	.word	0x240009f0
 800c6e4:	24000aac 	.word	0x24000aac

0800c6e8 <vApplicationGetTimerTaskMemory>:
>>>>>>> Stashed changes

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
<<<<<<< Updated upstream
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
=======
 800c6e8:	b480      	push	{r7}
 800c6ea:	b085      	sub	sp, #20
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
<<<<<<< Updated upstream
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4a07      	ldr	r2, [pc, #28]	; (8009350 <vApplicationGetTimerTaskMemory+0x2c>)
 8009334:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	4a06      	ldr	r2, [pc, #24]	; (8009354 <vApplicationGetTimerTaskMemory+0x30>)
 800933a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009342:	601a      	str	r2, [r3, #0]
}
 8009344:	bf00      	nop
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	240007e4 	.word	0x240007e4
 8009354:	2400088c 	.word	0x2400088c

08009358 <pvPortMalloc>:
=======
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	4a07      	ldr	r2, [pc, #28]	; (800c714 <vApplicationGetTimerTaskMemory+0x2c>)
 800c6f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	4a06      	ldr	r2, [pc, #24]	; (800c718 <vApplicationGetTimerTaskMemory+0x30>)
 800c6fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c706:	601a      	str	r2, [r3, #0]
}
 800c708:	bf00      	nop
 800c70a:	3714      	adds	r7, #20
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr
 800c714:	24000cac 	.word	0x24000cac
 800c718:	24000d68 	.word	0x24000d68

0800c71c <pvPortMalloc>:
>>>>>>> Stashed changes
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< Updated upstream
 8009358:	b580      	push	{r7, lr}
 800935a:	b08a      	sub	sp, #40	; 0x28
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009360:	2300      	movs	r3, #0
 8009362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009364:	f001 fe44 	bl	800aff0 <vTaskSuspendAll>
=======
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b08a      	sub	sp, #40	; 0x28
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c724:	2300      	movs	r3, #0
 800c726:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c728:	f001 fe42 	bl	800e3b0 <vTaskSuspendAll>
>>>>>>> Stashed changes
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< Updated upstream
 8009368:	4b5b      	ldr	r3, [pc, #364]	; (80094d8 <pvPortMalloc+0x180>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d101      	bne.n	8009374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009370:	f000 f920 	bl	80095b4 <prvHeapInit>
=======
 800c72c:	4b5b      	ldr	r3, [pc, #364]	; (800c89c <pvPortMalloc+0x180>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d101      	bne.n	800c738 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c734:	f000 f920 	bl	800c978 <prvHeapInit>
>>>>>>> Stashed changes

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< Updated upstream
 8009374:	4b59      	ldr	r3, [pc, #356]	; (80094dc <pvPortMalloc+0x184>)
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4013      	ands	r3, r2
 800937c:	2b00      	cmp	r3, #0
 800937e:	f040 8093 	bne.w	80094a8 <pvPortMalloc+0x150>
=======
 800c738:	4b59      	ldr	r3, [pc, #356]	; (800c8a0 <pvPortMalloc+0x184>)
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4013      	ands	r3, r2
 800c740:	2b00      	cmp	r3, #0
 800c742:	f040 8093 	bne.w	800c86c <pvPortMalloc+0x150>
>>>>>>> Stashed changes
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< Updated upstream
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01d      	beq.n	80093c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009388:	2208      	movs	r2, #8
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4413      	add	r3, r2
 800938e:	607b      	str	r3, [r7, #4]
=======
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d01d      	beq.n	800c788 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c74c:	2208      	movs	r2, #8
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	4413      	add	r3, r2
 800c752:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< Updated upstream
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f003 0307 	and.w	r3, r3, #7
 8009396:	2b00      	cmp	r3, #0
 8009398:	d014      	beq.n	80093c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f023 0307 	bic.w	r3, r3, #7
 80093a0:	3308      	adds	r3, #8
 80093a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f003 0307 	and.w	r3, r3, #7
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00a      	beq.n	80093c4 <pvPortMalloc+0x6c>
=======
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f003 0307 	and.w	r3, r3, #7
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d014      	beq.n	800c788 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f023 0307 	bic.w	r3, r3, #7
 800c764:	3308      	adds	r3, #8
 800c766:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f003 0307 	and.w	r3, r3, #7
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00a      	beq.n	800c788 <pvPortMalloc+0x6c>
>>>>>>> Stashed changes

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< Updated upstream
 80093ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	617b      	str	r3, [r7, #20]
=======
 800c772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c776:	f383 8811 	msr	BASEPRI, r3
 800c77a:	f3bf 8f6f 	isb	sy
 800c77e:	f3bf 8f4f 	dsb	sy
 800c782:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
<<<<<<< Updated upstream
 80093c0:	bf00      	nop
 80093c2:	e7fe      	b.n	80093c2 <pvPortMalloc+0x6a>
=======
 800c784:	bf00      	nop
 800c786:	e7fe      	b.n	800c786 <pvPortMalloc+0x6a>
>>>>>>> Stashed changes
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< Updated upstream
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d06e      	beq.n	80094a8 <pvPortMalloc+0x150>
 80093ca:	4b45      	ldr	r3, [pc, #276]	; (80094e0 <pvPortMalloc+0x188>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d869      	bhi.n	80094a8 <pvPortMalloc+0x150>
=======
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d06e      	beq.n	800c86c <pvPortMalloc+0x150>
 800c78e:	4b45      	ldr	r3, [pc, #276]	; (800c8a4 <pvPortMalloc+0x188>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	429a      	cmp	r2, r3
 800c796:	d869      	bhi.n	800c86c <pvPortMalloc+0x150>
>>>>>>> Stashed changes
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< Updated upstream
 80093d4:	4b43      	ldr	r3, [pc, #268]	; (80094e4 <pvPortMalloc+0x18c>)
 80093d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80093d8:	4b42      	ldr	r3, [pc, #264]	; (80094e4 <pvPortMalloc+0x18c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093de:	e004      	b.n	80093ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d903      	bls.n	80093fc <pvPortMalloc+0xa4>
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1f1      	bne.n	80093e0 <pvPortMalloc+0x88>
=======
 800c798:	4b43      	ldr	r3, [pc, #268]	; (800c8a8 <pvPortMalloc+0x18c>)
 800c79a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c79c:	4b42      	ldr	r3, [pc, #264]	; (800c8a8 <pvPortMalloc+0x18c>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7a2:	e004      	b.n	800c7ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d903      	bls.n	800c7c0 <pvPortMalloc+0xa4>
 800c7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1f1      	bne.n	800c7a4 <pvPortMalloc+0x88>
>>>>>>> Stashed changes
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< Updated upstream
 80093fc:	4b36      	ldr	r3, [pc, #216]	; (80094d8 <pvPortMalloc+0x180>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009402:	429a      	cmp	r2, r3
 8009404:	d050      	beq.n	80094a8 <pvPortMalloc+0x150>
=======
 800c7c0:	4b36      	ldr	r3, [pc, #216]	; (800c89c <pvPortMalloc+0x180>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d050      	beq.n	800c86c <pvPortMalloc+0x150>
>>>>>>> Stashed changes
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< Updated upstream
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2208      	movs	r2, #8
 800940c:	4413      	add	r3, r2
 800940e:	61fb      	str	r3, [r7, #28]
=======
 800c7ca:	6a3b      	ldr	r3, [r7, #32]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2208      	movs	r2, #8
 800c7d0:	4413      	add	r3, r2
 800c7d2:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< Updated upstream
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	6a3b      	ldr	r3, [r7, #32]
 8009416:	601a      	str	r2, [r3, #0]
=======
 800c7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	6a3b      	ldr	r3, [r7, #32]
 800c7da:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< Updated upstream
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	1ad2      	subs	r2, r2, r3
 8009420:	2308      	movs	r3, #8
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	429a      	cmp	r2, r3
 8009426:	d91f      	bls.n	8009468 <pvPortMalloc+0x110>
=======
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7de:	685a      	ldr	r2, [r3, #4]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	1ad2      	subs	r2, r2, r3
 800c7e4:	2308      	movs	r3, #8
 800c7e6:	005b      	lsls	r3, r3, #1
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d91f      	bls.n	800c82c <pvPortMalloc+0x110>
>>>>>>> Stashed changes
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< Updated upstream
 8009428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4413      	add	r3, r2
 800942e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00a      	beq.n	8009450 <pvPortMalloc+0xf8>
	__asm volatile
 800943a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943e:	f383 8811 	msr	BASEPRI, r3
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	613b      	str	r3, [r7, #16]
}
 800944c:	bf00      	nop
 800944e:	e7fe      	b.n	800944e <pvPortMalloc+0xf6>
=======
 800c7ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7f4:	69bb      	ldr	r3, [r7, #24]
 800c7f6:	f003 0307 	and.w	r3, r3, #7
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00a      	beq.n	800c814 <pvPortMalloc+0xf8>
	__asm volatile
 800c7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c802:	f383 8811 	msr	BASEPRI, r3
 800c806:	f3bf 8f6f 	isb	sy
 800c80a:	f3bf 8f4f 	dsb	sy
 800c80e:	613b      	str	r3, [r7, #16]
}
 800c810:	bf00      	nop
 800c812:	e7fe      	b.n	800c812 <pvPortMalloc+0xf6>
>>>>>>> Stashed changes

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< Updated upstream
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	685a      	ldr	r2, [r3, #4]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	1ad2      	subs	r2, r2, r3
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009462:	69b8      	ldr	r0, [r7, #24]
 8009464:	f000 f908 	bl	8009678 <prvInsertBlockIntoFreeList>
=======
 800c814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c816:	685a      	ldr	r2, [r3, #4]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	1ad2      	subs	r2, r2, r3
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c826:	69b8      	ldr	r0, [r7, #24]
 800c828:	f000 f908 	bl	800ca3c <prvInsertBlockIntoFreeList>
>>>>>>> Stashed changes
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< Updated upstream
 8009468:	4b1d      	ldr	r3, [pc, #116]	; (80094e0 <pvPortMalloc+0x188>)
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	4a1b      	ldr	r2, [pc, #108]	; (80094e0 <pvPortMalloc+0x188>)
 8009474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009476:	4b1a      	ldr	r3, [pc, #104]	; (80094e0 <pvPortMalloc+0x188>)
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	4b1b      	ldr	r3, [pc, #108]	; (80094e8 <pvPortMalloc+0x190>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	429a      	cmp	r2, r3
 8009480:	d203      	bcs.n	800948a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009482:	4b17      	ldr	r3, [pc, #92]	; (80094e0 <pvPortMalloc+0x188>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a18      	ldr	r2, [pc, #96]	; (80094e8 <pvPortMalloc+0x190>)
 8009488:	6013      	str	r3, [r2, #0]
=======
 800c82c:	4b1d      	ldr	r3, [pc, #116]	; (800c8a4 <pvPortMalloc+0x188>)
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	1ad3      	subs	r3, r2, r3
 800c836:	4a1b      	ldr	r2, [pc, #108]	; (800c8a4 <pvPortMalloc+0x188>)
 800c838:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c83a:	4b1a      	ldr	r3, [pc, #104]	; (800c8a4 <pvPortMalloc+0x188>)
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	4b1b      	ldr	r3, [pc, #108]	; (800c8ac <pvPortMalloc+0x190>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	429a      	cmp	r2, r3
 800c844:	d203      	bcs.n	800c84e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c846:	4b17      	ldr	r3, [pc, #92]	; (800c8a4 <pvPortMalloc+0x188>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a18      	ldr	r2, [pc, #96]	; (800c8ac <pvPortMalloc+0x190>)
 800c84c:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< Updated upstream
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	4b13      	ldr	r3, [pc, #76]	; (80094dc <pvPortMalloc+0x184>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	431a      	orrs	r2, r3
 8009494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949a:	2200      	movs	r2, #0
 800949c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800949e:	4b13      	ldr	r3, [pc, #76]	; (80094ec <pvPortMalloc+0x194>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3301      	adds	r3, #1
 80094a4:	4a11      	ldr	r2, [pc, #68]	; (80094ec <pvPortMalloc+0x194>)
 80094a6:	6013      	str	r3, [r2, #0]
=======
 800c84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c850:	685a      	ldr	r2, [r3, #4]
 800c852:	4b13      	ldr	r3, [pc, #76]	; (800c8a0 <pvPortMalloc+0x184>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	431a      	orrs	r2, r3
 800c858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85e:	2200      	movs	r2, #0
 800c860:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c862:	4b13      	ldr	r3, [pc, #76]	; (800c8b0 <pvPortMalloc+0x194>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	3301      	adds	r3, #1
 800c868:	4a11      	ldr	r2, [pc, #68]	; (800c8b0 <pvPortMalloc+0x194>)
 800c86a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< Updated upstream
 80094a8:	f001 fdb0 	bl	800b00c <xTaskResumeAll>
=======
 800c86c:	f001 fdae 	bl	800e3cc <xTaskResumeAll>
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< Updated upstream
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	f003 0307 	and.w	r3, r3, #7
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00a      	beq.n	80094cc <pvPortMalloc+0x174>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	60fb      	str	r3, [r7, #12]
}
 80094c8:	bf00      	nop
 80094ca:	e7fe      	b.n	80094ca <pvPortMalloc+0x172>
	return pvReturn;
 80094cc:	69fb      	ldr	r3, [r7, #28]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3728      	adds	r7, #40	; 0x28
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	24004894 	.word	0x24004894
 80094dc:	240048a8 	.word	0x240048a8
 80094e0:	24004898 	.word	0x24004898
 80094e4:	2400488c 	.word	0x2400488c
 80094e8:	2400489c 	.word	0x2400489c
 80094ec:	240048a0 	.word	0x240048a0

080094f0 <vPortFree>:
=======
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	f003 0307 	and.w	r3, r3, #7
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00a      	beq.n	800c890 <pvPortMalloc+0x174>
	__asm volatile
 800c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	60fb      	str	r3, [r7, #12]
}
 800c88c:	bf00      	nop
 800c88e:	e7fe      	b.n	800c88e <pvPortMalloc+0x172>
	return pvReturn;
 800c890:	69fb      	ldr	r3, [r7, #28]
}
 800c892:	4618      	mov	r0, r3
 800c894:	3728      	adds	r7, #40	; 0x28
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	24004d70 	.word	0x24004d70
 800c8a0:	24004d84 	.word	0x24004d84
 800c8a4:	24004d74 	.word	0x24004d74
 800c8a8:	24004d68 	.word	0x24004d68
 800c8ac:	24004d78 	.word	0x24004d78
 800c8b0:	24004d7c 	.word	0x24004d7c

0800c8b4 <vPortFree>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< Updated upstream
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d04d      	beq.n	800959e <vPortFree+0xae>
=======
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b086      	sub	sp, #24
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d04d      	beq.n	800c962 <vPortFree+0xae>
>>>>>>> Stashed changes
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< Updated upstream
 8009502:	2308      	movs	r3, #8
 8009504:	425b      	negs	r3, r3
 8009506:	697a      	ldr	r2, [r7, #20]
 8009508:	4413      	add	r3, r2
 800950a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	685a      	ldr	r2, [r3, #4]
 8009514:	4b24      	ldr	r3, [pc, #144]	; (80095a8 <vPortFree+0xb8>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4013      	ands	r3, r2
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10a      	bne.n	8009534 <vPortFree+0x44>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	60fb      	str	r3, [r7, #12]
}
 8009530:	bf00      	nop
 8009532:	e7fe      	b.n	8009532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00a      	beq.n	8009552 <vPortFree+0x62>
	__asm volatile
 800953c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	60bb      	str	r3, [r7, #8]
}
 800954e:	bf00      	nop
 8009550:	e7fe      	b.n	8009550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	4b14      	ldr	r3, [pc, #80]	; (80095a8 <vPortFree+0xb8>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4013      	ands	r3, r2
 800955c:	2b00      	cmp	r3, #0
 800955e:	d01e      	beq.n	800959e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d11a      	bne.n	800959e <vPortFree+0xae>
=======
 800c8c6:	2308      	movs	r3, #8
 800c8c8:	425b      	negs	r3, r3
 800c8ca:	697a      	ldr	r2, [r7, #20]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	685a      	ldr	r2, [r3, #4]
 800c8d8:	4b24      	ldr	r3, [pc, #144]	; (800c96c <vPortFree+0xb8>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4013      	ands	r3, r2
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10a      	bne.n	800c8f8 <vPortFree+0x44>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	60fb      	str	r3, [r7, #12]
}
 800c8f4:	bf00      	nop
 800c8f6:	e7fe      	b.n	800c8f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00a      	beq.n	800c916 <vPortFree+0x62>
	__asm volatile
 800c900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c904:	f383 8811 	msr	BASEPRI, r3
 800c908:	f3bf 8f6f 	isb	sy
 800c90c:	f3bf 8f4f 	dsb	sy
 800c910:	60bb      	str	r3, [r7, #8]
}
 800c912:	bf00      	nop
 800c914:	e7fe      	b.n	800c914 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	685a      	ldr	r2, [r3, #4]
 800c91a:	4b14      	ldr	r3, [pc, #80]	; (800c96c <vPortFree+0xb8>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4013      	ands	r3, r2
 800c920:	2b00      	cmp	r3, #0
 800c922:	d01e      	beq.n	800c962 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d11a      	bne.n	800c962 <vPortFree+0xae>
>>>>>>> Stashed changes
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< Updated upstream
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	4b0e      	ldr	r3, [pc, #56]	; (80095a8 <vPortFree+0xb8>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	43db      	mvns	r3, r3
 8009572:	401a      	ands	r2, r3
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009578:	f001 fd3a 	bl	800aff0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	685a      	ldr	r2, [r3, #4]
 8009580:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <vPortFree+0xbc>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4413      	add	r3, r2
 8009586:	4a09      	ldr	r2, [pc, #36]	; (80095ac <vPortFree+0xbc>)
 8009588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800958a:	6938      	ldr	r0, [r7, #16]
 800958c:	f000 f874 	bl	8009678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009590:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <vPortFree+0xc0>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3301      	adds	r3, #1
 8009596:	4a06      	ldr	r2, [pc, #24]	; (80095b0 <vPortFree+0xc0>)
 8009598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800959a:	f001 fd37 	bl	800b00c <xTaskResumeAll>
=======
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	685a      	ldr	r2, [r3, #4]
 800c930:	4b0e      	ldr	r3, [pc, #56]	; (800c96c <vPortFree+0xb8>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	43db      	mvns	r3, r3
 800c936:	401a      	ands	r2, r3
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c93c:	f001 fd38 	bl	800e3b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	685a      	ldr	r2, [r3, #4]
 800c944:	4b0a      	ldr	r3, [pc, #40]	; (800c970 <vPortFree+0xbc>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4413      	add	r3, r2
 800c94a:	4a09      	ldr	r2, [pc, #36]	; (800c970 <vPortFree+0xbc>)
 800c94c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c94e:	6938      	ldr	r0, [r7, #16]
 800c950:	f000 f874 	bl	800ca3c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c954:	4b07      	ldr	r3, [pc, #28]	; (800c974 <vPortFree+0xc0>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	3301      	adds	r3, #1
 800c95a:	4a06      	ldr	r2, [pc, #24]	; (800c974 <vPortFree+0xc0>)
 800c95c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c95e:	f001 fd35 	bl	800e3cc <xTaskResumeAll>
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< Updated upstream
 800959e:	bf00      	nop
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	240048a8 	.word	0x240048a8
 80095ac:	24004898 	.word	0x24004898
 80095b0:	240048a4 	.word	0x240048a4

080095b4 <prvHeapInit>:
=======
 800c962:	bf00      	nop
 800c964:	3718      	adds	r7, #24
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	24004d84 	.word	0x24004d84
 800c970:	24004d74 	.word	0x24004d74
 800c974:	24004d80 	.word	0x24004d80

0800c978 <prvHeapInit>:
>>>>>>> Stashed changes
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< Updated upstream
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
=======
 800c978:	b480      	push	{r7}
 800c97a:	b085      	sub	sp, #20
 800c97c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< Updated upstream
 80095ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80095be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80095c0:	4b27      	ldr	r3, [pc, #156]	; (8009660 <prvHeapInit+0xac>)
 80095c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f003 0307 	and.w	r3, r3, #7
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00c      	beq.n	80095e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	3307      	adds	r3, #7
 80095d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f023 0307 	bic.w	r3, r3, #7
 80095da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	4a1f      	ldr	r2, [pc, #124]	; (8009660 <prvHeapInit+0xac>)
 80095e4:	4413      	add	r3, r2
 80095e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	607b      	str	r3, [r7, #4]
=======
 800c97e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c982:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c984:	4b27      	ldr	r3, [pc, #156]	; (800ca24 <prvHeapInit+0xac>)
 800c986:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f003 0307 	and.w	r3, r3, #7
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d00c      	beq.n	800c9ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	3307      	adds	r3, #7
 800c996:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f023 0307 	bic.w	r3, r3, #7
 800c99e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c9a0:	68ba      	ldr	r2, [r7, #8]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	1ad3      	subs	r3, r2, r3
 800c9a6:	4a1f      	ldr	r2, [pc, #124]	; (800ca24 <prvHeapInit+0xac>)
 800c9a8:	4413      	add	r3, r2
 800c9aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< Updated upstream
 80095ec:	4a1d      	ldr	r2, [pc, #116]	; (8009664 <prvHeapInit+0xb0>)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80095f2:	4b1c      	ldr	r3, [pc, #112]	; (8009664 <prvHeapInit+0xb0>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	605a      	str	r2, [r3, #4]
=======
 800c9b0:	4a1d      	ldr	r2, [pc, #116]	; (800ca28 <prvHeapInit+0xb0>)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c9b6:	4b1c      	ldr	r3, [pc, #112]	; (800ca28 <prvHeapInit+0xb0>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< Updated upstream
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	4413      	add	r3, r2
 80095fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009600:	2208      	movs	r2, #8
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	1a9b      	subs	r3, r3, r2
 8009606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f023 0307 	bic.w	r3, r3, #7
 800960e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	4a15      	ldr	r2, [pc, #84]	; (8009668 <prvHeapInit+0xb4>)
 8009614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009616:	4b14      	ldr	r3, [pc, #80]	; (8009668 <prvHeapInit+0xb4>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2200      	movs	r2, #0
 800961c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800961e:	4b12      	ldr	r3, [pc, #72]	; (8009668 <prvHeapInit+0xb4>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]
=======
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	68ba      	ldr	r2, [r7, #8]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c9c4:	2208      	movs	r2, #8
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	1a9b      	subs	r3, r3, r2
 800c9ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f023 0307 	bic.w	r3, r3, #7
 800c9d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	4a15      	ldr	r2, [pc, #84]	; (800ca2c <prvHeapInit+0xb4>)
 800c9d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c9da:	4b14      	ldr	r3, [pc, #80]	; (800ca2c <prvHeapInit+0xb4>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c9e2:	4b12      	ldr	r3, [pc, #72]	; (800ca2c <prvHeapInit+0xb4>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< Updated upstream
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	1ad2      	subs	r2, r2, r3
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009634:	4b0c      	ldr	r3, [pc, #48]	; (8009668 <prvHeapInit+0xb4>)
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	4a0a      	ldr	r2, [pc, #40]	; (800966c <prvHeapInit+0xb8>)
 8009642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	4a09      	ldr	r2, [pc, #36]	; (8009670 <prvHeapInit+0xbc>)
 800964a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800964c:	4b09      	ldr	r3, [pc, #36]	; (8009674 <prvHeapInit+0xc0>)
 800964e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009652:	601a      	str	r2, [r3, #0]
}
 8009654:	bf00      	nop
 8009656:	3714      	adds	r7, #20
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	24000c8c 	.word	0x24000c8c
 8009664:	2400488c 	.word	0x2400488c
 8009668:	24004894 	.word	0x24004894
 800966c:	2400489c 	.word	0x2400489c
 8009670:	24004898 	.word	0x24004898
 8009674:	240048a8 	.word	0x240048a8

08009678 <prvInsertBlockIntoFreeList>:
=======
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	1ad2      	subs	r2, r2, r3
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c9f8:	4b0c      	ldr	r3, [pc, #48]	; (800ca2c <prvHeapInit+0xb4>)
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	4a0a      	ldr	r2, [pc, #40]	; (800ca30 <prvHeapInit+0xb8>)
 800ca06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	4a09      	ldr	r2, [pc, #36]	; (800ca34 <prvHeapInit+0xbc>)
 800ca0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca10:	4b09      	ldr	r3, [pc, #36]	; (800ca38 <prvHeapInit+0xc0>)
 800ca12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ca16:	601a      	str	r2, [r3, #0]
}
 800ca18:	bf00      	nop
 800ca1a:	3714      	adds	r7, #20
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr
 800ca24:	24001168 	.word	0x24001168
 800ca28:	24004d68 	.word	0x24004d68
 800ca2c:	24004d70 	.word	0x24004d70
 800ca30:	24004d78 	.word	0x24004d78
 800ca34:	24004d74 	.word	0x24004d74
 800ca38:	24004d84 	.word	0x24004d84

0800ca3c <prvInsertBlockIntoFreeList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< Updated upstream
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
=======
 800ca3c:	b480      	push	{r7}
 800ca3e:	b085      	sub	sp, #20
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< Updated upstream
 8009680:	4b28      	ldr	r3, [pc, #160]	; (8009724 <prvInsertBlockIntoFreeList+0xac>)
 8009682:	60fb      	str	r3, [r7, #12]
 8009684:	e002      	b.n	800968c <prvInsertBlockIntoFreeList+0x14>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	60fb      	str	r3, [r7, #12]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	429a      	cmp	r2, r3
 8009694:	d8f7      	bhi.n	8009686 <prvInsertBlockIntoFreeList+0xe>
=======
 800ca44:	4b28      	ldr	r3, [pc, #160]	; (800cae8 <prvInsertBlockIntoFreeList+0xac>)
 800ca46:	60fb      	str	r3, [r7, #12]
 800ca48:	e002      	b.n	800ca50 <prvInsertBlockIntoFreeList+0x14>
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	60fb      	str	r3, [r7, #12]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d8f7      	bhi.n	800ca4a <prvInsertBlockIntoFreeList+0xe>
>>>>>>> Stashed changes
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< Updated upstream
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	4413      	add	r3, r2
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d108      	bne.n	80096ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	441a      	add	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	607b      	str	r3, [r7, #4]
=======
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	68ba      	ldr	r2, [r7, #8]
 800ca64:	4413      	add	r3, r2
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d108      	bne.n	800ca7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	685a      	ldr	r2, [r3, #4]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	441a      	add	r2, r3
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< Updated upstream
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	441a      	add	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d118      	bne.n	8009700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	4b15      	ldr	r3, [pc, #84]	; (8009728 <prvInsertBlockIntoFreeList+0xb0>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d00d      	beq.n	80096f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	441a      	add	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	e008      	b.n	8009708 <prvInsertBlockIntoFreeList+0x90>
=======
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	68ba      	ldr	r2, [r7, #8]
 800ca88:	441a      	add	r2, r3
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d118      	bne.n	800cac4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	4b15      	ldr	r3, [pc, #84]	; (800caec <prvInsertBlockIntoFreeList+0xb0>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d00d      	beq.n	800caba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	685a      	ldr	r2, [r3, #4]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	441a      	add	r2, r3
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	601a      	str	r2, [r3, #0]
 800cab8:	e008      	b.n	800cacc <prvInsertBlockIntoFreeList+0x90>
>>>>>>> Stashed changes
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< Updated upstream
 80096f6:	4b0c      	ldr	r3, [pc, #48]	; (8009728 <prvInsertBlockIntoFreeList+0xb0>)
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	e003      	b.n	8009708 <prvInsertBlockIntoFreeList+0x90>
=======
 800caba:	4b0c      	ldr	r3, [pc, #48]	; (800caec <prvInsertBlockIntoFreeList+0xb0>)
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	601a      	str	r2, [r3, #0]
 800cac2:	e003      	b.n	800cacc <prvInsertBlockIntoFreeList+0x90>
>>>>>>> Stashed changes
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< Updated upstream
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	601a      	str	r2, [r3, #0]
=======
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< Updated upstream
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	429a      	cmp	r2, r3
 800970e:	d002      	beq.n	8009716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	601a      	str	r2, [r3, #0]
=======
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d002      	beq.n	800cada <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 8009716:	bf00      	nop
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	2400488c 	.word	0x2400488c
 8009728:	24004894 	.word	0x24004894

0800972c <vListInitialise>:
=======
 800cada:	bf00      	nop
 800cadc:	3714      	adds	r7, #20
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	24004d68 	.word	0x24004d68
 800caec:	24004d70 	.word	0x24004d70

0800caf0 <vListInitialise>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< Updated upstream
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
=======
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< Updated upstream
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f103 0208 	add.w	r2, r3, #8
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	605a      	str	r2, [r3, #4]
=======
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f103 0208 	add.w	r2, r3, #8
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< Updated upstream
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f04f 32ff 	mov.w	r2, #4294967295
 8009744:	609a      	str	r2, [r3, #8]
=======
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f04f 32ff 	mov.w	r2, #4294967295
 800cb08:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< Updated upstream
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f103 0208 	add.w	r2, r3, #8
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f103 0208 	add.w	r2, r3, #8
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	601a      	str	r2, [r3, #0]
=======
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f103 0208 	add.w	r2, r3, #8
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f103 0208 	add.w	r2, r3, #8
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2200      	movs	r2, #0
 800cb22:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< Updated upstream
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <vListInitialiseItem>:
=======
 800cb24:	bf00      	nop
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <vListInitialiseItem>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< Updated upstream
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	611a      	str	r2, [r3, #16]
=======
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< Updated upstream
 800977a:	bf00      	nop
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <vListInsertEnd>:
=======
 800cb3e:	bf00      	nop
 800cb40:	370c      	adds	r7, #12
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr

0800cb4a <vListInsertEnd>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< Updated upstream
 8009786:	b480      	push	{r7}
 8009788:	b085      	sub	sp, #20
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	60fb      	str	r3, [r7, #12]
=======
 800cb4a:	b480      	push	{r7}
 800cb4c:	b085      	sub	sp, #20
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
 800cb52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< Updated upstream
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	609a      	str	r2, [r3, #8]
=======
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	689a      	ldr	r2, [r3, #8]
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< Updated upstream
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	601a      	str	r2, [r3, #0]
}
 80097c2:	bf00      	nop
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <vListInsert>:
=======
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	683a      	ldr	r2, [r7, #0]
 800cb6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	683a      	ldr	r2, [r7, #0]
 800cb74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	1c5a      	adds	r2, r3, #1
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	601a      	str	r2, [r3, #0]
}
 800cb86:	bf00      	nop
 800cb88:	3714      	adds	r7, #20
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr

0800cb92 <vListInsert>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< Updated upstream
 80097ce:	b480      	push	{r7}
 80097d0:	b085      	sub	sp, #20
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	60bb      	str	r3, [r7, #8]
=======
 800cb92:	b480      	push	{r7}
 800cb94:	b085      	sub	sp, #20
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
 800cb9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< Updated upstream
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e4:	d103      	bne.n	80097ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	e00c      	b.n	8009808 <vListInsert+0x3a>
=======
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba8:	d103      	bne.n	800cbb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	691b      	ldr	r3, [r3, #16]
 800cbae:	60fb      	str	r3, [r7, #12]
 800cbb0:	e00c      	b.n	800cbcc <vListInsert+0x3a>
>>>>>>> Stashed changes
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< Updated upstream
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	3308      	adds	r3, #8
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	e002      	b.n	80097fc <vListInsert+0x2e>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	429a      	cmp	r2, r3
 8009806:	d2f6      	bcs.n	80097f6 <vListInsert+0x28>
=======
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	3308      	adds	r3, #8
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	e002      	b.n	800cbc0 <vListInsert+0x2e>
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	60fb      	str	r3, [r7, #12]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	68ba      	ldr	r2, [r7, #8]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d2f6      	bcs.n	800cbba <vListInsert+0x28>
>>>>>>> Stashed changes
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< Updated upstream
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	683a      	ldr	r2, [r7, #0]
 8009816:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	605a      	str	r2, [r3, #4]
=======
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	685a      	ldr	r2, [r3, #4]
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	683a      	ldr	r2, [r7, #0]
 800cbda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	68fa      	ldr	r2, [r7, #12]
 800cbe0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	683a      	ldr	r2, [r7, #0]
 800cbe6:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< Updated upstream
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	1c5a      	adds	r2, r3, #1
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	601a      	str	r2, [r3, #0]
}
 8009834:	bf00      	nop
 8009836:	3714      	adds	r7, #20
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <uxListRemove>:
=======
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	1c5a      	adds	r2, r3, #1
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	601a      	str	r2, [r3, #0]
}
 800cbf8:	bf00      	nop
 800cbfa:	3714      	adds	r7, #20
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <uxListRemove>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< Updated upstream
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	6892      	ldr	r2, [r2, #8]
 8009856:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	6852      	ldr	r2, [r2, #4]
 8009860:	605a      	str	r2, [r3, #4]
=======
 800cc04:	b480      	push	{r7}
 800cc06:	b085      	sub	sp, #20
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	691b      	ldr	r3, [r3, #16]
 800cc10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	6892      	ldr	r2, [r2, #8]
 800cc1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	6852      	ldr	r2, [r2, #4]
 800cc24:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< Updated upstream
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	429a      	cmp	r2, r3
 800986a:	d103      	bne.n	8009874 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	689a      	ldr	r2, [r3, #8]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	605a      	str	r2, [r3, #4]
=======
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d103      	bne.n	800cc38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	689a      	ldr	r2, [r3, #8]
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< Updated upstream
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	1e5a      	subs	r2, r3, #1
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <pxPortInitialiseStack>:
=======
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	1e5a      	subs	r2, r3, #1
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3714      	adds	r7, #20
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr

0800cc58 <pxPortInitialiseStack>:
>>>>>>> Stashed changes

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< Updated upstream
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
=======
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< Updated upstream
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	3b04      	subs	r3, #4
 80098a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3b04      	subs	r3, #4
 80098b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	f023 0201 	bic.w	r2, r3, #1
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	3b04      	subs	r3, #4
 80098c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098c4:	4a0c      	ldr	r2, [pc, #48]	; (80098f8 <pxPortInitialiseStack+0x64>)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3b14      	subs	r3, #20
 80098ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	601a      	str	r2, [r3, #0]
=======
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	3b04      	subs	r3, #4
 800cc68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cc70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	3b04      	subs	r3, #4
 800cc76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	f023 0201 	bic.w	r2, r3, #1
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	3b04      	subs	r3, #4
 800cc86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc88:	4a0c      	ldr	r2, [pc, #48]	; (800ccbc <pxPortInitialiseStack+0x64>)
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	3b14      	subs	r3, #20
 800cc92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< Updated upstream
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	3b04      	subs	r3, #4
 80098da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f06f 0202 	mvn.w	r2, #2
 80098e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	3b20      	subs	r3, #32
 80098e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098ea:	68fb      	ldr	r3, [r7, #12]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	080098fd 	.word	0x080098fd

080098fc <prvTaskExitError>:
=======
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	3b04      	subs	r3, #4
 800cc9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f06f 0202 	mvn.w	r2, #2
 800cca6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	3b20      	subs	r3, #32
 800ccac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ccae:	68fb      	ldr	r3, [r7, #12]
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3714      	adds	r7, #20
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	0800ccc1 	.word	0x0800ccc1

0800ccc0 <prvTaskExitError>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< Updated upstream
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	607b      	str	r3, [r7, #4]
=======
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< Updated upstream
 8009906:	4b12      	ldr	r3, [pc, #72]	; (8009950 <prvTaskExitError+0x54>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990e:	d00a      	beq.n	8009926 <prvTaskExitError+0x2a>
	__asm volatile
 8009910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	60fb      	str	r3, [r7, #12]
}
 8009922:	bf00      	nop
 8009924:	e7fe      	b.n	8009924 <prvTaskExitError+0x28>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	60bb      	str	r3, [r7, #8]
}
 8009938:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800993a:	bf00      	nop
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d0fc      	beq.n	800993c <prvTaskExitError+0x40>
=======
 800ccca:	4b12      	ldr	r3, [pc, #72]	; (800cd14 <prvTaskExitError+0x54>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccd2:	d00a      	beq.n	800ccea <prvTaskExitError+0x2a>
	__asm volatile
 800ccd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd8:	f383 8811 	msr	BASEPRI, r3
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	60fb      	str	r3, [r7, #12]
}
 800cce6:	bf00      	nop
 800cce8:	e7fe      	b.n	800cce8 <prvTaskExitError+0x28>
	__asm volatile
 800ccea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccee:	f383 8811 	msr	BASEPRI, r3
 800ccf2:	f3bf 8f6f 	isb	sy
 800ccf6:	f3bf 8f4f 	dsb	sy
 800ccfa:	60bb      	str	r3, [r7, #8]
}
 800ccfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ccfe:	bf00      	nop
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d0fc      	beq.n	800cd00 <prvTaskExitError+0x40>
>>>>>>> Stashed changes
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< Updated upstream
 8009942:	bf00      	nop
 8009944:	bf00      	nop
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	24000010 	.word	0x24000010
	...

08009960 <SVC_Handler>:
=======
 800cd06:	bf00      	nop
 800cd08:	bf00      	nop
 800cd0a:	3714      	adds	r7, #20
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr
 800cd14:	24000018 	.word	0x24000018
	...

0800cd20 <SVC_Handler>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< Updated upstream
 8009960:	4b07      	ldr	r3, [pc, #28]	; (8009980 <pxCurrentTCBConst2>)
 8009962:	6819      	ldr	r1, [r3, #0]
 8009964:	6808      	ldr	r0, [r1, #0]
 8009966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996a:	f380 8809 	msr	PSP, r0
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f04f 0000 	mov.w	r0, #0
 8009976:	f380 8811 	msr	BASEPRI, r0
 800997a:	4770      	bx	lr
 800997c:	f3af 8000 	nop.w

08009980 <pxCurrentTCBConst2>:
 8009980:	240048f4 	.word	0x240048f4
=======
 800cd20:	4b07      	ldr	r3, [pc, #28]	; (800cd40 <pxCurrentTCBConst2>)
 800cd22:	6819      	ldr	r1, [r3, #0]
 800cd24:	6808      	ldr	r0, [r1, #0]
 800cd26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd2a:	f380 8809 	msr	PSP, r0
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	f04f 0000 	mov.w	r0, #0
 800cd36:	f380 8811 	msr	BASEPRI, r0
 800cd3a:	4770      	bx	lr
 800cd3c:	f3af 8000 	nop.w

0800cd40 <pxCurrentTCBConst2>:
 800cd40:	24004dd0 	.word	0x24004dd0
>>>>>>> Stashed changes
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< Updated upstream
 8009984:	bf00      	nop
 8009986:	bf00      	nop

08009988 <prvPortStartFirstTask>:
=======
 800cd44:	bf00      	nop
 800cd46:	bf00      	nop

0800cd48 <prvPortStartFirstTask>:
>>>>>>> Stashed changes
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< Updated upstream
 8009988:	4808      	ldr	r0, [pc, #32]	; (80099ac <prvPortStartFirstTask+0x24>)
 800998a:	6800      	ldr	r0, [r0, #0]
 800998c:	6800      	ldr	r0, [r0, #0]
 800998e:	f380 8808 	msr	MSP, r0
 8009992:	f04f 0000 	mov.w	r0, #0
 8009996:	f380 8814 	msr	CONTROL, r0
 800999a:	b662      	cpsie	i
 800999c:	b661      	cpsie	f
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	df00      	svc	0
 80099a8:	bf00      	nop
=======
 800cd48:	4808      	ldr	r0, [pc, #32]	; (800cd6c <prvPortStartFirstTask+0x24>)
 800cd4a:	6800      	ldr	r0, [r0, #0]
 800cd4c:	6800      	ldr	r0, [r0, #0]
 800cd4e:	f380 8808 	msr	MSP, r0
 800cd52:	f04f 0000 	mov.w	r0, #0
 800cd56:	f380 8814 	msr	CONTROL, r0
 800cd5a:	b662      	cpsie	i
 800cd5c:	b661      	cpsie	f
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	f3bf 8f6f 	isb	sy
 800cd66:	df00      	svc	0
 800cd68:	bf00      	nop
>>>>>>> Stashed changes
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< Updated upstream
 80099aa:	bf00      	nop
 80099ac:	e000ed08 	.word	0xe000ed08

080099b0 <xPortStartScheduler>:
=======
 800cd6a:	bf00      	nop
 800cd6c:	e000ed08 	.word	0xe000ed08

0800cd70 <xPortStartScheduler>:
>>>>>>> Stashed changes

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< Updated upstream
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
=======
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b086      	sub	sp, #24
 800cd74:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< Updated upstream
 80099b6:	4b46      	ldr	r3, [pc, #280]	; (8009ad0 <xPortStartScheduler+0x120>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a46      	ldr	r2, [pc, #280]	; (8009ad4 <xPortStartScheduler+0x124>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d10a      	bne.n	80099d6 <xPortStartScheduler+0x26>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	613b      	str	r3, [r7, #16]
}
 80099d2:	bf00      	nop
 80099d4:	e7fe      	b.n	80099d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099d6:	4b3e      	ldr	r3, [pc, #248]	; (8009ad0 <xPortStartScheduler+0x120>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a3f      	ldr	r2, [pc, #252]	; (8009ad8 <xPortStartScheduler+0x128>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d10a      	bne.n	80099f6 <xPortStartScheduler+0x46>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	60fb      	str	r3, [r7, #12]
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <xPortStartScheduler+0x44>
=======
 800cd76:	4b46      	ldr	r3, [pc, #280]	; (800ce90 <xPortStartScheduler+0x120>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a46      	ldr	r2, [pc, #280]	; (800ce94 <xPortStartScheduler+0x124>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d10a      	bne.n	800cd96 <xPortStartScheduler+0x26>
	__asm volatile
 800cd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	613b      	str	r3, [r7, #16]
}
 800cd92:	bf00      	nop
 800cd94:	e7fe      	b.n	800cd94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cd96:	4b3e      	ldr	r3, [pc, #248]	; (800ce90 <xPortStartScheduler+0x120>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4a3f      	ldr	r2, [pc, #252]	; (800ce98 <xPortStartScheduler+0x128>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d10a      	bne.n	800cdb6 <xPortStartScheduler+0x46>
	__asm volatile
 800cda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda4:	f383 8811 	msr	BASEPRI, r3
 800cda8:	f3bf 8f6f 	isb	sy
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	60fb      	str	r3, [r7, #12]
}
 800cdb2:	bf00      	nop
 800cdb4:	e7fe      	b.n	800cdb4 <xPortStartScheduler+0x44>
>>>>>>> Stashed changes

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< Updated upstream
 80099f6:	4b39      	ldr	r3, [pc, #228]	; (8009adc <xPortStartScheduler+0x12c>)
 80099f8:	617b      	str	r3, [r7, #20]
=======
 800cdb6:	4b39      	ldr	r3, [pc, #228]	; (800ce9c <xPortStartScheduler+0x12c>)
 800cdb8:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< Updated upstream
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	607b      	str	r3, [r7, #4]
=======
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	b2db      	uxtb	r3, r3
 800cdc0:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< Updated upstream
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	22ff      	movs	r2, #255	; 0xff
 8009a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	4b31      	ldr	r3, [pc, #196]	; (8009ae0 <xPortStartScheduler+0x130>)
 8009a1c:	701a      	strb	r2, [r3, #0]
=======
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	22ff      	movs	r2, #255	; 0xff
 800cdc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cdd0:	78fb      	ldrb	r3, [r7, #3]
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cdd8:	b2da      	uxtb	r2, r3
 800cdda:	4b31      	ldr	r3, [pc, #196]	; (800cea0 <xPortStartScheduler+0x130>)
 800cddc:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< Updated upstream
 8009a1e:	4b31      	ldr	r3, [pc, #196]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a20:	2207      	movs	r2, #7
 8009a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a24:	e009      	b.n	8009a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a26:	4b2f      	ldr	r3, [pc, #188]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	4a2d      	ldr	r2, [pc, #180]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a3a:	78fb      	ldrb	r3, [r7, #3]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a42:	2b80      	cmp	r3, #128	; 0x80
 8009a44:	d0ef      	beq.n	8009a26 <xPortStartScheduler+0x76>
=======
 800cdde:	4b31      	ldr	r3, [pc, #196]	; (800cea4 <xPortStartScheduler+0x134>)
 800cde0:	2207      	movs	r2, #7
 800cde2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cde4:	e009      	b.n	800cdfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cde6:	4b2f      	ldr	r3, [pc, #188]	; (800cea4 <xPortStartScheduler+0x134>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	3b01      	subs	r3, #1
 800cdec:	4a2d      	ldr	r2, [pc, #180]	; (800cea4 <xPortStartScheduler+0x134>)
 800cdee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cdf0:	78fb      	ldrb	r3, [r7, #3]
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	005b      	lsls	r3, r3, #1
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdfa:	78fb      	ldrb	r3, [r7, #3]
 800cdfc:	b2db      	uxtb	r3, r3
 800cdfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce02:	2b80      	cmp	r3, #128	; 0x80
 800ce04:	d0ef      	beq.n	800cde6 <xPortStartScheduler+0x76>
>>>>>>> Stashed changes
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< Updated upstream
 8009a46:	4b27      	ldr	r3, [pc, #156]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f1c3 0307 	rsb	r3, r3, #7
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d00a      	beq.n	8009a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	60bb      	str	r3, [r7, #8]
}
 8009a64:	bf00      	nop
 8009a66:	e7fe      	b.n	8009a66 <xPortStartScheduler+0xb6>
=======
 800ce06:	4b27      	ldr	r3, [pc, #156]	; (800cea4 <xPortStartScheduler+0x134>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f1c3 0307 	rsb	r3, r3, #7
 800ce0e:	2b04      	cmp	r3, #4
 800ce10:	d00a      	beq.n	800ce28 <xPortStartScheduler+0xb8>
	__asm volatile
 800ce12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce16:	f383 8811 	msr	BASEPRI, r3
 800ce1a:	f3bf 8f6f 	isb	sy
 800ce1e:	f3bf 8f4f 	dsb	sy
 800ce22:	60bb      	str	r3, [r7, #8]
}
 800ce24:	bf00      	nop
 800ce26:	e7fe      	b.n	800ce26 <xPortStartScheduler+0xb6>
>>>>>>> Stashed changes
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< Updated upstream
 8009a68:	4b1e      	ldr	r3, [pc, #120]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	021b      	lsls	r3, r3, #8
 8009a6e:	4a1d      	ldr	r2, [pc, #116]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a72:	4b1c      	ldr	r3, [pc, #112]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a7a:	4a1a      	ldr	r2, [pc, #104]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a7c:	6013      	str	r3, [r2, #0]
=======
 800ce28:	4b1e      	ldr	r3, [pc, #120]	; (800cea4 <xPortStartScheduler+0x134>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	021b      	lsls	r3, r3, #8
 800ce2e:	4a1d      	ldr	r2, [pc, #116]	; (800cea4 <xPortStartScheduler+0x134>)
 800ce30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce32:	4b1c      	ldr	r3, [pc, #112]	; (800cea4 <xPortStartScheduler+0x134>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce3a:	4a1a      	ldr	r2, [pc, #104]	; (800cea4 <xPortStartScheduler+0x134>)
 800ce3c:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< Updated upstream
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	701a      	strb	r2, [r3, #0]
=======
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	b2da      	uxtb	r2, r3
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< Updated upstream
 8009a86:	4b18      	ldr	r3, [pc, #96]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a17      	ldr	r2, [pc, #92]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a92:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a14      	ldr	r2, [pc, #80]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a9c:	6013      	str	r3, [r2, #0]
=======
 800ce46:	4b18      	ldr	r3, [pc, #96]	; (800cea8 <xPortStartScheduler+0x138>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a17      	ldr	r2, [pc, #92]	; (800cea8 <xPortStartScheduler+0x138>)
 800ce4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ce50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce52:	4b15      	ldr	r3, [pc, #84]	; (800cea8 <xPortStartScheduler+0x138>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4a14      	ldr	r2, [pc, #80]	; (800cea8 <xPortStartScheduler+0x138>)
 800ce58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ce5c:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< Updated upstream
 8009a9e:	f000 f8dd 	bl	8009c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009aa2:	4b12      	ldr	r3, [pc, #72]	; (8009aec <xPortStartScheduler+0x13c>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009aa8:	f000 f8fc 	bl	8009ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009aac:	4b10      	ldr	r3, [pc, #64]	; (8009af0 <xPortStartScheduler+0x140>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a0f      	ldr	r2, [pc, #60]	; (8009af0 <xPortStartScheduler+0x140>)
 8009ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ab8:	f7ff ff66 	bl	8009988 <prvPortStartFirstTask>
=======
 800ce5e:	f000 f8dd 	bl	800d01c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce62:	4b12      	ldr	r3, [pc, #72]	; (800ceac <xPortStartScheduler+0x13c>)
 800ce64:	2200      	movs	r2, #0
 800ce66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ce68:	f000 f8fc 	bl	800d064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ce6c:	4b10      	ldr	r3, [pc, #64]	; (800ceb0 <xPortStartScheduler+0x140>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4a0f      	ldr	r2, [pc, #60]	; (800ceb0 <xPortStartScheduler+0x140>)
 800ce72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ce76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce78:	f7ff ff66 	bl	800cd48 <prvPortStartFirstTask>
>>>>>>> Stashed changes
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< Updated upstream
 8009abc:	f001 fc0e 	bl	800b2dc <vTaskSwitchContext>
	prvTaskExitError();
 8009ac0:	f7ff ff1c 	bl	80098fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3718      	adds	r7, #24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	e000ed00 	.word	0xe000ed00
 8009ad4:	410fc271 	.word	0x410fc271
 8009ad8:	410fc270 	.word	0x410fc270
 8009adc:	e000e400 	.word	0xe000e400
 8009ae0:	240048ac 	.word	0x240048ac
 8009ae4:	240048b0 	.word	0x240048b0
 8009ae8:	e000ed20 	.word	0xe000ed20
 8009aec:	24000010 	.word	0x24000010
 8009af0:	e000ef34 	.word	0xe000ef34

08009af4 <vPortEnterCritical>:
=======
 800ce7c:	f001 fc0e 	bl	800e69c <vTaskSwitchContext>
	prvTaskExitError();
 800ce80:	f7ff ff1e 	bl	800ccc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce84:	2300      	movs	r3, #0
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3718      	adds	r7, #24
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	e000ed00 	.word	0xe000ed00
 800ce94:	410fc271 	.word	0x410fc271
 800ce98:	410fc270 	.word	0x410fc270
 800ce9c:	e000e400 	.word	0xe000e400
 800cea0:	24004d88 	.word	0x24004d88
 800cea4:	24004d8c 	.word	0x24004d8c
 800cea8:	e000ed20 	.word	0xe000ed20
 800ceac:	24000018 	.word	0x24000018
 800ceb0:	e000ef34 	.word	0xe000ef34

0800ceb4 <vPortEnterCritical>:
>>>>>>> Stashed changes
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< Updated upstream
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
	__asm volatile
 8009afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afe:	f383 8811 	msr	BASEPRI, r3
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	f3bf 8f4f 	dsb	sy
 8009b0a:	607b      	str	r3, [r7, #4]
}
 8009b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	3301      	adds	r3, #1
 8009b14:	4a0d      	ldr	r2, [pc, #52]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b16:	6013      	str	r3, [r2, #0]
=======
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
	__asm volatile
 800ceba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cebe:	f383 8811 	msr	BASEPRI, r3
 800cec2:	f3bf 8f6f 	isb	sy
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	607b      	str	r3, [r7, #4]
}
 800cecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cece:	4b0f      	ldr	r3, [pc, #60]	; (800cf0c <vPortEnterCritical+0x58>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	3301      	adds	r3, #1
 800ced4:	4a0d      	ldr	r2, [pc, #52]	; (800cf0c <vPortEnterCritical+0x58>)
 800ced6:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< Updated upstream
 8009b18:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d10f      	bne.n	8009b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b20:	4b0b      	ldr	r3, [pc, #44]	; (8009b50 <vPortEnterCritical+0x5c>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	603b      	str	r3, [r7, #0]
}
 8009b3c:	bf00      	nop
 8009b3e:	e7fe      	b.n	8009b3e <vPortEnterCritical+0x4a>
	}
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	24000010 	.word	0x24000010
 8009b50:	e000ed04 	.word	0xe000ed04

08009b54 <vPortExitCritical>:
=======
 800ced8:	4b0c      	ldr	r3, [pc, #48]	; (800cf0c <vPortEnterCritical+0x58>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d10f      	bne.n	800cf00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cee0:	4b0b      	ldr	r3, [pc, #44]	; (800cf10 <vPortEnterCritical+0x5c>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	b2db      	uxtb	r3, r3
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00a      	beq.n	800cf00 <vPortEnterCritical+0x4c>
	__asm volatile
 800ceea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceee:	f383 8811 	msr	BASEPRI, r3
 800cef2:	f3bf 8f6f 	isb	sy
 800cef6:	f3bf 8f4f 	dsb	sy
 800cefa:	603b      	str	r3, [r7, #0]
}
 800cefc:	bf00      	nop
 800cefe:	e7fe      	b.n	800cefe <vPortEnterCritical+0x4a>
	}
}
 800cf00:	bf00      	nop
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr
 800cf0c:	24000018 	.word	0x24000018
 800cf10:	e000ed04 	.word	0xe000ed04

0800cf14 <vPortExitCritical>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< Updated upstream
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b5a:	4b12      	ldr	r3, [pc, #72]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10a      	bne.n	8009b78 <vPortExitCritical+0x24>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	607b      	str	r3, [r7, #4]
}
 8009b74:	bf00      	nop
 8009b76:	e7fe      	b.n	8009b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b78:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	4a09      	ldr	r2, [pc, #36]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b82:	4b08      	ldr	r3, [pc, #32]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d105      	bne.n	8009b96 <vPortExitCritical+0x42>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	603b      	str	r3, [r7, #0]
=======
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cf1a:	4b12      	ldr	r3, [pc, #72]	; (800cf64 <vPortExitCritical+0x50>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d10a      	bne.n	800cf38 <vPortExitCritical+0x24>
	__asm volatile
 800cf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf26:	f383 8811 	msr	BASEPRI, r3
 800cf2a:	f3bf 8f6f 	isb	sy
 800cf2e:	f3bf 8f4f 	dsb	sy
 800cf32:	607b      	str	r3, [r7, #4]
}
 800cf34:	bf00      	nop
 800cf36:	e7fe      	b.n	800cf36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cf38:	4b0a      	ldr	r3, [pc, #40]	; (800cf64 <vPortExitCritical+0x50>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	3b01      	subs	r3, #1
 800cf3e:	4a09      	ldr	r2, [pc, #36]	; (800cf64 <vPortExitCritical+0x50>)
 800cf40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf42:	4b08      	ldr	r3, [pc, #32]	; (800cf64 <vPortExitCritical+0x50>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d105      	bne.n	800cf56 <vPortExitCritical+0x42>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< Updated upstream
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	f383 8811 	msr	BASEPRI, r3
=======
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	f383 8811 	msr	BASEPRI, r3
>>>>>>> Stashed changes
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
<<<<<<< Updated upstream
 8009b94:	bf00      	nop
=======
 800cf54:	bf00      	nop
>>>>>>> Stashed changes
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< Updated upstream
 8009b96:	bf00      	nop
 8009b98:	370c      	adds	r7, #12
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	24000010 	.word	0x24000010
	...

08009bb0 <PendSV_Handler>:
=======
 800cf56:	bf00      	nop
 800cf58:	370c      	adds	r7, #12
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr
 800cf62:	bf00      	nop
 800cf64:	24000018 	.word	0x24000018
	...

0800cf70 <PendSV_Handler>:
>>>>>>> Stashed changes

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< Updated upstream
 8009bb0:	f3ef 8009 	mrs	r0, PSP
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	4b15      	ldr	r3, [pc, #84]	; (8009c10 <pxCurrentTCBConst>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	f01e 0f10 	tst.w	lr, #16
 8009bc0:	bf08      	it	eq
 8009bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bca:	6010      	str	r0, [r2, #0]
 8009bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009bd4:	f380 8811 	msr	BASEPRI, r0
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f001 fb7c 	bl	800b2dc <vTaskSwitchContext>
 8009be4:	f04f 0000 	mov.w	r0, #0
 8009be8:	f380 8811 	msr	BASEPRI, r0
 8009bec:	bc09      	pop	{r0, r3}
 8009bee:	6819      	ldr	r1, [r3, #0]
 8009bf0:	6808      	ldr	r0, [r1, #0]
 8009bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf6:	f01e 0f10 	tst.w	lr, #16
 8009bfa:	bf08      	it	eq
 8009bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c00:	f380 8809 	msr	PSP, r0
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	f3af 8000 	nop.w

08009c10 <pxCurrentTCBConst>:
 8009c10:	240048f4 	.word	0x240048f4
=======
 800cf70:	f3ef 8009 	mrs	r0, PSP
 800cf74:	f3bf 8f6f 	isb	sy
 800cf78:	4b15      	ldr	r3, [pc, #84]	; (800cfd0 <pxCurrentTCBConst>)
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	f01e 0f10 	tst.w	lr, #16
 800cf80:	bf08      	it	eq
 800cf82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cf86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf8a:	6010      	str	r0, [r2, #0]
 800cf8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cf90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cf94:	f380 8811 	msr	BASEPRI, r0
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	f001 fb7c 	bl	800e69c <vTaskSwitchContext>
 800cfa4:	f04f 0000 	mov.w	r0, #0
 800cfa8:	f380 8811 	msr	BASEPRI, r0
 800cfac:	bc09      	pop	{r0, r3}
 800cfae:	6819      	ldr	r1, [r3, #0]
 800cfb0:	6808      	ldr	r0, [r1, #0]
 800cfb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb6:	f01e 0f10 	tst.w	lr, #16
 800cfba:	bf08      	it	eq
 800cfbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cfc0:	f380 8809 	msr	PSP, r0
 800cfc4:	f3bf 8f6f 	isb	sy
 800cfc8:	4770      	bx	lr
 800cfca:	bf00      	nop
 800cfcc:	f3af 8000 	nop.w

0800cfd0 <pxCurrentTCBConst>:
 800cfd0:	24004dd0 	.word	0x24004dd0
>>>>>>> Stashed changes
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< Updated upstream
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop

08009c18 <xPortSysTickHandler>:
=======
 800cfd4:	bf00      	nop
 800cfd6:	bf00      	nop

0800cfd8 <xPortSysTickHandler>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< Updated upstream
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	607b      	str	r3, [r7, #4]
}
 8009c30:	bf00      	nop
=======
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
	__asm volatile
 800cfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	607b      	str	r3, [r7, #4]
}
 800cff0:	bf00      	nop
>>>>>>> Stashed changes
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< Updated upstream
 8009c32:	f001 fa99 	bl	800b168 <xTaskIncrementTick>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d003      	beq.n	8009c44 <xPortSysTickHandler+0x2c>
=======
 800cff2:	f001 fa99 	bl	800e528 <xTaskIncrementTick>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d003      	beq.n	800d004 <xPortSysTickHandler+0x2c>
>>>>>>> Stashed changes
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< Updated upstream
 8009c3c:	4b06      	ldr	r3, [pc, #24]	; (8009c58 <xPortSysTickHandler+0x40>)
 8009c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	2300      	movs	r3, #0
 8009c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	f383 8811 	msr	BASEPRI, r3
}
 8009c4e:	bf00      	nop
=======
 800cffc:	4b06      	ldr	r3, [pc, #24]	; (800d018 <xPortSysTickHandler+0x40>)
 800cffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d002:	601a      	str	r2, [r3, #0]
 800d004:	2300      	movs	r3, #0
 800d006:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	f383 8811 	msr	BASEPRI, r3
}
 800d00e:	bf00      	nop
>>>>>>> Stashed changes
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< Updated upstream
 8009c50:	bf00      	nop
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	e000ed04 	.word	0xe000ed04

08009c5c <vPortSetupTimerInterrupt>:
=======
 800d010:	bf00      	nop
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	e000ed04 	.word	0xe000ed04

0800d01c <vPortSetupTimerInterrupt>:
>>>>>>> Stashed changes
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< Updated upstream
 8009c5c:	b480      	push	{r7}
 8009c5e:	af00      	add	r7, sp, #0
=======
 800d01c:	b480      	push	{r7}
 800d01e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< Updated upstream
 8009c60:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <vPortSetupTimerInterrupt+0x34>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c66:	4b0b      	ldr	r3, [pc, #44]	; (8009c94 <vPortSetupTimerInterrupt+0x38>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c6c:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <vPortSetupTimerInterrupt+0x3c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a0a      	ldr	r2, [pc, #40]	; (8009c9c <vPortSetupTimerInterrupt+0x40>)
 8009c72:	fba2 2303 	umull	r2, r3, r2, r3
 8009c76:	099b      	lsrs	r3, r3, #6
 8009c78:	4a09      	ldr	r2, [pc, #36]	; (8009ca0 <vPortSetupTimerInterrupt+0x44>)
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c7e:	4b04      	ldr	r3, [pc, #16]	; (8009c90 <vPortSetupTimerInterrupt+0x34>)
 8009c80:	2207      	movs	r2, #7
 8009c82:	601a      	str	r2, [r3, #0]
}
 8009c84:	bf00      	nop
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	e000e010 	.word	0xe000e010
 8009c94:	e000e018 	.word	0xe000e018
 8009c98:	24000000 	.word	0x24000000
 8009c9c:	10624dd3 	.word	0x10624dd3
 8009ca0:	e000e014 	.word	0xe000e014

08009ca4 <vPortEnableVFP>:
=======
 800d020:	4b0b      	ldr	r3, [pc, #44]	; (800d050 <vPortSetupTimerInterrupt+0x34>)
 800d022:	2200      	movs	r2, #0
 800d024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d026:	4b0b      	ldr	r3, [pc, #44]	; (800d054 <vPortSetupTimerInterrupt+0x38>)
 800d028:	2200      	movs	r2, #0
 800d02a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d02c:	4b0a      	ldr	r3, [pc, #40]	; (800d058 <vPortSetupTimerInterrupt+0x3c>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a0a      	ldr	r2, [pc, #40]	; (800d05c <vPortSetupTimerInterrupt+0x40>)
 800d032:	fba2 2303 	umull	r2, r3, r2, r3
 800d036:	099b      	lsrs	r3, r3, #6
 800d038:	4a09      	ldr	r2, [pc, #36]	; (800d060 <vPortSetupTimerInterrupt+0x44>)
 800d03a:	3b01      	subs	r3, #1
 800d03c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d03e:	4b04      	ldr	r3, [pc, #16]	; (800d050 <vPortSetupTimerInterrupt+0x34>)
 800d040:	2207      	movs	r2, #7
 800d042:	601a      	str	r2, [r3, #0]
}
 800d044:	bf00      	nop
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr
 800d04e:	bf00      	nop
 800d050:	e000e010 	.word	0xe000e010
 800d054:	e000e018 	.word	0xe000e018
 800d058:	24000000 	.word	0x24000000
 800d05c:	10624dd3 	.word	0x10624dd3
 800d060:	e000e014 	.word	0xe000e014

0800d064 <vPortEnableVFP>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< Updated upstream
 8009ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009cb4 <vPortEnableVFP+0x10>
 8009ca8:	6801      	ldr	r1, [r0, #0]
 8009caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cae:	6001      	str	r1, [r0, #0]
 8009cb0:	4770      	bx	lr
=======
 800d064:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d074 <vPortEnableVFP+0x10>
 800d068:	6801      	ldr	r1, [r0, #0]
 800d06a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d06e:	6001      	str	r1, [r0, #0]
 800d070:	4770      	bx	lr
>>>>>>> Stashed changes
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< Updated upstream
 8009cb2:	bf00      	nop
 8009cb4:	e000ed88 	.word	0xe000ed88

08009cb8 <vPortValidateInterruptPriority>:
=======
 800d072:	bf00      	nop
 800d074:	e000ed88 	.word	0xe000ed88

0800d078 <vPortValidateInterruptPriority>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< Updated upstream
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
=======
 800d078:	b480      	push	{r7}
 800d07a:	b085      	sub	sp, #20
 800d07c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< Updated upstream
 8009cbe:	f3ef 8305 	mrs	r3, IPSR
 8009cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b0f      	cmp	r3, #15
 8009cc8:	d914      	bls.n	8009cf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cca:	4a17      	ldr	r2, [pc, #92]	; (8009d28 <vPortValidateInterruptPriority+0x70>)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4413      	add	r3, r2
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	72fb      	strb	r3, [r7, #11]
=======
 800d07e:	f3ef 8305 	mrs	r3, IPSR
 800d082:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2b0f      	cmp	r3, #15
 800d088:	d914      	bls.n	800d0b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d08a:	4a17      	ldr	r2, [pc, #92]	; (800d0e8 <vPortValidateInterruptPriority+0x70>)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	4413      	add	r3, r2
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	72fb      	strb	r3, [r7, #11]
>>>>>>> Stashed changes
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< Updated upstream
 8009cd4:	4b15      	ldr	r3, [pc, #84]	; (8009d2c <vPortValidateInterruptPriority+0x74>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	7afa      	ldrb	r2, [r7, #11]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d20a      	bcs.n	8009cf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	607b      	str	r3, [r7, #4]
}
 8009cf0:	bf00      	nop
 8009cf2:	e7fe      	b.n	8009cf2 <vPortValidateInterruptPriority+0x3a>
=======
 800d094:	4b15      	ldr	r3, [pc, #84]	; (800d0ec <vPortValidateInterruptPriority+0x74>)
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	7afa      	ldrb	r2, [r7, #11]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d20a      	bcs.n	800d0b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a2:	f383 8811 	msr	BASEPRI, r3
 800d0a6:	f3bf 8f6f 	isb	sy
 800d0aa:	f3bf 8f4f 	dsb	sy
 800d0ae:	607b      	str	r3, [r7, #4]
}
 800d0b0:	bf00      	nop
 800d0b2:	e7fe      	b.n	800d0b2 <vPortValidateInterruptPriority+0x3a>
>>>>>>> Stashed changes
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< Updated upstream
 8009cf4:	4b0e      	ldr	r3, [pc, #56]	; (8009d30 <vPortValidateInterruptPriority+0x78>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009cfc:	4b0d      	ldr	r3, [pc, #52]	; (8009d34 <vPortValidateInterruptPriority+0x7c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d90a      	bls.n	8009d1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	603b      	str	r3, [r7, #0]
}
 8009d16:	bf00      	nop
 8009d18:	e7fe      	b.n	8009d18 <vPortValidateInterruptPriority+0x60>
	}
 8009d1a:	bf00      	nop
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	e000e3f0 	.word	0xe000e3f0
 8009d2c:	240048ac 	.word	0x240048ac
 8009d30:	e000ed0c 	.word	0xe000ed0c
 8009d34:	240048b0 	.word	0x240048b0

08009d38 <xQueueGenericReset>:
=======
 800d0b4:	4b0e      	ldr	r3, [pc, #56]	; (800d0f0 <vPortValidateInterruptPriority+0x78>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d0bc:	4b0d      	ldr	r3, [pc, #52]	; (800d0f4 <vPortValidateInterruptPriority+0x7c>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d90a      	bls.n	800d0da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c8:	f383 8811 	msr	BASEPRI, r3
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	603b      	str	r3, [r7, #0]
}
 800d0d6:	bf00      	nop
 800d0d8:	e7fe      	b.n	800d0d8 <vPortValidateInterruptPriority+0x60>
	}
 800d0da:	bf00      	nop
 800d0dc:	3714      	adds	r7, #20
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr
 800d0e6:	bf00      	nop
 800d0e8:	e000e3f0 	.word	0xe000e3f0
 800d0ec:	24004d88 	.word	0x24004d88
 800d0f0:	e000ed0c 	.word	0xe000ed0c
 800d0f4:	24004d8c 	.word	0x24004d8c

0800d0f8 <xQueueGenericReset>:
>>>>>>> Stashed changes
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< Updated upstream
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10a      	bne.n	8009d62 <xQueueGenericReset+0x2a>
	__asm volatile
 8009d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d50:	f383 8811 	msr	BASEPRI, r3
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	60bb      	str	r3, [r7, #8]
}
 8009d5e:	bf00      	nop
 8009d60:	e7fe      	b.n	8009d60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d62:	f7ff fec7 	bl	8009af4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d6e:	68f9      	ldr	r1, [r7, #12]
 8009d70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d72:	fb01 f303 	mul.w	r3, r1, r3
 8009d76:	441a      	add	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d92:	3b01      	subs	r3, #1
 8009d94:	68f9      	ldr	r1, [r7, #12]
 8009d96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d98:	fb01 f303 	mul.w	r3, r1, r3
 8009d9c:	441a      	add	r2, r3
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	22ff      	movs	r2, #255	; 0xff
 8009da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	22ff      	movs	r2, #255	; 0xff
 8009dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d114      	bne.n	8009de2 <xQueueGenericReset+0xaa>
=======
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d10a      	bne.n	800d122 <xQueueGenericReset+0x2a>
	__asm volatile
 800d10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d110:	f383 8811 	msr	BASEPRI, r3
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	f3bf 8f4f 	dsb	sy
 800d11c:	60bb      	str	r3, [r7, #8]
}
 800d11e:	bf00      	nop
 800d120:	e7fe      	b.n	800d120 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d122:	f7ff fec7 	bl	800ceb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681a      	ldr	r2, [r3, #0]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d12e:	68f9      	ldr	r1, [r7, #12]
 800d130:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d132:	fb01 f303 	mul.w	r3, r1, r3
 800d136:	441a      	add	r2, r3
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2200      	movs	r2, #0
 800d140:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681a      	ldr	r2, [r3, #0]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d152:	3b01      	subs	r3, #1
 800d154:	68f9      	ldr	r1, [r7, #12]
 800d156:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d158:	fb01 f303 	mul.w	r3, r1, r3
 800d15c:	441a      	add	r2, r3
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	22ff      	movs	r2, #255	; 0xff
 800d166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	22ff      	movs	r2, #255	; 0xff
 800d16e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d114      	bne.n	800d1a2 <xQueueGenericReset+0xaa>
>>>>>>> Stashed changes
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< Updated upstream
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d01a      	beq.n	8009df6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	3310      	adds	r3, #16
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f001 fb3d 	bl	800b444 <xTaskRemoveFromEventList>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d012      	beq.n	8009df6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009dd0:	4b0c      	ldr	r3, [pc, #48]	; (8009e04 <xQueueGenericReset+0xcc>)
 8009dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dd6:	601a      	str	r2, [r3, #0]
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	e009      	b.n	8009df6 <xQueueGenericReset+0xbe>
=======
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	691b      	ldr	r3, [r3, #16]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d01a      	beq.n	800d1b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	3310      	adds	r3, #16
 800d184:	4618      	mov	r0, r3
 800d186:	f001 fb3d 	bl	800e804 <xTaskRemoveFromEventList>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d012      	beq.n	800d1b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d190:	4b0c      	ldr	r3, [pc, #48]	; (800d1c4 <xQueueGenericReset+0xcc>)
 800d192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d196:	601a      	str	r2, [r3, #0]
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	f3bf 8f6f 	isb	sy
 800d1a0:	e009      	b.n	800d1b6 <xQueueGenericReset+0xbe>
>>>>>>> Stashed changes
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< Updated upstream
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3310      	adds	r3, #16
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7ff fca0 	bl	800972c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	3324      	adds	r3, #36	; 0x24
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff fc9b 	bl	800972c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009df6:	f7ff fead 	bl	8009b54 <vPortExitCritical>
=======
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	3310      	adds	r3, #16
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7ff fca2 	bl	800caf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	3324      	adds	r3, #36	; 0x24
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7ff fc9d 	bl	800caf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d1b6:	f7ff fead 	bl	800cf14 <vPortExitCritical>
>>>>>>> Stashed changes

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< Updated upstream
 8009dfa:	2301      	movs	r3, #1
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	e000ed04 	.word	0xe000ed04

08009e08 <xQueueGenericCreateStatic>:
=======
 800d1ba:	2301      	movs	r3, #1
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3710      	adds	r7, #16
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	e000ed04 	.word	0xe000ed04

0800d1c8 <xQueueGenericCreateStatic>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< Updated upstream
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b08e      	sub	sp, #56	; 0x38
 8009e0c:	af02      	add	r7, sp, #8
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]
 8009e14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d10a      	bne.n	8009e32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e2e:	bf00      	nop
 8009e30:	e7fe      	b.n	8009e30 <xQueueGenericCreateStatic+0x28>
=======
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b08e      	sub	sp, #56	; 0x38
 800d1cc:	af02      	add	r7, sp, #8
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	607a      	str	r2, [r7, #4]
 800d1d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d10a      	bne.n	800d1f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e0:	f383 8811 	msr	BASEPRI, r3
 800d1e4:	f3bf 8f6f 	isb	sy
 800d1e8:	f3bf 8f4f 	dsb	sy
 800d1ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d1ee:	bf00      	nop
 800d1f0:	e7fe      	b.n	800d1f0 <xQueueGenericCreateStatic+0x28>
>>>>>>> Stashed changes

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< Updated upstream
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10a      	bne.n	8009e4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e4a:	bf00      	nop
 8009e4c:	e7fe      	b.n	8009e4c <xQueueGenericCreateStatic+0x44>
=======
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d10a      	bne.n	800d20e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fc:	f383 8811 	msr	BASEPRI, r3
 800d200:	f3bf 8f6f 	isb	sy
 800d204:	f3bf 8f4f 	dsb	sy
 800d208:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d20a:	bf00      	nop
 800d20c:	e7fe      	b.n	800d20c <xQueueGenericCreateStatic+0x44>
>>>>>>> Stashed changes

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< Updated upstream
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d002      	beq.n	8009e5a <xQueueGenericCreateStatic+0x52>
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <xQueueGenericCreateStatic+0x56>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e000      	b.n	8009e60 <xQueueGenericCreateStatic+0x58>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10a      	bne.n	8009e7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	623b      	str	r3, [r7, #32]
}
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d102      	bne.n	8009e86 <xQueueGenericCreateStatic+0x7e>
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d101      	bne.n	8009e8a <xQueueGenericCreateStatic+0x82>
 8009e86:	2301      	movs	r3, #1
 8009e88:	e000      	b.n	8009e8c <xQueueGenericCreateStatic+0x84>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10a      	bne.n	8009ea6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	61fb      	str	r3, [r7, #28]
}
 8009ea2:	bf00      	nop
 8009ea4:	e7fe      	b.n	8009ea4 <xQueueGenericCreateStatic+0x9c>
=======
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d002      	beq.n	800d21a <xQueueGenericCreateStatic+0x52>
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d001      	beq.n	800d21e <xQueueGenericCreateStatic+0x56>
 800d21a:	2301      	movs	r3, #1
 800d21c:	e000      	b.n	800d220 <xQueueGenericCreateStatic+0x58>
 800d21e:	2300      	movs	r3, #0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d10a      	bne.n	800d23a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d228:	f383 8811 	msr	BASEPRI, r3
 800d22c:	f3bf 8f6f 	isb	sy
 800d230:	f3bf 8f4f 	dsb	sy
 800d234:	623b      	str	r3, [r7, #32]
}
 800d236:	bf00      	nop
 800d238:	e7fe      	b.n	800d238 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d102      	bne.n	800d246 <xQueueGenericCreateStatic+0x7e>
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d101      	bne.n	800d24a <xQueueGenericCreateStatic+0x82>
 800d246:	2301      	movs	r3, #1
 800d248:	e000      	b.n	800d24c <xQueueGenericCreateStatic+0x84>
 800d24a:	2300      	movs	r3, #0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d10a      	bne.n	800d266 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d254:	f383 8811 	msr	BASEPRI, r3
 800d258:	f3bf 8f6f 	isb	sy
 800d25c:	f3bf 8f4f 	dsb	sy
 800d260:	61fb      	str	r3, [r7, #28]
}
 800d262:	bf00      	nop
 800d264:	e7fe      	b.n	800d264 <xQueueGenericCreateStatic+0x9c>
>>>>>>> Stashed changes
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< Updated upstream
 8009ea6:	2350      	movs	r3, #80	; 0x50
 8009ea8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2b50      	cmp	r3, #80	; 0x50
 8009eae:	d00a      	beq.n	8009ec6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	61bb      	str	r3, [r7, #24]
}
 8009ec2:	bf00      	nop
 8009ec4:	e7fe      	b.n	8009ec4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009ec6:	697b      	ldr	r3, [r7, #20]
=======
 800d266:	2350      	movs	r3, #80	; 0x50
 800d268:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	2b50      	cmp	r3, #80	; 0x50
 800d26e:	d00a      	beq.n	800d286 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d274:	f383 8811 	msr	BASEPRI, r3
 800d278:	f3bf 8f6f 	isb	sy
 800d27c:	f3bf 8f4f 	dsb	sy
 800d280:	61bb      	str	r3, [r7, #24]
}
 800d282:	bf00      	nop
 800d284:	e7fe      	b.n	800d284 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d286:	697b      	ldr	r3, [r7, #20]
>>>>>>> Stashed changes
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< Updated upstream
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00d      	beq.n	8009eee <xQueueGenericCreateStatic+0xe6>
=======
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d00d      	beq.n	800d2ae <xQueueGenericCreateStatic+0xe6>
>>>>>>> Stashed changes
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< Updated upstream
 8009ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 800d292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d294:	2201      	movs	r2, #1
 800d296:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> Stashed changes
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< Updated upstream
 8009eda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	68b9      	ldr	r1, [r7, #8]
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f000 f83f 	bl	8009f6c <prvInitialiseNewQueue>
=======
 800d29a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a0:	9300      	str	r3, [sp, #0]
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	68b9      	ldr	r1, [r7, #8]
 800d2a8:	68f8      	ldr	r0, [r7, #12]
 800d2aa:	f000 f83f 	bl	800d32c <prvInitialiseNewQueue>
>>>>>>> Stashed changes
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< Updated upstream
 8009eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3730      	adds	r7, #48	; 0x30
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <xQueueGenericCreate>:
=======
 800d2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3730      	adds	r7, #48	; 0x30
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <xQueueGenericCreate>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
<<<<<<< Updated upstream
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b08a      	sub	sp, #40	; 0x28
 8009efc:	af02      	add	r7, sp, #8
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	4613      	mov	r3, r2
 8009f04:	71fb      	strb	r3, [r7, #7]
=======
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b08a      	sub	sp, #40	; 0x28
 800d2bc:	af02      	add	r7, sp, #8
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
<<<<<<< Updated upstream
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10a      	bne.n	8009f22 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	613b      	str	r3, [r7, #16]
}
 8009f1e:	bf00      	nop
 8009f20:	e7fe      	b.n	8009f20 <xQueueGenericCreate+0x28>
=======
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d10a      	bne.n	800d2e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	613b      	str	r3, [r7, #16]
}
 800d2de:	bf00      	nop
 800d2e0:	e7fe      	b.n	800d2e0 <xQueueGenericCreate+0x28>
>>>>>>> Stashed changes

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	fb02 f303 	mul.w	r3, r2, r3
 8009f2a:	61fb      	str	r3, [r7, #28]
=======
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	68ba      	ldr	r2, [r7, #8]
 800d2e6:	fb02 f303 	mul.w	r3, r2, r3
 800d2ea:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
<<<<<<< Updated upstream
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	3350      	adds	r3, #80	; 0x50
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7ff fa11 	bl	8009358 <pvPortMalloc>
 8009f36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d011      	beq.n	8009f62 <xQueueGenericCreate+0x6a>
=======
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	3350      	adds	r3, #80	; 0x50
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7ff fa13 	bl	800c71c <pvPortMalloc>
 800d2f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d2f8:	69bb      	ldr	r3, [r7, #24]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d011      	beq.n	800d322 <xQueueGenericCreate+0x6a>
>>>>>>> Stashed changes
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
<<<<<<< Updated upstream
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	3350      	adds	r3, #80	; 0x50
 8009f46:	617b      	str	r3, [r7, #20]
=======
 800d2fe:	69bb      	ldr	r3, [r7, #24]
 800d300:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	3350      	adds	r3, #80	; 0x50
 800d306:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
<<<<<<< Updated upstream
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 800d308:	69bb      	ldr	r3, [r7, #24]
 800d30a:	2200      	movs	r2, #0
 800d30c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> Stashed changes
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< Updated upstream
 8009f50:	79fa      	ldrb	r2, [r7, #7]
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	4613      	mov	r3, r2
 8009f58:	697a      	ldr	r2, [r7, #20]
 8009f5a:	68b9      	ldr	r1, [r7, #8]
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f000 f805 	bl	8009f6c <prvInitialiseNewQueue>
=======
 800d310:	79fa      	ldrb	r2, [r7, #7]
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	9300      	str	r3, [sp, #0]
 800d316:	4613      	mov	r3, r2
 800d318:	697a      	ldr	r2, [r7, #20]
 800d31a:	68b9      	ldr	r1, [r7, #8]
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f000 f805 	bl	800d32c <prvInitialiseNewQueue>
>>>>>>> Stashed changes
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< Updated upstream
 8009f62:	69bb      	ldr	r3, [r7, #24]
	}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3720      	adds	r7, #32
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <prvInitialiseNewQueue>:
=======
 800d322:	69bb      	ldr	r3, [r7, #24]
	}
 800d324:	4618      	mov	r0, r3
 800d326:	3720      	adds	r7, #32
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <prvInitialiseNewQueue>:
>>>>>>> Stashed changes

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< Updated upstream
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
 8009f78:	70fb      	strb	r3, [r7, #3]
=======
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	607a      	str	r2, [r7, #4]
 800d338:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d103      	bne.n	8009f88 <prvInitialiseNewQueue+0x1c>
=======
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d103      	bne.n	800d348 <prvInitialiseNewQueue+0x1c>
>>>>>>> Stashed changes
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< Updated upstream
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	69ba      	ldr	r2, [r7, #24]
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	e002      	b.n	8009f8e <prvInitialiseNewQueue+0x22>
=======
 800d340:	69bb      	ldr	r3, [r7, #24]
 800d342:	69ba      	ldr	r2, [r7, #24]
 800d344:	601a      	str	r2, [r3, #0]
 800d346:	e002      	b.n	800d34e <prvInitialiseNewQueue+0x22>
>>>>>>> Stashed changes
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< Updated upstream
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	601a      	str	r2, [r3, #0]
=======
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< Updated upstream
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	69b8      	ldr	r0, [r7, #24]
 8009f9e:	f7ff fecb 	bl	8009d38 <xQueueGenericReset>
=======
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	68ba      	ldr	r2, [r7, #8]
 800d358:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d35a:	2101      	movs	r1, #1
 800d35c:	69b8      	ldr	r0, [r7, #24]
 800d35e:	f7ff fecb 	bl	800d0f8 <xQueueGenericReset>
>>>>>>> Stashed changes

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
<<<<<<< Updated upstream
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	78fa      	ldrb	r2, [r7, #3]
 8009fa6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
=======
 800d362:	69bb      	ldr	r3, [r7, #24]
 800d364:	78fa      	ldrb	r2, [r7, #3]
 800d366:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
>>>>>>> Stashed changes
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< Updated upstream
 8009faa:	bf00      	nop
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <prvInitialiseMutex>:
=======
 800d36a:	bf00      	nop
 800d36c:	3710      	adds	r7, #16
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}

0800d372 <prvInitialiseMutex>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
<<<<<<< Updated upstream
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b082      	sub	sp, #8
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00e      	beq.n	8009fde <prvInitialiseMutex+0x2c>
=======
 800d372:	b580      	push	{r7, lr}
 800d374:	b082      	sub	sp, #8
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00e      	beq.n	800d39e <prvInitialiseMutex+0x2c>
>>>>>>> Stashed changes
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
<<<<<<< Updated upstream
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	60da      	str	r2, [r3, #12]
=======
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2200      	movs	r2, #0
 800d38a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
<<<<<<< Updated upstream
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 f8a1 	bl	800a120 <xQueueGenericSend>
=======
 800d392:	2300      	movs	r3, #0
 800d394:	2200      	movs	r2, #0
 800d396:	2100      	movs	r1, #0
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 f8a1 	bl	800d4e0 <xQueueGenericSend>
>>>>>>> Stashed changes
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
<<<<<<< Updated upstream
 8009fde:	bf00      	nop
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <xQueueCreateMutex>:
=======
 800d39e:	bf00      	nop
 800d3a0:	3708      	adds	r7, #8
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <xQueueCreateMutex>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
<<<<<<< Updated upstream
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b086      	sub	sp, #24
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	4603      	mov	r3, r0
 8009fee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	617b      	str	r3, [r7, #20]
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009ff8:	79fb      	ldrb	r3, [r7, #7]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	6939      	ldr	r1, [r7, #16]
 8009ffe:	6978      	ldr	r0, [r7, #20]
 800a000:	f7ff ff7a 	bl	8009ef8 <xQueueGenericCreate>
 800a004:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f7ff ffd3 	bl	8009fb2 <prvInitialiseMutex>

		return xNewQueue;
 800a00c:	68fb      	ldr	r3, [r7, #12]
	}
 800a00e:	4618      	mov	r0, r3
 800a010:	3718      	adds	r7, #24
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <xQueueCreateMutexStatic>:
=======
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b086      	sub	sp, #24
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	617b      	str	r3, [r7, #20]
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d3b8:	79fb      	ldrb	r3, [r7, #7]
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	6939      	ldr	r1, [r7, #16]
 800d3be:	6978      	ldr	r0, [r7, #20]
 800d3c0:	f7ff ff7a 	bl	800d2b8 <xQueueGenericCreate>
 800d3c4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d3c6:	68f8      	ldr	r0, [r7, #12]
 800d3c8:	f7ff ffd3 	bl	800d372 <prvInitialiseMutex>

		return xNewQueue;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
	}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3718      	adds	r7, #24
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <xQueueCreateMutexStatic>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
<<<<<<< Updated upstream
 800a016:	b580      	push	{r7, lr}
 800a018:	b088      	sub	sp, #32
 800a01a:	af02      	add	r7, sp, #8
 800a01c:	4603      	mov	r3, r0
 800a01e:	6039      	str	r1, [r7, #0]
 800a020:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a022:	2301      	movs	r3, #1
 800a024:	617b      	str	r3, [r7, #20]
 800a026:	2300      	movs	r3, #0
 800a028:	613b      	str	r3, [r7, #16]
=======
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b088      	sub	sp, #32
 800d3da:	af02      	add	r7, sp, #8
 800d3dc:	4603      	mov	r3, r0
 800d3de:	6039      	str	r1, [r7, #0]
 800d3e0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	617b      	str	r3, [r7, #20]
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
<<<<<<< Updated upstream
 800a02a:	79fb      	ldrb	r3, [r7, #7]
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	2200      	movs	r2, #0
 800a032:	6939      	ldr	r1, [r7, #16]
 800a034:	6978      	ldr	r0, [r7, #20]
 800a036:	f7ff fee7 	bl	8009e08 <xQueueGenericCreateStatic>
 800a03a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f7ff ffb8 	bl	8009fb2 <prvInitialiseMutex>

		return xNewQueue;
 800a042:	68fb      	ldr	r3, [r7, #12]
	}
 800a044:	4618      	mov	r0, r3
 800a046:	3718      	adds	r7, #24
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <xQueueGiveMutexRecursive>:
=======
 800d3ea:	79fb      	ldrb	r3, [r7, #7]
 800d3ec:	9300      	str	r3, [sp, #0]
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	6939      	ldr	r1, [r7, #16]
 800d3f4:	6978      	ldr	r0, [r7, #20]
 800d3f6:	f7ff fee7 	bl	800d1c8 <xQueueGenericCreateStatic>
 800d3fa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d3fc:	68f8      	ldr	r0, [r7, #12]
 800d3fe:	f7ff ffb8 	bl	800d372 <prvInitialiseMutex>

		return xNewQueue;
 800d402:	68fb      	ldr	r3, [r7, #12]
	}
 800d404:	4618      	mov	r0, r3
 800d406:	3718      	adds	r7, #24
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <xQueueGiveMutexRecursive>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
<<<<<<< Updated upstream
 800a04c:	b590      	push	{r4, r7, lr}
 800a04e:	b087      	sub	sp, #28
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10a      	bne.n	800a074 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	60fb      	str	r3, [r7, #12]
}
 800a070:	bf00      	nop
 800a072:	e7fe      	b.n	800a072 <xQueueGiveMutexRecursive+0x26>
=======
 800d40c:	b590      	push	{r4, r7, lr}
 800d40e:	b087      	sub	sp, #28
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d10a      	bne.n	800d434 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800d41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d422:	f383 8811 	msr	BASEPRI, r3
 800d426:	f3bf 8f6f 	isb	sy
 800d42a:	f3bf 8f4f 	dsb	sy
 800d42e:	60fb      	str	r3, [r7, #12]
}
 800d430:	bf00      	nop
 800d432:	e7fe      	b.n	800d432 <xQueueGiveMutexRecursive+0x26>
>>>>>>> Stashed changes
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
<<<<<<< Updated upstream
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	689c      	ldr	r4, [r3, #8]
 800a078:	f001 fba6 	bl	800b7c8 <xTaskGetCurrentTaskHandle>
 800a07c:	4603      	mov	r3, r0
 800a07e:	429c      	cmp	r4, r3
 800a080:	d111      	bne.n	800a0a6 <xQueueGiveMutexRecursive+0x5a>
=======
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	689c      	ldr	r4, [r3, #8]
 800d438:	f001 fba6 	bl	800eb88 <xTaskGetCurrentTaskHandle>
 800d43c:	4603      	mov	r3, r0
 800d43e:	429c      	cmp	r4, r3
 800d440:	d111      	bne.n	800d466 <xQueueGiveMutexRecursive+0x5a>
>>>>>>> Stashed changes
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
<<<<<<< Updated upstream
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	1e5a      	subs	r2, r3, #1
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d105      	bne.n	800a0a0 <xQueueGiveMutexRecursive+0x54>
=======
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	1e5a      	subs	r2, r3, #1
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	68db      	ldr	r3, [r3, #12]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d105      	bne.n	800d460 <xQueueGiveMutexRecursive+0x54>
>>>>>>> Stashed changes
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
<<<<<<< Updated upstream
 800a094:	2300      	movs	r3, #0
 800a096:	2200      	movs	r2, #0
 800a098:	2100      	movs	r1, #0
 800a09a:	6938      	ldr	r0, [r7, #16]
 800a09c:	f000 f840 	bl	800a120 <xQueueGenericSend>
=======
 800d454:	2300      	movs	r3, #0
 800d456:	2200      	movs	r2, #0
 800d458:	2100      	movs	r1, #0
 800d45a:	6938      	ldr	r0, [r7, #16]
 800d45c:	f000 f840 	bl	800d4e0 <xQueueGenericSend>
>>>>>>> Stashed changes
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
<<<<<<< Updated upstream
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	617b      	str	r3, [r7, #20]
 800a0a4:	e001      	b.n	800a0aa <xQueueGiveMutexRecursive+0x5e>
=======
 800d460:	2301      	movs	r3, #1
 800d462:	617b      	str	r3, [r7, #20]
 800d464:	e001      	b.n	800d46a <xQueueGiveMutexRecursive+0x5e>
>>>>>>> Stashed changes
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
<<<<<<< Updated upstream
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	617b      	str	r3, [r7, #20]
=======
 800d466:	2300      	movs	r3, #0
 800d468:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
<<<<<<< Updated upstream
 800a0aa:	697b      	ldr	r3, [r7, #20]
	}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	371c      	adds	r7, #28
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd90      	pop	{r4, r7, pc}

0800a0b4 <xQueueTakeMutexRecursive>:
=======
 800d46a:	697b      	ldr	r3, [r7, #20]
	}
 800d46c:	4618      	mov	r0, r3
 800d46e:	371c      	adds	r7, #28
 800d470:	46bd      	mov	sp, r7
 800d472:	bd90      	pop	{r4, r7, pc}

0800d474 <xQueueTakeMutexRecursive>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
<<<<<<< Updated upstream
 800a0b4:	b590      	push	{r4, r7, lr}
 800a0b6:	b087      	sub	sp, #28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d10a      	bne.n	800a0de <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800a0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0cc:	f383 8811 	msr	BASEPRI, r3
 800a0d0:	f3bf 8f6f 	isb	sy
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	60fb      	str	r3, [r7, #12]
}
 800a0da:	bf00      	nop
 800a0dc:	e7fe      	b.n	800a0dc <xQueueTakeMutexRecursive+0x28>
=======
 800d474:	b590      	push	{r4, r7, lr}
 800d476:	b087      	sub	sp, #28
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d10a      	bne.n	800d49e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800d488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48c:	f383 8811 	msr	BASEPRI, r3
 800d490:	f3bf 8f6f 	isb	sy
 800d494:	f3bf 8f4f 	dsb	sy
 800d498:	60fb      	str	r3, [r7, #12]
}
 800d49a:	bf00      	nop
 800d49c:	e7fe      	b.n	800d49c <xQueueTakeMutexRecursive+0x28>
>>>>>>> Stashed changes
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
<<<<<<< Updated upstream
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	689c      	ldr	r4, [r3, #8]
 800a0e2:	f001 fb71 	bl	800b7c8 <xTaskGetCurrentTaskHandle>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	429c      	cmp	r4, r3
 800a0ea:	d107      	bne.n	800a0fc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	1c5a      	adds	r2, r3, #1
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	617b      	str	r3, [r7, #20]
 800a0fa:	e00c      	b.n	800a116 <xQueueTakeMutexRecursive+0x62>
=======
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	689c      	ldr	r4, [r3, #8]
 800d4a2:	f001 fb71 	bl	800eb88 <xTaskGetCurrentTaskHandle>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	429c      	cmp	r4, r3
 800d4aa:	d107      	bne.n	800d4bc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	68db      	ldr	r3, [r3, #12]
 800d4b0:	1c5a      	adds	r2, r3, #1
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	617b      	str	r3, [r7, #20]
 800d4ba:	e00c      	b.n	800d4d6 <xQueueTakeMutexRecursive+0x62>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
<<<<<<< Updated upstream
 800a0fc:	6839      	ldr	r1, [r7, #0]
 800a0fe:	6938      	ldr	r0, [r7, #16]
 800a100:	f000 fa88 	bl	800a614 <xQueueSemaphoreTake>
 800a104:	6178      	str	r0, [r7, #20]
=======
 800d4bc:	6839      	ldr	r1, [r7, #0]
 800d4be:	6938      	ldr	r0, [r7, #16]
 800d4c0:	f000 fa88 	bl	800d9d4 <xQueueSemaphoreTake>
 800d4c4:	6178      	str	r0, [r7, #20]
>>>>>>> Stashed changes

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
<<<<<<< Updated upstream
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d004      	beq.n	800a116 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	1c5a      	adds	r2, r3, #1
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	60da      	str	r2, [r3, #12]
=======
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d004      	beq.n	800d4d6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	68db      	ldr	r3, [r3, #12]
 800d4d0:	1c5a      	adds	r2, r3, #1
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
<<<<<<< Updated upstream
 800a116:	697b      	ldr	r3, [r7, #20]
	}
 800a118:	4618      	mov	r0, r3
 800a11a:	371c      	adds	r7, #28
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd90      	pop	{r4, r7, pc}

0800a120 <xQueueGenericSend>:
=======
 800d4d6:	697b      	ldr	r3, [r7, #20]
	}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	371c      	adds	r7, #28
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd90      	pop	{r4, r7, pc}

0800d4e0 <xQueueGenericSend>:
>>>>>>> Stashed changes

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< Updated upstream
 800a120:	b580      	push	{r7, lr}
 800a122:	b08e      	sub	sp, #56	; 0x38
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a12e:	2300      	movs	r3, #0
 800a130:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10a      	bne.n	800a152 <xQueueGenericSend+0x32>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a14e:	bf00      	nop
 800a150:	e7fe      	b.n	800a150 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d103      	bne.n	800a160 <xQueueGenericSend+0x40>
 800a158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <xQueueGenericSend+0x44>
 800a160:	2301      	movs	r3, #1
 800a162:	e000      	b.n	800a166 <xQueueGenericSend+0x46>
 800a164:	2300      	movs	r3, #0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10a      	bne.n	800a180 <xQueueGenericSend+0x60>
	__asm volatile
 800a16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a17c:	bf00      	nop
 800a17e:	e7fe      	b.n	800a17e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	2b02      	cmp	r3, #2
 800a184:	d103      	bne.n	800a18e <xQueueGenericSend+0x6e>
 800a186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d101      	bne.n	800a192 <xQueueGenericSend+0x72>
 800a18e:	2301      	movs	r3, #1
 800a190:	e000      	b.n	800a194 <xQueueGenericSend+0x74>
 800a192:	2300      	movs	r3, #0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10a      	bne.n	800a1ae <xQueueGenericSend+0x8e>
	__asm volatile
 800a198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19c:	f383 8811 	msr	BASEPRI, r3
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	623b      	str	r3, [r7, #32]
}
 800a1aa:	bf00      	nop
 800a1ac:	e7fe      	b.n	800a1ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1ae:	f001 fb1b 	bl	800b7e8 <xTaskGetSchedulerState>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d102      	bne.n	800a1be <xQueueGenericSend+0x9e>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d101      	bne.n	800a1c2 <xQueueGenericSend+0xa2>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e000      	b.n	800a1c4 <xQueueGenericSend+0xa4>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10a      	bne.n	800a1de <xQueueGenericSend+0xbe>
	__asm volatile
 800a1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1cc:	f383 8811 	msr	BASEPRI, r3
 800a1d0:	f3bf 8f6f 	isb	sy
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	61fb      	str	r3, [r7, #28]
}
 800a1da:	bf00      	nop
 800a1dc:	e7fe      	b.n	800a1dc <xQueueGenericSend+0xbc>
=======
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b08e      	sub	sp, #56	; 0x38
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	607a      	str	r2, [r7, #4]
 800d4ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d10a      	bne.n	800d512 <xQueueGenericSend+0x32>
	__asm volatile
 800d4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d500:	f383 8811 	msr	BASEPRI, r3
 800d504:	f3bf 8f6f 	isb	sy
 800d508:	f3bf 8f4f 	dsb	sy
 800d50c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d50e:	bf00      	nop
 800d510:	e7fe      	b.n	800d510 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d103      	bne.n	800d520 <xQueueGenericSend+0x40>
 800d518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d101      	bne.n	800d524 <xQueueGenericSend+0x44>
 800d520:	2301      	movs	r3, #1
 800d522:	e000      	b.n	800d526 <xQueueGenericSend+0x46>
 800d524:	2300      	movs	r3, #0
 800d526:	2b00      	cmp	r3, #0
 800d528:	d10a      	bne.n	800d540 <xQueueGenericSend+0x60>
	__asm volatile
 800d52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52e:	f383 8811 	msr	BASEPRI, r3
 800d532:	f3bf 8f6f 	isb	sy
 800d536:	f3bf 8f4f 	dsb	sy
 800d53a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d53c:	bf00      	nop
 800d53e:	e7fe      	b.n	800d53e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	2b02      	cmp	r3, #2
 800d544:	d103      	bne.n	800d54e <xQueueGenericSend+0x6e>
 800d546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	d101      	bne.n	800d552 <xQueueGenericSend+0x72>
 800d54e:	2301      	movs	r3, #1
 800d550:	e000      	b.n	800d554 <xQueueGenericSend+0x74>
 800d552:	2300      	movs	r3, #0
 800d554:	2b00      	cmp	r3, #0
 800d556:	d10a      	bne.n	800d56e <xQueueGenericSend+0x8e>
	__asm volatile
 800d558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d55c:	f383 8811 	msr	BASEPRI, r3
 800d560:	f3bf 8f6f 	isb	sy
 800d564:	f3bf 8f4f 	dsb	sy
 800d568:	623b      	str	r3, [r7, #32]
}
 800d56a:	bf00      	nop
 800d56c:	e7fe      	b.n	800d56c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d56e:	f001 fb1b 	bl	800eba8 <xTaskGetSchedulerState>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d102      	bne.n	800d57e <xQueueGenericSend+0x9e>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d101      	bne.n	800d582 <xQueueGenericSend+0xa2>
 800d57e:	2301      	movs	r3, #1
 800d580:	e000      	b.n	800d584 <xQueueGenericSend+0xa4>
 800d582:	2300      	movs	r3, #0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d10a      	bne.n	800d59e <xQueueGenericSend+0xbe>
	__asm volatile
 800d588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d58c:	f383 8811 	msr	BASEPRI, r3
 800d590:	f3bf 8f6f 	isb	sy
 800d594:	f3bf 8f4f 	dsb	sy
 800d598:	61fb      	str	r3, [r7, #28]
}
 800d59a:	bf00      	nop
 800d59c:	e7fe      	b.n	800d59c <xQueueGenericSend+0xbc>
>>>>>>> Stashed changes
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800a1de:	f7ff fc89 	bl	8009af4 <vPortEnterCritical>
=======
 800d59e:	f7ff fc89 	bl	800ceb4 <vPortEnterCritical>
>>>>>>> Stashed changes
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< Updated upstream
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d302      	bcc.n	800a1f4 <xQueueGenericSend+0xd4>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d129      	bne.n	800a248 <xQueueGenericSend+0x128>
=======
 800d5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d302      	bcc.n	800d5b4 <xQueueGenericSend+0xd4>
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	2b02      	cmp	r3, #2
 800d5b2:	d129      	bne.n	800d608 <xQueueGenericSend+0x128>
>>>>>>> Stashed changes
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< Updated upstream
 800a1f4:	683a      	ldr	r2, [r7, #0]
 800a1f6:	68b9      	ldr	r1, [r7, #8]
 800a1f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1fa:	f000 fb2f 	bl	800a85c <prvCopyDataToQueue>
 800a1fe:	62f8      	str	r0, [r7, #44]	; 0x2c
=======
 800d5b4:	683a      	ldr	r2, [r7, #0]
 800d5b6:	68b9      	ldr	r1, [r7, #8]
 800d5b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5ba:	f000 fb2f 	bl	800dc1c <prvCopyDataToQueue>
 800d5be:	62f8      	str	r0, [r7, #44]	; 0x2c
>>>>>>> Stashed changes

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 800a200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a204:	2b00      	cmp	r3, #0
 800a206:	d010      	beq.n	800a22a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20a:	3324      	adds	r3, #36	; 0x24
 800a20c:	4618      	mov	r0, r3
 800a20e:	f001 f919 	bl	800b444 <xTaskRemoveFromEventList>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d013      	beq.n	800a240 <xQueueGenericSend+0x120>
=======
 800d5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d010      	beq.n	800d5ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ca:	3324      	adds	r3, #36	; 0x24
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f001 f919 	bl	800e804 <xTaskRemoveFromEventList>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d013      	beq.n	800d600 <xQueueGenericSend+0x120>
>>>>>>> Stashed changes
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< Updated upstream
 800a218:	4b3f      	ldr	r3, [pc, #252]	; (800a318 <xQueueGenericSend+0x1f8>)
 800a21a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a21e:	601a      	str	r2, [r3, #0]
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	e00a      	b.n	800a240 <xQueueGenericSend+0x120>
=======
 800d5d8:	4b3f      	ldr	r3, [pc, #252]	; (800d6d8 <xQueueGenericSend+0x1f8>)
 800d5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5de:	601a      	str	r2, [r3, #0]
 800d5e0:	f3bf 8f4f 	dsb	sy
 800d5e4:	f3bf 8f6f 	isb	sy
 800d5e8:	e00a      	b.n	800d600 <xQueueGenericSend+0x120>
>>>>>>> Stashed changes
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< Updated upstream
 800a22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d007      	beq.n	800a240 <xQueueGenericSend+0x120>
=======
 800d5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d007      	beq.n	800d600 <xQueueGenericSend+0x120>
>>>>>>> Stashed changes
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< Updated upstream
 800a230:	4b39      	ldr	r3, [pc, #228]	; (800a318 <xQueueGenericSend+0x1f8>)
 800a232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	f3bf 8f6f 	isb	sy
=======
 800d5f0:	4b39      	ldr	r3, [pc, #228]	; (800d6d8 <xQueueGenericSend+0x1f8>)
 800d5f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5f6:	601a      	str	r2, [r3, #0]
 800d5f8:	f3bf 8f4f 	dsb	sy
 800d5fc:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800a240:	f7ff fc88 	bl	8009b54 <vPortExitCritical>
				return pdPASS;
 800a244:	2301      	movs	r3, #1
 800a246:	e063      	b.n	800a310 <xQueueGenericSend+0x1f0>
=======
 800d600:	f7ff fc88 	bl	800cf14 <vPortExitCritical>
				return pdPASS;
 800d604:	2301      	movs	r3, #1
 800d606:	e063      	b.n	800d6d0 <xQueueGenericSend+0x1f0>
>>>>>>> Stashed changes
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< Updated upstream
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d103      	bne.n	800a256 <xQueueGenericSend+0x136>
=======
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d103      	bne.n	800d616 <xQueueGenericSend+0x136>
>>>>>>> Stashed changes
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800a24e:	f7ff fc81 	bl	8009b54 <vPortExitCritical>
=======
 800d60e:	f7ff fc81 	bl	800cf14 <vPortExitCritical>
>>>>>>> Stashed changes

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< Updated upstream
 800a252:	2300      	movs	r3, #0
 800a254:	e05c      	b.n	800a310 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d106      	bne.n	800a26a <xQueueGenericSend+0x14a>
=======
 800d612:	2300      	movs	r3, #0
 800d614:	e05c      	b.n	800d6d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d106      	bne.n	800d62a <xQueueGenericSend+0x14a>
>>>>>>> Stashed changes
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< Updated upstream
 800a25c:	f107 0314 	add.w	r3, r7, #20
 800a260:	4618      	mov	r0, r3
 800a262:	f001 f953 	bl	800b50c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a266:	2301      	movs	r3, #1
 800a268:	637b      	str	r3, [r7, #52]	; 0x34
=======
 800d61c:	f107 0314 	add.w	r3, r7, #20
 800d620:	4618      	mov	r0, r3
 800d622:	f001 f953 	bl	800e8cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d626:	2301      	movs	r3, #1
 800d628:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> Stashed changes
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800a26a:	f7ff fc73 	bl	8009b54 <vPortExitCritical>
=======
 800d62a:	f7ff fc73 	bl	800cf14 <vPortExitCritical>
>>>>>>> Stashed changes

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< Updated upstream
 800a26e:	f000 febf 	bl	800aff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a272:	f7ff fc3f 	bl	8009af4 <vPortEnterCritical>
 800a276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a27c:	b25b      	sxtb	r3, r3
 800a27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a282:	d103      	bne.n	800a28c <xQueueGenericSend+0x16c>
 800a284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a292:	b25b      	sxtb	r3, r3
 800a294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a298:	d103      	bne.n	800a2a2 <xQueueGenericSend+0x182>
 800a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2a2:	f7ff fc57 	bl	8009b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2a6:	1d3a      	adds	r2, r7, #4
 800a2a8:	f107 0314 	add.w	r3, r7, #20
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f001 f942 	bl	800b538 <xTaskCheckForTimeOut>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d124      	bne.n	800a304 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2bc:	f000 fbc6 	bl	800aa4c <prvIsQueueFull>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d018      	beq.n	800a2f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c8:	3310      	adds	r3, #16
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f001 f868 	bl	800b3a4 <vTaskPlaceOnEventList>
=======
 800d62e:	f000 febf 	bl	800e3b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d632:	f7ff fc3f 	bl	800ceb4 <vPortEnterCritical>
 800d636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d63c:	b25b      	sxtb	r3, r3
 800d63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d642:	d103      	bne.n	800d64c <xQueueGenericSend+0x16c>
 800d644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d646:	2200      	movs	r2, #0
 800d648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d64e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d652:	b25b      	sxtb	r3, r3
 800d654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d658:	d103      	bne.n	800d662 <xQueueGenericSend+0x182>
 800d65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d662:	f7ff fc57 	bl	800cf14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d666:	1d3a      	adds	r2, r7, #4
 800d668:	f107 0314 	add.w	r3, r7, #20
 800d66c:	4611      	mov	r1, r2
 800d66e:	4618      	mov	r0, r3
 800d670:	f001 f942 	bl	800e8f8 <xTaskCheckForTimeOut>
 800d674:	4603      	mov	r3, r0
 800d676:	2b00      	cmp	r3, #0
 800d678:	d124      	bne.n	800d6c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d67a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d67c:	f000 fbc6 	bl	800de0c <prvIsQueueFull>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d018      	beq.n	800d6b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d688:	3310      	adds	r3, #16
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	4611      	mov	r1, r2
 800d68e:	4618      	mov	r0, r3
 800d690:	f001 f868 	bl	800e764 <vTaskPlaceOnEventList>
>>>>>>> Stashed changes
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800a2d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2d6:	f000 fb51 	bl	800a97c <prvUnlockQueue>
=======
 800d694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d696:	f000 fb51 	bl	800dd3c <prvUnlockQueue>
>>>>>>> Stashed changes
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< Updated upstream
 800a2da:	f000 fe97 	bl	800b00c <xTaskResumeAll>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f47f af7c 	bne.w	800a1de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a2e6:	4b0c      	ldr	r3, [pc, #48]	; (800a318 <xQueueGenericSend+0x1f8>)
 800a2e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ec:	601a      	str	r2, [r3, #0]
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	e772      	b.n	800a1de <xQueueGenericSend+0xbe>
=======
 800d69a:	f000 fe97 	bl	800e3cc <xTaskResumeAll>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f47f af7c 	bne.w	800d59e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d6a6:	4b0c      	ldr	r3, [pc, #48]	; (800d6d8 <xQueueGenericSend+0x1f8>)
 800d6a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6ac:	601a      	str	r2, [r3, #0]
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	f3bf 8f6f 	isb	sy
 800d6b6:	e772      	b.n	800d59e <xQueueGenericSend+0xbe>
>>>>>>> Stashed changes
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800a2f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2fa:	f000 fb3f 	bl	800a97c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2fe:	f000 fe85 	bl	800b00c <xTaskResumeAll>
 800a302:	e76c      	b.n	800a1de <xQueueGenericSend+0xbe>
=======
 800d6b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6ba:	f000 fb3f 	bl	800dd3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6be:	f000 fe85 	bl	800e3cc <xTaskResumeAll>
 800d6c2:	e76c      	b.n	800d59e <xQueueGenericSend+0xbe>
>>>>>>> Stashed changes
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800a304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a306:	f000 fb39 	bl	800a97c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a30a:	f000 fe7f 	bl	800b00c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a30e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a310:	4618      	mov	r0, r3
 800a312:	3738      	adds	r7, #56	; 0x38
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	e000ed04 	.word	0xe000ed04

0800a31c <xQueueGenericSendFromISR>:
=======
 800d6c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6c6:	f000 fb39 	bl	800dd3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6ca:	f000 fe7f 	bl	800e3cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d6ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3738      	adds	r7, #56	; 0x38
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	e000ed04 	.word	0xe000ed04

0800d6dc <xQueueGenericSendFromISR>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< Updated upstream
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b090      	sub	sp, #64	; 0x40
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10a      	bne.n	800a34a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a338:	f383 8811 	msr	BASEPRI, r3
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a346:	bf00      	nop
 800a348:	e7fe      	b.n	800a348 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d103      	bne.n	800a358 <xQueueGenericSendFromISR+0x3c>
 800a350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a354:	2b00      	cmp	r3, #0
 800a356:	d101      	bne.n	800a35c <xQueueGenericSendFromISR+0x40>
 800a358:	2301      	movs	r3, #1
 800a35a:	e000      	b.n	800a35e <xQueueGenericSendFromISR+0x42>
 800a35c:	2300      	movs	r3, #0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d10a      	bne.n	800a378 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a366:	f383 8811 	msr	BASEPRI, r3
 800a36a:	f3bf 8f6f 	isb	sy
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a374:	bf00      	nop
 800a376:	e7fe      	b.n	800a376 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d103      	bne.n	800a386 <xQueueGenericSendFromISR+0x6a>
 800a37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a382:	2b01      	cmp	r3, #1
 800a384:	d101      	bne.n	800a38a <xQueueGenericSendFromISR+0x6e>
 800a386:	2301      	movs	r3, #1
 800a388:	e000      	b.n	800a38c <xQueueGenericSendFromISR+0x70>
 800a38a:	2300      	movs	r3, #0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10a      	bne.n	800a3a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	623b      	str	r3, [r7, #32]
}
 800a3a2:	bf00      	nop
 800a3a4:	e7fe      	b.n	800a3a4 <xQueueGenericSendFromISR+0x88>
=======
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b090      	sub	sp, #64	; 0x40
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	607a      	str	r2, [r7, #4]
 800d6e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d10a      	bne.n	800d70a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f8:	f383 8811 	msr	BASEPRI, r3
 800d6fc:	f3bf 8f6f 	isb	sy
 800d700:	f3bf 8f4f 	dsb	sy
 800d704:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d706:	bf00      	nop
 800d708:	e7fe      	b.n	800d708 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d103      	bne.n	800d718 <xQueueGenericSendFromISR+0x3c>
 800d710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d714:	2b00      	cmp	r3, #0
 800d716:	d101      	bne.n	800d71c <xQueueGenericSendFromISR+0x40>
 800d718:	2301      	movs	r3, #1
 800d71a:	e000      	b.n	800d71e <xQueueGenericSendFromISR+0x42>
 800d71c:	2300      	movs	r3, #0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d10a      	bne.n	800d738 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d726:	f383 8811 	msr	BASEPRI, r3
 800d72a:	f3bf 8f6f 	isb	sy
 800d72e:	f3bf 8f4f 	dsb	sy
 800d732:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d734:	bf00      	nop
 800d736:	e7fe      	b.n	800d736 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	2b02      	cmp	r3, #2
 800d73c:	d103      	bne.n	800d746 <xQueueGenericSendFromISR+0x6a>
 800d73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d742:	2b01      	cmp	r3, #1
 800d744:	d101      	bne.n	800d74a <xQueueGenericSendFromISR+0x6e>
 800d746:	2301      	movs	r3, #1
 800d748:	e000      	b.n	800d74c <xQueueGenericSendFromISR+0x70>
 800d74a:	2300      	movs	r3, #0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d10a      	bne.n	800d766 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d754:	f383 8811 	msr	BASEPRI, r3
 800d758:	f3bf 8f6f 	isb	sy
 800d75c:	f3bf 8f4f 	dsb	sy
 800d760:	623b      	str	r3, [r7, #32]
}
 800d762:	bf00      	nop
 800d764:	e7fe      	b.n	800d764 <xQueueGenericSendFromISR+0x88>
>>>>>>> Stashed changes
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< Updated upstream
 800a3a6:	f7ff fc87 	bl	8009cb8 <vPortValidateInterruptPriority>
	__asm volatile
 800a3aa:	f3ef 8211 	mrs	r2, BASEPRI
 800a3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	61fa      	str	r2, [r7, #28]
 800a3c0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a3c2:	69fb      	ldr	r3, [r7, #28]
=======
 800d766:	f7ff fc87 	bl	800d078 <vPortValidateInterruptPriority>
	__asm volatile
 800d76a:	f3ef 8211 	mrs	r2, BASEPRI
 800d76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d772:	f383 8811 	msr	BASEPRI, r3
 800d776:	f3bf 8f6f 	isb	sy
 800d77a:	f3bf 8f4f 	dsb	sy
 800d77e:	61fa      	str	r2, [r7, #28]
 800d780:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d782:	69fb      	ldr	r3, [r7, #28]
>>>>>>> Stashed changes
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< Updated upstream
 800a3c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d302      	bcc.n	800a3d8 <xQueueGenericSendFromISR+0xbc>
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d12f      	bne.n	800a438 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800d784:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d78e:	429a      	cmp	r2, r3
 800d790:	d302      	bcc.n	800d798 <xQueueGenericSendFromISR+0xbc>
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	2b02      	cmp	r3, #2
 800d796:	d12f      	bne.n	800d7f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d79e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> Stashed changes
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< Updated upstream
 800a3e8:	683a      	ldr	r2, [r7, #0]
 800a3ea:	68b9      	ldr	r1, [r7, #8]
 800a3ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3ee:	f000 fa35 	bl	800a85c <prvCopyDataToQueue>
=======
 800d7a8:	683a      	ldr	r2, [r7, #0]
 800d7aa:	68b9      	ldr	r1, [r7, #8]
 800d7ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d7ae:	f000 fa35 	bl	800dc1c <prvCopyDataToQueue>
>>>>>>> Stashed changes

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< Updated upstream
 800a3f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3fa:	d112      	bne.n	800a422 <xQueueGenericSendFromISR+0x106>
=======
 800d7b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ba:	d112      	bne.n	800d7e2 <xQueueGenericSendFromISR+0x106>
>>>>>>> Stashed changes
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a400:	2b00      	cmp	r3, #0
 800a402:	d016      	beq.n	800a432 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a406:	3324      	adds	r3, #36	; 0x24
 800a408:	4618      	mov	r0, r3
 800a40a:	f001 f81b 	bl	800b444 <xTaskRemoveFromEventList>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00e      	beq.n	800a432 <xQueueGenericSendFromISR+0x116>
=======
 800d7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d016      	beq.n	800d7f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c6:	3324      	adds	r3, #36	; 0x24
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f001 f81b 	bl	800e804 <xTaskRemoveFromEventList>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d00e      	beq.n	800d7f2 <xQueueGenericSendFromISR+0x116>
>>>>>>> Stashed changes
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< Updated upstream
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00b      	beq.n	800a432 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2201      	movs	r2, #1
 800a41e:	601a      	str	r2, [r3, #0]
 800a420:	e007      	b.n	800a432 <xQueueGenericSendFromISR+0x116>
=======
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d00b      	beq.n	800d7f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2201      	movs	r2, #1
 800d7de:	601a      	str	r2, [r3, #0]
 800d7e0:	e007      	b.n	800d7f2 <xQueueGenericSendFromISR+0x116>
>>>>>>> Stashed changes
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< Updated upstream
 800a422:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a426:	3301      	adds	r3, #1
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	b25a      	sxtb	r2, r3
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a432:	2301      	movs	r3, #1
 800a434:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a436:	e001      	b.n	800a43c <xQueueGenericSendFromISR+0x120>
=======
 800d7e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	b25a      	sxtb	r2, r3
 800d7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d7f6:	e001      	b.n	800d7fc <xQueueGenericSendFromISR+0x120>
>>>>>>> Stashed changes
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< Updated upstream
 800a438:	2300      	movs	r3, #0
 800a43a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a43e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	f383 8811 	msr	BASEPRI, r3
}
 800a446:	bf00      	nop
=======
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7fe:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	f383 8811 	msr	BASEPRI, r3
}
 800d806:	bf00      	nop
>>>>>>> Stashed changes
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< Updated upstream
 800a448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3740      	adds	r7, #64	; 0x40
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
	...

0800a454 <xQueueReceive>:
=======
 800d808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3740      	adds	r7, #64	; 0x40
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
	...

0800d814 <xQueueReceive>:
>>>>>>> Stashed changes
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 800a454:	b580      	push	{r7, lr}
 800a456:	b08c      	sub	sp, #48	; 0x30
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a460:	2300      	movs	r3, #0
 800a462:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10a      	bne.n	800a484 <xQueueReceive+0x30>
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	623b      	str	r3, [r7, #32]
}
 800a480:	bf00      	nop
 800a482:	e7fe      	b.n	800a482 <xQueueReceive+0x2e>
=======
 800d814:	b580      	push	{r7, lr}
 800d816:	b08c      	sub	sp, #48	; 0x30
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d820:	2300      	movs	r3, #0
 800d822:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d10a      	bne.n	800d844 <xQueueReceive+0x30>
	__asm volatile
 800d82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d832:	f383 8811 	msr	BASEPRI, r3
 800d836:	f3bf 8f6f 	isb	sy
 800d83a:	f3bf 8f4f 	dsb	sy
 800d83e:	623b      	str	r3, [r7, #32]
}
 800d840:	bf00      	nop
 800d842:	e7fe      	b.n	800d842 <xQueueReceive+0x2e>
>>>>>>> Stashed changes

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< Updated upstream
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d103      	bne.n	800a492 <xQueueReceive+0x3e>
 800a48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d101      	bne.n	800a496 <xQueueReceive+0x42>
 800a492:	2301      	movs	r3, #1
 800a494:	e000      	b.n	800a498 <xQueueReceive+0x44>
 800a496:	2300      	movs	r3, #0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10a      	bne.n	800a4b2 <xQueueReceive+0x5e>
	__asm volatile
 800a49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a0:	f383 8811 	msr	BASEPRI, r3
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	61fb      	str	r3, [r7, #28]
}
 800a4ae:	bf00      	nop
 800a4b0:	e7fe      	b.n	800a4b0 <xQueueReceive+0x5c>
=======
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d103      	bne.n	800d852 <xQueueReceive+0x3e>
 800d84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d101      	bne.n	800d856 <xQueueReceive+0x42>
 800d852:	2301      	movs	r3, #1
 800d854:	e000      	b.n	800d858 <xQueueReceive+0x44>
 800d856:	2300      	movs	r3, #0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d10a      	bne.n	800d872 <xQueueReceive+0x5e>
	__asm volatile
 800d85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d860:	f383 8811 	msr	BASEPRI, r3
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	f3bf 8f4f 	dsb	sy
 800d86c:	61fb      	str	r3, [r7, #28]
}
 800d86e:	bf00      	nop
 800d870:	e7fe      	b.n	800d870 <xQueueReceive+0x5c>
>>>>>>> Stashed changes

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< Updated upstream
 800a4b2:	f001 f999 	bl	800b7e8 <xTaskGetSchedulerState>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d102      	bne.n	800a4c2 <xQueueReceive+0x6e>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <xQueueReceive+0x72>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e000      	b.n	800a4c8 <xQueueReceive+0x74>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10a      	bne.n	800a4e2 <xQueueReceive+0x8e>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	61bb      	str	r3, [r7, #24]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <xQueueReceive+0x8c>
=======
 800d872:	f001 f999 	bl	800eba8 <xTaskGetSchedulerState>
 800d876:	4603      	mov	r3, r0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d102      	bne.n	800d882 <xQueueReceive+0x6e>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d101      	bne.n	800d886 <xQueueReceive+0x72>
 800d882:	2301      	movs	r3, #1
 800d884:	e000      	b.n	800d888 <xQueueReceive+0x74>
 800d886:	2300      	movs	r3, #0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d10a      	bne.n	800d8a2 <xQueueReceive+0x8e>
	__asm volatile
 800d88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d890:	f383 8811 	msr	BASEPRI, r3
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	f3bf 8f4f 	dsb	sy
 800d89c:	61bb      	str	r3, [r7, #24]
}
 800d89e:	bf00      	nop
 800d8a0:	e7fe      	b.n	800d8a0 <xQueueReceive+0x8c>
>>>>>>> Stashed changes
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800a4e2:	f7ff fb07 	bl	8009af4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ea:	627b      	str	r3, [r7, #36]	; 0x24
=======
 800d8a2:	f7ff fb07 	bl	800ceb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8aa:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d01f      	beq.n	800a532 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4f2:	68b9      	ldr	r1, [r7, #8]
 800a4f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4f6:	f000 fa1b 	bl	800a930 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fc:	1e5a      	subs	r2, r3, #1
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a500:	639a      	str	r2, [r3, #56]	; 0x38
=======
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d01f      	beq.n	800d8f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d8b2:	68b9      	ldr	r1, [r7, #8]
 800d8b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8b6:	f000 fa1b 	bl	800dcf0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8bc:	1e5a      	subs	r2, r3, #1
 800d8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c0:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> Stashed changes

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< Updated upstream
 800a502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00f      	beq.n	800a52a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50c:	3310      	adds	r3, #16
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 ff98 	bl	800b444 <xTaskRemoveFromEventList>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d007      	beq.n	800a52a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a51a:	4b3d      	ldr	r3, [pc, #244]	; (800a610 <xQueueReceive+0x1bc>)
 800a51c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a520:	601a      	str	r2, [r3, #0]
 800a522:	f3bf 8f4f 	dsb	sy
 800a526:	f3bf 8f6f 	isb	sy
=======
 800d8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c4:	691b      	ldr	r3, [r3, #16]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d00f      	beq.n	800d8ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8cc:	3310      	adds	r3, #16
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f000 ff98 	bl	800e804 <xTaskRemoveFromEventList>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d007      	beq.n	800d8ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d8da:	4b3d      	ldr	r3, [pc, #244]	; (800d9d0 <xQueueReceive+0x1bc>)
 800d8dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8e0:	601a      	str	r2, [r3, #0]
 800d8e2:	f3bf 8f4f 	dsb	sy
 800d8e6:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800a52a:	f7ff fb13 	bl	8009b54 <vPortExitCritical>
				return pdPASS;
 800a52e:	2301      	movs	r3, #1
 800a530:	e069      	b.n	800a606 <xQueueReceive+0x1b2>
=======
 800d8ea:	f7ff fb13 	bl	800cf14 <vPortExitCritical>
				return pdPASS;
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e069      	b.n	800d9c6 <xQueueReceive+0x1b2>
>>>>>>> Stashed changes
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< Updated upstream
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d103      	bne.n	800a540 <xQueueReceive+0xec>
=======
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d103      	bne.n	800d900 <xQueueReceive+0xec>
>>>>>>> Stashed changes
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800a538:	f7ff fb0c 	bl	8009b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a53c:	2300      	movs	r3, #0
 800a53e:	e062      	b.n	800a606 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a542:	2b00      	cmp	r3, #0
 800a544:	d106      	bne.n	800a554 <xQueueReceive+0x100>
=======
 800d8f8:	f7ff fb0c 	bl	800cf14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	e062      	b.n	800d9c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d902:	2b00      	cmp	r3, #0
 800d904:	d106      	bne.n	800d914 <xQueueReceive+0x100>
>>>>>>> Stashed changes
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< Updated upstream
 800a546:	f107 0310 	add.w	r3, r7, #16
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 ffde 	bl	800b50c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a550:	2301      	movs	r3, #1
 800a552:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800d906:	f107 0310 	add.w	r3, r7, #16
 800d90a:	4618      	mov	r0, r3
 800d90c:	f000 ffde 	bl	800e8cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d910:	2301      	movs	r3, #1
 800d912:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> Stashed changes
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800a554:	f7ff fafe 	bl	8009b54 <vPortExitCritical>
=======
 800d914:	f7ff fafe 	bl	800cf14 <vPortExitCritical>
>>>>>>> Stashed changes

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< Updated upstream
 800a558:	f000 fd4a 	bl	800aff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a55c:	f7ff faca 	bl	8009af4 <vPortEnterCritical>
 800a560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a566:	b25b      	sxtb	r3, r3
 800a568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56c:	d103      	bne.n	800a576 <xQueueReceive+0x122>
 800a56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a570:	2200      	movs	r2, #0
 800a572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a57c:	b25b      	sxtb	r3, r3
 800a57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a582:	d103      	bne.n	800a58c <xQueueReceive+0x138>
 800a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a586:	2200      	movs	r2, #0
 800a588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a58c:	f7ff fae2 	bl	8009b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a590:	1d3a      	adds	r2, r7, #4
 800a592:	f107 0310 	add.w	r3, r7, #16
 800a596:	4611      	mov	r1, r2
 800a598:	4618      	mov	r0, r3
 800a59a:	f000 ffcd 	bl	800b538 <xTaskCheckForTimeOut>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d123      	bne.n	800a5ec <xQueueReceive+0x198>
=======
 800d918:	f000 fd4a 	bl	800e3b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d91c:	f7ff faca 	bl	800ceb4 <vPortEnterCritical>
 800d920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d922:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d926:	b25b      	sxtb	r3, r3
 800d928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d92c:	d103      	bne.n	800d936 <xQueueReceive+0x122>
 800d92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d930:	2200      	movs	r2, #0
 800d932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d93c:	b25b      	sxtb	r3, r3
 800d93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d942:	d103      	bne.n	800d94c <xQueueReceive+0x138>
 800d944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d946:	2200      	movs	r2, #0
 800d948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d94c:	f7ff fae2 	bl	800cf14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d950:	1d3a      	adds	r2, r7, #4
 800d952:	f107 0310 	add.w	r3, r7, #16
 800d956:	4611      	mov	r1, r2
 800d958:	4618      	mov	r0, r3
 800d95a:	f000 ffcd 	bl	800e8f8 <xTaskCheckForTimeOut>
 800d95e:	4603      	mov	r3, r0
 800d960:	2b00      	cmp	r3, #0
 800d962:	d123      	bne.n	800d9ac <xQueueReceive+0x198>
>>>>>>> Stashed changes
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< Updated upstream
 800a5a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a6:	f000 fa3b 	bl	800aa20 <prvIsQueueEmpty>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d017      	beq.n	800a5e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b2:	3324      	adds	r3, #36	; 0x24
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	4611      	mov	r1, r2
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 fef3 	bl	800b3a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5c0:	f000 f9dc 	bl	800a97c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5c4:	f000 fd22 	bl	800b00c <xTaskResumeAll>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d189      	bne.n	800a4e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a5ce:	4b10      	ldr	r3, [pc, #64]	; (800a610 <xQueueReceive+0x1bc>)
 800a5d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d4:	601a      	str	r2, [r3, #0]
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	e780      	b.n	800a4e2 <xQueueReceive+0x8e>
=======
 800d964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d966:	f000 fa3b 	bl	800dde0 <prvIsQueueEmpty>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d017      	beq.n	800d9a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d972:	3324      	adds	r3, #36	; 0x24
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	4611      	mov	r1, r2
 800d978:	4618      	mov	r0, r3
 800d97a:	f000 fef3 	bl	800e764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d97e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d980:	f000 f9dc 	bl	800dd3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d984:	f000 fd22 	bl	800e3cc <xTaskResumeAll>
 800d988:	4603      	mov	r3, r0
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d189      	bne.n	800d8a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d98e:	4b10      	ldr	r3, [pc, #64]	; (800d9d0 <xQueueReceive+0x1bc>)
 800d990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d994:	601a      	str	r2, [r3, #0]
 800d996:	f3bf 8f4f 	dsb	sy
 800d99a:	f3bf 8f6f 	isb	sy
 800d99e:	e780      	b.n	800d8a2 <xQueueReceive+0x8e>
>>>>>>> Stashed changes
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800a5e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5e2:	f000 f9cb 	bl	800a97c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5e6:	f000 fd11 	bl	800b00c <xTaskResumeAll>
 800a5ea:	e77a      	b.n	800a4e2 <xQueueReceive+0x8e>
=======
 800d9a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9a2:	f000 f9cb 	bl	800dd3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9a6:	f000 fd11 	bl	800e3cc <xTaskResumeAll>
 800d9aa:	e77a      	b.n	800d8a2 <xQueueReceive+0x8e>
>>>>>>> Stashed changes
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800a5ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5ee:	f000 f9c5 	bl	800a97c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5f2:	f000 fd0b 	bl	800b00c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5f8:	f000 fa12 	bl	800aa20 <prvIsQueueEmpty>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f43f af6f 	beq.w	800a4e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a604:	2300      	movs	r3, #0
=======
 800d9ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9ae:	f000 f9c5 	bl	800dd3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d9b2:	f000 fd0b 	bl	800e3cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9b8:	f000 fa12 	bl	800dde0 <prvIsQueueEmpty>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	f43f af6f 	beq.w	800d8a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d9c4:	2300      	movs	r3, #0
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< Updated upstream
 800a606:	4618      	mov	r0, r3
 800a608:	3730      	adds	r7, #48	; 0x30
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	e000ed04 	.word	0xe000ed04

0800a614 <xQueueSemaphoreTake>:
=======
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3730      	adds	r7, #48	; 0x30
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	e000ed04 	.word	0xe000ed04

0800d9d4 <xQueueSemaphoreTake>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 800a614:	b580      	push	{r7, lr}
 800a616:	b08e      	sub	sp, #56	; 0x38
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a61e:	2300      	movs	r3, #0
 800a620:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a626:	2300      	movs	r3, #0
 800a628:	633b      	str	r3, [r7, #48]	; 0x30
=======
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b08e      	sub	sp, #56	; 0x38
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	633b      	str	r3, [r7, #48]	; 0x30
>>>>>>> Stashed changes
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
<<<<<<< Updated upstream
 800a62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10a      	bne.n	800a646 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	f383 8811 	msr	BASEPRI, r3
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	623b      	str	r3, [r7, #32]
}
 800a642:	bf00      	nop
 800a644:	e7fe      	b.n	800a644 <xQueueSemaphoreTake+0x30>
=======
 800d9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d10a      	bne.n	800da06 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f4:	f383 8811 	msr	BASEPRI, r3
 800d9f8:	f3bf 8f6f 	isb	sy
 800d9fc:	f3bf 8f4f 	dsb	sy
 800da00:	623b      	str	r3, [r7, #32]
}
 800da02:	bf00      	nop
 800da04:	e7fe      	b.n	800da04 <xQueueSemaphoreTake+0x30>
>>>>>>> Stashed changes

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
<<<<<<< Updated upstream
 800a646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00a      	beq.n	800a664 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	61fb      	str	r3, [r7, #28]
}
 800a660:	bf00      	nop
 800a662:	e7fe      	b.n	800a662 <xQueueSemaphoreTake+0x4e>
=======
 800da06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d00a      	beq.n	800da24 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800da0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da12:	f383 8811 	msr	BASEPRI, r3
 800da16:	f3bf 8f6f 	isb	sy
 800da1a:	f3bf 8f4f 	dsb	sy
 800da1e:	61fb      	str	r3, [r7, #28]
}
 800da20:	bf00      	nop
 800da22:	e7fe      	b.n	800da22 <xQueueSemaphoreTake+0x4e>
>>>>>>> Stashed changes

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< Updated upstream
 800a664:	f001 f8c0 	bl	800b7e8 <xTaskGetSchedulerState>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d102      	bne.n	800a674 <xQueueSemaphoreTake+0x60>
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <xQueueSemaphoreTake+0x64>
 800a674:	2301      	movs	r3, #1
 800a676:	e000      	b.n	800a67a <xQueueSemaphoreTake+0x66>
 800a678:	2300      	movs	r3, #0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10a      	bne.n	800a694 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a682:	f383 8811 	msr	BASEPRI, r3
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	61bb      	str	r3, [r7, #24]
}
 800a690:	bf00      	nop
 800a692:	e7fe      	b.n	800a692 <xQueueSemaphoreTake+0x7e>
=======
 800da24:	f001 f8c0 	bl	800eba8 <xTaskGetSchedulerState>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d102      	bne.n	800da34 <xQueueSemaphoreTake+0x60>
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d101      	bne.n	800da38 <xQueueSemaphoreTake+0x64>
 800da34:	2301      	movs	r3, #1
 800da36:	e000      	b.n	800da3a <xQueueSemaphoreTake+0x66>
 800da38:	2300      	movs	r3, #0
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d10a      	bne.n	800da54 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800da3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da42:	f383 8811 	msr	BASEPRI, r3
 800da46:	f3bf 8f6f 	isb	sy
 800da4a:	f3bf 8f4f 	dsb	sy
 800da4e:	61bb      	str	r3, [r7, #24]
}
 800da50:	bf00      	nop
 800da52:	e7fe      	b.n	800da52 <xQueueSemaphoreTake+0x7e>
>>>>>>> Stashed changes
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800a694:	f7ff fa2e 	bl	8009af4 <vPortEnterCritical>
=======
 800da54:	f7ff fa2e 	bl	800ceb4 <vPortEnterCritical>
>>>>>>> Stashed changes
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
<<<<<<< Updated upstream
 800a698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69c:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 800da58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da5c:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> Stashed changes

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800a69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d024      	beq.n	800a6ee <xQueueSemaphoreTake+0xda>
=======
 800da5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da60:	2b00      	cmp	r3, #0
 800da62:	d024      	beq.n	800daae <xQueueSemaphoreTake+0xda>
>>>>>>> Stashed changes
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
<<<<<<< Updated upstream
 800a6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a6:	1e5a      	subs	r2, r3, #1
 800a6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6aa:	639a      	str	r2, [r3, #56]	; 0x38
=======
 800da64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da66:	1e5a      	subs	r2, r3, #1
 800da68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6a:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> Stashed changes

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< Updated upstream
 800a6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d104      	bne.n	800a6be <xQueueSemaphoreTake+0xaa>
=======
 800da6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d104      	bne.n	800da7e <xQueueSemaphoreTake+0xaa>
>>>>>>> Stashed changes
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
<<<<<<< Updated upstream
 800a6b4:	f001 fa0e 	bl	800bad4 <pvTaskIncrementMutexHeldCount>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6bc:	609a      	str	r2, [r3, #8]
=======
 800da74:	f001 fa0e 	bl	800ee94 <pvTaskIncrementMutexHeldCount>
 800da78:	4602      	mov	r2, r0
 800da7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7c:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< Updated upstream
 800a6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00f      	beq.n	800a6e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c8:	3310      	adds	r3, #16
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 feba 	bl	800b444 <xTaskRemoveFromEventList>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d007      	beq.n	800a6e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6d6:	4b54      	ldr	r3, [pc, #336]	; (800a828 <xQueueSemaphoreTake+0x214>)
 800a6d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6dc:	601a      	str	r2, [r3, #0]
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	f3bf 8f6f 	isb	sy
=======
 800da7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da80:	691b      	ldr	r3, [r3, #16]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d00f      	beq.n	800daa6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da88:	3310      	adds	r3, #16
 800da8a:	4618      	mov	r0, r3
 800da8c:	f000 feba 	bl	800e804 <xTaskRemoveFromEventList>
 800da90:	4603      	mov	r3, r0
 800da92:	2b00      	cmp	r3, #0
 800da94:	d007      	beq.n	800daa6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da96:	4b54      	ldr	r3, [pc, #336]	; (800dbe8 <xQueueSemaphoreTake+0x214>)
 800da98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da9c:	601a      	str	r2, [r3, #0]
 800da9e:	f3bf 8f4f 	dsb	sy
 800daa2:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800a6e6:	f7ff fa35 	bl	8009b54 <vPortExitCritical>
				return pdPASS;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e097      	b.n	800a81e <xQueueSemaphoreTake+0x20a>
=======
 800daa6:	f7ff fa35 	bl	800cf14 <vPortExitCritical>
				return pdPASS;
 800daaa:	2301      	movs	r3, #1
 800daac:	e097      	b.n	800dbde <xQueueSemaphoreTake+0x20a>
>>>>>>> Stashed changes
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< Updated upstream
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d111      	bne.n	800a718 <xQueueSemaphoreTake+0x104>
=======
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d111      	bne.n	800dad8 <xQueueSemaphoreTake+0x104>
>>>>>>> Stashed changes
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
<<<<<<< Updated upstream
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00a      	beq.n	800a710 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	617b      	str	r3, [r7, #20]
}
 800a70c:	bf00      	nop
 800a70e:	e7fe      	b.n	800a70e <xQueueSemaphoreTake+0xfa>
=======
 800dab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00a      	beq.n	800dad0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800daba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dabe:	f383 8811 	msr	BASEPRI, r3
 800dac2:	f3bf 8f6f 	isb	sy
 800dac6:	f3bf 8f4f 	dsb	sy
 800daca:	617b      	str	r3, [r7, #20]
}
 800dacc:	bf00      	nop
 800dace:	e7fe      	b.n	800dace <xQueueSemaphoreTake+0xfa>
>>>>>>> Stashed changes
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800a710:	f7ff fa20 	bl	8009b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a714:	2300      	movs	r3, #0
 800a716:	e082      	b.n	800a81e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d106      	bne.n	800a72c <xQueueSemaphoreTake+0x118>
=======
 800dad0:	f7ff fa20 	bl	800cf14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dad4:	2300      	movs	r3, #0
 800dad6:	e082      	b.n	800dbde <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d106      	bne.n	800daec <xQueueSemaphoreTake+0x118>
>>>>>>> Stashed changes
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< Updated upstream
 800a71e:	f107 030c 	add.w	r3, r7, #12
 800a722:	4618      	mov	r0, r3
 800a724:	f000 fef2 	bl	800b50c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a728:	2301      	movs	r3, #1
 800a72a:	637b      	str	r3, [r7, #52]	; 0x34
=======
 800dade:	f107 030c 	add.w	r3, r7, #12
 800dae2:	4618      	mov	r0, r3
 800dae4:	f000 fef2 	bl	800e8cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dae8:	2301      	movs	r3, #1
 800daea:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> Stashed changes
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800a72c:	f7ff fa12 	bl	8009b54 <vPortExitCritical>
=======
 800daec:	f7ff fa12 	bl	800cf14 <vPortExitCritical>
>>>>>>> Stashed changes

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< Updated upstream
 800a730:	f000 fc5e 	bl	800aff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a734:	f7ff f9de 	bl	8009af4 <vPortEnterCritical>
 800a738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a73e:	b25b      	sxtb	r3, r3
 800a740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a744:	d103      	bne.n	800a74e <xQueueSemaphoreTake+0x13a>
 800a746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a748:	2200      	movs	r2, #0
 800a74a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a754:	b25b      	sxtb	r3, r3
 800a756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75a:	d103      	bne.n	800a764 <xQueueSemaphoreTake+0x150>
 800a75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a75e:	2200      	movs	r2, #0
 800a760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a764:	f7ff f9f6 	bl	8009b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a768:	463a      	mov	r2, r7
 800a76a:	f107 030c 	add.w	r3, r7, #12
 800a76e:	4611      	mov	r1, r2
 800a770:	4618      	mov	r0, r3
 800a772:	f000 fee1 	bl	800b538 <xTaskCheckForTimeOut>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d132      	bne.n	800a7e2 <xQueueSemaphoreTake+0x1ce>
=======
 800daf0:	f000 fc5e 	bl	800e3b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800daf4:	f7ff f9de 	bl	800ceb4 <vPortEnterCritical>
 800daf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dafe:	b25b      	sxtb	r3, r3
 800db00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db04:	d103      	bne.n	800db0e <xQueueSemaphoreTake+0x13a>
 800db06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db08:	2200      	movs	r2, #0
 800db0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db14:	b25b      	sxtb	r3, r3
 800db16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db1a:	d103      	bne.n	800db24 <xQueueSemaphoreTake+0x150>
 800db1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1e:	2200      	movs	r2, #0
 800db20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db24:	f7ff f9f6 	bl	800cf14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db28:	463a      	mov	r2, r7
 800db2a:	f107 030c 	add.w	r3, r7, #12
 800db2e:	4611      	mov	r1, r2
 800db30:	4618      	mov	r0, r3
 800db32:	f000 fee1 	bl	800e8f8 <xTaskCheckForTimeOut>
 800db36:	4603      	mov	r3, r0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d132      	bne.n	800dba2 <xQueueSemaphoreTake+0x1ce>
>>>>>>> Stashed changes
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< Updated upstream
 800a77c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a77e:	f000 f94f 	bl	800aa20 <prvIsQueueEmpty>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d026      	beq.n	800a7d6 <xQueueSemaphoreTake+0x1c2>
=======
 800db3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db3e:	f000 f94f 	bl	800dde0 <prvIsQueueEmpty>
 800db42:	4603      	mov	r3, r0
 800db44:	2b00      	cmp	r3, #0
 800db46:	d026      	beq.n	800db96 <xQueueSemaphoreTake+0x1c2>
>>>>>>> Stashed changes
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< Updated upstream
 800a788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d109      	bne.n	800a7a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a790:	f7ff f9b0 	bl	8009af4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	4618      	mov	r0, r3
 800a79a:	f001 f843 	bl	800b824 <xTaskPriorityInherit>
 800a79e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a7a0:	f7ff f9d8 	bl	8009b54 <vPortExitCritical>
=======
 800db48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d109      	bne.n	800db64 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800db50:	f7ff f9b0 	bl	800ceb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db56:	689b      	ldr	r3, [r3, #8]
 800db58:	4618      	mov	r0, r3
 800db5a:	f001 f843 	bl	800ebe4 <xTaskPriorityInherit>
 800db5e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800db60:	f7ff f9d8 	bl	800cf14 <vPortExitCritical>
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
<<<<<<< Updated upstream
 800a7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a6:	3324      	adds	r3, #36	; 0x24
 800a7a8:	683a      	ldr	r2, [r7, #0]
 800a7aa:	4611      	mov	r1, r2
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f000 fdf9 	bl	800b3a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7b4:	f000 f8e2 	bl	800a97c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7b8:	f000 fc28 	bl	800b00c <xTaskResumeAll>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f47f af68 	bne.w	800a694 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a7c4:	4b18      	ldr	r3, [pc, #96]	; (800a828 <xQueueSemaphoreTake+0x214>)
 800a7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ca:	601a      	str	r2, [r3, #0]
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	e75e      	b.n	800a694 <xQueueSemaphoreTake+0x80>
=======
 800db64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db66:	3324      	adds	r3, #36	; 0x24
 800db68:	683a      	ldr	r2, [r7, #0]
 800db6a:	4611      	mov	r1, r2
 800db6c:	4618      	mov	r0, r3
 800db6e:	f000 fdf9 	bl	800e764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db74:	f000 f8e2 	bl	800dd3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db78:	f000 fc28 	bl	800e3cc <xTaskResumeAll>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f47f af68 	bne.w	800da54 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800db84:	4b18      	ldr	r3, [pc, #96]	; (800dbe8 <xQueueSemaphoreTake+0x214>)
 800db86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db8a:	601a      	str	r2, [r3, #0]
 800db8c:	f3bf 8f4f 	dsb	sy
 800db90:	f3bf 8f6f 	isb	sy
 800db94:	e75e      	b.n	800da54 <xQueueSemaphoreTake+0x80>
>>>>>>> Stashed changes
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800a7d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7d8:	f000 f8d0 	bl	800a97c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7dc:	f000 fc16 	bl	800b00c <xTaskResumeAll>
 800a7e0:	e758      	b.n	800a694 <xQueueSemaphoreTake+0x80>
=======
 800db96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db98:	f000 f8d0 	bl	800dd3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db9c:	f000 fc16 	bl	800e3cc <xTaskResumeAll>
 800dba0:	e758      	b.n	800da54 <xQueueSemaphoreTake+0x80>
>>>>>>> Stashed changes
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800a7e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7e4:	f000 f8ca 	bl	800a97c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7e8:	f000 fc10 	bl	800b00c <xTaskResumeAll>
=======
 800dba2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dba4:	f000 f8ca 	bl	800dd3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dba8:	f000 fc10 	bl	800e3cc <xTaskResumeAll>
>>>>>>> Stashed changes

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< Updated upstream
 800a7ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7ee:	f000 f917 	bl	800aa20 <prvIsQueueEmpty>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f43f af4d 	beq.w	800a694 <xQueueSemaphoreTake+0x80>
=======
 800dbac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbae:	f000 f917 	bl	800dde0 <prvIsQueueEmpty>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f43f af4d 	beq.w	800da54 <xQueueSemaphoreTake+0x80>
>>>>>>> Stashed changes
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
<<<<<<< Updated upstream
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00d      	beq.n	800a81c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a800:	f7ff f978 	bl	8009af4 <vPortEnterCritical>
=======
 800dbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d00d      	beq.n	800dbdc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800dbc0:	f7ff f978 	bl	800ceb4 <vPortEnterCritical>
>>>>>>> Stashed changes
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
<<<<<<< Updated upstream
 800a804:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a806:	f000 f811 	bl	800a82c <prvGetDisinheritPriorityAfterTimeout>
 800a80a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a812:	4618      	mov	r0, r3
 800a814:	f001 f8dc 	bl	800b9d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a818:	f7ff f99c 	bl	8009b54 <vPortExitCritical>
=======
 800dbc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbc6:	f000 f811 	bl	800dbec <prvGetDisinheritPriorityAfterTimeout>
 800dbca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbce:	689b      	ldr	r3, [r3, #8]
 800dbd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f001 f8dc 	bl	800ed90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dbd8:	f7ff f99c 	bl	800cf14 <vPortExitCritical>
>>>>>>> Stashed changes
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
<<<<<<< Updated upstream
 800a81c:	2300      	movs	r3, #0
=======
 800dbdc:	2300      	movs	r3, #0
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< Updated upstream
 800a81e:	4618      	mov	r0, r3
 800a820:	3738      	adds	r7, #56	; 0x38
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	e000ed04 	.word	0xe000ed04

0800a82c <prvGetDisinheritPriorityAfterTimeout>:
=======
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3738      	adds	r7, #56	; 0x38
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	e000ed04 	.word	0xe000ed04

0800dbec <prvGetDisinheritPriorityAfterTimeout>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
<<<<<<< Updated upstream
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
=======
 800dbec:	b480      	push	{r7}
 800dbee:	b085      	sub	sp, #20
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
<<<<<<< Updated upstream
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d006      	beq.n	800a84a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a846:	60fb      	str	r3, [r7, #12]
 800a848:	e001      	b.n	800a84e <prvGetDisinheritPriorityAfterTimeout+0x22>
=======
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d006      	beq.n	800dc0a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800dc06:	60fb      	str	r3, [r7, #12]
 800dc08:	e001      	b.n	800dc0e <prvGetDisinheritPriorityAfterTimeout+0x22>
>>>>>>> Stashed changes
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
<<<<<<< Updated upstream
 800a84a:	2300      	movs	r3, #0
 800a84c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a84e:	68fb      	ldr	r3, [r7, #12]
	}
 800a850:	4618      	mov	r0, r3
 800a852:	3714      	adds	r7, #20
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <prvCopyDataToQueue>:
=======
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
	}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3714      	adds	r7, #20
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr

0800dc1c <prvCopyDataToQueue>:
>>>>>>> Stashed changes

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< Updated upstream
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b086      	sub	sp, #24
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a868:	2300      	movs	r3, #0
 800a86a:	617b      	str	r3, [r7, #20]
=======
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b086      	sub	sp, #24
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< Updated upstream
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a870:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10d      	bne.n	800a896 <prvCopyDataToQueue+0x3a>
=======
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d10d      	bne.n	800dc56 <prvCopyDataToQueue+0x3a>
>>>>>>> Stashed changes
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< Updated upstream
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d14d      	bne.n	800a91e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	4618      	mov	r0, r3
 800a888:	f001 f834 	bl	800b8f4 <xTaskPriorityDisinherit>
 800a88c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2200      	movs	r2, #0
 800a892:	609a      	str	r2, [r3, #8]
 800a894:	e043      	b.n	800a91e <prvCopyDataToQueue+0xc2>
=======
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d14d      	bne.n	800dcde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	689b      	ldr	r3, [r3, #8]
 800dc46:	4618      	mov	r0, r3
 800dc48:	f001 f834 	bl	800ecb4 <xTaskPriorityDisinherit>
 800dc4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2200      	movs	r2, #0
 800dc52:	609a      	str	r2, [r3, #8]
 800dc54:	e043      	b.n	800dcde <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< Updated upstream
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d119      	bne.n	800a8d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6858      	ldr	r0, [r3, #4]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	68b9      	ldr	r1, [r7, #8]
 800a8a8:	f002 fbe1 	bl	800d06e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	685a      	ldr	r2, [r3, #4]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b4:	441a      	add	r2, r3
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d32b      	bcc.n	800a91e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	605a      	str	r2, [r3, #4]
 800a8ce:	e026      	b.n	800a91e <prvCopyDataToQueue+0xc2>
=======
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d119      	bne.n	800dc90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6858      	ldr	r0, [r3, #4]
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc64:	461a      	mov	r2, r3
 800dc66:	68b9      	ldr	r1, [r7, #8]
 800dc68:	f001 fdf1 	bl	800f84e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	685a      	ldr	r2, [r3, #4]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc74:	441a      	add	r2, r3
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	685a      	ldr	r2, [r3, #4]
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	689b      	ldr	r3, [r3, #8]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d32b      	bcc.n	800dcde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	605a      	str	r2, [r3, #4]
 800dc8e:	e026      	b.n	800dcde <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
<<<<<<< Updated upstream
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	68d8      	ldr	r0, [r3, #12]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d8:	461a      	mov	r2, r3
 800a8da:	68b9      	ldr	r1, [r7, #8]
 800a8dc:	f002 fbc7 	bl	800d06e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	68da      	ldr	r2, [r3, #12]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e8:	425b      	negs	r3, r3
 800a8ea:	441a      	add	r2, r3
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	68da      	ldr	r2, [r3, #12]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d207      	bcs.n	800a90c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	689a      	ldr	r2, [r3, #8]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a904:	425b      	negs	r3, r3
 800a906:	441a      	add	r2, r3
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	60da      	str	r2, [r3, #12]
=======
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	68d8      	ldr	r0, [r3, #12]
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc98:	461a      	mov	r2, r3
 800dc9a:	68b9      	ldr	r1, [r7, #8]
 800dc9c:	f001 fdd7 	bl	800f84e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	68da      	ldr	r2, [r3, #12]
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dca8:	425b      	negs	r3, r3
 800dcaa:	441a      	add	r2, r3
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	68da      	ldr	r2, [r3, #12]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d207      	bcs.n	800dccc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	689a      	ldr	r2, [r3, #8]
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc4:	425b      	negs	r3, r3
 800dcc6:	441a      	add	r2, r3
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< Updated upstream
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d105      	bne.n	800a91e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d002      	beq.n	800a91e <prvCopyDataToQueue+0xc2>
=======
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2b02      	cmp	r3, #2
 800dcd0:	d105      	bne.n	800dcde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d002      	beq.n	800dcde <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< Updated upstream
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	3b01      	subs	r3, #1
 800a91c:	613b      	str	r3, [r7, #16]
=======
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	3b01      	subs	r3, #1
 800dcdc:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< Updated upstream
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	1c5a      	adds	r2, r3, #1
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a926:	697b      	ldr	r3, [r7, #20]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3718      	adds	r7, #24
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <prvCopyDataFromQueue>:
=======
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	1c5a      	adds	r2, r3, #1
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dce6:	697b      	ldr	r3, [r7, #20]
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3718      	adds	r7, #24
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <prvCopyDataFromQueue>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
<<<<<<< Updated upstream
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d018      	beq.n	800a974 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	68da      	ldr	r2, [r3, #12]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94a:	441a      	add	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	68da      	ldr	r2, [r3, #12]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d303      	bcc.n	800a964 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	60da      	str	r2, [r3, #12]
=======
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b082      	sub	sp, #8
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d018      	beq.n	800dd34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	68da      	ldr	r2, [r3, #12]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd0a:	441a      	add	r2, r3
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	68da      	ldr	r2, [r3, #12]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	689b      	ldr	r3, [r3, #8]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d303      	bcc.n	800dd24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
<<<<<<< Updated upstream
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68d9      	ldr	r1, [r3, #12]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96c:	461a      	mov	r2, r3
 800a96e:	6838      	ldr	r0, [r7, #0]
 800a970:	f002 fb7d 	bl	800d06e <memcpy>
	}
}
 800a974:	bf00      	nop
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <prvUnlockQueue>:
=======
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	68d9      	ldr	r1, [r3, #12]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	6838      	ldr	r0, [r7, #0]
 800dd30:	f001 fd8d 	bl	800f84e <memcpy>
	}
}
 800dd34:	bf00      	nop
 800dd36:	3708      	adds	r7, #8
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <prvUnlockQueue>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< Updated upstream
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
=======
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800a984:	f7ff f8b6 	bl	8009af4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a98e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a990:	e011      	b.n	800a9b6 <prvUnlockQueue+0x3a>
=======
 800dd44:	f7ff f8b6 	bl	800ceb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd50:	e011      	b.n	800dd76 <prvUnlockQueue+0x3a>
>>>>>>> Stashed changes
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a996:	2b00      	cmp	r3, #0
 800a998:	d012      	beq.n	800a9c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	3324      	adds	r3, #36	; 0x24
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 fd50 	bl	800b444 <xTaskRemoveFromEventList>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <prvUnlockQueue+0x32>
=======
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d012      	beq.n	800dd80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	3324      	adds	r3, #36	; 0x24
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f000 fd50 	bl	800e804 <xTaskRemoveFromEventList>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d001      	beq.n	800dd6e <prvUnlockQueue+0x32>
>>>>>>> Stashed changes
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< Updated upstream
 800a9aa:	f000 fe27 	bl	800b5fc <vTaskMissedYield>
=======
 800dd6a:	f000 fe27 	bl	800e9bc <vTaskMissedYield>
>>>>>>> Stashed changes
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< Updated upstream
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	dce9      	bgt.n	800a992 <prvUnlockQueue+0x16>
 800a9be:	e000      	b.n	800a9c2 <prvUnlockQueue+0x46>
					break;
 800a9c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	22ff      	movs	r2, #255	; 0xff
 800a9c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a9ca:	f7ff f8c3 	bl	8009b54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a9ce:	f7ff f891 	bl	8009af4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9da:	e011      	b.n	800aa00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d012      	beq.n	800aa0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	3310      	adds	r3, #16
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 fd2b 	bl	800b444 <xTaskRemoveFromEventList>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a9f4:	f000 fe02 	bl	800b5fc <vTaskMissedYield>
=======
 800dd6e:	7bfb      	ldrb	r3, [r7, #15]
 800dd70:	3b01      	subs	r3, #1
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	dce9      	bgt.n	800dd52 <prvUnlockQueue+0x16>
 800dd7e:	e000      	b.n	800dd82 <prvUnlockQueue+0x46>
					break;
 800dd80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	22ff      	movs	r2, #255	; 0xff
 800dd86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dd8a:	f7ff f8c3 	bl	800cf14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dd8e:	f7ff f891 	bl	800ceb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd9a:	e011      	b.n	800ddc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	691b      	ldr	r3, [r3, #16]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d012      	beq.n	800ddca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	3310      	adds	r3, #16
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f000 fd2b 	bl	800e804 <xTaskRemoveFromEventList>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d001      	beq.n	800ddb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ddb4:	f000 fe02 	bl	800e9bc <vTaskMissedYield>
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< Updated upstream
 800a9f8:	7bbb      	ldrb	r3, [r7, #14]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	dce9      	bgt.n	800a9dc <prvUnlockQueue+0x60>
 800aa08:	e000      	b.n	800aa0c <prvUnlockQueue+0x90>
=======
 800ddb8:	7bbb      	ldrb	r3, [r7, #14]
 800ddba:	3b01      	subs	r3, #1
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ddc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	dce9      	bgt.n	800dd9c <prvUnlockQueue+0x60>
 800ddc8:	e000      	b.n	800ddcc <prvUnlockQueue+0x90>
>>>>>>> Stashed changes
			}
			else
			{
				break;
<<<<<<< Updated upstream
 800aa0a:	bf00      	nop
=======
 800ddca:	bf00      	nop
>>>>>>> Stashed changes
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< Updated upstream
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	22ff      	movs	r2, #255	; 0xff
 800aa10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aa14:	f7ff f89e 	bl	8009b54 <vPortExitCritical>
}
 800aa18:	bf00      	nop
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <prvIsQueueEmpty>:
=======
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	22ff      	movs	r2, #255	; 0xff
 800ddd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ddd4:	f7ff f89e 	bl	800cf14 <vPortExitCritical>
}
 800ddd8:	bf00      	nop
 800ddda:	3710      	adds	r7, #16
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <prvIsQueueEmpty>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< Updated upstream
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa28:	f7ff f864 	bl	8009af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d102      	bne.n	800aa3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa34:	2301      	movs	r3, #1
 800aa36:	60fb      	str	r3, [r7, #12]
 800aa38:	e001      	b.n	800aa3e <prvIsQueueEmpty+0x1e>
=======
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dde8:	f7ff f864 	bl	800ceb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d102      	bne.n	800ddfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	60fb      	str	r3, [r7, #12]
 800ddf8:	e001      	b.n	800ddfe <prvIsQueueEmpty+0x1e>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< Updated upstream
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa3e:	f7ff f889 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 800aa42:	68fb      	ldr	r3, [r7, #12]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <prvIsQueueFull>:
=======
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ddfe:	f7ff f889 	bl	800cf14 <vPortExitCritical>

	return xReturn;
 800de02:	68fb      	ldr	r3, [r7, #12]
}
 800de04:	4618      	mov	r0, r3
 800de06:	3710      	adds	r7, #16
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <prvIsQueueFull>:
>>>>>>> Stashed changes
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< Updated upstream
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa54:	f7ff f84e 	bl	8009af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d102      	bne.n	800aa6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa64:	2301      	movs	r3, #1
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	e001      	b.n	800aa6e <prvIsQueueFull+0x22>
=======
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de14:	f7ff f84e 	bl	800ceb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de20:	429a      	cmp	r2, r3
 800de22:	d102      	bne.n	800de2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800de24:	2301      	movs	r3, #1
 800de26:	60fb      	str	r3, [r7, #12]
 800de28:	e001      	b.n	800de2e <prvIsQueueFull+0x22>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< Updated upstream
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa6e:	f7ff f871 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 800aa72:	68fb      	ldr	r3, [r7, #12]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <vQueueAddToRegistry>:
=======
 800de2a:	2300      	movs	r3, #0
 800de2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de2e:	f7ff f871 	bl	800cf14 <vPortExitCritical>

	return xReturn;
 800de32:	68fb      	ldr	r3, [r7, #12]
}
 800de34:	4618      	mov	r0, r3
 800de36:	3710      	adds	r7, #16
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <vQueueAddToRegistry>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
<<<<<<< Updated upstream
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
=======
 800de3c:	b480      	push	{r7}
 800de3e:	b085      	sub	sp, #20
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< Updated upstream
 800aa86:	2300      	movs	r3, #0
 800aa88:	60fb      	str	r3, [r7, #12]
 800aa8a:	e014      	b.n	800aab6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa8c:	4a0f      	ldr	r2, [pc, #60]	; (800aacc <vQueueAddToRegistry+0x50>)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10b      	bne.n	800aab0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa98:	490c      	ldr	r1, [pc, #48]	; (800aacc <vQueueAddToRegistry+0x50>)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aaa2:	4a0a      	ldr	r2, [pc, #40]	; (800aacc <vQueueAddToRegistry+0x50>)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	00db      	lsls	r3, r3, #3
 800aaa8:	4413      	add	r3, r2
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aaae:	e006      	b.n	800aabe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	3301      	adds	r3, #1
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2b07      	cmp	r3, #7
 800aaba:	d9e7      	bls.n	800aa8c <vQueueAddToRegistry+0x10>
=======
 800de46:	2300      	movs	r3, #0
 800de48:	60fb      	str	r3, [r7, #12]
 800de4a:	e014      	b.n	800de76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800de4c:	4a0f      	ldr	r2, [pc, #60]	; (800de8c <vQueueAddToRegistry+0x50>)
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d10b      	bne.n	800de70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800de58:	490c      	ldr	r1, [pc, #48]	; (800de8c <vQueueAddToRegistry+0x50>)
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	683a      	ldr	r2, [r7, #0]
 800de5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800de62:	4a0a      	ldr	r2, [pc, #40]	; (800de8c <vQueueAddToRegistry+0x50>)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	00db      	lsls	r3, r3, #3
 800de68:	4413      	add	r3, r2
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800de6e:	e006      	b.n	800de7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	3301      	adds	r3, #1
 800de74:	60fb      	str	r3, [r7, #12]
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2b07      	cmp	r3, #7
 800de7a:	d9e7      	bls.n	800de4c <vQueueAddToRegistry+0x10>
>>>>>>> Stashed changes
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
<<<<<<< Updated upstream
 800aabc:	bf00      	nop
 800aabe:	bf00      	nop
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	240048b4 	.word	0x240048b4

0800aad0 <vQueueWaitForMessageRestricted>:
=======
 800de7c:	bf00      	nop
 800de7e:	bf00      	nop
 800de80:	3714      	adds	r7, #20
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop
 800de8c:	24004d90 	.word	0x24004d90

0800de90 <vQueueWaitForMessageRestricted>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< Updated upstream
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b086      	sub	sp, #24
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	617b      	str	r3, [r7, #20]
=======
 800de90:	b580      	push	{r7, lr}
 800de92:	b086      	sub	sp, #24
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
<<<<<<< Updated upstream
 800aae0:	f7ff f808 	bl	8009af4 <vPortEnterCritical>
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaea:	b25b      	sxtb	r3, r3
 800aaec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf0:	d103      	bne.n	800aafa <vQueueWaitForMessageRestricted+0x2a>
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab00:	b25b      	sxtb	r3, r3
 800ab02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab06:	d103      	bne.n	800ab10 <vQueueWaitForMessageRestricted+0x40>
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab10:	f7ff f820 	bl	8009b54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d106      	bne.n	800ab2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	3324      	adds	r3, #36	; 0x24
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	68b9      	ldr	r1, [r7, #8]
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 fc61 	bl	800b3ec <vTaskPlaceOnEventListRestricted>
=======
 800dea0:	f7ff f808 	bl	800ceb4 <vPortEnterCritical>
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800deaa:	b25b      	sxtb	r3, r3
 800deac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deb0:	d103      	bne.n	800deba <vQueueWaitForMessageRestricted+0x2a>
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	2200      	movs	r2, #0
 800deb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dec0:	b25b      	sxtb	r3, r3
 800dec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec6:	d103      	bne.n	800ded0 <vQueueWaitForMessageRestricted+0x40>
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	2200      	movs	r2, #0
 800decc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ded0:	f7ff f820 	bl	800cf14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d106      	bne.n	800deea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	3324      	adds	r3, #36	; 0x24
 800dee0:	687a      	ldr	r2, [r7, #4]
 800dee2:	68b9      	ldr	r1, [r7, #8]
 800dee4:	4618      	mov	r0, r3
 800dee6:	f000 fc61 	bl	800e7ac <vTaskPlaceOnEventListRestricted>
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800ab2a:	6978      	ldr	r0, [r7, #20]
 800ab2c:	f7ff ff26 	bl	800a97c <prvUnlockQueue>
	}
 800ab30:	bf00      	nop
 800ab32:	3718      	adds	r7, #24
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <xTaskCreateStatic>:
=======
 800deea:	6978      	ldr	r0, [r7, #20]
 800deec:	f7ff ff26 	bl	800dd3c <prvUnlockQueue>
	}
 800def0:	bf00      	nop
 800def2:	3718      	adds	r7, #24
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <xTaskCreateStatic>:
>>>>>>> Stashed changes
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< Updated upstream
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b08e      	sub	sp, #56	; 0x38
 800ab3c:	af04      	add	r7, sp, #16
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	607a      	str	r2, [r7, #4]
 800ab44:	603b      	str	r3, [r7, #0]
=======
 800def8:	b580      	push	{r7, lr}
 800defa:	b08e      	sub	sp, #56	; 0x38
 800defc:	af04      	add	r7, sp, #16
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	607a      	str	r2, [r7, #4]
 800df04:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< Updated upstream
 800ab46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10a      	bne.n	800ab62 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	623b      	str	r3, [r7, #32]
}
 800ab5e:	bf00      	nop
 800ab60:	e7fe      	b.n	800ab60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d10a      	bne.n	800ab7e <xTaskCreateStatic+0x46>
	__asm volatile
 800ab68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6c:	f383 8811 	msr	BASEPRI, r3
 800ab70:	f3bf 8f6f 	isb	sy
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	61fb      	str	r3, [r7, #28]
}
 800ab7a:	bf00      	nop
 800ab7c:	e7fe      	b.n	800ab7c <xTaskCreateStatic+0x44>
=======
 800df06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d10a      	bne.n	800df22 <xTaskCreateStatic+0x2a>
	__asm volatile
 800df0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df10:	f383 8811 	msr	BASEPRI, r3
 800df14:	f3bf 8f6f 	isb	sy
 800df18:	f3bf 8f4f 	dsb	sy
 800df1c:	623b      	str	r3, [r7, #32]
}
 800df1e:	bf00      	nop
 800df20:	e7fe      	b.n	800df20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800df22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df24:	2b00      	cmp	r3, #0
 800df26:	d10a      	bne.n	800df3e <xTaskCreateStatic+0x46>
	__asm volatile
 800df28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df2c:	f383 8811 	msr	BASEPRI, r3
 800df30:	f3bf 8f6f 	isb	sy
 800df34:	f3bf 8f4f 	dsb	sy
 800df38:	61fb      	str	r3, [r7, #28]
}
 800df3a:	bf00      	nop
 800df3c:	e7fe      	b.n	800df3c <xTaskCreateStatic+0x44>
>>>>>>> Stashed changes
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< Updated upstream
 800ab7e:	23a8      	movs	r3, #168	; 0xa8
 800ab80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	2ba8      	cmp	r3, #168	; 0xa8
 800ab86:	d00a      	beq.n	800ab9e <xTaskCreateStatic+0x66>
	__asm volatile
 800ab88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8c:	f383 8811 	msr	BASEPRI, r3
 800ab90:	f3bf 8f6f 	isb	sy
 800ab94:	f3bf 8f4f 	dsb	sy
 800ab98:	61bb      	str	r3, [r7, #24]
}
 800ab9a:	bf00      	nop
 800ab9c:	e7fe      	b.n	800ab9c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab9e:	693b      	ldr	r3, [r7, #16]
=======
 800df3e:	23bc      	movs	r3, #188	; 0xbc
 800df40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	2bbc      	cmp	r3, #188	; 0xbc
 800df46:	d00a      	beq.n	800df5e <xTaskCreateStatic+0x66>
	__asm volatile
 800df48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4c:	f383 8811 	msr	BASEPRI, r3
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	61bb      	str	r3, [r7, #24]
}
 800df5a:	bf00      	nop
 800df5c:	e7fe      	b.n	800df5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df5e:	693b      	ldr	r3, [r7, #16]
>>>>>>> Stashed changes
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< Updated upstream
 800aba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d01e      	beq.n	800abe4 <xTaskCreateStatic+0xac>
 800aba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d01b      	beq.n	800abe4 <xTaskCreateStatic+0xac>
=======
 800df60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df62:	2b00      	cmp	r3, #0
 800df64:	d01e      	beq.n	800dfa4 <xTaskCreateStatic+0xac>
 800df66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d01b      	beq.n	800dfa4 <xTaskCreateStatic+0xac>
>>>>>>> Stashed changes
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< Updated upstream
 800abac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800abb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abb4:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800df6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df74:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< Updated upstream
 800abb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb8:	2202      	movs	r2, #2
 800abba:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
=======
 800df76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df78:	2202      	movs	r2, #2
 800df7a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
>>>>>>> Stashed changes
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< Updated upstream
 800abbe:	2300      	movs	r3, #0
 800abc0:	9303      	str	r3, [sp, #12]
 800abc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc4:	9302      	str	r3, [sp, #8]
 800abc6:	f107 0314 	add.w	r3, r7, #20
 800abca:	9301      	str	r3, [sp, #4]
 800abcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	68b9      	ldr	r1, [r7, #8]
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f000 f850 	bl	800ac7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abde:	f000 f8f3 	bl	800adc8 <prvAddNewTaskToReadyList>
 800abe2:	e001      	b.n	800abe8 <xTaskCreateStatic+0xb0>
=======
 800df7e:	2300      	movs	r3, #0
 800df80:	9303      	str	r3, [sp, #12]
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	9302      	str	r3, [sp, #8]
 800df86:	f107 0314 	add.w	r3, r7, #20
 800df8a:	9301      	str	r3, [sp, #4]
 800df8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8e:	9300      	str	r3, [sp, #0]
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	68b9      	ldr	r1, [r7, #8]
 800df96:	68f8      	ldr	r0, [r7, #12]
 800df98:	f000 f850 	bl	800e03c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df9e:	f000 f8f3 	bl	800e188 <prvAddNewTaskToReadyList>
 800dfa2:	e001      	b.n	800dfa8 <xTaskCreateStatic+0xb0>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = NULL;
<<<<<<< Updated upstream
 800abe4:	2300      	movs	r3, #0
 800abe6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800abe8:	697b      	ldr	r3, [r7, #20]
	}
 800abea:	4618      	mov	r0, r3
 800abec:	3728      	adds	r7, #40	; 0x28
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <xTaskCreate>:
=======
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dfa8:	697b      	ldr	r3, [r7, #20]
	}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3728      	adds	r7, #40	; 0x28
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}

0800dfb2 <xTaskCreate>:
>>>>>>> Stashed changes
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< Updated upstream
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b08c      	sub	sp, #48	; 0x30
 800abf6:	af04      	add	r7, sp, #16
 800abf8:	60f8      	str	r0, [r7, #12]
 800abfa:	60b9      	str	r1, [r7, #8]
 800abfc:	603b      	str	r3, [r7, #0]
 800abfe:	4613      	mov	r3, r2
 800ac00:	80fb      	strh	r3, [r7, #6]
=======
 800dfb2:	b580      	push	{r7, lr}
 800dfb4:	b08c      	sub	sp, #48	; 0x30
 800dfb6:	af04      	add	r7, sp, #16
 800dfb8:	60f8      	str	r0, [r7, #12]
 800dfba:	60b9      	str	r1, [r7, #8]
 800dfbc:	603b      	str	r3, [r7, #0]
 800dfbe:	4613      	mov	r3, r2
 800dfc0:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< Updated upstream
 800ac02:	88fb      	ldrh	r3, [r7, #6]
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fe fba6 	bl	8009358 <pvPortMalloc>
 800ac0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d00e      	beq.n	800ac32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac14:	20a8      	movs	r0, #168	; 0xa8
 800ac16:	f7fe fb9f 	bl	8009358 <pvPortMalloc>
 800ac1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d003      	beq.n	800ac2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	697a      	ldr	r2, [r7, #20]
 800ac26:	631a      	str	r2, [r3, #48]	; 0x30
 800ac28:	e005      	b.n	800ac36 <xTaskCreate+0x44>
=======
 800dfc2:	88fb      	ldrh	r3, [r7, #6]
 800dfc4:	009b      	lsls	r3, r3, #2
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7fe fba8 	bl	800c71c <pvPortMalloc>
 800dfcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d00e      	beq.n	800dff2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dfd4:	20bc      	movs	r0, #188	; 0xbc
 800dfd6:	f7fe fba1 	bl	800c71c <pvPortMalloc>
 800dfda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d003      	beq.n	800dfea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dfe2:	69fb      	ldr	r3, [r7, #28]
 800dfe4:	697a      	ldr	r2, [r7, #20]
 800dfe6:	631a      	str	r2, [r3, #48]	; 0x30
 800dfe8:	e005      	b.n	800dff6 <xTaskCreate+0x44>
>>>>>>> Stashed changes
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< Updated upstream
 800ac2a:	6978      	ldr	r0, [r7, #20]
 800ac2c:	f7fe fc60 	bl	80094f0 <vPortFree>
 800ac30:	e001      	b.n	800ac36 <xTaskCreate+0x44>
=======
 800dfea:	6978      	ldr	r0, [r7, #20]
 800dfec:	f7fe fc62 	bl	800c8b4 <vPortFree>
 800dff0:	e001      	b.n	800dff6 <xTaskCreate+0x44>
>>>>>>> Stashed changes
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< Updated upstream
 800ac32:	2300      	movs	r3, #0
 800ac34:	61fb      	str	r3, [r7, #28]
=======
 800dff2:	2300      	movs	r3, #0
 800dff4:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< Updated upstream
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d017      	beq.n	800ac6c <xTaskCreate+0x7a>
=======
 800dff6:	69fb      	ldr	r3, [r7, #28]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d017      	beq.n	800e02c <xTaskCreate+0x7a>
>>>>>>> Stashed changes
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< Updated upstream
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
=======
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	2200      	movs	r2, #0
 800e000:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
>>>>>>> Stashed changes
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< Updated upstream
 800ac44:	88fa      	ldrh	r2, [r7, #6]
 800ac46:	2300      	movs	r3, #0
 800ac48:	9303      	str	r3, [sp, #12]
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	9302      	str	r3, [sp, #8]
 800ac4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac50:	9301      	str	r3, [sp, #4]
 800ac52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	68b9      	ldr	r1, [r7, #8]
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f000 f80e 	bl	800ac7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac60:	69f8      	ldr	r0, [r7, #28]
 800ac62:	f000 f8b1 	bl	800adc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac66:	2301      	movs	r3, #1
 800ac68:	61bb      	str	r3, [r7, #24]
 800ac6a:	e002      	b.n	800ac72 <xTaskCreate+0x80>
=======
 800e004:	88fa      	ldrh	r2, [r7, #6]
 800e006:	2300      	movs	r3, #0
 800e008:	9303      	str	r3, [sp, #12]
 800e00a:	69fb      	ldr	r3, [r7, #28]
 800e00c:	9302      	str	r3, [sp, #8]
 800e00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e010:	9301      	str	r3, [sp, #4]
 800e012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e014:	9300      	str	r3, [sp, #0]
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	68b9      	ldr	r1, [r7, #8]
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f000 f80e 	bl	800e03c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e020:	69f8      	ldr	r0, [r7, #28]
 800e022:	f000 f8b1 	bl	800e188 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e026:	2301      	movs	r3, #1
 800e028:	61bb      	str	r3, [r7, #24]
 800e02a:	e002      	b.n	800e032 <xTaskCreate+0x80>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< Updated upstream
 800ac6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac72:	69bb      	ldr	r3, [r7, #24]
	}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3720      	adds	r7, #32
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <prvInitialiseNewTask>:
=======
 800e02c:	f04f 33ff 	mov.w	r3, #4294967295
 800e030:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e032:	69bb      	ldr	r3, [r7, #24]
	}
 800e034:	4618      	mov	r0, r3
 800e036:	3720      	adds	r7, #32
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <prvInitialiseNewTask>:
>>>>>>> Stashed changes
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< Updated upstream
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b088      	sub	sp, #32
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
 800ac88:	603b      	str	r3, [r7, #0]
=======
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b088      	sub	sp, #32
 800e040:	af00      	add	r7, sp, #0
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	60b9      	str	r1, [r7, #8]
 800e046:	607a      	str	r2, [r7, #4]
 800e048:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
<<<<<<< Updated upstream
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	461a      	mov	r2, r3
 800ac94:	21a5      	movs	r1, #165	; 0xa5
 800ac96:	f002 f915 	bl	800cec4 <memset>
=======
 800e04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	009b      	lsls	r3, r3, #2
 800e052:	461a      	mov	r2, r3
 800e054:	21a5      	movs	r1, #165	; 0xa5
 800e056:	f001 fc08 	bl	800f86a <memset>
>>>>>>> Stashed changes
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< Updated upstream
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac9e:	6879      	ldr	r1, [r7, #4]
 800aca0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800aca4:	440b      	add	r3, r1
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4413      	add	r3, r2
 800acaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	f023 0307 	bic.w	r3, r3, #7
 800acb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	f003 0307 	and.w	r3, r3, #7
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00a      	beq.n	800acd4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	617b      	str	r3, [r7, #20]
}
 800acd0:	bf00      	nop
 800acd2:	e7fe      	b.n	800acd2 <prvInitialiseNewTask+0x56>
=======
 800e05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e05e:	6879      	ldr	r1, [r7, #4]
 800e060:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e064:	440b      	add	r3, r1
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	4413      	add	r3, r2
 800e06a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e06c:	69bb      	ldr	r3, [r7, #24]
 800e06e:	f023 0307 	bic.w	r3, r3, #7
 800e072:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e074:	69bb      	ldr	r3, [r7, #24]
 800e076:	f003 0307 	and.w	r3, r3, #7
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d00a      	beq.n	800e094 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e082:	f383 8811 	msr	BASEPRI, r3
 800e086:	f3bf 8f6f 	isb	sy
 800e08a:	f3bf 8f4f 	dsb	sy
 800e08e:	617b      	str	r3, [r7, #20]
}
 800e090:	bf00      	nop
 800e092:	e7fe      	b.n	800e092 <prvInitialiseNewTask+0x56>
>>>>>>> Stashed changes
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< Updated upstream
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d01f      	beq.n	800ad1a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acda:	2300      	movs	r3, #0
 800acdc:	61fb      	str	r3, [r7, #28]
 800acde:	e012      	b.n	800ad06 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ace0:	68ba      	ldr	r2, [r7, #8]
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	4413      	add	r3, r2
 800ace6:	7819      	ldrb	r1, [r3, #0]
 800ace8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	4413      	add	r3, r2
 800acee:	3334      	adds	r3, #52	; 0x34
 800acf0:	460a      	mov	r2, r1
 800acf2:	701a      	strb	r2, [r3, #0]
=======
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d01f      	beq.n	800e0da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e09a:	2300      	movs	r3, #0
 800e09c:	61fb      	str	r3, [r7, #28]
 800e09e:	e012      	b.n	800e0c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e0a0:	68ba      	ldr	r2, [r7, #8]
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	7819      	ldrb	r1, [r3, #0]
 800e0a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0aa:	69fb      	ldr	r3, [r7, #28]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	3334      	adds	r3, #52	; 0x34
 800e0b0:	460a      	mov	r2, r1
 800e0b2:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< Updated upstream
 800acf4:	68ba      	ldr	r2, [r7, #8]
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	4413      	add	r3, r2
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d006      	beq.n	800ad0e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	3301      	adds	r3, #1
 800ad04:	61fb      	str	r3, [r7, #28]
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	2b0f      	cmp	r3, #15
 800ad0a:	d9e9      	bls.n	800ace0 <prvInitialiseNewTask+0x64>
 800ad0c:	e000      	b.n	800ad10 <prvInitialiseNewTask+0x94>
			{
				break;
 800ad0e:	bf00      	nop
=======
 800e0b4:	68ba      	ldr	r2, [r7, #8]
 800e0b6:	69fb      	ldr	r3, [r7, #28]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d006      	beq.n	800e0ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	61fb      	str	r3, [r7, #28]
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	2b0f      	cmp	r3, #15
 800e0ca:	d9e9      	bls.n	800e0a0 <prvInitialiseNewTask+0x64>
 800e0cc:	e000      	b.n	800e0d0 <prvInitialiseNewTask+0x94>
			{
				break;
 800e0ce:	bf00      	nop
>>>>>>> Stashed changes
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< Updated upstream
 800ad10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad18:	e003      	b.n	800ad22 <prvInitialiseNewTask+0xa6>
=======
 800e0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e0d8:	e003      	b.n	800e0e2 <prvInitialiseNewTask+0xa6>
>>>>>>> Stashed changes
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< Updated upstream
 800ad1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 800e0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0dc:	2200      	movs	r2, #0
 800e0de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> Stashed changes
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< Updated upstream
 800ad22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad24:	2b37      	cmp	r3, #55	; 0x37
 800ad26:	d901      	bls.n	800ad2c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad28:	2337      	movs	r3, #55	; 0x37
 800ad2a:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 800e0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e4:	2b37      	cmp	r3, #55	; 0x37
 800e0e6:	d901      	bls.n	800e0ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e0e8:	2337      	movs	r3, #55	; 0x37
 800e0ea:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< Updated upstream
 800ad2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ad38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	651a      	str	r2, [r3, #80]	; 0x50
=======
 800e0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> Stashed changes
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< Updated upstream
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad40:	3304      	adds	r3, #4
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fe fd12 	bl	800976c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4a:	3318      	adds	r3, #24
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7fe fd0d 	bl	800976c <vListInitialiseItem>
=======
 800e0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e100:	3304      	adds	r3, #4
 800e102:	4618      	mov	r0, r3
 800e104:	f7fe fd14 	bl	800cb30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10a:	3318      	adds	r3, #24
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7fe fd0f 	bl	800cb30 <vListInitialiseItem>
>>>>>>> Stashed changes

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< Updated upstream
 800ad52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad66:	625a      	str	r2, [r3, #36]	; 0x24
=======
 800e112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e116:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e120:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e126:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> Stashed changes
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< Updated upstream
 800ad68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
=======
 800e128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12a:	2200      	movs	r2, #0
 800e12c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e132:	2200      	movs	r2, #0
 800e134:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
>>>>>>> Stashed changes
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
<<<<<<< Updated upstream
 800ad78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7a:	3354      	adds	r3, #84	; 0x54
 800ad7c:	224c      	movs	r2, #76	; 0x4c
 800ad7e:	2100      	movs	r1, #0
 800ad80:	4618      	mov	r0, r3
 800ad82:	f002 f89f 	bl	800cec4 <memset>
 800ad86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad88:	4a0c      	ldr	r2, [pc, #48]	; (800adbc <prvInitialiseNewTask+0x140>)
 800ad8a:	659a      	str	r2, [r3, #88]	; 0x58
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	4a0c      	ldr	r2, [pc, #48]	; (800adc0 <prvInitialiseNewTask+0x144>)
 800ad90:	65da      	str	r2, [r3, #92]	; 0x5c
 800ad92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad94:	4a0b      	ldr	r2, [pc, #44]	; (800adc4 <prvInitialiseNewTask+0x148>)
 800ad96:	661a      	str	r2, [r3, #96]	; 0x60
=======
 800e138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13a:	3354      	adds	r3, #84	; 0x54
 800e13c:	2260      	movs	r2, #96	; 0x60
 800e13e:	2100      	movs	r1, #0
 800e140:	4618      	mov	r0, r3
 800e142:	f001 fb92 	bl	800f86a <memset>
 800e146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e148:	4a0c      	ldr	r2, [pc, #48]	; (800e17c <prvInitialiseNewTask+0x140>)
 800e14a:	659a      	str	r2, [r3, #88]	; 0x58
 800e14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14e:	4a0c      	ldr	r2, [pc, #48]	; (800e180 <prvInitialiseNewTask+0x144>)
 800e150:	65da      	str	r2, [r3, #92]	; 0x5c
 800e152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e154:	4a0b      	ldr	r2, [pc, #44]	; (800e184 <prvInitialiseNewTask+0x148>)
 800e156:	661a      	str	r2, [r3, #96]	; 0x60
>>>>>>> Stashed changes
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< Updated upstream
 800ad98:	683a      	ldr	r2, [r7, #0]
 800ad9a:	68f9      	ldr	r1, [r7, #12]
 800ad9c:	69b8      	ldr	r0, [r7, #24]
 800ad9e:	f7fe fd79 	bl	8009894 <pxPortInitialiseStack>
 800ada2:	4602      	mov	r2, r0
 800ada4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada6:	601a      	str	r2, [r3, #0]
=======
 800e158:	683a      	ldr	r2, [r7, #0]
 800e15a:	68f9      	ldr	r1, [r7, #12]
 800e15c:	69b8      	ldr	r0, [r7, #24]
 800e15e:	f7fe fd7b 	bl	800cc58 <pxPortInitialiseStack>
 800e162:	4602      	mov	r2, r0
 800e164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e166:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< Updated upstream
 800ada8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d002      	beq.n	800adb4 <prvInitialiseNewTask+0x138>
=======
 800e168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d002      	beq.n	800e174 <prvInitialiseNewTask+0x138>
>>>>>>> Stashed changes
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< Updated upstream
 800adae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adb2:	601a      	str	r2, [r3, #0]
=======
 800e16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e172:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 800adb4:	bf00      	nop
 800adb6:	3720      	adds	r7, #32
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	24004f20 	.word	0x24004f20
 800adc0:	24004f88 	.word	0x24004f88
 800adc4:	24004ff0 	.word	0x24004ff0

0800adc8 <prvAddNewTaskToReadyList>:
=======
 800e174:	bf00      	nop
 800e176:	3720      	adds	r7, #32
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}
 800e17c:	08013e64 	.word	0x08013e64
 800e180:	08013e84 	.word	0x08013e84
 800e184:	08013e44 	.word	0x08013e44

0800e188 <prvAddNewTaskToReadyList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< Updated upstream
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800add0:	f7fe fe90 	bl	8009af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800add4:	4b2d      	ldr	r3, [pc, #180]	; (800ae8c <prvAddNewTaskToReadyList+0xc4>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	3301      	adds	r3, #1
 800adda:	4a2c      	ldr	r2, [pc, #176]	; (800ae8c <prvAddNewTaskToReadyList+0xc4>)
 800addc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800adde:	4b2c      	ldr	r3, [pc, #176]	; (800ae90 <prvAddNewTaskToReadyList+0xc8>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d109      	bne.n	800adfa <prvAddNewTaskToReadyList+0x32>
=======
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e190:	f7fe fe90 	bl	800ceb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e194:	4b2d      	ldr	r3, [pc, #180]	; (800e24c <prvAddNewTaskToReadyList+0xc4>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	3301      	adds	r3, #1
 800e19a:	4a2c      	ldr	r2, [pc, #176]	; (800e24c <prvAddNewTaskToReadyList+0xc4>)
 800e19c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e19e:	4b2c      	ldr	r3, [pc, #176]	; (800e250 <prvAddNewTaskToReadyList+0xc8>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d109      	bne.n	800e1ba <prvAddNewTaskToReadyList+0x32>
>>>>>>> Stashed changes
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< Updated upstream
 800ade6:	4a2a      	ldr	r2, [pc, #168]	; (800ae90 <prvAddNewTaskToReadyList+0xc8>)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800adec:	4b27      	ldr	r3, [pc, #156]	; (800ae8c <prvAddNewTaskToReadyList+0xc4>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d110      	bne.n	800ae16 <prvAddNewTaskToReadyList+0x4e>
=======
 800e1a6:	4a2a      	ldr	r2, [pc, #168]	; (800e250 <prvAddNewTaskToReadyList+0xc8>)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e1ac:	4b27      	ldr	r3, [pc, #156]	; (800e24c <prvAddNewTaskToReadyList+0xc4>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d110      	bne.n	800e1d6 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> Stashed changes
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< Updated upstream
 800adf4:	f000 fc26 	bl	800b644 <prvInitialiseTaskLists>
 800adf8:	e00d      	b.n	800ae16 <prvAddNewTaskToReadyList+0x4e>
=======
 800e1b4:	f000 fc26 	bl	800ea04 <prvInitialiseTaskLists>
 800e1b8:	e00d      	b.n	800e1d6 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> Stashed changes
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< Updated upstream
 800adfa:	4b26      	ldr	r3, [pc, #152]	; (800ae94 <prvAddNewTaskToReadyList+0xcc>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d109      	bne.n	800ae16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae02:	4b23      	ldr	r3, [pc, #140]	; (800ae90 <prvAddNewTaskToReadyList+0xc8>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d802      	bhi.n	800ae16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae10:	4a1f      	ldr	r2, [pc, #124]	; (800ae90 <prvAddNewTaskToReadyList+0xc8>)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6013      	str	r3, [r2, #0]
=======
 800e1ba:	4b26      	ldr	r3, [pc, #152]	; (800e254 <prvAddNewTaskToReadyList+0xcc>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d109      	bne.n	800e1d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e1c2:	4b23      	ldr	r3, [pc, #140]	; (800e250 <prvAddNewTaskToReadyList+0xc8>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d802      	bhi.n	800e1d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e1d0:	4a1f      	ldr	r2, [pc, #124]	; (800e250 <prvAddNewTaskToReadyList+0xc8>)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< Updated upstream
 800ae16:	4b20      	ldr	r3, [pc, #128]	; (800ae98 <prvAddNewTaskToReadyList+0xd0>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	4a1e      	ldr	r2, [pc, #120]	; (800ae98 <prvAddNewTaskToReadyList+0xd0>)
 800ae1e:	6013      	str	r3, [r2, #0]
=======
 800e1d6:	4b20      	ldr	r3, [pc, #128]	; (800e258 <prvAddNewTaskToReadyList+0xd0>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	3301      	adds	r3, #1
 800e1dc:	4a1e      	ldr	r2, [pc, #120]	; (800e258 <prvAddNewTaskToReadyList+0xd0>)
 800e1de:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
<<<<<<< Updated upstream
 800ae20:	4b1d      	ldr	r3, [pc, #116]	; (800ae98 <prvAddNewTaskToReadyList+0xd0>)
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800e1e0:	4b1d      	ldr	r3, [pc, #116]	; (800e258 <prvAddNewTaskToReadyList+0xd0>)
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< Updated upstream
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae2c:	4b1b      	ldr	r3, [pc, #108]	; (800ae9c <prvAddNewTaskToReadyList+0xd4>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d903      	bls.n	800ae3c <prvAddNewTaskToReadyList+0x74>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae38:	4a18      	ldr	r2, [pc, #96]	; (800ae9c <prvAddNewTaskToReadyList+0xd4>)
 800ae3a:	6013      	str	r3, [r2, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae40:	4613      	mov	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4413      	add	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4a15      	ldr	r2, [pc, #84]	; (800aea0 <prvAddNewTaskToReadyList+0xd8>)
 800ae4a:	441a      	add	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	3304      	adds	r3, #4
 800ae50:	4619      	mov	r1, r3
 800ae52:	4610      	mov	r0, r2
 800ae54:	f7fe fc97 	bl	8009786 <vListInsertEnd>
=======
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ec:	4b1b      	ldr	r3, [pc, #108]	; (800e25c <prvAddNewTaskToReadyList+0xd4>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d903      	bls.n	800e1fc <prvAddNewTaskToReadyList+0x74>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f8:	4a18      	ldr	r2, [pc, #96]	; (800e25c <prvAddNewTaskToReadyList+0xd4>)
 800e1fa:	6013      	str	r3, [r2, #0]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e200:	4613      	mov	r3, r2
 800e202:	009b      	lsls	r3, r3, #2
 800e204:	4413      	add	r3, r2
 800e206:	009b      	lsls	r3, r3, #2
 800e208:	4a15      	ldr	r2, [pc, #84]	; (800e260 <prvAddNewTaskToReadyList+0xd8>)
 800e20a:	441a      	add	r2, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	3304      	adds	r3, #4
 800e210:	4619      	mov	r1, r3
 800e212:	4610      	mov	r0, r2
 800e214:	f7fe fc99 	bl	800cb4a <vListInsertEnd>
>>>>>>> Stashed changes

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800ae58:	f7fe fe7c 	bl	8009b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae5c:	4b0d      	ldr	r3, [pc, #52]	; (800ae94 <prvAddNewTaskToReadyList+0xcc>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00e      	beq.n	800ae82 <prvAddNewTaskToReadyList+0xba>
=======
 800e218:	f7fe fe7c 	bl	800cf14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e21c:	4b0d      	ldr	r3, [pc, #52]	; (800e254 <prvAddNewTaskToReadyList+0xcc>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d00e      	beq.n	800e242 <prvAddNewTaskToReadyList+0xba>
>>>>>>> Stashed changes
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< Updated upstream
 800ae64:	4b0a      	ldr	r3, [pc, #40]	; (800ae90 <prvAddNewTaskToReadyList+0xc8>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d207      	bcs.n	800ae82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae72:	4b0c      	ldr	r3, [pc, #48]	; (800aea4 <prvAddNewTaskToReadyList+0xdc>)
 800ae74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae78:	601a      	str	r2, [r3, #0]
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	f3bf 8f6f 	isb	sy
=======
 800e224:	4b0a      	ldr	r3, [pc, #40]	; (800e250 <prvAddNewTaskToReadyList+0xc8>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e22e:	429a      	cmp	r2, r3
 800e230:	d207      	bcs.n	800e242 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e232:	4b0c      	ldr	r3, [pc, #48]	; (800e264 <prvAddNewTaskToReadyList+0xdc>)
 800e234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e238:	601a      	str	r2, [r3, #0]
 800e23a:	f3bf 8f4f 	dsb	sy
 800e23e:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 800ae82:	bf00      	nop
 800ae84:	3708      	adds	r7, #8
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	24004dc8 	.word	0x24004dc8
 800ae90:	240048f4 	.word	0x240048f4
 800ae94:	24004dd4 	.word	0x24004dd4
 800ae98:	24004de4 	.word	0x24004de4
 800ae9c:	24004dd0 	.word	0x24004dd0
 800aea0:	240048f8 	.word	0x240048f8
 800aea4:	e000ed04 	.word	0xe000ed04

0800aea8 <vTaskDelay>:
=======
 800e242:	bf00      	nop
 800e244:	3708      	adds	r7, #8
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	240052a4 	.word	0x240052a4
 800e250:	24004dd0 	.word	0x24004dd0
 800e254:	240052b0 	.word	0x240052b0
 800e258:	240052c0 	.word	0x240052c0
 800e25c:	240052ac 	.word	0x240052ac
 800e260:	24004dd4 	.word	0x24004dd4
 800e264:	e000ed04 	.word	0xe000ed04

0800e268 <vTaskDelay>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< Updated upstream
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d017      	beq.n	800aeea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aeba:	4b13      	ldr	r3, [pc, #76]	; (800af08 <vTaskDelay+0x60>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d00a      	beq.n	800aed8 <vTaskDelay+0x30>
	__asm volatile
 800aec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec6:	f383 8811 	msr	BASEPRI, r3
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	f3bf 8f4f 	dsb	sy
 800aed2:	60bb      	str	r3, [r7, #8]
}
 800aed4:	bf00      	nop
 800aed6:	e7fe      	b.n	800aed6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aed8:	f000 f88a 	bl	800aff0 <vTaskSuspendAll>
=======
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e270:	2300      	movs	r3, #0
 800e272:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d017      	beq.n	800e2aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e27a:	4b13      	ldr	r3, [pc, #76]	; (800e2c8 <vTaskDelay+0x60>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00a      	beq.n	800e298 <vTaskDelay+0x30>
	__asm volatile
 800e282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e286:	f383 8811 	msr	BASEPRI, r3
 800e28a:	f3bf 8f6f 	isb	sy
 800e28e:	f3bf 8f4f 	dsb	sy
 800e292:	60bb      	str	r3, [r7, #8]
}
 800e294:	bf00      	nop
 800e296:	e7fe      	b.n	800e296 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e298:	f000 f88a 	bl	800e3b0 <vTaskSuspendAll>
>>>>>>> Stashed changes
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< Updated upstream
 800aedc:	2100      	movs	r1, #0
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 fe0c 	bl	800bafc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aee4:	f000 f892 	bl	800b00c <xTaskResumeAll>
 800aee8:	60f8      	str	r0, [r7, #12]
=======
 800e29c:	2100      	movs	r1, #0
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 fe0c 	bl	800eebc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e2a4:	f000 f892 	bl	800e3cc <xTaskResumeAll>
 800e2a8:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< Updated upstream
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d107      	bne.n	800af00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aef0:	4b06      	ldr	r3, [pc, #24]	; (800af0c <vTaskDelay+0x64>)
 800aef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aef6:	601a      	str	r2, [r3, #0]
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	f3bf 8f6f 	isb	sy
=======
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d107      	bne.n	800e2c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e2b0:	4b06      	ldr	r3, [pc, #24]	; (800e2cc <vTaskDelay+0x64>)
 800e2b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2b6:	601a      	str	r2, [r3, #0]
 800e2b8:	f3bf 8f4f 	dsb	sy
 800e2bc:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< Updated upstream
 800af00:	bf00      	nop
 800af02:	3710      	adds	r7, #16
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	24004df0 	.word	0x24004df0
 800af0c:	e000ed04 	.word	0xe000ed04

0800af10 <vTaskStartScheduler>:
=======
 800e2c0:	bf00      	nop
 800e2c2:	3710      	adds	r7, #16
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}
 800e2c8:	240052cc 	.word	0x240052cc
 800e2cc:	e000ed04 	.word	0xe000ed04

0800e2d0 <vTaskStartScheduler>:
>>>>>>> Stashed changes

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< Updated upstream
 800af10:	b580      	push	{r7, lr}
 800af12:	b08a      	sub	sp, #40	; 0x28
 800af14:	af04      	add	r7, sp, #16
=======
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b08a      	sub	sp, #40	; 0x28
 800e2d4:	af04      	add	r7, sp, #16
>>>>>>> Stashed changes
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< Updated upstream
 800af16:	2300      	movs	r3, #0
 800af18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af1a:	2300      	movs	r3, #0
 800af1c:	607b      	str	r3, [r7, #4]
=======
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< Updated upstream
 800af1e:	463a      	mov	r2, r7
 800af20:	1d39      	adds	r1, r7, #4
 800af22:	f107 0308 	add.w	r3, r7, #8
 800af26:	4618      	mov	r0, r3
 800af28:	f7fe f9e2 	bl	80092f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af2c:	6839      	ldr	r1, [r7, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	9202      	str	r2, [sp, #8]
 800af34:	9301      	str	r3, [sp, #4]
 800af36:	2300      	movs	r3, #0
 800af38:	9300      	str	r3, [sp, #0]
 800af3a:	2300      	movs	r3, #0
 800af3c:	460a      	mov	r2, r1
 800af3e:	4924      	ldr	r1, [pc, #144]	; (800afd0 <vTaskStartScheduler+0xc0>)
 800af40:	4824      	ldr	r0, [pc, #144]	; (800afd4 <vTaskStartScheduler+0xc4>)
 800af42:	f7ff fdf9 	bl	800ab38 <xTaskCreateStatic>
 800af46:	4603      	mov	r3, r0
 800af48:	4a23      	ldr	r2, [pc, #140]	; (800afd8 <vTaskStartScheduler+0xc8>)
 800af4a:	6013      	str	r3, [r2, #0]
=======
 800e2de:	463a      	mov	r2, r7
 800e2e0:	1d39      	adds	r1, r7, #4
 800e2e2:	f107 0308 	add.w	r3, r7, #8
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7fe f9e4 	bl	800c6b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e2ec:	6839      	ldr	r1, [r7, #0]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	68ba      	ldr	r2, [r7, #8]
 800e2f2:	9202      	str	r2, [sp, #8]
 800e2f4:	9301      	str	r3, [sp, #4]
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	9300      	str	r3, [sp, #0]
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	460a      	mov	r2, r1
 800e2fe:	4924      	ldr	r1, [pc, #144]	; (800e390 <vTaskStartScheduler+0xc0>)
 800e300:	4824      	ldr	r0, [pc, #144]	; (800e394 <vTaskStartScheduler+0xc4>)
 800e302:	f7ff fdf9 	bl	800def8 <xTaskCreateStatic>
 800e306:	4603      	mov	r3, r0
 800e308:	4a23      	ldr	r2, [pc, #140]	; (800e398 <vTaskStartScheduler+0xc8>)
 800e30a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< Updated upstream
 800af4c:	4b22      	ldr	r3, [pc, #136]	; (800afd8 <vTaskStartScheduler+0xc8>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d002      	beq.n	800af5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af54:	2301      	movs	r3, #1
 800af56:	617b      	str	r3, [r7, #20]
 800af58:	e001      	b.n	800af5e <vTaskStartScheduler+0x4e>
=======
 800e30c:	4b22      	ldr	r3, [pc, #136]	; (800e398 <vTaskStartScheduler+0xc8>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d002      	beq.n	800e31a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e314:	2301      	movs	r3, #1
 800e316:	617b      	str	r3, [r7, #20]
 800e318:	e001      	b.n	800e31e <vTaskStartScheduler+0x4e>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< Updated upstream
 800af5a:	2300      	movs	r3, #0
 800af5c:	617b      	str	r3, [r7, #20]
=======
 800e31a:	2300      	movs	r3, #0
 800e31c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
<<<<<<< Updated upstream
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d102      	bne.n	800af6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800af64:	f000 fe1e 	bl	800bba4 <xTimerCreateTimerTask>
 800af68:	6178      	str	r0, [r7, #20]
=======
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	2b01      	cmp	r3, #1
 800e322:	d102      	bne.n	800e32a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e324:	f000 fe1e 	bl	800ef64 <xTimerCreateTimerTask>
 800e328:	6178      	str	r0, [r7, #20]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< Updated upstream
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d11b      	bne.n	800afa8 <vTaskStartScheduler+0x98>
	__asm volatile
 800af70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	613b      	str	r3, [r7, #16]
}
 800af82:	bf00      	nop
=======
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d11b      	bne.n	800e368 <vTaskStartScheduler+0x98>
	__asm volatile
 800e330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e334:	f383 8811 	msr	BASEPRI, r3
 800e338:	f3bf 8f6f 	isb	sy
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	613b      	str	r3, [r7, #16]
}
 800e342:	bf00      	nop
>>>>>>> Stashed changes
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
<<<<<<< Updated upstream
 800af84:	4b15      	ldr	r3, [pc, #84]	; (800afdc <vTaskStartScheduler+0xcc>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3354      	adds	r3, #84	; 0x54
 800af8a:	4a15      	ldr	r2, [pc, #84]	; (800afe0 <vTaskStartScheduler+0xd0>)
 800af8c:	6013      	str	r3, [r2, #0]
=======
 800e344:	4b15      	ldr	r3, [pc, #84]	; (800e39c <vTaskStartScheduler+0xcc>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	3354      	adds	r3, #84	; 0x54
 800e34a:	4a15      	ldr	r2, [pc, #84]	; (800e3a0 <vTaskStartScheduler+0xd0>)
 800e34c:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< Updated upstream
 800af8e:	4b15      	ldr	r3, [pc, #84]	; (800afe4 <vTaskStartScheduler+0xd4>)
 800af90:	f04f 32ff 	mov.w	r2, #4294967295
 800af94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af96:	4b14      	ldr	r3, [pc, #80]	; (800afe8 <vTaskStartScheduler+0xd8>)
 800af98:	2201      	movs	r2, #1
 800af9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af9c:	4b13      	ldr	r3, [pc, #76]	; (800afec <vTaskStartScheduler+0xdc>)
 800af9e:	2200      	movs	r2, #0
 800afa0:	601a      	str	r2, [r3, #0]
=======
 800e34e:	4b15      	ldr	r3, [pc, #84]	; (800e3a4 <vTaskStartScheduler+0xd4>)
 800e350:	f04f 32ff 	mov.w	r2, #4294967295
 800e354:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e356:	4b14      	ldr	r3, [pc, #80]	; (800e3a8 <vTaskStartScheduler+0xd8>)
 800e358:	2201      	movs	r2, #1
 800e35a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e35c:	4b13      	ldr	r3, [pc, #76]	; (800e3ac <vTaskStartScheduler+0xdc>)
 800e35e:	2200      	movs	r2, #0
 800e360:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< Updated upstream
 800afa2:	f7fe fd05 	bl	80099b0 <xPortStartScheduler>
=======
 800e362:	f7fe fd05 	bl	800cd70 <xPortStartScheduler>
>>>>>>> Stashed changes
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< Updated upstream
 800afa6:	e00e      	b.n	800afc6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afae:	d10a      	bne.n	800afc6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800afb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	60fb      	str	r3, [r7, #12]
}
 800afc2:	bf00      	nop
 800afc4:	e7fe      	b.n	800afc4 <vTaskStartScheduler+0xb4>
}
 800afc6:	bf00      	nop
 800afc8:	3718      	adds	r7, #24
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	0800fcfc 	.word	0x0800fcfc
 800afd4:	0800b615 	.word	0x0800b615
 800afd8:	24004dec 	.word	0x24004dec
 800afdc:	240048f4 	.word	0x240048f4
 800afe0:	2400006c 	.word	0x2400006c
 800afe4:	24004de8 	.word	0x24004de8
 800afe8:	24004dd4 	.word	0x24004dd4
 800afec:	24004dcc 	.word	0x24004dcc

0800aff0 <vTaskSuspendAll>:
=======
 800e366:	e00e      	b.n	800e386 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e36e:	d10a      	bne.n	800e386 <vTaskStartScheduler+0xb6>
	__asm volatile
 800e370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e374:	f383 8811 	msr	BASEPRI, r3
 800e378:	f3bf 8f6f 	isb	sy
 800e37c:	f3bf 8f4f 	dsb	sy
 800e380:	60fb      	str	r3, [r7, #12]
}
 800e382:	bf00      	nop
 800e384:	e7fe      	b.n	800e384 <vTaskStartScheduler+0xb4>
}
 800e386:	bf00      	nop
 800e388:	3718      	adds	r7, #24
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	08013c70 	.word	0x08013c70
 800e394:	0800e9d5 	.word	0x0800e9d5
 800e398:	240052c8 	.word	0x240052c8
 800e39c:	24004dd0 	.word	0x24004dd0
 800e3a0:	2400001c 	.word	0x2400001c
 800e3a4:	240052c4 	.word	0x240052c4
 800e3a8:	240052b0 	.word	0x240052b0
 800e3ac:	240052a8 	.word	0x240052a8

0800e3b0 <vTaskSuspendAll>:
>>>>>>> Stashed changes
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< Updated upstream
 800aff0:	b480      	push	{r7}
 800aff2:	af00      	add	r7, sp, #0
=======
 800e3b0:	b480      	push	{r7}
 800e3b2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
<<<<<<< Updated upstream
 800aff4:	4b04      	ldr	r3, [pc, #16]	; (800b008 <vTaskSuspendAll+0x18>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	3301      	adds	r3, #1
 800affa:	4a03      	ldr	r2, [pc, #12]	; (800b008 <vTaskSuspendAll+0x18>)
 800affc:	6013      	str	r3, [r2, #0]
=======
 800e3b4:	4b04      	ldr	r3, [pc, #16]	; (800e3c8 <vTaskSuspendAll+0x18>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	4a03      	ldr	r2, [pc, #12]	; (800e3c8 <vTaskSuspendAll+0x18>)
 800e3bc:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
<<<<<<< Updated upstream
 800affe:	bf00      	nop
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr
 800b008:	24004df0 	.word	0x24004df0

0800b00c <xTaskResumeAll>:
=======
 800e3be:	bf00      	nop
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr
 800e3c8:	240052cc 	.word	0x240052cc

0800e3cc <xTaskResumeAll>:
>>>>>>> Stashed changes

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< Updated upstream
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b012:	2300      	movs	r3, #0
 800b014:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b016:	2300      	movs	r3, #0
 800b018:	60bb      	str	r3, [r7, #8]
=======
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b084      	sub	sp, #16
 800e3d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< Updated upstream
 800b01a:	4b42      	ldr	r3, [pc, #264]	; (800b124 <xTaskResumeAll+0x118>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10a      	bne.n	800b038 <xTaskResumeAll+0x2c>
	__asm volatile
 800b022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b026:	f383 8811 	msr	BASEPRI, r3
 800b02a:	f3bf 8f6f 	isb	sy
 800b02e:	f3bf 8f4f 	dsb	sy
 800b032:	603b      	str	r3, [r7, #0]
}
 800b034:	bf00      	nop
 800b036:	e7fe      	b.n	800b036 <xTaskResumeAll+0x2a>
=======
 800e3da:	4b42      	ldr	r3, [pc, #264]	; (800e4e4 <xTaskResumeAll+0x118>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d10a      	bne.n	800e3f8 <xTaskResumeAll+0x2c>
	__asm volatile
 800e3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e6:	f383 8811 	msr	BASEPRI, r3
 800e3ea:	f3bf 8f6f 	isb	sy
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	603b      	str	r3, [r7, #0]
}
 800e3f4:	bf00      	nop
 800e3f6:	e7fe      	b.n	800e3f6 <xTaskResumeAll+0x2a>
>>>>>>> Stashed changes
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800b038:	f7fe fd5c 	bl	8009af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b03c:	4b39      	ldr	r3, [pc, #228]	; (800b124 <xTaskResumeAll+0x118>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	3b01      	subs	r3, #1
 800b042:	4a38      	ldr	r2, [pc, #224]	; (800b124 <xTaskResumeAll+0x118>)
 800b044:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b046:	4b37      	ldr	r3, [pc, #220]	; (800b124 <xTaskResumeAll+0x118>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d162      	bne.n	800b114 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b04e:	4b36      	ldr	r3, [pc, #216]	; (800b128 <xTaskResumeAll+0x11c>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d05e      	beq.n	800b114 <xTaskResumeAll+0x108>
=======
 800e3f8:	f7fe fd5c 	bl	800ceb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e3fc:	4b39      	ldr	r3, [pc, #228]	; (800e4e4 <xTaskResumeAll+0x118>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	3b01      	subs	r3, #1
 800e402:	4a38      	ldr	r2, [pc, #224]	; (800e4e4 <xTaskResumeAll+0x118>)
 800e404:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e406:	4b37      	ldr	r3, [pc, #220]	; (800e4e4 <xTaskResumeAll+0x118>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d162      	bne.n	800e4d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e40e:	4b36      	ldr	r3, [pc, #216]	; (800e4e8 <xTaskResumeAll+0x11c>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d05e      	beq.n	800e4d4 <xTaskResumeAll+0x108>
>>>>>>> Stashed changes
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< Updated upstream
 800b056:	e02f      	b.n	800b0b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b058:	4b34      	ldr	r3, [pc, #208]	; (800b12c <xTaskResumeAll+0x120>)
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	3318      	adds	r3, #24
 800b064:	4618      	mov	r0, r3
 800b066:	f7fe fbeb 	bl	8009840 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	3304      	adds	r3, #4
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fe fbe6 	bl	8009840 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b078:	4b2d      	ldr	r3, [pc, #180]	; (800b130 <xTaskResumeAll+0x124>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d903      	bls.n	800b088 <xTaskResumeAll+0x7c>
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b084:	4a2a      	ldr	r2, [pc, #168]	; (800b130 <xTaskResumeAll+0x124>)
 800b086:	6013      	str	r3, [r2, #0]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b08c:	4613      	mov	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4a27      	ldr	r2, [pc, #156]	; (800b134 <xTaskResumeAll+0x128>)
 800b096:	441a      	add	r2, r3
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3304      	adds	r3, #4
 800b09c:	4619      	mov	r1, r3
 800b09e:	4610      	mov	r0, r2
 800b0a0:	f7fe fb71 	bl	8009786 <vListInsertEnd>
=======
 800e416:	e02f      	b.n	800e478 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e418:	4b34      	ldr	r3, [pc, #208]	; (800e4ec <xTaskResumeAll+0x120>)
 800e41a:	68db      	ldr	r3, [r3, #12]
 800e41c:	68db      	ldr	r3, [r3, #12]
 800e41e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	3318      	adds	r3, #24
 800e424:	4618      	mov	r0, r3
 800e426:	f7fe fbed 	bl	800cc04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	3304      	adds	r3, #4
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fe fbe8 	bl	800cc04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e438:	4b2d      	ldr	r3, [pc, #180]	; (800e4f0 <xTaskResumeAll+0x124>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d903      	bls.n	800e448 <xTaskResumeAll+0x7c>
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e444:	4a2a      	ldr	r2, [pc, #168]	; (800e4f0 <xTaskResumeAll+0x124>)
 800e446:	6013      	str	r3, [r2, #0]
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e44c:	4613      	mov	r3, r2
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	4413      	add	r3, r2
 800e452:	009b      	lsls	r3, r3, #2
 800e454:	4a27      	ldr	r2, [pc, #156]	; (800e4f4 <xTaskResumeAll+0x128>)
 800e456:	441a      	add	r2, r3
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	3304      	adds	r3, #4
 800e45c:	4619      	mov	r1, r3
 800e45e:	4610      	mov	r0, r2
 800e460:	f7fe fb73 	bl	800cb4a <vListInsertEnd>
>>>>>>> Stashed changes

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a8:	4b23      	ldr	r3, [pc, #140]	; (800b138 <xTaskResumeAll+0x12c>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d302      	bcc.n	800b0b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b0b2:	4b22      	ldr	r3, [pc, #136]	; (800b13c <xTaskResumeAll+0x130>)
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0b8:	4b1c      	ldr	r3, [pc, #112]	; (800b12c <xTaskResumeAll+0x120>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1cb      	bne.n	800b058 <xTaskResumeAll+0x4c>
=======
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e468:	4b23      	ldr	r3, [pc, #140]	; (800e4f8 <xTaskResumeAll+0x12c>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e46e:	429a      	cmp	r2, r3
 800e470:	d302      	bcc.n	800e478 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e472:	4b22      	ldr	r3, [pc, #136]	; (800e4fc <xTaskResumeAll+0x130>)
 800e474:	2201      	movs	r2, #1
 800e476:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e478:	4b1c      	ldr	r3, [pc, #112]	; (800e4ec <xTaskResumeAll+0x120>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d1cb      	bne.n	800e418 <xTaskResumeAll+0x4c>
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< Updated upstream
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d001      	beq.n	800b0ca <xTaskResumeAll+0xbe>
=======
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d001      	beq.n	800e48a <xTaskResumeAll+0xbe>
>>>>>>> Stashed changes
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< Updated upstream
 800b0c6:	f000 fb5f 	bl	800b788 <prvResetNextTaskUnblockTime>
=======
 800e486:	f000 fb5f 	bl	800eb48 <prvResetNextTaskUnblockTime>
>>>>>>> Stashed changes
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
<<<<<<< Updated upstream
 800b0ca:	4b1d      	ldr	r3, [pc, #116]	; (800b140 <xTaskResumeAll+0x134>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d010      	beq.n	800b0f8 <xTaskResumeAll+0xec>
=======
 800e48a:	4b1d      	ldr	r3, [pc, #116]	; (800e500 <xTaskResumeAll+0x134>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d010      	beq.n	800e4b8 <xTaskResumeAll+0xec>
>>>>>>> Stashed changes
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< Updated upstream
 800b0d6:	f000 f847 	bl	800b168 <xTaskIncrementTick>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d002      	beq.n	800b0e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b0e0:	4b16      	ldr	r3, [pc, #88]	; (800b13c <xTaskResumeAll+0x130>)
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	601a      	str	r2, [r3, #0]
=======
 800e496:	f000 f847 	bl	800e528 <xTaskIncrementTick>
 800e49a:	4603      	mov	r3, r0
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d002      	beq.n	800e4a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e4a0:	4b16      	ldr	r3, [pc, #88]	; (800e4fc <xTaskResumeAll+0x130>)
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
<<<<<<< Updated upstream
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1f1      	bne.n	800b0d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b0f2:	4b13      	ldr	r3, [pc, #76]	; (800b140 <xTaskResumeAll+0x134>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	601a      	str	r2, [r3, #0]
=======
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	3b01      	subs	r3, #1
 800e4aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d1f1      	bne.n	800e496 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e4b2:	4b13      	ldr	r3, [pc, #76]	; (800e500 <xTaskResumeAll+0x134>)
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< Updated upstream
 800b0f8:	4b10      	ldr	r3, [pc, #64]	; (800b13c <xTaskResumeAll+0x130>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d009      	beq.n	800b114 <xTaskResumeAll+0x108>
=======
 800e4b8:	4b10      	ldr	r3, [pc, #64]	; (800e4fc <xTaskResumeAll+0x130>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d009      	beq.n	800e4d4 <xTaskResumeAll+0x108>
>>>>>>> Stashed changes
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< Updated upstream
 800b100:	2301      	movs	r3, #1
 800b102:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b104:	4b0f      	ldr	r3, [pc, #60]	; (800b144 <xTaskResumeAll+0x138>)
 800b106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b10a:	601a      	str	r2, [r3, #0]
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	f3bf 8f6f 	isb	sy
=======
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e4c4:	4b0f      	ldr	r3, [pc, #60]	; (800e504 <xTaskResumeAll+0x138>)
 800e4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4ca:	601a      	str	r2, [r3, #0]
 800e4cc:	f3bf 8f4f 	dsb	sy
 800e4d0:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800b114:	f7fe fd1e 	bl	8009b54 <vPortExitCritical>

	return xAlreadyYielded;
 800b118:	68bb      	ldr	r3, [r7, #8]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	24004df0 	.word	0x24004df0
 800b128:	24004dc8 	.word	0x24004dc8
 800b12c:	24004d88 	.word	0x24004d88
 800b130:	24004dd0 	.word	0x24004dd0
 800b134:	240048f8 	.word	0x240048f8
 800b138:	240048f4 	.word	0x240048f4
 800b13c:	24004ddc 	.word	0x24004ddc
 800b140:	24004dd8 	.word	0x24004dd8
 800b144:	e000ed04 	.word	0xe000ed04

0800b148 <xTaskGetTickCount>:
=======
 800e4d4:	f7fe fd1e 	bl	800cf14 <vPortExitCritical>

	return xAlreadyYielded;
 800e4d8:	68bb      	ldr	r3, [r7, #8]
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3710      	adds	r7, #16
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	240052cc 	.word	0x240052cc
 800e4e8:	240052a4 	.word	0x240052a4
 800e4ec:	24005264 	.word	0x24005264
 800e4f0:	240052ac 	.word	0x240052ac
 800e4f4:	24004dd4 	.word	0x24004dd4
 800e4f8:	24004dd0 	.word	0x24004dd0
 800e4fc:	240052b8 	.word	0x240052b8
 800e500:	240052b4 	.word	0x240052b4
 800e504:	e000ed04 	.word	0xe000ed04

0800e508 <xTaskGetTickCount>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
<<<<<<< Updated upstream
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
=======
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
<<<<<<< Updated upstream
 800b14e:	4b05      	ldr	r3, [pc, #20]	; (800b164 <xTaskGetTickCount+0x1c>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	607b      	str	r3, [r7, #4]
=======
 800e50e:	4b05      	ldr	r3, [pc, #20]	; (800e524 <xTaskGetTickCount+0x1c>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
<<<<<<< Updated upstream
 800b154:	687b      	ldr	r3, [r7, #4]
}
 800b156:	4618      	mov	r0, r3
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	24004dcc 	.word	0x24004dcc

0800b168 <xTaskIncrementTick>:
=======
 800e514:	687b      	ldr	r3, [r7, #4]
}
 800e516:	4618      	mov	r0, r3
 800e518:	370c      	adds	r7, #12
 800e51a:	46bd      	mov	sp, r7
 800e51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop
 800e524:	240052a8 	.word	0x240052a8

0800e528 <xTaskIncrementTick>:
>>>>>>> Stashed changes

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< Updated upstream
 800b168:	b580      	push	{r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b16e:	2300      	movs	r3, #0
 800b170:	617b      	str	r3, [r7, #20]
=======
 800e528:	b580      	push	{r7, lr}
 800e52a:	b086      	sub	sp, #24
 800e52c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e52e:	2300      	movs	r3, #0
 800e530:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< Updated upstream
 800b172:	4b4f      	ldr	r3, [pc, #316]	; (800b2b0 <xTaskIncrementTick+0x148>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	f040 808f 	bne.w	800b29a <xTaskIncrementTick+0x132>
=======
 800e532:	4b4f      	ldr	r3, [pc, #316]	; (800e670 <xTaskIncrementTick+0x148>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	2b00      	cmp	r3, #0
 800e538:	f040 808f 	bne.w	800e65a <xTaskIncrementTick+0x132>
>>>>>>> Stashed changes
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< Updated upstream
 800b17c:	4b4d      	ldr	r3, [pc, #308]	; (800b2b4 <xTaskIncrementTick+0x14c>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	3301      	adds	r3, #1
 800b182:	613b      	str	r3, [r7, #16]
=======
 800e53c:	4b4d      	ldr	r3, [pc, #308]	; (800e674 <xTaskIncrementTick+0x14c>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	3301      	adds	r3, #1
 800e542:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< Updated upstream
 800b184:	4a4b      	ldr	r2, [pc, #300]	; (800b2b4 <xTaskIncrementTick+0x14c>)
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d120      	bne.n	800b1d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b190:	4b49      	ldr	r3, [pc, #292]	; (800b2b8 <xTaskIncrementTick+0x150>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00a      	beq.n	800b1b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800b19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19e:	f383 8811 	msr	BASEPRI, r3
 800b1a2:	f3bf 8f6f 	isb	sy
 800b1a6:	f3bf 8f4f 	dsb	sy
 800b1aa:	603b      	str	r3, [r7, #0]
}
 800b1ac:	bf00      	nop
 800b1ae:	e7fe      	b.n	800b1ae <xTaskIncrementTick+0x46>
 800b1b0:	4b41      	ldr	r3, [pc, #260]	; (800b2b8 <xTaskIncrementTick+0x150>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	60fb      	str	r3, [r7, #12]
 800b1b6:	4b41      	ldr	r3, [pc, #260]	; (800b2bc <xTaskIncrementTick+0x154>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a3f      	ldr	r2, [pc, #252]	; (800b2b8 <xTaskIncrementTick+0x150>)
 800b1bc:	6013      	str	r3, [r2, #0]
 800b1be:	4a3f      	ldr	r2, [pc, #252]	; (800b2bc <xTaskIncrementTick+0x154>)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6013      	str	r3, [r2, #0]
 800b1c4:	4b3e      	ldr	r3, [pc, #248]	; (800b2c0 <xTaskIncrementTick+0x158>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	4a3d      	ldr	r2, [pc, #244]	; (800b2c0 <xTaskIncrementTick+0x158>)
 800b1cc:	6013      	str	r3, [r2, #0]
 800b1ce:	f000 fadb 	bl	800b788 <prvResetNextTaskUnblockTime>
=======
 800e544:	4a4b      	ldr	r2, [pc, #300]	; (800e674 <xTaskIncrementTick+0x14c>)
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d120      	bne.n	800e592 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e550:	4b49      	ldr	r3, [pc, #292]	; (800e678 <xTaskIncrementTick+0x150>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d00a      	beq.n	800e570 <xTaskIncrementTick+0x48>
	__asm volatile
 800e55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55e:	f383 8811 	msr	BASEPRI, r3
 800e562:	f3bf 8f6f 	isb	sy
 800e566:	f3bf 8f4f 	dsb	sy
 800e56a:	603b      	str	r3, [r7, #0]
}
 800e56c:	bf00      	nop
 800e56e:	e7fe      	b.n	800e56e <xTaskIncrementTick+0x46>
 800e570:	4b41      	ldr	r3, [pc, #260]	; (800e678 <xTaskIncrementTick+0x150>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	60fb      	str	r3, [r7, #12]
 800e576:	4b41      	ldr	r3, [pc, #260]	; (800e67c <xTaskIncrementTick+0x154>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	4a3f      	ldr	r2, [pc, #252]	; (800e678 <xTaskIncrementTick+0x150>)
 800e57c:	6013      	str	r3, [r2, #0]
 800e57e:	4a3f      	ldr	r2, [pc, #252]	; (800e67c <xTaskIncrementTick+0x154>)
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	6013      	str	r3, [r2, #0]
 800e584:	4b3e      	ldr	r3, [pc, #248]	; (800e680 <xTaskIncrementTick+0x158>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	3301      	adds	r3, #1
 800e58a:	4a3d      	ldr	r2, [pc, #244]	; (800e680 <xTaskIncrementTick+0x158>)
 800e58c:	6013      	str	r3, [r2, #0]
 800e58e:	f000 fadb 	bl	800eb48 <prvResetNextTaskUnblockTime>
>>>>>>> Stashed changes

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< Updated upstream
 800b1d2:	4b3c      	ldr	r3, [pc, #240]	; (800b2c4 <xTaskIncrementTick+0x15c>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	693a      	ldr	r2, [r7, #16]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d349      	bcc.n	800b270 <xTaskIncrementTick+0x108>
=======
 800e592:	4b3c      	ldr	r3, [pc, #240]	; (800e684 <xTaskIncrementTick+0x15c>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	693a      	ldr	r2, [r7, #16]
 800e598:	429a      	cmp	r2, r3
 800e59a:	d349      	bcc.n	800e630 <xTaskIncrementTick+0x108>
>>>>>>> Stashed changes
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< Updated upstream
 800b1dc:	4b36      	ldr	r3, [pc, #216]	; (800b2b8 <xTaskIncrementTick+0x150>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d104      	bne.n	800b1f0 <xTaskIncrementTick+0x88>
=======
 800e59c:	4b36      	ldr	r3, [pc, #216]	; (800e678 <xTaskIncrementTick+0x150>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d104      	bne.n	800e5b0 <xTaskIncrementTick+0x88>
>>>>>>> Stashed changes
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 800b1e6:	4b37      	ldr	r3, [pc, #220]	; (800b2c4 <xTaskIncrementTick+0x15c>)
 800b1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ec:	601a      	str	r2, [r3, #0]
					break;
 800b1ee:	e03f      	b.n	800b270 <xTaskIncrementTick+0x108>
=======
 800e5a6:	4b37      	ldr	r3, [pc, #220]	; (800e684 <xTaskIncrementTick+0x15c>)
 800e5a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e5ac:	601a      	str	r2, [r3, #0]
					break;
 800e5ae:	e03f      	b.n	800e630 <xTaskIncrementTick+0x108>
>>>>>>> Stashed changes
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< Updated upstream
 800b1f0:	4b31      	ldr	r3, [pc, #196]	; (800b2b8 <xTaskIncrementTick+0x150>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b200:	693a      	ldr	r2, [r7, #16]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	429a      	cmp	r2, r3
 800b206:	d203      	bcs.n	800b210 <xTaskIncrementTick+0xa8>
=======
 800e5b0:	4b31      	ldr	r3, [pc, #196]	; (800e678 <xTaskIncrementTick+0x150>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	68db      	ldr	r3, [r3, #12]
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e5c0:	693a      	ldr	r2, [r7, #16]
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d203      	bcs.n	800e5d0 <xTaskIncrementTick+0xa8>
>>>>>>> Stashed changes
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< Updated upstream
 800b208:	4a2e      	ldr	r2, [pc, #184]	; (800b2c4 <xTaskIncrementTick+0x15c>)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b20e:	e02f      	b.n	800b270 <xTaskIncrementTick+0x108>
=======
 800e5c8:	4a2e      	ldr	r2, [pc, #184]	; (800e684 <xTaskIncrementTick+0x15c>)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e5ce:	e02f      	b.n	800e630 <xTaskIncrementTick+0x108>
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< Updated upstream
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	3304      	adds	r3, #4
 800b214:	4618      	mov	r0, r3
 800b216:	f7fe fb13 	bl	8009840 <uxListRemove>
=======
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	3304      	adds	r3, #4
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7fe fb15 	bl	800cc04 <uxListRemove>
>>>>>>> Stashed changes

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< Updated upstream
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d004      	beq.n	800b22c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	3318      	adds	r3, #24
 800b226:	4618      	mov	r0, r3
 800b228:	f7fe fb0a 	bl	8009840 <uxListRemove>
=======
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d004      	beq.n	800e5ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	3318      	adds	r3, #24
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7fe fb0c 	bl	800cc04 <uxListRemove>
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< Updated upstream
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b230:	4b25      	ldr	r3, [pc, #148]	; (800b2c8 <xTaskIncrementTick+0x160>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	429a      	cmp	r2, r3
 800b236:	d903      	bls.n	800b240 <xTaskIncrementTick+0xd8>
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	4a22      	ldr	r2, [pc, #136]	; (800b2c8 <xTaskIncrementTick+0x160>)
 800b23e:	6013      	str	r3, [r2, #0]
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b244:	4613      	mov	r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	4413      	add	r3, r2
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	4a1f      	ldr	r2, [pc, #124]	; (800b2cc <xTaskIncrementTick+0x164>)
 800b24e:	441a      	add	r2, r3
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	3304      	adds	r3, #4
 800b254:	4619      	mov	r1, r3
 800b256:	4610      	mov	r0, r2
 800b258:	f7fe fa95 	bl	8009786 <vListInsertEnd>
=======
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5f0:	4b25      	ldr	r3, [pc, #148]	; (800e688 <xTaskIncrementTick+0x160>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d903      	bls.n	800e600 <xTaskIncrementTick+0xd8>
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5fc:	4a22      	ldr	r2, [pc, #136]	; (800e688 <xTaskIncrementTick+0x160>)
 800e5fe:	6013      	str	r3, [r2, #0]
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e604:	4613      	mov	r3, r2
 800e606:	009b      	lsls	r3, r3, #2
 800e608:	4413      	add	r3, r2
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	4a1f      	ldr	r2, [pc, #124]	; (800e68c <xTaskIncrementTick+0x164>)
 800e60e:	441a      	add	r2, r3
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	3304      	adds	r3, #4
 800e614:	4619      	mov	r1, r3
 800e616:	4610      	mov	r0, r2
 800e618:	f7fe fa97 	bl	800cb4a <vListInsertEnd>
>>>>>>> Stashed changes
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b260:	4b1b      	ldr	r3, [pc, #108]	; (800b2d0 <xTaskIncrementTick+0x168>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b266:	429a      	cmp	r2, r3
 800b268:	d3b8      	bcc.n	800b1dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b26a:	2301      	movs	r3, #1
 800b26c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b26e:	e7b5      	b.n	800b1dc <xTaskIncrementTick+0x74>
=======
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e620:	4b1b      	ldr	r3, [pc, #108]	; (800e690 <xTaskIncrementTick+0x168>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e626:	429a      	cmp	r2, r3
 800e628:	d3b8      	bcc.n	800e59c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e62a:	2301      	movs	r3, #1
 800e62c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e62e:	e7b5      	b.n	800e59c <xTaskIncrementTick+0x74>
>>>>>>> Stashed changes
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< Updated upstream
 800b270:	4b17      	ldr	r3, [pc, #92]	; (800b2d0 <xTaskIncrementTick+0x168>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b276:	4915      	ldr	r1, [pc, #84]	; (800b2cc <xTaskIncrementTick+0x164>)
 800b278:	4613      	mov	r3, r2
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	4413      	add	r3, r2
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	440b      	add	r3, r1
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d901      	bls.n	800b28c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b288:	2301      	movs	r3, #1
 800b28a:	617b      	str	r3, [r7, #20]
=======
 800e630:	4b17      	ldr	r3, [pc, #92]	; (800e690 <xTaskIncrementTick+0x168>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e636:	4915      	ldr	r1, [pc, #84]	; (800e68c <xTaskIncrementTick+0x164>)
 800e638:	4613      	mov	r3, r2
 800e63a:	009b      	lsls	r3, r3, #2
 800e63c:	4413      	add	r3, r2
 800e63e:	009b      	lsls	r3, r3, #2
 800e640:	440b      	add	r3, r1
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b01      	cmp	r3, #1
 800e646:	d901      	bls.n	800e64c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e648:	2301      	movs	r3, #1
 800e64a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
<<<<<<< Updated upstream
 800b28c:	4b11      	ldr	r3, [pc, #68]	; (800b2d4 <xTaskIncrementTick+0x16c>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d007      	beq.n	800b2a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b294:	2301      	movs	r3, #1
 800b296:	617b      	str	r3, [r7, #20]
 800b298:	e004      	b.n	800b2a4 <xTaskIncrementTick+0x13c>
=======
 800e64c:	4b11      	ldr	r3, [pc, #68]	; (800e694 <xTaskIncrementTick+0x16c>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d007      	beq.n	800e664 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e654:	2301      	movs	r3, #1
 800e656:	617b      	str	r3, [r7, #20]
 800e658:	e004      	b.n	800e664 <xTaskIncrementTick+0x13c>
>>>>>>> Stashed changes
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
<<<<<<< Updated upstream
 800b29a:	4b0f      	ldr	r3, [pc, #60]	; (800b2d8 <xTaskIncrementTick+0x170>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	4a0d      	ldr	r2, [pc, #52]	; (800b2d8 <xTaskIncrementTick+0x170>)
 800b2a2:	6013      	str	r3, [r2, #0]
=======
 800e65a:	4b0f      	ldr	r3, [pc, #60]	; (800e698 <xTaskIncrementTick+0x170>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	3301      	adds	r3, #1
 800e660:	4a0d      	ldr	r2, [pc, #52]	; (800e698 <xTaskIncrementTick+0x170>)
 800e662:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
<<<<<<< Updated upstream
 800b2a4:	697b      	ldr	r3, [r7, #20]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3718      	adds	r7, #24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	24004df0 	.word	0x24004df0
 800b2b4:	24004dcc 	.word	0x24004dcc
 800b2b8:	24004d80 	.word	0x24004d80
 800b2bc:	24004d84 	.word	0x24004d84
 800b2c0:	24004de0 	.word	0x24004de0
 800b2c4:	24004de8 	.word	0x24004de8
 800b2c8:	24004dd0 	.word	0x24004dd0
 800b2cc:	240048f8 	.word	0x240048f8
 800b2d0:	240048f4 	.word	0x240048f4
 800b2d4:	24004ddc 	.word	0x24004ddc
 800b2d8:	24004dd8 	.word	0x24004dd8

0800b2dc <vTaskSwitchContext>:
=======
 800e664:	697b      	ldr	r3, [r7, #20]
}
 800e666:	4618      	mov	r0, r3
 800e668:	3718      	adds	r7, #24
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	240052cc 	.word	0x240052cc
 800e674:	240052a8 	.word	0x240052a8
 800e678:	2400525c 	.word	0x2400525c
 800e67c:	24005260 	.word	0x24005260
 800e680:	240052bc 	.word	0x240052bc
 800e684:	240052c4 	.word	0x240052c4
 800e688:	240052ac 	.word	0x240052ac
 800e68c:	24004dd4 	.word	0x24004dd4
 800e690:	24004dd0 	.word	0x24004dd0
 800e694:	240052b8 	.word	0x240052b8
 800e698:	240052b4 	.word	0x240052b4

0800e69c <vTaskSwitchContext>:
>>>>>>> Stashed changes

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< Updated upstream
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b2e2:	4b2a      	ldr	r3, [pc, #168]	; (800b38c <vTaskSwitchContext+0xb0>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d003      	beq.n	800b2f2 <vTaskSwitchContext+0x16>
=======
 800e69c:	b480      	push	{r7}
 800e69e:	b085      	sub	sp, #20
 800e6a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e6a2:	4b2a      	ldr	r3, [pc, #168]	; (800e74c <vTaskSwitchContext+0xb0>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d003      	beq.n	800e6b2 <vTaskSwitchContext+0x16>
>>>>>>> Stashed changes
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< Updated upstream
 800b2ea:	4b29      	ldr	r3, [pc, #164]	; (800b390 <vTaskSwitchContext+0xb4>)
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	601a      	str	r2, [r3, #0]
=======
 800e6aa:	4b29      	ldr	r3, [pc, #164]	; (800e750 <vTaskSwitchContext+0xb4>)
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< Updated upstream
 800b2f0:	e046      	b.n	800b380 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b2f2:	4b27      	ldr	r3, [pc, #156]	; (800b390 <vTaskSwitchContext+0xb4>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2f8:	4b26      	ldr	r3, [pc, #152]	; (800b394 <vTaskSwitchContext+0xb8>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	60fb      	str	r3, [r7, #12]
 800b2fe:	e010      	b.n	800b322 <vTaskSwitchContext+0x46>
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d10a      	bne.n	800b31c <vTaskSwitchContext+0x40>
	__asm volatile
 800b306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30a:	f383 8811 	msr	BASEPRI, r3
 800b30e:	f3bf 8f6f 	isb	sy
 800b312:	f3bf 8f4f 	dsb	sy
 800b316:	607b      	str	r3, [r7, #4]
}
 800b318:	bf00      	nop
 800b31a:	e7fe      	b.n	800b31a <vTaskSwitchContext+0x3e>
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	3b01      	subs	r3, #1
 800b320:	60fb      	str	r3, [r7, #12]
 800b322:	491d      	ldr	r1, [pc, #116]	; (800b398 <vTaskSwitchContext+0xbc>)
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	4613      	mov	r3, r2
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	4413      	add	r3, r2
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	440b      	add	r3, r1
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d0e4      	beq.n	800b300 <vTaskSwitchContext+0x24>
 800b336:	68fa      	ldr	r2, [r7, #12]
 800b338:	4613      	mov	r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4413      	add	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4a15      	ldr	r2, [pc, #84]	; (800b398 <vTaskSwitchContext+0xbc>)
 800b342:	4413      	add	r3, r2
 800b344:	60bb      	str	r3, [r7, #8]
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	685a      	ldr	r2, [r3, #4]
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	605a      	str	r2, [r3, #4]
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	685a      	ldr	r2, [r3, #4]
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	3308      	adds	r3, #8
 800b358:	429a      	cmp	r2, r3
 800b35a:	d104      	bne.n	800b366 <vTaskSwitchContext+0x8a>
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	685a      	ldr	r2, [r3, #4]
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	605a      	str	r2, [r3, #4]
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	4a0b      	ldr	r2, [pc, #44]	; (800b39c <vTaskSwitchContext+0xc0>)
 800b36e:	6013      	str	r3, [r2, #0]
 800b370:	4a08      	ldr	r2, [pc, #32]	; (800b394 <vTaskSwitchContext+0xb8>)
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b376:	4b09      	ldr	r3, [pc, #36]	; (800b39c <vTaskSwitchContext+0xc0>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	3354      	adds	r3, #84	; 0x54
 800b37c:	4a08      	ldr	r2, [pc, #32]	; (800b3a0 <vTaskSwitchContext+0xc4>)
 800b37e:	6013      	str	r3, [r2, #0]
}
 800b380:	bf00      	nop
 800b382:	3714      	adds	r7, #20
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr
 800b38c:	24004df0 	.word	0x24004df0
 800b390:	24004ddc 	.word	0x24004ddc
 800b394:	24004dd0 	.word	0x24004dd0
 800b398:	240048f8 	.word	0x240048f8
 800b39c:	240048f4 	.word	0x240048f4
 800b3a0:	2400006c 	.word	0x2400006c

0800b3a4 <vTaskPlaceOnEventList>:
=======
 800e6b0:	e046      	b.n	800e740 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e6b2:	4b27      	ldr	r3, [pc, #156]	; (800e750 <vTaskSwitchContext+0xb4>)
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6b8:	4b26      	ldr	r3, [pc, #152]	; (800e754 <vTaskSwitchContext+0xb8>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	60fb      	str	r3, [r7, #12]
 800e6be:	e010      	b.n	800e6e2 <vTaskSwitchContext+0x46>
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d10a      	bne.n	800e6dc <vTaskSwitchContext+0x40>
	__asm volatile
 800e6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ca:	f383 8811 	msr	BASEPRI, r3
 800e6ce:	f3bf 8f6f 	isb	sy
 800e6d2:	f3bf 8f4f 	dsb	sy
 800e6d6:	607b      	str	r3, [r7, #4]
}
 800e6d8:	bf00      	nop
 800e6da:	e7fe      	b.n	800e6da <vTaskSwitchContext+0x3e>
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	3b01      	subs	r3, #1
 800e6e0:	60fb      	str	r3, [r7, #12]
 800e6e2:	491d      	ldr	r1, [pc, #116]	; (800e758 <vTaskSwitchContext+0xbc>)
 800e6e4:	68fa      	ldr	r2, [r7, #12]
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	009b      	lsls	r3, r3, #2
 800e6ea:	4413      	add	r3, r2
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	440b      	add	r3, r1
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d0e4      	beq.n	800e6c0 <vTaskSwitchContext+0x24>
 800e6f6:	68fa      	ldr	r2, [r7, #12]
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	009b      	lsls	r3, r3, #2
 800e6fc:	4413      	add	r3, r2
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	4a15      	ldr	r2, [pc, #84]	; (800e758 <vTaskSwitchContext+0xbc>)
 800e702:	4413      	add	r3, r2
 800e704:	60bb      	str	r3, [r7, #8]
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	685a      	ldr	r2, [r3, #4]
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	605a      	str	r2, [r3, #4]
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	685a      	ldr	r2, [r3, #4]
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	3308      	adds	r3, #8
 800e718:	429a      	cmp	r2, r3
 800e71a:	d104      	bne.n	800e726 <vTaskSwitchContext+0x8a>
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	685a      	ldr	r2, [r3, #4]
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	605a      	str	r2, [r3, #4]
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	68db      	ldr	r3, [r3, #12]
 800e72c:	4a0b      	ldr	r2, [pc, #44]	; (800e75c <vTaskSwitchContext+0xc0>)
 800e72e:	6013      	str	r3, [r2, #0]
 800e730:	4a08      	ldr	r2, [pc, #32]	; (800e754 <vTaskSwitchContext+0xb8>)
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e736:	4b09      	ldr	r3, [pc, #36]	; (800e75c <vTaskSwitchContext+0xc0>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	3354      	adds	r3, #84	; 0x54
 800e73c:	4a08      	ldr	r2, [pc, #32]	; (800e760 <vTaskSwitchContext+0xc4>)
 800e73e:	6013      	str	r3, [r2, #0]
}
 800e740:	bf00      	nop
 800e742:	3714      	adds	r7, #20
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr
 800e74c:	240052cc 	.word	0x240052cc
 800e750:	240052b8 	.word	0x240052b8
 800e754:	240052ac 	.word	0x240052ac
 800e758:	24004dd4 	.word	0x24004dd4
 800e75c:	24004dd0 	.word	0x24004dd0
 800e760:	2400001c 	.word	0x2400001c

0800e764 <vTaskPlaceOnEventList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d10a      	bne.n	800b3ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b8:	f383 8811 	msr	BASEPRI, r3
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	f3bf 8f4f 	dsb	sy
 800b3c4:	60fb      	str	r3, [r7, #12]
}
 800b3c6:	bf00      	nop
 800b3c8:	e7fe      	b.n	800b3c8 <vTaskPlaceOnEventList+0x24>
=======
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d10a      	bne.n	800e78a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e778:	f383 8811 	msr	BASEPRI, r3
 800e77c:	f3bf 8f6f 	isb	sy
 800e780:	f3bf 8f4f 	dsb	sy
 800e784:	60fb      	str	r3, [r7, #12]
}
 800e786:	bf00      	nop
 800e788:	e7fe      	b.n	800e788 <vTaskPlaceOnEventList+0x24>
>>>>>>> Stashed changes

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< Updated upstream
 800b3ca:	4b07      	ldr	r3, [pc, #28]	; (800b3e8 <vTaskPlaceOnEventList+0x44>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	3318      	adds	r3, #24
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f7fe f9fb 	bl	80097ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b3d8:	2101      	movs	r1, #1
 800b3da:	6838      	ldr	r0, [r7, #0]
 800b3dc:	f000 fb8e 	bl	800bafc <prvAddCurrentTaskToDelayedList>
}
 800b3e0:	bf00      	nop
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	240048f4 	.word	0x240048f4

0800b3ec <vTaskPlaceOnEventListRestricted>:
=======
 800e78a:	4b07      	ldr	r3, [pc, #28]	; (800e7a8 <vTaskPlaceOnEventList+0x44>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	3318      	adds	r3, #24
 800e790:	4619      	mov	r1, r3
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f7fe f9fd 	bl	800cb92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e798:	2101      	movs	r1, #1
 800e79a:	6838      	ldr	r0, [r7, #0]
 800e79c:	f000 fb8e 	bl	800eebc <prvAddCurrentTaskToDelayedList>
}
 800e7a0:	bf00      	nop
 800e7a2:	3710      	adds	r7, #16
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	24004dd0 	.word	0x24004dd0

0800e7ac <vTaskPlaceOnEventListRestricted>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< Updated upstream
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10a      	bne.n	800b414 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	617b      	str	r3, [r7, #20]
}
 800b410:	bf00      	nop
 800b412:	e7fe      	b.n	800b412 <vTaskPlaceOnEventListRestricted+0x26>
=======
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b086      	sub	sp, #24
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	60b9      	str	r1, [r7, #8]
 800e7b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d10a      	bne.n	800e7d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c2:	f383 8811 	msr	BASEPRI, r3
 800e7c6:	f3bf 8f6f 	isb	sy
 800e7ca:	f3bf 8f4f 	dsb	sy
 800e7ce:	617b      	str	r3, [r7, #20]
}
 800e7d0:	bf00      	nop
 800e7d2:	e7fe      	b.n	800e7d2 <vTaskPlaceOnEventListRestricted+0x26>
>>>>>>> Stashed changes

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< Updated upstream
 800b414:	4b0a      	ldr	r3, [pc, #40]	; (800b440 <vTaskPlaceOnEventListRestricted+0x54>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	3318      	adds	r3, #24
 800b41a:	4619      	mov	r1, r3
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f7fe f9b2 	bl	8009786 <vListInsertEnd>
=======
 800e7d4:	4b0a      	ldr	r3, [pc, #40]	; (800e800 <vTaskPlaceOnEventListRestricted+0x54>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	3318      	adds	r3, #24
 800e7da:	4619      	mov	r1, r3
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	f7fe f9b4 	bl	800cb4a <vListInsertEnd>
>>>>>>> Stashed changes

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
<<<<<<< Updated upstream
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b428:	f04f 33ff 	mov.w	r3, #4294967295
 800b42c:	60bb      	str	r3, [r7, #8]
=======
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d002      	beq.n	800e7ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e7e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ec:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
<<<<<<< Updated upstream
 800b42e:	6879      	ldr	r1, [r7, #4]
 800b430:	68b8      	ldr	r0, [r7, #8]
 800b432:	f000 fb63 	bl	800bafc <prvAddCurrentTaskToDelayedList>
	}
 800b436:	bf00      	nop
 800b438:	3718      	adds	r7, #24
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	240048f4 	.word	0x240048f4

0800b444 <xTaskRemoveFromEventList>:
=======
 800e7ee:	6879      	ldr	r1, [r7, #4]
 800e7f0:	68b8      	ldr	r0, [r7, #8]
 800e7f2:	f000 fb63 	bl	800eebc <prvAddCurrentTaskToDelayedList>
	}
 800e7f6:	bf00      	nop
 800e7f8:	3718      	adds	r7, #24
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	24004dd0 	.word	0x24004dd0

0800e804 <xTaskRemoveFromEventList>:
>>>>>>> Stashed changes

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< Updated upstream
 800b444:	b580      	push	{r7, lr}
 800b446:	b086      	sub	sp, #24
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
=======
 800e804:	b580      	push	{r7, lr}
 800e806:	b086      	sub	sp, #24
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< Updated upstream
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10a      	bne.n	800b470 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45e:	f383 8811 	msr	BASEPRI, r3
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	60fb      	str	r3, [r7, #12]
}
 800b46c:	bf00      	nop
 800b46e:	e7fe      	b.n	800b46e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	3318      	adds	r3, #24
 800b474:	4618      	mov	r0, r3
 800b476:	f7fe f9e3 	bl	8009840 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b47a:	4b1e      	ldr	r3, [pc, #120]	; (800b4f4 <xTaskRemoveFromEventList+0xb0>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d11d      	bne.n	800b4be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	3304      	adds	r3, #4
 800b486:	4618      	mov	r0, r3
 800b488:	f7fe f9da 	bl	8009840 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b490:	4b19      	ldr	r3, [pc, #100]	; (800b4f8 <xTaskRemoveFromEventList+0xb4>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	429a      	cmp	r2, r3
 800b496:	d903      	bls.n	800b4a0 <xTaskRemoveFromEventList+0x5c>
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49c:	4a16      	ldr	r2, [pc, #88]	; (800b4f8 <xTaskRemoveFromEventList+0xb4>)
 800b49e:	6013      	str	r3, [r2, #0]
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	4413      	add	r3, r2
 800b4aa:	009b      	lsls	r3, r3, #2
 800b4ac:	4a13      	ldr	r2, [pc, #76]	; (800b4fc <xTaskRemoveFromEventList+0xb8>)
 800b4ae:	441a      	add	r2, r3
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	3304      	adds	r3, #4
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	f7fe f965 	bl	8009786 <vListInsertEnd>
 800b4bc:	e005      	b.n	800b4ca <xTaskRemoveFromEventList+0x86>
=======
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	68db      	ldr	r3, [r3, #12]
 800e810:	68db      	ldr	r3, [r3, #12]
 800e812:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d10a      	bne.n	800e830 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e81e:	f383 8811 	msr	BASEPRI, r3
 800e822:	f3bf 8f6f 	isb	sy
 800e826:	f3bf 8f4f 	dsb	sy
 800e82a:	60fb      	str	r3, [r7, #12]
}
 800e82c:	bf00      	nop
 800e82e:	e7fe      	b.n	800e82e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	3318      	adds	r3, #24
 800e834:	4618      	mov	r0, r3
 800e836:	f7fe f9e5 	bl	800cc04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e83a:	4b1e      	ldr	r3, [pc, #120]	; (800e8b4 <xTaskRemoveFromEventList+0xb0>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d11d      	bne.n	800e87e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	3304      	adds	r3, #4
 800e846:	4618      	mov	r0, r3
 800e848:	f7fe f9dc 	bl	800cc04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e850:	4b19      	ldr	r3, [pc, #100]	; (800e8b8 <xTaskRemoveFromEventList+0xb4>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	429a      	cmp	r2, r3
 800e856:	d903      	bls.n	800e860 <xTaskRemoveFromEventList+0x5c>
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e85c:	4a16      	ldr	r2, [pc, #88]	; (800e8b8 <xTaskRemoveFromEventList+0xb4>)
 800e85e:	6013      	str	r3, [r2, #0]
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e864:	4613      	mov	r3, r2
 800e866:	009b      	lsls	r3, r3, #2
 800e868:	4413      	add	r3, r2
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	4a13      	ldr	r2, [pc, #76]	; (800e8bc <xTaskRemoveFromEventList+0xb8>)
 800e86e:	441a      	add	r2, r3
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	3304      	adds	r3, #4
 800e874:	4619      	mov	r1, r3
 800e876:	4610      	mov	r0, r2
 800e878:	f7fe f967 	bl	800cb4a <vListInsertEnd>
 800e87c:	e005      	b.n	800e88a <xTaskRemoveFromEventList+0x86>
>>>>>>> Stashed changes
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< Updated upstream
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	3318      	adds	r3, #24
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	480e      	ldr	r0, [pc, #56]	; (800b500 <xTaskRemoveFromEventList+0xbc>)
 800b4c6:	f7fe f95e 	bl	8009786 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ce:	4b0d      	ldr	r3, [pc, #52]	; (800b504 <xTaskRemoveFromEventList+0xc0>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d905      	bls.n	800b4e4 <xTaskRemoveFromEventList+0xa0>
=======
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	3318      	adds	r3, #24
 800e882:	4619      	mov	r1, r3
 800e884:	480e      	ldr	r0, [pc, #56]	; (800e8c0 <xTaskRemoveFromEventList+0xbc>)
 800e886:	f7fe f960 	bl	800cb4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e88e:	4b0d      	ldr	r3, [pc, #52]	; (800e8c4 <xTaskRemoveFromEventList+0xc0>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e894:	429a      	cmp	r2, r3
 800e896:	d905      	bls.n	800e8a4 <xTaskRemoveFromEventList+0xa0>
>>>>>>> Stashed changes
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< Updated upstream
 800b4d8:	2301      	movs	r3, #1
 800b4da:	617b      	str	r3, [r7, #20]
=======
 800e898:	2301      	movs	r3, #1
 800e89a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< Updated upstream
 800b4dc:	4b0a      	ldr	r3, [pc, #40]	; (800b508 <xTaskRemoveFromEventList+0xc4>)
 800b4de:	2201      	movs	r2, #1
 800b4e0:	601a      	str	r2, [r3, #0]
 800b4e2:	e001      	b.n	800b4e8 <xTaskRemoveFromEventList+0xa4>
=======
 800e89c:	4b0a      	ldr	r3, [pc, #40]	; (800e8c8 <xTaskRemoveFromEventList+0xc4>)
 800e89e:	2201      	movs	r2, #1
 800e8a0:	601a      	str	r2, [r3, #0]
 800e8a2:	e001      	b.n	800e8a8 <xTaskRemoveFromEventList+0xa4>
>>>>>>> Stashed changes
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< Updated upstream
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b4e8:	697b      	ldr	r3, [r7, #20]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3718      	adds	r7, #24
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	24004df0 	.word	0x24004df0
 800b4f8:	24004dd0 	.word	0x24004dd0
 800b4fc:	240048f8 	.word	0x240048f8
 800b500:	24004d88 	.word	0x24004d88
 800b504:	240048f4 	.word	0x240048f4
 800b508:	24004ddc 	.word	0x24004ddc

0800b50c <vTaskInternalSetTimeOutState>:
=======
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e8a8:	697b      	ldr	r3, [r7, #20]
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3718      	adds	r7, #24
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	240052cc 	.word	0x240052cc
 800e8b8:	240052ac 	.word	0x240052ac
 800e8bc:	24004dd4 	.word	0x24004dd4
 800e8c0:	24005264 	.word	0x24005264
 800e8c4:	24004dd0 	.word	0x24004dd0
 800e8c8:	240052b8 	.word	0x240052b8

0800e8cc <vTaskInternalSetTimeOutState>:
>>>>>>> Stashed changes
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< Updated upstream
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b514:	4b06      	ldr	r3, [pc, #24]	; (800b530 <vTaskInternalSetTimeOutState+0x24>)
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b51c:	4b05      	ldr	r3, [pc, #20]	; (800b534 <vTaskInternalSetTimeOutState+0x28>)
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	605a      	str	r2, [r3, #4]
}
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	24004de0 	.word	0x24004de0
 800b534:	24004dcc 	.word	0x24004dcc

0800b538 <xTaskCheckForTimeOut>:
=======
 800e8cc:	b480      	push	{r7}
 800e8ce:	b083      	sub	sp, #12
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e8d4:	4b06      	ldr	r3, [pc, #24]	; (800e8f0 <vTaskInternalSetTimeOutState+0x24>)
 800e8d6:	681a      	ldr	r2, [r3, #0]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e8dc:	4b05      	ldr	r3, [pc, #20]	; (800e8f4 <vTaskInternalSetTimeOutState+0x28>)
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	605a      	str	r2, [r3, #4]
}
 800e8e4:	bf00      	nop
 800e8e6:	370c      	adds	r7, #12
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr
 800e8f0:	240052bc 	.word	0x240052bc
 800e8f4:	240052a8 	.word	0x240052a8

0800e8f8 <xTaskCheckForTimeOut>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< Updated upstream
 800b538:	b580      	push	{r7, lr}
 800b53a:	b088      	sub	sp, #32
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d10a      	bne.n	800b55e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54c:	f383 8811 	msr	BASEPRI, r3
 800b550:	f3bf 8f6f 	isb	sy
 800b554:	f3bf 8f4f 	dsb	sy
 800b558:	613b      	str	r3, [r7, #16]
}
 800b55a:	bf00      	nop
 800b55c:	e7fe      	b.n	800b55c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10a      	bne.n	800b57a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	60fb      	str	r3, [r7, #12]
}
 800b576:	bf00      	nop
 800b578:	e7fe      	b.n	800b578 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b57a:	f7fe fabb 	bl	8009af4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b57e:	4b1d      	ldr	r3, [pc, #116]	; (800b5f4 <xTaskCheckForTimeOut+0xbc>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	69ba      	ldr	r2, [r7, #24]
 800b58a:	1ad3      	subs	r3, r2, r3
 800b58c:	617b      	str	r3, [r7, #20]
=======
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b088      	sub	sp, #32
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d10a      	bne.n	800e91e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e90c:	f383 8811 	msr	BASEPRI, r3
 800e910:	f3bf 8f6f 	isb	sy
 800e914:	f3bf 8f4f 	dsb	sy
 800e918:	613b      	str	r3, [r7, #16]
}
 800e91a:	bf00      	nop
 800e91c:	e7fe      	b.n	800e91c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d10a      	bne.n	800e93a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e928:	f383 8811 	msr	BASEPRI, r3
 800e92c:	f3bf 8f6f 	isb	sy
 800e930:	f3bf 8f4f 	dsb	sy
 800e934:	60fb      	str	r3, [r7, #12]
}
 800e936:	bf00      	nop
 800e938:	e7fe      	b.n	800e938 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e93a:	f7fe fabb 	bl	800ceb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e93e:	4b1d      	ldr	r3, [pc, #116]	; (800e9b4 <xTaskCheckForTimeOut+0xbc>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	69ba      	ldr	r2, [r7, #24]
 800e94a:	1ad3      	subs	r3, r2, r3
 800e94c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< Updated upstream
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b596:	d102      	bne.n	800b59e <xTaskCheckForTimeOut+0x66>
=======
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e956:	d102      	bne.n	800e95e <xTaskCheckForTimeOut+0x66>
>>>>>>> Stashed changes
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< Updated upstream
 800b598:	2300      	movs	r3, #0
 800b59a:	61fb      	str	r3, [r7, #28]
 800b59c:	e023      	b.n	800b5e6 <xTaskCheckForTimeOut+0xae>
=======
 800e958:	2300      	movs	r3, #0
 800e95a:	61fb      	str	r3, [r7, #28]
 800e95c:	e023      	b.n	800e9a6 <xTaskCheckForTimeOut+0xae>
>>>>>>> Stashed changes
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< Updated upstream
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	4b15      	ldr	r3, [pc, #84]	; (800b5f8 <xTaskCheckForTimeOut+0xc0>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d007      	beq.n	800b5ba <xTaskCheckForTimeOut+0x82>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	69ba      	ldr	r2, [r7, #24]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d302      	bcc.n	800b5ba <xTaskCheckForTimeOut+0x82>
=======
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	4b15      	ldr	r3, [pc, #84]	; (800e9b8 <xTaskCheckForTimeOut+0xc0>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	429a      	cmp	r2, r3
 800e968:	d007      	beq.n	800e97a <xTaskCheckForTimeOut+0x82>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	69ba      	ldr	r2, [r7, #24]
 800e970:	429a      	cmp	r2, r3
 800e972:	d302      	bcc.n	800e97a <xTaskCheckForTimeOut+0x82>
>>>>>>> Stashed changes
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< Updated upstream
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	61fb      	str	r3, [r7, #28]
 800b5b8:	e015      	b.n	800b5e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d20b      	bcs.n	800b5dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	1ad2      	subs	r2, r2, r3
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f7ff ff9b 	bl	800b50c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	61fb      	str	r3, [r7, #28]
 800b5da:	e004      	b.n	800b5e6 <xTaskCheckForTimeOut+0xae>
=======
 800e974:	2301      	movs	r3, #1
 800e976:	61fb      	str	r3, [r7, #28]
 800e978:	e015      	b.n	800e9a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	697a      	ldr	r2, [r7, #20]
 800e980:	429a      	cmp	r2, r3
 800e982:	d20b      	bcs.n	800e99c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	1ad2      	subs	r2, r2, r3
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f7ff ff9b 	bl	800e8cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e996:	2300      	movs	r3, #0
 800e998:	61fb      	str	r3, [r7, #28]
 800e99a:	e004      	b.n	800e9a6 <xTaskCheckForTimeOut+0xae>
>>>>>>> Stashed changes
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< Updated upstream
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b5e6:	f7fe fab5 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 800b5ea:	69fb      	ldr	r3, [r7, #28]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3720      	adds	r7, #32
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	24004dcc 	.word	0x24004dcc
 800b5f8:	24004de0 	.word	0x24004de0

0800b5fc <vTaskMissedYield>:
=======
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e9a6:	f7fe fab5 	bl	800cf14 <vPortExitCritical>

	return xReturn;
 800e9aa:	69fb      	ldr	r3, [r7, #28]
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3720      	adds	r7, #32
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	240052a8 	.word	0x240052a8
 800e9b8:	240052bc 	.word	0x240052bc

0800e9bc <vTaskMissedYield>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< Updated upstream
 800b5fc:	b480      	push	{r7}
 800b5fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b600:	4b03      	ldr	r3, [pc, #12]	; (800b610 <vTaskMissedYield+0x14>)
 800b602:	2201      	movs	r2, #1
 800b604:	601a      	str	r2, [r3, #0]
}
 800b606:	bf00      	nop
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr
 800b610:	24004ddc 	.word	0x24004ddc

0800b614 <prvIdleTask>:
=======
 800e9bc:	b480      	push	{r7}
 800e9be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e9c0:	4b03      	ldr	r3, [pc, #12]	; (800e9d0 <vTaskMissedYield+0x14>)
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	601a      	str	r2, [r3, #0]
}
 800e9c6:	bf00      	nop
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr
 800e9d0:	240052b8 	.word	0x240052b8

0800e9d4 <prvIdleTask>:
>>>>>>> Stashed changes
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< Updated upstream
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
=======
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b082      	sub	sp, #8
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< Updated upstream
 800b61c:	f000 f852 	bl	800b6c4 <prvCheckTasksWaitingTermination>
=======
 800e9dc:	f000 f852 	bl	800ea84 <prvCheckTasksWaitingTermination>
>>>>>>> Stashed changes

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< Updated upstream
 800b620:	4b06      	ldr	r3, [pc, #24]	; (800b63c <prvIdleTask+0x28>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d9f9      	bls.n	800b61c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b628:	4b05      	ldr	r3, [pc, #20]	; (800b640 <prvIdleTask+0x2c>)
 800b62a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b62e:	601a      	str	r2, [r3, #0]
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b638:	e7f0      	b.n	800b61c <prvIdleTask+0x8>
 800b63a:	bf00      	nop
 800b63c:	240048f8 	.word	0x240048f8
 800b640:	e000ed04 	.word	0xe000ed04

0800b644 <prvInitialiseTaskLists>:
=======
 800e9e0:	4b06      	ldr	r3, [pc, #24]	; (800e9fc <prvIdleTask+0x28>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d9f9      	bls.n	800e9dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800e9e8:	4b05      	ldr	r3, [pc, #20]	; (800ea00 <prvIdleTask+0x2c>)
 800e9ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9ee:	601a      	str	r2, [r3, #0]
 800e9f0:	f3bf 8f4f 	dsb	sy
 800e9f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e9f8:	e7f0      	b.n	800e9dc <prvIdleTask+0x8>
 800e9fa:	bf00      	nop
 800e9fc:	24004dd4 	.word	0x24004dd4
 800ea00:	e000ed04 	.word	0xe000ed04

0800ea04 <prvInitialiseTaskLists>:
>>>>>>> Stashed changes

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< Updated upstream
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b64a:	2300      	movs	r3, #0
 800b64c:	607b      	str	r3, [r7, #4]
 800b64e:	e00c      	b.n	800b66a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	4613      	mov	r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	4413      	add	r3, r2
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	4a12      	ldr	r2, [pc, #72]	; (800b6a4 <prvInitialiseTaskLists+0x60>)
 800b65c:	4413      	add	r3, r2
 800b65e:	4618      	mov	r0, r3
 800b660:	f7fe f864 	bl	800972c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	3301      	adds	r3, #1
 800b668:	607b      	str	r3, [r7, #4]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b37      	cmp	r3, #55	; 0x37
 800b66e:	d9ef      	bls.n	800b650 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b670:	480d      	ldr	r0, [pc, #52]	; (800b6a8 <prvInitialiseTaskLists+0x64>)
 800b672:	f7fe f85b 	bl	800972c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b676:	480d      	ldr	r0, [pc, #52]	; (800b6ac <prvInitialiseTaskLists+0x68>)
 800b678:	f7fe f858 	bl	800972c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b67c:	480c      	ldr	r0, [pc, #48]	; (800b6b0 <prvInitialiseTaskLists+0x6c>)
 800b67e:	f7fe f855 	bl	800972c <vListInitialise>
=======
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	607b      	str	r3, [r7, #4]
 800ea0e:	e00c      	b.n	800ea2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	4613      	mov	r3, r2
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	4413      	add	r3, r2
 800ea18:	009b      	lsls	r3, r3, #2
 800ea1a:	4a12      	ldr	r2, [pc, #72]	; (800ea64 <prvInitialiseTaskLists+0x60>)
 800ea1c:	4413      	add	r3, r2
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7fe f866 	bl	800caf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	3301      	adds	r3, #1
 800ea28:	607b      	str	r3, [r7, #4]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2b37      	cmp	r3, #55	; 0x37
 800ea2e:	d9ef      	bls.n	800ea10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ea30:	480d      	ldr	r0, [pc, #52]	; (800ea68 <prvInitialiseTaskLists+0x64>)
 800ea32:	f7fe f85d 	bl	800caf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ea36:	480d      	ldr	r0, [pc, #52]	; (800ea6c <prvInitialiseTaskLists+0x68>)
 800ea38:	f7fe f85a 	bl	800caf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ea3c:	480c      	ldr	r0, [pc, #48]	; (800ea70 <prvInitialiseTaskLists+0x6c>)
 800ea3e:	f7fe f857 	bl	800caf0 <vListInitialise>
>>>>>>> Stashed changes

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< Updated upstream
 800b682:	480c      	ldr	r0, [pc, #48]	; (800b6b4 <prvInitialiseTaskLists+0x70>)
 800b684:	f7fe f852 	bl	800972c <vListInitialise>
=======
 800ea42:	480c      	ldr	r0, [pc, #48]	; (800ea74 <prvInitialiseTaskLists+0x70>)
 800ea44:	f7fe f854 	bl	800caf0 <vListInitialise>
>>>>>>> Stashed changes
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< Updated upstream
 800b688:	480b      	ldr	r0, [pc, #44]	; (800b6b8 <prvInitialiseTaskLists+0x74>)
 800b68a:	f7fe f84f 	bl	800972c <vListInitialise>
=======
 800ea48:	480b      	ldr	r0, [pc, #44]	; (800ea78 <prvInitialiseTaskLists+0x74>)
 800ea4a:	f7fe f851 	bl	800caf0 <vListInitialise>
>>>>>>> Stashed changes
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< Updated upstream
 800b68e:	4b0b      	ldr	r3, [pc, #44]	; (800b6bc <prvInitialiseTaskLists+0x78>)
 800b690:	4a05      	ldr	r2, [pc, #20]	; (800b6a8 <prvInitialiseTaskLists+0x64>)
 800b692:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b694:	4b0a      	ldr	r3, [pc, #40]	; (800b6c0 <prvInitialiseTaskLists+0x7c>)
 800b696:	4a05      	ldr	r2, [pc, #20]	; (800b6ac <prvInitialiseTaskLists+0x68>)
 800b698:	601a      	str	r2, [r3, #0]
}
 800b69a:	bf00      	nop
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	240048f8 	.word	0x240048f8
 800b6a8:	24004d58 	.word	0x24004d58
 800b6ac:	24004d6c 	.word	0x24004d6c
 800b6b0:	24004d88 	.word	0x24004d88
 800b6b4:	24004d9c 	.word	0x24004d9c
 800b6b8:	24004db4 	.word	0x24004db4
 800b6bc:	24004d80 	.word	0x24004d80
 800b6c0:	24004d84 	.word	0x24004d84

0800b6c4 <prvCheckTasksWaitingTermination>:
=======
 800ea4e:	4b0b      	ldr	r3, [pc, #44]	; (800ea7c <prvInitialiseTaskLists+0x78>)
 800ea50:	4a05      	ldr	r2, [pc, #20]	; (800ea68 <prvInitialiseTaskLists+0x64>)
 800ea52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ea54:	4b0a      	ldr	r3, [pc, #40]	; (800ea80 <prvInitialiseTaskLists+0x7c>)
 800ea56:	4a05      	ldr	r2, [pc, #20]	; (800ea6c <prvInitialiseTaskLists+0x68>)
 800ea58:	601a      	str	r2, [r3, #0]
}
 800ea5a:	bf00      	nop
 800ea5c:	3708      	adds	r7, #8
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	24004dd4 	.word	0x24004dd4
 800ea68:	24005234 	.word	0x24005234
 800ea6c:	24005248 	.word	0x24005248
 800ea70:	24005264 	.word	0x24005264
 800ea74:	24005278 	.word	0x24005278
 800ea78:	24005290 	.word	0x24005290
 800ea7c:	2400525c 	.word	0x2400525c
 800ea80:	24005260 	.word	0x24005260

0800ea84 <prvCheckTasksWaitingTermination>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< Updated upstream
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
=======
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< Updated upstream
 800b6ca:	e019      	b.n	800b700 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b6cc:	f7fe fa12 	bl	8009af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6d0:	4b10      	ldr	r3, [pc, #64]	; (800b714 <prvCheckTasksWaitingTermination+0x50>)
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	3304      	adds	r3, #4
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7fe f8af 	bl	8009840 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b6e2:	4b0d      	ldr	r3, [pc, #52]	; (800b718 <prvCheckTasksWaitingTermination+0x54>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	4a0b      	ldr	r2, [pc, #44]	; (800b718 <prvCheckTasksWaitingTermination+0x54>)
 800b6ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b6ec:	4b0b      	ldr	r3, [pc, #44]	; (800b71c <prvCheckTasksWaitingTermination+0x58>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	4a0a      	ldr	r2, [pc, #40]	; (800b71c <prvCheckTasksWaitingTermination+0x58>)
 800b6f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b6f6:	f7fe fa2d 	bl	8009b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f810 	bl	800b720 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b700:	4b06      	ldr	r3, [pc, #24]	; (800b71c <prvCheckTasksWaitingTermination+0x58>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d1e1      	bne.n	800b6cc <prvCheckTasksWaitingTermination+0x8>
=======
 800ea8a:	e019      	b.n	800eac0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea8c:	f7fe fa12 	bl	800ceb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea90:	4b10      	ldr	r3, [pc, #64]	; (800ead4 <prvCheckTasksWaitingTermination+0x50>)
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	3304      	adds	r3, #4
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7fe f8b1 	bl	800cc04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eaa2:	4b0d      	ldr	r3, [pc, #52]	; (800ead8 <prvCheckTasksWaitingTermination+0x54>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	3b01      	subs	r3, #1
 800eaa8:	4a0b      	ldr	r2, [pc, #44]	; (800ead8 <prvCheckTasksWaitingTermination+0x54>)
 800eaaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eaac:	4b0b      	ldr	r3, [pc, #44]	; (800eadc <prvCheckTasksWaitingTermination+0x58>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	3b01      	subs	r3, #1
 800eab2:	4a0a      	ldr	r2, [pc, #40]	; (800eadc <prvCheckTasksWaitingTermination+0x58>)
 800eab4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eab6:	f7fe fa2d 	bl	800cf14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f000 f810 	bl	800eae0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eac0:	4b06      	ldr	r3, [pc, #24]	; (800eadc <prvCheckTasksWaitingTermination+0x58>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1e1      	bne.n	800ea8c <prvCheckTasksWaitingTermination+0x8>
>>>>>>> Stashed changes
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< Updated upstream
 800b708:	bf00      	nop
 800b70a:	bf00      	nop
 800b70c:	3708      	adds	r7, #8
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	24004d9c 	.word	0x24004d9c
 800b718:	24004dc8 	.word	0x24004dc8
 800b71c:	24004db0 	.word	0x24004db0

0800b720 <prvDeleteTCB>:
=======
 800eac8:	bf00      	nop
 800eaca:	bf00      	nop
 800eacc:	3708      	adds	r7, #8
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	24005278 	.word	0x24005278
 800ead8:	240052a4 	.word	0x240052a4
 800eadc:	2400528c 	.word	0x2400528c

0800eae0 <prvDeleteTCB>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< Updated upstream
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
=======
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
<<<<<<< Updated upstream
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	3354      	adds	r3, #84	; 0x54
 800b72c:	4618      	mov	r0, r3
 800b72e:	f001 fbe5 	bl	800cefc <_reclaim_reent>
=======
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	3354      	adds	r3, #84	; 0x54
 800eaec:	4618      	mov	r0, r3
 800eaee:	f001 fc39 	bl	8010364 <_reclaim_reent>
>>>>>>> Stashed changes
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< Updated upstream
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d108      	bne.n	800b74e <prvDeleteTCB+0x2e>
=======
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d108      	bne.n	800eb0e <prvDeleteTCB+0x2e>
>>>>>>> Stashed changes
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< Updated upstream
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b740:	4618      	mov	r0, r3
 800b742:	f7fd fed5 	bl	80094f0 <vPortFree>
				vPortFree( pxTCB );
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f7fd fed2 	bl	80094f0 <vPortFree>
=======
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7fd fed7 	bl	800c8b4 <vPortFree>
				vPortFree( pxTCB );
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f7fd fed4 	bl	800c8b4 <vPortFree>
>>>>>>> Stashed changes
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< Updated upstream
 800b74c:	e018      	b.n	800b780 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b754:	2b01      	cmp	r3, #1
 800b756:	d103      	bne.n	800b760 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f7fd fec9 	bl	80094f0 <vPortFree>
	}
 800b75e:	e00f      	b.n	800b780 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b766:	2b02      	cmp	r3, #2
 800b768:	d00a      	beq.n	800b780 <prvDeleteTCB+0x60>
	__asm volatile
 800b76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76e:	f383 8811 	msr	BASEPRI, r3
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	60fb      	str	r3, [r7, #12]
}
 800b77c:	bf00      	nop
 800b77e:	e7fe      	b.n	800b77e <prvDeleteTCB+0x5e>
	}
 800b780:	bf00      	nop
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <prvResetNextTaskUnblockTime>:
=======
 800eb0c:	e018      	b.n	800eb40 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800eb14:	2b01      	cmp	r3, #1
 800eb16:	d103      	bne.n	800eb20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f7fd fecb 	bl	800c8b4 <vPortFree>
	}
 800eb1e:	e00f      	b.n	800eb40 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800eb26:	2b02      	cmp	r3, #2
 800eb28:	d00a      	beq.n	800eb40 <prvDeleteTCB+0x60>
	__asm volatile
 800eb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb2e:	f383 8811 	msr	BASEPRI, r3
 800eb32:	f3bf 8f6f 	isb	sy
 800eb36:	f3bf 8f4f 	dsb	sy
 800eb3a:	60fb      	str	r3, [r7, #12]
}
 800eb3c:	bf00      	nop
 800eb3e:	e7fe      	b.n	800eb3e <prvDeleteTCB+0x5e>
	}
 800eb40:	bf00      	nop
 800eb42:	3710      	adds	r7, #16
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <prvResetNextTaskUnblockTime>:
>>>>>>> Stashed changes

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< Updated upstream
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b78e:	4b0c      	ldr	r3, [pc, #48]	; (800b7c0 <prvResetNextTaskUnblockTime+0x38>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d104      	bne.n	800b7a2 <prvResetNextTaskUnblockTime+0x1a>
=======
 800eb48:	b480      	push	{r7}
 800eb4a:	b083      	sub	sp, #12
 800eb4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb4e:	4b0c      	ldr	r3, [pc, #48]	; (800eb80 <prvResetNextTaskUnblockTime+0x38>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d104      	bne.n	800eb62 <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> Stashed changes
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< Updated upstream
 800b798:	4b0a      	ldr	r3, [pc, #40]	; (800b7c4 <prvResetNextTaskUnblockTime+0x3c>)
 800b79a:	f04f 32ff 	mov.w	r2, #4294967295
 800b79e:	601a      	str	r2, [r3, #0]
=======
 800eb58:	4b0a      	ldr	r3, [pc, #40]	; (800eb84 <prvResetNextTaskUnblockTime+0x3c>)
 800eb5a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb5e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< Updated upstream
 800b7a0:	e008      	b.n	800b7b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7a2:	4b07      	ldr	r3, [pc, #28]	; (800b7c0 <prvResetNextTaskUnblockTime+0x38>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	4a04      	ldr	r2, [pc, #16]	; (800b7c4 <prvResetNextTaskUnblockTime+0x3c>)
 800b7b2:	6013      	str	r3, [r2, #0]
}
 800b7b4:	bf00      	nop
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr
 800b7c0:	24004d80 	.word	0x24004d80
 800b7c4:	24004de8 	.word	0x24004de8

0800b7c8 <xTaskGetCurrentTaskHandle>:
=======
 800eb60:	e008      	b.n	800eb74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb62:	4b07      	ldr	r3, [pc, #28]	; (800eb80 <prvResetNextTaskUnblockTime+0x38>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	68db      	ldr	r3, [r3, #12]
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	4a04      	ldr	r2, [pc, #16]	; (800eb84 <prvResetNextTaskUnblockTime+0x3c>)
 800eb72:	6013      	str	r3, [r2, #0]
}
 800eb74:	bf00      	nop
 800eb76:	370c      	adds	r7, #12
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr
 800eb80:	2400525c 	.word	0x2400525c
 800eb84:	240052c4 	.word	0x240052c4

0800eb88 <xTaskGetCurrentTaskHandle>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
<<<<<<< Updated upstream
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
=======
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
<<<<<<< Updated upstream
 800b7ce:	4b05      	ldr	r3, [pc, #20]	; (800b7e4 <xTaskGetCurrentTaskHandle+0x1c>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b7d4:	687b      	ldr	r3, [r7, #4]
	}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	240048f4 	.word	0x240048f4

0800b7e8 <xTaskGetSchedulerState>:
=======
 800eb8e:	4b05      	ldr	r3, [pc, #20]	; (800eba4 <xTaskGetCurrentTaskHandle+0x1c>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	607b      	str	r3, [r7, #4]

		return xReturn;
 800eb94:	687b      	ldr	r3, [r7, #4]
	}
 800eb96:	4618      	mov	r0, r3
 800eb98:	370c      	adds	r7, #12
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba0:	4770      	bx	lr
 800eba2:	bf00      	nop
 800eba4:	24004dd0 	.word	0x24004dd0

0800eba8 <xTaskGetSchedulerState>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< Updated upstream
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b7ee:	4b0b      	ldr	r3, [pc, #44]	; (800b81c <xTaskGetSchedulerState+0x34>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d102      	bne.n	800b7fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	607b      	str	r3, [r7, #4]
 800b7fa:	e008      	b.n	800b80e <xTaskGetSchedulerState+0x26>
=======
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ebae:	4b0b      	ldr	r3, [pc, #44]	; (800ebdc <xTaskGetSchedulerState+0x34>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d102      	bne.n	800ebbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	607b      	str	r3, [r7, #4]
 800ebba:	e008      	b.n	800ebce <xTaskGetSchedulerState+0x26>
>>>>>>> Stashed changes
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< Updated upstream
 800b7fc:	4b08      	ldr	r3, [pc, #32]	; (800b820 <xTaskGetSchedulerState+0x38>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d102      	bne.n	800b80a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b804:	2302      	movs	r3, #2
 800b806:	607b      	str	r3, [r7, #4]
 800b808:	e001      	b.n	800b80e <xTaskGetSchedulerState+0x26>
=======
 800ebbc:	4b08      	ldr	r3, [pc, #32]	; (800ebe0 <xTaskGetSchedulerState+0x38>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d102      	bne.n	800ebca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ebc4:	2302      	movs	r3, #2
 800ebc6:	607b      	str	r3, [r7, #4]
 800ebc8:	e001      	b.n	800ebce <xTaskGetSchedulerState+0x26>
>>>>>>> Stashed changes
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< Updated upstream
 800b80a:	2300      	movs	r3, #0
 800b80c:	607b      	str	r3, [r7, #4]
=======
 800ebca:	2300      	movs	r3, #0
 800ebcc:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
			}
		}

		return xReturn;
<<<<<<< Updated upstream
 800b80e:	687b      	ldr	r3, [r7, #4]
	}
 800b810:	4618      	mov	r0, r3
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr
 800b81c:	24004dd4 	.word	0x24004dd4
 800b820:	24004df0 	.word	0x24004df0

0800b824 <xTaskPriorityInherit>:
=======
 800ebce:	687b      	ldr	r3, [r7, #4]
	}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	370c      	adds	r7, #12
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr
 800ebdc:	240052b0 	.word	0x240052b0
 800ebe0:	240052cc 	.word	0x240052cc

0800ebe4 <xTaskPriorityInherit>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< Updated upstream
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b830:	2300      	movs	r3, #0
 800b832:	60fb      	str	r3, [r7, #12]
=======
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
<<<<<<< Updated upstream
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d051      	beq.n	800b8de <xTaskPriorityInherit+0xba>
=======
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d051      	beq.n	800ec9e <xTaskPriorityInherit+0xba>
>>>>>>> Stashed changes
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b83e:	4b2a      	ldr	r3, [pc, #168]	; (800b8e8 <xTaskPriorityInherit+0xc4>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b844:	429a      	cmp	r2, r3
 800b846:	d241      	bcs.n	800b8cc <xTaskPriorityInherit+0xa8>
=======
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebfe:	4b2a      	ldr	r3, [pc, #168]	; (800eca8 <xTaskPriorityInherit+0xc4>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d241      	bcs.n	800ec8c <xTaskPriorityInherit+0xa8>
>>>>>>> Stashed changes
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< Updated upstream
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	db06      	blt.n	800b85e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b850:	4b25      	ldr	r3, [pc, #148]	; (800b8e8 <xTaskPriorityInherit+0xc4>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b856:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	619a      	str	r2, [r3, #24]
=======
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	699b      	ldr	r3, [r3, #24]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	db06      	blt.n	800ec1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec10:	4b25      	ldr	r3, [pc, #148]	; (800eca8 <xTaskPriorityInherit+0xc4>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< Updated upstream
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	6959      	ldr	r1, [r3, #20]
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b866:	4613      	mov	r3, r2
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	4413      	add	r3, r2
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	4a1f      	ldr	r2, [pc, #124]	; (800b8ec <xTaskPriorityInherit+0xc8>)
 800b870:	4413      	add	r3, r2
 800b872:	4299      	cmp	r1, r3
 800b874:	d122      	bne.n	800b8bc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	3304      	adds	r3, #4
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7fd ffe0 	bl	8009840 <uxListRemove>
=======
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	6959      	ldr	r1, [r3, #20]
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec26:	4613      	mov	r3, r2
 800ec28:	009b      	lsls	r3, r3, #2
 800ec2a:	4413      	add	r3, r2
 800ec2c:	009b      	lsls	r3, r3, #2
 800ec2e:	4a1f      	ldr	r2, [pc, #124]	; (800ecac <xTaskPriorityInherit+0xc8>)
 800ec30:	4413      	add	r3, r2
 800ec32:	4299      	cmp	r1, r3
 800ec34:	d122      	bne.n	800ec7c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	3304      	adds	r3, #4
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fd ffe2 	bl	800cc04 <uxListRemove>
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< Updated upstream
 800b880:	4b19      	ldr	r3, [pc, #100]	; (800b8e8 <xTaskPriorityInherit+0xc4>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b88e:	4b18      	ldr	r3, [pc, #96]	; (800b8f0 <xTaskPriorityInherit+0xcc>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	429a      	cmp	r2, r3
 800b894:	d903      	bls.n	800b89e <xTaskPriorityInherit+0x7a>
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89a:	4a15      	ldr	r2, [pc, #84]	; (800b8f0 <xTaskPriorityInherit+0xcc>)
 800b89c:	6013      	str	r3, [r2, #0]
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4413      	add	r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4a10      	ldr	r2, [pc, #64]	; (800b8ec <xTaskPriorityInherit+0xc8>)
 800b8ac:	441a      	add	r2, r3
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	3304      	adds	r3, #4
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	4610      	mov	r0, r2
 800b8b6:	f7fd ff66 	bl	8009786 <vListInsertEnd>
 800b8ba:	e004      	b.n	800b8c6 <xTaskPriorityInherit+0xa2>
=======
 800ec40:	4b19      	ldr	r3, [pc, #100]	; (800eca8 <xTaskPriorityInherit+0xc4>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec4e:	4b18      	ldr	r3, [pc, #96]	; (800ecb0 <xTaskPriorityInherit+0xcc>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d903      	bls.n	800ec5e <xTaskPriorityInherit+0x7a>
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec5a:	4a15      	ldr	r2, [pc, #84]	; (800ecb0 <xTaskPriorityInherit+0xcc>)
 800ec5c:	6013      	str	r3, [r2, #0]
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec62:	4613      	mov	r3, r2
 800ec64:	009b      	lsls	r3, r3, #2
 800ec66:	4413      	add	r3, r2
 800ec68:	009b      	lsls	r3, r3, #2
 800ec6a:	4a10      	ldr	r2, [pc, #64]	; (800ecac <xTaskPriorityInherit+0xc8>)
 800ec6c:	441a      	add	r2, r3
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	3304      	adds	r3, #4
 800ec72:	4619      	mov	r1, r3
 800ec74:	4610      	mov	r0, r2
 800ec76:	f7fd ff68 	bl	800cb4a <vListInsertEnd>
 800ec7a:	e004      	b.n	800ec86 <xTaskPriorityInherit+0xa2>
>>>>>>> Stashed changes
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< Updated upstream
 800b8bc:	4b0a      	ldr	r3, [pc, #40]	; (800b8e8 <xTaskPriorityInherit+0xc4>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800ec7c:	4b0a      	ldr	r3, [pc, #40]	; (800eca8 <xTaskPriorityInherit+0xc4>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> Stashed changes
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
<<<<<<< Updated upstream
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	60fb      	str	r3, [r7, #12]
 800b8ca:	e008      	b.n	800b8de <xTaskPriorityInherit+0xba>
=======
 800ec86:	2301      	movs	r3, #1
 800ec88:	60fb      	str	r3, [r7, #12]
 800ec8a:	e008      	b.n	800ec9e <xTaskPriorityInherit+0xba>
>>>>>>> Stashed changes
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8d0:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <xTaskPriorityInherit+0xc4>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d201      	bcs.n	800b8de <xTaskPriorityInherit+0xba>
=======
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec90:	4b05      	ldr	r3, [pc, #20]	; (800eca8 <xTaskPriorityInherit+0xc4>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d201      	bcs.n	800ec9e <xTaskPriorityInherit+0xba>
>>>>>>> Stashed changes
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
<<<<<<< Updated upstream
 800b8da:	2301      	movs	r3, #1
 800b8dc:	60fb      	str	r3, [r7, #12]
=======
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< Updated upstream
 800b8de:	68fb      	ldr	r3, [r7, #12]
	}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3710      	adds	r7, #16
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	240048f4 	.word	0x240048f4
 800b8ec:	240048f8 	.word	0x240048f8
 800b8f0:	24004dd0 	.word	0x24004dd0

0800b8f4 <xTaskPriorityDisinherit>:
=======
 800ec9e:	68fb      	ldr	r3, [r7, #12]
	}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3710      	adds	r7, #16
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	24004dd0 	.word	0x24004dd0
 800ecac:	24004dd4 	.word	0x24004dd4
 800ecb0:	240052ac 	.word	0x240052ac

0800ecb4 <xTaskPriorityDisinherit>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< Updated upstream
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b086      	sub	sp, #24
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b900:	2300      	movs	r3, #0
 800b902:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d056      	beq.n	800b9b8 <xTaskPriorityDisinherit+0xc4>
=======
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b086      	sub	sp, #24
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d056      	beq.n	800ed78 <xTaskPriorityDisinherit+0xc4>
>>>>>>> Stashed changes
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< Updated upstream
 800b90a:	4b2e      	ldr	r3, [pc, #184]	; (800b9c4 <xTaskPriorityDisinherit+0xd0>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	693a      	ldr	r2, [r7, #16]
 800b910:	429a      	cmp	r2, r3
 800b912:	d00a      	beq.n	800b92a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b918:	f383 8811 	msr	BASEPRI, r3
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	60fb      	str	r3, [r7, #12]
}
 800b926:	bf00      	nop
 800b928:	e7fe      	b.n	800b928 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d10a      	bne.n	800b948 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	60bb      	str	r3, [r7, #8]
}
 800b944:	bf00      	nop
 800b946:	e7fe      	b.n	800b946 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b94c:	1e5a      	subs	r2, r3, #1
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	651a      	str	r2, [r3, #80]	; 0x50
=======
 800ecca:	4b2e      	ldr	r3, [pc, #184]	; (800ed84 <xTaskPriorityDisinherit+0xd0>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	693a      	ldr	r2, [r7, #16]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d00a      	beq.n	800ecea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ecd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd8:	f383 8811 	msr	BASEPRI, r3
 800ecdc:	f3bf 8f6f 	isb	sy
 800ece0:	f3bf 8f4f 	dsb	sy
 800ece4:	60fb      	str	r3, [r7, #12]
}
 800ece6:	bf00      	nop
 800ece8:	e7fe      	b.n	800ece8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d10a      	bne.n	800ed08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ecf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf6:	f383 8811 	msr	BASEPRI, r3
 800ecfa:	f3bf 8f6f 	isb	sy
 800ecfe:	f3bf 8f4f 	dsb	sy
 800ed02:	60bb      	str	r3, [r7, #8]
}
 800ed04:	bf00      	nop
 800ed06:	e7fe      	b.n	800ed06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed0c:	1e5a      	subs	r2, r3, #1
 800ed0e:	693b      	ldr	r3, [r7, #16]
 800ed10:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> Stashed changes

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< Updated upstream
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d02c      	beq.n	800b9b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b962:	2b00      	cmp	r3, #0
 800b964:	d128      	bne.n	800b9b8 <xTaskPriorityDisinherit+0xc4>
=======
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d02c      	beq.n	800ed78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d128      	bne.n	800ed78 <xTaskPriorityDisinherit+0xc4>
>>>>>>> Stashed changes
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	3304      	adds	r3, #4
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fd ff68 	bl	8009840 <uxListRemove>
=======
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	3304      	adds	r3, #4
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7fd ff6a 	bl	800cc04 <uxListRemove>
>>>>>>> Stashed changes
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< Updated upstream
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> Stashed changes

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b988:	4b0f      	ldr	r3, [pc, #60]	; (800b9c8 <xTaskPriorityDisinherit+0xd4>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d903      	bls.n	800b998 <xTaskPriorityDisinherit+0xa4>
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b994:	4a0c      	ldr	r2, [pc, #48]	; (800b9c8 <xTaskPriorityDisinherit+0xd4>)
 800b996:	6013      	str	r3, [r2, #0]
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b99c:	4613      	mov	r3, r2
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	4413      	add	r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	4a09      	ldr	r2, [pc, #36]	; (800b9cc <xTaskPriorityDisinherit+0xd8>)
 800b9a6:	441a      	add	r2, r3
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	3304      	adds	r3, #4
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	f7fd fee9 	bl	8009786 <vListInsertEnd>
=======
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed48:	4b0f      	ldr	r3, [pc, #60]	; (800ed88 <xTaskPriorityDisinherit+0xd4>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d903      	bls.n	800ed58 <xTaskPriorityDisinherit+0xa4>
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed54:	4a0c      	ldr	r2, [pc, #48]	; (800ed88 <xTaskPriorityDisinherit+0xd4>)
 800ed56:	6013      	str	r3, [r2, #0]
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed5c:	4613      	mov	r3, r2
 800ed5e:	009b      	lsls	r3, r3, #2
 800ed60:	4413      	add	r3, r2
 800ed62:	009b      	lsls	r3, r3, #2
 800ed64:	4a09      	ldr	r2, [pc, #36]	; (800ed8c <xTaskPriorityDisinherit+0xd8>)
 800ed66:	441a      	add	r2, r3
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	3304      	adds	r3, #4
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	4610      	mov	r0, r2
 800ed70:	f7fd feeb 	bl	800cb4a <vListInsertEnd>
>>>>>>> Stashed changes
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< Updated upstream
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	617b      	str	r3, [r7, #20]
=======
 800ed74:	2301      	movs	r3, #1
 800ed76:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< Updated upstream
 800b9b8:	697b      	ldr	r3, [r7, #20]
	}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3718      	adds	r7, #24
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	240048f4 	.word	0x240048f4
 800b9c8:	24004dd0 	.word	0x24004dd0
 800b9cc:	240048f8 	.word	0x240048f8

0800b9d0 <vTaskPriorityDisinheritAfterTimeout>:
=======
 800ed78:	697b      	ldr	r3, [r7, #20]
	}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3718      	adds	r7, #24
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}
 800ed82:	bf00      	nop
 800ed84:	24004dd0 	.word	0x24004dd0
 800ed88:	240052ac 	.word	0x240052ac
 800ed8c:	24004dd4 	.word	0x24004dd4

0800ed90 <vTaskPriorityDisinheritAfterTimeout>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
<<<<<<< Updated upstream
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b088      	sub	sp, #32
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d06a      	beq.n	800babe <vTaskPriorityDisinheritAfterTimeout+0xee>
=======
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b088      	sub	sp, #32
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ed9e:	2301      	movs	r3, #1
 800eda0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d06a      	beq.n	800ee7e <vTaskPriorityDisinheritAfterTimeout+0xee>
>>>>>>> Stashed changes
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
<<<<<<< Updated upstream
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10a      	bne.n	800ba06 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f4:	f383 8811 	msr	BASEPRI, r3
 800b9f8:	f3bf 8f6f 	isb	sy
 800b9fc:	f3bf 8f4f 	dsb	sy
 800ba00:	60fb      	str	r3, [r7, #12]
}
 800ba02:	bf00      	nop
 800ba04:	e7fe      	b.n	800ba04 <vTaskPriorityDisinheritAfterTimeout+0x34>
=======
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edac:	2b00      	cmp	r3, #0
 800edae:	d10a      	bne.n	800edc6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800edb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb4:	f383 8811 	msr	BASEPRI, r3
 800edb8:	f3bf 8f6f 	isb	sy
 800edbc:	f3bf 8f4f 	dsb	sy
 800edc0:	60fb      	str	r3, [r7, #12]
}
 800edc2:	bf00      	nop
 800edc4:	e7fe      	b.n	800edc4 <vTaskPriorityDisinheritAfterTimeout+0x34>
>>>>>>> Stashed changes

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
<<<<<<< Updated upstream
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba0a:	683a      	ldr	r2, [r7, #0]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d902      	bls.n	800ba16 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	61fb      	str	r3, [r7, #28]
 800ba14:	e002      	b.n	800ba1c <vTaskPriorityDisinheritAfterTimeout+0x4c>
=======
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edca:	683a      	ldr	r2, [r7, #0]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d902      	bls.n	800edd6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	61fb      	str	r3, [r7, #28]
 800edd4:	e002      	b.n	800eddc <vTaskPriorityDisinheritAfterTimeout+0x4c>
>>>>>>> Stashed changes
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
<<<<<<< Updated upstream
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba1a:	61fb      	str	r3, [r7, #28]
=======
 800edd6:	69bb      	ldr	r3, [r7, #24]
 800edd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edda:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
<<<<<<< Updated upstream
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba20:	69fa      	ldr	r2, [r7, #28]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d04b      	beq.n	800babe <vTaskPriorityDisinheritAfterTimeout+0xee>
=======
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ede0:	69fa      	ldr	r2, [r7, #28]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d04b      	beq.n	800ee7e <vTaskPriorityDisinheritAfterTimeout+0xee>
>>>>>>> Stashed changes
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
<<<<<<< Updated upstream
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba2a:	697a      	ldr	r2, [r7, #20]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d146      	bne.n	800babe <vTaskPriorityDisinheritAfterTimeout+0xee>
=======
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edea:	697a      	ldr	r2, [r7, #20]
 800edec:	429a      	cmp	r2, r3
 800edee:	d146      	bne.n	800ee7e <vTaskPriorityDisinheritAfterTimeout+0xee>
>>>>>>> Stashed changes
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
<<<<<<< Updated upstream
 800ba30:	4b25      	ldr	r3, [pc, #148]	; (800bac8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	69ba      	ldr	r2, [r7, #24]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d10a      	bne.n	800ba50 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ba3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3e:	f383 8811 	msr	BASEPRI, r3
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	60bb      	str	r3, [r7, #8]
}
 800ba4c:	bf00      	nop
 800ba4e:	e7fe      	b.n	800ba4e <vTaskPriorityDisinheritAfterTimeout+0x7e>
=======
 800edf0:	4b25      	ldr	r3, [pc, #148]	; (800ee88 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	69ba      	ldr	r2, [r7, #24]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d10a      	bne.n	800ee10 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800edfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfe:	f383 8811 	msr	BASEPRI, r3
 800ee02:	f3bf 8f6f 	isb	sy
 800ee06:	f3bf 8f4f 	dsb	sy
 800ee0a:	60bb      	str	r3, [r7, #8]
}
 800ee0c:	bf00      	nop
 800ee0e:	e7fe      	b.n	800ee0e <vTaskPriorityDisinheritAfterTimeout+0x7e>
>>>>>>> Stashed changes

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
<<<<<<< Updated upstream
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba54:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	69fa      	ldr	r2, [r7, #28]
 800ba5a:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800ee10:	69bb      	ldr	r3, [r7, #24]
 800ee12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	69fa      	ldr	r2, [r7, #28]
 800ee1a:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> Stashed changes

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< Updated upstream
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	699b      	ldr	r3, [r3, #24]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	db04      	blt.n	800ba6e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	619a      	str	r2, [r3, #24]
=======
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	699b      	ldr	r3, [r3, #24]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	db04      	blt.n	800ee2e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee24:	69fb      	ldr	r3, [r7, #28]
 800ee26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ee2a:	69bb      	ldr	r3, [r7, #24]
 800ee2c:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< Updated upstream
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	6959      	ldr	r1, [r3, #20]
 800ba72:	693a      	ldr	r2, [r7, #16]
 800ba74:	4613      	mov	r3, r2
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	4413      	add	r3, r2
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4a13      	ldr	r2, [pc, #76]	; (800bacc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ba7e:	4413      	add	r3, r2
 800ba80:	4299      	cmp	r1, r3
 800ba82:	d11c      	bne.n	800babe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	3304      	adds	r3, #4
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7fd fed9 	bl	8009840 <uxListRemove>
=======
 800ee2e:	69bb      	ldr	r3, [r7, #24]
 800ee30:	6959      	ldr	r1, [r3, #20]
 800ee32:	693a      	ldr	r2, [r7, #16]
 800ee34:	4613      	mov	r3, r2
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	4413      	add	r3, r2
 800ee3a:	009b      	lsls	r3, r3, #2
 800ee3c:	4a13      	ldr	r2, [pc, #76]	; (800ee8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ee3e:	4413      	add	r3, r2
 800ee40:	4299      	cmp	r1, r3
 800ee42:	d11c      	bne.n	800ee7e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee44:	69bb      	ldr	r3, [r7, #24]
 800ee46:	3304      	adds	r3, #4
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f7fd fedb 	bl	800cc04 <uxListRemove>
>>>>>>> Stashed changes
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
<<<<<<< Updated upstream
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba92:	4b0f      	ldr	r3, [pc, #60]	; (800bad0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d903      	bls.n	800baa2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9e:	4a0c      	ldr	r2, [pc, #48]	; (800bad0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800baa0:	6013      	str	r3, [r2, #0]
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa6:	4613      	mov	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4413      	add	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	4a07      	ldr	r2, [pc, #28]	; (800bacc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bab0:	441a      	add	r2, r3
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	3304      	adds	r3, #4
 800bab6:	4619      	mov	r1, r3
 800bab8:	4610      	mov	r0, r2
 800baba:	f7fd fe64 	bl	8009786 <vListInsertEnd>
=======
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee52:	4b0f      	ldr	r3, [pc, #60]	; (800ee90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d903      	bls.n	800ee62 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee5e:	4a0c      	ldr	r2, [pc, #48]	; (800ee90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ee60:	6013      	str	r3, [r2, #0]
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee66:	4613      	mov	r3, r2
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	4413      	add	r3, r2
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	4a07      	ldr	r2, [pc, #28]	; (800ee8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ee70:	441a      	add	r2, r3
 800ee72:	69bb      	ldr	r3, [r7, #24]
 800ee74:	3304      	adds	r3, #4
 800ee76:	4619      	mov	r1, r3
 800ee78:	4610      	mov	r0, r2
 800ee7a:	f7fd fe66 	bl	800cb4a <vListInsertEnd>
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< Updated upstream
 800babe:	bf00      	nop
 800bac0:	3720      	adds	r7, #32
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	240048f4 	.word	0x240048f4
 800bacc:	240048f8 	.word	0x240048f8
 800bad0:	24004dd0 	.word	0x24004dd0

0800bad4 <pvTaskIncrementMutexHeldCount>:
=======
 800ee7e:	bf00      	nop
 800ee80:	3720      	adds	r7, #32
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	24004dd0 	.word	0x24004dd0
 800ee8c:	24004dd4 	.word	0x24004dd4
 800ee90:	240052ac 	.word	0x240052ac

0800ee94 <pvTaskIncrementMutexHeldCount>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
<<<<<<< Updated upstream
 800bad4:	b480      	push	{r7}
 800bad6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bad8:	4b07      	ldr	r3, [pc, #28]	; (800baf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d004      	beq.n	800baea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bae0:	4b05      	ldr	r3, [pc, #20]	; (800baf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bae6:	3201      	adds	r2, #1
 800bae8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800baea:	4b03      	ldr	r3, [pc, #12]	; (800baf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800baec:	681b      	ldr	r3, [r3, #0]
	}
 800baee:	4618      	mov	r0, r3
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	240048f4 	.word	0x240048f4

0800bafc <prvAddCurrentTaskToDelayedList>:
=======
 800ee94:	b480      	push	{r7}
 800ee96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ee98:	4b07      	ldr	r3, [pc, #28]	; (800eeb8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d004      	beq.n	800eeaa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eea0:	4b05      	ldr	r3, [pc, #20]	; (800eeb8 <pvTaskIncrementMutexHeldCount+0x24>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eea6:	3201      	adds	r2, #1
 800eea8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800eeaa:	4b03      	ldr	r3, [pc, #12]	; (800eeb8 <pvTaskIncrementMutexHeldCount+0x24>)
 800eeac:	681b      	ldr	r3, [r3, #0]
	}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb6:	4770      	bx	lr
 800eeb8:	24004dd0 	.word	0x24004dd0

0800eebc <prvAddCurrentTaskToDelayedList>:
>>>>>>> Stashed changes

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< Updated upstream
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb06:	4b21      	ldr	r3, [pc, #132]	; (800bb8c <prvAddCurrentTaskToDelayedList+0x90>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	60fb      	str	r3, [r7, #12]
=======
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b084      	sub	sp, #16
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eec6:	4b21      	ldr	r3, [pc, #132]	; (800ef4c <prvAddCurrentTaskToDelayedList+0x90>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800bb0c:	4b20      	ldr	r3, [pc, #128]	; (800bb90 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	3304      	adds	r3, #4
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fd fe94 	bl	8009840 <uxListRemove>
=======
 800eecc:	4b20      	ldr	r3, [pc, #128]	; (800ef50 <prvAddCurrentTaskToDelayedList+0x94>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	3304      	adds	r3, #4
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fd fe96 	bl	800cc04 <uxListRemove>
>>>>>>> Stashed changes
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< Updated upstream
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb1e:	d10a      	bne.n	800bb36 <prvAddCurrentTaskToDelayedList+0x3a>
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d007      	beq.n	800bb36 <prvAddCurrentTaskToDelayedList+0x3a>
=======
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eede:	d10a      	bne.n	800eef6 <prvAddCurrentTaskToDelayedList+0x3a>
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d007      	beq.n	800eef6 <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> Stashed changes
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< Updated upstream
 800bb26:	4b1a      	ldr	r3, [pc, #104]	; (800bb90 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	4819      	ldr	r0, [pc, #100]	; (800bb94 <prvAddCurrentTaskToDelayedList+0x98>)
 800bb30:	f7fd fe29 	bl	8009786 <vListInsertEnd>
=======
 800eee6:	4b1a      	ldr	r3, [pc, #104]	; (800ef50 <prvAddCurrentTaskToDelayedList+0x94>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	3304      	adds	r3, #4
 800eeec:	4619      	mov	r1, r3
 800eeee:	4819      	ldr	r0, [pc, #100]	; (800ef54 <prvAddCurrentTaskToDelayedList+0x98>)
 800eef0:	f7fd fe2b 	bl	800cb4a <vListInsertEnd>
>>>>>>> Stashed changes

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< Updated upstream
 800bb34:	e026      	b.n	800bb84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb3e:	4b14      	ldr	r3, [pc, #80]	; (800bb90 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	68ba      	ldr	r2, [r7, #8]
 800bb44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d209      	bcs.n	800bb62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb4e:	4b12      	ldr	r3, [pc, #72]	; (800bb98 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	4b0f      	ldr	r3, [pc, #60]	; (800bb90 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	3304      	adds	r3, #4
 800bb58:	4619      	mov	r1, r3
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	f7fd fe37 	bl	80097ce <vListInsert>
}
 800bb60:	e010      	b.n	800bb84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb62:	4b0e      	ldr	r3, [pc, #56]	; (800bb9c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	4b0a      	ldr	r3, [pc, #40]	; (800bb90 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	4610      	mov	r0, r2
 800bb70:	f7fd fe2d 	bl	80097ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bb74:	4b0a      	ldr	r3, [pc, #40]	; (800bba0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d202      	bcs.n	800bb84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bb7e:	4a08      	ldr	r2, [pc, #32]	; (800bba0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	6013      	str	r3, [r2, #0]
}
 800bb84:	bf00      	nop
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	24004dcc 	.word	0x24004dcc
 800bb90:	240048f4 	.word	0x240048f4
 800bb94:	24004db4 	.word	0x24004db4
 800bb98:	24004d84 	.word	0x24004d84
 800bb9c:	24004d80 	.word	0x24004d80
 800bba0:	24004de8 	.word	0x24004de8

0800bba4 <xTimerCreateTimerTask>:
=======
 800eef4:	e026      	b.n	800ef44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eef6:	68fa      	ldr	r2, [r7, #12]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4413      	add	r3, r2
 800eefc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eefe:	4b14      	ldr	r3, [pc, #80]	; (800ef50 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	68ba      	ldr	r2, [r7, #8]
 800ef04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ef06:	68ba      	ldr	r2, [r7, #8]
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d209      	bcs.n	800ef22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef0e:	4b12      	ldr	r3, [pc, #72]	; (800ef58 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ef10:	681a      	ldr	r2, [r3, #0]
 800ef12:	4b0f      	ldr	r3, [pc, #60]	; (800ef50 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	3304      	adds	r3, #4
 800ef18:	4619      	mov	r1, r3
 800ef1a:	4610      	mov	r0, r2
 800ef1c:	f7fd fe39 	bl	800cb92 <vListInsert>
}
 800ef20:	e010      	b.n	800ef44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef22:	4b0e      	ldr	r3, [pc, #56]	; (800ef5c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ef24:	681a      	ldr	r2, [r3, #0]
 800ef26:	4b0a      	ldr	r3, [pc, #40]	; (800ef50 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	3304      	adds	r3, #4
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	4610      	mov	r0, r2
 800ef30:	f7fd fe2f 	bl	800cb92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ef34:	4b0a      	ldr	r3, [pc, #40]	; (800ef60 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	68ba      	ldr	r2, [r7, #8]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d202      	bcs.n	800ef44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ef3e:	4a08      	ldr	r2, [pc, #32]	; (800ef60 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	6013      	str	r3, [r2, #0]
}
 800ef44:	bf00      	nop
 800ef46:	3710      	adds	r7, #16
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	240052a8 	.word	0x240052a8
 800ef50:	24004dd0 	.word	0x24004dd0
 800ef54:	24005290 	.word	0x24005290
 800ef58:	24005260 	.word	0x24005260
 800ef5c:	2400525c 	.word	0x2400525c
 800ef60:	240052c4 	.word	0x240052c4

0800ef64 <xTimerCreateTimerTask>:
>>>>>>> Stashed changes
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
<<<<<<< Updated upstream
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b08a      	sub	sp, #40	; 0x28
 800bba8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	617b      	str	r3, [r7, #20]
=======
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b08a      	sub	sp, #40	; 0x28
 800ef68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
<<<<<<< Updated upstream
 800bbae:	f000 fb07 	bl	800c1c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bbb2:	4b1c      	ldr	r3, [pc, #112]	; (800bc24 <xTimerCreateTimerTask+0x80>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d021      	beq.n	800bbfe <xTimerCreateTimerTask+0x5a>
=======
 800ef6e:	f000 fb07 	bl	800f580 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ef72:	4b1c      	ldr	r3, [pc, #112]	; (800efe4 <xTimerCreateTimerTask+0x80>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d021      	beq.n	800efbe <xTimerCreateTimerTask+0x5a>
>>>>>>> Stashed changes
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
<<<<<<< Updated upstream
 800bbba:	2300      	movs	r3, #0
 800bbbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bbc2:	1d3a      	adds	r2, r7, #4
 800bbc4:	f107 0108 	add.w	r1, r7, #8
 800bbc8:	f107 030c 	add.w	r3, r7, #12
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7fd fba9 	bl	8009324 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bbd2:	6879      	ldr	r1, [r7, #4]
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	9202      	str	r2, [sp, #8]
 800bbda:	9301      	str	r3, [sp, #4]
 800bbdc:	2302      	movs	r3, #2
 800bbde:	9300      	str	r3, [sp, #0]
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	460a      	mov	r2, r1
 800bbe4:	4910      	ldr	r1, [pc, #64]	; (800bc28 <xTimerCreateTimerTask+0x84>)
 800bbe6:	4811      	ldr	r0, [pc, #68]	; (800bc2c <xTimerCreateTimerTask+0x88>)
 800bbe8:	f7fe ffa6 	bl	800ab38 <xTaskCreateStatic>
 800bbec:	4603      	mov	r3, r0
 800bbee:	4a10      	ldr	r2, [pc, #64]	; (800bc30 <xTimerCreateTimerTask+0x8c>)
 800bbf0:	6013      	str	r3, [r2, #0]
=======
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ef82:	1d3a      	adds	r2, r7, #4
 800ef84:	f107 0108 	add.w	r1, r7, #8
 800ef88:	f107 030c 	add.w	r3, r7, #12
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7fd fbab 	bl	800c6e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ef92:	6879      	ldr	r1, [r7, #4]
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	68fa      	ldr	r2, [r7, #12]
 800ef98:	9202      	str	r2, [sp, #8]
 800ef9a:	9301      	str	r3, [sp, #4]
 800ef9c:	2302      	movs	r3, #2
 800ef9e:	9300      	str	r3, [sp, #0]
 800efa0:	2300      	movs	r3, #0
 800efa2:	460a      	mov	r2, r1
 800efa4:	4910      	ldr	r1, [pc, #64]	; (800efe8 <xTimerCreateTimerTask+0x84>)
 800efa6:	4811      	ldr	r0, [pc, #68]	; (800efec <xTimerCreateTimerTask+0x88>)
 800efa8:	f7fe ffa6 	bl	800def8 <xTaskCreateStatic>
 800efac:	4603      	mov	r3, r0
 800efae:	4a10      	ldr	r2, [pc, #64]	; (800eff0 <xTimerCreateTimerTask+0x8c>)
 800efb0:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
<<<<<<< Updated upstream
 800bbf2:	4b0f      	ldr	r3, [pc, #60]	; (800bc30 <xTimerCreateTimerTask+0x8c>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d001      	beq.n	800bbfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	617b      	str	r3, [r7, #20]
=======
 800efb2:	4b0f      	ldr	r3, [pc, #60]	; (800eff0 <xTimerCreateTimerTask+0x8c>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d001      	beq.n	800efbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800efba:	2301      	movs	r3, #1
 800efbc:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
<<<<<<< Updated upstream
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10a      	bne.n	800bc1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc08:	f383 8811 	msr	BASEPRI, r3
 800bc0c:	f3bf 8f6f 	isb	sy
 800bc10:	f3bf 8f4f 	dsb	sy
 800bc14:	613b      	str	r3, [r7, #16]
}
 800bc16:	bf00      	nop
 800bc18:	e7fe      	b.n	800bc18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bc1a:	697b      	ldr	r3, [r7, #20]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3718      	adds	r7, #24
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	24004e24 	.word	0x24004e24
 800bc28:	0800fd04 	.word	0x0800fd04
 800bc2c:	0800bd69 	.word	0x0800bd69
 800bc30:	24004e28 	.word	0x24004e28

0800bc34 <xTimerGenericCommand>:
=======
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d10a      	bne.n	800efda <xTimerCreateTimerTask+0x76>
	__asm volatile
 800efc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc8:	f383 8811 	msr	BASEPRI, r3
 800efcc:	f3bf 8f6f 	isb	sy
 800efd0:	f3bf 8f4f 	dsb	sy
 800efd4:	613b      	str	r3, [r7, #16]
}
 800efd6:	bf00      	nop
 800efd8:	e7fe      	b.n	800efd8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800efda:	697b      	ldr	r3, [r7, #20]
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3718      	adds	r7, #24
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	24005300 	.word	0x24005300
 800efe8:	08013c78 	.word	0x08013c78
 800efec:	0800f129 	.word	0x0800f129
 800eff0:	24005304 	.word	0x24005304

0800eff4 <xTimerGenericCommand>:
>>>>>>> Stashed changes
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b08a      	sub	sp, #40	; 0x28
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
 800bc40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bc42:	2300      	movs	r3, #0
 800bc44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10a      	bne.n	800bc62 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc50:	f383 8811 	msr	BASEPRI, r3
 800bc54:	f3bf 8f6f 	isb	sy
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	623b      	str	r3, [r7, #32]
}
 800bc5e:	bf00      	nop
 800bc60:	e7fe      	b.n	800bc60 <xTimerGenericCommand+0x2c>
=======
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b08a      	sub	sp, #40	; 0x28
 800eff8:	af00      	add	r7, sp, #0
 800effa:	60f8      	str	r0, [r7, #12]
 800effc:	60b9      	str	r1, [r7, #8]
 800effe:	607a      	str	r2, [r7, #4]
 800f000:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f002:	2300      	movs	r3, #0
 800f004:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d10a      	bne.n	800f022 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f010:	f383 8811 	msr	BASEPRI, r3
 800f014:	f3bf 8f6f 	isb	sy
 800f018:	f3bf 8f4f 	dsb	sy
 800f01c:	623b      	str	r3, [r7, #32]
}
 800f01e:	bf00      	nop
 800f020:	e7fe      	b.n	800f020 <xTimerGenericCommand+0x2c>
>>>>>>> Stashed changes

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
<<<<<<< Updated upstream
 800bc62:	4b1a      	ldr	r3, [pc, #104]	; (800bccc <xTimerGenericCommand+0x98>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d02a      	beq.n	800bcc0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	2b05      	cmp	r3, #5
 800bc7a:	dc18      	bgt.n	800bcae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bc7c:	f7ff fdb4 	bl	800b7e8 <xTaskGetSchedulerState>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d109      	bne.n	800bc9a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bc86:	4b11      	ldr	r3, [pc, #68]	; (800bccc <xTimerGenericCommand+0x98>)
 800bc88:	6818      	ldr	r0, [r3, #0]
 800bc8a:	f107 0110 	add.w	r1, r7, #16
 800bc8e:	2300      	movs	r3, #0
 800bc90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc92:	f7fe fa45 	bl	800a120 <xQueueGenericSend>
 800bc96:	6278      	str	r0, [r7, #36]	; 0x24
 800bc98:	e012      	b.n	800bcc0 <xTimerGenericCommand+0x8c>
=======
 800f022:	4b1a      	ldr	r3, [pc, #104]	; (800f08c <xTimerGenericCommand+0x98>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d02a      	beq.n	800f080 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	2b05      	cmp	r3, #5
 800f03a:	dc18      	bgt.n	800f06e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f03c:	f7ff fdb4 	bl	800eba8 <xTaskGetSchedulerState>
 800f040:	4603      	mov	r3, r0
 800f042:	2b02      	cmp	r3, #2
 800f044:	d109      	bne.n	800f05a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f046:	4b11      	ldr	r3, [pc, #68]	; (800f08c <xTimerGenericCommand+0x98>)
 800f048:	6818      	ldr	r0, [r3, #0]
 800f04a:	f107 0110 	add.w	r1, r7, #16
 800f04e:	2300      	movs	r3, #0
 800f050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f052:	f7fe fa45 	bl	800d4e0 <xQueueGenericSend>
 800f056:	6278      	str	r0, [r7, #36]	; 0x24
 800f058:	e012      	b.n	800f080 <xTimerGenericCommand+0x8c>
>>>>>>> Stashed changes
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
<<<<<<< Updated upstream
 800bc9a:	4b0c      	ldr	r3, [pc, #48]	; (800bccc <xTimerGenericCommand+0x98>)
 800bc9c:	6818      	ldr	r0, [r3, #0]
 800bc9e:	f107 0110 	add.w	r1, r7, #16
 800bca2:	2300      	movs	r3, #0
 800bca4:	2200      	movs	r2, #0
 800bca6:	f7fe fa3b 	bl	800a120 <xQueueGenericSend>
 800bcaa:	6278      	str	r0, [r7, #36]	; 0x24
 800bcac:	e008      	b.n	800bcc0 <xTimerGenericCommand+0x8c>
=======
 800f05a:	4b0c      	ldr	r3, [pc, #48]	; (800f08c <xTimerGenericCommand+0x98>)
 800f05c:	6818      	ldr	r0, [r3, #0]
 800f05e:	f107 0110 	add.w	r1, r7, #16
 800f062:	2300      	movs	r3, #0
 800f064:	2200      	movs	r2, #0
 800f066:	f7fe fa3b 	bl	800d4e0 <xQueueGenericSend>
 800f06a:	6278      	str	r0, [r7, #36]	; 0x24
 800f06c:	e008      	b.n	800f080 <xTimerGenericCommand+0x8c>
>>>>>>> Stashed changes
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
<<<<<<< Updated upstream
 800bcae:	4b07      	ldr	r3, [pc, #28]	; (800bccc <xTimerGenericCommand+0x98>)
 800bcb0:	6818      	ldr	r0, [r3, #0]
 800bcb2:	f107 0110 	add.w	r1, r7, #16
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	683a      	ldr	r2, [r7, #0]
 800bcba:	f7fe fb2f 	bl	800a31c <xQueueGenericSendFromISR>
 800bcbe:	6278      	str	r0, [r7, #36]	; 0x24
=======
 800f06e:	4b07      	ldr	r3, [pc, #28]	; (800f08c <xTimerGenericCommand+0x98>)
 800f070:	6818      	ldr	r0, [r3, #0]
 800f072:	f107 0110 	add.w	r1, r7, #16
 800f076:	2300      	movs	r3, #0
 800f078:	683a      	ldr	r2, [r7, #0]
 800f07a:	f7fe fb2f 	bl	800d6dc <xQueueGenericSendFromISR>
 800f07e:	6278      	str	r0, [r7, #36]	; 0x24
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
<<<<<<< Updated upstream
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3728      	adds	r7, #40	; 0x28
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	24004e24 	.word	0x24004e24

0800bcd0 <prvProcessExpiredTimer>:
=======
 800f080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f082:	4618      	mov	r0, r3
 800f084:	3728      	adds	r7, #40	; 0x28
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	24005300 	.word	0x24005300

0800f090 <prvProcessExpiredTimer>:
>>>>>>> Stashed changes
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
<<<<<<< Updated upstream
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b088      	sub	sp, #32
 800bcd4:	af02      	add	r7, sp, #8
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcda:	4b22      	ldr	r3, [pc, #136]	; (800bd64 <prvProcessExpiredTimer+0x94>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	617b      	str	r3, [r7, #20]
=======
 800f090:	b580      	push	{r7, lr}
 800f092:	b088      	sub	sp, #32
 800f094:	af02      	add	r7, sp, #8
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f09a:	4b22      	ldr	r3, [pc, #136]	; (800f124 <prvProcessExpiredTimer+0x94>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	68db      	ldr	r3, [r3, #12]
 800f0a2:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< Updated upstream
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	3304      	adds	r3, #4
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7fd fda9 	bl	8009840 <uxListRemove>
=======
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	3304      	adds	r3, #4
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7fd fdab 	bl	800cc04 <uxListRemove>
>>>>>>> Stashed changes
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
<<<<<<< Updated upstream
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcf4:	f003 0304 	and.w	r3, r3, #4
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d022      	beq.n	800bd42 <prvProcessExpiredTimer+0x72>
=======
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0b4:	f003 0304 	and.w	r3, r3, #4
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d022      	beq.n	800f102 <prvProcessExpiredTimer+0x72>
>>>>>>> Stashed changes
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
<<<<<<< Updated upstream
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	699a      	ldr	r2, [r3, #24]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	18d1      	adds	r1, r2, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	6978      	ldr	r0, [r7, #20]
 800bd0a:	f000 f8d1 	bl	800beb0 <prvInsertTimerInActiveList>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d01f      	beq.n	800bd54 <prvProcessExpiredTimer+0x84>
=======
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	699a      	ldr	r2, [r3, #24]
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	18d1      	adds	r1, r2, r3
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	683a      	ldr	r2, [r7, #0]
 800f0c8:	6978      	ldr	r0, [r7, #20]
 800f0ca:	f000 f8d1 	bl	800f270 <prvInsertTimerInActiveList>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d01f      	beq.n	800f114 <prvProcessExpiredTimer+0x84>
>>>>>>> Stashed changes
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< Updated upstream
 800bd14:	2300      	movs	r3, #0
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	2300      	movs	r3, #0
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	2100      	movs	r1, #0
 800bd1e:	6978      	ldr	r0, [r7, #20]
 800bd20:	f7ff ff88 	bl	800bc34 <xTimerGenericCommand>
 800bd24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d113      	bne.n	800bd54 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd30:	f383 8811 	msr	BASEPRI, r3
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	60fb      	str	r3, [r7, #12]
}
 800bd3e:	bf00      	nop
 800bd40:	e7fe      	b.n	800bd40 <prvProcessExpiredTimer+0x70>
=======
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	9300      	str	r3, [sp, #0]
 800f0d8:	2300      	movs	r3, #0
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	2100      	movs	r1, #0
 800f0de:	6978      	ldr	r0, [r7, #20]
 800f0e0:	f7ff ff88 	bl	800eff4 <xTimerGenericCommand>
 800f0e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d113      	bne.n	800f114 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f0:	f383 8811 	msr	BASEPRI, r3
 800f0f4:	f3bf 8f6f 	isb	sy
 800f0f8:	f3bf 8f4f 	dsb	sy
 800f0fc:	60fb      	str	r3, [r7, #12]
}
 800f0fe:	bf00      	nop
 800f100:	e7fe      	b.n	800f100 <prvProcessExpiredTimer+0x70>
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< Updated upstream
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd48:	f023 0301 	bic.w	r3, r3, #1
 800bd4c:	b2da      	uxtb	r2, r3
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f108:	f023 0301 	bic.w	r3, r3, #1
 800f10c:	b2da      	uxtb	r2, r3
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< Updated upstream
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	6a1b      	ldr	r3, [r3, #32]
 800bd58:	6978      	ldr	r0, [r7, #20]
 800bd5a:	4798      	blx	r3
}
 800bd5c:	bf00      	nop
 800bd5e:	3718      	adds	r7, #24
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	24004e1c 	.word	0x24004e1c

0800bd68 <prvTimerTask>:
=======
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	6a1b      	ldr	r3, [r3, #32]
 800f118:	6978      	ldr	r0, [r7, #20]
 800f11a:	4798      	blx	r3
}
 800f11c:	bf00      	nop
 800f11e:	3718      	adds	r7, #24
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}
 800f124:	240052f8 	.word	0x240052f8

0800f128 <prvTimerTask>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
<<<<<<< Updated upstream
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
=======
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
<<<<<<< Updated upstream
 800bd70:	f107 0308 	add.w	r3, r7, #8
 800bd74:	4618      	mov	r0, r3
 800bd76:	f000 f857 	bl	800be28 <prvGetNextExpireTime>
 800bd7a:	60f8      	str	r0, [r7, #12]
=======
 800f130:	f107 0308 	add.w	r3, r7, #8
 800f134:	4618      	mov	r0, r3
 800f136:	f000 f857 	bl	800f1e8 <prvGetNextExpireTime>
 800f13a:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
<<<<<<< Updated upstream
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	4619      	mov	r1, r3
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f000 f803 	bl	800bd8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bd86:	f000 f8d5 	bl	800bf34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd8a:	e7f1      	b.n	800bd70 <prvTimerTask+0x8>

0800bd8c <prvProcessTimerOrBlockTask>:
=======
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	4619      	mov	r1, r3
 800f140:	68f8      	ldr	r0, [r7, #12]
 800f142:	f000 f803 	bl	800f14c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f146:	f000 f8d5 	bl	800f2f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f14a:	e7f1      	b.n	800f130 <prvTimerTask+0x8>

0800f14c <prvProcessTimerOrBlockTask>:
>>>>>>> Stashed changes
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
<<<<<<< Updated upstream
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
=======
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
<<<<<<< Updated upstream
 800bd96:	f7ff f92b 	bl	800aff0 <vTaskSuspendAll>
=======
 800f156:	f7ff f92b 	bl	800e3b0 <vTaskSuspendAll>
>>>>>>> Stashed changes
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< Updated upstream
 800bd9a:	f107 0308 	add.w	r3, r7, #8
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f000 f866 	bl	800be70 <prvSampleTimeNow>
 800bda4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d130      	bne.n	800be0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10a      	bne.n	800bdc8 <prvProcessTimerOrBlockTask+0x3c>
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d806      	bhi.n	800bdc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bdba:	f7ff f927 	bl	800b00c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bdbe:	68f9      	ldr	r1, [r7, #12]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f7ff ff85 	bl	800bcd0 <prvProcessExpiredTimer>
=======
 800f15a:	f107 0308 	add.w	r3, r7, #8
 800f15e:	4618      	mov	r0, r3
 800f160:	f000 f866 	bl	800f230 <prvSampleTimeNow>
 800f164:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d130      	bne.n	800f1ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d10a      	bne.n	800f188 <prvProcessTimerOrBlockTask+0x3c>
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	429a      	cmp	r2, r3
 800f178:	d806      	bhi.n	800f188 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f17a:	f7ff f927 	bl	800e3cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f17e:	68f9      	ldr	r1, [r7, #12]
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f7ff ff85 	bl	800f090 <prvProcessExpiredTimer>
>>>>>>> Stashed changes
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
<<<<<<< Updated upstream
 800bdc6:	e024      	b.n	800be12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d008      	beq.n	800bde0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bdce:	4b13      	ldr	r3, [pc, #76]	; (800be1c <prvProcessTimerOrBlockTask+0x90>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d101      	bne.n	800bddc <prvProcessTimerOrBlockTask+0x50>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e000      	b.n	800bdde <prvProcessTimerOrBlockTask+0x52>
 800bddc:	2300      	movs	r3, #0
 800bdde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bde0:	4b0f      	ldr	r3, [pc, #60]	; (800be20 <prvProcessTimerOrBlockTask+0x94>)
 800bde2:	6818      	ldr	r0, [r3, #0]
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	1ad3      	subs	r3, r2, r3
 800bdea:	683a      	ldr	r2, [r7, #0]
 800bdec:	4619      	mov	r1, r3
 800bdee:	f7fe fe6f 	bl	800aad0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bdf2:	f7ff f90b 	bl	800b00c <xTaskResumeAll>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10a      	bne.n	800be12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bdfc:	4b09      	ldr	r3, [pc, #36]	; (800be24 <prvProcessTimerOrBlockTask+0x98>)
 800bdfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	f3bf 8f6f 	isb	sy
}
 800be0c:	e001      	b.n	800be12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800be0e:	f7ff f8fd 	bl	800b00c <xTaskResumeAll>
}
 800be12:	bf00      	nop
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	24004e20 	.word	0x24004e20
 800be20:	24004e24 	.word	0x24004e24
 800be24:	e000ed04 	.word	0xe000ed04

0800be28 <prvGetNextExpireTime>:
=======
 800f186:	e024      	b.n	800f1d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d008      	beq.n	800f1a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f18e:	4b13      	ldr	r3, [pc, #76]	; (800f1dc <prvProcessTimerOrBlockTask+0x90>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d101      	bne.n	800f19c <prvProcessTimerOrBlockTask+0x50>
 800f198:	2301      	movs	r3, #1
 800f19a:	e000      	b.n	800f19e <prvProcessTimerOrBlockTask+0x52>
 800f19c:	2300      	movs	r3, #0
 800f19e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f1a0:	4b0f      	ldr	r3, [pc, #60]	; (800f1e0 <prvProcessTimerOrBlockTask+0x94>)
 800f1a2:	6818      	ldr	r0, [r3, #0]
 800f1a4:	687a      	ldr	r2, [r7, #4]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	1ad3      	subs	r3, r2, r3
 800f1aa:	683a      	ldr	r2, [r7, #0]
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	f7fe fe6f 	bl	800de90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f1b2:	f7ff f90b 	bl	800e3cc <xTaskResumeAll>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d10a      	bne.n	800f1d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f1bc:	4b09      	ldr	r3, [pc, #36]	; (800f1e4 <prvProcessTimerOrBlockTask+0x98>)
 800f1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1c2:	601a      	str	r2, [r3, #0]
 800f1c4:	f3bf 8f4f 	dsb	sy
 800f1c8:	f3bf 8f6f 	isb	sy
}
 800f1cc:	e001      	b.n	800f1d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f1ce:	f7ff f8fd 	bl	800e3cc <xTaskResumeAll>
}
 800f1d2:	bf00      	nop
 800f1d4:	3710      	adds	r7, #16
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	240052fc 	.word	0x240052fc
 800f1e0:	24005300 	.word	0x24005300
 800f1e4:	e000ed04 	.word	0xe000ed04

0800f1e8 <prvGetNextExpireTime>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
<<<<<<< Updated upstream
 800be28:	b480      	push	{r7}
 800be2a:	b085      	sub	sp, #20
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
=======
 800f1e8:	b480      	push	{r7}
 800f1ea:	b085      	sub	sp, #20
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
<<<<<<< Updated upstream
 800be30:	4b0e      	ldr	r3, [pc, #56]	; (800be6c <prvGetNextExpireTime+0x44>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d101      	bne.n	800be3e <prvGetNextExpireTime+0x16>
 800be3a:	2201      	movs	r2, #1
 800be3c:	e000      	b.n	800be40 <prvGetNextExpireTime+0x18>
 800be3e:	2200      	movs	r2, #0
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d105      	bne.n	800be58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be4c:	4b07      	ldr	r3, [pc, #28]	; (800be6c <prvGetNextExpireTime+0x44>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	60fb      	str	r3, [r7, #12]
 800be56:	e001      	b.n	800be5c <prvGetNextExpireTime+0x34>
=======
 800f1f0:	4b0e      	ldr	r3, [pc, #56]	; (800f22c <prvGetNextExpireTime+0x44>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d101      	bne.n	800f1fe <prvGetNextExpireTime+0x16>
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	e000      	b.n	800f200 <prvGetNextExpireTime+0x18>
 800f1fe:	2200      	movs	r2, #0
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d105      	bne.n	800f218 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f20c:	4b07      	ldr	r3, [pc, #28]	; (800f22c <prvGetNextExpireTime+0x44>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	68db      	ldr	r3, [r3, #12]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	60fb      	str	r3, [r7, #12]
 800f216:	e001      	b.n	800f21c <prvGetNextExpireTime+0x34>
>>>>>>> Stashed changes
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
<<<<<<< Updated upstream
 800be58:	2300      	movs	r3, #0
 800be5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800be5c:	68fb      	ldr	r3, [r7, #12]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3714      	adds	r7, #20
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	24004e1c 	.word	0x24004e1c

0800be70 <prvSampleTimeNow>:
=======
 800f218:	2300      	movs	r3, #0
 800f21a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f21c:	68fb      	ldr	r3, [r7, #12]
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3714      	adds	r7, #20
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr
 800f22a:	bf00      	nop
 800f22c:	240052f8 	.word	0x240052f8

0800f230 <prvSampleTimeNow>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
<<<<<<< Updated upstream
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
=======
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
<<<<<<< Updated upstream
 800be78:	f7ff f966 	bl	800b148 <xTaskGetTickCount>
 800be7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800be7e:	4b0b      	ldr	r3, [pc, #44]	; (800beac <prvSampleTimeNow+0x3c>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	68fa      	ldr	r2, [r7, #12]
 800be84:	429a      	cmp	r2, r3
 800be86:	d205      	bcs.n	800be94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800be88:	f000 f936 	bl	800c0f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2201      	movs	r2, #1
 800be90:	601a      	str	r2, [r3, #0]
 800be92:	e002      	b.n	800be9a <prvSampleTimeNow+0x2a>
=======
 800f238:	f7ff f966 	bl	800e508 <xTaskGetTickCount>
 800f23c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f23e:	4b0b      	ldr	r3, [pc, #44]	; (800f26c <prvSampleTimeNow+0x3c>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	68fa      	ldr	r2, [r7, #12]
 800f244:	429a      	cmp	r2, r3
 800f246:	d205      	bcs.n	800f254 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f248:	f000 f936 	bl	800f4b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2201      	movs	r2, #1
 800f250:	601a      	str	r2, [r3, #0]
 800f252:	e002      	b.n	800f25a <prvSampleTimeNow+0x2a>
>>>>>>> Stashed changes
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
<<<<<<< Updated upstream
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800be9a:	4a04      	ldr	r2, [pc, #16]	; (800beac <prvSampleTimeNow+0x3c>)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bea0:	68fb      	ldr	r3, [r7, #12]
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3710      	adds	r7, #16
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	24004e2c 	.word	0x24004e2c

0800beb0 <prvInsertTimerInActiveList>:
=======
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2200      	movs	r2, #0
 800f258:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f25a:	4a04      	ldr	r2, [pc, #16]	; (800f26c <prvSampleTimeNow+0x3c>)
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f260:	68fb      	ldr	r3, [r7, #12]
}
 800f262:	4618      	mov	r0, r3
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	24005308 	.word	0x24005308

0800f270 <prvInsertTimerInActiveList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
<<<<<<< Updated upstream
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b086      	sub	sp, #24
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
 800bebc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bebe:	2300      	movs	r3, #0
 800bec0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	68ba      	ldr	r2, [r7, #8]
 800bec6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	68fa      	ldr	r2, [r7, #12]
 800becc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bece:	68ba      	ldr	r2, [r7, #8]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d812      	bhi.n	800befc <prvInsertTimerInActiveList+0x4c>
=======
 800f270:	b580      	push	{r7, lr}
 800f272:	b086      	sub	sp, #24
 800f274:	af00      	add	r7, sp, #0
 800f276:	60f8      	str	r0, [r7, #12]
 800f278:	60b9      	str	r1, [r7, #8]
 800f27a:	607a      	str	r2, [r7, #4]
 800f27c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f27e:	2300      	movs	r3, #0
 800f280:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	68ba      	ldr	r2, [r7, #8]
 800f286:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	68fa      	ldr	r2, [r7, #12]
 800f28c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f28e:	68ba      	ldr	r2, [r7, #8]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	429a      	cmp	r2, r3
 800f294:	d812      	bhi.n	800f2bc <prvInsertTimerInActiveList+0x4c>
>>>>>>> Stashed changes
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	1ad2      	subs	r2, r2, r3
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	699b      	ldr	r3, [r3, #24]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d302      	bcc.n	800beea <prvInsertTimerInActiveList+0x3a>
=======
 800f296:	687a      	ldr	r2, [r7, #4]
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	1ad2      	subs	r2, r2, r3
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	699b      	ldr	r3, [r3, #24]
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d302      	bcc.n	800f2aa <prvInsertTimerInActiveList+0x3a>
>>>>>>> Stashed changes
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
<<<<<<< Updated upstream
 800bee4:	2301      	movs	r3, #1
 800bee6:	617b      	str	r3, [r7, #20]
 800bee8:	e01b      	b.n	800bf22 <prvInsertTimerInActiveList+0x72>
=======
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	617b      	str	r3, [r7, #20]
 800f2a8:	e01b      	b.n	800f2e2 <prvInsertTimerInActiveList+0x72>
>>>>>>> Stashed changes
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< Updated upstream
 800beea:	4b10      	ldr	r3, [pc, #64]	; (800bf2c <prvInsertTimerInActiveList+0x7c>)
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	3304      	adds	r3, #4
 800bef2:	4619      	mov	r1, r3
 800bef4:	4610      	mov	r0, r2
 800bef6:	f7fd fc6a 	bl	80097ce <vListInsert>
 800befa:	e012      	b.n	800bf22 <prvInsertTimerInActiveList+0x72>
=======
 800f2aa:	4b10      	ldr	r3, [pc, #64]	; (800f2ec <prvInsertTimerInActiveList+0x7c>)
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	3304      	adds	r3, #4
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	4610      	mov	r0, r2
 800f2b6:	f7fd fc6c 	bl	800cb92 <vListInsert>
 800f2ba:	e012      	b.n	800f2e2 <prvInsertTimerInActiveList+0x72>
>>>>>>> Stashed changes
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
<<<<<<< Updated upstream
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d206      	bcs.n	800bf12 <prvInsertTimerInActiveList+0x62>
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d302      	bcc.n	800bf12 <prvInsertTimerInActiveList+0x62>
=======
 800f2bc:	687a      	ldr	r2, [r7, #4]
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d206      	bcs.n	800f2d2 <prvInsertTimerInActiveList+0x62>
 800f2c4:	68ba      	ldr	r2, [r7, #8]
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d302      	bcc.n	800f2d2 <prvInsertTimerInActiveList+0x62>
>>>>>>> Stashed changes
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
<<<<<<< Updated upstream
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	617b      	str	r3, [r7, #20]
 800bf10:	e007      	b.n	800bf22 <prvInsertTimerInActiveList+0x72>
=======
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	617b      	str	r3, [r7, #20]
 800f2d0:	e007      	b.n	800f2e2 <prvInsertTimerInActiveList+0x72>
>>>>>>> Stashed changes
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< Updated upstream
 800bf12:	4b07      	ldr	r3, [pc, #28]	; (800bf30 <prvInsertTimerInActiveList+0x80>)
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	3304      	adds	r3, #4
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	4610      	mov	r0, r2
 800bf1e:	f7fd fc56 	bl	80097ce <vListInsert>
=======
 800f2d2:	4b07      	ldr	r3, [pc, #28]	; (800f2f0 <prvInsertTimerInActiveList+0x80>)
 800f2d4:	681a      	ldr	r2, [r3, #0]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	3304      	adds	r3, #4
 800f2da:	4619      	mov	r1, r3
 800f2dc:	4610      	mov	r0, r2
 800f2de:	f7fd fc58 	bl	800cb92 <vListInsert>
>>>>>>> Stashed changes
		}
	}

	return xProcessTimerNow;
<<<<<<< Updated upstream
 800bf22:	697b      	ldr	r3, [r7, #20]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3718      	adds	r7, #24
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	24004e20 	.word	0x24004e20
 800bf30:	24004e1c 	.word	0x24004e1c

0800bf34 <prvProcessReceivedCommands>:
=======
 800f2e2:	697b      	ldr	r3, [r7, #20]
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3718      	adds	r7, #24
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}
 800f2ec:	240052fc 	.word	0x240052fc
 800f2f0:	240052f8 	.word	0x240052f8

0800f2f4 <prvProcessReceivedCommands>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
<<<<<<< Updated upstream
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b08e      	sub	sp, #56	; 0x38
 800bf38:	af02      	add	r7, sp, #8
=======
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b08e      	sub	sp, #56	; 0x38
 800f2f8:	af02      	add	r7, sp, #8
>>>>>>> Stashed changes
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
<<<<<<< Updated upstream
 800bf3a:	e0ca      	b.n	800c0d2 <prvProcessReceivedCommands+0x19e>
=======
 800f2fa:	e0ca      	b.n	800f492 <prvProcessReceivedCommands+0x19e>
>>>>>>> Stashed changes
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
<<<<<<< Updated upstream
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	da18      	bge.n	800bf74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bf42:	1d3b      	adds	r3, r7, #4
 800bf44:	3304      	adds	r3, #4
 800bf46:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	da18      	bge.n	800f334 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f302:	1d3b      	adds	r3, r7, #4
 800f304:	3304      	adds	r3, #4
 800f306:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> Stashed changes

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
<<<<<<< Updated upstream
 800bf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d10a      	bne.n	800bf64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf52:	f383 8811 	msr	BASEPRI, r3
 800bf56:	f3bf 8f6f 	isb	sy
 800bf5a:	f3bf 8f4f 	dsb	sy
 800bf5e:	61fb      	str	r3, [r7, #28]
}
 800bf60:	bf00      	nop
 800bf62:	e7fe      	b.n	800bf62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bf64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf6a:	6850      	ldr	r0, [r2, #4]
 800bf6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf6e:	6892      	ldr	r2, [r2, #8]
 800bf70:	4611      	mov	r1, r2
 800bf72:	4798      	blx	r3
=======
 800f308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d10a      	bne.n	800f324 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	61fb      	str	r3, [r7, #28]
}
 800f320:	bf00      	nop
 800f322:	e7fe      	b.n	800f322 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f32a:	6850      	ldr	r0, [r2, #4]
 800f32c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f32e:	6892      	ldr	r2, [r2, #8]
 800f330:	4611      	mov	r1, r2
 800f332:	4798      	blx	r3
>>>>>>> Stashed changes
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
<<<<<<< Updated upstream
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f2c0 80ab 	blt.w	800c0d2 <prvProcessReceivedCommands+0x19e>
=======
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2b00      	cmp	r3, #0
 800f338:	f2c0 80aa 	blt.w	800f490 <prvProcessReceivedCommands+0x19c>
>>>>>>> Stashed changes
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
<<<<<<< Updated upstream
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bf80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf82:	695b      	ldr	r3, [r3, #20]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d004      	beq.n	800bf92 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8a:	3304      	adds	r3, #4
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7fd fc57 	bl	8009840 <uxListRemove>
=======
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f342:	695b      	ldr	r3, [r3, #20]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d004      	beq.n	800f352 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34a:	3304      	adds	r3, #4
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7fd fc59 	bl	800cc04 <uxListRemove>
>>>>>>> Stashed changes
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< Updated upstream
 800bf92:	463b      	mov	r3, r7
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7ff ff6b 	bl	800be70 <prvSampleTimeNow>
 800bf9a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b09      	cmp	r3, #9
 800bfa0:	f200 8096 	bhi.w	800c0d0 <prvProcessReceivedCommands+0x19c>
 800bfa4:	a201      	add	r2, pc, #4	; (adr r2, 800bfac <prvProcessReceivedCommands+0x78>)
 800bfa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfaa:	bf00      	nop
 800bfac:	0800bfd5 	.word	0x0800bfd5
 800bfb0:	0800bfd5 	.word	0x0800bfd5
 800bfb4:	0800bfd5 	.word	0x0800bfd5
 800bfb8:	0800c049 	.word	0x0800c049
 800bfbc:	0800c05d 	.word	0x0800c05d
 800bfc0:	0800c0a7 	.word	0x0800c0a7
 800bfc4:	0800bfd5 	.word	0x0800bfd5
 800bfc8:	0800bfd5 	.word	0x0800bfd5
 800bfcc:	0800c049 	.word	0x0800c049
 800bfd0:	0800c05d 	.word	0x0800c05d
=======
 800f352:	463b      	mov	r3, r7
 800f354:	4618      	mov	r0, r3
 800f356:	f7ff ff6b 	bl	800f230 <prvSampleTimeNow>
 800f35a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2b09      	cmp	r3, #9
 800f360:	f200 8097 	bhi.w	800f492 <prvProcessReceivedCommands+0x19e>
 800f364:	a201      	add	r2, pc, #4	; (adr r2, 800f36c <prvProcessReceivedCommands+0x78>)
 800f366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f36a:	bf00      	nop
 800f36c:	0800f395 	.word	0x0800f395
 800f370:	0800f395 	.word	0x0800f395
 800f374:	0800f395 	.word	0x0800f395
 800f378:	0800f409 	.word	0x0800f409
 800f37c:	0800f41d 	.word	0x0800f41d
 800f380:	0800f467 	.word	0x0800f467
 800f384:	0800f395 	.word	0x0800f395
 800f388:	0800f395 	.word	0x0800f395
 800f38c:	0800f409 	.word	0x0800f409
 800f390:	0800f41d 	.word	0x0800f41d
>>>>>>> Stashed changes
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< Updated upstream
 800bfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfda:	f043 0301 	orr.w	r3, r3, #1
 800bfde:	b2da      	uxtb	r2, r3
 800bfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bfe6:	68ba      	ldr	r2, [r7, #8]
 800bfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfea:	699b      	ldr	r3, [r3, #24]
 800bfec:	18d1      	adds	r1, r2, r3
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bff4:	f7ff ff5c 	bl	800beb0 <prvInsertTimerInActiveList>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d069      	beq.n	800c0d2 <prvProcessReceivedCommands+0x19e>
=======
 800f394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f39a:	f043 0301 	orr.w	r3, r3, #1
 800f39e:	b2da      	uxtb	r2, r3
 800f3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f3a6:	68ba      	ldr	r2, [r7, #8]
 800f3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3aa:	699b      	ldr	r3, [r3, #24]
 800f3ac:	18d1      	adds	r1, r2, r3
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3b4:	f7ff ff5c 	bl	800f270 <prvInsertTimerInActiveList>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d069      	beq.n	800f492 <prvProcessReceivedCommands+0x19e>
>>>>>>> Stashed changes
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< Updated upstream
 800bffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c000:	6a1b      	ldr	r3, [r3, #32]
 800c002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c004:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c00c:	f003 0304 	and.w	r3, r3, #4
 800c010:	2b00      	cmp	r3, #0
 800c012:	d05e      	beq.n	800c0d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c014:	68ba      	ldr	r2, [r7, #8]
 800c016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c018:	699b      	ldr	r3, [r3, #24]
 800c01a:	441a      	add	r2, r3
 800c01c:	2300      	movs	r3, #0
 800c01e:	9300      	str	r3, [sp, #0]
 800c020:	2300      	movs	r3, #0
 800c022:	2100      	movs	r1, #0
 800c024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c026:	f7ff fe05 	bl	800bc34 <xTimerGenericCommand>
 800c02a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c02c:	6a3b      	ldr	r3, [r7, #32]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d14f      	bne.n	800c0d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c036:	f383 8811 	msr	BASEPRI, r3
 800c03a:	f3bf 8f6f 	isb	sy
 800c03e:	f3bf 8f4f 	dsb	sy
 800c042:	61bb      	str	r3, [r7, #24]
}
 800c044:	bf00      	nop
 800c046:	e7fe      	b.n	800c046 <prvProcessReceivedCommands+0x112>
=======
 800f3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c0:	6a1b      	ldr	r3, [r3, #32]
 800f3c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3cc:	f003 0304 	and.w	r3, r3, #4
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d05e      	beq.n	800f492 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f3d4:	68ba      	ldr	r2, [r7, #8]
 800f3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d8:	699b      	ldr	r3, [r3, #24]
 800f3da:	441a      	add	r2, r3
 800f3dc:	2300      	movs	r3, #0
 800f3de:	9300      	str	r3, [sp, #0]
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	2100      	movs	r1, #0
 800f3e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3e6:	f7ff fe05 	bl	800eff4 <xTimerGenericCommand>
 800f3ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f3ec:	6a3b      	ldr	r3, [r7, #32]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d14f      	bne.n	800f492 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f6:	f383 8811 	msr	BASEPRI, r3
 800f3fa:	f3bf 8f6f 	isb	sy
 800f3fe:	f3bf 8f4f 	dsb	sy
 800f402:	61bb      	str	r3, [r7, #24]
}
 800f404:	bf00      	nop
 800f406:	e7fe      	b.n	800f406 <prvProcessReceivedCommands+0x112>
>>>>>>> Stashed changes
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< Updated upstream
 800c048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c04e:	f023 0301 	bic.w	r3, r3, #1
 800c052:	b2da      	uxtb	r2, r3
 800c054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c05a:	e03a      	b.n	800c0d2 <prvProcessReceivedCommands+0x19e>
=======
 800f408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f40a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f40e:	f023 0301 	bic.w	r3, r3, #1
 800f412:	b2da      	uxtb	r2, r3
 800f414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f416:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f41a:	e03a      	b.n	800f492 <prvProcessReceivedCommands+0x19e>
>>>>>>> Stashed changes

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< Updated upstream
 800c05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c062:	f043 0301 	orr.w	r3, r3, #1
 800c066:	b2da      	uxtb	r2, r3
 800c068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c06e:	68ba      	ldr	r2, [r7, #8]
 800c070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c072:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c076:	699b      	ldr	r3, [r3, #24]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10a      	bne.n	800c092 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c080:	f383 8811 	msr	BASEPRI, r3
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	f3bf 8f4f 	dsb	sy
 800c08c:	617b      	str	r3, [r7, #20]
}
 800c08e:	bf00      	nop
 800c090:	e7fe      	b.n	800c090 <prvProcessReceivedCommands+0x15c>
=======
 800f41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f422:	f043 0301 	orr.w	r3, r3, #1
 800f426:	b2da      	uxtb	r2, r3
 800f428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f42a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f42e:	68ba      	ldr	r2, [r7, #8]
 800f430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f432:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f436:	699b      	ldr	r3, [r3, #24]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d10a      	bne.n	800f452 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f440:	f383 8811 	msr	BASEPRI, r3
 800f444:	f3bf 8f6f 	isb	sy
 800f448:	f3bf 8f4f 	dsb	sy
 800f44c:	617b      	str	r3, [r7, #20]
}
 800f44e:	bf00      	nop
 800f450:	e7fe      	b.n	800f450 <prvProcessReceivedCommands+0x15c>
>>>>>>> Stashed changes
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
<<<<<<< Updated upstream
 800c092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c094:	699a      	ldr	r2, [r3, #24]
 800c096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c098:	18d1      	adds	r1, r2, r3
 800c09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c09e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0a0:	f7ff ff06 	bl	800beb0 <prvInsertTimerInActiveList>
					break;
 800c0a4:	e015      	b.n	800c0d2 <prvProcessReceivedCommands+0x19e>
=======
 800f452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f454:	699a      	ldr	r2, [r3, #24]
 800f456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f458:	18d1      	adds	r1, r2, r3
 800f45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f45e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f460:	f7ff ff06 	bl	800f270 <prvInsertTimerInActiveList>
					break;
 800f464:	e015      	b.n	800f492 <prvProcessReceivedCommands+0x19e>
>>>>>>> Stashed changes
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
<<<<<<< Updated upstream
 800c0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0ac:	f003 0302 	and.w	r3, r3, #2
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d103      	bne.n	800c0bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c0b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0b6:	f7fd fa1b 	bl	80094f0 <vPortFree>
 800c0ba:	e00a      	b.n	800c0d2 <prvProcessReceivedCommands+0x19e>
=======
 800f466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f46c:	f003 0302 	and.w	r3, r3, #2
 800f470:	2b00      	cmp	r3, #0
 800f472:	d103      	bne.n	800f47c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f476:	f7fd fa1d 	bl	800c8b4 <vPortFree>
 800f47a:	e00a      	b.n	800f492 <prvProcessReceivedCommands+0x19e>
>>>>>>> Stashed changes
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< Updated upstream
 800c0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0c2:	f023 0301 	bic.w	r3, r3, #1
 800c0c6:	b2da      	uxtb	r2, r3
 800c0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 800f47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f482:	f023 0301 	bic.w	r3, r3, #1
 800f486:	b2da      	uxtb	r2, r3
 800f488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
<<<<<<< Updated upstream
 800c0ce:	e000      	b.n	800c0d2 <prvProcessReceivedCommands+0x19e>
=======
 800f48e:	e000      	b.n	800f492 <prvProcessReceivedCommands+0x19e>
>>>>>>> Stashed changes

				default	:
					/* Don't expect to get here. */
					break;
<<<<<<< Updated upstream
 800c0d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c0d2:	4b08      	ldr	r3, [pc, #32]	; (800c0f4 <prvProcessReceivedCommands+0x1c0>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	1d39      	adds	r1, r7, #4
 800c0d8:	2200      	movs	r2, #0
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7fe f9ba 	bl	800a454 <xQueueReceive>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	f47f af2a 	bne.w	800bf3c <prvProcessReceivedCommands+0x8>
=======
>>>>>>> Stashed changes
			}
		}
 800f490:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f492:	4b08      	ldr	r3, [pc, #32]	; (800f4b4 <prvProcessReceivedCommands+0x1c0>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	1d39      	adds	r1, r7, #4
 800f498:	2200      	movs	r2, #0
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7fe f9ba 	bl	800d814 <xQueueReceive>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	f47f af2a 	bne.w	800f2fc <prvProcessReceivedCommands+0x8>
	}
}
<<<<<<< Updated upstream
 800c0e8:	bf00      	nop
 800c0ea:	bf00      	nop
 800c0ec:	3730      	adds	r7, #48	; 0x30
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	24004e24 	.word	0x24004e24

0800c0f8 <prvSwitchTimerLists>:
=======
 800f4a8:	bf00      	nop
 800f4aa:	bf00      	nop
 800f4ac:	3730      	adds	r7, #48	; 0x30
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	bf00      	nop
 800f4b4:	24005300 	.word	0x24005300

0800f4b8 <prvSwitchTimerLists>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
<<<<<<< Updated upstream
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b088      	sub	sp, #32
 800c0fc:	af02      	add	r7, sp, #8
=======
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b088      	sub	sp, #32
 800f4bc:	af02      	add	r7, sp, #8
>>>>>>> Stashed changes

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
<<<<<<< Updated upstream
 800c0fe:	e048      	b.n	800c192 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c100:	4b2d      	ldr	r3, [pc, #180]	; (800c1b8 <prvSwitchTimerLists+0xc0>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c10a:	4b2b      	ldr	r3, [pc, #172]	; (800c1b8 <prvSwitchTimerLists+0xc0>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	3304      	adds	r3, #4
 800c118:	4618      	mov	r0, r3
 800c11a:	f7fd fb91 	bl	8009840 <uxListRemove>
=======
 800f4be:	e048      	b.n	800f552 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f4c0:	4b2d      	ldr	r3, [pc, #180]	; (800f578 <prvSwitchTimerLists+0xc0>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	68db      	ldr	r3, [r3, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4ca:	4b2b      	ldr	r3, [pc, #172]	; (800f578 <prvSwitchTimerLists+0xc0>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	68db      	ldr	r3, [r3, #12]
 800f4d0:	68db      	ldr	r3, [r3, #12]
 800f4d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	3304      	adds	r3, #4
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7fd fb93 	bl	800cc04 <uxListRemove>
>>>>>>> Stashed changes
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< Updated upstream
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6a1b      	ldr	r3, [r3, #32]
 800c122:	68f8      	ldr	r0, [r7, #12]
 800c124:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c12c:	f003 0304 	and.w	r3, r3, #4
 800c130:	2b00      	cmp	r3, #0
 800c132:	d02e      	beq.n	800c192 <prvSwitchTimerLists+0x9a>
=======
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	6a1b      	ldr	r3, [r3, #32]
 800f4e2:	68f8      	ldr	r0, [r7, #12]
 800f4e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4ec:	f003 0304 	and.w	r3, r3, #4
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d02e      	beq.n	800f552 <prvSwitchTimerLists+0x9a>
>>>>>>> Stashed changes
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
<<<<<<< Updated upstream
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	699b      	ldr	r3, [r3, #24]
 800c138:	693a      	ldr	r2, [r7, #16]
 800c13a:	4413      	add	r3, r2
 800c13c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c13e:	68ba      	ldr	r2, [r7, #8]
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	429a      	cmp	r2, r3
 800c144:	d90e      	bls.n	800c164 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	68ba      	ldr	r2, [r7, #8]
 800c14a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	68fa      	ldr	r2, [r7, #12]
 800c150:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c152:	4b19      	ldr	r3, [pc, #100]	; (800c1b8 <prvSwitchTimerLists+0xc0>)
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	3304      	adds	r3, #4
 800c15a:	4619      	mov	r1, r3
 800c15c:	4610      	mov	r0, r2
 800c15e:	f7fd fb36 	bl	80097ce <vListInsert>
 800c162:	e016      	b.n	800c192 <prvSwitchTimerLists+0x9a>
=======
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	699b      	ldr	r3, [r3, #24]
 800f4f8:	693a      	ldr	r2, [r7, #16]
 800f4fa:	4413      	add	r3, r2
 800f4fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f4fe:	68ba      	ldr	r2, [r7, #8]
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	429a      	cmp	r2, r3
 800f504:	d90e      	bls.n	800f524 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	68ba      	ldr	r2, [r7, #8]
 800f50a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	68fa      	ldr	r2, [r7, #12]
 800f510:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f512:	4b19      	ldr	r3, [pc, #100]	; (800f578 <prvSwitchTimerLists+0xc0>)
 800f514:	681a      	ldr	r2, [r3, #0]
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	3304      	adds	r3, #4
 800f51a:	4619      	mov	r1, r3
 800f51c:	4610      	mov	r0, r2
 800f51e:	f7fd fb38 	bl	800cb92 <vListInsert>
 800f522:	e016      	b.n	800f552 <prvSwitchTimerLists+0x9a>
>>>>>>> Stashed changes
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< Updated upstream
 800c164:	2300      	movs	r3, #0
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	2300      	movs	r3, #0
 800c16a:	693a      	ldr	r2, [r7, #16]
 800c16c:	2100      	movs	r1, #0
 800c16e:	68f8      	ldr	r0, [r7, #12]
 800c170:	f7ff fd60 	bl	800bc34 <xTimerGenericCommand>
 800c174:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10a      	bne.n	800c192 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	603b      	str	r3, [r7, #0]
}
 800c18e:	bf00      	nop
 800c190:	e7fe      	b.n	800c190 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c192:	4b09      	ldr	r3, [pc, #36]	; (800c1b8 <prvSwitchTimerLists+0xc0>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d1b1      	bne.n	800c100 <prvSwitchTimerLists+0x8>
=======
 800f524:	2300      	movs	r3, #0
 800f526:	9300      	str	r3, [sp, #0]
 800f528:	2300      	movs	r3, #0
 800f52a:	693a      	ldr	r2, [r7, #16]
 800f52c:	2100      	movs	r1, #0
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f7ff fd60 	bl	800eff4 <xTimerGenericCommand>
 800f534:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d10a      	bne.n	800f552 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f540:	f383 8811 	msr	BASEPRI, r3
 800f544:	f3bf 8f6f 	isb	sy
 800f548:	f3bf 8f4f 	dsb	sy
 800f54c:	603b      	str	r3, [r7, #0]
}
 800f54e:	bf00      	nop
 800f550:	e7fe      	b.n	800f550 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f552:	4b09      	ldr	r3, [pc, #36]	; (800f578 <prvSwitchTimerLists+0xc0>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d1b1      	bne.n	800f4c0 <prvSwitchTimerLists+0x8>
>>>>>>> Stashed changes
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
<<<<<<< Updated upstream
 800c19c:	4b06      	ldr	r3, [pc, #24]	; (800c1b8 <prvSwitchTimerLists+0xc0>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c1a2:	4b06      	ldr	r3, [pc, #24]	; (800c1bc <prvSwitchTimerLists+0xc4>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a04      	ldr	r2, [pc, #16]	; (800c1b8 <prvSwitchTimerLists+0xc0>)
 800c1a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c1aa:	4a04      	ldr	r2, [pc, #16]	; (800c1bc <prvSwitchTimerLists+0xc4>)
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	6013      	str	r3, [r2, #0]
}
 800c1b0:	bf00      	nop
 800c1b2:	3718      	adds	r7, #24
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	24004e1c 	.word	0x24004e1c
 800c1bc:	24004e20 	.word	0x24004e20

0800c1c0 <prvCheckForValidListAndQueue>:
=======
 800f55c:	4b06      	ldr	r3, [pc, #24]	; (800f578 <prvSwitchTimerLists+0xc0>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f562:	4b06      	ldr	r3, [pc, #24]	; (800f57c <prvSwitchTimerLists+0xc4>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	4a04      	ldr	r2, [pc, #16]	; (800f578 <prvSwitchTimerLists+0xc0>)
 800f568:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f56a:	4a04      	ldr	r2, [pc, #16]	; (800f57c <prvSwitchTimerLists+0xc4>)
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	6013      	str	r3, [r2, #0]
}
 800f570:	bf00      	nop
 800f572:	3718      	adds	r7, #24
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	240052f8 	.word	0x240052f8
 800f57c:	240052fc 	.word	0x240052fc

0800f580 <prvCheckForValidListAndQueue>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
<<<<<<< Updated upstream
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	af02      	add	r7, sp, #8
=======
 800f580:	b580      	push	{r7, lr}
 800f582:	b082      	sub	sp, #8
 800f584:	af02      	add	r7, sp, #8
>>>>>>> Stashed changes
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800c1c6:	f7fd fc95 	bl	8009af4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c1ca:	4b15      	ldr	r3, [pc, #84]	; (800c220 <prvCheckForValidListAndQueue+0x60>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d120      	bne.n	800c214 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c1d2:	4814      	ldr	r0, [pc, #80]	; (800c224 <prvCheckForValidListAndQueue+0x64>)
 800c1d4:	f7fd faaa 	bl	800972c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c1d8:	4813      	ldr	r0, [pc, #76]	; (800c228 <prvCheckForValidListAndQueue+0x68>)
 800c1da:	f7fd faa7 	bl	800972c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c1de:	4b13      	ldr	r3, [pc, #76]	; (800c22c <prvCheckForValidListAndQueue+0x6c>)
 800c1e0:	4a10      	ldr	r2, [pc, #64]	; (800c224 <prvCheckForValidListAndQueue+0x64>)
 800c1e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c1e4:	4b12      	ldr	r3, [pc, #72]	; (800c230 <prvCheckForValidListAndQueue+0x70>)
 800c1e6:	4a10      	ldr	r2, [pc, #64]	; (800c228 <prvCheckForValidListAndQueue+0x68>)
 800c1e8:	601a      	str	r2, [r3, #0]
=======
 800f586:	f7fd fc95 	bl	800ceb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f58a:	4b15      	ldr	r3, [pc, #84]	; (800f5e0 <prvCheckForValidListAndQueue+0x60>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d120      	bne.n	800f5d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f592:	4814      	ldr	r0, [pc, #80]	; (800f5e4 <prvCheckForValidListAndQueue+0x64>)
 800f594:	f7fd faac 	bl	800caf0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f598:	4813      	ldr	r0, [pc, #76]	; (800f5e8 <prvCheckForValidListAndQueue+0x68>)
 800f59a:	f7fd faa9 	bl	800caf0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f59e:	4b13      	ldr	r3, [pc, #76]	; (800f5ec <prvCheckForValidListAndQueue+0x6c>)
 800f5a0:	4a10      	ldr	r2, [pc, #64]	; (800f5e4 <prvCheckForValidListAndQueue+0x64>)
 800f5a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f5a4:	4b12      	ldr	r3, [pc, #72]	; (800f5f0 <prvCheckForValidListAndQueue+0x70>)
 800f5a6:	4a10      	ldr	r2, [pc, #64]	; (800f5e8 <prvCheckForValidListAndQueue+0x68>)
 800f5a8:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
<<<<<<< Updated upstream
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	9300      	str	r3, [sp, #0]
 800c1ee:	4b11      	ldr	r3, [pc, #68]	; (800c234 <prvCheckForValidListAndQueue+0x74>)
 800c1f0:	4a11      	ldr	r2, [pc, #68]	; (800c238 <prvCheckForValidListAndQueue+0x78>)
 800c1f2:	2110      	movs	r1, #16
 800c1f4:	200a      	movs	r0, #10
 800c1f6:	f7fd fe07 	bl	8009e08 <xQueueGenericCreateStatic>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	4a08      	ldr	r2, [pc, #32]	; (800c220 <prvCheckForValidListAndQueue+0x60>)
 800c1fe:	6013      	str	r3, [r2, #0]
=======
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	9300      	str	r3, [sp, #0]
 800f5ae:	4b11      	ldr	r3, [pc, #68]	; (800f5f4 <prvCheckForValidListAndQueue+0x74>)
 800f5b0:	4a11      	ldr	r2, [pc, #68]	; (800f5f8 <prvCheckForValidListAndQueue+0x78>)
 800f5b2:	2110      	movs	r1, #16
 800f5b4:	200a      	movs	r0, #10
 800f5b6:	f7fd fe07 	bl	800d1c8 <xQueueGenericCreateStatic>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	4a08      	ldr	r2, [pc, #32]	; (800f5e0 <prvCheckForValidListAndQueue+0x60>)
 800f5be:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
<<<<<<< Updated upstream
 800c200:	4b07      	ldr	r3, [pc, #28]	; (800c220 <prvCheckForValidListAndQueue+0x60>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d005      	beq.n	800c214 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c208:	4b05      	ldr	r3, [pc, #20]	; (800c220 <prvCheckForValidListAndQueue+0x60>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	490b      	ldr	r1, [pc, #44]	; (800c23c <prvCheckForValidListAndQueue+0x7c>)
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fe fc34 	bl	800aa7c <vQueueAddToRegistry>
=======
 800f5c0:	4b07      	ldr	r3, [pc, #28]	; (800f5e0 <prvCheckForValidListAndQueue+0x60>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d005      	beq.n	800f5d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f5c8:	4b05      	ldr	r3, [pc, #20]	; (800f5e0 <prvCheckForValidListAndQueue+0x60>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	490b      	ldr	r1, [pc, #44]	; (800f5fc <prvCheckForValidListAndQueue+0x7c>)
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7fe fc34 	bl	800de3c <vQueueAddToRegistry>
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800c214:	f7fd fc9e 	bl	8009b54 <vPortExitCritical>
}
 800c218:	bf00      	nop
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	24004e24 	.word	0x24004e24
 800c224:	24004df4 	.word	0x24004df4
 800c228:	24004e08 	.word	0x24004e08
 800c22c:	24004e1c 	.word	0x24004e1c
 800c230:	24004e20 	.word	0x24004e20
 800c234:	24004ed0 	.word	0x24004ed0
 800c238:	24004e30 	.word	0x24004e30
 800c23c:	0800fd0c 	.word	0x0800fd0c

0800c240 <__cvt>:
 800c240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c242:	ed2d 8b02 	vpush	{d8}
 800c246:	eeb0 8b40 	vmov.f64	d8, d0
 800c24a:	b085      	sub	sp, #20
 800c24c:	4617      	mov	r7, r2
 800c24e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c250:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c252:	ee18 2a90 	vmov	r2, s17
 800c256:	f025 0520 	bic.w	r5, r5, #32
 800c25a:	2a00      	cmp	r2, #0
 800c25c:	bfb6      	itet	lt
 800c25e:	222d      	movlt	r2, #45	; 0x2d
 800c260:	2200      	movge	r2, #0
 800c262:	eeb1 8b40 	vneglt.f64	d8, d0
 800c266:	2d46      	cmp	r5, #70	; 0x46
 800c268:	460c      	mov	r4, r1
 800c26a:	701a      	strb	r2, [r3, #0]
 800c26c:	d004      	beq.n	800c278 <__cvt+0x38>
 800c26e:	2d45      	cmp	r5, #69	; 0x45
 800c270:	d100      	bne.n	800c274 <__cvt+0x34>
 800c272:	3401      	adds	r4, #1
 800c274:	2102      	movs	r1, #2
 800c276:	e000      	b.n	800c27a <__cvt+0x3a>
 800c278:	2103      	movs	r1, #3
 800c27a:	ab03      	add	r3, sp, #12
 800c27c:	9301      	str	r3, [sp, #4]
 800c27e:	ab02      	add	r3, sp, #8
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	4622      	mov	r2, r4
 800c284:	4633      	mov	r3, r6
 800c286:	eeb0 0b48 	vmov.f64	d0, d8
 800c28a:	f000 ff89 	bl	800d1a0 <_dtoa_r>
 800c28e:	2d47      	cmp	r5, #71	; 0x47
 800c290:	d101      	bne.n	800c296 <__cvt+0x56>
 800c292:	07fb      	lsls	r3, r7, #31
 800c294:	d51a      	bpl.n	800c2cc <__cvt+0x8c>
 800c296:	2d46      	cmp	r5, #70	; 0x46
 800c298:	eb00 0204 	add.w	r2, r0, r4
 800c29c:	d10c      	bne.n	800c2b8 <__cvt+0x78>
 800c29e:	7803      	ldrb	r3, [r0, #0]
 800c2a0:	2b30      	cmp	r3, #48	; 0x30
 800c2a2:	d107      	bne.n	800c2b4 <__cvt+0x74>
 800c2a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ac:	bf1c      	itt	ne
 800c2ae:	f1c4 0401 	rsbne	r4, r4, #1
 800c2b2:	6034      	strne	r4, [r6, #0]
 800c2b4:	6833      	ldr	r3, [r6, #0]
 800c2b6:	441a      	add	r2, r3
 800c2b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c0:	bf08      	it	eq
 800c2c2:	9203      	streq	r2, [sp, #12]
 800c2c4:	2130      	movs	r1, #48	; 0x30
 800c2c6:	9b03      	ldr	r3, [sp, #12]
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d307      	bcc.n	800c2dc <__cvt+0x9c>
 800c2cc:	9b03      	ldr	r3, [sp, #12]
 800c2ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2d0:	1a1b      	subs	r3, r3, r0
 800c2d2:	6013      	str	r3, [r2, #0]
 800c2d4:	b005      	add	sp, #20
 800c2d6:	ecbd 8b02 	vpop	{d8}
 800c2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2dc:	1c5c      	adds	r4, r3, #1
 800c2de:	9403      	str	r4, [sp, #12]
 800c2e0:	7019      	strb	r1, [r3, #0]
 800c2e2:	e7f0      	b.n	800c2c6 <__cvt+0x86>

0800c2e4 <__exponent>:
 800c2e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2900      	cmp	r1, #0
 800c2ea:	bfb8      	it	lt
 800c2ec:	4249      	neglt	r1, r1
 800c2ee:	f803 2b02 	strb.w	r2, [r3], #2
 800c2f2:	bfb4      	ite	lt
 800c2f4:	222d      	movlt	r2, #45	; 0x2d
 800c2f6:	222b      	movge	r2, #43	; 0x2b
 800c2f8:	2909      	cmp	r1, #9
 800c2fa:	7042      	strb	r2, [r0, #1]
 800c2fc:	dd2a      	ble.n	800c354 <__exponent+0x70>
 800c2fe:	f10d 0207 	add.w	r2, sp, #7
 800c302:	4617      	mov	r7, r2
 800c304:	260a      	movs	r6, #10
 800c306:	4694      	mov	ip, r2
 800c308:	fb91 f5f6 	sdiv	r5, r1, r6
 800c30c:	fb06 1415 	mls	r4, r6, r5, r1
 800c310:	3430      	adds	r4, #48	; 0x30
 800c312:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c316:	460c      	mov	r4, r1
 800c318:	2c63      	cmp	r4, #99	; 0x63
 800c31a:	f102 32ff 	add.w	r2, r2, #4294967295
 800c31e:	4629      	mov	r1, r5
 800c320:	dcf1      	bgt.n	800c306 <__exponent+0x22>
 800c322:	3130      	adds	r1, #48	; 0x30
 800c324:	f1ac 0402 	sub.w	r4, ip, #2
 800c328:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c32c:	1c41      	adds	r1, r0, #1
 800c32e:	4622      	mov	r2, r4
 800c330:	42ba      	cmp	r2, r7
 800c332:	d30a      	bcc.n	800c34a <__exponent+0x66>
 800c334:	f10d 0209 	add.w	r2, sp, #9
 800c338:	eba2 020c 	sub.w	r2, r2, ip
 800c33c:	42bc      	cmp	r4, r7
 800c33e:	bf88      	it	hi
 800c340:	2200      	movhi	r2, #0
 800c342:	4413      	add	r3, r2
 800c344:	1a18      	subs	r0, r3, r0
 800c346:	b003      	add	sp, #12
 800c348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c34a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c34e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c352:	e7ed      	b.n	800c330 <__exponent+0x4c>
 800c354:	2330      	movs	r3, #48	; 0x30
 800c356:	3130      	adds	r1, #48	; 0x30
 800c358:	7083      	strb	r3, [r0, #2]
 800c35a:	70c1      	strb	r1, [r0, #3]
 800c35c:	1d03      	adds	r3, r0, #4
 800c35e:	e7f1      	b.n	800c344 <__exponent+0x60>

0800c360 <_printf_float>:
 800c360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c364:	b08b      	sub	sp, #44	; 0x2c
 800c366:	460c      	mov	r4, r1
 800c368:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c36c:	4616      	mov	r6, r2
 800c36e:	461f      	mov	r7, r3
 800c370:	4605      	mov	r5, r0
 800c372:	f000 fdaf 	bl	800ced4 <_localeconv_r>
 800c376:	f8d0 b000 	ldr.w	fp, [r0]
 800c37a:	4658      	mov	r0, fp
 800c37c:	f7f4 f800 	bl	8000380 <strlen>
 800c380:	2300      	movs	r3, #0
 800c382:	9308      	str	r3, [sp, #32]
 800c384:	f8d8 3000 	ldr.w	r3, [r8]
 800c388:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c38c:	6822      	ldr	r2, [r4, #0]
 800c38e:	3307      	adds	r3, #7
 800c390:	f023 0307 	bic.w	r3, r3, #7
 800c394:	f103 0108 	add.w	r1, r3, #8
 800c398:	f8c8 1000 	str.w	r1, [r8]
 800c39c:	ed93 0b00 	vldr	d0, [r3]
 800c3a0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800c600 <_printf_float+0x2a0>
 800c3a4:	eeb0 7bc0 	vabs.f64	d7, d0
 800c3a8:	eeb4 7b46 	vcmp.f64	d7, d6
 800c3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3b0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800c3b4:	4682      	mov	sl, r0
 800c3b6:	dd24      	ble.n	800c402 <_printf_float+0xa2>
 800c3b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3c0:	d502      	bpl.n	800c3c8 <_printf_float+0x68>
 800c3c2:	232d      	movs	r3, #45	; 0x2d
 800c3c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3c8:	498f      	ldr	r1, [pc, #572]	; (800c608 <_printf_float+0x2a8>)
 800c3ca:	4b90      	ldr	r3, [pc, #576]	; (800c60c <_printf_float+0x2ac>)
 800c3cc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c3d0:	bf94      	ite	ls
 800c3d2:	4688      	movls	r8, r1
 800c3d4:	4698      	movhi	r8, r3
 800c3d6:	2303      	movs	r3, #3
 800c3d8:	6123      	str	r3, [r4, #16]
 800c3da:	f022 0204 	bic.w	r2, r2, #4
 800c3de:	2300      	movs	r3, #0
 800c3e0:	6022      	str	r2, [r4, #0]
 800c3e2:	9304      	str	r3, [sp, #16]
 800c3e4:	9700      	str	r7, [sp, #0]
 800c3e6:	4633      	mov	r3, r6
 800c3e8:	aa09      	add	r2, sp, #36	; 0x24
 800c3ea:	4621      	mov	r1, r4
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	f000 f9d1 	bl	800c794 <_printf_common>
 800c3f2:	3001      	adds	r0, #1
 800c3f4:	f040 808a 	bne.w	800c50c <_printf_float+0x1ac>
 800c3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3fc:	b00b      	add	sp, #44	; 0x2c
 800c3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c402:	eeb4 0b40 	vcmp.f64	d0, d0
 800c406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c40a:	d709      	bvc.n	800c420 <_printf_float+0xc0>
 800c40c:	ee10 3a90 	vmov	r3, s1
 800c410:	2b00      	cmp	r3, #0
 800c412:	bfbc      	itt	lt
 800c414:	232d      	movlt	r3, #45	; 0x2d
 800c416:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c41a:	497d      	ldr	r1, [pc, #500]	; (800c610 <_printf_float+0x2b0>)
 800c41c:	4b7d      	ldr	r3, [pc, #500]	; (800c614 <_printf_float+0x2b4>)
 800c41e:	e7d5      	b.n	800c3cc <_printf_float+0x6c>
 800c420:	6863      	ldr	r3, [r4, #4]
 800c422:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c426:	9104      	str	r1, [sp, #16]
 800c428:	1c59      	adds	r1, r3, #1
 800c42a:	d13c      	bne.n	800c4a6 <_printf_float+0x146>
 800c42c:	2306      	movs	r3, #6
 800c42e:	6063      	str	r3, [r4, #4]
 800c430:	2300      	movs	r3, #0
 800c432:	9303      	str	r3, [sp, #12]
 800c434:	ab08      	add	r3, sp, #32
 800c436:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c43a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c43e:	ab07      	add	r3, sp, #28
 800c440:	6861      	ldr	r1, [r4, #4]
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	6022      	str	r2, [r4, #0]
 800c446:	f10d 031b 	add.w	r3, sp, #27
 800c44a:	4628      	mov	r0, r5
 800c44c:	f7ff fef8 	bl	800c240 <__cvt>
 800c450:	9b04      	ldr	r3, [sp, #16]
 800c452:	9907      	ldr	r1, [sp, #28]
 800c454:	2b47      	cmp	r3, #71	; 0x47
 800c456:	4680      	mov	r8, r0
 800c458:	d108      	bne.n	800c46c <_printf_float+0x10c>
 800c45a:	1cc8      	adds	r0, r1, #3
 800c45c:	db02      	blt.n	800c464 <_printf_float+0x104>
 800c45e:	6863      	ldr	r3, [r4, #4]
 800c460:	4299      	cmp	r1, r3
 800c462:	dd41      	ble.n	800c4e8 <_printf_float+0x188>
 800c464:	f1a9 0902 	sub.w	r9, r9, #2
 800c468:	fa5f f989 	uxtb.w	r9, r9
 800c46c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c470:	d820      	bhi.n	800c4b4 <_printf_float+0x154>
 800c472:	3901      	subs	r1, #1
 800c474:	464a      	mov	r2, r9
 800c476:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c47a:	9107      	str	r1, [sp, #28]
 800c47c:	f7ff ff32 	bl	800c2e4 <__exponent>
 800c480:	9a08      	ldr	r2, [sp, #32]
 800c482:	9004      	str	r0, [sp, #16]
 800c484:	1813      	adds	r3, r2, r0
 800c486:	2a01      	cmp	r2, #1
 800c488:	6123      	str	r3, [r4, #16]
 800c48a:	dc02      	bgt.n	800c492 <_printf_float+0x132>
 800c48c:	6822      	ldr	r2, [r4, #0]
 800c48e:	07d2      	lsls	r2, r2, #31
 800c490:	d501      	bpl.n	800c496 <_printf_float+0x136>
 800c492:	3301      	adds	r3, #1
 800c494:	6123      	str	r3, [r4, #16]
 800c496:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d0a2      	beq.n	800c3e4 <_printf_float+0x84>
 800c49e:	232d      	movs	r3, #45	; 0x2d
 800c4a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4a4:	e79e      	b.n	800c3e4 <_printf_float+0x84>
 800c4a6:	9904      	ldr	r1, [sp, #16]
 800c4a8:	2947      	cmp	r1, #71	; 0x47
 800c4aa:	d1c1      	bne.n	800c430 <_printf_float+0xd0>
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d1bf      	bne.n	800c430 <_printf_float+0xd0>
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	e7bc      	b.n	800c42e <_printf_float+0xce>
 800c4b4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c4b8:	d118      	bne.n	800c4ec <_printf_float+0x18c>
 800c4ba:	2900      	cmp	r1, #0
 800c4bc:	6863      	ldr	r3, [r4, #4]
 800c4be:	dd0b      	ble.n	800c4d8 <_printf_float+0x178>
 800c4c0:	6121      	str	r1, [r4, #16]
 800c4c2:	b913      	cbnz	r3, 800c4ca <_printf_float+0x16a>
 800c4c4:	6822      	ldr	r2, [r4, #0]
 800c4c6:	07d0      	lsls	r0, r2, #31
 800c4c8:	d502      	bpl.n	800c4d0 <_printf_float+0x170>
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	440b      	add	r3, r1
 800c4ce:	6123      	str	r3, [r4, #16]
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	65a1      	str	r1, [r4, #88]	; 0x58
 800c4d4:	9304      	str	r3, [sp, #16]
 800c4d6:	e7de      	b.n	800c496 <_printf_float+0x136>
 800c4d8:	b913      	cbnz	r3, 800c4e0 <_printf_float+0x180>
 800c4da:	6822      	ldr	r2, [r4, #0]
 800c4dc:	07d2      	lsls	r2, r2, #31
 800c4de:	d501      	bpl.n	800c4e4 <_printf_float+0x184>
 800c4e0:	3302      	adds	r3, #2
 800c4e2:	e7f4      	b.n	800c4ce <_printf_float+0x16e>
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e7f2      	b.n	800c4ce <_printf_float+0x16e>
 800c4e8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c4ec:	9b08      	ldr	r3, [sp, #32]
 800c4ee:	4299      	cmp	r1, r3
 800c4f0:	db05      	blt.n	800c4fe <_printf_float+0x19e>
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	6121      	str	r1, [r4, #16]
 800c4f6:	07d8      	lsls	r0, r3, #31
 800c4f8:	d5ea      	bpl.n	800c4d0 <_printf_float+0x170>
 800c4fa:	1c4b      	adds	r3, r1, #1
 800c4fc:	e7e7      	b.n	800c4ce <_printf_float+0x16e>
 800c4fe:	2900      	cmp	r1, #0
 800c500:	bfd4      	ite	le
 800c502:	f1c1 0202 	rsble	r2, r1, #2
 800c506:	2201      	movgt	r2, #1
 800c508:	4413      	add	r3, r2
 800c50a:	e7e0      	b.n	800c4ce <_printf_float+0x16e>
 800c50c:	6823      	ldr	r3, [r4, #0]
 800c50e:	055a      	lsls	r2, r3, #21
 800c510:	d407      	bmi.n	800c522 <_printf_float+0x1c2>
 800c512:	6923      	ldr	r3, [r4, #16]
 800c514:	4642      	mov	r2, r8
 800c516:	4631      	mov	r1, r6
 800c518:	4628      	mov	r0, r5
 800c51a:	47b8      	blx	r7
 800c51c:	3001      	adds	r0, #1
 800c51e:	d12a      	bne.n	800c576 <_printf_float+0x216>
 800c520:	e76a      	b.n	800c3f8 <_printf_float+0x98>
 800c522:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c526:	f240 80e0 	bls.w	800c6ea <_printf_float+0x38a>
 800c52a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c52e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c536:	d133      	bne.n	800c5a0 <_printf_float+0x240>
 800c538:	4a37      	ldr	r2, [pc, #220]	; (800c618 <_printf_float+0x2b8>)
 800c53a:	2301      	movs	r3, #1
 800c53c:	4631      	mov	r1, r6
 800c53e:	4628      	mov	r0, r5
 800c540:	47b8      	blx	r7
 800c542:	3001      	adds	r0, #1
 800c544:	f43f af58 	beq.w	800c3f8 <_printf_float+0x98>
 800c548:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	db02      	blt.n	800c556 <_printf_float+0x1f6>
 800c550:	6823      	ldr	r3, [r4, #0]
 800c552:	07d8      	lsls	r0, r3, #31
 800c554:	d50f      	bpl.n	800c576 <_printf_float+0x216>
 800c556:	4653      	mov	r3, sl
 800c558:	465a      	mov	r2, fp
 800c55a:	4631      	mov	r1, r6
 800c55c:	4628      	mov	r0, r5
 800c55e:	47b8      	blx	r7
 800c560:	3001      	adds	r0, #1
 800c562:	f43f af49 	beq.w	800c3f8 <_printf_float+0x98>
 800c566:	f04f 0800 	mov.w	r8, #0
 800c56a:	f104 091a 	add.w	r9, r4, #26
 800c56e:	9b08      	ldr	r3, [sp, #32]
 800c570:	3b01      	subs	r3, #1
 800c572:	4543      	cmp	r3, r8
 800c574:	dc09      	bgt.n	800c58a <_printf_float+0x22a>
 800c576:	6823      	ldr	r3, [r4, #0]
 800c578:	079b      	lsls	r3, r3, #30
 800c57a:	f100 8106 	bmi.w	800c78a <_printf_float+0x42a>
 800c57e:	68e0      	ldr	r0, [r4, #12]
 800c580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c582:	4298      	cmp	r0, r3
 800c584:	bfb8      	it	lt
 800c586:	4618      	movlt	r0, r3
 800c588:	e738      	b.n	800c3fc <_printf_float+0x9c>
 800c58a:	2301      	movs	r3, #1
 800c58c:	464a      	mov	r2, r9
 800c58e:	4631      	mov	r1, r6
 800c590:	4628      	mov	r0, r5
 800c592:	47b8      	blx	r7
 800c594:	3001      	adds	r0, #1
 800c596:	f43f af2f 	beq.w	800c3f8 <_printf_float+0x98>
 800c59a:	f108 0801 	add.w	r8, r8, #1
 800c59e:	e7e6      	b.n	800c56e <_printf_float+0x20e>
 800c5a0:	9b07      	ldr	r3, [sp, #28]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	dc3a      	bgt.n	800c61c <_printf_float+0x2bc>
 800c5a6:	4a1c      	ldr	r2, [pc, #112]	; (800c618 <_printf_float+0x2b8>)
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	4631      	mov	r1, r6
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	47b8      	blx	r7
 800c5b0:	3001      	adds	r0, #1
 800c5b2:	f43f af21 	beq.w	800c3f8 <_printf_float+0x98>
 800c5b6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	d102      	bne.n	800c5c4 <_printf_float+0x264>
 800c5be:	6823      	ldr	r3, [r4, #0]
 800c5c0:	07d9      	lsls	r1, r3, #31
 800c5c2:	d5d8      	bpl.n	800c576 <_printf_float+0x216>
 800c5c4:	4653      	mov	r3, sl
 800c5c6:	465a      	mov	r2, fp
 800c5c8:	4631      	mov	r1, r6
 800c5ca:	4628      	mov	r0, r5
 800c5cc:	47b8      	blx	r7
 800c5ce:	3001      	adds	r0, #1
 800c5d0:	f43f af12 	beq.w	800c3f8 <_printf_float+0x98>
 800c5d4:	f04f 0900 	mov.w	r9, #0
 800c5d8:	f104 0a1a 	add.w	sl, r4, #26
 800c5dc:	9b07      	ldr	r3, [sp, #28]
 800c5de:	425b      	negs	r3, r3
 800c5e0:	454b      	cmp	r3, r9
 800c5e2:	dc01      	bgt.n	800c5e8 <_printf_float+0x288>
 800c5e4:	9b08      	ldr	r3, [sp, #32]
 800c5e6:	e795      	b.n	800c514 <_printf_float+0x1b4>
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	4652      	mov	r2, sl
 800c5ec:	4631      	mov	r1, r6
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	47b8      	blx	r7
 800c5f2:	3001      	adds	r0, #1
 800c5f4:	f43f af00 	beq.w	800c3f8 <_printf_float+0x98>
 800c5f8:	f109 0901 	add.w	r9, r9, #1
 800c5fc:	e7ee      	b.n	800c5dc <_printf_float+0x27c>
 800c5fe:	bf00      	nop
 800c600:	ffffffff 	.word	0xffffffff
 800c604:	7fefffff 	.word	0x7fefffff
 800c608:	0800fe10 	.word	0x0800fe10
 800c60c:	0800fe14 	.word	0x0800fe14
 800c610:	0800fe18 	.word	0x0800fe18
 800c614:	0800fe1c 	.word	0x0800fe1c
 800c618:	0800fe20 	.word	0x0800fe20
 800c61c:	9a08      	ldr	r2, [sp, #32]
 800c61e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c620:	429a      	cmp	r2, r3
 800c622:	bfa8      	it	ge
 800c624:	461a      	movge	r2, r3
 800c626:	2a00      	cmp	r2, #0
 800c628:	4691      	mov	r9, r2
 800c62a:	dc38      	bgt.n	800c69e <_printf_float+0x33e>
 800c62c:	2300      	movs	r3, #0
 800c62e:	9305      	str	r3, [sp, #20]
 800c630:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c634:	f104 021a 	add.w	r2, r4, #26
 800c638:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c63a:	9905      	ldr	r1, [sp, #20]
 800c63c:	9304      	str	r3, [sp, #16]
 800c63e:	eba3 0309 	sub.w	r3, r3, r9
 800c642:	428b      	cmp	r3, r1
 800c644:	dc33      	bgt.n	800c6ae <_printf_float+0x34e>
 800c646:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	db3c      	blt.n	800c6c8 <_printf_float+0x368>
 800c64e:	6823      	ldr	r3, [r4, #0]
 800c650:	07da      	lsls	r2, r3, #31
 800c652:	d439      	bmi.n	800c6c8 <_printf_float+0x368>
 800c654:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c658:	eba2 0903 	sub.w	r9, r2, r3
 800c65c:	9b04      	ldr	r3, [sp, #16]
 800c65e:	1ad2      	subs	r2, r2, r3
 800c660:	4591      	cmp	r9, r2
 800c662:	bfa8      	it	ge
 800c664:	4691      	movge	r9, r2
 800c666:	f1b9 0f00 	cmp.w	r9, #0
 800c66a:	dc35      	bgt.n	800c6d8 <_printf_float+0x378>
 800c66c:	f04f 0800 	mov.w	r8, #0
 800c670:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c674:	f104 0a1a 	add.w	sl, r4, #26
 800c678:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c67c:	1a9b      	subs	r3, r3, r2
 800c67e:	eba3 0309 	sub.w	r3, r3, r9
 800c682:	4543      	cmp	r3, r8
 800c684:	f77f af77 	ble.w	800c576 <_printf_float+0x216>
 800c688:	2301      	movs	r3, #1
 800c68a:	4652      	mov	r2, sl
 800c68c:	4631      	mov	r1, r6
 800c68e:	4628      	mov	r0, r5
 800c690:	47b8      	blx	r7
 800c692:	3001      	adds	r0, #1
 800c694:	f43f aeb0 	beq.w	800c3f8 <_printf_float+0x98>
 800c698:	f108 0801 	add.w	r8, r8, #1
 800c69c:	e7ec      	b.n	800c678 <_printf_float+0x318>
 800c69e:	4613      	mov	r3, r2
 800c6a0:	4631      	mov	r1, r6
 800c6a2:	4642      	mov	r2, r8
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	47b8      	blx	r7
 800c6a8:	3001      	adds	r0, #1
 800c6aa:	d1bf      	bne.n	800c62c <_printf_float+0x2cc>
 800c6ac:	e6a4      	b.n	800c3f8 <_printf_float+0x98>
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	4631      	mov	r1, r6
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	9204      	str	r2, [sp, #16]
 800c6b6:	47b8      	blx	r7
 800c6b8:	3001      	adds	r0, #1
 800c6ba:	f43f ae9d 	beq.w	800c3f8 <_printf_float+0x98>
 800c6be:	9b05      	ldr	r3, [sp, #20]
 800c6c0:	9a04      	ldr	r2, [sp, #16]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	9305      	str	r3, [sp, #20]
 800c6c6:	e7b7      	b.n	800c638 <_printf_float+0x2d8>
 800c6c8:	4653      	mov	r3, sl
 800c6ca:	465a      	mov	r2, fp
 800c6cc:	4631      	mov	r1, r6
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	47b8      	blx	r7
 800c6d2:	3001      	adds	r0, #1
 800c6d4:	d1be      	bne.n	800c654 <_printf_float+0x2f4>
 800c6d6:	e68f      	b.n	800c3f8 <_printf_float+0x98>
 800c6d8:	9a04      	ldr	r2, [sp, #16]
 800c6da:	464b      	mov	r3, r9
 800c6dc:	4442      	add	r2, r8
 800c6de:	4631      	mov	r1, r6
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	47b8      	blx	r7
 800c6e4:	3001      	adds	r0, #1
 800c6e6:	d1c1      	bne.n	800c66c <_printf_float+0x30c>
 800c6e8:	e686      	b.n	800c3f8 <_printf_float+0x98>
 800c6ea:	9a08      	ldr	r2, [sp, #32]
 800c6ec:	2a01      	cmp	r2, #1
 800c6ee:	dc01      	bgt.n	800c6f4 <_printf_float+0x394>
 800c6f0:	07db      	lsls	r3, r3, #31
 800c6f2:	d537      	bpl.n	800c764 <_printf_float+0x404>
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	4642      	mov	r2, r8
 800c6f8:	4631      	mov	r1, r6
 800c6fa:	4628      	mov	r0, r5
 800c6fc:	47b8      	blx	r7
 800c6fe:	3001      	adds	r0, #1
 800c700:	f43f ae7a 	beq.w	800c3f8 <_printf_float+0x98>
 800c704:	4653      	mov	r3, sl
 800c706:	465a      	mov	r2, fp
 800c708:	4631      	mov	r1, r6
 800c70a:	4628      	mov	r0, r5
 800c70c:	47b8      	blx	r7
 800c70e:	3001      	adds	r0, #1
 800c710:	f43f ae72 	beq.w	800c3f8 <_printf_float+0x98>
 800c714:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c718:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c720:	9b08      	ldr	r3, [sp, #32]
 800c722:	d01a      	beq.n	800c75a <_printf_float+0x3fa>
 800c724:	3b01      	subs	r3, #1
 800c726:	f108 0201 	add.w	r2, r8, #1
 800c72a:	4631      	mov	r1, r6
 800c72c:	4628      	mov	r0, r5
 800c72e:	47b8      	blx	r7
 800c730:	3001      	adds	r0, #1
 800c732:	d10e      	bne.n	800c752 <_printf_float+0x3f2>
 800c734:	e660      	b.n	800c3f8 <_printf_float+0x98>
 800c736:	2301      	movs	r3, #1
 800c738:	464a      	mov	r2, r9
 800c73a:	4631      	mov	r1, r6
 800c73c:	4628      	mov	r0, r5
 800c73e:	47b8      	blx	r7
 800c740:	3001      	adds	r0, #1
 800c742:	f43f ae59 	beq.w	800c3f8 <_printf_float+0x98>
 800c746:	f108 0801 	add.w	r8, r8, #1
 800c74a:	9b08      	ldr	r3, [sp, #32]
 800c74c:	3b01      	subs	r3, #1
 800c74e:	4543      	cmp	r3, r8
 800c750:	dcf1      	bgt.n	800c736 <_printf_float+0x3d6>
 800c752:	9b04      	ldr	r3, [sp, #16]
 800c754:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c758:	e6dd      	b.n	800c516 <_printf_float+0x1b6>
 800c75a:	f04f 0800 	mov.w	r8, #0
 800c75e:	f104 091a 	add.w	r9, r4, #26
 800c762:	e7f2      	b.n	800c74a <_printf_float+0x3ea>
 800c764:	2301      	movs	r3, #1
 800c766:	4642      	mov	r2, r8
 800c768:	e7df      	b.n	800c72a <_printf_float+0x3ca>
 800c76a:	2301      	movs	r3, #1
 800c76c:	464a      	mov	r2, r9
 800c76e:	4631      	mov	r1, r6
 800c770:	4628      	mov	r0, r5
 800c772:	47b8      	blx	r7
 800c774:	3001      	adds	r0, #1
 800c776:	f43f ae3f 	beq.w	800c3f8 <_printf_float+0x98>
 800c77a:	f108 0801 	add.w	r8, r8, #1
 800c77e:	68e3      	ldr	r3, [r4, #12]
 800c780:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c782:	1a5b      	subs	r3, r3, r1
 800c784:	4543      	cmp	r3, r8
 800c786:	dcf0      	bgt.n	800c76a <_printf_float+0x40a>
 800c788:	e6f9      	b.n	800c57e <_printf_float+0x21e>
 800c78a:	f04f 0800 	mov.w	r8, #0
 800c78e:	f104 0919 	add.w	r9, r4, #25
 800c792:	e7f4      	b.n	800c77e <_printf_float+0x41e>

0800c794 <_printf_common>:
 800c794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c798:	4616      	mov	r6, r2
 800c79a:	4699      	mov	r9, r3
 800c79c:	688a      	ldr	r2, [r1, #8]
 800c79e:	690b      	ldr	r3, [r1, #16]
 800c7a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	bfb8      	it	lt
 800c7a8:	4613      	movlt	r3, r2
 800c7aa:	6033      	str	r3, [r6, #0]
 800c7ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c7b0:	4607      	mov	r7, r0
 800c7b2:	460c      	mov	r4, r1
 800c7b4:	b10a      	cbz	r2, 800c7ba <_printf_common+0x26>
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	6033      	str	r3, [r6, #0]
 800c7ba:	6823      	ldr	r3, [r4, #0]
 800c7bc:	0699      	lsls	r1, r3, #26
 800c7be:	bf42      	ittt	mi
 800c7c0:	6833      	ldrmi	r3, [r6, #0]
 800c7c2:	3302      	addmi	r3, #2
 800c7c4:	6033      	strmi	r3, [r6, #0]
 800c7c6:	6825      	ldr	r5, [r4, #0]
 800c7c8:	f015 0506 	ands.w	r5, r5, #6
 800c7cc:	d106      	bne.n	800c7dc <_printf_common+0x48>
 800c7ce:	f104 0a19 	add.w	sl, r4, #25
 800c7d2:	68e3      	ldr	r3, [r4, #12]
 800c7d4:	6832      	ldr	r2, [r6, #0]
 800c7d6:	1a9b      	subs	r3, r3, r2
 800c7d8:	42ab      	cmp	r3, r5
 800c7da:	dc26      	bgt.n	800c82a <_printf_common+0x96>
 800c7dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7e0:	1e13      	subs	r3, r2, #0
 800c7e2:	6822      	ldr	r2, [r4, #0]
 800c7e4:	bf18      	it	ne
 800c7e6:	2301      	movne	r3, #1
 800c7e8:	0692      	lsls	r2, r2, #26
 800c7ea:	d42b      	bmi.n	800c844 <_printf_common+0xb0>
 800c7ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7f0:	4649      	mov	r1, r9
 800c7f2:	4638      	mov	r0, r7
 800c7f4:	47c0      	blx	r8
 800c7f6:	3001      	adds	r0, #1
 800c7f8:	d01e      	beq.n	800c838 <_printf_common+0xa4>
 800c7fa:	6823      	ldr	r3, [r4, #0]
 800c7fc:	6922      	ldr	r2, [r4, #16]
 800c7fe:	f003 0306 	and.w	r3, r3, #6
 800c802:	2b04      	cmp	r3, #4
 800c804:	bf02      	ittt	eq
 800c806:	68e5      	ldreq	r5, [r4, #12]
 800c808:	6833      	ldreq	r3, [r6, #0]
 800c80a:	1aed      	subeq	r5, r5, r3
 800c80c:	68a3      	ldr	r3, [r4, #8]
 800c80e:	bf0c      	ite	eq
 800c810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c814:	2500      	movne	r5, #0
 800c816:	4293      	cmp	r3, r2
 800c818:	bfc4      	itt	gt
 800c81a:	1a9b      	subgt	r3, r3, r2
 800c81c:	18ed      	addgt	r5, r5, r3
 800c81e:	2600      	movs	r6, #0
 800c820:	341a      	adds	r4, #26
 800c822:	42b5      	cmp	r5, r6
 800c824:	d11a      	bne.n	800c85c <_printf_common+0xc8>
 800c826:	2000      	movs	r0, #0
 800c828:	e008      	b.n	800c83c <_printf_common+0xa8>
 800c82a:	2301      	movs	r3, #1
 800c82c:	4652      	mov	r2, sl
 800c82e:	4649      	mov	r1, r9
 800c830:	4638      	mov	r0, r7
 800c832:	47c0      	blx	r8
 800c834:	3001      	adds	r0, #1
 800c836:	d103      	bne.n	800c840 <_printf_common+0xac>
 800c838:	f04f 30ff 	mov.w	r0, #4294967295
 800c83c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c840:	3501      	adds	r5, #1
 800c842:	e7c6      	b.n	800c7d2 <_printf_common+0x3e>
 800c844:	18e1      	adds	r1, r4, r3
 800c846:	1c5a      	adds	r2, r3, #1
 800c848:	2030      	movs	r0, #48	; 0x30
 800c84a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c84e:	4422      	add	r2, r4
 800c850:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c854:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c858:	3302      	adds	r3, #2
 800c85a:	e7c7      	b.n	800c7ec <_printf_common+0x58>
 800c85c:	2301      	movs	r3, #1
 800c85e:	4622      	mov	r2, r4
 800c860:	4649      	mov	r1, r9
 800c862:	4638      	mov	r0, r7
 800c864:	47c0      	blx	r8
 800c866:	3001      	adds	r0, #1
 800c868:	d0e6      	beq.n	800c838 <_printf_common+0xa4>
 800c86a:	3601      	adds	r6, #1
 800c86c:	e7d9      	b.n	800c822 <_printf_common+0x8e>
	...

0800c870 <_printf_i>:
 800c870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c874:	7e0f      	ldrb	r7, [r1, #24]
 800c876:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c878:	2f78      	cmp	r7, #120	; 0x78
 800c87a:	4691      	mov	r9, r2
 800c87c:	4680      	mov	r8, r0
 800c87e:	460c      	mov	r4, r1
 800c880:	469a      	mov	sl, r3
 800c882:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c886:	d807      	bhi.n	800c898 <_printf_i+0x28>
 800c888:	2f62      	cmp	r7, #98	; 0x62
 800c88a:	d80a      	bhi.n	800c8a2 <_printf_i+0x32>
 800c88c:	2f00      	cmp	r7, #0
 800c88e:	f000 80d4 	beq.w	800ca3a <_printf_i+0x1ca>
 800c892:	2f58      	cmp	r7, #88	; 0x58
 800c894:	f000 80c0 	beq.w	800ca18 <_printf_i+0x1a8>
 800c898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c89c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8a0:	e03a      	b.n	800c918 <_printf_i+0xa8>
 800c8a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8a6:	2b15      	cmp	r3, #21
 800c8a8:	d8f6      	bhi.n	800c898 <_printf_i+0x28>
 800c8aa:	a101      	add	r1, pc, #4	; (adr r1, 800c8b0 <_printf_i+0x40>)
 800c8ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8b0:	0800c909 	.word	0x0800c909
 800c8b4:	0800c91d 	.word	0x0800c91d
 800c8b8:	0800c899 	.word	0x0800c899
 800c8bc:	0800c899 	.word	0x0800c899
 800c8c0:	0800c899 	.word	0x0800c899
 800c8c4:	0800c899 	.word	0x0800c899
 800c8c8:	0800c91d 	.word	0x0800c91d
 800c8cc:	0800c899 	.word	0x0800c899
 800c8d0:	0800c899 	.word	0x0800c899
 800c8d4:	0800c899 	.word	0x0800c899
 800c8d8:	0800c899 	.word	0x0800c899
 800c8dc:	0800ca21 	.word	0x0800ca21
 800c8e0:	0800c949 	.word	0x0800c949
 800c8e4:	0800c9db 	.word	0x0800c9db
 800c8e8:	0800c899 	.word	0x0800c899
 800c8ec:	0800c899 	.word	0x0800c899
 800c8f0:	0800ca43 	.word	0x0800ca43
 800c8f4:	0800c899 	.word	0x0800c899
 800c8f8:	0800c949 	.word	0x0800c949
 800c8fc:	0800c899 	.word	0x0800c899
 800c900:	0800c899 	.word	0x0800c899
 800c904:	0800c9e3 	.word	0x0800c9e3
 800c908:	682b      	ldr	r3, [r5, #0]
 800c90a:	1d1a      	adds	r2, r3, #4
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	602a      	str	r2, [r5, #0]
 800c910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c914:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c918:	2301      	movs	r3, #1
 800c91a:	e09f      	b.n	800ca5c <_printf_i+0x1ec>
 800c91c:	6820      	ldr	r0, [r4, #0]
 800c91e:	682b      	ldr	r3, [r5, #0]
 800c920:	0607      	lsls	r7, r0, #24
 800c922:	f103 0104 	add.w	r1, r3, #4
 800c926:	6029      	str	r1, [r5, #0]
 800c928:	d501      	bpl.n	800c92e <_printf_i+0xbe>
 800c92a:	681e      	ldr	r6, [r3, #0]
 800c92c:	e003      	b.n	800c936 <_printf_i+0xc6>
 800c92e:	0646      	lsls	r6, r0, #25
 800c930:	d5fb      	bpl.n	800c92a <_printf_i+0xba>
 800c932:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c936:	2e00      	cmp	r6, #0
 800c938:	da03      	bge.n	800c942 <_printf_i+0xd2>
 800c93a:	232d      	movs	r3, #45	; 0x2d
 800c93c:	4276      	negs	r6, r6
 800c93e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c942:	485a      	ldr	r0, [pc, #360]	; (800caac <_printf_i+0x23c>)
 800c944:	230a      	movs	r3, #10
 800c946:	e012      	b.n	800c96e <_printf_i+0xfe>
 800c948:	682b      	ldr	r3, [r5, #0]
 800c94a:	6820      	ldr	r0, [r4, #0]
 800c94c:	1d19      	adds	r1, r3, #4
 800c94e:	6029      	str	r1, [r5, #0]
 800c950:	0605      	lsls	r5, r0, #24
 800c952:	d501      	bpl.n	800c958 <_printf_i+0xe8>
 800c954:	681e      	ldr	r6, [r3, #0]
 800c956:	e002      	b.n	800c95e <_printf_i+0xee>
 800c958:	0641      	lsls	r1, r0, #25
 800c95a:	d5fb      	bpl.n	800c954 <_printf_i+0xe4>
 800c95c:	881e      	ldrh	r6, [r3, #0]
 800c95e:	4853      	ldr	r0, [pc, #332]	; (800caac <_printf_i+0x23c>)
 800c960:	2f6f      	cmp	r7, #111	; 0x6f
 800c962:	bf0c      	ite	eq
 800c964:	2308      	moveq	r3, #8
 800c966:	230a      	movne	r3, #10
 800c968:	2100      	movs	r1, #0
 800c96a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c96e:	6865      	ldr	r5, [r4, #4]
 800c970:	60a5      	str	r5, [r4, #8]
 800c972:	2d00      	cmp	r5, #0
 800c974:	bfa2      	ittt	ge
 800c976:	6821      	ldrge	r1, [r4, #0]
 800c978:	f021 0104 	bicge.w	r1, r1, #4
 800c97c:	6021      	strge	r1, [r4, #0]
 800c97e:	b90e      	cbnz	r6, 800c984 <_printf_i+0x114>
 800c980:	2d00      	cmp	r5, #0
 800c982:	d04b      	beq.n	800ca1c <_printf_i+0x1ac>
 800c984:	4615      	mov	r5, r2
 800c986:	fbb6 f1f3 	udiv	r1, r6, r3
 800c98a:	fb03 6711 	mls	r7, r3, r1, r6
 800c98e:	5dc7      	ldrb	r7, [r0, r7]
 800c990:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c994:	4637      	mov	r7, r6
 800c996:	42bb      	cmp	r3, r7
 800c998:	460e      	mov	r6, r1
 800c99a:	d9f4      	bls.n	800c986 <_printf_i+0x116>
 800c99c:	2b08      	cmp	r3, #8
 800c99e:	d10b      	bne.n	800c9b8 <_printf_i+0x148>
 800c9a0:	6823      	ldr	r3, [r4, #0]
 800c9a2:	07de      	lsls	r6, r3, #31
 800c9a4:	d508      	bpl.n	800c9b8 <_printf_i+0x148>
 800c9a6:	6923      	ldr	r3, [r4, #16]
 800c9a8:	6861      	ldr	r1, [r4, #4]
 800c9aa:	4299      	cmp	r1, r3
 800c9ac:	bfde      	ittt	le
 800c9ae:	2330      	movle	r3, #48	; 0x30
 800c9b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c9b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c9b8:	1b52      	subs	r2, r2, r5
 800c9ba:	6122      	str	r2, [r4, #16]
 800c9bc:	f8cd a000 	str.w	sl, [sp]
 800c9c0:	464b      	mov	r3, r9
 800c9c2:	aa03      	add	r2, sp, #12
 800c9c4:	4621      	mov	r1, r4
 800c9c6:	4640      	mov	r0, r8
 800c9c8:	f7ff fee4 	bl	800c794 <_printf_common>
 800c9cc:	3001      	adds	r0, #1
 800c9ce:	d14a      	bne.n	800ca66 <_printf_i+0x1f6>
 800c9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d4:	b004      	add	sp, #16
 800c9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9da:	6823      	ldr	r3, [r4, #0]
 800c9dc:	f043 0320 	orr.w	r3, r3, #32
 800c9e0:	6023      	str	r3, [r4, #0]
 800c9e2:	4833      	ldr	r0, [pc, #204]	; (800cab0 <_printf_i+0x240>)
 800c9e4:	2778      	movs	r7, #120	; 0x78
 800c9e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c9ea:	6823      	ldr	r3, [r4, #0]
 800c9ec:	6829      	ldr	r1, [r5, #0]
 800c9ee:	061f      	lsls	r7, r3, #24
 800c9f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c9f4:	d402      	bmi.n	800c9fc <_printf_i+0x18c>
 800c9f6:	065f      	lsls	r7, r3, #25
 800c9f8:	bf48      	it	mi
 800c9fa:	b2b6      	uxthmi	r6, r6
 800c9fc:	07df      	lsls	r7, r3, #31
 800c9fe:	bf48      	it	mi
 800ca00:	f043 0320 	orrmi.w	r3, r3, #32
 800ca04:	6029      	str	r1, [r5, #0]
 800ca06:	bf48      	it	mi
 800ca08:	6023      	strmi	r3, [r4, #0]
 800ca0a:	b91e      	cbnz	r6, 800ca14 <_printf_i+0x1a4>
 800ca0c:	6823      	ldr	r3, [r4, #0]
 800ca0e:	f023 0320 	bic.w	r3, r3, #32
 800ca12:	6023      	str	r3, [r4, #0]
 800ca14:	2310      	movs	r3, #16
 800ca16:	e7a7      	b.n	800c968 <_printf_i+0xf8>
 800ca18:	4824      	ldr	r0, [pc, #144]	; (800caac <_printf_i+0x23c>)
 800ca1a:	e7e4      	b.n	800c9e6 <_printf_i+0x176>
 800ca1c:	4615      	mov	r5, r2
 800ca1e:	e7bd      	b.n	800c99c <_printf_i+0x12c>
 800ca20:	682b      	ldr	r3, [r5, #0]
 800ca22:	6826      	ldr	r6, [r4, #0]
 800ca24:	6961      	ldr	r1, [r4, #20]
 800ca26:	1d18      	adds	r0, r3, #4
 800ca28:	6028      	str	r0, [r5, #0]
 800ca2a:	0635      	lsls	r5, r6, #24
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	d501      	bpl.n	800ca34 <_printf_i+0x1c4>
 800ca30:	6019      	str	r1, [r3, #0]
 800ca32:	e002      	b.n	800ca3a <_printf_i+0x1ca>
 800ca34:	0670      	lsls	r0, r6, #25
 800ca36:	d5fb      	bpl.n	800ca30 <_printf_i+0x1c0>
 800ca38:	8019      	strh	r1, [r3, #0]
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	6123      	str	r3, [r4, #16]
 800ca3e:	4615      	mov	r5, r2
 800ca40:	e7bc      	b.n	800c9bc <_printf_i+0x14c>
 800ca42:	682b      	ldr	r3, [r5, #0]
 800ca44:	1d1a      	adds	r2, r3, #4
 800ca46:	602a      	str	r2, [r5, #0]
 800ca48:	681d      	ldr	r5, [r3, #0]
 800ca4a:	6862      	ldr	r2, [r4, #4]
 800ca4c:	2100      	movs	r1, #0
 800ca4e:	4628      	mov	r0, r5
 800ca50:	f7f3 fc46 	bl	80002e0 <memchr>
 800ca54:	b108      	cbz	r0, 800ca5a <_printf_i+0x1ea>
 800ca56:	1b40      	subs	r0, r0, r5
 800ca58:	6060      	str	r0, [r4, #4]
 800ca5a:	6863      	ldr	r3, [r4, #4]
 800ca5c:	6123      	str	r3, [r4, #16]
 800ca5e:	2300      	movs	r3, #0
 800ca60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca64:	e7aa      	b.n	800c9bc <_printf_i+0x14c>
 800ca66:	6923      	ldr	r3, [r4, #16]
 800ca68:	462a      	mov	r2, r5
 800ca6a:	4649      	mov	r1, r9
 800ca6c:	4640      	mov	r0, r8
 800ca6e:	47d0      	blx	sl
 800ca70:	3001      	adds	r0, #1
 800ca72:	d0ad      	beq.n	800c9d0 <_printf_i+0x160>
 800ca74:	6823      	ldr	r3, [r4, #0]
 800ca76:	079b      	lsls	r3, r3, #30
 800ca78:	d413      	bmi.n	800caa2 <_printf_i+0x232>
 800ca7a:	68e0      	ldr	r0, [r4, #12]
 800ca7c:	9b03      	ldr	r3, [sp, #12]
 800ca7e:	4298      	cmp	r0, r3
 800ca80:	bfb8      	it	lt
 800ca82:	4618      	movlt	r0, r3
 800ca84:	e7a6      	b.n	800c9d4 <_printf_i+0x164>
 800ca86:	2301      	movs	r3, #1
 800ca88:	4632      	mov	r2, r6
 800ca8a:	4649      	mov	r1, r9
 800ca8c:	4640      	mov	r0, r8
 800ca8e:	47d0      	blx	sl
 800ca90:	3001      	adds	r0, #1
 800ca92:	d09d      	beq.n	800c9d0 <_printf_i+0x160>
 800ca94:	3501      	adds	r5, #1
 800ca96:	68e3      	ldr	r3, [r4, #12]
 800ca98:	9903      	ldr	r1, [sp, #12]
 800ca9a:	1a5b      	subs	r3, r3, r1
 800ca9c:	42ab      	cmp	r3, r5
 800ca9e:	dcf2      	bgt.n	800ca86 <_printf_i+0x216>
 800caa0:	e7eb      	b.n	800ca7a <_printf_i+0x20a>
 800caa2:	2500      	movs	r5, #0
 800caa4:	f104 0619 	add.w	r6, r4, #25
 800caa8:	e7f5      	b.n	800ca96 <_printf_i+0x226>
 800caaa:	bf00      	nop
 800caac:	0800fe22 	.word	0x0800fe22
 800cab0:	0800fe33 	.word	0x0800fe33

0800cab4 <std>:
 800cab4:	2300      	movs	r3, #0
 800cab6:	b510      	push	{r4, lr}
 800cab8:	4604      	mov	r4, r0
 800caba:	e9c0 3300 	strd	r3, r3, [r0]
 800cabe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cac2:	6083      	str	r3, [r0, #8]
 800cac4:	8181      	strh	r1, [r0, #12]
 800cac6:	6643      	str	r3, [r0, #100]	; 0x64
 800cac8:	81c2      	strh	r2, [r0, #14]
 800caca:	6183      	str	r3, [r0, #24]
 800cacc:	4619      	mov	r1, r3
 800cace:	2208      	movs	r2, #8
 800cad0:	305c      	adds	r0, #92	; 0x5c
 800cad2:	f000 f9f7 	bl	800cec4 <memset>
 800cad6:	4b0d      	ldr	r3, [pc, #52]	; (800cb0c <std+0x58>)
 800cad8:	6263      	str	r3, [r4, #36]	; 0x24
 800cada:	4b0d      	ldr	r3, [pc, #52]	; (800cb10 <std+0x5c>)
 800cadc:	62a3      	str	r3, [r4, #40]	; 0x28
 800cade:	4b0d      	ldr	r3, [pc, #52]	; (800cb14 <std+0x60>)
 800cae0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cae2:	4b0d      	ldr	r3, [pc, #52]	; (800cb18 <std+0x64>)
 800cae4:	6323      	str	r3, [r4, #48]	; 0x30
 800cae6:	4b0d      	ldr	r3, [pc, #52]	; (800cb1c <std+0x68>)
 800cae8:	6224      	str	r4, [r4, #32]
 800caea:	429c      	cmp	r4, r3
 800caec:	d006      	beq.n	800cafc <std+0x48>
 800caee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800caf2:	4294      	cmp	r4, r2
 800caf4:	d002      	beq.n	800cafc <std+0x48>
 800caf6:	33d0      	adds	r3, #208	; 0xd0
 800caf8:	429c      	cmp	r4, r3
 800cafa:	d105      	bne.n	800cb08 <std+0x54>
 800cafc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb04:	f000 bab0 	b.w	800d068 <__retarget_lock_init_recursive>
 800cb08:	bd10      	pop	{r4, pc}
 800cb0a:	bf00      	nop
 800cb0c:	0800cd15 	.word	0x0800cd15
 800cb10:	0800cd37 	.word	0x0800cd37
 800cb14:	0800cd6f 	.word	0x0800cd6f
 800cb18:	0800cd93 	.word	0x0800cd93
 800cb1c:	24004f20 	.word	0x24004f20

0800cb20 <stdio_exit_handler>:
 800cb20:	4a02      	ldr	r2, [pc, #8]	; (800cb2c <stdio_exit_handler+0xc>)
 800cb22:	4903      	ldr	r1, [pc, #12]	; (800cb30 <stdio_exit_handler+0x10>)
 800cb24:	4803      	ldr	r0, [pc, #12]	; (800cb34 <stdio_exit_handler+0x14>)
 800cb26:	f000 b869 	b.w	800cbfc <_fwalk_sglue>
 800cb2a:	bf00      	nop
 800cb2c:	24000014 	.word	0x24000014
 800cb30:	0800e905 	.word	0x0800e905
 800cb34:	24000020 	.word	0x24000020

0800cb38 <cleanup_stdio>:
 800cb38:	6841      	ldr	r1, [r0, #4]
 800cb3a:	4b0c      	ldr	r3, [pc, #48]	; (800cb6c <cleanup_stdio+0x34>)
 800cb3c:	4299      	cmp	r1, r3
 800cb3e:	b510      	push	{r4, lr}
 800cb40:	4604      	mov	r4, r0
 800cb42:	d001      	beq.n	800cb48 <cleanup_stdio+0x10>
 800cb44:	f001 fede 	bl	800e904 <_fflush_r>
 800cb48:	68a1      	ldr	r1, [r4, #8]
 800cb4a:	4b09      	ldr	r3, [pc, #36]	; (800cb70 <cleanup_stdio+0x38>)
 800cb4c:	4299      	cmp	r1, r3
 800cb4e:	d002      	beq.n	800cb56 <cleanup_stdio+0x1e>
 800cb50:	4620      	mov	r0, r4
 800cb52:	f001 fed7 	bl	800e904 <_fflush_r>
 800cb56:	68e1      	ldr	r1, [r4, #12]
 800cb58:	4b06      	ldr	r3, [pc, #24]	; (800cb74 <cleanup_stdio+0x3c>)
 800cb5a:	4299      	cmp	r1, r3
 800cb5c:	d004      	beq.n	800cb68 <cleanup_stdio+0x30>
 800cb5e:	4620      	mov	r0, r4
 800cb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb64:	f001 bece 	b.w	800e904 <_fflush_r>
 800cb68:	bd10      	pop	{r4, pc}
 800cb6a:	bf00      	nop
 800cb6c:	24004f20 	.word	0x24004f20
 800cb70:	24004f88 	.word	0x24004f88
 800cb74:	24004ff0 	.word	0x24004ff0

0800cb78 <global_stdio_init.part.0>:
 800cb78:	b510      	push	{r4, lr}
 800cb7a:	4b0b      	ldr	r3, [pc, #44]	; (800cba8 <global_stdio_init.part.0+0x30>)
 800cb7c:	4c0b      	ldr	r4, [pc, #44]	; (800cbac <global_stdio_init.part.0+0x34>)
 800cb7e:	4a0c      	ldr	r2, [pc, #48]	; (800cbb0 <global_stdio_init.part.0+0x38>)
 800cb80:	601a      	str	r2, [r3, #0]
 800cb82:	4620      	mov	r0, r4
 800cb84:	2200      	movs	r2, #0
 800cb86:	2104      	movs	r1, #4
 800cb88:	f7ff ff94 	bl	800cab4 <std>
 800cb8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cb90:	2201      	movs	r2, #1
 800cb92:	2109      	movs	r1, #9
 800cb94:	f7ff ff8e 	bl	800cab4 <std>
 800cb98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cb9c:	2202      	movs	r2, #2
 800cb9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cba2:	2112      	movs	r1, #18
 800cba4:	f7ff bf86 	b.w	800cab4 <std>
 800cba8:	24005058 	.word	0x24005058
 800cbac:	24004f20 	.word	0x24004f20
 800cbb0:	0800cb21 	.word	0x0800cb21

0800cbb4 <__sfp_lock_acquire>:
 800cbb4:	4801      	ldr	r0, [pc, #4]	; (800cbbc <__sfp_lock_acquire+0x8>)
 800cbb6:	f000 ba58 	b.w	800d06a <__retarget_lock_acquire_recursive>
 800cbba:	bf00      	nop
 800cbbc:	24005061 	.word	0x24005061

0800cbc0 <__sfp_lock_release>:
 800cbc0:	4801      	ldr	r0, [pc, #4]	; (800cbc8 <__sfp_lock_release+0x8>)
 800cbc2:	f000 ba53 	b.w	800d06c <__retarget_lock_release_recursive>
 800cbc6:	bf00      	nop
 800cbc8:	24005061 	.word	0x24005061

0800cbcc <__sinit>:
 800cbcc:	b510      	push	{r4, lr}
 800cbce:	4604      	mov	r4, r0
 800cbd0:	f7ff fff0 	bl	800cbb4 <__sfp_lock_acquire>
 800cbd4:	6a23      	ldr	r3, [r4, #32]
 800cbd6:	b11b      	cbz	r3, 800cbe0 <__sinit+0x14>
 800cbd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbdc:	f7ff bff0 	b.w	800cbc0 <__sfp_lock_release>
 800cbe0:	4b04      	ldr	r3, [pc, #16]	; (800cbf4 <__sinit+0x28>)
 800cbe2:	6223      	str	r3, [r4, #32]
 800cbe4:	4b04      	ldr	r3, [pc, #16]	; (800cbf8 <__sinit+0x2c>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1f5      	bne.n	800cbd8 <__sinit+0xc>
 800cbec:	f7ff ffc4 	bl	800cb78 <global_stdio_init.part.0>
 800cbf0:	e7f2      	b.n	800cbd8 <__sinit+0xc>
 800cbf2:	bf00      	nop
 800cbf4:	0800cb39 	.word	0x0800cb39
 800cbf8:	24005058 	.word	0x24005058

0800cbfc <_fwalk_sglue>:
 800cbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc00:	4607      	mov	r7, r0
 800cc02:	4688      	mov	r8, r1
 800cc04:	4614      	mov	r4, r2
 800cc06:	2600      	movs	r6, #0
 800cc08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc0c:	f1b9 0901 	subs.w	r9, r9, #1
 800cc10:	d505      	bpl.n	800cc1e <_fwalk_sglue+0x22>
 800cc12:	6824      	ldr	r4, [r4, #0]
 800cc14:	2c00      	cmp	r4, #0
 800cc16:	d1f7      	bne.n	800cc08 <_fwalk_sglue+0xc>
 800cc18:	4630      	mov	r0, r6
 800cc1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc1e:	89ab      	ldrh	r3, [r5, #12]
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d907      	bls.n	800cc34 <_fwalk_sglue+0x38>
 800cc24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	d003      	beq.n	800cc34 <_fwalk_sglue+0x38>
 800cc2c:	4629      	mov	r1, r5
 800cc2e:	4638      	mov	r0, r7
 800cc30:	47c0      	blx	r8
 800cc32:	4306      	orrs	r6, r0
 800cc34:	3568      	adds	r5, #104	; 0x68
 800cc36:	e7e9      	b.n	800cc0c <_fwalk_sglue+0x10>

0800cc38 <iprintf>:
 800cc38:	b40f      	push	{r0, r1, r2, r3}
 800cc3a:	b507      	push	{r0, r1, r2, lr}
 800cc3c:	4906      	ldr	r1, [pc, #24]	; (800cc58 <iprintf+0x20>)
 800cc3e:	ab04      	add	r3, sp, #16
 800cc40:	6808      	ldr	r0, [r1, #0]
 800cc42:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc46:	6881      	ldr	r1, [r0, #8]
 800cc48:	9301      	str	r3, [sp, #4]
 800cc4a:	f001 fcbb 	bl	800e5c4 <_vfiprintf_r>
 800cc4e:	b003      	add	sp, #12
 800cc50:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc54:	b004      	add	sp, #16
 800cc56:	4770      	bx	lr
 800cc58:	2400006c 	.word	0x2400006c

0800cc5c <_puts_r>:
 800cc5c:	6a03      	ldr	r3, [r0, #32]
 800cc5e:	b570      	push	{r4, r5, r6, lr}
 800cc60:	6884      	ldr	r4, [r0, #8]
 800cc62:	4605      	mov	r5, r0
 800cc64:	460e      	mov	r6, r1
 800cc66:	b90b      	cbnz	r3, 800cc6c <_puts_r+0x10>
 800cc68:	f7ff ffb0 	bl	800cbcc <__sinit>
 800cc6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc6e:	07db      	lsls	r3, r3, #31
 800cc70:	d405      	bmi.n	800cc7e <_puts_r+0x22>
 800cc72:	89a3      	ldrh	r3, [r4, #12]
 800cc74:	0598      	lsls	r0, r3, #22
 800cc76:	d402      	bmi.n	800cc7e <_puts_r+0x22>
 800cc78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc7a:	f000 f9f6 	bl	800d06a <__retarget_lock_acquire_recursive>
 800cc7e:	89a3      	ldrh	r3, [r4, #12]
 800cc80:	0719      	lsls	r1, r3, #28
 800cc82:	d513      	bpl.n	800ccac <_puts_r+0x50>
 800cc84:	6923      	ldr	r3, [r4, #16]
 800cc86:	b18b      	cbz	r3, 800ccac <_puts_r+0x50>
 800cc88:	3e01      	subs	r6, #1
 800cc8a:	68a3      	ldr	r3, [r4, #8]
 800cc8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cc90:	3b01      	subs	r3, #1
 800cc92:	60a3      	str	r3, [r4, #8]
 800cc94:	b9e9      	cbnz	r1, 800ccd2 <_puts_r+0x76>
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	da2e      	bge.n	800ccf8 <_puts_r+0x9c>
 800cc9a:	4622      	mov	r2, r4
 800cc9c:	210a      	movs	r1, #10
 800cc9e:	4628      	mov	r0, r5
 800cca0:	f000 f87b 	bl	800cd9a <__swbuf_r>
 800cca4:	3001      	adds	r0, #1
 800cca6:	d007      	beq.n	800ccb8 <_puts_r+0x5c>
 800cca8:	250a      	movs	r5, #10
 800ccaa:	e007      	b.n	800ccbc <_puts_r+0x60>
 800ccac:	4621      	mov	r1, r4
 800ccae:	4628      	mov	r0, r5
 800ccb0:	f000 f8b0 	bl	800ce14 <__swsetup_r>
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d0e7      	beq.n	800cc88 <_puts_r+0x2c>
 800ccb8:	f04f 35ff 	mov.w	r5, #4294967295
 800ccbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ccbe:	07da      	lsls	r2, r3, #31
 800ccc0:	d405      	bmi.n	800ccce <_puts_r+0x72>
 800ccc2:	89a3      	ldrh	r3, [r4, #12]
 800ccc4:	059b      	lsls	r3, r3, #22
 800ccc6:	d402      	bmi.n	800ccce <_puts_r+0x72>
 800ccc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccca:	f000 f9cf 	bl	800d06c <__retarget_lock_release_recursive>
 800ccce:	4628      	mov	r0, r5
 800ccd0:	bd70      	pop	{r4, r5, r6, pc}
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	da04      	bge.n	800cce0 <_puts_r+0x84>
 800ccd6:	69a2      	ldr	r2, [r4, #24]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	dc06      	bgt.n	800ccea <_puts_r+0x8e>
 800ccdc:	290a      	cmp	r1, #10
 800ccde:	d004      	beq.n	800ccea <_puts_r+0x8e>
 800cce0:	6823      	ldr	r3, [r4, #0]
 800cce2:	1c5a      	adds	r2, r3, #1
 800cce4:	6022      	str	r2, [r4, #0]
 800cce6:	7019      	strb	r1, [r3, #0]
 800cce8:	e7cf      	b.n	800cc8a <_puts_r+0x2e>
 800ccea:	4622      	mov	r2, r4
 800ccec:	4628      	mov	r0, r5
 800ccee:	f000 f854 	bl	800cd9a <__swbuf_r>
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	d1c9      	bne.n	800cc8a <_puts_r+0x2e>
 800ccf6:	e7df      	b.n	800ccb8 <_puts_r+0x5c>
 800ccf8:	6823      	ldr	r3, [r4, #0]
 800ccfa:	250a      	movs	r5, #10
 800ccfc:	1c5a      	adds	r2, r3, #1
 800ccfe:	6022      	str	r2, [r4, #0]
 800cd00:	701d      	strb	r5, [r3, #0]
 800cd02:	e7db      	b.n	800ccbc <_puts_r+0x60>

0800cd04 <puts>:
 800cd04:	4b02      	ldr	r3, [pc, #8]	; (800cd10 <puts+0xc>)
 800cd06:	4601      	mov	r1, r0
 800cd08:	6818      	ldr	r0, [r3, #0]
 800cd0a:	f7ff bfa7 	b.w	800cc5c <_puts_r>
 800cd0e:	bf00      	nop
 800cd10:	2400006c 	.word	0x2400006c

0800cd14 <__sread>:
 800cd14:	b510      	push	{r4, lr}
 800cd16:	460c      	mov	r4, r1
 800cd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd1c:	f000 f956 	bl	800cfcc <_read_r>
 800cd20:	2800      	cmp	r0, #0
 800cd22:	bfab      	itete	ge
 800cd24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd26:	89a3      	ldrhlt	r3, [r4, #12]
 800cd28:	181b      	addge	r3, r3, r0
 800cd2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd2e:	bfac      	ite	ge
 800cd30:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd32:	81a3      	strhlt	r3, [r4, #12]
 800cd34:	bd10      	pop	{r4, pc}

0800cd36 <__swrite>:
 800cd36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd3a:	461f      	mov	r7, r3
 800cd3c:	898b      	ldrh	r3, [r1, #12]
 800cd3e:	05db      	lsls	r3, r3, #23
 800cd40:	4605      	mov	r5, r0
 800cd42:	460c      	mov	r4, r1
 800cd44:	4616      	mov	r6, r2
 800cd46:	d505      	bpl.n	800cd54 <__swrite+0x1e>
 800cd48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd4c:	2302      	movs	r3, #2
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f000 f92a 	bl	800cfa8 <_lseek_r>
 800cd54:	89a3      	ldrh	r3, [r4, #12]
 800cd56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd5e:	81a3      	strh	r3, [r4, #12]
 800cd60:	4632      	mov	r2, r6
 800cd62:	463b      	mov	r3, r7
 800cd64:	4628      	mov	r0, r5
 800cd66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd6a:	f000 b941 	b.w	800cff0 <_write_r>

0800cd6e <__sseek>:
 800cd6e:	b510      	push	{r4, lr}
 800cd70:	460c      	mov	r4, r1
 800cd72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd76:	f000 f917 	bl	800cfa8 <_lseek_r>
 800cd7a:	1c43      	adds	r3, r0, #1
 800cd7c:	89a3      	ldrh	r3, [r4, #12]
 800cd7e:	bf15      	itete	ne
 800cd80:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd8a:	81a3      	strheq	r3, [r4, #12]
 800cd8c:	bf18      	it	ne
 800cd8e:	81a3      	strhne	r3, [r4, #12]
 800cd90:	bd10      	pop	{r4, pc}

0800cd92 <__sclose>:
 800cd92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd96:	f000 b8a1 	b.w	800cedc <_close_r>

0800cd9a <__swbuf_r>:
 800cd9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9c:	460e      	mov	r6, r1
 800cd9e:	4614      	mov	r4, r2
 800cda0:	4605      	mov	r5, r0
 800cda2:	b118      	cbz	r0, 800cdac <__swbuf_r+0x12>
 800cda4:	6a03      	ldr	r3, [r0, #32]
 800cda6:	b90b      	cbnz	r3, 800cdac <__swbuf_r+0x12>
 800cda8:	f7ff ff10 	bl	800cbcc <__sinit>
 800cdac:	69a3      	ldr	r3, [r4, #24]
 800cdae:	60a3      	str	r3, [r4, #8]
 800cdb0:	89a3      	ldrh	r3, [r4, #12]
 800cdb2:	071a      	lsls	r2, r3, #28
 800cdb4:	d525      	bpl.n	800ce02 <__swbuf_r+0x68>
 800cdb6:	6923      	ldr	r3, [r4, #16]
 800cdb8:	b31b      	cbz	r3, 800ce02 <__swbuf_r+0x68>
 800cdba:	6823      	ldr	r3, [r4, #0]
 800cdbc:	6922      	ldr	r2, [r4, #16]
 800cdbe:	1a98      	subs	r0, r3, r2
 800cdc0:	6963      	ldr	r3, [r4, #20]
 800cdc2:	b2f6      	uxtb	r6, r6
 800cdc4:	4283      	cmp	r3, r0
 800cdc6:	4637      	mov	r7, r6
 800cdc8:	dc04      	bgt.n	800cdd4 <__swbuf_r+0x3a>
 800cdca:	4621      	mov	r1, r4
 800cdcc:	4628      	mov	r0, r5
 800cdce:	f001 fd99 	bl	800e904 <_fflush_r>
 800cdd2:	b9e0      	cbnz	r0, 800ce0e <__swbuf_r+0x74>
 800cdd4:	68a3      	ldr	r3, [r4, #8]
 800cdd6:	3b01      	subs	r3, #1
 800cdd8:	60a3      	str	r3, [r4, #8]
 800cdda:	6823      	ldr	r3, [r4, #0]
 800cddc:	1c5a      	adds	r2, r3, #1
 800cdde:	6022      	str	r2, [r4, #0]
 800cde0:	701e      	strb	r6, [r3, #0]
 800cde2:	6962      	ldr	r2, [r4, #20]
 800cde4:	1c43      	adds	r3, r0, #1
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d004      	beq.n	800cdf4 <__swbuf_r+0x5a>
 800cdea:	89a3      	ldrh	r3, [r4, #12]
 800cdec:	07db      	lsls	r3, r3, #31
 800cdee:	d506      	bpl.n	800cdfe <__swbuf_r+0x64>
 800cdf0:	2e0a      	cmp	r6, #10
 800cdf2:	d104      	bne.n	800cdfe <__swbuf_r+0x64>
 800cdf4:	4621      	mov	r1, r4
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	f001 fd84 	bl	800e904 <_fflush_r>
 800cdfc:	b938      	cbnz	r0, 800ce0e <__swbuf_r+0x74>
 800cdfe:	4638      	mov	r0, r7
 800ce00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce02:	4621      	mov	r1, r4
 800ce04:	4628      	mov	r0, r5
 800ce06:	f000 f805 	bl	800ce14 <__swsetup_r>
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	d0d5      	beq.n	800cdba <__swbuf_r+0x20>
 800ce0e:	f04f 37ff 	mov.w	r7, #4294967295
 800ce12:	e7f4      	b.n	800cdfe <__swbuf_r+0x64>

0800ce14 <__swsetup_r>:
 800ce14:	b538      	push	{r3, r4, r5, lr}
 800ce16:	4b2a      	ldr	r3, [pc, #168]	; (800cec0 <__swsetup_r+0xac>)
 800ce18:	4605      	mov	r5, r0
 800ce1a:	6818      	ldr	r0, [r3, #0]
 800ce1c:	460c      	mov	r4, r1
 800ce1e:	b118      	cbz	r0, 800ce28 <__swsetup_r+0x14>
 800ce20:	6a03      	ldr	r3, [r0, #32]
 800ce22:	b90b      	cbnz	r3, 800ce28 <__swsetup_r+0x14>
 800ce24:	f7ff fed2 	bl	800cbcc <__sinit>
 800ce28:	89a3      	ldrh	r3, [r4, #12]
 800ce2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce2e:	0718      	lsls	r0, r3, #28
 800ce30:	d422      	bmi.n	800ce78 <__swsetup_r+0x64>
 800ce32:	06d9      	lsls	r1, r3, #27
 800ce34:	d407      	bmi.n	800ce46 <__swsetup_r+0x32>
 800ce36:	2309      	movs	r3, #9
 800ce38:	602b      	str	r3, [r5, #0]
 800ce3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce3e:	81a3      	strh	r3, [r4, #12]
 800ce40:	f04f 30ff 	mov.w	r0, #4294967295
 800ce44:	e034      	b.n	800ceb0 <__swsetup_r+0x9c>
 800ce46:	0758      	lsls	r0, r3, #29
 800ce48:	d512      	bpl.n	800ce70 <__swsetup_r+0x5c>
 800ce4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce4c:	b141      	cbz	r1, 800ce60 <__swsetup_r+0x4c>
 800ce4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce52:	4299      	cmp	r1, r3
 800ce54:	d002      	beq.n	800ce5c <__swsetup_r+0x48>
 800ce56:	4628      	mov	r0, r5
 800ce58:	f000 ff0e 	bl	800dc78 <_free_r>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	6363      	str	r3, [r4, #52]	; 0x34
 800ce60:	89a3      	ldrh	r3, [r4, #12]
 800ce62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce66:	81a3      	strh	r3, [r4, #12]
 800ce68:	2300      	movs	r3, #0
 800ce6a:	6063      	str	r3, [r4, #4]
 800ce6c:	6923      	ldr	r3, [r4, #16]
 800ce6e:	6023      	str	r3, [r4, #0]
 800ce70:	89a3      	ldrh	r3, [r4, #12]
 800ce72:	f043 0308 	orr.w	r3, r3, #8
 800ce76:	81a3      	strh	r3, [r4, #12]
 800ce78:	6923      	ldr	r3, [r4, #16]
 800ce7a:	b94b      	cbnz	r3, 800ce90 <__swsetup_r+0x7c>
 800ce7c:	89a3      	ldrh	r3, [r4, #12]
 800ce7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce86:	d003      	beq.n	800ce90 <__swsetup_r+0x7c>
 800ce88:	4621      	mov	r1, r4
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	f001 fd88 	bl	800e9a0 <__smakebuf_r>
 800ce90:	89a0      	ldrh	r0, [r4, #12]
 800ce92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce96:	f010 0301 	ands.w	r3, r0, #1
 800ce9a:	d00a      	beq.n	800ceb2 <__swsetup_r+0x9e>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	60a3      	str	r3, [r4, #8]
 800cea0:	6963      	ldr	r3, [r4, #20]
 800cea2:	425b      	negs	r3, r3
 800cea4:	61a3      	str	r3, [r4, #24]
 800cea6:	6923      	ldr	r3, [r4, #16]
 800cea8:	b943      	cbnz	r3, 800cebc <__swsetup_r+0xa8>
 800ceaa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ceae:	d1c4      	bne.n	800ce3a <__swsetup_r+0x26>
 800ceb0:	bd38      	pop	{r3, r4, r5, pc}
 800ceb2:	0781      	lsls	r1, r0, #30
 800ceb4:	bf58      	it	pl
 800ceb6:	6963      	ldrpl	r3, [r4, #20]
 800ceb8:	60a3      	str	r3, [r4, #8]
 800ceba:	e7f4      	b.n	800cea6 <__swsetup_r+0x92>
 800cebc:	2000      	movs	r0, #0
 800cebe:	e7f7      	b.n	800ceb0 <__swsetup_r+0x9c>
 800cec0:	2400006c 	.word	0x2400006c

0800cec4 <memset>:
 800cec4:	4402      	add	r2, r0
 800cec6:	4603      	mov	r3, r0
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d100      	bne.n	800cece <memset+0xa>
 800cecc:	4770      	bx	lr
 800cece:	f803 1b01 	strb.w	r1, [r3], #1
 800ced2:	e7f9      	b.n	800cec8 <memset+0x4>

0800ced4 <_localeconv_r>:
 800ced4:	4800      	ldr	r0, [pc, #0]	; (800ced8 <_localeconv_r+0x4>)
 800ced6:	4770      	bx	lr
 800ced8:	24000160 	.word	0x24000160

0800cedc <_close_r>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	4d06      	ldr	r5, [pc, #24]	; (800cef8 <_close_r+0x1c>)
 800cee0:	2300      	movs	r3, #0
 800cee2:	4604      	mov	r4, r0
 800cee4:	4608      	mov	r0, r1
 800cee6:	602b      	str	r3, [r5, #0]
 800cee8:	f7f5 fca2 	bl	8002830 <_close>
 800ceec:	1c43      	adds	r3, r0, #1
 800ceee:	d102      	bne.n	800cef6 <_close_r+0x1a>
 800cef0:	682b      	ldr	r3, [r5, #0]
 800cef2:	b103      	cbz	r3, 800cef6 <_close_r+0x1a>
 800cef4:	6023      	str	r3, [r4, #0]
 800cef6:	bd38      	pop	{r3, r4, r5, pc}
 800cef8:	2400505c 	.word	0x2400505c

0800cefc <_reclaim_reent>:
 800cefc:	4b29      	ldr	r3, [pc, #164]	; (800cfa4 <_reclaim_reent+0xa8>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4283      	cmp	r3, r0
 800cf02:	b570      	push	{r4, r5, r6, lr}
 800cf04:	4604      	mov	r4, r0
 800cf06:	d04b      	beq.n	800cfa0 <_reclaim_reent+0xa4>
 800cf08:	69c3      	ldr	r3, [r0, #28]
 800cf0a:	b143      	cbz	r3, 800cf1e <_reclaim_reent+0x22>
 800cf0c:	68db      	ldr	r3, [r3, #12]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d144      	bne.n	800cf9c <_reclaim_reent+0xa0>
 800cf12:	69e3      	ldr	r3, [r4, #28]
 800cf14:	6819      	ldr	r1, [r3, #0]
 800cf16:	b111      	cbz	r1, 800cf1e <_reclaim_reent+0x22>
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f000 fead 	bl	800dc78 <_free_r>
 800cf1e:	6961      	ldr	r1, [r4, #20]
 800cf20:	b111      	cbz	r1, 800cf28 <_reclaim_reent+0x2c>
 800cf22:	4620      	mov	r0, r4
 800cf24:	f000 fea8 	bl	800dc78 <_free_r>
 800cf28:	69e1      	ldr	r1, [r4, #28]
 800cf2a:	b111      	cbz	r1, 800cf32 <_reclaim_reent+0x36>
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f000 fea3 	bl	800dc78 <_free_r>
 800cf32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cf34:	b111      	cbz	r1, 800cf3c <_reclaim_reent+0x40>
 800cf36:	4620      	mov	r0, r4
 800cf38:	f000 fe9e 	bl	800dc78 <_free_r>
 800cf3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf3e:	b111      	cbz	r1, 800cf46 <_reclaim_reent+0x4a>
 800cf40:	4620      	mov	r0, r4
 800cf42:	f000 fe99 	bl	800dc78 <_free_r>
 800cf46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cf48:	b111      	cbz	r1, 800cf50 <_reclaim_reent+0x54>
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	f000 fe94 	bl	800dc78 <_free_r>
 800cf50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cf52:	b111      	cbz	r1, 800cf5a <_reclaim_reent+0x5e>
 800cf54:	4620      	mov	r0, r4
 800cf56:	f000 fe8f 	bl	800dc78 <_free_r>
 800cf5a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cf5c:	b111      	cbz	r1, 800cf64 <_reclaim_reent+0x68>
 800cf5e:	4620      	mov	r0, r4
 800cf60:	f000 fe8a 	bl	800dc78 <_free_r>
 800cf64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cf66:	b111      	cbz	r1, 800cf6e <_reclaim_reent+0x72>
 800cf68:	4620      	mov	r0, r4
 800cf6a:	f000 fe85 	bl	800dc78 <_free_r>
 800cf6e:	6a23      	ldr	r3, [r4, #32]
 800cf70:	b1b3      	cbz	r3, 800cfa0 <_reclaim_reent+0xa4>
 800cf72:	4620      	mov	r0, r4
 800cf74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf78:	4718      	bx	r3
 800cf7a:	5949      	ldr	r1, [r1, r5]
 800cf7c:	b941      	cbnz	r1, 800cf90 <_reclaim_reent+0x94>
 800cf7e:	3504      	adds	r5, #4
 800cf80:	69e3      	ldr	r3, [r4, #28]
 800cf82:	2d80      	cmp	r5, #128	; 0x80
 800cf84:	68d9      	ldr	r1, [r3, #12]
 800cf86:	d1f8      	bne.n	800cf7a <_reclaim_reent+0x7e>
 800cf88:	4620      	mov	r0, r4
 800cf8a:	f000 fe75 	bl	800dc78 <_free_r>
 800cf8e:	e7c0      	b.n	800cf12 <_reclaim_reent+0x16>
 800cf90:	680e      	ldr	r6, [r1, #0]
 800cf92:	4620      	mov	r0, r4
 800cf94:	f000 fe70 	bl	800dc78 <_free_r>
 800cf98:	4631      	mov	r1, r6
 800cf9a:	e7ef      	b.n	800cf7c <_reclaim_reent+0x80>
 800cf9c:	2500      	movs	r5, #0
 800cf9e:	e7ef      	b.n	800cf80 <_reclaim_reent+0x84>
 800cfa0:	bd70      	pop	{r4, r5, r6, pc}
 800cfa2:	bf00      	nop
 800cfa4:	2400006c 	.word	0x2400006c

0800cfa8 <_lseek_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	4d07      	ldr	r5, [pc, #28]	; (800cfc8 <_lseek_r+0x20>)
 800cfac:	4604      	mov	r4, r0
 800cfae:	4608      	mov	r0, r1
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	602a      	str	r2, [r5, #0]
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	f7f5 fc61 	bl	800287e <_lseek>
 800cfbc:	1c43      	adds	r3, r0, #1
 800cfbe:	d102      	bne.n	800cfc6 <_lseek_r+0x1e>
 800cfc0:	682b      	ldr	r3, [r5, #0]
 800cfc2:	b103      	cbz	r3, 800cfc6 <_lseek_r+0x1e>
 800cfc4:	6023      	str	r3, [r4, #0]
 800cfc6:	bd38      	pop	{r3, r4, r5, pc}
 800cfc8:	2400505c 	.word	0x2400505c

0800cfcc <_read_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4d07      	ldr	r5, [pc, #28]	; (800cfec <_read_r+0x20>)
 800cfd0:	4604      	mov	r4, r0
 800cfd2:	4608      	mov	r0, r1
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	602a      	str	r2, [r5, #0]
 800cfda:	461a      	mov	r2, r3
 800cfdc:	f7f5 fbef 	bl	80027be <_read>
 800cfe0:	1c43      	adds	r3, r0, #1
 800cfe2:	d102      	bne.n	800cfea <_read_r+0x1e>
 800cfe4:	682b      	ldr	r3, [r5, #0]
 800cfe6:	b103      	cbz	r3, 800cfea <_read_r+0x1e>
 800cfe8:	6023      	str	r3, [r4, #0]
 800cfea:	bd38      	pop	{r3, r4, r5, pc}
 800cfec:	2400505c 	.word	0x2400505c

0800cff0 <_write_r>:
 800cff0:	b538      	push	{r3, r4, r5, lr}
 800cff2:	4d07      	ldr	r5, [pc, #28]	; (800d010 <_write_r+0x20>)
 800cff4:	4604      	mov	r4, r0
 800cff6:	4608      	mov	r0, r1
 800cff8:	4611      	mov	r1, r2
 800cffa:	2200      	movs	r2, #0
 800cffc:	602a      	str	r2, [r5, #0]
 800cffe:	461a      	mov	r2, r3
 800d000:	f7f5 fbfa 	bl	80027f8 <_write>
 800d004:	1c43      	adds	r3, r0, #1
 800d006:	d102      	bne.n	800d00e <_write_r+0x1e>
 800d008:	682b      	ldr	r3, [r5, #0]
 800d00a:	b103      	cbz	r3, 800d00e <_write_r+0x1e>
 800d00c:	6023      	str	r3, [r4, #0]
 800d00e:	bd38      	pop	{r3, r4, r5, pc}
 800d010:	2400505c 	.word	0x2400505c

0800d014 <__errno>:
 800d014:	4b01      	ldr	r3, [pc, #4]	; (800d01c <__errno+0x8>)
 800d016:	6818      	ldr	r0, [r3, #0]
 800d018:	4770      	bx	lr
 800d01a:	bf00      	nop
 800d01c:	2400006c 	.word	0x2400006c

0800d020 <__libc_init_array>:
 800d020:	b570      	push	{r4, r5, r6, lr}
 800d022:	4d0d      	ldr	r5, [pc, #52]	; (800d058 <__libc_init_array+0x38>)
 800d024:	4c0d      	ldr	r4, [pc, #52]	; (800d05c <__libc_init_array+0x3c>)
 800d026:	1b64      	subs	r4, r4, r5
 800d028:	10a4      	asrs	r4, r4, #2
 800d02a:	2600      	movs	r6, #0
 800d02c:	42a6      	cmp	r6, r4
 800d02e:	d109      	bne.n	800d044 <__libc_init_array+0x24>
 800d030:	4d0b      	ldr	r5, [pc, #44]	; (800d060 <__libc_init_array+0x40>)
 800d032:	4c0c      	ldr	r4, [pc, #48]	; (800d064 <__libc_init_array+0x44>)
 800d034:	f002 fdcc 	bl	800fbd0 <_init>
 800d038:	1b64      	subs	r4, r4, r5
 800d03a:	10a4      	asrs	r4, r4, #2
 800d03c:	2600      	movs	r6, #0
 800d03e:	42a6      	cmp	r6, r4
 800d040:	d105      	bne.n	800d04e <__libc_init_array+0x2e>
 800d042:	bd70      	pop	{r4, r5, r6, pc}
 800d044:	f855 3b04 	ldr.w	r3, [r5], #4
 800d048:	4798      	blx	r3
 800d04a:	3601      	adds	r6, #1
 800d04c:	e7ee      	b.n	800d02c <__libc_init_array+0xc>
 800d04e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d052:	4798      	blx	r3
 800d054:	3601      	adds	r6, #1
 800d056:	e7f2      	b.n	800d03e <__libc_init_array+0x1e>
 800d058:	080103d8 	.word	0x080103d8
 800d05c:	080103d8 	.word	0x080103d8
 800d060:	080103d8 	.word	0x080103d8
 800d064:	080103dc 	.word	0x080103dc

0800d068 <__retarget_lock_init_recursive>:
 800d068:	4770      	bx	lr

0800d06a <__retarget_lock_acquire_recursive>:
 800d06a:	4770      	bx	lr

0800d06c <__retarget_lock_release_recursive>:
 800d06c:	4770      	bx	lr

0800d06e <memcpy>:
 800d06e:	440a      	add	r2, r1
 800d070:	4291      	cmp	r1, r2
 800d072:	f100 33ff 	add.w	r3, r0, #4294967295
 800d076:	d100      	bne.n	800d07a <memcpy+0xc>
 800d078:	4770      	bx	lr
 800d07a:	b510      	push	{r4, lr}
 800d07c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d080:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d084:	4291      	cmp	r1, r2
 800d086:	d1f9      	bne.n	800d07c <memcpy+0xe>
 800d088:	bd10      	pop	{r4, pc}

0800d08a <quorem>:
 800d08a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08e:	6903      	ldr	r3, [r0, #16]
 800d090:	690c      	ldr	r4, [r1, #16]
 800d092:	42a3      	cmp	r3, r4
 800d094:	4607      	mov	r7, r0
 800d096:	db7e      	blt.n	800d196 <quorem+0x10c>
 800d098:	3c01      	subs	r4, #1
 800d09a:	f101 0814 	add.w	r8, r1, #20
 800d09e:	f100 0514 	add.w	r5, r0, #20
 800d0a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0a6:	9301      	str	r3, [sp, #4]
 800d0a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d0ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d0b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d0bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d0c0:	d331      	bcc.n	800d126 <quorem+0x9c>
 800d0c2:	f04f 0e00 	mov.w	lr, #0
 800d0c6:	4640      	mov	r0, r8
 800d0c8:	46ac      	mov	ip, r5
 800d0ca:	46f2      	mov	sl, lr
 800d0cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800d0d0:	b293      	uxth	r3, r2
 800d0d2:	fb06 e303 	mla	r3, r6, r3, lr
 800d0d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d0da:	0c1a      	lsrs	r2, r3, #16
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	ebaa 0303 	sub.w	r3, sl, r3
 800d0e2:	f8dc a000 	ldr.w	sl, [ip]
 800d0e6:	fa13 f38a 	uxtah	r3, r3, sl
 800d0ea:	fb06 220e 	mla	r2, r6, lr, r2
 800d0ee:	9300      	str	r3, [sp, #0]
 800d0f0:	9b00      	ldr	r3, [sp, #0]
 800d0f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d0f6:	b292      	uxth	r2, r2
 800d0f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d0fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d100:	f8bd 3000 	ldrh.w	r3, [sp]
 800d104:	4581      	cmp	r9, r0
 800d106:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d10a:	f84c 3b04 	str.w	r3, [ip], #4
 800d10e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d112:	d2db      	bcs.n	800d0cc <quorem+0x42>
 800d114:	f855 300b 	ldr.w	r3, [r5, fp]
 800d118:	b92b      	cbnz	r3, 800d126 <quorem+0x9c>
 800d11a:	9b01      	ldr	r3, [sp, #4]
 800d11c:	3b04      	subs	r3, #4
 800d11e:	429d      	cmp	r5, r3
 800d120:	461a      	mov	r2, r3
 800d122:	d32c      	bcc.n	800d17e <quorem+0xf4>
 800d124:	613c      	str	r4, [r7, #16]
 800d126:	4638      	mov	r0, r7
 800d128:	f001 f922 	bl	800e370 <__mcmp>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	db22      	blt.n	800d176 <quorem+0xec>
 800d130:	3601      	adds	r6, #1
 800d132:	4629      	mov	r1, r5
 800d134:	2000      	movs	r0, #0
 800d136:	f858 2b04 	ldr.w	r2, [r8], #4
 800d13a:	f8d1 c000 	ldr.w	ip, [r1]
 800d13e:	b293      	uxth	r3, r2
 800d140:	1ac3      	subs	r3, r0, r3
 800d142:	0c12      	lsrs	r2, r2, #16
 800d144:	fa13 f38c 	uxtah	r3, r3, ip
 800d148:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d14c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d150:	b29b      	uxth	r3, r3
 800d152:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d156:	45c1      	cmp	r9, r8
 800d158:	f841 3b04 	str.w	r3, [r1], #4
 800d15c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d160:	d2e9      	bcs.n	800d136 <quorem+0xac>
 800d162:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d166:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d16a:	b922      	cbnz	r2, 800d176 <quorem+0xec>
 800d16c:	3b04      	subs	r3, #4
 800d16e:	429d      	cmp	r5, r3
 800d170:	461a      	mov	r2, r3
 800d172:	d30a      	bcc.n	800d18a <quorem+0x100>
 800d174:	613c      	str	r4, [r7, #16]
 800d176:	4630      	mov	r0, r6
 800d178:	b003      	add	sp, #12
 800d17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d17e:	6812      	ldr	r2, [r2, #0]
 800d180:	3b04      	subs	r3, #4
 800d182:	2a00      	cmp	r2, #0
 800d184:	d1ce      	bne.n	800d124 <quorem+0x9a>
 800d186:	3c01      	subs	r4, #1
 800d188:	e7c9      	b.n	800d11e <quorem+0x94>
 800d18a:	6812      	ldr	r2, [r2, #0]
 800d18c:	3b04      	subs	r3, #4
 800d18e:	2a00      	cmp	r2, #0
 800d190:	d1f0      	bne.n	800d174 <quorem+0xea>
 800d192:	3c01      	subs	r4, #1
 800d194:	e7eb      	b.n	800d16e <quorem+0xe4>
 800d196:	2000      	movs	r0, #0
 800d198:	e7ee      	b.n	800d178 <quorem+0xee>
 800d19a:	0000      	movs	r0, r0
 800d19c:	0000      	movs	r0, r0
	...

0800d1a0 <_dtoa_r>:
 800d1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a4:	ed2d 8b02 	vpush	{d8}
 800d1a8:	69c5      	ldr	r5, [r0, #28]
 800d1aa:	b091      	sub	sp, #68	; 0x44
 800d1ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d1b0:	ec59 8b10 	vmov	r8, r9, d0
 800d1b4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800d1b6:	9106      	str	r1, [sp, #24]
 800d1b8:	4606      	mov	r6, r0
 800d1ba:	9208      	str	r2, [sp, #32]
 800d1bc:	930c      	str	r3, [sp, #48]	; 0x30
 800d1be:	b975      	cbnz	r5, 800d1de <_dtoa_r+0x3e>
 800d1c0:	2010      	movs	r0, #16
 800d1c2:	f000 fda5 	bl	800dd10 <malloc>
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	61f0      	str	r0, [r6, #28]
 800d1ca:	b920      	cbnz	r0, 800d1d6 <_dtoa_r+0x36>
 800d1cc:	4ba6      	ldr	r3, [pc, #664]	; (800d468 <_dtoa_r+0x2c8>)
 800d1ce:	21ef      	movs	r1, #239	; 0xef
 800d1d0:	48a6      	ldr	r0, [pc, #664]	; (800d46c <_dtoa_r+0x2cc>)
 800d1d2:	f001 fc53 	bl	800ea7c <__assert_func>
 800d1d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d1da:	6005      	str	r5, [r0, #0]
 800d1dc:	60c5      	str	r5, [r0, #12]
 800d1de:	69f3      	ldr	r3, [r6, #28]
 800d1e0:	6819      	ldr	r1, [r3, #0]
 800d1e2:	b151      	cbz	r1, 800d1fa <_dtoa_r+0x5a>
 800d1e4:	685a      	ldr	r2, [r3, #4]
 800d1e6:	604a      	str	r2, [r1, #4]
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	4093      	lsls	r3, r2
 800d1ec:	608b      	str	r3, [r1, #8]
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	f000 fe82 	bl	800def8 <_Bfree>
 800d1f4:	69f3      	ldr	r3, [r6, #28]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	601a      	str	r2, [r3, #0]
 800d1fa:	f1b9 0300 	subs.w	r3, r9, #0
 800d1fe:	bfbb      	ittet	lt
 800d200:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d204:	9303      	strlt	r3, [sp, #12]
 800d206:	2300      	movge	r3, #0
 800d208:	2201      	movlt	r2, #1
 800d20a:	bfac      	ite	ge
 800d20c:	6023      	strge	r3, [r4, #0]
 800d20e:	6022      	strlt	r2, [r4, #0]
 800d210:	4b97      	ldr	r3, [pc, #604]	; (800d470 <_dtoa_r+0x2d0>)
 800d212:	9c03      	ldr	r4, [sp, #12]
 800d214:	43a3      	bics	r3, r4
 800d216:	d11c      	bne.n	800d252 <_dtoa_r+0xb2>
 800d218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d21a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d21e:	6013      	str	r3, [r2, #0]
 800d220:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d224:	ea53 0308 	orrs.w	r3, r3, r8
 800d228:	f000 84fb 	beq.w	800dc22 <_dtoa_r+0xa82>
 800d22c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d22e:	b963      	cbnz	r3, 800d24a <_dtoa_r+0xaa>
 800d230:	4b90      	ldr	r3, [pc, #576]	; (800d474 <_dtoa_r+0x2d4>)
 800d232:	e020      	b.n	800d276 <_dtoa_r+0xd6>
 800d234:	4b90      	ldr	r3, [pc, #576]	; (800d478 <_dtoa_r+0x2d8>)
 800d236:	9301      	str	r3, [sp, #4]
 800d238:	3308      	adds	r3, #8
 800d23a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d23c:	6013      	str	r3, [r2, #0]
 800d23e:	9801      	ldr	r0, [sp, #4]
 800d240:	b011      	add	sp, #68	; 0x44
 800d242:	ecbd 8b02 	vpop	{d8}
 800d246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d24a:	4b8a      	ldr	r3, [pc, #552]	; (800d474 <_dtoa_r+0x2d4>)
 800d24c:	9301      	str	r3, [sp, #4]
 800d24e:	3303      	adds	r3, #3
 800d250:	e7f3      	b.n	800d23a <_dtoa_r+0x9a>
 800d252:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d256:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d25e:	d10c      	bne.n	800d27a <_dtoa_r+0xda>
 800d260:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d262:	2301      	movs	r3, #1
 800d264:	6013      	str	r3, [r2, #0]
 800d266:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f000 84d7 	beq.w	800dc1c <_dtoa_r+0xa7c>
 800d26e:	4b83      	ldr	r3, [pc, #524]	; (800d47c <_dtoa_r+0x2dc>)
 800d270:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d272:	6013      	str	r3, [r2, #0]
 800d274:	3b01      	subs	r3, #1
 800d276:	9301      	str	r3, [sp, #4]
 800d278:	e7e1      	b.n	800d23e <_dtoa_r+0x9e>
 800d27a:	aa0e      	add	r2, sp, #56	; 0x38
 800d27c:	a90f      	add	r1, sp, #60	; 0x3c
 800d27e:	4630      	mov	r0, r6
 800d280:	eeb0 0b48 	vmov.f64	d0, d8
 800d284:	f001 f91a 	bl	800e4bc <__d2b>
 800d288:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800d28c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d28e:	4605      	mov	r5, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	d046      	beq.n	800d322 <_dtoa_r+0x182>
 800d294:	eeb0 7b48 	vmov.f64	d7, d8
 800d298:	ee18 1a90 	vmov	r1, s17
 800d29c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d2a0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800d2a4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d2a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d2ac:	2000      	movs	r0, #0
 800d2ae:	ee07 1a90 	vmov	s15, r1
 800d2b2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800d2b6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d450 <_dtoa_r+0x2b0>
 800d2ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d2be:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800d458 <_dtoa_r+0x2b8>
 800d2c2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d2c6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d460 <_dtoa_r+0x2c0>
 800d2ca:	ee07 3a90 	vmov	s15, r3
 800d2ce:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d2d2:	eeb0 7b46 	vmov.f64	d7, d6
 800d2d6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d2da:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d2de:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2e6:	ee16 ba90 	vmov	fp, s13
 800d2ea:	9009      	str	r0, [sp, #36]	; 0x24
 800d2ec:	d508      	bpl.n	800d300 <_dtoa_r+0x160>
 800d2ee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d2f2:	eeb4 6b47 	vcmp.f64	d6, d7
 800d2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2fa:	bf18      	it	ne
 800d2fc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d300:	f1bb 0f16 	cmp.w	fp, #22
 800d304:	d82b      	bhi.n	800d35e <_dtoa_r+0x1be>
 800d306:	495e      	ldr	r1, [pc, #376]	; (800d480 <_dtoa_r+0x2e0>)
 800d308:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800d30c:	ed91 7b00 	vldr	d7, [r1]
 800d310:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d318:	d501      	bpl.n	800d31e <_dtoa_r+0x17e>
 800d31a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d31e:	2100      	movs	r1, #0
 800d320:	e01e      	b.n	800d360 <_dtoa_r+0x1c0>
 800d322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d324:	4413      	add	r3, r2
 800d326:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800d32a:	2920      	cmp	r1, #32
 800d32c:	bfc1      	itttt	gt
 800d32e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800d332:	408c      	lslgt	r4, r1
 800d334:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800d338:	fa28 f101 	lsrgt.w	r1, r8, r1
 800d33c:	bfd6      	itet	le
 800d33e:	f1c1 0120 	rsble	r1, r1, #32
 800d342:	4321      	orrgt	r1, r4
 800d344:	fa08 f101 	lslle.w	r1, r8, r1
 800d348:	ee07 1a90 	vmov	s15, r1
 800d34c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d350:	3b01      	subs	r3, #1
 800d352:	ee17 1a90 	vmov	r1, s15
 800d356:	2001      	movs	r0, #1
 800d358:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d35c:	e7a7      	b.n	800d2ae <_dtoa_r+0x10e>
 800d35e:	2101      	movs	r1, #1
 800d360:	1ad2      	subs	r2, r2, r3
 800d362:	1e53      	subs	r3, r2, #1
 800d364:	9305      	str	r3, [sp, #20]
 800d366:	bf45      	ittet	mi
 800d368:	f1c2 0301 	rsbmi	r3, r2, #1
 800d36c:	9304      	strmi	r3, [sp, #16]
 800d36e:	2300      	movpl	r3, #0
 800d370:	2300      	movmi	r3, #0
 800d372:	bf4c      	ite	mi
 800d374:	9305      	strmi	r3, [sp, #20]
 800d376:	9304      	strpl	r3, [sp, #16]
 800d378:	f1bb 0f00 	cmp.w	fp, #0
 800d37c:	910b      	str	r1, [sp, #44]	; 0x2c
 800d37e:	db18      	blt.n	800d3b2 <_dtoa_r+0x212>
 800d380:	9b05      	ldr	r3, [sp, #20]
 800d382:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d386:	445b      	add	r3, fp
 800d388:	9305      	str	r3, [sp, #20]
 800d38a:	2300      	movs	r3, #0
 800d38c:	9a06      	ldr	r2, [sp, #24]
 800d38e:	2a09      	cmp	r2, #9
 800d390:	d848      	bhi.n	800d424 <_dtoa_r+0x284>
 800d392:	2a05      	cmp	r2, #5
 800d394:	bfc4      	itt	gt
 800d396:	3a04      	subgt	r2, #4
 800d398:	9206      	strgt	r2, [sp, #24]
 800d39a:	9a06      	ldr	r2, [sp, #24]
 800d39c:	f1a2 0202 	sub.w	r2, r2, #2
 800d3a0:	bfcc      	ite	gt
 800d3a2:	2400      	movgt	r4, #0
 800d3a4:	2401      	movle	r4, #1
 800d3a6:	2a03      	cmp	r2, #3
 800d3a8:	d847      	bhi.n	800d43a <_dtoa_r+0x29a>
 800d3aa:	e8df f002 	tbb	[pc, r2]
 800d3ae:	2d0b      	.short	0x2d0b
 800d3b0:	392b      	.short	0x392b
 800d3b2:	9b04      	ldr	r3, [sp, #16]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	eba3 030b 	sub.w	r3, r3, fp
 800d3ba:	9304      	str	r3, [sp, #16]
 800d3bc:	920a      	str	r2, [sp, #40]	; 0x28
 800d3be:	f1cb 0300 	rsb	r3, fp, #0
 800d3c2:	e7e3      	b.n	800d38c <_dtoa_r+0x1ec>
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	9207      	str	r2, [sp, #28]
 800d3c8:	9a08      	ldr	r2, [sp, #32]
 800d3ca:	2a00      	cmp	r2, #0
 800d3cc:	dc38      	bgt.n	800d440 <_dtoa_r+0x2a0>
 800d3ce:	f04f 0a01 	mov.w	sl, #1
 800d3d2:	46d1      	mov	r9, sl
 800d3d4:	4652      	mov	r2, sl
 800d3d6:	f8cd a020 	str.w	sl, [sp, #32]
 800d3da:	69f7      	ldr	r7, [r6, #28]
 800d3dc:	2100      	movs	r1, #0
 800d3de:	2004      	movs	r0, #4
 800d3e0:	f100 0c14 	add.w	ip, r0, #20
 800d3e4:	4594      	cmp	ip, r2
 800d3e6:	d930      	bls.n	800d44a <_dtoa_r+0x2aa>
 800d3e8:	6079      	str	r1, [r7, #4]
 800d3ea:	4630      	mov	r0, r6
 800d3ec:	930d      	str	r3, [sp, #52]	; 0x34
 800d3ee:	f000 fd43 	bl	800de78 <_Balloc>
 800d3f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3f4:	9001      	str	r0, [sp, #4]
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	d145      	bne.n	800d488 <_dtoa_r+0x2e8>
 800d3fc:	4b21      	ldr	r3, [pc, #132]	; (800d484 <_dtoa_r+0x2e4>)
 800d3fe:	f240 11af 	movw	r1, #431	; 0x1af
 800d402:	e6e5      	b.n	800d1d0 <_dtoa_r+0x30>
 800d404:	2201      	movs	r2, #1
 800d406:	e7de      	b.n	800d3c6 <_dtoa_r+0x226>
 800d408:	2200      	movs	r2, #0
 800d40a:	9207      	str	r2, [sp, #28]
 800d40c:	9a08      	ldr	r2, [sp, #32]
 800d40e:	eb0b 0a02 	add.w	sl, fp, r2
 800d412:	f10a 0901 	add.w	r9, sl, #1
 800d416:	464a      	mov	r2, r9
 800d418:	2a01      	cmp	r2, #1
 800d41a:	bfb8      	it	lt
 800d41c:	2201      	movlt	r2, #1
 800d41e:	e7dc      	b.n	800d3da <_dtoa_r+0x23a>
 800d420:	2201      	movs	r2, #1
 800d422:	e7f2      	b.n	800d40a <_dtoa_r+0x26a>
 800d424:	2401      	movs	r4, #1
 800d426:	2200      	movs	r2, #0
 800d428:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800d42c:	f04f 3aff 	mov.w	sl, #4294967295
 800d430:	2100      	movs	r1, #0
 800d432:	46d1      	mov	r9, sl
 800d434:	2212      	movs	r2, #18
 800d436:	9108      	str	r1, [sp, #32]
 800d438:	e7cf      	b.n	800d3da <_dtoa_r+0x23a>
 800d43a:	2201      	movs	r2, #1
 800d43c:	9207      	str	r2, [sp, #28]
 800d43e:	e7f5      	b.n	800d42c <_dtoa_r+0x28c>
 800d440:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d444:	46d1      	mov	r9, sl
 800d446:	4652      	mov	r2, sl
 800d448:	e7c7      	b.n	800d3da <_dtoa_r+0x23a>
 800d44a:	3101      	adds	r1, #1
 800d44c:	0040      	lsls	r0, r0, #1
 800d44e:	e7c7      	b.n	800d3e0 <_dtoa_r+0x240>
 800d450:	636f4361 	.word	0x636f4361
 800d454:	3fd287a7 	.word	0x3fd287a7
 800d458:	8b60c8b3 	.word	0x8b60c8b3
 800d45c:	3fc68a28 	.word	0x3fc68a28
 800d460:	509f79fb 	.word	0x509f79fb
 800d464:	3fd34413 	.word	0x3fd34413
 800d468:	0800fe51 	.word	0x0800fe51
 800d46c:	0800fe68 	.word	0x0800fe68
 800d470:	7ff00000 	.word	0x7ff00000
 800d474:	0800fe4d 	.word	0x0800fe4d
 800d478:	0800fe44 	.word	0x0800fe44
 800d47c:	0800fe21 	.word	0x0800fe21
 800d480:	0800ff58 	.word	0x0800ff58
 800d484:	0800fec0 	.word	0x0800fec0
 800d488:	69f2      	ldr	r2, [r6, #28]
 800d48a:	9901      	ldr	r1, [sp, #4]
 800d48c:	6011      	str	r1, [r2, #0]
 800d48e:	f1b9 0f0e 	cmp.w	r9, #14
 800d492:	d86c      	bhi.n	800d56e <_dtoa_r+0x3ce>
 800d494:	2c00      	cmp	r4, #0
 800d496:	d06a      	beq.n	800d56e <_dtoa_r+0x3ce>
 800d498:	f1bb 0f00 	cmp.w	fp, #0
 800d49c:	f340 80a0 	ble.w	800d5e0 <_dtoa_r+0x440>
 800d4a0:	4ac1      	ldr	r2, [pc, #772]	; (800d7a8 <_dtoa_r+0x608>)
 800d4a2:	f00b 010f 	and.w	r1, fp, #15
 800d4a6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d4aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d4ae:	ed92 7b00 	vldr	d7, [r2]
 800d4b2:	ea4f 122b 	mov.w	r2, fp, asr #4
 800d4b6:	f000 8087 	beq.w	800d5c8 <_dtoa_r+0x428>
 800d4ba:	49bc      	ldr	r1, [pc, #752]	; (800d7ac <_dtoa_r+0x60c>)
 800d4bc:	ed91 6b08 	vldr	d6, [r1, #32]
 800d4c0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d4c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d4c8:	f002 020f 	and.w	r2, r2, #15
 800d4cc:	2103      	movs	r1, #3
 800d4ce:	48b7      	ldr	r0, [pc, #732]	; (800d7ac <_dtoa_r+0x60c>)
 800d4d0:	2a00      	cmp	r2, #0
 800d4d2:	d17b      	bne.n	800d5cc <_dtoa_r+0x42c>
 800d4d4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d4d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d4dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d4e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d4e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d4e6:	2a00      	cmp	r2, #0
 800d4e8:	f000 80a0 	beq.w	800d62c <_dtoa_r+0x48c>
 800d4ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d4f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4f8:	f140 8098 	bpl.w	800d62c <_dtoa_r+0x48c>
 800d4fc:	f1b9 0f00 	cmp.w	r9, #0
 800d500:	f000 8094 	beq.w	800d62c <_dtoa_r+0x48c>
 800d504:	f1ba 0f00 	cmp.w	sl, #0
 800d508:	dd2f      	ble.n	800d56a <_dtoa_r+0x3ca>
 800d50a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d50e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d512:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d516:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d51a:	3101      	adds	r1, #1
 800d51c:	4654      	mov	r4, sl
 800d51e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d522:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d526:	ee07 1a90 	vmov	s15, r1
 800d52a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d52e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d532:	ee15 7a90 	vmov	r7, s11
 800d536:	ec51 0b15 	vmov	r0, r1, d5
 800d53a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800d53e:	2c00      	cmp	r4, #0
 800d540:	d177      	bne.n	800d632 <_dtoa_r+0x492>
 800d542:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d546:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d54a:	ec41 0b17 	vmov	d7, r0, r1
 800d54e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d556:	f300 826a 	bgt.w	800da2e <_dtoa_r+0x88e>
 800d55a:	eeb1 7b47 	vneg.f64	d7, d7
 800d55e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d566:	f100 8260 	bmi.w	800da2a <_dtoa_r+0x88a>
 800d56a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d56e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d570:	2a00      	cmp	r2, #0
 800d572:	f2c0 811d 	blt.w	800d7b0 <_dtoa_r+0x610>
 800d576:	f1bb 0f0e 	cmp.w	fp, #14
 800d57a:	f300 8119 	bgt.w	800d7b0 <_dtoa_r+0x610>
 800d57e:	4b8a      	ldr	r3, [pc, #552]	; (800d7a8 <_dtoa_r+0x608>)
 800d580:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d584:	ed93 6b00 	vldr	d6, [r3]
 800d588:	9b08      	ldr	r3, [sp, #32]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	f280 80b7 	bge.w	800d6fe <_dtoa_r+0x55e>
 800d590:	f1b9 0f00 	cmp.w	r9, #0
 800d594:	f300 80b3 	bgt.w	800d6fe <_dtoa_r+0x55e>
 800d598:	f040 8246 	bne.w	800da28 <_dtoa_r+0x888>
 800d59c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d5a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d5a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5b0:	464c      	mov	r4, r9
 800d5b2:	464f      	mov	r7, r9
 800d5b4:	f280 821c 	bge.w	800d9f0 <_dtoa_r+0x850>
 800d5b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d5bc:	2331      	movs	r3, #49	; 0x31
 800d5be:	f808 3b01 	strb.w	r3, [r8], #1
 800d5c2:	f10b 0b01 	add.w	fp, fp, #1
 800d5c6:	e218      	b.n	800d9fa <_dtoa_r+0x85a>
 800d5c8:	2102      	movs	r1, #2
 800d5ca:	e780      	b.n	800d4ce <_dtoa_r+0x32e>
 800d5cc:	07d4      	lsls	r4, r2, #31
 800d5ce:	d504      	bpl.n	800d5da <_dtoa_r+0x43a>
 800d5d0:	ed90 6b00 	vldr	d6, [r0]
 800d5d4:	3101      	adds	r1, #1
 800d5d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d5da:	1052      	asrs	r2, r2, #1
 800d5dc:	3008      	adds	r0, #8
 800d5de:	e777      	b.n	800d4d0 <_dtoa_r+0x330>
 800d5e0:	d022      	beq.n	800d628 <_dtoa_r+0x488>
 800d5e2:	f1cb 0200 	rsb	r2, fp, #0
 800d5e6:	4970      	ldr	r1, [pc, #448]	; (800d7a8 <_dtoa_r+0x608>)
 800d5e8:	f002 000f 	and.w	r0, r2, #15
 800d5ec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d5f0:	ed91 7b00 	vldr	d7, [r1]
 800d5f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d5f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d5fc:	486b      	ldr	r0, [pc, #428]	; (800d7ac <_dtoa_r+0x60c>)
 800d5fe:	1112      	asrs	r2, r2, #4
 800d600:	2400      	movs	r4, #0
 800d602:	2102      	movs	r1, #2
 800d604:	b92a      	cbnz	r2, 800d612 <_dtoa_r+0x472>
 800d606:	2c00      	cmp	r4, #0
 800d608:	f43f af6a 	beq.w	800d4e0 <_dtoa_r+0x340>
 800d60c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d610:	e766      	b.n	800d4e0 <_dtoa_r+0x340>
 800d612:	07d7      	lsls	r7, r2, #31
 800d614:	d505      	bpl.n	800d622 <_dtoa_r+0x482>
 800d616:	ed90 6b00 	vldr	d6, [r0]
 800d61a:	3101      	adds	r1, #1
 800d61c:	2401      	movs	r4, #1
 800d61e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d622:	1052      	asrs	r2, r2, #1
 800d624:	3008      	adds	r0, #8
 800d626:	e7ed      	b.n	800d604 <_dtoa_r+0x464>
 800d628:	2102      	movs	r1, #2
 800d62a:	e759      	b.n	800d4e0 <_dtoa_r+0x340>
 800d62c:	465a      	mov	r2, fp
 800d62e:	464c      	mov	r4, r9
 800d630:	e775      	b.n	800d51e <_dtoa_r+0x37e>
 800d632:	ec41 0b17 	vmov	d7, r0, r1
 800d636:	495c      	ldr	r1, [pc, #368]	; (800d7a8 <_dtoa_r+0x608>)
 800d638:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800d63c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800d640:	9901      	ldr	r1, [sp, #4]
 800d642:	440c      	add	r4, r1
 800d644:	9907      	ldr	r1, [sp, #28]
 800d646:	b351      	cbz	r1, 800d69e <_dtoa_r+0x4fe>
 800d648:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d64c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d650:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d654:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d658:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d65c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d660:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d664:	ee14 1a90 	vmov	r1, s9
 800d668:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d66c:	3130      	adds	r1, #48	; 0x30
 800d66e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d672:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d67a:	f808 1b01 	strb.w	r1, [r8], #1
 800d67e:	d439      	bmi.n	800d6f4 <_dtoa_r+0x554>
 800d680:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d684:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d68c:	d472      	bmi.n	800d774 <_dtoa_r+0x5d4>
 800d68e:	45a0      	cmp	r8, r4
 800d690:	f43f af6b 	beq.w	800d56a <_dtoa_r+0x3ca>
 800d694:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d698:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d69c:	e7e0      	b.n	800d660 <_dtoa_r+0x4c0>
 800d69e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d6a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d6ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d6b0:	ee14 1a90 	vmov	r1, s9
 800d6b4:	3130      	adds	r1, #48	; 0x30
 800d6b6:	f808 1b01 	strb.w	r1, [r8], #1
 800d6ba:	45a0      	cmp	r8, r4
 800d6bc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d6c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d6c4:	d118      	bne.n	800d6f8 <_dtoa_r+0x558>
 800d6c6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d6ca:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d6ce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d6:	dc4d      	bgt.n	800d774 <_dtoa_r+0x5d4>
 800d6d8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d6dc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6e4:	f57f af41 	bpl.w	800d56a <_dtoa_r+0x3ca>
 800d6e8:	4680      	mov	r8, r0
 800d6ea:	3801      	subs	r0, #1
 800d6ec:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d6f0:	2b30      	cmp	r3, #48	; 0x30
 800d6f2:	d0f9      	beq.n	800d6e8 <_dtoa_r+0x548>
 800d6f4:	4693      	mov	fp, r2
 800d6f6:	e02a      	b.n	800d74e <_dtoa_r+0x5ae>
 800d6f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d6fc:	e7d6      	b.n	800d6ac <_dtoa_r+0x50c>
 800d6fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d702:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d706:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d70a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d70e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d712:	ee15 3a10 	vmov	r3, s10
 800d716:	3330      	adds	r3, #48	; 0x30
 800d718:	f808 3b01 	strb.w	r3, [r8], #1
 800d71c:	9b01      	ldr	r3, [sp, #4]
 800d71e:	eba8 0303 	sub.w	r3, r8, r3
 800d722:	4599      	cmp	r9, r3
 800d724:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d728:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d72c:	d133      	bne.n	800d796 <_dtoa_r+0x5f6>
 800d72e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d732:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d73a:	dc1a      	bgt.n	800d772 <_dtoa_r+0x5d2>
 800d73c:	eeb4 7b46 	vcmp.f64	d7, d6
 800d740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d744:	d103      	bne.n	800d74e <_dtoa_r+0x5ae>
 800d746:	ee15 3a10 	vmov	r3, s10
 800d74a:	07d9      	lsls	r1, r3, #31
 800d74c:	d411      	bmi.n	800d772 <_dtoa_r+0x5d2>
 800d74e:	4629      	mov	r1, r5
 800d750:	4630      	mov	r0, r6
 800d752:	f000 fbd1 	bl	800def8 <_Bfree>
 800d756:	2300      	movs	r3, #0
 800d758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d75a:	f888 3000 	strb.w	r3, [r8]
 800d75e:	f10b 0301 	add.w	r3, fp, #1
 800d762:	6013      	str	r3, [r2, #0]
 800d764:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d766:	2b00      	cmp	r3, #0
 800d768:	f43f ad69 	beq.w	800d23e <_dtoa_r+0x9e>
 800d76c:	f8c3 8000 	str.w	r8, [r3]
 800d770:	e565      	b.n	800d23e <_dtoa_r+0x9e>
 800d772:	465a      	mov	r2, fp
 800d774:	4643      	mov	r3, r8
 800d776:	4698      	mov	r8, r3
 800d778:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800d77c:	2939      	cmp	r1, #57	; 0x39
 800d77e:	d106      	bne.n	800d78e <_dtoa_r+0x5ee>
 800d780:	9901      	ldr	r1, [sp, #4]
 800d782:	4299      	cmp	r1, r3
 800d784:	d1f7      	bne.n	800d776 <_dtoa_r+0x5d6>
 800d786:	9801      	ldr	r0, [sp, #4]
 800d788:	2130      	movs	r1, #48	; 0x30
 800d78a:	3201      	adds	r2, #1
 800d78c:	7001      	strb	r1, [r0, #0]
 800d78e:	7819      	ldrb	r1, [r3, #0]
 800d790:	3101      	adds	r1, #1
 800d792:	7019      	strb	r1, [r3, #0]
 800d794:	e7ae      	b.n	800d6f4 <_dtoa_r+0x554>
 800d796:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d79a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a2:	d1b2      	bne.n	800d70a <_dtoa_r+0x56a>
 800d7a4:	e7d3      	b.n	800d74e <_dtoa_r+0x5ae>
 800d7a6:	bf00      	nop
 800d7a8:	0800ff58 	.word	0x0800ff58
 800d7ac:	0800ff30 	.word	0x0800ff30
 800d7b0:	9907      	ldr	r1, [sp, #28]
 800d7b2:	2900      	cmp	r1, #0
 800d7b4:	f000 80d0 	beq.w	800d958 <_dtoa_r+0x7b8>
 800d7b8:	9906      	ldr	r1, [sp, #24]
 800d7ba:	2901      	cmp	r1, #1
 800d7bc:	f300 80b4 	bgt.w	800d928 <_dtoa_r+0x788>
 800d7c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d7c2:	2900      	cmp	r1, #0
 800d7c4:	f000 80ac 	beq.w	800d920 <_dtoa_r+0x780>
 800d7c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d7cc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d7d0:	461c      	mov	r4, r3
 800d7d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d7d4:	9b04      	ldr	r3, [sp, #16]
 800d7d6:	4413      	add	r3, r2
 800d7d8:	9304      	str	r3, [sp, #16]
 800d7da:	9b05      	ldr	r3, [sp, #20]
 800d7dc:	2101      	movs	r1, #1
 800d7de:	4413      	add	r3, r2
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	9305      	str	r3, [sp, #20]
 800d7e4:	f000 fc3e 	bl	800e064 <__i2b>
 800d7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ea:	4607      	mov	r7, r0
 800d7ec:	f1b8 0f00 	cmp.w	r8, #0
 800d7f0:	d00d      	beq.n	800d80e <_dtoa_r+0x66e>
 800d7f2:	9a05      	ldr	r2, [sp, #20]
 800d7f4:	2a00      	cmp	r2, #0
 800d7f6:	dd0a      	ble.n	800d80e <_dtoa_r+0x66e>
 800d7f8:	4542      	cmp	r2, r8
 800d7fa:	9904      	ldr	r1, [sp, #16]
 800d7fc:	bfa8      	it	ge
 800d7fe:	4642      	movge	r2, r8
 800d800:	1a89      	subs	r1, r1, r2
 800d802:	9104      	str	r1, [sp, #16]
 800d804:	9905      	ldr	r1, [sp, #20]
 800d806:	eba8 0802 	sub.w	r8, r8, r2
 800d80a:	1a8a      	subs	r2, r1, r2
 800d80c:	9205      	str	r2, [sp, #20]
 800d80e:	b303      	cbz	r3, 800d852 <_dtoa_r+0x6b2>
 800d810:	9a07      	ldr	r2, [sp, #28]
 800d812:	2a00      	cmp	r2, #0
 800d814:	f000 80a5 	beq.w	800d962 <_dtoa_r+0x7c2>
 800d818:	2c00      	cmp	r4, #0
 800d81a:	dd13      	ble.n	800d844 <_dtoa_r+0x6a4>
 800d81c:	4639      	mov	r1, r7
 800d81e:	4622      	mov	r2, r4
 800d820:	4630      	mov	r0, r6
 800d822:	930d      	str	r3, [sp, #52]	; 0x34
 800d824:	f000 fcde 	bl	800e1e4 <__pow5mult>
 800d828:	462a      	mov	r2, r5
 800d82a:	4601      	mov	r1, r0
 800d82c:	4607      	mov	r7, r0
 800d82e:	4630      	mov	r0, r6
 800d830:	f000 fc2e 	bl	800e090 <__multiply>
 800d834:	4629      	mov	r1, r5
 800d836:	9009      	str	r0, [sp, #36]	; 0x24
 800d838:	4630      	mov	r0, r6
 800d83a:	f000 fb5d 	bl	800def8 <_Bfree>
 800d83e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d842:	4615      	mov	r5, r2
 800d844:	1b1a      	subs	r2, r3, r4
 800d846:	d004      	beq.n	800d852 <_dtoa_r+0x6b2>
 800d848:	4629      	mov	r1, r5
 800d84a:	4630      	mov	r0, r6
 800d84c:	f000 fcca 	bl	800e1e4 <__pow5mult>
 800d850:	4605      	mov	r5, r0
 800d852:	2101      	movs	r1, #1
 800d854:	4630      	mov	r0, r6
 800d856:	f000 fc05 	bl	800e064 <__i2b>
 800d85a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	4604      	mov	r4, r0
 800d860:	f340 8081 	ble.w	800d966 <_dtoa_r+0x7c6>
 800d864:	461a      	mov	r2, r3
 800d866:	4601      	mov	r1, r0
 800d868:	4630      	mov	r0, r6
 800d86a:	f000 fcbb 	bl	800e1e4 <__pow5mult>
 800d86e:	9b06      	ldr	r3, [sp, #24]
 800d870:	2b01      	cmp	r3, #1
 800d872:	4604      	mov	r4, r0
 800d874:	dd7a      	ble.n	800d96c <_dtoa_r+0x7cc>
 800d876:	2300      	movs	r3, #0
 800d878:	9309      	str	r3, [sp, #36]	; 0x24
 800d87a:	6922      	ldr	r2, [r4, #16]
 800d87c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d880:	6910      	ldr	r0, [r2, #16]
 800d882:	f000 fba1 	bl	800dfc8 <__hi0bits>
 800d886:	f1c0 0020 	rsb	r0, r0, #32
 800d88a:	9b05      	ldr	r3, [sp, #20]
 800d88c:	4418      	add	r0, r3
 800d88e:	f010 001f 	ands.w	r0, r0, #31
 800d892:	f000 8093 	beq.w	800d9bc <_dtoa_r+0x81c>
 800d896:	f1c0 0220 	rsb	r2, r0, #32
 800d89a:	2a04      	cmp	r2, #4
 800d89c:	f340 8085 	ble.w	800d9aa <_dtoa_r+0x80a>
 800d8a0:	9b04      	ldr	r3, [sp, #16]
 800d8a2:	f1c0 001c 	rsb	r0, r0, #28
 800d8a6:	4403      	add	r3, r0
 800d8a8:	9304      	str	r3, [sp, #16]
 800d8aa:	9b05      	ldr	r3, [sp, #20]
 800d8ac:	4480      	add	r8, r0
 800d8ae:	4403      	add	r3, r0
 800d8b0:	9305      	str	r3, [sp, #20]
 800d8b2:	9b04      	ldr	r3, [sp, #16]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	dd05      	ble.n	800d8c4 <_dtoa_r+0x724>
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	4630      	mov	r0, r6
 800d8be:	f000 fceb 	bl	800e298 <__lshift>
 800d8c2:	4605      	mov	r5, r0
 800d8c4:	9b05      	ldr	r3, [sp, #20]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	dd05      	ble.n	800d8d6 <_dtoa_r+0x736>
 800d8ca:	4621      	mov	r1, r4
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	4630      	mov	r0, r6
 800d8d0:	f000 fce2 	bl	800e298 <__lshift>
 800d8d4:	4604      	mov	r4, r0
 800d8d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d071      	beq.n	800d9c0 <_dtoa_r+0x820>
 800d8dc:	4621      	mov	r1, r4
 800d8de:	4628      	mov	r0, r5
 800d8e0:	f000 fd46 	bl	800e370 <__mcmp>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	da6b      	bge.n	800d9c0 <_dtoa_r+0x820>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	4629      	mov	r1, r5
 800d8ec:	220a      	movs	r2, #10
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	f000 fb24 	bl	800df3c <__multadd>
 800d8f4:	9b07      	ldr	r3, [sp, #28]
 800d8f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d8fa:	4605      	mov	r5, r0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	f000 8197 	beq.w	800dc30 <_dtoa_r+0xa90>
 800d902:	4639      	mov	r1, r7
 800d904:	2300      	movs	r3, #0
 800d906:	220a      	movs	r2, #10
 800d908:	4630      	mov	r0, r6
 800d90a:	f000 fb17 	bl	800df3c <__multadd>
 800d90e:	f1ba 0f00 	cmp.w	sl, #0
 800d912:	4607      	mov	r7, r0
 800d914:	f300 8093 	bgt.w	800da3e <_dtoa_r+0x89e>
 800d918:	9b06      	ldr	r3, [sp, #24]
 800d91a:	2b02      	cmp	r3, #2
 800d91c:	dc57      	bgt.n	800d9ce <_dtoa_r+0x82e>
 800d91e:	e08e      	b.n	800da3e <_dtoa_r+0x89e>
 800d920:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d922:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d926:	e751      	b.n	800d7cc <_dtoa_r+0x62c>
 800d928:	f109 34ff 	add.w	r4, r9, #4294967295
 800d92c:	42a3      	cmp	r3, r4
 800d92e:	bfbf      	itttt	lt
 800d930:	1ae2      	sublt	r2, r4, r3
 800d932:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d934:	189b      	addlt	r3, r3, r2
 800d936:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d938:	bfae      	itee	ge
 800d93a:	1b1c      	subge	r4, r3, r4
 800d93c:	4623      	movlt	r3, r4
 800d93e:	2400      	movlt	r4, #0
 800d940:	f1b9 0f00 	cmp.w	r9, #0
 800d944:	bfb5      	itete	lt
 800d946:	9a04      	ldrlt	r2, [sp, #16]
 800d948:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800d94c:	eba2 0809 	sublt.w	r8, r2, r9
 800d950:	464a      	movge	r2, r9
 800d952:	bfb8      	it	lt
 800d954:	2200      	movlt	r2, #0
 800d956:	e73c      	b.n	800d7d2 <_dtoa_r+0x632>
 800d958:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d95c:	9f07      	ldr	r7, [sp, #28]
 800d95e:	461c      	mov	r4, r3
 800d960:	e744      	b.n	800d7ec <_dtoa_r+0x64c>
 800d962:	461a      	mov	r2, r3
 800d964:	e770      	b.n	800d848 <_dtoa_r+0x6a8>
 800d966:	9b06      	ldr	r3, [sp, #24]
 800d968:	2b01      	cmp	r3, #1
 800d96a:	dc18      	bgt.n	800d99e <_dtoa_r+0x7fe>
 800d96c:	9b02      	ldr	r3, [sp, #8]
 800d96e:	b9b3      	cbnz	r3, 800d99e <_dtoa_r+0x7fe>
 800d970:	9b03      	ldr	r3, [sp, #12]
 800d972:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d976:	b9a2      	cbnz	r2, 800d9a2 <_dtoa_r+0x802>
 800d978:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d97c:	0d12      	lsrs	r2, r2, #20
 800d97e:	0512      	lsls	r2, r2, #20
 800d980:	b18a      	cbz	r2, 800d9a6 <_dtoa_r+0x806>
 800d982:	9b04      	ldr	r3, [sp, #16]
 800d984:	3301      	adds	r3, #1
 800d986:	9304      	str	r3, [sp, #16]
 800d988:	9b05      	ldr	r3, [sp, #20]
 800d98a:	3301      	adds	r3, #1
 800d98c:	9305      	str	r3, [sp, #20]
 800d98e:	2301      	movs	r3, #1
 800d990:	9309      	str	r3, [sp, #36]	; 0x24
 800d992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d994:	2b00      	cmp	r3, #0
 800d996:	f47f af70 	bne.w	800d87a <_dtoa_r+0x6da>
 800d99a:	2001      	movs	r0, #1
 800d99c:	e775      	b.n	800d88a <_dtoa_r+0x6ea>
 800d99e:	2300      	movs	r3, #0
 800d9a0:	e7f6      	b.n	800d990 <_dtoa_r+0x7f0>
 800d9a2:	9b02      	ldr	r3, [sp, #8]
 800d9a4:	e7f4      	b.n	800d990 <_dtoa_r+0x7f0>
 800d9a6:	9209      	str	r2, [sp, #36]	; 0x24
 800d9a8:	e7f3      	b.n	800d992 <_dtoa_r+0x7f2>
 800d9aa:	d082      	beq.n	800d8b2 <_dtoa_r+0x712>
 800d9ac:	9b04      	ldr	r3, [sp, #16]
 800d9ae:	321c      	adds	r2, #28
 800d9b0:	4413      	add	r3, r2
 800d9b2:	9304      	str	r3, [sp, #16]
 800d9b4:	9b05      	ldr	r3, [sp, #20]
 800d9b6:	4490      	add	r8, r2
 800d9b8:	4413      	add	r3, r2
 800d9ba:	e779      	b.n	800d8b0 <_dtoa_r+0x710>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	e7f5      	b.n	800d9ac <_dtoa_r+0x80c>
 800d9c0:	f1b9 0f00 	cmp.w	r9, #0
 800d9c4:	dc36      	bgt.n	800da34 <_dtoa_r+0x894>
 800d9c6:	9b06      	ldr	r3, [sp, #24]
 800d9c8:	2b02      	cmp	r3, #2
 800d9ca:	dd33      	ble.n	800da34 <_dtoa_r+0x894>
 800d9cc:	46ca      	mov	sl, r9
 800d9ce:	f1ba 0f00 	cmp.w	sl, #0
 800d9d2:	d10d      	bne.n	800d9f0 <_dtoa_r+0x850>
 800d9d4:	4621      	mov	r1, r4
 800d9d6:	4653      	mov	r3, sl
 800d9d8:	2205      	movs	r2, #5
 800d9da:	4630      	mov	r0, r6
 800d9dc:	f000 faae 	bl	800df3c <__multadd>
 800d9e0:	4601      	mov	r1, r0
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	4628      	mov	r0, r5
 800d9e6:	f000 fcc3 	bl	800e370 <__mcmp>
 800d9ea:	2800      	cmp	r0, #0
 800d9ec:	f73f ade4 	bgt.w	800d5b8 <_dtoa_r+0x418>
 800d9f0:	9b08      	ldr	r3, [sp, #32]
 800d9f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d9f6:	ea6f 0b03 	mvn.w	fp, r3
 800d9fa:	f04f 0900 	mov.w	r9, #0
 800d9fe:	4621      	mov	r1, r4
 800da00:	4630      	mov	r0, r6
 800da02:	f000 fa79 	bl	800def8 <_Bfree>
 800da06:	2f00      	cmp	r7, #0
 800da08:	f43f aea1 	beq.w	800d74e <_dtoa_r+0x5ae>
 800da0c:	f1b9 0f00 	cmp.w	r9, #0
 800da10:	d005      	beq.n	800da1e <_dtoa_r+0x87e>
 800da12:	45b9      	cmp	r9, r7
 800da14:	d003      	beq.n	800da1e <_dtoa_r+0x87e>
 800da16:	4649      	mov	r1, r9
 800da18:	4630      	mov	r0, r6
 800da1a:	f000 fa6d 	bl	800def8 <_Bfree>
 800da1e:	4639      	mov	r1, r7
 800da20:	4630      	mov	r0, r6
 800da22:	f000 fa69 	bl	800def8 <_Bfree>
 800da26:	e692      	b.n	800d74e <_dtoa_r+0x5ae>
 800da28:	2400      	movs	r4, #0
 800da2a:	4627      	mov	r7, r4
 800da2c:	e7e0      	b.n	800d9f0 <_dtoa_r+0x850>
 800da2e:	4693      	mov	fp, r2
 800da30:	4627      	mov	r7, r4
 800da32:	e5c1      	b.n	800d5b8 <_dtoa_r+0x418>
 800da34:	9b07      	ldr	r3, [sp, #28]
 800da36:	46ca      	mov	sl, r9
 800da38:	2b00      	cmp	r3, #0
 800da3a:	f000 8100 	beq.w	800dc3e <_dtoa_r+0xa9e>
 800da3e:	f1b8 0f00 	cmp.w	r8, #0
 800da42:	dd05      	ble.n	800da50 <_dtoa_r+0x8b0>
 800da44:	4639      	mov	r1, r7
 800da46:	4642      	mov	r2, r8
 800da48:	4630      	mov	r0, r6
 800da4a:	f000 fc25 	bl	800e298 <__lshift>
 800da4e:	4607      	mov	r7, r0
 800da50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da52:	2b00      	cmp	r3, #0
 800da54:	d05d      	beq.n	800db12 <_dtoa_r+0x972>
 800da56:	6879      	ldr	r1, [r7, #4]
 800da58:	4630      	mov	r0, r6
 800da5a:	f000 fa0d 	bl	800de78 <_Balloc>
 800da5e:	4680      	mov	r8, r0
 800da60:	b928      	cbnz	r0, 800da6e <_dtoa_r+0x8ce>
 800da62:	4b82      	ldr	r3, [pc, #520]	; (800dc6c <_dtoa_r+0xacc>)
 800da64:	4602      	mov	r2, r0
 800da66:	f240 21ef 	movw	r1, #751	; 0x2ef
 800da6a:	f7ff bbb1 	b.w	800d1d0 <_dtoa_r+0x30>
 800da6e:	693a      	ldr	r2, [r7, #16]
 800da70:	3202      	adds	r2, #2
 800da72:	0092      	lsls	r2, r2, #2
 800da74:	f107 010c 	add.w	r1, r7, #12
 800da78:	300c      	adds	r0, #12
 800da7a:	f7ff faf8 	bl	800d06e <memcpy>
 800da7e:	2201      	movs	r2, #1
 800da80:	4641      	mov	r1, r8
 800da82:	4630      	mov	r0, r6
 800da84:	f000 fc08 	bl	800e298 <__lshift>
 800da88:	9b01      	ldr	r3, [sp, #4]
 800da8a:	3301      	adds	r3, #1
 800da8c:	9304      	str	r3, [sp, #16]
 800da8e:	9b01      	ldr	r3, [sp, #4]
 800da90:	4453      	add	r3, sl
 800da92:	9308      	str	r3, [sp, #32]
 800da94:	9b02      	ldr	r3, [sp, #8]
 800da96:	f003 0301 	and.w	r3, r3, #1
 800da9a:	46b9      	mov	r9, r7
 800da9c:	9307      	str	r3, [sp, #28]
 800da9e:	4607      	mov	r7, r0
 800daa0:	9b04      	ldr	r3, [sp, #16]
 800daa2:	4621      	mov	r1, r4
 800daa4:	3b01      	subs	r3, #1
 800daa6:	4628      	mov	r0, r5
 800daa8:	9302      	str	r3, [sp, #8]
 800daaa:	f7ff faee 	bl	800d08a <quorem>
 800daae:	4603      	mov	r3, r0
 800dab0:	3330      	adds	r3, #48	; 0x30
 800dab2:	9005      	str	r0, [sp, #20]
 800dab4:	4649      	mov	r1, r9
 800dab6:	4628      	mov	r0, r5
 800dab8:	9309      	str	r3, [sp, #36]	; 0x24
 800daba:	f000 fc59 	bl	800e370 <__mcmp>
 800dabe:	463a      	mov	r2, r7
 800dac0:	4682      	mov	sl, r0
 800dac2:	4621      	mov	r1, r4
 800dac4:	4630      	mov	r0, r6
 800dac6:	f000 fc6f 	bl	800e3a8 <__mdiff>
 800daca:	68c2      	ldr	r2, [r0, #12]
 800dacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dace:	4680      	mov	r8, r0
 800dad0:	bb0a      	cbnz	r2, 800db16 <_dtoa_r+0x976>
 800dad2:	4601      	mov	r1, r0
 800dad4:	4628      	mov	r0, r5
 800dad6:	f000 fc4b 	bl	800e370 <__mcmp>
 800dada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dadc:	4602      	mov	r2, r0
 800dade:	4641      	mov	r1, r8
 800dae0:	4630      	mov	r0, r6
 800dae2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800dae6:	f000 fa07 	bl	800def8 <_Bfree>
 800daea:	9b06      	ldr	r3, [sp, #24]
 800daec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800daee:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800daf2:	ea43 0102 	orr.w	r1, r3, r2
 800daf6:	9b07      	ldr	r3, [sp, #28]
 800daf8:	4319      	orrs	r1, r3
 800dafa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dafc:	d10d      	bne.n	800db1a <_dtoa_r+0x97a>
 800dafe:	2b39      	cmp	r3, #57	; 0x39
 800db00:	d029      	beq.n	800db56 <_dtoa_r+0x9b6>
 800db02:	f1ba 0f00 	cmp.w	sl, #0
 800db06:	dd01      	ble.n	800db0c <_dtoa_r+0x96c>
 800db08:	9b05      	ldr	r3, [sp, #20]
 800db0a:	3331      	adds	r3, #49	; 0x31
 800db0c:	9a02      	ldr	r2, [sp, #8]
 800db0e:	7013      	strb	r3, [r2, #0]
 800db10:	e775      	b.n	800d9fe <_dtoa_r+0x85e>
 800db12:	4638      	mov	r0, r7
 800db14:	e7b8      	b.n	800da88 <_dtoa_r+0x8e8>
 800db16:	2201      	movs	r2, #1
 800db18:	e7e1      	b.n	800dade <_dtoa_r+0x93e>
 800db1a:	f1ba 0f00 	cmp.w	sl, #0
 800db1e:	db06      	blt.n	800db2e <_dtoa_r+0x98e>
 800db20:	9906      	ldr	r1, [sp, #24]
 800db22:	ea41 0a0a 	orr.w	sl, r1, sl
 800db26:	9907      	ldr	r1, [sp, #28]
 800db28:	ea5a 0a01 	orrs.w	sl, sl, r1
 800db2c:	d120      	bne.n	800db70 <_dtoa_r+0x9d0>
 800db2e:	2a00      	cmp	r2, #0
 800db30:	ddec      	ble.n	800db0c <_dtoa_r+0x96c>
 800db32:	4629      	mov	r1, r5
 800db34:	2201      	movs	r2, #1
 800db36:	4630      	mov	r0, r6
 800db38:	9304      	str	r3, [sp, #16]
 800db3a:	f000 fbad 	bl	800e298 <__lshift>
 800db3e:	4621      	mov	r1, r4
 800db40:	4605      	mov	r5, r0
 800db42:	f000 fc15 	bl	800e370 <__mcmp>
 800db46:	2800      	cmp	r0, #0
 800db48:	9b04      	ldr	r3, [sp, #16]
 800db4a:	dc02      	bgt.n	800db52 <_dtoa_r+0x9b2>
 800db4c:	d1de      	bne.n	800db0c <_dtoa_r+0x96c>
 800db4e:	07da      	lsls	r2, r3, #31
 800db50:	d5dc      	bpl.n	800db0c <_dtoa_r+0x96c>
 800db52:	2b39      	cmp	r3, #57	; 0x39
 800db54:	d1d8      	bne.n	800db08 <_dtoa_r+0x968>
 800db56:	9a02      	ldr	r2, [sp, #8]
 800db58:	2339      	movs	r3, #57	; 0x39
 800db5a:	7013      	strb	r3, [r2, #0]
 800db5c:	4643      	mov	r3, r8
 800db5e:	4698      	mov	r8, r3
 800db60:	3b01      	subs	r3, #1
 800db62:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800db66:	2a39      	cmp	r2, #57	; 0x39
 800db68:	d051      	beq.n	800dc0e <_dtoa_r+0xa6e>
 800db6a:	3201      	adds	r2, #1
 800db6c:	701a      	strb	r2, [r3, #0]
 800db6e:	e746      	b.n	800d9fe <_dtoa_r+0x85e>
 800db70:	2a00      	cmp	r2, #0
 800db72:	dd03      	ble.n	800db7c <_dtoa_r+0x9dc>
 800db74:	2b39      	cmp	r3, #57	; 0x39
 800db76:	d0ee      	beq.n	800db56 <_dtoa_r+0x9b6>
 800db78:	3301      	adds	r3, #1
 800db7a:	e7c7      	b.n	800db0c <_dtoa_r+0x96c>
 800db7c:	9a04      	ldr	r2, [sp, #16]
 800db7e:	9908      	ldr	r1, [sp, #32]
 800db80:	f802 3c01 	strb.w	r3, [r2, #-1]
 800db84:	428a      	cmp	r2, r1
 800db86:	d02b      	beq.n	800dbe0 <_dtoa_r+0xa40>
 800db88:	4629      	mov	r1, r5
 800db8a:	2300      	movs	r3, #0
 800db8c:	220a      	movs	r2, #10
 800db8e:	4630      	mov	r0, r6
 800db90:	f000 f9d4 	bl	800df3c <__multadd>
 800db94:	45b9      	cmp	r9, r7
 800db96:	4605      	mov	r5, r0
 800db98:	f04f 0300 	mov.w	r3, #0
 800db9c:	f04f 020a 	mov.w	r2, #10
 800dba0:	4649      	mov	r1, r9
 800dba2:	4630      	mov	r0, r6
 800dba4:	d107      	bne.n	800dbb6 <_dtoa_r+0xa16>
 800dba6:	f000 f9c9 	bl	800df3c <__multadd>
 800dbaa:	4681      	mov	r9, r0
 800dbac:	4607      	mov	r7, r0
 800dbae:	9b04      	ldr	r3, [sp, #16]
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	9304      	str	r3, [sp, #16]
 800dbb4:	e774      	b.n	800daa0 <_dtoa_r+0x900>
 800dbb6:	f000 f9c1 	bl	800df3c <__multadd>
 800dbba:	4639      	mov	r1, r7
 800dbbc:	4681      	mov	r9, r0
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	220a      	movs	r2, #10
 800dbc2:	4630      	mov	r0, r6
 800dbc4:	f000 f9ba 	bl	800df3c <__multadd>
 800dbc8:	4607      	mov	r7, r0
 800dbca:	e7f0      	b.n	800dbae <_dtoa_r+0xa0e>
 800dbcc:	f1ba 0f00 	cmp.w	sl, #0
 800dbd0:	9a01      	ldr	r2, [sp, #4]
 800dbd2:	bfcc      	ite	gt
 800dbd4:	46d0      	movgt	r8, sl
 800dbd6:	f04f 0801 	movle.w	r8, #1
 800dbda:	4490      	add	r8, r2
 800dbdc:	f04f 0900 	mov.w	r9, #0
 800dbe0:	4629      	mov	r1, r5
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	9302      	str	r3, [sp, #8]
 800dbe8:	f000 fb56 	bl	800e298 <__lshift>
 800dbec:	4621      	mov	r1, r4
 800dbee:	4605      	mov	r5, r0
 800dbf0:	f000 fbbe 	bl	800e370 <__mcmp>
 800dbf4:	2800      	cmp	r0, #0
 800dbf6:	dcb1      	bgt.n	800db5c <_dtoa_r+0x9bc>
 800dbf8:	d102      	bne.n	800dc00 <_dtoa_r+0xa60>
 800dbfa:	9b02      	ldr	r3, [sp, #8]
 800dbfc:	07db      	lsls	r3, r3, #31
 800dbfe:	d4ad      	bmi.n	800db5c <_dtoa_r+0x9bc>
 800dc00:	4643      	mov	r3, r8
 800dc02:	4698      	mov	r8, r3
 800dc04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc08:	2a30      	cmp	r2, #48	; 0x30
 800dc0a:	d0fa      	beq.n	800dc02 <_dtoa_r+0xa62>
 800dc0c:	e6f7      	b.n	800d9fe <_dtoa_r+0x85e>
 800dc0e:	9a01      	ldr	r2, [sp, #4]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d1a4      	bne.n	800db5e <_dtoa_r+0x9be>
 800dc14:	f10b 0b01 	add.w	fp, fp, #1
 800dc18:	2331      	movs	r3, #49	; 0x31
 800dc1a:	e778      	b.n	800db0e <_dtoa_r+0x96e>
 800dc1c:	4b14      	ldr	r3, [pc, #80]	; (800dc70 <_dtoa_r+0xad0>)
 800dc1e:	f7ff bb2a 	b.w	800d276 <_dtoa_r+0xd6>
 800dc22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	f47f ab05 	bne.w	800d234 <_dtoa_r+0x94>
 800dc2a:	4b12      	ldr	r3, [pc, #72]	; (800dc74 <_dtoa_r+0xad4>)
 800dc2c:	f7ff bb23 	b.w	800d276 <_dtoa_r+0xd6>
 800dc30:	f1ba 0f00 	cmp.w	sl, #0
 800dc34:	dc03      	bgt.n	800dc3e <_dtoa_r+0xa9e>
 800dc36:	9b06      	ldr	r3, [sp, #24]
 800dc38:	2b02      	cmp	r3, #2
 800dc3a:	f73f aec8 	bgt.w	800d9ce <_dtoa_r+0x82e>
 800dc3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dc42:	4621      	mov	r1, r4
 800dc44:	4628      	mov	r0, r5
 800dc46:	f7ff fa20 	bl	800d08a <quorem>
 800dc4a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800dc4e:	f808 3b01 	strb.w	r3, [r8], #1
 800dc52:	9a01      	ldr	r2, [sp, #4]
 800dc54:	eba8 0202 	sub.w	r2, r8, r2
 800dc58:	4592      	cmp	sl, r2
 800dc5a:	ddb7      	ble.n	800dbcc <_dtoa_r+0xa2c>
 800dc5c:	4629      	mov	r1, r5
 800dc5e:	2300      	movs	r3, #0
 800dc60:	220a      	movs	r2, #10
 800dc62:	4630      	mov	r0, r6
 800dc64:	f000 f96a 	bl	800df3c <__multadd>
 800dc68:	4605      	mov	r5, r0
 800dc6a:	e7ea      	b.n	800dc42 <_dtoa_r+0xaa2>
 800dc6c:	0800fec0 	.word	0x0800fec0
 800dc70:	0800fe20 	.word	0x0800fe20
 800dc74:	0800fe44 	.word	0x0800fe44

0800dc78 <_free_r>:
 800dc78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc7a:	2900      	cmp	r1, #0
 800dc7c:	d044      	beq.n	800dd08 <_free_r+0x90>
 800dc7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc82:	9001      	str	r0, [sp, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	f1a1 0404 	sub.w	r4, r1, #4
 800dc8a:	bfb8      	it	lt
 800dc8c:	18e4      	addlt	r4, r4, r3
 800dc8e:	f000 f8e7 	bl	800de60 <__malloc_lock>
 800dc92:	4a1e      	ldr	r2, [pc, #120]	; (800dd0c <_free_r+0x94>)
 800dc94:	9801      	ldr	r0, [sp, #4]
 800dc96:	6813      	ldr	r3, [r2, #0]
 800dc98:	b933      	cbnz	r3, 800dca8 <_free_r+0x30>
 800dc9a:	6063      	str	r3, [r4, #4]
 800dc9c:	6014      	str	r4, [r2, #0]
 800dc9e:	b003      	add	sp, #12
 800dca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dca4:	f000 b8e2 	b.w	800de6c <__malloc_unlock>
 800dca8:	42a3      	cmp	r3, r4
 800dcaa:	d908      	bls.n	800dcbe <_free_r+0x46>
 800dcac:	6825      	ldr	r5, [r4, #0]
 800dcae:	1961      	adds	r1, r4, r5
 800dcb0:	428b      	cmp	r3, r1
 800dcb2:	bf01      	itttt	eq
 800dcb4:	6819      	ldreq	r1, [r3, #0]
 800dcb6:	685b      	ldreq	r3, [r3, #4]
 800dcb8:	1949      	addeq	r1, r1, r5
 800dcba:	6021      	streq	r1, [r4, #0]
 800dcbc:	e7ed      	b.n	800dc9a <_free_r+0x22>
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	b10b      	cbz	r3, 800dcc8 <_free_r+0x50>
 800dcc4:	42a3      	cmp	r3, r4
 800dcc6:	d9fa      	bls.n	800dcbe <_free_r+0x46>
 800dcc8:	6811      	ldr	r1, [r2, #0]
 800dcca:	1855      	adds	r5, r2, r1
 800dccc:	42a5      	cmp	r5, r4
 800dcce:	d10b      	bne.n	800dce8 <_free_r+0x70>
 800dcd0:	6824      	ldr	r4, [r4, #0]
 800dcd2:	4421      	add	r1, r4
 800dcd4:	1854      	adds	r4, r2, r1
 800dcd6:	42a3      	cmp	r3, r4
 800dcd8:	6011      	str	r1, [r2, #0]
 800dcda:	d1e0      	bne.n	800dc9e <_free_r+0x26>
 800dcdc:	681c      	ldr	r4, [r3, #0]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	6053      	str	r3, [r2, #4]
 800dce2:	440c      	add	r4, r1
 800dce4:	6014      	str	r4, [r2, #0]
 800dce6:	e7da      	b.n	800dc9e <_free_r+0x26>
 800dce8:	d902      	bls.n	800dcf0 <_free_r+0x78>
 800dcea:	230c      	movs	r3, #12
 800dcec:	6003      	str	r3, [r0, #0]
 800dcee:	e7d6      	b.n	800dc9e <_free_r+0x26>
 800dcf0:	6825      	ldr	r5, [r4, #0]
 800dcf2:	1961      	adds	r1, r4, r5
 800dcf4:	428b      	cmp	r3, r1
 800dcf6:	bf04      	itt	eq
 800dcf8:	6819      	ldreq	r1, [r3, #0]
 800dcfa:	685b      	ldreq	r3, [r3, #4]
 800dcfc:	6063      	str	r3, [r4, #4]
 800dcfe:	bf04      	itt	eq
 800dd00:	1949      	addeq	r1, r1, r5
 800dd02:	6021      	streq	r1, [r4, #0]
 800dd04:	6054      	str	r4, [r2, #4]
 800dd06:	e7ca      	b.n	800dc9e <_free_r+0x26>
 800dd08:	b003      	add	sp, #12
 800dd0a:	bd30      	pop	{r4, r5, pc}
 800dd0c:	24005064 	.word	0x24005064

0800dd10 <malloc>:
 800dd10:	4b02      	ldr	r3, [pc, #8]	; (800dd1c <malloc+0xc>)
 800dd12:	4601      	mov	r1, r0
 800dd14:	6818      	ldr	r0, [r3, #0]
 800dd16:	f000 b823 	b.w	800dd60 <_malloc_r>
 800dd1a:	bf00      	nop
 800dd1c:	2400006c 	.word	0x2400006c

0800dd20 <sbrk_aligned>:
 800dd20:	b570      	push	{r4, r5, r6, lr}
 800dd22:	4e0e      	ldr	r6, [pc, #56]	; (800dd5c <sbrk_aligned+0x3c>)
 800dd24:	460c      	mov	r4, r1
 800dd26:	6831      	ldr	r1, [r6, #0]
 800dd28:	4605      	mov	r5, r0
 800dd2a:	b911      	cbnz	r1, 800dd32 <sbrk_aligned+0x12>
 800dd2c:	f000 fe96 	bl	800ea5c <_sbrk_r>
 800dd30:	6030      	str	r0, [r6, #0]
 800dd32:	4621      	mov	r1, r4
 800dd34:	4628      	mov	r0, r5
 800dd36:	f000 fe91 	bl	800ea5c <_sbrk_r>
 800dd3a:	1c43      	adds	r3, r0, #1
 800dd3c:	d00a      	beq.n	800dd54 <sbrk_aligned+0x34>
 800dd3e:	1cc4      	adds	r4, r0, #3
 800dd40:	f024 0403 	bic.w	r4, r4, #3
 800dd44:	42a0      	cmp	r0, r4
 800dd46:	d007      	beq.n	800dd58 <sbrk_aligned+0x38>
 800dd48:	1a21      	subs	r1, r4, r0
 800dd4a:	4628      	mov	r0, r5
 800dd4c:	f000 fe86 	bl	800ea5c <_sbrk_r>
 800dd50:	3001      	adds	r0, #1
 800dd52:	d101      	bne.n	800dd58 <sbrk_aligned+0x38>
 800dd54:	f04f 34ff 	mov.w	r4, #4294967295
 800dd58:	4620      	mov	r0, r4
 800dd5a:	bd70      	pop	{r4, r5, r6, pc}
 800dd5c:	24005068 	.word	0x24005068

0800dd60 <_malloc_r>:
 800dd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd64:	1ccd      	adds	r5, r1, #3
 800dd66:	f025 0503 	bic.w	r5, r5, #3
 800dd6a:	3508      	adds	r5, #8
 800dd6c:	2d0c      	cmp	r5, #12
 800dd6e:	bf38      	it	cc
 800dd70:	250c      	movcc	r5, #12
 800dd72:	2d00      	cmp	r5, #0
 800dd74:	4607      	mov	r7, r0
 800dd76:	db01      	blt.n	800dd7c <_malloc_r+0x1c>
 800dd78:	42a9      	cmp	r1, r5
 800dd7a:	d905      	bls.n	800dd88 <_malloc_r+0x28>
 800dd7c:	230c      	movs	r3, #12
 800dd7e:	603b      	str	r3, [r7, #0]
 800dd80:	2600      	movs	r6, #0
 800dd82:	4630      	mov	r0, r6
 800dd84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800de5c <_malloc_r+0xfc>
 800dd8c:	f000 f868 	bl	800de60 <__malloc_lock>
 800dd90:	f8d8 3000 	ldr.w	r3, [r8]
 800dd94:	461c      	mov	r4, r3
 800dd96:	bb5c      	cbnz	r4, 800ddf0 <_malloc_r+0x90>
 800dd98:	4629      	mov	r1, r5
 800dd9a:	4638      	mov	r0, r7
 800dd9c:	f7ff ffc0 	bl	800dd20 <sbrk_aligned>
 800dda0:	1c43      	adds	r3, r0, #1
 800dda2:	4604      	mov	r4, r0
 800dda4:	d155      	bne.n	800de52 <_malloc_r+0xf2>
 800dda6:	f8d8 4000 	ldr.w	r4, [r8]
 800ddaa:	4626      	mov	r6, r4
 800ddac:	2e00      	cmp	r6, #0
 800ddae:	d145      	bne.n	800de3c <_malloc_r+0xdc>
 800ddb0:	2c00      	cmp	r4, #0
 800ddb2:	d048      	beq.n	800de46 <_malloc_r+0xe6>
 800ddb4:	6823      	ldr	r3, [r4, #0]
 800ddb6:	4631      	mov	r1, r6
 800ddb8:	4638      	mov	r0, r7
 800ddba:	eb04 0903 	add.w	r9, r4, r3
 800ddbe:	f000 fe4d 	bl	800ea5c <_sbrk_r>
 800ddc2:	4581      	cmp	r9, r0
 800ddc4:	d13f      	bne.n	800de46 <_malloc_r+0xe6>
 800ddc6:	6821      	ldr	r1, [r4, #0]
 800ddc8:	1a6d      	subs	r5, r5, r1
 800ddca:	4629      	mov	r1, r5
 800ddcc:	4638      	mov	r0, r7
 800ddce:	f7ff ffa7 	bl	800dd20 <sbrk_aligned>
 800ddd2:	3001      	adds	r0, #1
 800ddd4:	d037      	beq.n	800de46 <_malloc_r+0xe6>
 800ddd6:	6823      	ldr	r3, [r4, #0]
 800ddd8:	442b      	add	r3, r5
 800ddda:	6023      	str	r3, [r4, #0]
 800dddc:	f8d8 3000 	ldr.w	r3, [r8]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d038      	beq.n	800de56 <_malloc_r+0xf6>
 800dde4:	685a      	ldr	r2, [r3, #4]
 800dde6:	42a2      	cmp	r2, r4
 800dde8:	d12b      	bne.n	800de42 <_malloc_r+0xe2>
 800ddea:	2200      	movs	r2, #0
 800ddec:	605a      	str	r2, [r3, #4]
 800ddee:	e00f      	b.n	800de10 <_malloc_r+0xb0>
 800ddf0:	6822      	ldr	r2, [r4, #0]
 800ddf2:	1b52      	subs	r2, r2, r5
 800ddf4:	d41f      	bmi.n	800de36 <_malloc_r+0xd6>
 800ddf6:	2a0b      	cmp	r2, #11
 800ddf8:	d917      	bls.n	800de2a <_malloc_r+0xca>
 800ddfa:	1961      	adds	r1, r4, r5
 800ddfc:	42a3      	cmp	r3, r4
 800ddfe:	6025      	str	r5, [r4, #0]
 800de00:	bf18      	it	ne
 800de02:	6059      	strne	r1, [r3, #4]
 800de04:	6863      	ldr	r3, [r4, #4]
 800de06:	bf08      	it	eq
 800de08:	f8c8 1000 	streq.w	r1, [r8]
 800de0c:	5162      	str	r2, [r4, r5]
 800de0e:	604b      	str	r3, [r1, #4]
 800de10:	4638      	mov	r0, r7
 800de12:	f104 060b 	add.w	r6, r4, #11
 800de16:	f000 f829 	bl	800de6c <__malloc_unlock>
 800de1a:	f026 0607 	bic.w	r6, r6, #7
 800de1e:	1d23      	adds	r3, r4, #4
 800de20:	1af2      	subs	r2, r6, r3
 800de22:	d0ae      	beq.n	800dd82 <_malloc_r+0x22>
 800de24:	1b9b      	subs	r3, r3, r6
 800de26:	50a3      	str	r3, [r4, r2]
 800de28:	e7ab      	b.n	800dd82 <_malloc_r+0x22>
 800de2a:	42a3      	cmp	r3, r4
 800de2c:	6862      	ldr	r2, [r4, #4]
 800de2e:	d1dd      	bne.n	800ddec <_malloc_r+0x8c>
 800de30:	f8c8 2000 	str.w	r2, [r8]
 800de34:	e7ec      	b.n	800de10 <_malloc_r+0xb0>
 800de36:	4623      	mov	r3, r4
 800de38:	6864      	ldr	r4, [r4, #4]
 800de3a:	e7ac      	b.n	800dd96 <_malloc_r+0x36>
 800de3c:	4634      	mov	r4, r6
 800de3e:	6876      	ldr	r6, [r6, #4]
 800de40:	e7b4      	b.n	800ddac <_malloc_r+0x4c>
 800de42:	4613      	mov	r3, r2
 800de44:	e7cc      	b.n	800dde0 <_malloc_r+0x80>
 800de46:	230c      	movs	r3, #12
 800de48:	603b      	str	r3, [r7, #0]
 800de4a:	4638      	mov	r0, r7
 800de4c:	f000 f80e 	bl	800de6c <__malloc_unlock>
 800de50:	e797      	b.n	800dd82 <_malloc_r+0x22>
 800de52:	6025      	str	r5, [r4, #0]
 800de54:	e7dc      	b.n	800de10 <_malloc_r+0xb0>
 800de56:	605b      	str	r3, [r3, #4]
 800de58:	deff      	udf	#255	; 0xff
 800de5a:	bf00      	nop
 800de5c:	24005064 	.word	0x24005064

0800de60 <__malloc_lock>:
 800de60:	4801      	ldr	r0, [pc, #4]	; (800de68 <__malloc_lock+0x8>)
 800de62:	f7ff b902 	b.w	800d06a <__retarget_lock_acquire_recursive>
 800de66:	bf00      	nop
 800de68:	24005060 	.word	0x24005060

0800de6c <__malloc_unlock>:
 800de6c:	4801      	ldr	r0, [pc, #4]	; (800de74 <__malloc_unlock+0x8>)
 800de6e:	f7ff b8fd 	b.w	800d06c <__retarget_lock_release_recursive>
 800de72:	bf00      	nop
 800de74:	24005060 	.word	0x24005060

0800de78 <_Balloc>:
 800de78:	b570      	push	{r4, r5, r6, lr}
 800de7a:	69c6      	ldr	r6, [r0, #28]
 800de7c:	4604      	mov	r4, r0
 800de7e:	460d      	mov	r5, r1
 800de80:	b976      	cbnz	r6, 800dea0 <_Balloc+0x28>
 800de82:	2010      	movs	r0, #16
 800de84:	f7ff ff44 	bl	800dd10 <malloc>
 800de88:	4602      	mov	r2, r0
 800de8a:	61e0      	str	r0, [r4, #28]
 800de8c:	b920      	cbnz	r0, 800de98 <_Balloc+0x20>
 800de8e:	4b18      	ldr	r3, [pc, #96]	; (800def0 <_Balloc+0x78>)
 800de90:	4818      	ldr	r0, [pc, #96]	; (800def4 <_Balloc+0x7c>)
 800de92:	216b      	movs	r1, #107	; 0x6b
 800de94:	f000 fdf2 	bl	800ea7c <__assert_func>
 800de98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de9c:	6006      	str	r6, [r0, #0]
 800de9e:	60c6      	str	r6, [r0, #12]
 800dea0:	69e6      	ldr	r6, [r4, #28]
 800dea2:	68f3      	ldr	r3, [r6, #12]
 800dea4:	b183      	cbz	r3, 800dec8 <_Balloc+0x50>
 800dea6:	69e3      	ldr	r3, [r4, #28]
 800dea8:	68db      	ldr	r3, [r3, #12]
 800deaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800deae:	b9b8      	cbnz	r0, 800dee0 <_Balloc+0x68>
 800deb0:	2101      	movs	r1, #1
 800deb2:	fa01 f605 	lsl.w	r6, r1, r5
 800deb6:	1d72      	adds	r2, r6, #5
 800deb8:	0092      	lsls	r2, r2, #2
 800deba:	4620      	mov	r0, r4
 800debc:	f000 fdfc 	bl	800eab8 <_calloc_r>
 800dec0:	b160      	cbz	r0, 800dedc <_Balloc+0x64>
 800dec2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dec6:	e00e      	b.n	800dee6 <_Balloc+0x6e>
 800dec8:	2221      	movs	r2, #33	; 0x21
 800deca:	2104      	movs	r1, #4
 800decc:	4620      	mov	r0, r4
 800dece:	f000 fdf3 	bl	800eab8 <_calloc_r>
 800ded2:	69e3      	ldr	r3, [r4, #28]
 800ded4:	60f0      	str	r0, [r6, #12]
 800ded6:	68db      	ldr	r3, [r3, #12]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d1e4      	bne.n	800dea6 <_Balloc+0x2e>
 800dedc:	2000      	movs	r0, #0
 800dede:	bd70      	pop	{r4, r5, r6, pc}
 800dee0:	6802      	ldr	r2, [r0, #0]
 800dee2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dee6:	2300      	movs	r3, #0
 800dee8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800deec:	e7f7      	b.n	800dede <_Balloc+0x66>
 800deee:	bf00      	nop
 800def0:	0800fe51 	.word	0x0800fe51
 800def4:	0800fed1 	.word	0x0800fed1

0800def8 <_Bfree>:
 800def8:	b570      	push	{r4, r5, r6, lr}
 800defa:	69c6      	ldr	r6, [r0, #28]
 800defc:	4605      	mov	r5, r0
 800defe:	460c      	mov	r4, r1
 800df00:	b976      	cbnz	r6, 800df20 <_Bfree+0x28>
 800df02:	2010      	movs	r0, #16
 800df04:	f7ff ff04 	bl	800dd10 <malloc>
 800df08:	4602      	mov	r2, r0
 800df0a:	61e8      	str	r0, [r5, #28]
 800df0c:	b920      	cbnz	r0, 800df18 <_Bfree+0x20>
 800df0e:	4b09      	ldr	r3, [pc, #36]	; (800df34 <_Bfree+0x3c>)
 800df10:	4809      	ldr	r0, [pc, #36]	; (800df38 <_Bfree+0x40>)
 800df12:	218f      	movs	r1, #143	; 0x8f
 800df14:	f000 fdb2 	bl	800ea7c <__assert_func>
 800df18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df1c:	6006      	str	r6, [r0, #0]
 800df1e:	60c6      	str	r6, [r0, #12]
 800df20:	b13c      	cbz	r4, 800df32 <_Bfree+0x3a>
 800df22:	69eb      	ldr	r3, [r5, #28]
 800df24:	6862      	ldr	r2, [r4, #4]
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df2c:	6021      	str	r1, [r4, #0]
 800df2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df32:	bd70      	pop	{r4, r5, r6, pc}
 800df34:	0800fe51 	.word	0x0800fe51
 800df38:	0800fed1 	.word	0x0800fed1

0800df3c <__multadd>:
 800df3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df40:	690d      	ldr	r5, [r1, #16]
 800df42:	4607      	mov	r7, r0
 800df44:	460c      	mov	r4, r1
 800df46:	461e      	mov	r6, r3
 800df48:	f101 0c14 	add.w	ip, r1, #20
 800df4c:	2000      	movs	r0, #0
 800df4e:	f8dc 3000 	ldr.w	r3, [ip]
 800df52:	b299      	uxth	r1, r3
 800df54:	fb02 6101 	mla	r1, r2, r1, r6
 800df58:	0c1e      	lsrs	r6, r3, #16
 800df5a:	0c0b      	lsrs	r3, r1, #16
 800df5c:	fb02 3306 	mla	r3, r2, r6, r3
 800df60:	b289      	uxth	r1, r1
 800df62:	3001      	adds	r0, #1
 800df64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800df68:	4285      	cmp	r5, r0
 800df6a:	f84c 1b04 	str.w	r1, [ip], #4
 800df6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800df72:	dcec      	bgt.n	800df4e <__multadd+0x12>
 800df74:	b30e      	cbz	r6, 800dfba <__multadd+0x7e>
 800df76:	68a3      	ldr	r3, [r4, #8]
 800df78:	42ab      	cmp	r3, r5
 800df7a:	dc19      	bgt.n	800dfb0 <__multadd+0x74>
 800df7c:	6861      	ldr	r1, [r4, #4]
 800df7e:	4638      	mov	r0, r7
 800df80:	3101      	adds	r1, #1
 800df82:	f7ff ff79 	bl	800de78 <_Balloc>
 800df86:	4680      	mov	r8, r0
 800df88:	b928      	cbnz	r0, 800df96 <__multadd+0x5a>
 800df8a:	4602      	mov	r2, r0
 800df8c:	4b0c      	ldr	r3, [pc, #48]	; (800dfc0 <__multadd+0x84>)
 800df8e:	480d      	ldr	r0, [pc, #52]	; (800dfc4 <__multadd+0x88>)
 800df90:	21ba      	movs	r1, #186	; 0xba
 800df92:	f000 fd73 	bl	800ea7c <__assert_func>
 800df96:	6922      	ldr	r2, [r4, #16]
 800df98:	3202      	adds	r2, #2
 800df9a:	f104 010c 	add.w	r1, r4, #12
 800df9e:	0092      	lsls	r2, r2, #2
 800dfa0:	300c      	adds	r0, #12
 800dfa2:	f7ff f864 	bl	800d06e <memcpy>
 800dfa6:	4621      	mov	r1, r4
 800dfa8:	4638      	mov	r0, r7
 800dfaa:	f7ff ffa5 	bl	800def8 <_Bfree>
 800dfae:	4644      	mov	r4, r8
 800dfb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dfb4:	3501      	adds	r5, #1
 800dfb6:	615e      	str	r6, [r3, #20]
 800dfb8:	6125      	str	r5, [r4, #16]
 800dfba:	4620      	mov	r0, r4
 800dfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfc0:	0800fec0 	.word	0x0800fec0
 800dfc4:	0800fed1 	.word	0x0800fed1

0800dfc8 <__hi0bits>:
 800dfc8:	0c03      	lsrs	r3, r0, #16
 800dfca:	041b      	lsls	r3, r3, #16
 800dfcc:	b9d3      	cbnz	r3, 800e004 <__hi0bits+0x3c>
 800dfce:	0400      	lsls	r0, r0, #16
 800dfd0:	2310      	movs	r3, #16
 800dfd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dfd6:	bf04      	itt	eq
 800dfd8:	0200      	lsleq	r0, r0, #8
 800dfda:	3308      	addeq	r3, #8
 800dfdc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dfe0:	bf04      	itt	eq
 800dfe2:	0100      	lsleq	r0, r0, #4
 800dfe4:	3304      	addeq	r3, #4
 800dfe6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dfea:	bf04      	itt	eq
 800dfec:	0080      	lsleq	r0, r0, #2
 800dfee:	3302      	addeq	r3, #2
 800dff0:	2800      	cmp	r0, #0
 800dff2:	db05      	blt.n	800e000 <__hi0bits+0x38>
 800dff4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dff8:	f103 0301 	add.w	r3, r3, #1
 800dffc:	bf08      	it	eq
 800dffe:	2320      	moveq	r3, #32
 800e000:	4618      	mov	r0, r3
 800e002:	4770      	bx	lr
 800e004:	2300      	movs	r3, #0
 800e006:	e7e4      	b.n	800dfd2 <__hi0bits+0xa>

0800e008 <__lo0bits>:
 800e008:	6803      	ldr	r3, [r0, #0]
 800e00a:	f013 0207 	ands.w	r2, r3, #7
 800e00e:	d00c      	beq.n	800e02a <__lo0bits+0x22>
 800e010:	07d9      	lsls	r1, r3, #31
 800e012:	d422      	bmi.n	800e05a <__lo0bits+0x52>
 800e014:	079a      	lsls	r2, r3, #30
 800e016:	bf49      	itett	mi
 800e018:	085b      	lsrmi	r3, r3, #1
 800e01a:	089b      	lsrpl	r3, r3, #2
 800e01c:	6003      	strmi	r3, [r0, #0]
 800e01e:	2201      	movmi	r2, #1
 800e020:	bf5c      	itt	pl
 800e022:	6003      	strpl	r3, [r0, #0]
 800e024:	2202      	movpl	r2, #2
 800e026:	4610      	mov	r0, r2
 800e028:	4770      	bx	lr
 800e02a:	b299      	uxth	r1, r3
 800e02c:	b909      	cbnz	r1, 800e032 <__lo0bits+0x2a>
 800e02e:	0c1b      	lsrs	r3, r3, #16
 800e030:	2210      	movs	r2, #16
 800e032:	b2d9      	uxtb	r1, r3
 800e034:	b909      	cbnz	r1, 800e03a <__lo0bits+0x32>
 800e036:	3208      	adds	r2, #8
 800e038:	0a1b      	lsrs	r3, r3, #8
 800e03a:	0719      	lsls	r1, r3, #28
 800e03c:	bf04      	itt	eq
 800e03e:	091b      	lsreq	r3, r3, #4
 800e040:	3204      	addeq	r2, #4
 800e042:	0799      	lsls	r1, r3, #30
 800e044:	bf04      	itt	eq
 800e046:	089b      	lsreq	r3, r3, #2
 800e048:	3202      	addeq	r2, #2
 800e04a:	07d9      	lsls	r1, r3, #31
 800e04c:	d403      	bmi.n	800e056 <__lo0bits+0x4e>
 800e04e:	085b      	lsrs	r3, r3, #1
 800e050:	f102 0201 	add.w	r2, r2, #1
 800e054:	d003      	beq.n	800e05e <__lo0bits+0x56>
 800e056:	6003      	str	r3, [r0, #0]
 800e058:	e7e5      	b.n	800e026 <__lo0bits+0x1e>
 800e05a:	2200      	movs	r2, #0
 800e05c:	e7e3      	b.n	800e026 <__lo0bits+0x1e>
 800e05e:	2220      	movs	r2, #32
 800e060:	e7e1      	b.n	800e026 <__lo0bits+0x1e>
	...

0800e064 <__i2b>:
 800e064:	b510      	push	{r4, lr}
 800e066:	460c      	mov	r4, r1
 800e068:	2101      	movs	r1, #1
 800e06a:	f7ff ff05 	bl	800de78 <_Balloc>
 800e06e:	4602      	mov	r2, r0
 800e070:	b928      	cbnz	r0, 800e07e <__i2b+0x1a>
 800e072:	4b05      	ldr	r3, [pc, #20]	; (800e088 <__i2b+0x24>)
 800e074:	4805      	ldr	r0, [pc, #20]	; (800e08c <__i2b+0x28>)
 800e076:	f240 1145 	movw	r1, #325	; 0x145
 800e07a:	f000 fcff 	bl	800ea7c <__assert_func>
 800e07e:	2301      	movs	r3, #1
 800e080:	6144      	str	r4, [r0, #20]
 800e082:	6103      	str	r3, [r0, #16]
 800e084:	bd10      	pop	{r4, pc}
 800e086:	bf00      	nop
 800e088:	0800fec0 	.word	0x0800fec0
 800e08c:	0800fed1 	.word	0x0800fed1

0800e090 <__multiply>:
 800e090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e094:	4691      	mov	r9, r2
 800e096:	690a      	ldr	r2, [r1, #16]
 800e098:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	bfb8      	it	lt
 800e0a0:	460b      	movlt	r3, r1
 800e0a2:	460c      	mov	r4, r1
 800e0a4:	bfbc      	itt	lt
 800e0a6:	464c      	movlt	r4, r9
 800e0a8:	4699      	movlt	r9, r3
 800e0aa:	6927      	ldr	r7, [r4, #16]
 800e0ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e0b0:	68a3      	ldr	r3, [r4, #8]
 800e0b2:	6861      	ldr	r1, [r4, #4]
 800e0b4:	eb07 060a 	add.w	r6, r7, sl
 800e0b8:	42b3      	cmp	r3, r6
 800e0ba:	b085      	sub	sp, #20
 800e0bc:	bfb8      	it	lt
 800e0be:	3101      	addlt	r1, #1
 800e0c0:	f7ff feda 	bl	800de78 <_Balloc>
 800e0c4:	b930      	cbnz	r0, 800e0d4 <__multiply+0x44>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	4b44      	ldr	r3, [pc, #272]	; (800e1dc <__multiply+0x14c>)
 800e0ca:	4845      	ldr	r0, [pc, #276]	; (800e1e0 <__multiply+0x150>)
 800e0cc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e0d0:	f000 fcd4 	bl	800ea7c <__assert_func>
 800e0d4:	f100 0514 	add.w	r5, r0, #20
 800e0d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e0dc:	462b      	mov	r3, r5
 800e0de:	2200      	movs	r2, #0
 800e0e0:	4543      	cmp	r3, r8
 800e0e2:	d321      	bcc.n	800e128 <__multiply+0x98>
 800e0e4:	f104 0314 	add.w	r3, r4, #20
 800e0e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e0ec:	f109 0314 	add.w	r3, r9, #20
 800e0f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e0f4:	9202      	str	r2, [sp, #8]
 800e0f6:	1b3a      	subs	r2, r7, r4
 800e0f8:	3a15      	subs	r2, #21
 800e0fa:	f022 0203 	bic.w	r2, r2, #3
 800e0fe:	3204      	adds	r2, #4
 800e100:	f104 0115 	add.w	r1, r4, #21
 800e104:	428f      	cmp	r7, r1
 800e106:	bf38      	it	cc
 800e108:	2204      	movcc	r2, #4
 800e10a:	9201      	str	r2, [sp, #4]
 800e10c:	9a02      	ldr	r2, [sp, #8]
 800e10e:	9303      	str	r3, [sp, #12]
 800e110:	429a      	cmp	r2, r3
 800e112:	d80c      	bhi.n	800e12e <__multiply+0x9e>
 800e114:	2e00      	cmp	r6, #0
 800e116:	dd03      	ble.n	800e120 <__multiply+0x90>
 800e118:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d05b      	beq.n	800e1d8 <__multiply+0x148>
 800e120:	6106      	str	r6, [r0, #16]
 800e122:	b005      	add	sp, #20
 800e124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e128:	f843 2b04 	str.w	r2, [r3], #4
 800e12c:	e7d8      	b.n	800e0e0 <__multiply+0x50>
 800e12e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e132:	f1ba 0f00 	cmp.w	sl, #0
 800e136:	d024      	beq.n	800e182 <__multiply+0xf2>
 800e138:	f104 0e14 	add.w	lr, r4, #20
 800e13c:	46a9      	mov	r9, r5
 800e13e:	f04f 0c00 	mov.w	ip, #0
 800e142:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e146:	f8d9 1000 	ldr.w	r1, [r9]
 800e14a:	fa1f fb82 	uxth.w	fp, r2
 800e14e:	b289      	uxth	r1, r1
 800e150:	fb0a 110b 	mla	r1, sl, fp, r1
 800e154:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e158:	f8d9 2000 	ldr.w	r2, [r9]
 800e15c:	4461      	add	r1, ip
 800e15e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e162:	fb0a c20b 	mla	r2, sl, fp, ip
 800e166:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e16a:	b289      	uxth	r1, r1
 800e16c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e170:	4577      	cmp	r7, lr
 800e172:	f849 1b04 	str.w	r1, [r9], #4
 800e176:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e17a:	d8e2      	bhi.n	800e142 <__multiply+0xb2>
 800e17c:	9a01      	ldr	r2, [sp, #4]
 800e17e:	f845 c002 	str.w	ip, [r5, r2]
 800e182:	9a03      	ldr	r2, [sp, #12]
 800e184:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e188:	3304      	adds	r3, #4
 800e18a:	f1b9 0f00 	cmp.w	r9, #0
 800e18e:	d021      	beq.n	800e1d4 <__multiply+0x144>
 800e190:	6829      	ldr	r1, [r5, #0]
 800e192:	f104 0c14 	add.w	ip, r4, #20
 800e196:	46ae      	mov	lr, r5
 800e198:	f04f 0a00 	mov.w	sl, #0
 800e19c:	f8bc b000 	ldrh.w	fp, [ip]
 800e1a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e1a4:	fb09 220b 	mla	r2, r9, fp, r2
 800e1a8:	4452      	add	r2, sl
 800e1aa:	b289      	uxth	r1, r1
 800e1ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e1b0:	f84e 1b04 	str.w	r1, [lr], #4
 800e1b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e1b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e1bc:	f8be 1000 	ldrh.w	r1, [lr]
 800e1c0:	fb09 110a 	mla	r1, r9, sl, r1
 800e1c4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e1c8:	4567      	cmp	r7, ip
 800e1ca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e1ce:	d8e5      	bhi.n	800e19c <__multiply+0x10c>
 800e1d0:	9a01      	ldr	r2, [sp, #4]
 800e1d2:	50a9      	str	r1, [r5, r2]
 800e1d4:	3504      	adds	r5, #4
 800e1d6:	e799      	b.n	800e10c <__multiply+0x7c>
 800e1d8:	3e01      	subs	r6, #1
 800e1da:	e79b      	b.n	800e114 <__multiply+0x84>
 800e1dc:	0800fec0 	.word	0x0800fec0
 800e1e0:	0800fed1 	.word	0x0800fed1

0800e1e4 <__pow5mult>:
 800e1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1e8:	4615      	mov	r5, r2
 800e1ea:	f012 0203 	ands.w	r2, r2, #3
 800e1ee:	4606      	mov	r6, r0
 800e1f0:	460f      	mov	r7, r1
 800e1f2:	d007      	beq.n	800e204 <__pow5mult+0x20>
 800e1f4:	4c25      	ldr	r4, [pc, #148]	; (800e28c <__pow5mult+0xa8>)
 800e1f6:	3a01      	subs	r2, #1
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e1fe:	f7ff fe9d 	bl	800df3c <__multadd>
 800e202:	4607      	mov	r7, r0
 800e204:	10ad      	asrs	r5, r5, #2
 800e206:	d03d      	beq.n	800e284 <__pow5mult+0xa0>
 800e208:	69f4      	ldr	r4, [r6, #28]
 800e20a:	b97c      	cbnz	r4, 800e22c <__pow5mult+0x48>
 800e20c:	2010      	movs	r0, #16
 800e20e:	f7ff fd7f 	bl	800dd10 <malloc>
 800e212:	4602      	mov	r2, r0
 800e214:	61f0      	str	r0, [r6, #28]
 800e216:	b928      	cbnz	r0, 800e224 <__pow5mult+0x40>
 800e218:	4b1d      	ldr	r3, [pc, #116]	; (800e290 <__pow5mult+0xac>)
 800e21a:	481e      	ldr	r0, [pc, #120]	; (800e294 <__pow5mult+0xb0>)
 800e21c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e220:	f000 fc2c 	bl	800ea7c <__assert_func>
 800e224:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e228:	6004      	str	r4, [r0, #0]
 800e22a:	60c4      	str	r4, [r0, #12]
 800e22c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e230:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e234:	b94c      	cbnz	r4, 800e24a <__pow5mult+0x66>
 800e236:	f240 2171 	movw	r1, #625	; 0x271
 800e23a:	4630      	mov	r0, r6
 800e23c:	f7ff ff12 	bl	800e064 <__i2b>
 800e240:	2300      	movs	r3, #0
 800e242:	f8c8 0008 	str.w	r0, [r8, #8]
 800e246:	4604      	mov	r4, r0
 800e248:	6003      	str	r3, [r0, #0]
 800e24a:	f04f 0900 	mov.w	r9, #0
 800e24e:	07eb      	lsls	r3, r5, #31
 800e250:	d50a      	bpl.n	800e268 <__pow5mult+0x84>
 800e252:	4639      	mov	r1, r7
 800e254:	4622      	mov	r2, r4
 800e256:	4630      	mov	r0, r6
 800e258:	f7ff ff1a 	bl	800e090 <__multiply>
 800e25c:	4639      	mov	r1, r7
 800e25e:	4680      	mov	r8, r0
 800e260:	4630      	mov	r0, r6
 800e262:	f7ff fe49 	bl	800def8 <_Bfree>
 800e266:	4647      	mov	r7, r8
 800e268:	106d      	asrs	r5, r5, #1
 800e26a:	d00b      	beq.n	800e284 <__pow5mult+0xa0>
 800e26c:	6820      	ldr	r0, [r4, #0]
 800e26e:	b938      	cbnz	r0, 800e280 <__pow5mult+0x9c>
 800e270:	4622      	mov	r2, r4
 800e272:	4621      	mov	r1, r4
 800e274:	4630      	mov	r0, r6
 800e276:	f7ff ff0b 	bl	800e090 <__multiply>
 800e27a:	6020      	str	r0, [r4, #0]
 800e27c:	f8c0 9000 	str.w	r9, [r0]
 800e280:	4604      	mov	r4, r0
 800e282:	e7e4      	b.n	800e24e <__pow5mult+0x6a>
 800e284:	4638      	mov	r0, r7
 800e286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e28a:	bf00      	nop
 800e28c:	08010020 	.word	0x08010020
 800e290:	0800fe51 	.word	0x0800fe51
 800e294:	0800fed1 	.word	0x0800fed1

0800e298 <__lshift>:
 800e298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e29c:	460c      	mov	r4, r1
 800e29e:	6849      	ldr	r1, [r1, #4]
 800e2a0:	6923      	ldr	r3, [r4, #16]
 800e2a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e2a6:	68a3      	ldr	r3, [r4, #8]
 800e2a8:	4607      	mov	r7, r0
 800e2aa:	4691      	mov	r9, r2
 800e2ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e2b0:	f108 0601 	add.w	r6, r8, #1
 800e2b4:	42b3      	cmp	r3, r6
 800e2b6:	db0b      	blt.n	800e2d0 <__lshift+0x38>
 800e2b8:	4638      	mov	r0, r7
 800e2ba:	f7ff fddd 	bl	800de78 <_Balloc>
 800e2be:	4605      	mov	r5, r0
 800e2c0:	b948      	cbnz	r0, 800e2d6 <__lshift+0x3e>
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	4b28      	ldr	r3, [pc, #160]	; (800e368 <__lshift+0xd0>)
 800e2c6:	4829      	ldr	r0, [pc, #164]	; (800e36c <__lshift+0xd4>)
 800e2c8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e2cc:	f000 fbd6 	bl	800ea7c <__assert_func>
 800e2d0:	3101      	adds	r1, #1
 800e2d2:	005b      	lsls	r3, r3, #1
 800e2d4:	e7ee      	b.n	800e2b4 <__lshift+0x1c>
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	f100 0114 	add.w	r1, r0, #20
 800e2dc:	f100 0210 	add.w	r2, r0, #16
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	4553      	cmp	r3, sl
 800e2e4:	db33      	blt.n	800e34e <__lshift+0xb6>
 800e2e6:	6920      	ldr	r0, [r4, #16]
 800e2e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e2ec:	f104 0314 	add.w	r3, r4, #20
 800e2f0:	f019 091f 	ands.w	r9, r9, #31
 800e2f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e2f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e2fc:	d02b      	beq.n	800e356 <__lshift+0xbe>
 800e2fe:	f1c9 0e20 	rsb	lr, r9, #32
 800e302:	468a      	mov	sl, r1
 800e304:	2200      	movs	r2, #0
 800e306:	6818      	ldr	r0, [r3, #0]
 800e308:	fa00 f009 	lsl.w	r0, r0, r9
 800e30c:	4310      	orrs	r0, r2
 800e30e:	f84a 0b04 	str.w	r0, [sl], #4
 800e312:	f853 2b04 	ldr.w	r2, [r3], #4
 800e316:	459c      	cmp	ip, r3
 800e318:	fa22 f20e 	lsr.w	r2, r2, lr
 800e31c:	d8f3      	bhi.n	800e306 <__lshift+0x6e>
 800e31e:	ebac 0304 	sub.w	r3, ip, r4
 800e322:	3b15      	subs	r3, #21
 800e324:	f023 0303 	bic.w	r3, r3, #3
 800e328:	3304      	adds	r3, #4
 800e32a:	f104 0015 	add.w	r0, r4, #21
 800e32e:	4584      	cmp	ip, r0
 800e330:	bf38      	it	cc
 800e332:	2304      	movcc	r3, #4
 800e334:	50ca      	str	r2, [r1, r3]
 800e336:	b10a      	cbz	r2, 800e33c <__lshift+0xa4>
 800e338:	f108 0602 	add.w	r6, r8, #2
 800e33c:	3e01      	subs	r6, #1
 800e33e:	4638      	mov	r0, r7
 800e340:	612e      	str	r6, [r5, #16]
 800e342:	4621      	mov	r1, r4
 800e344:	f7ff fdd8 	bl	800def8 <_Bfree>
 800e348:	4628      	mov	r0, r5
 800e34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e34e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e352:	3301      	adds	r3, #1
 800e354:	e7c5      	b.n	800e2e2 <__lshift+0x4a>
 800e356:	3904      	subs	r1, #4
 800e358:	f853 2b04 	ldr.w	r2, [r3], #4
 800e35c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e360:	459c      	cmp	ip, r3
 800e362:	d8f9      	bhi.n	800e358 <__lshift+0xc0>
 800e364:	e7ea      	b.n	800e33c <__lshift+0xa4>
 800e366:	bf00      	nop
 800e368:	0800fec0 	.word	0x0800fec0
 800e36c:	0800fed1 	.word	0x0800fed1

0800e370 <__mcmp>:
 800e370:	b530      	push	{r4, r5, lr}
 800e372:	6902      	ldr	r2, [r0, #16]
 800e374:	690c      	ldr	r4, [r1, #16]
 800e376:	1b12      	subs	r2, r2, r4
 800e378:	d10e      	bne.n	800e398 <__mcmp+0x28>
 800e37a:	f100 0314 	add.w	r3, r0, #20
 800e37e:	3114      	adds	r1, #20
 800e380:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e384:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e388:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e38c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e390:	42a5      	cmp	r5, r4
 800e392:	d003      	beq.n	800e39c <__mcmp+0x2c>
 800e394:	d305      	bcc.n	800e3a2 <__mcmp+0x32>
 800e396:	2201      	movs	r2, #1
 800e398:	4610      	mov	r0, r2
 800e39a:	bd30      	pop	{r4, r5, pc}
 800e39c:	4283      	cmp	r3, r0
 800e39e:	d3f3      	bcc.n	800e388 <__mcmp+0x18>
 800e3a0:	e7fa      	b.n	800e398 <__mcmp+0x28>
 800e3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3a6:	e7f7      	b.n	800e398 <__mcmp+0x28>

0800e3a8 <__mdiff>:
 800e3a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ac:	460c      	mov	r4, r1
 800e3ae:	4606      	mov	r6, r0
 800e3b0:	4611      	mov	r1, r2
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	4690      	mov	r8, r2
 800e3b6:	f7ff ffdb 	bl	800e370 <__mcmp>
 800e3ba:	1e05      	subs	r5, r0, #0
 800e3bc:	d110      	bne.n	800e3e0 <__mdiff+0x38>
 800e3be:	4629      	mov	r1, r5
 800e3c0:	4630      	mov	r0, r6
 800e3c2:	f7ff fd59 	bl	800de78 <_Balloc>
 800e3c6:	b930      	cbnz	r0, 800e3d6 <__mdiff+0x2e>
 800e3c8:	4b3a      	ldr	r3, [pc, #232]	; (800e4b4 <__mdiff+0x10c>)
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	f240 2137 	movw	r1, #567	; 0x237
 800e3d0:	4839      	ldr	r0, [pc, #228]	; (800e4b8 <__mdiff+0x110>)
 800e3d2:	f000 fb53 	bl	800ea7c <__assert_func>
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e3dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3e0:	bfa4      	itt	ge
 800e3e2:	4643      	movge	r3, r8
 800e3e4:	46a0      	movge	r8, r4
 800e3e6:	4630      	mov	r0, r6
 800e3e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e3ec:	bfa6      	itte	ge
 800e3ee:	461c      	movge	r4, r3
 800e3f0:	2500      	movge	r5, #0
 800e3f2:	2501      	movlt	r5, #1
 800e3f4:	f7ff fd40 	bl	800de78 <_Balloc>
 800e3f8:	b920      	cbnz	r0, 800e404 <__mdiff+0x5c>
 800e3fa:	4b2e      	ldr	r3, [pc, #184]	; (800e4b4 <__mdiff+0x10c>)
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	f240 2145 	movw	r1, #581	; 0x245
 800e402:	e7e5      	b.n	800e3d0 <__mdiff+0x28>
 800e404:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e408:	6926      	ldr	r6, [r4, #16]
 800e40a:	60c5      	str	r5, [r0, #12]
 800e40c:	f104 0914 	add.w	r9, r4, #20
 800e410:	f108 0514 	add.w	r5, r8, #20
 800e414:	f100 0e14 	add.w	lr, r0, #20
 800e418:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e41c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e420:	f108 0210 	add.w	r2, r8, #16
 800e424:	46f2      	mov	sl, lr
 800e426:	2100      	movs	r1, #0
 800e428:	f859 3b04 	ldr.w	r3, [r9], #4
 800e42c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e430:	fa11 f88b 	uxtah	r8, r1, fp
 800e434:	b299      	uxth	r1, r3
 800e436:	0c1b      	lsrs	r3, r3, #16
 800e438:	eba8 0801 	sub.w	r8, r8, r1
 800e43c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e440:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e444:	fa1f f888 	uxth.w	r8, r8
 800e448:	1419      	asrs	r1, r3, #16
 800e44a:	454e      	cmp	r6, r9
 800e44c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e450:	f84a 3b04 	str.w	r3, [sl], #4
 800e454:	d8e8      	bhi.n	800e428 <__mdiff+0x80>
 800e456:	1b33      	subs	r3, r6, r4
 800e458:	3b15      	subs	r3, #21
 800e45a:	f023 0303 	bic.w	r3, r3, #3
 800e45e:	3304      	adds	r3, #4
 800e460:	3415      	adds	r4, #21
 800e462:	42a6      	cmp	r6, r4
 800e464:	bf38      	it	cc
 800e466:	2304      	movcc	r3, #4
 800e468:	441d      	add	r5, r3
 800e46a:	4473      	add	r3, lr
 800e46c:	469e      	mov	lr, r3
 800e46e:	462e      	mov	r6, r5
 800e470:	4566      	cmp	r6, ip
 800e472:	d30e      	bcc.n	800e492 <__mdiff+0xea>
 800e474:	f10c 0203 	add.w	r2, ip, #3
 800e478:	1b52      	subs	r2, r2, r5
 800e47a:	f022 0203 	bic.w	r2, r2, #3
 800e47e:	3d03      	subs	r5, #3
 800e480:	45ac      	cmp	ip, r5
 800e482:	bf38      	it	cc
 800e484:	2200      	movcc	r2, #0
 800e486:	4413      	add	r3, r2
 800e488:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e48c:	b17a      	cbz	r2, 800e4ae <__mdiff+0x106>
 800e48e:	6107      	str	r7, [r0, #16]
 800e490:	e7a4      	b.n	800e3dc <__mdiff+0x34>
 800e492:	f856 8b04 	ldr.w	r8, [r6], #4
 800e496:	fa11 f288 	uxtah	r2, r1, r8
 800e49a:	1414      	asrs	r4, r2, #16
 800e49c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e4a0:	b292      	uxth	r2, r2
 800e4a2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e4a6:	f84e 2b04 	str.w	r2, [lr], #4
 800e4aa:	1421      	asrs	r1, r4, #16
 800e4ac:	e7e0      	b.n	800e470 <__mdiff+0xc8>
 800e4ae:	3f01      	subs	r7, #1
 800e4b0:	e7ea      	b.n	800e488 <__mdiff+0xe0>
 800e4b2:	bf00      	nop
 800e4b4:	0800fec0 	.word	0x0800fec0
 800e4b8:	0800fed1 	.word	0x0800fed1

0800e4bc <__d2b>:
 800e4bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e4c0:	460f      	mov	r7, r1
 800e4c2:	2101      	movs	r1, #1
 800e4c4:	ec59 8b10 	vmov	r8, r9, d0
 800e4c8:	4616      	mov	r6, r2
 800e4ca:	f7ff fcd5 	bl	800de78 <_Balloc>
 800e4ce:	4604      	mov	r4, r0
 800e4d0:	b930      	cbnz	r0, 800e4e0 <__d2b+0x24>
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	4b24      	ldr	r3, [pc, #144]	; (800e568 <__d2b+0xac>)
 800e4d6:	4825      	ldr	r0, [pc, #148]	; (800e56c <__d2b+0xb0>)
 800e4d8:	f240 310f 	movw	r1, #783	; 0x30f
 800e4dc:	f000 face 	bl	800ea7c <__assert_func>
 800e4e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e4e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e4e8:	bb2d      	cbnz	r5, 800e536 <__d2b+0x7a>
 800e4ea:	9301      	str	r3, [sp, #4]
 800e4ec:	f1b8 0300 	subs.w	r3, r8, #0
 800e4f0:	d026      	beq.n	800e540 <__d2b+0x84>
 800e4f2:	4668      	mov	r0, sp
 800e4f4:	9300      	str	r3, [sp, #0]
 800e4f6:	f7ff fd87 	bl	800e008 <__lo0bits>
 800e4fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e4fe:	b1e8      	cbz	r0, 800e53c <__d2b+0x80>
 800e500:	f1c0 0320 	rsb	r3, r0, #32
 800e504:	fa02 f303 	lsl.w	r3, r2, r3
 800e508:	430b      	orrs	r3, r1
 800e50a:	40c2      	lsrs	r2, r0
 800e50c:	6163      	str	r3, [r4, #20]
 800e50e:	9201      	str	r2, [sp, #4]
 800e510:	9b01      	ldr	r3, [sp, #4]
 800e512:	61a3      	str	r3, [r4, #24]
 800e514:	2b00      	cmp	r3, #0
 800e516:	bf14      	ite	ne
 800e518:	2202      	movne	r2, #2
 800e51a:	2201      	moveq	r2, #1
 800e51c:	6122      	str	r2, [r4, #16]
 800e51e:	b1bd      	cbz	r5, 800e550 <__d2b+0x94>
 800e520:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e524:	4405      	add	r5, r0
 800e526:	603d      	str	r5, [r7, #0]
 800e528:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e52c:	6030      	str	r0, [r6, #0]
 800e52e:	4620      	mov	r0, r4
 800e530:	b003      	add	sp, #12
 800e532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e53a:	e7d6      	b.n	800e4ea <__d2b+0x2e>
 800e53c:	6161      	str	r1, [r4, #20]
 800e53e:	e7e7      	b.n	800e510 <__d2b+0x54>
 800e540:	a801      	add	r0, sp, #4
 800e542:	f7ff fd61 	bl	800e008 <__lo0bits>
 800e546:	9b01      	ldr	r3, [sp, #4]
 800e548:	6163      	str	r3, [r4, #20]
 800e54a:	3020      	adds	r0, #32
 800e54c:	2201      	movs	r2, #1
 800e54e:	e7e5      	b.n	800e51c <__d2b+0x60>
 800e550:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e554:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e558:	6038      	str	r0, [r7, #0]
 800e55a:	6918      	ldr	r0, [r3, #16]
 800e55c:	f7ff fd34 	bl	800dfc8 <__hi0bits>
 800e560:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e564:	e7e2      	b.n	800e52c <__d2b+0x70>
 800e566:	bf00      	nop
 800e568:	0800fec0 	.word	0x0800fec0
 800e56c:	0800fed1 	.word	0x0800fed1

0800e570 <__sfputc_r>:
 800e570:	6893      	ldr	r3, [r2, #8]
 800e572:	3b01      	subs	r3, #1
 800e574:	2b00      	cmp	r3, #0
 800e576:	b410      	push	{r4}
 800e578:	6093      	str	r3, [r2, #8]
 800e57a:	da08      	bge.n	800e58e <__sfputc_r+0x1e>
 800e57c:	6994      	ldr	r4, [r2, #24]
 800e57e:	42a3      	cmp	r3, r4
 800e580:	db01      	blt.n	800e586 <__sfputc_r+0x16>
 800e582:	290a      	cmp	r1, #10
 800e584:	d103      	bne.n	800e58e <__sfputc_r+0x1e>
 800e586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e58a:	f7fe bc06 	b.w	800cd9a <__swbuf_r>
 800e58e:	6813      	ldr	r3, [r2, #0]
 800e590:	1c58      	adds	r0, r3, #1
 800e592:	6010      	str	r0, [r2, #0]
 800e594:	7019      	strb	r1, [r3, #0]
 800e596:	4608      	mov	r0, r1
 800e598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e59c:	4770      	bx	lr

0800e59e <__sfputs_r>:
 800e59e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5a0:	4606      	mov	r6, r0
 800e5a2:	460f      	mov	r7, r1
 800e5a4:	4614      	mov	r4, r2
 800e5a6:	18d5      	adds	r5, r2, r3
 800e5a8:	42ac      	cmp	r4, r5
 800e5aa:	d101      	bne.n	800e5b0 <__sfputs_r+0x12>
 800e5ac:	2000      	movs	r0, #0
 800e5ae:	e007      	b.n	800e5c0 <__sfputs_r+0x22>
 800e5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5b4:	463a      	mov	r2, r7
 800e5b6:	4630      	mov	r0, r6
 800e5b8:	f7ff ffda 	bl	800e570 <__sfputc_r>
 800e5bc:	1c43      	adds	r3, r0, #1
 800e5be:	d1f3      	bne.n	800e5a8 <__sfputs_r+0xa>
 800e5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e5c4 <_vfiprintf_r>:
 800e5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5c8:	460d      	mov	r5, r1
 800e5ca:	b09d      	sub	sp, #116	; 0x74
 800e5cc:	4614      	mov	r4, r2
 800e5ce:	4698      	mov	r8, r3
 800e5d0:	4606      	mov	r6, r0
 800e5d2:	b118      	cbz	r0, 800e5dc <_vfiprintf_r+0x18>
 800e5d4:	6a03      	ldr	r3, [r0, #32]
 800e5d6:	b90b      	cbnz	r3, 800e5dc <_vfiprintf_r+0x18>
 800e5d8:	f7fe faf8 	bl	800cbcc <__sinit>
 800e5dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5de:	07d9      	lsls	r1, r3, #31
 800e5e0:	d405      	bmi.n	800e5ee <_vfiprintf_r+0x2a>
 800e5e2:	89ab      	ldrh	r3, [r5, #12]
 800e5e4:	059a      	lsls	r2, r3, #22
 800e5e6:	d402      	bmi.n	800e5ee <_vfiprintf_r+0x2a>
 800e5e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5ea:	f7fe fd3e 	bl	800d06a <__retarget_lock_acquire_recursive>
 800e5ee:	89ab      	ldrh	r3, [r5, #12]
 800e5f0:	071b      	lsls	r3, r3, #28
 800e5f2:	d501      	bpl.n	800e5f8 <_vfiprintf_r+0x34>
 800e5f4:	692b      	ldr	r3, [r5, #16]
 800e5f6:	b99b      	cbnz	r3, 800e620 <_vfiprintf_r+0x5c>
 800e5f8:	4629      	mov	r1, r5
 800e5fa:	4630      	mov	r0, r6
 800e5fc:	f7fe fc0a 	bl	800ce14 <__swsetup_r>
 800e600:	b170      	cbz	r0, 800e620 <_vfiprintf_r+0x5c>
 800e602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e604:	07dc      	lsls	r4, r3, #31
 800e606:	d504      	bpl.n	800e612 <_vfiprintf_r+0x4e>
 800e608:	f04f 30ff 	mov.w	r0, #4294967295
 800e60c:	b01d      	add	sp, #116	; 0x74
 800e60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e612:	89ab      	ldrh	r3, [r5, #12]
 800e614:	0598      	lsls	r0, r3, #22
 800e616:	d4f7      	bmi.n	800e608 <_vfiprintf_r+0x44>
 800e618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e61a:	f7fe fd27 	bl	800d06c <__retarget_lock_release_recursive>
 800e61e:	e7f3      	b.n	800e608 <_vfiprintf_r+0x44>
 800e620:	2300      	movs	r3, #0
 800e622:	9309      	str	r3, [sp, #36]	; 0x24
 800e624:	2320      	movs	r3, #32
 800e626:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e62a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e62e:	2330      	movs	r3, #48	; 0x30
 800e630:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e7e4 <_vfiprintf_r+0x220>
 800e634:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e638:	f04f 0901 	mov.w	r9, #1
 800e63c:	4623      	mov	r3, r4
 800e63e:	469a      	mov	sl, r3
 800e640:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e644:	b10a      	cbz	r2, 800e64a <_vfiprintf_r+0x86>
 800e646:	2a25      	cmp	r2, #37	; 0x25
 800e648:	d1f9      	bne.n	800e63e <_vfiprintf_r+0x7a>
 800e64a:	ebba 0b04 	subs.w	fp, sl, r4
 800e64e:	d00b      	beq.n	800e668 <_vfiprintf_r+0xa4>
 800e650:	465b      	mov	r3, fp
 800e652:	4622      	mov	r2, r4
 800e654:	4629      	mov	r1, r5
 800e656:	4630      	mov	r0, r6
 800e658:	f7ff ffa1 	bl	800e59e <__sfputs_r>
 800e65c:	3001      	adds	r0, #1
 800e65e:	f000 80a9 	beq.w	800e7b4 <_vfiprintf_r+0x1f0>
 800e662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e664:	445a      	add	r2, fp
 800e666:	9209      	str	r2, [sp, #36]	; 0x24
 800e668:	f89a 3000 	ldrb.w	r3, [sl]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f000 80a1 	beq.w	800e7b4 <_vfiprintf_r+0x1f0>
 800e672:	2300      	movs	r3, #0
 800e674:	f04f 32ff 	mov.w	r2, #4294967295
 800e678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e67c:	f10a 0a01 	add.w	sl, sl, #1
 800e680:	9304      	str	r3, [sp, #16]
 800e682:	9307      	str	r3, [sp, #28]
 800e684:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e688:	931a      	str	r3, [sp, #104]	; 0x68
 800e68a:	4654      	mov	r4, sl
 800e68c:	2205      	movs	r2, #5
 800e68e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e692:	4854      	ldr	r0, [pc, #336]	; (800e7e4 <_vfiprintf_r+0x220>)
 800e694:	f7f1 fe24 	bl	80002e0 <memchr>
 800e698:	9a04      	ldr	r2, [sp, #16]
 800e69a:	b9d8      	cbnz	r0, 800e6d4 <_vfiprintf_r+0x110>
 800e69c:	06d1      	lsls	r1, r2, #27
 800e69e:	bf44      	itt	mi
 800e6a0:	2320      	movmi	r3, #32
 800e6a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6a6:	0713      	lsls	r3, r2, #28
 800e6a8:	bf44      	itt	mi
 800e6aa:	232b      	movmi	r3, #43	; 0x2b
 800e6ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e6b4:	2b2a      	cmp	r3, #42	; 0x2a
 800e6b6:	d015      	beq.n	800e6e4 <_vfiprintf_r+0x120>
 800e6b8:	9a07      	ldr	r2, [sp, #28]
 800e6ba:	4654      	mov	r4, sl
 800e6bc:	2000      	movs	r0, #0
 800e6be:	f04f 0c0a 	mov.w	ip, #10
 800e6c2:	4621      	mov	r1, r4
 800e6c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6c8:	3b30      	subs	r3, #48	; 0x30
 800e6ca:	2b09      	cmp	r3, #9
 800e6cc:	d94d      	bls.n	800e76a <_vfiprintf_r+0x1a6>
 800e6ce:	b1b0      	cbz	r0, 800e6fe <_vfiprintf_r+0x13a>
 800e6d0:	9207      	str	r2, [sp, #28]
 800e6d2:	e014      	b.n	800e6fe <_vfiprintf_r+0x13a>
 800e6d4:	eba0 0308 	sub.w	r3, r0, r8
 800e6d8:	fa09 f303 	lsl.w	r3, r9, r3
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	9304      	str	r3, [sp, #16]
 800e6e0:	46a2      	mov	sl, r4
 800e6e2:	e7d2      	b.n	800e68a <_vfiprintf_r+0xc6>
 800e6e4:	9b03      	ldr	r3, [sp, #12]
 800e6e6:	1d19      	adds	r1, r3, #4
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	9103      	str	r1, [sp, #12]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	bfbb      	ittet	lt
 800e6f0:	425b      	neglt	r3, r3
 800e6f2:	f042 0202 	orrlt.w	r2, r2, #2
 800e6f6:	9307      	strge	r3, [sp, #28]
 800e6f8:	9307      	strlt	r3, [sp, #28]
 800e6fa:	bfb8      	it	lt
 800e6fc:	9204      	strlt	r2, [sp, #16]
 800e6fe:	7823      	ldrb	r3, [r4, #0]
 800e700:	2b2e      	cmp	r3, #46	; 0x2e
 800e702:	d10c      	bne.n	800e71e <_vfiprintf_r+0x15a>
 800e704:	7863      	ldrb	r3, [r4, #1]
 800e706:	2b2a      	cmp	r3, #42	; 0x2a
 800e708:	d134      	bne.n	800e774 <_vfiprintf_r+0x1b0>
 800e70a:	9b03      	ldr	r3, [sp, #12]
 800e70c:	1d1a      	adds	r2, r3, #4
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	9203      	str	r2, [sp, #12]
 800e712:	2b00      	cmp	r3, #0
 800e714:	bfb8      	it	lt
 800e716:	f04f 33ff 	movlt.w	r3, #4294967295
 800e71a:	3402      	adds	r4, #2
 800e71c:	9305      	str	r3, [sp, #20]
 800e71e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e7f4 <_vfiprintf_r+0x230>
 800e722:	7821      	ldrb	r1, [r4, #0]
 800e724:	2203      	movs	r2, #3
 800e726:	4650      	mov	r0, sl
 800e728:	f7f1 fdda 	bl	80002e0 <memchr>
 800e72c:	b138      	cbz	r0, 800e73e <_vfiprintf_r+0x17a>
 800e72e:	9b04      	ldr	r3, [sp, #16]
 800e730:	eba0 000a 	sub.w	r0, r0, sl
 800e734:	2240      	movs	r2, #64	; 0x40
 800e736:	4082      	lsls	r2, r0
 800e738:	4313      	orrs	r3, r2
 800e73a:	3401      	adds	r4, #1
 800e73c:	9304      	str	r3, [sp, #16]
 800e73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e742:	4829      	ldr	r0, [pc, #164]	; (800e7e8 <_vfiprintf_r+0x224>)
 800e744:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e748:	2206      	movs	r2, #6
 800e74a:	f7f1 fdc9 	bl	80002e0 <memchr>
 800e74e:	2800      	cmp	r0, #0
 800e750:	d03f      	beq.n	800e7d2 <_vfiprintf_r+0x20e>
 800e752:	4b26      	ldr	r3, [pc, #152]	; (800e7ec <_vfiprintf_r+0x228>)
 800e754:	bb1b      	cbnz	r3, 800e79e <_vfiprintf_r+0x1da>
 800e756:	9b03      	ldr	r3, [sp, #12]
 800e758:	3307      	adds	r3, #7
 800e75a:	f023 0307 	bic.w	r3, r3, #7
 800e75e:	3308      	adds	r3, #8
 800e760:	9303      	str	r3, [sp, #12]
 800e762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e764:	443b      	add	r3, r7
 800e766:	9309      	str	r3, [sp, #36]	; 0x24
 800e768:	e768      	b.n	800e63c <_vfiprintf_r+0x78>
 800e76a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e76e:	460c      	mov	r4, r1
 800e770:	2001      	movs	r0, #1
 800e772:	e7a6      	b.n	800e6c2 <_vfiprintf_r+0xfe>
 800e774:	2300      	movs	r3, #0
 800e776:	3401      	adds	r4, #1
 800e778:	9305      	str	r3, [sp, #20]
 800e77a:	4619      	mov	r1, r3
 800e77c:	f04f 0c0a 	mov.w	ip, #10
 800e780:	4620      	mov	r0, r4
 800e782:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e786:	3a30      	subs	r2, #48	; 0x30
 800e788:	2a09      	cmp	r2, #9
 800e78a:	d903      	bls.n	800e794 <_vfiprintf_r+0x1d0>
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d0c6      	beq.n	800e71e <_vfiprintf_r+0x15a>
 800e790:	9105      	str	r1, [sp, #20]
 800e792:	e7c4      	b.n	800e71e <_vfiprintf_r+0x15a>
 800e794:	fb0c 2101 	mla	r1, ip, r1, r2
 800e798:	4604      	mov	r4, r0
 800e79a:	2301      	movs	r3, #1
 800e79c:	e7f0      	b.n	800e780 <_vfiprintf_r+0x1bc>
 800e79e:	ab03      	add	r3, sp, #12
 800e7a0:	9300      	str	r3, [sp, #0]
 800e7a2:	462a      	mov	r2, r5
 800e7a4:	4b12      	ldr	r3, [pc, #72]	; (800e7f0 <_vfiprintf_r+0x22c>)
 800e7a6:	a904      	add	r1, sp, #16
 800e7a8:	4630      	mov	r0, r6
 800e7aa:	f7fd fdd9 	bl	800c360 <_printf_float>
 800e7ae:	4607      	mov	r7, r0
 800e7b0:	1c78      	adds	r0, r7, #1
 800e7b2:	d1d6      	bne.n	800e762 <_vfiprintf_r+0x19e>
 800e7b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7b6:	07d9      	lsls	r1, r3, #31
 800e7b8:	d405      	bmi.n	800e7c6 <_vfiprintf_r+0x202>
 800e7ba:	89ab      	ldrh	r3, [r5, #12]
 800e7bc:	059a      	lsls	r2, r3, #22
 800e7be:	d402      	bmi.n	800e7c6 <_vfiprintf_r+0x202>
 800e7c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7c2:	f7fe fc53 	bl	800d06c <__retarget_lock_release_recursive>
 800e7c6:	89ab      	ldrh	r3, [r5, #12]
 800e7c8:	065b      	lsls	r3, r3, #25
 800e7ca:	f53f af1d 	bmi.w	800e608 <_vfiprintf_r+0x44>
 800e7ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7d0:	e71c      	b.n	800e60c <_vfiprintf_r+0x48>
 800e7d2:	ab03      	add	r3, sp, #12
 800e7d4:	9300      	str	r3, [sp, #0]
 800e7d6:	462a      	mov	r2, r5
 800e7d8:	4b05      	ldr	r3, [pc, #20]	; (800e7f0 <_vfiprintf_r+0x22c>)
 800e7da:	a904      	add	r1, sp, #16
 800e7dc:	4630      	mov	r0, r6
 800e7de:	f7fe f847 	bl	800c870 <_printf_i>
 800e7e2:	e7e4      	b.n	800e7ae <_vfiprintf_r+0x1ea>
 800e7e4:	0801002c 	.word	0x0801002c
 800e7e8:	08010036 	.word	0x08010036
 800e7ec:	0800c361 	.word	0x0800c361
 800e7f0:	0800e59f 	.word	0x0800e59f
 800e7f4:	08010032 	.word	0x08010032

0800e7f8 <__sflush_r>:
 800e7f8:	898a      	ldrh	r2, [r1, #12]
 800e7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7fe:	4605      	mov	r5, r0
 800e800:	0710      	lsls	r0, r2, #28
 800e802:	460c      	mov	r4, r1
 800e804:	d458      	bmi.n	800e8b8 <__sflush_r+0xc0>
 800e806:	684b      	ldr	r3, [r1, #4]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	dc05      	bgt.n	800e818 <__sflush_r+0x20>
 800e80c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e80e:	2b00      	cmp	r3, #0
 800e810:	dc02      	bgt.n	800e818 <__sflush_r+0x20>
 800e812:	2000      	movs	r0, #0
 800e814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e81a:	2e00      	cmp	r6, #0
 800e81c:	d0f9      	beq.n	800e812 <__sflush_r+0x1a>
 800e81e:	2300      	movs	r3, #0
 800e820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e824:	682f      	ldr	r7, [r5, #0]
 800e826:	6a21      	ldr	r1, [r4, #32]
 800e828:	602b      	str	r3, [r5, #0]
 800e82a:	d032      	beq.n	800e892 <__sflush_r+0x9a>
 800e82c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e82e:	89a3      	ldrh	r3, [r4, #12]
 800e830:	075a      	lsls	r2, r3, #29
 800e832:	d505      	bpl.n	800e840 <__sflush_r+0x48>
 800e834:	6863      	ldr	r3, [r4, #4]
 800e836:	1ac0      	subs	r0, r0, r3
 800e838:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e83a:	b10b      	cbz	r3, 800e840 <__sflush_r+0x48>
 800e83c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e83e:	1ac0      	subs	r0, r0, r3
 800e840:	2300      	movs	r3, #0
 800e842:	4602      	mov	r2, r0
 800e844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e846:	6a21      	ldr	r1, [r4, #32]
 800e848:	4628      	mov	r0, r5
 800e84a:	47b0      	blx	r6
 800e84c:	1c43      	adds	r3, r0, #1
 800e84e:	89a3      	ldrh	r3, [r4, #12]
 800e850:	d106      	bne.n	800e860 <__sflush_r+0x68>
 800e852:	6829      	ldr	r1, [r5, #0]
 800e854:	291d      	cmp	r1, #29
 800e856:	d82b      	bhi.n	800e8b0 <__sflush_r+0xb8>
 800e858:	4a29      	ldr	r2, [pc, #164]	; (800e900 <__sflush_r+0x108>)
 800e85a:	410a      	asrs	r2, r1
 800e85c:	07d6      	lsls	r6, r2, #31
 800e85e:	d427      	bmi.n	800e8b0 <__sflush_r+0xb8>
 800e860:	2200      	movs	r2, #0
 800e862:	6062      	str	r2, [r4, #4]
 800e864:	04d9      	lsls	r1, r3, #19
 800e866:	6922      	ldr	r2, [r4, #16]
 800e868:	6022      	str	r2, [r4, #0]
 800e86a:	d504      	bpl.n	800e876 <__sflush_r+0x7e>
 800e86c:	1c42      	adds	r2, r0, #1
 800e86e:	d101      	bne.n	800e874 <__sflush_r+0x7c>
 800e870:	682b      	ldr	r3, [r5, #0]
 800e872:	b903      	cbnz	r3, 800e876 <__sflush_r+0x7e>
 800e874:	6560      	str	r0, [r4, #84]	; 0x54
 800e876:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e878:	602f      	str	r7, [r5, #0]
 800e87a:	2900      	cmp	r1, #0
 800e87c:	d0c9      	beq.n	800e812 <__sflush_r+0x1a>
 800e87e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e882:	4299      	cmp	r1, r3
 800e884:	d002      	beq.n	800e88c <__sflush_r+0x94>
 800e886:	4628      	mov	r0, r5
 800e888:	f7ff f9f6 	bl	800dc78 <_free_r>
 800e88c:	2000      	movs	r0, #0
 800e88e:	6360      	str	r0, [r4, #52]	; 0x34
 800e890:	e7c0      	b.n	800e814 <__sflush_r+0x1c>
 800e892:	2301      	movs	r3, #1
 800e894:	4628      	mov	r0, r5
 800e896:	47b0      	blx	r6
 800e898:	1c41      	adds	r1, r0, #1
 800e89a:	d1c8      	bne.n	800e82e <__sflush_r+0x36>
 800e89c:	682b      	ldr	r3, [r5, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d0c5      	beq.n	800e82e <__sflush_r+0x36>
 800e8a2:	2b1d      	cmp	r3, #29
 800e8a4:	d001      	beq.n	800e8aa <__sflush_r+0xb2>
 800e8a6:	2b16      	cmp	r3, #22
 800e8a8:	d101      	bne.n	800e8ae <__sflush_r+0xb6>
 800e8aa:	602f      	str	r7, [r5, #0]
 800e8ac:	e7b1      	b.n	800e812 <__sflush_r+0x1a>
 800e8ae:	89a3      	ldrh	r3, [r4, #12]
 800e8b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8b4:	81a3      	strh	r3, [r4, #12]
 800e8b6:	e7ad      	b.n	800e814 <__sflush_r+0x1c>
 800e8b8:	690f      	ldr	r7, [r1, #16]
 800e8ba:	2f00      	cmp	r7, #0
 800e8bc:	d0a9      	beq.n	800e812 <__sflush_r+0x1a>
 800e8be:	0793      	lsls	r3, r2, #30
 800e8c0:	680e      	ldr	r6, [r1, #0]
 800e8c2:	bf08      	it	eq
 800e8c4:	694b      	ldreq	r3, [r1, #20]
 800e8c6:	600f      	str	r7, [r1, #0]
 800e8c8:	bf18      	it	ne
 800e8ca:	2300      	movne	r3, #0
 800e8cc:	eba6 0807 	sub.w	r8, r6, r7
 800e8d0:	608b      	str	r3, [r1, #8]
 800e8d2:	f1b8 0f00 	cmp.w	r8, #0
 800e8d6:	dd9c      	ble.n	800e812 <__sflush_r+0x1a>
 800e8d8:	6a21      	ldr	r1, [r4, #32]
 800e8da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e8dc:	4643      	mov	r3, r8
 800e8de:	463a      	mov	r2, r7
 800e8e0:	4628      	mov	r0, r5
 800e8e2:	47b0      	blx	r6
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	dc06      	bgt.n	800e8f6 <__sflush_r+0xfe>
 800e8e8:	89a3      	ldrh	r3, [r4, #12]
 800e8ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8ee:	81a3      	strh	r3, [r4, #12]
 800e8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8f4:	e78e      	b.n	800e814 <__sflush_r+0x1c>
 800e8f6:	4407      	add	r7, r0
 800e8f8:	eba8 0800 	sub.w	r8, r8, r0
 800e8fc:	e7e9      	b.n	800e8d2 <__sflush_r+0xda>
 800e8fe:	bf00      	nop
 800e900:	dfbffffe 	.word	0xdfbffffe

0800e904 <_fflush_r>:
 800e904:	b538      	push	{r3, r4, r5, lr}
 800e906:	690b      	ldr	r3, [r1, #16]
 800e908:	4605      	mov	r5, r0
 800e90a:	460c      	mov	r4, r1
 800e90c:	b913      	cbnz	r3, 800e914 <_fflush_r+0x10>
 800e90e:	2500      	movs	r5, #0
 800e910:	4628      	mov	r0, r5
 800e912:	bd38      	pop	{r3, r4, r5, pc}
 800e914:	b118      	cbz	r0, 800e91e <_fflush_r+0x1a>
 800e916:	6a03      	ldr	r3, [r0, #32]
 800e918:	b90b      	cbnz	r3, 800e91e <_fflush_r+0x1a>
 800e91a:	f7fe f957 	bl	800cbcc <__sinit>
 800e91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d0f3      	beq.n	800e90e <_fflush_r+0xa>
 800e926:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e928:	07d0      	lsls	r0, r2, #31
 800e92a:	d404      	bmi.n	800e936 <_fflush_r+0x32>
 800e92c:	0599      	lsls	r1, r3, #22
 800e92e:	d402      	bmi.n	800e936 <_fflush_r+0x32>
 800e930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e932:	f7fe fb9a 	bl	800d06a <__retarget_lock_acquire_recursive>
 800e936:	4628      	mov	r0, r5
 800e938:	4621      	mov	r1, r4
 800e93a:	f7ff ff5d 	bl	800e7f8 <__sflush_r>
 800e93e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e940:	07da      	lsls	r2, r3, #31
 800e942:	4605      	mov	r5, r0
 800e944:	d4e4      	bmi.n	800e910 <_fflush_r+0xc>
 800e946:	89a3      	ldrh	r3, [r4, #12]
 800e948:	059b      	lsls	r3, r3, #22
 800e94a:	d4e1      	bmi.n	800e910 <_fflush_r+0xc>
 800e94c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e94e:	f7fe fb8d 	bl	800d06c <__retarget_lock_release_recursive>
 800e952:	e7dd      	b.n	800e910 <_fflush_r+0xc>

0800e954 <__swhatbuf_r>:
 800e954:	b570      	push	{r4, r5, r6, lr}
 800e956:	460c      	mov	r4, r1
 800e958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e95c:	2900      	cmp	r1, #0
 800e95e:	b096      	sub	sp, #88	; 0x58
 800e960:	4615      	mov	r5, r2
 800e962:	461e      	mov	r6, r3
 800e964:	da0d      	bge.n	800e982 <__swhatbuf_r+0x2e>
 800e966:	89a3      	ldrh	r3, [r4, #12]
 800e968:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e96c:	f04f 0100 	mov.w	r1, #0
 800e970:	bf0c      	ite	eq
 800e972:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e976:	2340      	movne	r3, #64	; 0x40
 800e978:	2000      	movs	r0, #0
 800e97a:	6031      	str	r1, [r6, #0]
 800e97c:	602b      	str	r3, [r5, #0]
 800e97e:	b016      	add	sp, #88	; 0x58
 800e980:	bd70      	pop	{r4, r5, r6, pc}
 800e982:	466a      	mov	r2, sp
 800e984:	f000 f848 	bl	800ea18 <_fstat_r>
 800e988:	2800      	cmp	r0, #0
 800e98a:	dbec      	blt.n	800e966 <__swhatbuf_r+0x12>
 800e98c:	9901      	ldr	r1, [sp, #4]
 800e98e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e992:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e996:	4259      	negs	r1, r3
 800e998:	4159      	adcs	r1, r3
 800e99a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e99e:	e7eb      	b.n	800e978 <__swhatbuf_r+0x24>

0800e9a0 <__smakebuf_r>:
 800e9a0:	898b      	ldrh	r3, [r1, #12]
 800e9a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e9a4:	079d      	lsls	r5, r3, #30
 800e9a6:	4606      	mov	r6, r0
 800e9a8:	460c      	mov	r4, r1
 800e9aa:	d507      	bpl.n	800e9bc <__smakebuf_r+0x1c>
 800e9ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e9b0:	6023      	str	r3, [r4, #0]
 800e9b2:	6123      	str	r3, [r4, #16]
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	6163      	str	r3, [r4, #20]
 800e9b8:	b002      	add	sp, #8
 800e9ba:	bd70      	pop	{r4, r5, r6, pc}
 800e9bc:	ab01      	add	r3, sp, #4
 800e9be:	466a      	mov	r2, sp
 800e9c0:	f7ff ffc8 	bl	800e954 <__swhatbuf_r>
 800e9c4:	9900      	ldr	r1, [sp, #0]
 800e9c6:	4605      	mov	r5, r0
 800e9c8:	4630      	mov	r0, r6
 800e9ca:	f7ff f9c9 	bl	800dd60 <_malloc_r>
 800e9ce:	b948      	cbnz	r0, 800e9e4 <__smakebuf_r+0x44>
 800e9d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9d4:	059a      	lsls	r2, r3, #22
 800e9d6:	d4ef      	bmi.n	800e9b8 <__smakebuf_r+0x18>
 800e9d8:	f023 0303 	bic.w	r3, r3, #3
 800e9dc:	f043 0302 	orr.w	r3, r3, #2
 800e9e0:	81a3      	strh	r3, [r4, #12]
 800e9e2:	e7e3      	b.n	800e9ac <__smakebuf_r+0xc>
 800e9e4:	89a3      	ldrh	r3, [r4, #12]
 800e9e6:	6020      	str	r0, [r4, #0]
 800e9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9ec:	81a3      	strh	r3, [r4, #12]
 800e9ee:	9b00      	ldr	r3, [sp, #0]
 800e9f0:	6163      	str	r3, [r4, #20]
 800e9f2:	9b01      	ldr	r3, [sp, #4]
 800e9f4:	6120      	str	r0, [r4, #16]
 800e9f6:	b15b      	cbz	r3, 800ea10 <__smakebuf_r+0x70>
 800e9f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9fc:	4630      	mov	r0, r6
 800e9fe:	f000 f81d 	bl	800ea3c <_isatty_r>
 800ea02:	b128      	cbz	r0, 800ea10 <__smakebuf_r+0x70>
 800ea04:	89a3      	ldrh	r3, [r4, #12]
 800ea06:	f023 0303 	bic.w	r3, r3, #3
 800ea0a:	f043 0301 	orr.w	r3, r3, #1
 800ea0e:	81a3      	strh	r3, [r4, #12]
 800ea10:	89a3      	ldrh	r3, [r4, #12]
 800ea12:	431d      	orrs	r5, r3
 800ea14:	81a5      	strh	r5, [r4, #12]
 800ea16:	e7cf      	b.n	800e9b8 <__smakebuf_r+0x18>

0800ea18 <_fstat_r>:
 800ea18:	b538      	push	{r3, r4, r5, lr}
 800ea1a:	4d07      	ldr	r5, [pc, #28]	; (800ea38 <_fstat_r+0x20>)
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	4604      	mov	r4, r0
 800ea20:	4608      	mov	r0, r1
 800ea22:	4611      	mov	r1, r2
 800ea24:	602b      	str	r3, [r5, #0]
 800ea26:	f7f3 ff0f 	bl	8002848 <_fstat>
 800ea2a:	1c43      	adds	r3, r0, #1
 800ea2c:	d102      	bne.n	800ea34 <_fstat_r+0x1c>
 800ea2e:	682b      	ldr	r3, [r5, #0]
 800ea30:	b103      	cbz	r3, 800ea34 <_fstat_r+0x1c>
 800ea32:	6023      	str	r3, [r4, #0]
 800ea34:	bd38      	pop	{r3, r4, r5, pc}
 800ea36:	bf00      	nop
 800ea38:	2400505c 	.word	0x2400505c

0800ea3c <_isatty_r>:
 800ea3c:	b538      	push	{r3, r4, r5, lr}
 800ea3e:	4d06      	ldr	r5, [pc, #24]	; (800ea58 <_isatty_r+0x1c>)
 800ea40:	2300      	movs	r3, #0
 800ea42:	4604      	mov	r4, r0
 800ea44:	4608      	mov	r0, r1
 800ea46:	602b      	str	r3, [r5, #0]
 800ea48:	f7f3 ff0e 	bl	8002868 <_isatty>
 800ea4c:	1c43      	adds	r3, r0, #1
 800ea4e:	d102      	bne.n	800ea56 <_isatty_r+0x1a>
 800ea50:	682b      	ldr	r3, [r5, #0]
 800ea52:	b103      	cbz	r3, 800ea56 <_isatty_r+0x1a>
 800ea54:	6023      	str	r3, [r4, #0]
 800ea56:	bd38      	pop	{r3, r4, r5, pc}
 800ea58:	2400505c 	.word	0x2400505c

0800ea5c <_sbrk_r>:
 800ea5c:	b538      	push	{r3, r4, r5, lr}
 800ea5e:	4d06      	ldr	r5, [pc, #24]	; (800ea78 <_sbrk_r+0x1c>)
 800ea60:	2300      	movs	r3, #0
 800ea62:	4604      	mov	r4, r0
 800ea64:	4608      	mov	r0, r1
 800ea66:	602b      	str	r3, [r5, #0]
 800ea68:	f7f3 ff16 	bl	8002898 <_sbrk>
 800ea6c:	1c43      	adds	r3, r0, #1
 800ea6e:	d102      	bne.n	800ea76 <_sbrk_r+0x1a>
 800ea70:	682b      	ldr	r3, [r5, #0]
 800ea72:	b103      	cbz	r3, 800ea76 <_sbrk_r+0x1a>
 800ea74:	6023      	str	r3, [r4, #0]
 800ea76:	bd38      	pop	{r3, r4, r5, pc}
 800ea78:	2400505c 	.word	0x2400505c

0800ea7c <__assert_func>:
 800ea7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea7e:	4614      	mov	r4, r2
 800ea80:	461a      	mov	r2, r3
 800ea82:	4b09      	ldr	r3, [pc, #36]	; (800eaa8 <__assert_func+0x2c>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4605      	mov	r5, r0
 800ea88:	68d8      	ldr	r0, [r3, #12]
 800ea8a:	b14c      	cbz	r4, 800eaa0 <__assert_func+0x24>
 800ea8c:	4b07      	ldr	r3, [pc, #28]	; (800eaac <__assert_func+0x30>)
 800ea8e:	9100      	str	r1, [sp, #0]
 800ea90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea94:	4906      	ldr	r1, [pc, #24]	; (800eab0 <__assert_func+0x34>)
 800ea96:	462b      	mov	r3, r5
 800ea98:	f000 f844 	bl	800eb24 <fiprintf>
 800ea9c:	f000 f854 	bl	800eb48 <abort>
 800eaa0:	4b04      	ldr	r3, [pc, #16]	; (800eab4 <__assert_func+0x38>)
 800eaa2:	461c      	mov	r4, r3
 800eaa4:	e7f3      	b.n	800ea8e <__assert_func+0x12>
 800eaa6:	bf00      	nop
 800eaa8:	2400006c 	.word	0x2400006c
 800eaac:	08010047 	.word	0x08010047
 800eab0:	08010054 	.word	0x08010054
 800eab4:	08010082 	.word	0x08010082

0800eab8 <_calloc_r>:
 800eab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eaba:	fba1 2402 	umull	r2, r4, r1, r2
 800eabe:	b94c      	cbnz	r4, 800ead4 <_calloc_r+0x1c>
 800eac0:	4611      	mov	r1, r2
 800eac2:	9201      	str	r2, [sp, #4]
 800eac4:	f7ff f94c 	bl	800dd60 <_malloc_r>
 800eac8:	9a01      	ldr	r2, [sp, #4]
 800eaca:	4605      	mov	r5, r0
 800eacc:	b930      	cbnz	r0, 800eadc <_calloc_r+0x24>
 800eace:	4628      	mov	r0, r5
 800ead0:	b003      	add	sp, #12
 800ead2:	bd30      	pop	{r4, r5, pc}
 800ead4:	220c      	movs	r2, #12
 800ead6:	6002      	str	r2, [r0, #0]
 800ead8:	2500      	movs	r5, #0
 800eada:	e7f8      	b.n	800eace <_calloc_r+0x16>
 800eadc:	4621      	mov	r1, r4
 800eade:	f7fe f9f1 	bl	800cec4 <memset>
 800eae2:	e7f4      	b.n	800eace <_calloc_r+0x16>

0800eae4 <__ascii_mbtowc>:
 800eae4:	b082      	sub	sp, #8
 800eae6:	b901      	cbnz	r1, 800eaea <__ascii_mbtowc+0x6>
 800eae8:	a901      	add	r1, sp, #4
 800eaea:	b142      	cbz	r2, 800eafe <__ascii_mbtowc+0x1a>
 800eaec:	b14b      	cbz	r3, 800eb02 <__ascii_mbtowc+0x1e>
 800eaee:	7813      	ldrb	r3, [r2, #0]
 800eaf0:	600b      	str	r3, [r1, #0]
 800eaf2:	7812      	ldrb	r2, [r2, #0]
 800eaf4:	1e10      	subs	r0, r2, #0
 800eaf6:	bf18      	it	ne
 800eaf8:	2001      	movne	r0, #1
 800eafa:	b002      	add	sp, #8
 800eafc:	4770      	bx	lr
 800eafe:	4610      	mov	r0, r2
 800eb00:	e7fb      	b.n	800eafa <__ascii_mbtowc+0x16>
 800eb02:	f06f 0001 	mvn.w	r0, #1
 800eb06:	e7f8      	b.n	800eafa <__ascii_mbtowc+0x16>

0800eb08 <__ascii_wctomb>:
 800eb08:	b149      	cbz	r1, 800eb1e <__ascii_wctomb+0x16>
 800eb0a:	2aff      	cmp	r2, #255	; 0xff
 800eb0c:	bf85      	ittet	hi
 800eb0e:	238a      	movhi	r3, #138	; 0x8a
 800eb10:	6003      	strhi	r3, [r0, #0]
 800eb12:	700a      	strbls	r2, [r1, #0]
 800eb14:	f04f 30ff 	movhi.w	r0, #4294967295
 800eb18:	bf98      	it	ls
 800eb1a:	2001      	movls	r0, #1
 800eb1c:	4770      	bx	lr
 800eb1e:	4608      	mov	r0, r1
 800eb20:	4770      	bx	lr
	...

0800eb24 <fiprintf>:
 800eb24:	b40e      	push	{r1, r2, r3}
 800eb26:	b503      	push	{r0, r1, lr}
 800eb28:	4601      	mov	r1, r0
 800eb2a:	ab03      	add	r3, sp, #12
 800eb2c:	4805      	ldr	r0, [pc, #20]	; (800eb44 <fiprintf+0x20>)
 800eb2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb32:	6800      	ldr	r0, [r0, #0]
 800eb34:	9301      	str	r3, [sp, #4]
 800eb36:	f7ff fd45 	bl	800e5c4 <_vfiprintf_r>
 800eb3a:	b002      	add	sp, #8
 800eb3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb40:	b003      	add	sp, #12
 800eb42:	4770      	bx	lr
 800eb44:	2400006c 	.word	0x2400006c

0800eb48 <abort>:
 800eb48:	b508      	push	{r3, lr}
 800eb4a:	2006      	movs	r0, #6
 800eb4c:	f000 f82c 	bl	800eba8 <raise>
 800eb50:	2001      	movs	r0, #1
 800eb52:	f7f3 fe2a 	bl	80027aa <_exit>

0800eb56 <_raise_r>:
 800eb56:	291f      	cmp	r1, #31
 800eb58:	b538      	push	{r3, r4, r5, lr}
 800eb5a:	4604      	mov	r4, r0
 800eb5c:	460d      	mov	r5, r1
 800eb5e:	d904      	bls.n	800eb6a <_raise_r+0x14>
 800eb60:	2316      	movs	r3, #22
 800eb62:	6003      	str	r3, [r0, #0]
 800eb64:	f04f 30ff 	mov.w	r0, #4294967295
 800eb68:	bd38      	pop	{r3, r4, r5, pc}
 800eb6a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800eb6c:	b112      	cbz	r2, 800eb74 <_raise_r+0x1e>
 800eb6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb72:	b94b      	cbnz	r3, 800eb88 <_raise_r+0x32>
 800eb74:	4620      	mov	r0, r4
 800eb76:	f000 f831 	bl	800ebdc <_getpid_r>
 800eb7a:	462a      	mov	r2, r5
 800eb7c:	4601      	mov	r1, r0
 800eb7e:	4620      	mov	r0, r4
 800eb80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb84:	f000 b818 	b.w	800ebb8 <_kill_r>
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d00a      	beq.n	800eba2 <_raise_r+0x4c>
 800eb8c:	1c59      	adds	r1, r3, #1
 800eb8e:	d103      	bne.n	800eb98 <_raise_r+0x42>
 800eb90:	2316      	movs	r3, #22
 800eb92:	6003      	str	r3, [r0, #0]
 800eb94:	2001      	movs	r0, #1
 800eb96:	e7e7      	b.n	800eb68 <_raise_r+0x12>
 800eb98:	2400      	movs	r4, #0
 800eb9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb9e:	4628      	mov	r0, r5
 800eba0:	4798      	blx	r3
 800eba2:	2000      	movs	r0, #0
 800eba4:	e7e0      	b.n	800eb68 <_raise_r+0x12>
	...

0800eba8 <raise>:
 800eba8:	4b02      	ldr	r3, [pc, #8]	; (800ebb4 <raise+0xc>)
 800ebaa:	4601      	mov	r1, r0
 800ebac:	6818      	ldr	r0, [r3, #0]
 800ebae:	f7ff bfd2 	b.w	800eb56 <_raise_r>
 800ebb2:	bf00      	nop
 800ebb4:	2400006c 	.word	0x2400006c

0800ebb8 <_kill_r>:
 800ebb8:	b538      	push	{r3, r4, r5, lr}
 800ebba:	4d07      	ldr	r5, [pc, #28]	; (800ebd8 <_kill_r+0x20>)
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	4604      	mov	r4, r0
 800ebc0:	4608      	mov	r0, r1
 800ebc2:	4611      	mov	r1, r2
 800ebc4:	602b      	str	r3, [r5, #0]
 800ebc6:	f7f3 fde0 	bl	800278a <_kill>
 800ebca:	1c43      	adds	r3, r0, #1
 800ebcc:	d102      	bne.n	800ebd4 <_kill_r+0x1c>
 800ebce:	682b      	ldr	r3, [r5, #0]
 800ebd0:	b103      	cbz	r3, 800ebd4 <_kill_r+0x1c>
 800ebd2:	6023      	str	r3, [r4, #0]
 800ebd4:	bd38      	pop	{r3, r4, r5, pc}
 800ebd6:	bf00      	nop
 800ebd8:	2400505c 	.word	0x2400505c

0800ebdc <_getpid_r>:
 800ebdc:	f7f3 bdcd 	b.w	800277a <_getpid>

0800ebe0 <atan2>:
 800ebe0:	f000 b95e 	b.w	800eea0 <__ieee754_atan2>
 800ebe4:	0000      	movs	r0, r0
	...

0800ebe8 <cos>:
 800ebe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ebea:	eeb0 7b40 	vmov.f64	d7, d0
 800ebee:	ee17 3a90 	vmov	r3, s15
 800ebf2:	4a21      	ldr	r2, [pc, #132]	; (800ec78 <cos+0x90>)
 800ebf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	dc06      	bgt.n	800ec0a <cos+0x22>
 800ebfc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800ec70 <cos+0x88>
 800ec00:	b005      	add	sp, #20
 800ec02:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec06:	f000 b887 	b.w	800ed18 <__kernel_cos>
 800ec0a:	4a1c      	ldr	r2, [pc, #112]	; (800ec7c <cos+0x94>)
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	dd04      	ble.n	800ec1a <cos+0x32>
 800ec10:	ee30 0b40 	vsub.f64	d0, d0, d0
 800ec14:	b005      	add	sp, #20
 800ec16:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec1a:	4668      	mov	r0, sp
 800ec1c:	f000 fa04 	bl	800f028 <__ieee754_rem_pio2>
 800ec20:	f000 0003 	and.w	r0, r0, #3
 800ec24:	2801      	cmp	r0, #1
 800ec26:	d009      	beq.n	800ec3c <cos+0x54>
 800ec28:	2802      	cmp	r0, #2
 800ec2a:	d010      	beq.n	800ec4e <cos+0x66>
 800ec2c:	b9b0      	cbnz	r0, 800ec5c <cos+0x74>
 800ec2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec32:	ed9d 0b00 	vldr	d0, [sp]
 800ec36:	f000 f86f 	bl	800ed18 <__kernel_cos>
 800ec3a:	e7eb      	b.n	800ec14 <cos+0x2c>
 800ec3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec40:	ed9d 0b00 	vldr	d0, [sp]
 800ec44:	f000 f8d4 	bl	800edf0 <__kernel_sin>
 800ec48:	eeb1 0b40 	vneg.f64	d0, d0
 800ec4c:	e7e2      	b.n	800ec14 <cos+0x2c>
 800ec4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec52:	ed9d 0b00 	vldr	d0, [sp]
 800ec56:	f000 f85f 	bl	800ed18 <__kernel_cos>
 800ec5a:	e7f5      	b.n	800ec48 <cos+0x60>
 800ec5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec60:	ed9d 0b00 	vldr	d0, [sp]
 800ec64:	2001      	movs	r0, #1
 800ec66:	f000 f8c3 	bl	800edf0 <__kernel_sin>
 800ec6a:	e7d3      	b.n	800ec14 <cos+0x2c>
 800ec6c:	f3af 8000 	nop.w
	...
 800ec78:	3fe921fb 	.word	0x3fe921fb
 800ec7c:	7fefffff 	.word	0x7fefffff

0800ec80 <sin>:
 800ec80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec82:	eeb0 7b40 	vmov.f64	d7, d0
 800ec86:	ee17 3a90 	vmov	r3, s15
 800ec8a:	4a21      	ldr	r2, [pc, #132]	; (800ed10 <sin+0x90>)
 800ec8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ec90:	4293      	cmp	r3, r2
 800ec92:	dc07      	bgt.n	800eca4 <sin+0x24>
 800ec94:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800ed08 <sin+0x88>
 800ec98:	2000      	movs	r0, #0
 800ec9a:	b005      	add	sp, #20
 800ec9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eca0:	f000 b8a6 	b.w	800edf0 <__kernel_sin>
 800eca4:	4a1b      	ldr	r2, [pc, #108]	; (800ed14 <sin+0x94>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	dd04      	ble.n	800ecb4 <sin+0x34>
 800ecaa:	ee30 0b40 	vsub.f64	d0, d0, d0
 800ecae:	b005      	add	sp, #20
 800ecb0:	f85d fb04 	ldr.w	pc, [sp], #4
 800ecb4:	4668      	mov	r0, sp
 800ecb6:	f000 f9b7 	bl	800f028 <__ieee754_rem_pio2>
 800ecba:	f000 0003 	and.w	r0, r0, #3
 800ecbe:	2801      	cmp	r0, #1
 800ecc0:	d00a      	beq.n	800ecd8 <sin+0x58>
 800ecc2:	2802      	cmp	r0, #2
 800ecc4:	d00f      	beq.n	800ece6 <sin+0x66>
 800ecc6:	b9c0      	cbnz	r0, 800ecfa <sin+0x7a>
 800ecc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eccc:	ed9d 0b00 	vldr	d0, [sp]
 800ecd0:	2001      	movs	r0, #1
 800ecd2:	f000 f88d 	bl	800edf0 <__kernel_sin>
 800ecd6:	e7ea      	b.n	800ecae <sin+0x2e>
 800ecd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ecdc:	ed9d 0b00 	vldr	d0, [sp]
 800ece0:	f000 f81a 	bl	800ed18 <__kernel_cos>
 800ece4:	e7e3      	b.n	800ecae <sin+0x2e>
 800ece6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ecea:	ed9d 0b00 	vldr	d0, [sp]
 800ecee:	2001      	movs	r0, #1
 800ecf0:	f000 f87e 	bl	800edf0 <__kernel_sin>
 800ecf4:	eeb1 0b40 	vneg.f64	d0, d0
 800ecf8:	e7d9      	b.n	800ecae <sin+0x2e>
 800ecfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ecfe:	ed9d 0b00 	vldr	d0, [sp]
 800ed02:	f000 f809 	bl	800ed18 <__kernel_cos>
 800ed06:	e7f5      	b.n	800ecf4 <sin+0x74>
	...
 800ed10:	3fe921fb 	.word	0x3fe921fb
 800ed14:	7fefffff 	.word	0x7fefffff

0800ed18 <__kernel_cos>:
 800ed18:	ee10 1a90 	vmov	r1, s1
 800ed1c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ed20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ed24:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800ed28:	da05      	bge.n	800ed36 <__kernel_cos+0x1e>
 800ed2a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ed2e:	ee17 3a90 	vmov	r3, s15
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d03d      	beq.n	800edb2 <__kernel_cos+0x9a>
 800ed36:	ee20 5b00 	vmul.f64	d5, d0, d0
 800ed3a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800ed3e:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 800edb8 <__kernel_cos+0xa0>
 800ed42:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800edc0 <__kernel_cos+0xa8>
 800ed46:	eea5 4b07 	vfma.f64	d4, d5, d7
 800ed4a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800edc8 <__kernel_cos+0xb0>
 800ed4e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ed52:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800edd0 <__kernel_cos+0xb8>
 800ed56:	eea7 4b05 	vfma.f64	d4, d7, d5
 800ed5a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800edd8 <__kernel_cos+0xc0>
 800ed5e:	4b22      	ldr	r3, [pc, #136]	; (800ede8 <__kernel_cos+0xd0>)
 800ed60:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ed64:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 800ede0 <__kernel_cos+0xc8>
 800ed68:	4299      	cmp	r1, r3
 800ed6a:	eea7 4b05 	vfma.f64	d4, d7, d5
 800ed6e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ed72:	ee24 4b05 	vmul.f64	d4, d4, d5
 800ed76:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ed7a:	eea5 1b04 	vfma.f64	d1, d5, d4
 800ed7e:	dc04      	bgt.n	800ed8a <__kernel_cos+0x72>
 800ed80:	ee37 7b41 	vsub.f64	d7, d7, d1
 800ed84:	ee36 0b47 	vsub.f64	d0, d6, d7
 800ed88:	4770      	bx	lr
 800ed8a:	4b18      	ldr	r3, [pc, #96]	; (800edec <__kernel_cos+0xd4>)
 800ed8c:	4299      	cmp	r1, r3
 800ed8e:	dc0d      	bgt.n	800edac <__kernel_cos+0x94>
 800ed90:	2200      	movs	r2, #0
 800ed92:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800ed96:	ec43 2b15 	vmov	d5, r2, r3
 800ed9a:	ee36 0b45 	vsub.f64	d0, d6, d5
 800ed9e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800eda2:	ee37 7b41 	vsub.f64	d7, d7, d1
 800eda6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800edaa:	4770      	bx	lr
 800edac:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800edb0:	e7f3      	b.n	800ed9a <__kernel_cos+0x82>
 800edb2:	eeb0 0b46 	vmov.f64	d0, d6
 800edb6:	4770      	bx	lr
 800edb8:	be8838d4 	.word	0xbe8838d4
 800edbc:	bda8fae9 	.word	0xbda8fae9
 800edc0:	bdb4b1c4 	.word	0xbdb4b1c4
 800edc4:	3e21ee9e 	.word	0x3e21ee9e
 800edc8:	809c52ad 	.word	0x809c52ad
 800edcc:	be927e4f 	.word	0xbe927e4f
 800edd0:	19cb1590 	.word	0x19cb1590
 800edd4:	3efa01a0 	.word	0x3efa01a0
 800edd8:	16c15177 	.word	0x16c15177
 800eddc:	bf56c16c 	.word	0xbf56c16c
 800ede0:	5555554c 	.word	0x5555554c
 800ede4:	3fa55555 	.word	0x3fa55555
 800ede8:	3fd33332 	.word	0x3fd33332
 800edec:	3fe90000 	.word	0x3fe90000

0800edf0 <__kernel_sin>:
 800edf0:	ee10 3a90 	vmov	r3, s1
 800edf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800edf8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800edfc:	da04      	bge.n	800ee08 <__kernel_sin+0x18>
 800edfe:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ee02:	ee17 3a90 	vmov	r3, s15
 800ee06:	b35b      	cbz	r3, 800ee60 <__kernel_sin+0x70>
 800ee08:	ee20 6b00 	vmul.f64	d6, d0, d0
 800ee0c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800ee10:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800ee68 <__kernel_sin+0x78>
 800ee14:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ee70 <__kernel_sin+0x80>
 800ee18:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ee1c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ee78 <__kernel_sin+0x88>
 800ee20:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ee24:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ee80 <__kernel_sin+0x90>
 800ee28:	eea7 4b06 	vfma.f64	d4, d7, d6
 800ee2c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ee88 <__kernel_sin+0x98>
 800ee30:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ee34:	b930      	cbnz	r0, 800ee44 <__kernel_sin+0x54>
 800ee36:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ee90 <__kernel_sin+0xa0>
 800ee3a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ee3e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800ee42:	4770      	bx	lr
 800ee44:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800ee48:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ee4c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800ee50:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800ee54:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800ee98 <__kernel_sin+0xa8>
 800ee58:	eea5 1b07 	vfma.f64	d1, d5, d7
 800ee5c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop
 800ee64:	f3af 8000 	nop.w
 800ee68:	5acfd57c 	.word	0x5acfd57c
 800ee6c:	3de5d93a 	.word	0x3de5d93a
 800ee70:	8a2b9ceb 	.word	0x8a2b9ceb
 800ee74:	be5ae5e6 	.word	0xbe5ae5e6
 800ee78:	57b1fe7d 	.word	0x57b1fe7d
 800ee7c:	3ec71de3 	.word	0x3ec71de3
 800ee80:	19c161d5 	.word	0x19c161d5
 800ee84:	bf2a01a0 	.word	0xbf2a01a0
 800ee88:	1110f8a6 	.word	0x1110f8a6
 800ee8c:	3f811111 	.word	0x3f811111
 800ee90:	55555549 	.word	0x55555549
 800ee94:	bfc55555 	.word	0xbfc55555
 800ee98:	55555549 	.word	0x55555549
 800ee9c:	3fc55555 	.word	0x3fc55555

0800eea0 <__ieee754_atan2>:
 800eea0:	ee11 1a10 	vmov	r1, s2
 800eea4:	eeb0 7b40 	vmov.f64	d7, d0
 800eea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeaa:	ee11 5a90 	vmov	r5, s3
 800eeae:	424b      	negs	r3, r1
 800eeb0:	4f59      	ldr	r7, [pc, #356]	; (800f018 <__ieee754_atan2+0x178>)
 800eeb2:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800eeb6:	430b      	orrs	r3, r1
 800eeb8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800eebc:	42bb      	cmp	r3, r7
 800eebe:	d80d      	bhi.n	800eedc <__ieee754_atan2+0x3c>
 800eec0:	ee10 ca10 	vmov	ip, s0
 800eec4:	ee17 6a90 	vmov	r6, s15
 800eec8:	f1cc 0000 	rsb	r0, ip, #0
 800eecc:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800eed0:	ea40 000c 	orr.w	r0, r0, ip
 800eed4:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 800eed8:	42b8      	cmp	r0, r7
 800eeda:	d904      	bls.n	800eee6 <__ieee754_atan2+0x46>
 800eedc:	ee37 7b01 	vadd.f64	d7, d7, d1
 800eee0:	eeb0 0b47 	vmov.f64	d0, d7
 800eee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eee6:	f105 4040 	add.w	r0, r5, #3221225472	; 0xc0000000
 800eeea:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800eeee:	4308      	orrs	r0, r1
 800eef0:	d103      	bne.n	800eefa <__ieee754_atan2+0x5a>
 800eef2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eef6:	f000 b9db 	b.w	800f2b0 <atan>
 800eefa:	17ac      	asrs	r4, r5, #30
 800eefc:	f004 0402 	and.w	r4, r4, #2
 800ef00:	ea53 0c0c 	orrs.w	ip, r3, ip
 800ef04:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 800ef08:	d107      	bne.n	800ef1a <__ieee754_atan2+0x7a>
 800ef0a:	2c02      	cmp	r4, #2
 800ef0c:	d05c      	beq.n	800efc8 <__ieee754_atan2+0x128>
 800ef0e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800efe0 <__ieee754_atan2+0x140>
 800ef12:	2c03      	cmp	r4, #3
 800ef14:	fe06 7b00 	vseleq.f64	d7, d6, d0
 800ef18:	e7e2      	b.n	800eee0 <__ieee754_atan2+0x40>
 800ef1a:	4311      	orrs	r1, r2
 800ef1c:	d107      	bne.n	800ef2e <__ieee754_atan2+0x8e>
 800ef1e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800efe8 <__ieee754_atan2+0x148>
 800ef22:	ed9f 6b33 	vldr	d6, [pc, #204]	; 800eff0 <__ieee754_atan2+0x150>
 800ef26:	2e00      	cmp	r6, #0
 800ef28:	fe27 7b06 	vselge.f64	d7, d7, d6
 800ef2c:	e7d8      	b.n	800eee0 <__ieee754_atan2+0x40>
 800ef2e:	42ba      	cmp	r2, r7
 800ef30:	d10f      	bne.n	800ef52 <__ieee754_atan2+0xb2>
 800ef32:	4293      	cmp	r3, r2
 800ef34:	f104 34ff 	add.w	r4, r4, #4294967295
 800ef38:	d107      	bne.n	800ef4a <__ieee754_atan2+0xaa>
 800ef3a:	2c02      	cmp	r4, #2
 800ef3c:	d847      	bhi.n	800efce <__ieee754_atan2+0x12e>
 800ef3e:	4b37      	ldr	r3, [pc, #220]	; (800f01c <__ieee754_atan2+0x17c>)
 800ef40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef44:	ed93 7b00 	vldr	d7, [r3]
 800ef48:	e7ca      	b.n	800eee0 <__ieee754_atan2+0x40>
 800ef4a:	2c02      	cmp	r4, #2
 800ef4c:	d842      	bhi.n	800efd4 <__ieee754_atan2+0x134>
 800ef4e:	4b34      	ldr	r3, [pc, #208]	; (800f020 <__ieee754_atan2+0x180>)
 800ef50:	e7f6      	b.n	800ef40 <__ieee754_atan2+0xa0>
 800ef52:	42bb      	cmp	r3, r7
 800ef54:	d0e3      	beq.n	800ef1e <__ieee754_atan2+0x7e>
 800ef56:	1a9b      	subs	r3, r3, r2
 800ef58:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ef5c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ef60:	da1a      	bge.n	800ef98 <__ieee754_atan2+0xf8>
 800ef62:	2d00      	cmp	r5, #0
 800ef64:	da01      	bge.n	800ef6a <__ieee754_atan2+0xca>
 800ef66:	323c      	adds	r2, #60	; 0x3c
 800ef68:	db19      	blt.n	800ef9e <__ieee754_atan2+0xfe>
 800ef6a:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800ef6e:	f000 fa99 	bl	800f4a4 <fabs>
 800ef72:	f000 f99d 	bl	800f2b0 <atan>
 800ef76:	eeb0 7b40 	vmov.f64	d7, d0
 800ef7a:	2c01      	cmp	r4, #1
 800ef7c:	d012      	beq.n	800efa4 <__ieee754_atan2+0x104>
 800ef7e:	2c02      	cmp	r4, #2
 800ef80:	d019      	beq.n	800efb6 <__ieee754_atan2+0x116>
 800ef82:	2c00      	cmp	r4, #0
 800ef84:	d0ac      	beq.n	800eee0 <__ieee754_atan2+0x40>
 800ef86:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800eff8 <__ieee754_atan2+0x158>
 800ef8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ef8e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800f000 <__ieee754_atan2+0x160>
 800ef92:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ef96:	e7a3      	b.n	800eee0 <__ieee754_atan2+0x40>
 800ef98:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800efe8 <__ieee754_atan2+0x148>
 800ef9c:	e7ed      	b.n	800ef7a <__ieee754_atan2+0xda>
 800ef9e:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 800f008 <__ieee754_atan2+0x168>
 800efa2:	e7ea      	b.n	800ef7a <__ieee754_atan2+0xda>
 800efa4:	ee17 1a90 	vmov	r1, s15
 800efa8:	ec53 2b17 	vmov	r2, r3, d7
 800efac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efb0:	ec43 2b17 	vmov	d7, r2, r3
 800efb4:	e794      	b.n	800eee0 <__ieee754_atan2+0x40>
 800efb6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 800eff8 <__ieee754_atan2+0x158>
 800efba:	ee37 7b46 	vsub.f64	d7, d7, d6
 800efbe:	ed9f 6b10 	vldr	d6, [pc, #64]	; 800f000 <__ieee754_atan2+0x160>
 800efc2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800efc6:	e78b      	b.n	800eee0 <__ieee754_atan2+0x40>
 800efc8:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800f000 <__ieee754_atan2+0x160>
 800efcc:	e788      	b.n	800eee0 <__ieee754_atan2+0x40>
 800efce:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800f010 <__ieee754_atan2+0x170>
 800efd2:	e785      	b.n	800eee0 <__ieee754_atan2+0x40>
 800efd4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800f008 <__ieee754_atan2+0x168>
 800efd8:	e782      	b.n	800eee0 <__ieee754_atan2+0x40>
 800efda:	bf00      	nop
 800efdc:	f3af 8000 	nop.w
 800efe0:	54442d18 	.word	0x54442d18
 800efe4:	c00921fb 	.word	0xc00921fb
 800efe8:	54442d18 	.word	0x54442d18
 800efec:	3ff921fb 	.word	0x3ff921fb
 800eff0:	54442d18 	.word	0x54442d18
 800eff4:	bff921fb 	.word	0xbff921fb
 800eff8:	33145c07 	.word	0x33145c07
 800effc:	3ca1a626 	.word	0x3ca1a626
 800f000:	54442d18 	.word	0x54442d18
 800f004:	400921fb 	.word	0x400921fb
	...
 800f010:	54442d18 	.word	0x54442d18
 800f014:	3fe921fb 	.word	0x3fe921fb
 800f018:	7ff00000 	.word	0x7ff00000
 800f01c:	08010188 	.word	0x08010188
 800f020:	080101a0 	.word	0x080101a0
 800f024:	00000000 	.word	0x00000000

0800f028 <__ieee754_rem_pio2>:
 800f028:	b570      	push	{r4, r5, r6, lr}
 800f02a:	eeb0 7b40 	vmov.f64	d7, d0
 800f02e:	ee17 5a90 	vmov	r5, s15
 800f032:	4b99      	ldr	r3, [pc, #612]	; (800f298 <__ieee754_rem_pio2+0x270>)
 800f034:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f038:	429e      	cmp	r6, r3
 800f03a:	b088      	sub	sp, #32
 800f03c:	4604      	mov	r4, r0
 800f03e:	dc07      	bgt.n	800f050 <__ieee754_rem_pio2+0x28>
 800f040:	2200      	movs	r2, #0
 800f042:	2300      	movs	r3, #0
 800f044:	ed84 0b00 	vstr	d0, [r4]
 800f048:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f04c:	2000      	movs	r0, #0
 800f04e:	e01b      	b.n	800f088 <__ieee754_rem_pio2+0x60>
 800f050:	4b92      	ldr	r3, [pc, #584]	; (800f29c <__ieee754_rem_pio2+0x274>)
 800f052:	429e      	cmp	r6, r3
 800f054:	dc3b      	bgt.n	800f0ce <__ieee754_rem_pio2+0xa6>
 800f056:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800f05a:	2d00      	cmp	r5, #0
 800f05c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800f258 <__ieee754_rem_pio2+0x230>
 800f060:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800f064:	dd19      	ble.n	800f09a <__ieee754_rem_pio2+0x72>
 800f066:	ee30 7b46 	vsub.f64	d7, d0, d6
 800f06a:	429e      	cmp	r6, r3
 800f06c:	d00e      	beq.n	800f08c <__ieee754_rem_pio2+0x64>
 800f06e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800f260 <__ieee754_rem_pio2+0x238>
 800f072:	ee37 5b46 	vsub.f64	d5, d7, d6
 800f076:	ee37 7b45 	vsub.f64	d7, d7, d5
 800f07a:	ed84 5b00 	vstr	d5, [r4]
 800f07e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f082:	ed84 7b02 	vstr	d7, [r4, #8]
 800f086:	2001      	movs	r0, #1
 800f088:	b008      	add	sp, #32
 800f08a:	bd70      	pop	{r4, r5, r6, pc}
 800f08c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800f268 <__ieee754_rem_pio2+0x240>
 800f090:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f094:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800f270 <__ieee754_rem_pio2+0x248>
 800f098:	e7eb      	b.n	800f072 <__ieee754_rem_pio2+0x4a>
 800f09a:	429e      	cmp	r6, r3
 800f09c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800f0a0:	d00e      	beq.n	800f0c0 <__ieee754_rem_pio2+0x98>
 800f0a2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800f260 <__ieee754_rem_pio2+0x238>
 800f0a6:	ee37 5b06 	vadd.f64	d5, d7, d6
 800f0aa:	ee37 7b45 	vsub.f64	d7, d7, d5
 800f0ae:	ed84 5b00 	vstr	d5, [r4]
 800f0b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ba:	ed84 7b02 	vstr	d7, [r4, #8]
 800f0be:	e7e3      	b.n	800f088 <__ieee754_rem_pio2+0x60>
 800f0c0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800f268 <__ieee754_rem_pio2+0x240>
 800f0c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f0c8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800f270 <__ieee754_rem_pio2+0x248>
 800f0cc:	e7eb      	b.n	800f0a6 <__ieee754_rem_pio2+0x7e>
 800f0ce:	4b74      	ldr	r3, [pc, #464]	; (800f2a0 <__ieee754_rem_pio2+0x278>)
 800f0d0:	429e      	cmp	r6, r3
 800f0d2:	dc70      	bgt.n	800f1b6 <__ieee754_rem_pio2+0x18e>
 800f0d4:	f000 f9e6 	bl	800f4a4 <fabs>
 800f0d8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f0dc:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800f278 <__ieee754_rem_pio2+0x250>
 800f0e0:	eea0 7b06 	vfma.f64	d7, d0, d6
 800f0e4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800f0e8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800f0ec:	ee17 0a90 	vmov	r0, s15
 800f0f0:	eeb1 4b45 	vneg.f64	d4, d5
 800f0f4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800f258 <__ieee754_rem_pio2+0x230>
 800f0f8:	eea5 0b47 	vfms.f64	d0, d5, d7
 800f0fc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800f260 <__ieee754_rem_pio2+0x238>
 800f100:	281f      	cmp	r0, #31
 800f102:	ee25 7b07 	vmul.f64	d7, d5, d7
 800f106:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f10a:	dc08      	bgt.n	800f11e <__ieee754_rem_pio2+0xf6>
 800f10c:	4b65      	ldr	r3, [pc, #404]	; (800f2a4 <__ieee754_rem_pio2+0x27c>)
 800f10e:	1e42      	subs	r2, r0, #1
 800f110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f114:	42b3      	cmp	r3, r6
 800f116:	d002      	beq.n	800f11e <__ieee754_rem_pio2+0xf6>
 800f118:	ed84 6b00 	vstr	d6, [r4]
 800f11c:	e024      	b.n	800f168 <__ieee754_rem_pio2+0x140>
 800f11e:	ee16 3a90 	vmov	r3, s13
 800f122:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800f126:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800f12a:	2b10      	cmp	r3, #16
 800f12c:	ea4f 5226 	mov.w	r2, r6, asr #20
 800f130:	ddf2      	ble.n	800f118 <__ieee754_rem_pio2+0xf0>
 800f132:	eeb0 6b40 	vmov.f64	d6, d0
 800f136:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 800f268 <__ieee754_rem_pio2+0x240>
 800f13a:	eea4 6b03 	vfma.f64	d6, d4, d3
 800f13e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800f142:	eea4 7b03 	vfma.f64	d7, d4, d3
 800f146:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800f270 <__ieee754_rem_pio2+0x248>
 800f14a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800f14e:	ee36 3b47 	vsub.f64	d3, d6, d7
 800f152:	ee13 3a90 	vmov	r3, s7
 800f156:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800f15a:	1ad3      	subs	r3, r2, r3
 800f15c:	2b31      	cmp	r3, #49	; 0x31
 800f15e:	dc17      	bgt.n	800f190 <__ieee754_rem_pio2+0x168>
 800f160:	eeb0 0b46 	vmov.f64	d0, d6
 800f164:	ed84 3b00 	vstr	d3, [r4]
 800f168:	ed94 6b00 	vldr	d6, [r4]
 800f16c:	2d00      	cmp	r5, #0
 800f16e:	ee30 0b46 	vsub.f64	d0, d0, d6
 800f172:	ee30 0b47 	vsub.f64	d0, d0, d7
 800f176:	ed84 0b02 	vstr	d0, [r4, #8]
 800f17a:	da85      	bge.n	800f088 <__ieee754_rem_pio2+0x60>
 800f17c:	eeb1 6b46 	vneg.f64	d6, d6
 800f180:	eeb1 0b40 	vneg.f64	d0, d0
 800f184:	ed84 6b00 	vstr	d6, [r4]
 800f188:	ed84 0b02 	vstr	d0, [r4, #8]
 800f18c:	4240      	negs	r0, r0
 800f18e:	e77b      	b.n	800f088 <__ieee754_rem_pio2+0x60>
 800f190:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800f280 <__ieee754_rem_pio2+0x258>
 800f194:	eeb0 0b46 	vmov.f64	d0, d6
 800f198:	eea4 0b07 	vfma.f64	d0, d4, d7
 800f19c:	ee36 6b40 	vsub.f64	d6, d6, d0
 800f1a0:	eea4 6b07 	vfma.f64	d6, d4, d7
 800f1a4:	ed9f 4b38 	vldr	d4, [pc, #224]	; 800f288 <__ieee754_rem_pio2+0x260>
 800f1a8:	eeb0 7b46 	vmov.f64	d7, d6
 800f1ac:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800f1b0:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f1b4:	e7b0      	b.n	800f118 <__ieee754_rem_pio2+0xf0>
 800f1b6:	4b3c      	ldr	r3, [pc, #240]	; (800f2a8 <__ieee754_rem_pio2+0x280>)
 800f1b8:	429e      	cmp	r6, r3
 800f1ba:	dd06      	ble.n	800f1ca <__ieee754_rem_pio2+0x1a2>
 800f1bc:	ee30 7b40 	vsub.f64	d7, d0, d0
 800f1c0:	ed80 7b02 	vstr	d7, [r0, #8]
 800f1c4:	ed80 7b00 	vstr	d7, [r0]
 800f1c8:	e740      	b.n	800f04c <__ieee754_rem_pio2+0x24>
 800f1ca:	1532      	asrs	r2, r6, #20
 800f1cc:	ee10 0a10 	vmov	r0, s0
 800f1d0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800f1d4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800f1d8:	ec41 0b17 	vmov	d7, r0, r1
 800f1dc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800f1e0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800f290 <__ieee754_rem_pio2+0x268>
 800f1e4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800f1e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f1ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f1f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f1f4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800f1f8:	a808      	add	r0, sp, #32
 800f1fa:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800f1fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f202:	ed8d 6b04 	vstr	d6, [sp, #16]
 800f206:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f20a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f20e:	2103      	movs	r1, #3
 800f210:	ed30 7b02 	vldmdb	r0!, {d7}
 800f214:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f21c:	460b      	mov	r3, r1
 800f21e:	f101 31ff 	add.w	r1, r1, #4294967295
 800f222:	d0f5      	beq.n	800f210 <__ieee754_rem_pio2+0x1e8>
 800f224:	4921      	ldr	r1, [pc, #132]	; (800f2ac <__ieee754_rem_pio2+0x284>)
 800f226:	9101      	str	r1, [sp, #4]
 800f228:	2102      	movs	r1, #2
 800f22a:	9100      	str	r1, [sp, #0]
 800f22c:	a802      	add	r0, sp, #8
 800f22e:	4621      	mov	r1, r4
 800f230:	f000 f942 	bl	800f4b8 <__kernel_rem_pio2>
 800f234:	2d00      	cmp	r5, #0
 800f236:	f6bf af27 	bge.w	800f088 <__ieee754_rem_pio2+0x60>
 800f23a:	ed94 7b00 	vldr	d7, [r4]
 800f23e:	eeb1 7b47 	vneg.f64	d7, d7
 800f242:	ed84 7b00 	vstr	d7, [r4]
 800f246:	ed94 7b02 	vldr	d7, [r4, #8]
 800f24a:	eeb1 7b47 	vneg.f64	d7, d7
 800f24e:	ed84 7b02 	vstr	d7, [r4, #8]
 800f252:	e79b      	b.n	800f18c <__ieee754_rem_pio2+0x164>
 800f254:	f3af 8000 	nop.w
 800f258:	54400000 	.word	0x54400000
 800f25c:	3ff921fb 	.word	0x3ff921fb
 800f260:	1a626331 	.word	0x1a626331
 800f264:	3dd0b461 	.word	0x3dd0b461
 800f268:	1a600000 	.word	0x1a600000
 800f26c:	3dd0b461 	.word	0x3dd0b461
 800f270:	2e037073 	.word	0x2e037073
 800f274:	3ba3198a 	.word	0x3ba3198a
 800f278:	6dc9c883 	.word	0x6dc9c883
 800f27c:	3fe45f30 	.word	0x3fe45f30
 800f280:	2e000000 	.word	0x2e000000
 800f284:	3ba3198a 	.word	0x3ba3198a
 800f288:	252049c1 	.word	0x252049c1
 800f28c:	397b839a 	.word	0x397b839a
 800f290:	00000000 	.word	0x00000000
 800f294:	41700000 	.word	0x41700000
 800f298:	3fe921fb 	.word	0x3fe921fb
 800f29c:	4002d97b 	.word	0x4002d97b
 800f2a0:	413921fb 	.word	0x413921fb
 800f2a4:	080101b8 	.word	0x080101b8
 800f2a8:	7fefffff 	.word	0x7fefffff
 800f2ac:	08010238 	.word	0x08010238

0800f2b0 <atan>:
 800f2b0:	b538      	push	{r3, r4, r5, lr}
 800f2b2:	eeb0 7b40 	vmov.f64	d7, d0
 800f2b6:	ee17 5a90 	vmov	r5, s15
 800f2ba:	4b73      	ldr	r3, [pc, #460]	; (800f488 <atan+0x1d8>)
 800f2bc:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f2c0:	429c      	cmp	r4, r3
 800f2c2:	dd13      	ble.n	800f2ec <atan+0x3c>
 800f2c4:	4b71      	ldr	r3, [pc, #452]	; (800f48c <atan+0x1dc>)
 800f2c6:	429c      	cmp	r4, r3
 800f2c8:	dc03      	bgt.n	800f2d2 <atan+0x22>
 800f2ca:	d107      	bne.n	800f2dc <atan+0x2c>
 800f2cc:	ee10 3a10 	vmov	r3, s0
 800f2d0:	b123      	cbz	r3, 800f2dc <atan+0x2c>
 800f2d2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f2d6:	eeb0 0b47 	vmov.f64	d0, d7
 800f2da:	bd38      	pop	{r3, r4, r5, pc}
 800f2dc:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 800f418 <atan+0x168>
 800f2e0:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 800f420 <atan+0x170>
 800f2e4:	2d00      	cmp	r5, #0
 800f2e6:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800f2ea:	e7f4      	b.n	800f2d6 <atan+0x26>
 800f2ec:	4b68      	ldr	r3, [pc, #416]	; (800f490 <atan+0x1e0>)
 800f2ee:	429c      	cmp	r4, r3
 800f2f0:	dc11      	bgt.n	800f316 <atan+0x66>
 800f2f2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f2f6:	429c      	cmp	r4, r3
 800f2f8:	dc0a      	bgt.n	800f310 <atan+0x60>
 800f2fa:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800f2fe:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800f428 <atan+0x178>
 800f302:	ee30 6b06 	vadd.f64	d6, d0, d6
 800f306:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f30e:	dce2      	bgt.n	800f2d6 <atan+0x26>
 800f310:	f04f 33ff 	mov.w	r3, #4294967295
 800f314:	e013      	b.n	800f33e <atan+0x8e>
 800f316:	f000 f8c5 	bl	800f4a4 <fabs>
 800f31a:	4b5e      	ldr	r3, [pc, #376]	; (800f494 <atan+0x1e4>)
 800f31c:	429c      	cmp	r4, r3
 800f31e:	dc4f      	bgt.n	800f3c0 <atan+0x110>
 800f320:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f324:	429c      	cmp	r4, r3
 800f326:	dc41      	bgt.n	800f3ac <atan+0xfc>
 800f328:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800f32c:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 800f330:	2300      	movs	r3, #0
 800f332:	eea0 5b07 	vfma.f64	d5, d0, d7
 800f336:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f33a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800f33e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f430 <atan+0x180>
 800f342:	ee27 4b07 	vmul.f64	d4, d7, d7
 800f346:	ee24 5b04 	vmul.f64	d5, d4, d4
 800f34a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800f438 <atan+0x188>
 800f34e:	eea5 3b06 	vfma.f64	d3, d5, d6
 800f352:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800f440 <atan+0x190>
 800f356:	eea3 6b05 	vfma.f64	d6, d3, d5
 800f35a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800f448 <atan+0x198>
 800f35e:	eea6 3b05 	vfma.f64	d3, d6, d5
 800f362:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800f450 <atan+0x1a0>
 800f366:	eea3 6b05 	vfma.f64	d6, d3, d5
 800f36a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800f458 <atan+0x1a8>
 800f36e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800f460 <atan+0x1b0>
 800f372:	eea6 3b05 	vfma.f64	d3, d6, d5
 800f376:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f468 <atan+0x1b8>
 800f37a:	eea5 2b06 	vfma.f64	d2, d5, d6
 800f37e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f470 <atan+0x1c0>
 800f382:	eea2 6b05 	vfma.f64	d6, d2, d5
 800f386:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800f478 <atan+0x1c8>
 800f38a:	eea6 2b05 	vfma.f64	d2, d6, d5
 800f38e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f480 <atan+0x1d0>
 800f392:	1c5a      	adds	r2, r3, #1
 800f394:	eea2 6b05 	vfma.f64	d6, d2, d5
 800f398:	ee26 6b05 	vmul.f64	d6, d6, d5
 800f39c:	eea3 6b04 	vfma.f64	d6, d3, d4
 800f3a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f3a4:	d121      	bne.n	800f3ea <atan+0x13a>
 800f3a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f3aa:	e794      	b.n	800f2d6 <atan+0x26>
 800f3ac:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	ee30 5b47 	vsub.f64	d5, d0, d7
 800f3b6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f3ba:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800f3be:	e7be      	b.n	800f33e <atan+0x8e>
 800f3c0:	4b35      	ldr	r3, [pc, #212]	; (800f498 <atan+0x1e8>)
 800f3c2:	429c      	cmp	r4, r3
 800f3c4:	da0b      	bge.n	800f3de <atan+0x12e>
 800f3c6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f3ca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f3ce:	ee30 5b47 	vsub.f64	d5, d0, d7
 800f3d2:	eea0 6b07 	vfma.f64	d6, d0, d7
 800f3d6:	2302      	movs	r3, #2
 800f3d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800f3dc:	e7af      	b.n	800f33e <atan+0x8e>
 800f3de:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800f3e2:	2303      	movs	r3, #3
 800f3e4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f3e8:	e7a9      	b.n	800f33e <atan+0x8e>
 800f3ea:	4a2c      	ldr	r2, [pc, #176]	; (800f49c <atan+0x1ec>)
 800f3ec:	492c      	ldr	r1, [pc, #176]	; (800f4a0 <atan+0x1f0>)
 800f3ee:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f3f2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800f3f6:	ed93 5b00 	vldr	d5, [r3]
 800f3fa:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f3fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f402:	ed92 7b00 	vldr	d7, [r2]
 800f406:	2d00      	cmp	r5, #0
 800f408:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f40c:	bfb8      	it	lt
 800f40e:	eeb1 7b47 	vneglt.f64	d7, d7
 800f412:	e760      	b.n	800f2d6 <atan+0x26>
 800f414:	f3af 8000 	nop.w
 800f418:	54442d18 	.word	0x54442d18
 800f41c:	3ff921fb 	.word	0x3ff921fb
 800f420:	54442d18 	.word	0x54442d18
 800f424:	bff921fb 	.word	0xbff921fb
 800f428:	8800759c 	.word	0x8800759c
 800f42c:	7e37e43c 	.word	0x7e37e43c
 800f430:	e322da11 	.word	0xe322da11
 800f434:	3f90ad3a 	.word	0x3f90ad3a
 800f438:	24760deb 	.word	0x24760deb
 800f43c:	3fa97b4b 	.word	0x3fa97b4b
 800f440:	a0d03d51 	.word	0xa0d03d51
 800f444:	3fb10d66 	.word	0x3fb10d66
 800f448:	c54c206e 	.word	0xc54c206e
 800f44c:	3fb745cd 	.word	0x3fb745cd
 800f450:	920083ff 	.word	0x920083ff
 800f454:	3fc24924 	.word	0x3fc24924
 800f458:	5555550d 	.word	0x5555550d
 800f45c:	3fd55555 	.word	0x3fd55555
 800f460:	52defd9a 	.word	0x52defd9a
 800f464:	bfadde2d 	.word	0xbfadde2d
 800f468:	2c6a6c2f 	.word	0x2c6a6c2f
 800f46c:	bfa2b444 	.word	0xbfa2b444
 800f470:	af749a6d 	.word	0xaf749a6d
 800f474:	bfb3b0f2 	.word	0xbfb3b0f2
 800f478:	fe231671 	.word	0xfe231671
 800f47c:	bfbc71c6 	.word	0xbfbc71c6
 800f480:	9998ebc4 	.word	0x9998ebc4
 800f484:	bfc99999 	.word	0xbfc99999
 800f488:	440fffff 	.word	0x440fffff
 800f48c:	7ff00000 	.word	0x7ff00000
 800f490:	3fdbffff 	.word	0x3fdbffff
 800f494:	3ff2ffff 	.word	0x3ff2ffff
 800f498:	40038000 	.word	0x40038000
 800f49c:	08010340 	.word	0x08010340
 800f4a0:	08010360 	.word	0x08010360

0800f4a4 <fabs>:
 800f4a4:	ec51 0b10 	vmov	r0, r1, d0
 800f4a8:	ee10 2a10 	vmov	r2, s0
 800f4ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f4b0:	ec43 2b10 	vmov	d0, r2, r3
 800f4b4:	4770      	bx	lr
	...

0800f4b8 <__kernel_rem_pio2>:
 800f4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4bc:	ed2d 8b06 	vpush	{d8-d10}
 800f4c0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800f4c4:	460f      	mov	r7, r1
 800f4c6:	9002      	str	r0, [sp, #8]
 800f4c8:	49c3      	ldr	r1, [pc, #780]	; (800f7d8 <__kernel_rem_pio2+0x320>)
 800f4ca:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800f4cc:	9301      	str	r3, [sp, #4]
 800f4ce:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800f4d2:	9901      	ldr	r1, [sp, #4]
 800f4d4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800f4d6:	f112 0f14 	cmn.w	r2, #20
 800f4da:	bfa8      	it	ge
 800f4dc:	1ed0      	subge	r0, r2, #3
 800f4de:	f101 3aff 	add.w	sl, r1, #4294967295
 800f4e2:	bfaa      	itet	ge
 800f4e4:	2418      	movge	r4, #24
 800f4e6:	2000      	movlt	r0, #0
 800f4e8:	fb90 f0f4 	sdivge	r0, r0, r4
 800f4ec:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 800f7c0 <__kernel_rem_pio2+0x308>
 800f4f0:	f06f 0417 	mvn.w	r4, #23
 800f4f4:	fb00 4404 	mla	r4, r0, r4, r4
 800f4f8:	eba0 060a 	sub.w	r6, r0, sl
 800f4fc:	4414      	add	r4, r2
 800f4fe:	eb09 0c0a 	add.w	ip, r9, sl
 800f502:	ad1a      	add	r5, sp, #104	; 0x68
 800f504:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 800f508:	2200      	movs	r2, #0
 800f50a:	4562      	cmp	r2, ip
 800f50c:	dd10      	ble.n	800f530 <__kernel_rem_pio2+0x78>
 800f50e:	9a01      	ldr	r2, [sp, #4]
 800f510:	a91a      	add	r1, sp, #104	; 0x68
 800f512:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f516:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 800f51a:	f04f 0c00 	mov.w	ip, #0
 800f51e:	45cc      	cmp	ip, r9
 800f520:	dc26      	bgt.n	800f570 <__kernel_rem_pio2+0xb8>
 800f522:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 800f7c0 <__kernel_rem_pio2+0x308>
 800f526:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f52a:	4616      	mov	r6, r2
 800f52c:	2500      	movs	r5, #0
 800f52e:	e015      	b.n	800f55c <__kernel_rem_pio2+0xa4>
 800f530:	42d6      	cmn	r6, r2
 800f532:	d409      	bmi.n	800f548 <__kernel_rem_pio2+0x90>
 800f534:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 800f538:	ee07 1a90 	vmov	s15, r1
 800f53c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f540:	eca5 7b02 	vstmia	r5!, {d7}
 800f544:	3201      	adds	r2, #1
 800f546:	e7e0      	b.n	800f50a <__kernel_rem_pio2+0x52>
 800f548:	eeb0 7b46 	vmov.f64	d7, d6
 800f54c:	e7f8      	b.n	800f540 <__kernel_rem_pio2+0x88>
 800f54e:	ecbe 5b02 	vldmia	lr!, {d5}
 800f552:	ed96 6b00 	vldr	d6, [r6]
 800f556:	3501      	adds	r5, #1
 800f558:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f55c:	4555      	cmp	r5, sl
 800f55e:	f1a6 0608 	sub.w	r6, r6, #8
 800f562:	ddf4      	ble.n	800f54e <__kernel_rem_pio2+0x96>
 800f564:	eca8 7b02 	vstmia	r8!, {d7}
 800f568:	f10c 0c01 	add.w	ip, ip, #1
 800f56c:	3208      	adds	r2, #8
 800f56e:	e7d6      	b.n	800f51e <__kernel_rem_pio2+0x66>
 800f570:	aa06      	add	r2, sp, #24
 800f572:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800f7c8 <__kernel_rem_pio2+0x310>
 800f576:	ed9f ab96 	vldr	d10, [pc, #600]	; 800f7d0 <__kernel_rem_pio2+0x318>
 800f57a:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800f57e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800f582:	9204      	str	r2, [sp, #16]
 800f584:	9303      	str	r3, [sp, #12]
 800f586:	464d      	mov	r5, r9
 800f588:	00eb      	lsls	r3, r5, #3
 800f58a:	9305      	str	r3, [sp, #20]
 800f58c:	ab92      	add	r3, sp, #584	; 0x248
 800f58e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800f592:	f10d 0b18 	add.w	fp, sp, #24
 800f596:	ab6a      	add	r3, sp, #424	; 0x1a8
 800f598:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800f59c:	465e      	mov	r6, fp
 800f59e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800f5a2:	4628      	mov	r0, r5
 800f5a4:	2800      	cmp	r0, #0
 800f5a6:	f1a2 0208 	sub.w	r2, r2, #8
 800f5aa:	dc48      	bgt.n	800f63e <__kernel_rem_pio2+0x186>
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	f000 fa17 	bl	800f9e0 <scalbn>
 800f5b2:	eeb0 8b40 	vmov.f64	d8, d0
 800f5b6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800f5ba:	ee28 0b00 	vmul.f64	d0, d8, d0
 800f5be:	f000 fa8f 	bl	800fae0 <floor>
 800f5c2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800f5c6:	eea0 8b47 	vfms.f64	d8, d0, d7
 800f5ca:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800f5ce:	2c00      	cmp	r4, #0
 800f5d0:	ee17 8a90 	vmov	r8, s15
 800f5d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f5d8:	ee38 8b47 	vsub.f64	d8, d8, d7
 800f5dc:	dd41      	ble.n	800f662 <__kernel_rem_pio2+0x1aa>
 800f5de:	1e68      	subs	r0, r5, #1
 800f5e0:	ab06      	add	r3, sp, #24
 800f5e2:	f1c4 0c18 	rsb	ip, r4, #24
 800f5e6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800f5ea:	fa46 f20c 	asr.w	r2, r6, ip
 800f5ee:	4490      	add	r8, r2
 800f5f0:	fa02 f20c 	lsl.w	r2, r2, ip
 800f5f4:	1ab6      	subs	r6, r6, r2
 800f5f6:	f1c4 0217 	rsb	r2, r4, #23
 800f5fa:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800f5fe:	4116      	asrs	r6, r2
 800f600:	2e00      	cmp	r6, #0
 800f602:	dd3d      	ble.n	800f680 <__kernel_rem_pio2+0x1c8>
 800f604:	f04f 0c00 	mov.w	ip, #0
 800f608:	f108 0801 	add.w	r8, r8, #1
 800f60c:	4660      	mov	r0, ip
 800f60e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800f612:	4565      	cmp	r5, ip
 800f614:	dc6a      	bgt.n	800f6ec <__kernel_rem_pio2+0x234>
 800f616:	2c00      	cmp	r4, #0
 800f618:	dd04      	ble.n	800f624 <__kernel_rem_pio2+0x16c>
 800f61a:	2c01      	cmp	r4, #1
 800f61c:	d07b      	beq.n	800f716 <__kernel_rem_pio2+0x25e>
 800f61e:	2c02      	cmp	r4, #2
 800f620:	f000 8083 	beq.w	800f72a <__kernel_rem_pio2+0x272>
 800f624:	2e02      	cmp	r6, #2
 800f626:	d12b      	bne.n	800f680 <__kernel_rem_pio2+0x1c8>
 800f628:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f62c:	ee30 8b48 	vsub.f64	d8, d0, d8
 800f630:	b330      	cbz	r0, 800f680 <__kernel_rem_pio2+0x1c8>
 800f632:	4620      	mov	r0, r4
 800f634:	f000 f9d4 	bl	800f9e0 <scalbn>
 800f638:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f63c:	e020      	b.n	800f680 <__kernel_rem_pio2+0x1c8>
 800f63e:	ee20 7b09 	vmul.f64	d7, d0, d9
 800f642:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f646:	3801      	subs	r0, #1
 800f648:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800f64c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800f650:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f654:	eca6 0a01 	vstmia	r6!, {s0}
 800f658:	ed92 0b00 	vldr	d0, [r2]
 800f65c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f660:	e7a0      	b.n	800f5a4 <__kernel_rem_pio2+0xec>
 800f662:	d105      	bne.n	800f670 <__kernel_rem_pio2+0x1b8>
 800f664:	1e6a      	subs	r2, r5, #1
 800f666:	ab06      	add	r3, sp, #24
 800f668:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800f66c:	15f6      	asrs	r6, r6, #23
 800f66e:	e7c7      	b.n	800f600 <__kernel_rem_pio2+0x148>
 800f670:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f674:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67c:	da34      	bge.n	800f6e8 <__kernel_rem_pio2+0x230>
 800f67e:	2600      	movs	r6, #0
 800f680:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f688:	f040 80aa 	bne.w	800f7e0 <__kernel_rem_pio2+0x328>
 800f68c:	f105 3bff 	add.w	fp, r5, #4294967295
 800f690:	4658      	mov	r0, fp
 800f692:	2200      	movs	r2, #0
 800f694:	4548      	cmp	r0, r9
 800f696:	da50      	bge.n	800f73a <__kernel_rem_pio2+0x282>
 800f698:	2a00      	cmp	r2, #0
 800f69a:	d06b      	beq.n	800f774 <__kernel_rem_pio2+0x2bc>
 800f69c:	ab06      	add	r3, sp, #24
 800f69e:	3c18      	subs	r4, #24
 800f6a0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	f000 8087 	beq.w	800f7b8 <__kernel_rem_pio2+0x300>
 800f6aa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	f000 f996 	bl	800f9e0 <scalbn>
 800f6b4:	ed9f 6b44 	vldr	d6, [pc, #272]	; 800f7c8 <__kernel_rem_pio2+0x310>
 800f6b8:	f10b 0201 	add.w	r2, fp, #1
 800f6bc:	a96a      	add	r1, sp, #424	; 0x1a8
 800f6be:	00d3      	lsls	r3, r2, #3
 800f6c0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f6c4:	465a      	mov	r2, fp
 800f6c6:	2a00      	cmp	r2, #0
 800f6c8:	f280 80b8 	bge.w	800f83c <__kernel_rem_pio2+0x384>
 800f6cc:	465a      	mov	r2, fp
 800f6ce:	2a00      	cmp	r2, #0
 800f6d0:	f2c0 80d6 	blt.w	800f880 <__kernel_rem_pio2+0x3c8>
 800f6d4:	a96a      	add	r1, sp, #424	; 0x1a8
 800f6d6:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 800f6da:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800f7c0 <__kernel_rem_pio2+0x308>
 800f6de:	4d3f      	ldr	r5, [pc, #252]	; (800f7dc <__kernel_rem_pio2+0x324>)
 800f6e0:	2000      	movs	r0, #0
 800f6e2:	ebab 0102 	sub.w	r1, fp, r2
 800f6e6:	e0c0      	b.n	800f86a <__kernel_rem_pio2+0x3b2>
 800f6e8:	2602      	movs	r6, #2
 800f6ea:	e78b      	b.n	800f604 <__kernel_rem_pio2+0x14c>
 800f6ec:	f8db 2000 	ldr.w	r2, [fp]
 800f6f0:	b958      	cbnz	r0, 800f70a <__kernel_rem_pio2+0x252>
 800f6f2:	b122      	cbz	r2, 800f6fe <__kernel_rem_pio2+0x246>
 800f6f4:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800f6f8:	f8cb 2000 	str.w	r2, [fp]
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	f10c 0c01 	add.w	ip, ip, #1
 800f702:	f10b 0b04 	add.w	fp, fp, #4
 800f706:	4610      	mov	r0, r2
 800f708:	e783      	b.n	800f612 <__kernel_rem_pio2+0x15a>
 800f70a:	ebae 0202 	sub.w	r2, lr, r2
 800f70e:	f8cb 2000 	str.w	r2, [fp]
 800f712:	4602      	mov	r2, r0
 800f714:	e7f3      	b.n	800f6fe <__kernel_rem_pio2+0x246>
 800f716:	f105 3cff 	add.w	ip, r5, #4294967295
 800f71a:	ab06      	add	r3, sp, #24
 800f71c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800f720:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800f724:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800f728:	e77c      	b.n	800f624 <__kernel_rem_pio2+0x16c>
 800f72a:	f105 3cff 	add.w	ip, r5, #4294967295
 800f72e:	ab06      	add	r3, sp, #24
 800f730:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800f734:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800f738:	e7f4      	b.n	800f724 <__kernel_rem_pio2+0x26c>
 800f73a:	ab06      	add	r3, sp, #24
 800f73c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f740:	3801      	subs	r0, #1
 800f742:	431a      	orrs	r2, r3
 800f744:	e7a6      	b.n	800f694 <__kernel_rem_pio2+0x1dc>
 800f746:	3201      	adds	r2, #1
 800f748:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800f74c:	2e00      	cmp	r6, #0
 800f74e:	d0fa      	beq.n	800f746 <__kernel_rem_pio2+0x28e>
 800f750:	9b05      	ldr	r3, [sp, #20]
 800f752:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f756:	eb0d 0003 	add.w	r0, sp, r3
 800f75a:	9b01      	ldr	r3, [sp, #4]
 800f75c:	18ee      	adds	r6, r5, r3
 800f75e:	ab1a      	add	r3, sp, #104	; 0x68
 800f760:	f105 0c01 	add.w	ip, r5, #1
 800f764:	3898      	subs	r0, #152	; 0x98
 800f766:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f76a:	442a      	add	r2, r5
 800f76c:	4562      	cmp	r2, ip
 800f76e:	da04      	bge.n	800f77a <__kernel_rem_pio2+0x2c2>
 800f770:	4615      	mov	r5, r2
 800f772:	e709      	b.n	800f588 <__kernel_rem_pio2+0xd0>
 800f774:	9804      	ldr	r0, [sp, #16]
 800f776:	2201      	movs	r2, #1
 800f778:	e7e6      	b.n	800f748 <__kernel_rem_pio2+0x290>
 800f77a:	9b03      	ldr	r3, [sp, #12]
 800f77c:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f780:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800f784:	9305      	str	r3, [sp, #20]
 800f786:	ee07 3a90 	vmov	s15, r3
 800f78a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f78e:	2500      	movs	r5, #0
 800f790:	eca6 7b02 	vstmia	r6!, {d7}
 800f794:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 800f7c0 <__kernel_rem_pio2+0x308>
 800f798:	46b0      	mov	r8, r6
 800f79a:	4555      	cmp	r5, sl
 800f79c:	dd04      	ble.n	800f7a8 <__kernel_rem_pio2+0x2f0>
 800f79e:	eca0 7b02 	vstmia	r0!, {d7}
 800f7a2:	f10c 0c01 	add.w	ip, ip, #1
 800f7a6:	e7e1      	b.n	800f76c <__kernel_rem_pio2+0x2b4>
 800f7a8:	ecbe 5b02 	vldmia	lr!, {d5}
 800f7ac:	ed38 6b02 	vldmdb	r8!, {d6}
 800f7b0:	3501      	adds	r5, #1
 800f7b2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f7b6:	e7f0      	b.n	800f79a <__kernel_rem_pio2+0x2e2>
 800f7b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f7bc:	e76e      	b.n	800f69c <__kernel_rem_pio2+0x1e4>
 800f7be:	bf00      	nop
	...
 800f7cc:	3e700000 	.word	0x3e700000
 800f7d0:	00000000 	.word	0x00000000
 800f7d4:	41700000 	.word	0x41700000
 800f7d8:	080103c0 	.word	0x080103c0
 800f7dc:	08010380 	.word	0x08010380
 800f7e0:	4260      	negs	r0, r4
 800f7e2:	eeb0 0b48 	vmov.f64	d0, d8
 800f7e6:	f000 f8fb 	bl	800f9e0 <scalbn>
 800f7ea:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800f9c8 <__kernel_rem_pio2+0x510>
 800f7ee:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800f7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7f6:	db18      	blt.n	800f82a <__kernel_rem_pio2+0x372>
 800f7f8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800f9d0 <__kernel_rem_pio2+0x518>
 800f7fc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f800:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f804:	aa06      	add	r2, sp, #24
 800f806:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800f80a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800f80e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f812:	f105 0b01 	add.w	fp, r5, #1
 800f816:	ee10 3a10 	vmov	r3, s0
 800f81a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f81e:	ee17 3a10 	vmov	r3, s14
 800f822:	3418      	adds	r4, #24
 800f824:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800f828:	e73f      	b.n	800f6aa <__kernel_rem_pio2+0x1f2>
 800f82a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f82e:	aa06      	add	r2, sp, #24
 800f830:	ee10 3a10 	vmov	r3, s0
 800f834:	46ab      	mov	fp, r5
 800f836:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f83a:	e736      	b.n	800f6aa <__kernel_rem_pio2+0x1f2>
 800f83c:	a806      	add	r0, sp, #24
 800f83e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800f842:	9001      	str	r0, [sp, #4]
 800f844:	ee07 0a90 	vmov	s15, r0
 800f848:	3a01      	subs	r2, #1
 800f84a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f84e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800f852:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f856:	ed21 7b02 	vstmdb	r1!, {d7}
 800f85a:	e734      	b.n	800f6c6 <__kernel_rem_pio2+0x20e>
 800f85c:	ecb5 5b02 	vldmia	r5!, {d5}
 800f860:	ecb4 6b02 	vldmia	r4!, {d6}
 800f864:	3001      	adds	r0, #1
 800f866:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f86a:	4548      	cmp	r0, r9
 800f86c:	dc01      	bgt.n	800f872 <__kernel_rem_pio2+0x3ba>
 800f86e:	4288      	cmp	r0, r1
 800f870:	ddf4      	ble.n	800f85c <__kernel_rem_pio2+0x3a4>
 800f872:	a842      	add	r0, sp, #264	; 0x108
 800f874:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f878:	ed81 7b00 	vstr	d7, [r1]
 800f87c:	3a01      	subs	r2, #1
 800f87e:	e726      	b.n	800f6ce <__kernel_rem_pio2+0x216>
 800f880:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800f882:	2a02      	cmp	r2, #2
 800f884:	dc0a      	bgt.n	800f89c <__kernel_rem_pio2+0x3e4>
 800f886:	2a00      	cmp	r2, #0
 800f888:	dc2e      	bgt.n	800f8e8 <__kernel_rem_pio2+0x430>
 800f88a:	d047      	beq.n	800f91c <__kernel_rem_pio2+0x464>
 800f88c:	f008 0007 	and.w	r0, r8, #7
 800f890:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800f894:	ecbd 8b06 	vpop	{d8-d10}
 800f898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f89c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800f89e:	2a03      	cmp	r2, #3
 800f8a0:	d1f4      	bne.n	800f88c <__kernel_rem_pio2+0x3d4>
 800f8a2:	a942      	add	r1, sp, #264	; 0x108
 800f8a4:	f1a3 0208 	sub.w	r2, r3, #8
 800f8a8:	440a      	add	r2, r1
 800f8aa:	4611      	mov	r1, r2
 800f8ac:	4658      	mov	r0, fp
 800f8ae:	2800      	cmp	r0, #0
 800f8b0:	f1a1 0108 	sub.w	r1, r1, #8
 800f8b4:	dc55      	bgt.n	800f962 <__kernel_rem_pio2+0x4aa>
 800f8b6:	4659      	mov	r1, fp
 800f8b8:	2901      	cmp	r1, #1
 800f8ba:	f1a2 0208 	sub.w	r2, r2, #8
 800f8be:	dc60      	bgt.n	800f982 <__kernel_rem_pio2+0x4ca>
 800f8c0:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800f9d8 <__kernel_rem_pio2+0x520>
 800f8c4:	aa42      	add	r2, sp, #264	; 0x108
 800f8c6:	4413      	add	r3, r2
 800f8c8:	f1bb 0f01 	cmp.w	fp, #1
 800f8cc:	dc69      	bgt.n	800f9a2 <__kernel_rem_pio2+0x4ea>
 800f8ce:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800f8d2:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800f8d6:	2e00      	cmp	r6, #0
 800f8d8:	d16a      	bne.n	800f9b0 <__kernel_rem_pio2+0x4f8>
 800f8da:	ed87 5b00 	vstr	d5, [r7]
 800f8de:	ed87 6b02 	vstr	d6, [r7, #8]
 800f8e2:	ed87 7b04 	vstr	d7, [r7, #16]
 800f8e6:	e7d1      	b.n	800f88c <__kernel_rem_pio2+0x3d4>
 800f8e8:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800f9d8 <__kernel_rem_pio2+0x520>
 800f8ec:	aa42      	add	r2, sp, #264	; 0x108
 800f8ee:	4413      	add	r3, r2
 800f8f0:	465a      	mov	r2, fp
 800f8f2:	2a00      	cmp	r2, #0
 800f8f4:	da26      	bge.n	800f944 <__kernel_rem_pio2+0x48c>
 800f8f6:	b35e      	cbz	r6, 800f950 <__kernel_rem_pio2+0x498>
 800f8f8:	eeb1 7b46 	vneg.f64	d7, d6
 800f8fc:	ed87 7b00 	vstr	d7, [r7]
 800f900:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800f904:	aa44      	add	r2, sp, #272	; 0x110
 800f906:	2301      	movs	r3, #1
 800f908:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f90c:	459b      	cmp	fp, r3
 800f90e:	da22      	bge.n	800f956 <__kernel_rem_pio2+0x49e>
 800f910:	b10e      	cbz	r6, 800f916 <__kernel_rem_pio2+0x45e>
 800f912:	eeb1 7b47 	vneg.f64	d7, d7
 800f916:	ed87 7b02 	vstr	d7, [r7, #8]
 800f91a:	e7b7      	b.n	800f88c <__kernel_rem_pio2+0x3d4>
 800f91c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f9d8 <__kernel_rem_pio2+0x520>
 800f920:	aa42      	add	r2, sp, #264	; 0x108
 800f922:	4413      	add	r3, r2
 800f924:	f1bb 0f00 	cmp.w	fp, #0
 800f928:	da05      	bge.n	800f936 <__kernel_rem_pio2+0x47e>
 800f92a:	b10e      	cbz	r6, 800f930 <__kernel_rem_pio2+0x478>
 800f92c:	eeb1 7b47 	vneg.f64	d7, d7
 800f930:	ed87 7b00 	vstr	d7, [r7]
 800f934:	e7aa      	b.n	800f88c <__kernel_rem_pio2+0x3d4>
 800f936:	ed33 6b02 	vldmdb	r3!, {d6}
 800f93a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f93e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f942:	e7ef      	b.n	800f924 <__kernel_rem_pio2+0x46c>
 800f944:	ed33 7b02 	vldmdb	r3!, {d7}
 800f948:	3a01      	subs	r2, #1
 800f94a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f94e:	e7d0      	b.n	800f8f2 <__kernel_rem_pio2+0x43a>
 800f950:	eeb0 7b46 	vmov.f64	d7, d6
 800f954:	e7d2      	b.n	800f8fc <__kernel_rem_pio2+0x444>
 800f956:	ecb2 6b02 	vldmia	r2!, {d6}
 800f95a:	3301      	adds	r3, #1
 800f95c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f960:	e7d4      	b.n	800f90c <__kernel_rem_pio2+0x454>
 800f962:	ed91 7b00 	vldr	d7, [r1]
 800f966:	ed91 5b02 	vldr	d5, [r1, #8]
 800f96a:	3801      	subs	r0, #1
 800f96c:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f970:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f974:	ed81 6b00 	vstr	d6, [r1]
 800f978:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f97c:	ed81 7b02 	vstr	d7, [r1, #8]
 800f980:	e795      	b.n	800f8ae <__kernel_rem_pio2+0x3f6>
 800f982:	ed92 7b00 	vldr	d7, [r2]
 800f986:	ed92 5b02 	vldr	d5, [r2, #8]
 800f98a:	3901      	subs	r1, #1
 800f98c:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f990:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f994:	ed82 6b00 	vstr	d6, [r2]
 800f998:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f99c:	ed82 7b02 	vstr	d7, [r2, #8]
 800f9a0:	e78a      	b.n	800f8b8 <__kernel_rem_pio2+0x400>
 800f9a2:	ed33 6b02 	vldmdb	r3!, {d6}
 800f9a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f9aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f9ae:	e78b      	b.n	800f8c8 <__kernel_rem_pio2+0x410>
 800f9b0:	eeb1 5b45 	vneg.f64	d5, d5
 800f9b4:	eeb1 6b46 	vneg.f64	d6, d6
 800f9b8:	ed87 5b00 	vstr	d5, [r7]
 800f9bc:	eeb1 7b47 	vneg.f64	d7, d7
 800f9c0:	ed87 6b02 	vstr	d6, [r7, #8]
 800f9c4:	e78d      	b.n	800f8e2 <__kernel_rem_pio2+0x42a>
 800f9c6:	bf00      	nop
 800f9c8:	00000000 	.word	0x00000000
 800f9cc:	41700000 	.word	0x41700000
 800f9d0:	00000000 	.word	0x00000000
 800f9d4:	3e700000 	.word	0x3e700000
	...

0800f9e0 <scalbn>:
 800f9e0:	ee10 1a90 	vmov	r1, s1
 800f9e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f9e8:	b98b      	cbnz	r3, 800fa0e <scalbn+0x2e>
 800f9ea:	ee10 3a10 	vmov	r3, s0
 800f9ee:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f9f2:	4319      	orrs	r1, r3
 800f9f4:	d00a      	beq.n	800fa0c <scalbn+0x2c>
 800f9f6:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800faa8 <scalbn+0xc8>
 800f9fa:	4b37      	ldr	r3, [pc, #220]	; (800fad8 <scalbn+0xf8>)
 800f9fc:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fa00:	4298      	cmp	r0, r3
 800fa02:	da0b      	bge.n	800fa1c <scalbn+0x3c>
 800fa04:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 800fab0 <scalbn+0xd0>
 800fa08:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fa0c:	4770      	bx	lr
 800fa0e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d107      	bne.n	800fa26 <scalbn+0x46>
 800fa16:	ee30 0b00 	vadd.f64	d0, d0, d0
 800fa1a:	4770      	bx	lr
 800fa1c:	ee10 1a90 	vmov	r1, s1
 800fa20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fa24:	3b36      	subs	r3, #54	; 0x36
 800fa26:	f24c 3250 	movw	r2, #50000	; 0xc350
 800fa2a:	4290      	cmp	r0, r2
 800fa2c:	dd0d      	ble.n	800fa4a <scalbn+0x6a>
 800fa2e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800fab8 <scalbn+0xd8>
 800fa32:	ee10 3a90 	vmov	r3, s1
 800fa36:	eeb0 6b47 	vmov.f64	d6, d7
 800fa3a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 800fac0 <scalbn+0xe0>
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	fe27 7b05 	vselge.f64	d7, d7, d5
 800fa44:	ee27 0b06 	vmul.f64	d0, d7, d6
 800fa48:	4770      	bx	lr
 800fa4a:	4418      	add	r0, r3
 800fa4c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800fa50:	4298      	cmp	r0, r3
 800fa52:	dcec      	bgt.n	800fa2e <scalbn+0x4e>
 800fa54:	2800      	cmp	r0, #0
 800fa56:	dd0a      	ble.n	800fa6e <scalbn+0x8e>
 800fa58:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800fa5c:	ec53 2b10 	vmov	r2, r3, d0
 800fa60:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800fa64:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800fa68:	ec43 2b10 	vmov	d0, r2, r3
 800fa6c:	4770      	bx	lr
 800fa6e:	f110 0f35 	cmn.w	r0, #53	; 0x35
 800fa72:	da09      	bge.n	800fa88 <scalbn+0xa8>
 800fa74:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800fab0 <scalbn+0xd0>
 800fa78:	ee10 3a90 	vmov	r3, s1
 800fa7c:	eeb0 6b47 	vmov.f64	d6, d7
 800fa80:	ed9f 5b11 	vldr	d5, [pc, #68]	; 800fac8 <scalbn+0xe8>
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	e7db      	b.n	800fa40 <scalbn+0x60>
 800fa88:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800fa8c:	ec53 2b10 	vmov	r2, r3, d0
 800fa90:	3036      	adds	r0, #54	; 0x36
 800fa92:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800fa96:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800fa9a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800fad0 <scalbn+0xf0>
 800fa9e:	ec43 2b10 	vmov	d0, r2, r3
 800faa2:	e7b1      	b.n	800fa08 <scalbn+0x28>
 800faa4:	f3af 8000 	nop.w
 800faa8:	00000000 	.word	0x00000000
 800faac:	43500000 	.word	0x43500000
 800fab0:	c2f8f359 	.word	0xc2f8f359
 800fab4:	01a56e1f 	.word	0x01a56e1f
 800fab8:	8800759c 	.word	0x8800759c
 800fabc:	7e37e43c 	.word	0x7e37e43c
 800fac0:	8800759c 	.word	0x8800759c
 800fac4:	fe37e43c 	.word	0xfe37e43c
 800fac8:	c2f8f359 	.word	0xc2f8f359
 800facc:	81a56e1f 	.word	0x81a56e1f
 800fad0:	00000000 	.word	0x00000000
 800fad4:	3c900000 	.word	0x3c900000
 800fad8:	ffff3cb0 	.word	0xffff3cb0
 800fadc:	00000000 	.word	0x00000000

0800fae0 <floor>:
 800fae0:	ee10 1a90 	vmov	r1, s1
 800fae4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fae8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800faec:	2b13      	cmp	r3, #19
 800faee:	b530      	push	{r4, r5, lr}
 800faf0:	ee10 0a10 	vmov	r0, s0
 800faf4:	ee10 5a10 	vmov	r5, s0
 800faf8:	dc31      	bgt.n	800fb5e <floor+0x7e>
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	da15      	bge.n	800fb2a <floor+0x4a>
 800fafe:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800fbc0 <floor+0xe0>
 800fb02:	ee30 0b07 	vadd.f64	d0, d0, d7
 800fb06:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fb0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb0e:	dd07      	ble.n	800fb20 <floor+0x40>
 800fb10:	2900      	cmp	r1, #0
 800fb12:	da4e      	bge.n	800fbb2 <floor+0xd2>
 800fb14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fb18:	4308      	orrs	r0, r1
 800fb1a:	d04d      	beq.n	800fbb8 <floor+0xd8>
 800fb1c:	492a      	ldr	r1, [pc, #168]	; (800fbc8 <floor+0xe8>)
 800fb1e:	2000      	movs	r0, #0
 800fb20:	460b      	mov	r3, r1
 800fb22:	4602      	mov	r2, r0
 800fb24:	ec43 2b10 	vmov	d0, r2, r3
 800fb28:	e020      	b.n	800fb6c <floor+0x8c>
 800fb2a:	4a28      	ldr	r2, [pc, #160]	; (800fbcc <floor+0xec>)
 800fb2c:	411a      	asrs	r2, r3
 800fb2e:	ea01 0402 	and.w	r4, r1, r2
 800fb32:	4304      	orrs	r4, r0
 800fb34:	d01a      	beq.n	800fb6c <floor+0x8c>
 800fb36:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800fbc0 <floor+0xe0>
 800fb3a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800fb3e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb46:	ddeb      	ble.n	800fb20 <floor+0x40>
 800fb48:	2900      	cmp	r1, #0
 800fb4a:	bfbe      	ittt	lt
 800fb4c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800fb50:	fa40 f303 	asrlt.w	r3, r0, r3
 800fb54:	18c9      	addlt	r1, r1, r3
 800fb56:	ea21 0102 	bic.w	r1, r1, r2
 800fb5a:	2000      	movs	r0, #0
 800fb5c:	e7e0      	b.n	800fb20 <floor+0x40>
 800fb5e:	2b33      	cmp	r3, #51	; 0x33
 800fb60:	dd05      	ble.n	800fb6e <floor+0x8e>
 800fb62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb66:	d101      	bne.n	800fb6c <floor+0x8c>
 800fb68:	ee30 0b00 	vadd.f64	d0, d0, d0
 800fb6c:	bd30      	pop	{r4, r5, pc}
 800fb6e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800fb72:	f04f 32ff 	mov.w	r2, #4294967295
 800fb76:	40e2      	lsrs	r2, r4
 800fb78:	4210      	tst	r0, r2
 800fb7a:	d0f7      	beq.n	800fb6c <floor+0x8c>
 800fb7c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800fbc0 <floor+0xe0>
 800fb80:	ee30 0b07 	vadd.f64	d0, d0, d7
 800fb84:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb8c:	ddc8      	ble.n	800fb20 <floor+0x40>
 800fb8e:	2900      	cmp	r1, #0
 800fb90:	da02      	bge.n	800fb98 <floor+0xb8>
 800fb92:	2b14      	cmp	r3, #20
 800fb94:	d103      	bne.n	800fb9e <floor+0xbe>
 800fb96:	3101      	adds	r1, #1
 800fb98:	ea20 0002 	bic.w	r0, r0, r2
 800fb9c:	e7c0      	b.n	800fb20 <floor+0x40>
 800fb9e:	2401      	movs	r4, #1
 800fba0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800fba4:	fa04 f303 	lsl.w	r3, r4, r3
 800fba8:	4418      	add	r0, r3
 800fbaa:	4285      	cmp	r5, r0
 800fbac:	bf88      	it	hi
 800fbae:	1909      	addhi	r1, r1, r4
 800fbb0:	e7f2      	b.n	800fb98 <floor+0xb8>
 800fbb2:	2000      	movs	r0, #0
 800fbb4:	4601      	mov	r1, r0
 800fbb6:	e7b3      	b.n	800fb20 <floor+0x40>
 800fbb8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800fbbc:	e7b0      	b.n	800fb20 <floor+0x40>
 800fbbe:	bf00      	nop
 800fbc0:	8800759c 	.word	0x8800759c
 800fbc4:	7e37e43c 	.word	0x7e37e43c
 800fbc8:	bff00000 	.word	0xbff00000
 800fbcc:	000fffff 	.word	0x000fffff

0800fbd0 <_init>:
 800fbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbd2:	bf00      	nop
 800fbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbd6:	bc08      	pop	{r3}
 800fbd8:	469e      	mov	lr, r3
 800fbda:	4770      	bx	lr

0800fbdc <_fini>:
 800fbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbde:	bf00      	nop
 800fbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbe2:	bc08      	pop	{r3}
 800fbe4:	469e      	mov	lr, r3
 800fbe6:	4770      	bx	lr
=======
 800f5d4:	f7fd fc9e 	bl	800cf14 <vPortExitCritical>
}
 800f5d8:	bf00      	nop
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}
 800f5de:	bf00      	nop
 800f5e0:	24005300 	.word	0x24005300
 800f5e4:	240052d0 	.word	0x240052d0
 800f5e8:	240052e4 	.word	0x240052e4
 800f5ec:	240052f8 	.word	0x240052f8
 800f5f0:	240052fc 	.word	0x240052fc
 800f5f4:	240053ac 	.word	0x240053ac
 800f5f8:	2400530c 	.word	0x2400530c
 800f5fc:	08013c80 	.word	0x08013c80

0800f600 <abs>:
 800f600:	2800      	cmp	r0, #0
 800f602:	bfb8      	it	lt
 800f604:	4240      	neglt	r0, r0
 800f606:	4770      	bx	lr

0800f608 <__errno>:
 800f608:	4b01      	ldr	r3, [pc, #4]	; (800f610 <__errno+0x8>)
 800f60a:	6818      	ldr	r0, [r3, #0]
 800f60c:	4770      	bx	lr
 800f60e:	bf00      	nop
 800f610:	2400001c 	.word	0x2400001c

0800f614 <std>:
 800f614:	2300      	movs	r3, #0
 800f616:	b510      	push	{r4, lr}
 800f618:	4604      	mov	r4, r0
 800f61a:	e9c0 3300 	strd	r3, r3, [r0]
 800f61e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f622:	6083      	str	r3, [r0, #8]
 800f624:	8181      	strh	r1, [r0, #12]
 800f626:	6643      	str	r3, [r0, #100]	; 0x64
 800f628:	81c2      	strh	r2, [r0, #14]
 800f62a:	6183      	str	r3, [r0, #24]
 800f62c:	4619      	mov	r1, r3
 800f62e:	2208      	movs	r2, #8
 800f630:	305c      	adds	r0, #92	; 0x5c
 800f632:	f000 f91a 	bl	800f86a <memset>
 800f636:	4b05      	ldr	r3, [pc, #20]	; (800f64c <std+0x38>)
 800f638:	6263      	str	r3, [r4, #36]	; 0x24
 800f63a:	4b05      	ldr	r3, [pc, #20]	; (800f650 <std+0x3c>)
 800f63c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f63e:	4b05      	ldr	r3, [pc, #20]	; (800f654 <std+0x40>)
 800f640:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f642:	4b05      	ldr	r3, [pc, #20]	; (800f658 <std+0x44>)
 800f644:	6224      	str	r4, [r4, #32]
 800f646:	6323      	str	r3, [r4, #48]	; 0x30
 800f648:	bd10      	pop	{r4, pc}
 800f64a:	bf00      	nop
 800f64c:	0801047d 	.word	0x0801047d
 800f650:	0801049f 	.word	0x0801049f
 800f654:	080104d7 	.word	0x080104d7
 800f658:	080104fb 	.word	0x080104fb

0800f65c <_cleanup_r>:
 800f65c:	4901      	ldr	r1, [pc, #4]	; (800f664 <_cleanup_r+0x8>)
 800f65e:	f000 b8af 	b.w	800f7c0 <_fwalk_reent>
 800f662:	bf00      	nop
 800f664:	080113c9 	.word	0x080113c9

0800f668 <__sfmoreglue>:
 800f668:	b570      	push	{r4, r5, r6, lr}
 800f66a:	2268      	movs	r2, #104	; 0x68
 800f66c:	1e4d      	subs	r5, r1, #1
 800f66e:	4355      	muls	r5, r2
 800f670:	460e      	mov	r6, r1
 800f672:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f676:	f000 f921 	bl	800f8bc <_malloc_r>
 800f67a:	4604      	mov	r4, r0
 800f67c:	b140      	cbz	r0, 800f690 <__sfmoreglue+0x28>
 800f67e:	2100      	movs	r1, #0
 800f680:	e9c0 1600 	strd	r1, r6, [r0]
 800f684:	300c      	adds	r0, #12
 800f686:	60a0      	str	r0, [r4, #8]
 800f688:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f68c:	f000 f8ed 	bl	800f86a <memset>
 800f690:	4620      	mov	r0, r4
 800f692:	bd70      	pop	{r4, r5, r6, pc}

0800f694 <__sfp_lock_acquire>:
 800f694:	4801      	ldr	r0, [pc, #4]	; (800f69c <__sfp_lock_acquire+0x8>)
 800f696:	f000 b8d8 	b.w	800f84a <__retarget_lock_acquire_recursive>
 800f69a:	bf00      	nop
 800f69c:	240053fd 	.word	0x240053fd

0800f6a0 <__sfp_lock_release>:
 800f6a0:	4801      	ldr	r0, [pc, #4]	; (800f6a8 <__sfp_lock_release+0x8>)
 800f6a2:	f000 b8d3 	b.w	800f84c <__retarget_lock_release_recursive>
 800f6a6:	bf00      	nop
 800f6a8:	240053fd 	.word	0x240053fd

0800f6ac <__sinit_lock_acquire>:
 800f6ac:	4801      	ldr	r0, [pc, #4]	; (800f6b4 <__sinit_lock_acquire+0x8>)
 800f6ae:	f000 b8cc 	b.w	800f84a <__retarget_lock_acquire_recursive>
 800f6b2:	bf00      	nop
 800f6b4:	240053fe 	.word	0x240053fe

0800f6b8 <__sinit_lock_release>:
 800f6b8:	4801      	ldr	r0, [pc, #4]	; (800f6c0 <__sinit_lock_release+0x8>)
 800f6ba:	f000 b8c7 	b.w	800f84c <__retarget_lock_release_recursive>
 800f6be:	bf00      	nop
 800f6c0:	240053fe 	.word	0x240053fe

0800f6c4 <__sinit>:
 800f6c4:	b510      	push	{r4, lr}
 800f6c6:	4604      	mov	r4, r0
 800f6c8:	f7ff fff0 	bl	800f6ac <__sinit_lock_acquire>
 800f6cc:	69a3      	ldr	r3, [r4, #24]
 800f6ce:	b11b      	cbz	r3, 800f6d8 <__sinit+0x14>
 800f6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6d4:	f7ff bff0 	b.w	800f6b8 <__sinit_lock_release>
 800f6d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f6dc:	6523      	str	r3, [r4, #80]	; 0x50
 800f6de:	4b13      	ldr	r3, [pc, #76]	; (800f72c <__sinit+0x68>)
 800f6e0:	4a13      	ldr	r2, [pc, #76]	; (800f730 <__sinit+0x6c>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800f6e6:	42a3      	cmp	r3, r4
 800f6e8:	bf04      	itt	eq
 800f6ea:	2301      	moveq	r3, #1
 800f6ec:	61a3      	streq	r3, [r4, #24]
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	f000 f820 	bl	800f734 <__sfp>
 800f6f4:	6060      	str	r0, [r4, #4]
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f000 f81c 	bl	800f734 <__sfp>
 800f6fc:	60a0      	str	r0, [r4, #8]
 800f6fe:	4620      	mov	r0, r4
 800f700:	f000 f818 	bl	800f734 <__sfp>
 800f704:	2200      	movs	r2, #0
 800f706:	60e0      	str	r0, [r4, #12]
 800f708:	2104      	movs	r1, #4
 800f70a:	6860      	ldr	r0, [r4, #4]
 800f70c:	f7ff ff82 	bl	800f614 <std>
 800f710:	68a0      	ldr	r0, [r4, #8]
 800f712:	2201      	movs	r2, #1
 800f714:	2109      	movs	r1, #9
 800f716:	f7ff ff7d 	bl	800f614 <std>
 800f71a:	68e0      	ldr	r0, [r4, #12]
 800f71c:	2202      	movs	r2, #2
 800f71e:	2112      	movs	r1, #18
 800f720:	f7ff ff78 	bl	800f614 <std>
 800f724:	2301      	movs	r3, #1
 800f726:	61a3      	str	r3, [r4, #24]
 800f728:	e7d2      	b.n	800f6d0 <__sinit+0xc>
 800f72a:	bf00      	nop
 800f72c:	08013ea4 	.word	0x08013ea4
 800f730:	0800f65d 	.word	0x0800f65d

0800f734 <__sfp>:
 800f734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f736:	4607      	mov	r7, r0
 800f738:	f7ff ffac 	bl	800f694 <__sfp_lock_acquire>
 800f73c:	4b1e      	ldr	r3, [pc, #120]	; (800f7b8 <__sfp+0x84>)
 800f73e:	681e      	ldr	r6, [r3, #0]
 800f740:	69b3      	ldr	r3, [r6, #24]
 800f742:	b913      	cbnz	r3, 800f74a <__sfp+0x16>
 800f744:	4630      	mov	r0, r6
 800f746:	f7ff ffbd 	bl	800f6c4 <__sinit>
 800f74a:	3648      	adds	r6, #72	; 0x48
 800f74c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f750:	3b01      	subs	r3, #1
 800f752:	d503      	bpl.n	800f75c <__sfp+0x28>
 800f754:	6833      	ldr	r3, [r6, #0]
 800f756:	b30b      	cbz	r3, 800f79c <__sfp+0x68>
 800f758:	6836      	ldr	r6, [r6, #0]
 800f75a:	e7f7      	b.n	800f74c <__sfp+0x18>
 800f75c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f760:	b9d5      	cbnz	r5, 800f798 <__sfp+0x64>
 800f762:	4b16      	ldr	r3, [pc, #88]	; (800f7bc <__sfp+0x88>)
 800f764:	60e3      	str	r3, [r4, #12]
 800f766:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f76a:	6665      	str	r5, [r4, #100]	; 0x64
 800f76c:	f000 f86c 	bl	800f848 <__retarget_lock_init_recursive>
 800f770:	f7ff ff96 	bl	800f6a0 <__sfp_lock_release>
 800f774:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f778:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f77c:	6025      	str	r5, [r4, #0]
 800f77e:	61a5      	str	r5, [r4, #24]
 800f780:	2208      	movs	r2, #8
 800f782:	4629      	mov	r1, r5
 800f784:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f788:	f000 f86f 	bl	800f86a <memset>
 800f78c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f790:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f794:	4620      	mov	r0, r4
 800f796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f798:	3468      	adds	r4, #104	; 0x68
 800f79a:	e7d9      	b.n	800f750 <__sfp+0x1c>
 800f79c:	2104      	movs	r1, #4
 800f79e:	4638      	mov	r0, r7
 800f7a0:	f7ff ff62 	bl	800f668 <__sfmoreglue>
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	6030      	str	r0, [r6, #0]
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	d1d5      	bne.n	800f758 <__sfp+0x24>
 800f7ac:	f7ff ff78 	bl	800f6a0 <__sfp_lock_release>
 800f7b0:	230c      	movs	r3, #12
 800f7b2:	603b      	str	r3, [r7, #0]
 800f7b4:	e7ee      	b.n	800f794 <__sfp+0x60>
 800f7b6:	bf00      	nop
 800f7b8:	08013ea4 	.word	0x08013ea4
 800f7bc:	ffff0001 	.word	0xffff0001

0800f7c0 <_fwalk_reent>:
 800f7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7c4:	4606      	mov	r6, r0
 800f7c6:	4688      	mov	r8, r1
 800f7c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f7cc:	2700      	movs	r7, #0
 800f7ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f7d2:	f1b9 0901 	subs.w	r9, r9, #1
 800f7d6:	d505      	bpl.n	800f7e4 <_fwalk_reent+0x24>
 800f7d8:	6824      	ldr	r4, [r4, #0]
 800f7da:	2c00      	cmp	r4, #0
 800f7dc:	d1f7      	bne.n	800f7ce <_fwalk_reent+0xe>
 800f7de:	4638      	mov	r0, r7
 800f7e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7e4:	89ab      	ldrh	r3, [r5, #12]
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d907      	bls.n	800f7fa <_fwalk_reent+0x3a>
 800f7ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	d003      	beq.n	800f7fa <_fwalk_reent+0x3a>
 800f7f2:	4629      	mov	r1, r5
 800f7f4:	4630      	mov	r0, r6
 800f7f6:	47c0      	blx	r8
 800f7f8:	4307      	orrs	r7, r0
 800f7fa:	3568      	adds	r5, #104	; 0x68
 800f7fc:	e7e9      	b.n	800f7d2 <_fwalk_reent+0x12>
	...

0800f800 <__libc_init_array>:
 800f800:	b570      	push	{r4, r5, r6, lr}
 800f802:	4d0d      	ldr	r5, [pc, #52]	; (800f838 <__libc_init_array+0x38>)
 800f804:	4c0d      	ldr	r4, [pc, #52]	; (800f83c <__libc_init_array+0x3c>)
 800f806:	1b64      	subs	r4, r4, r5
 800f808:	10a4      	asrs	r4, r4, #2
 800f80a:	2600      	movs	r6, #0
 800f80c:	42a6      	cmp	r6, r4
 800f80e:	d109      	bne.n	800f824 <__libc_init_array+0x24>
 800f810:	4d0b      	ldr	r5, [pc, #44]	; (800f840 <__libc_init_array+0x40>)
 800f812:	4c0c      	ldr	r4, [pc, #48]	; (800f844 <__libc_init_array+0x44>)
 800f814:	f003 fe62 	bl	80134dc <_init>
 800f818:	1b64      	subs	r4, r4, r5
 800f81a:	10a4      	asrs	r4, r4, #2
 800f81c:	2600      	movs	r6, #0
 800f81e:	42a6      	cmp	r6, r4
 800f820:	d105      	bne.n	800f82e <__libc_init_array+0x2e>
 800f822:	bd70      	pop	{r4, r5, r6, pc}
 800f824:	f855 3b04 	ldr.w	r3, [r5], #4
 800f828:	4798      	blx	r3
 800f82a:	3601      	adds	r6, #1
 800f82c:	e7ee      	b.n	800f80c <__libc_init_array+0xc>
 800f82e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f832:	4798      	blx	r3
 800f834:	3601      	adds	r6, #1
 800f836:	e7f2      	b.n	800f81e <__libc_init_array+0x1e>
 800f838:	08014470 	.word	0x08014470
 800f83c:	08014470 	.word	0x08014470
 800f840:	08014470 	.word	0x08014470
 800f844:	08014474 	.word	0x08014474

0800f848 <__retarget_lock_init_recursive>:
 800f848:	4770      	bx	lr

0800f84a <__retarget_lock_acquire_recursive>:
 800f84a:	4770      	bx	lr

0800f84c <__retarget_lock_release_recursive>:
 800f84c:	4770      	bx	lr

0800f84e <memcpy>:
 800f84e:	440a      	add	r2, r1
 800f850:	4291      	cmp	r1, r2
 800f852:	f100 33ff 	add.w	r3, r0, #4294967295
 800f856:	d100      	bne.n	800f85a <memcpy+0xc>
 800f858:	4770      	bx	lr
 800f85a:	b510      	push	{r4, lr}
 800f85c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f860:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f864:	4291      	cmp	r1, r2
 800f866:	d1f9      	bne.n	800f85c <memcpy+0xe>
 800f868:	bd10      	pop	{r4, pc}

0800f86a <memset>:
 800f86a:	4402      	add	r2, r0
 800f86c:	4603      	mov	r3, r0
 800f86e:	4293      	cmp	r3, r2
 800f870:	d100      	bne.n	800f874 <memset+0xa>
 800f872:	4770      	bx	lr
 800f874:	f803 1b01 	strb.w	r1, [r3], #1
 800f878:	e7f9      	b.n	800f86e <memset+0x4>
	...

0800f87c <sbrk_aligned>:
 800f87c:	b570      	push	{r4, r5, r6, lr}
 800f87e:	4e0e      	ldr	r6, [pc, #56]	; (800f8b8 <sbrk_aligned+0x3c>)
 800f880:	460c      	mov	r4, r1
 800f882:	6831      	ldr	r1, [r6, #0]
 800f884:	4605      	mov	r5, r0
 800f886:	b911      	cbnz	r1, 800f88e <sbrk_aligned+0x12>
 800f888:	f000 fdc8 	bl	801041c <_sbrk_r>
 800f88c:	6030      	str	r0, [r6, #0]
 800f88e:	4621      	mov	r1, r4
 800f890:	4628      	mov	r0, r5
 800f892:	f000 fdc3 	bl	801041c <_sbrk_r>
 800f896:	1c43      	adds	r3, r0, #1
 800f898:	d00a      	beq.n	800f8b0 <sbrk_aligned+0x34>
 800f89a:	1cc4      	adds	r4, r0, #3
 800f89c:	f024 0403 	bic.w	r4, r4, #3
 800f8a0:	42a0      	cmp	r0, r4
 800f8a2:	d007      	beq.n	800f8b4 <sbrk_aligned+0x38>
 800f8a4:	1a21      	subs	r1, r4, r0
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	f000 fdb8 	bl	801041c <_sbrk_r>
 800f8ac:	3001      	adds	r0, #1
 800f8ae:	d101      	bne.n	800f8b4 <sbrk_aligned+0x38>
 800f8b0:	f04f 34ff 	mov.w	r4, #4294967295
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	bd70      	pop	{r4, r5, r6, pc}
 800f8b8:	24005404 	.word	0x24005404

0800f8bc <_malloc_r>:
 800f8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c0:	1ccd      	adds	r5, r1, #3
 800f8c2:	f025 0503 	bic.w	r5, r5, #3
 800f8c6:	3508      	adds	r5, #8
 800f8c8:	2d0c      	cmp	r5, #12
 800f8ca:	bf38      	it	cc
 800f8cc:	250c      	movcc	r5, #12
 800f8ce:	2d00      	cmp	r5, #0
 800f8d0:	4607      	mov	r7, r0
 800f8d2:	db01      	blt.n	800f8d8 <_malloc_r+0x1c>
 800f8d4:	42a9      	cmp	r1, r5
 800f8d6:	d905      	bls.n	800f8e4 <_malloc_r+0x28>
 800f8d8:	230c      	movs	r3, #12
 800f8da:	603b      	str	r3, [r7, #0]
 800f8dc:	2600      	movs	r6, #0
 800f8de:	4630      	mov	r0, r6
 800f8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8e4:	4e2e      	ldr	r6, [pc, #184]	; (800f9a0 <_malloc_r+0xe4>)
 800f8e6:	f001 fe2f 	bl	8011548 <__malloc_lock>
 800f8ea:	6833      	ldr	r3, [r6, #0]
 800f8ec:	461c      	mov	r4, r3
 800f8ee:	bb34      	cbnz	r4, 800f93e <_malloc_r+0x82>
 800f8f0:	4629      	mov	r1, r5
 800f8f2:	4638      	mov	r0, r7
 800f8f4:	f7ff ffc2 	bl	800f87c <sbrk_aligned>
 800f8f8:	1c43      	adds	r3, r0, #1
 800f8fa:	4604      	mov	r4, r0
 800f8fc:	d14d      	bne.n	800f99a <_malloc_r+0xde>
 800f8fe:	6834      	ldr	r4, [r6, #0]
 800f900:	4626      	mov	r6, r4
 800f902:	2e00      	cmp	r6, #0
 800f904:	d140      	bne.n	800f988 <_malloc_r+0xcc>
 800f906:	6823      	ldr	r3, [r4, #0]
 800f908:	4631      	mov	r1, r6
 800f90a:	4638      	mov	r0, r7
 800f90c:	eb04 0803 	add.w	r8, r4, r3
 800f910:	f000 fd84 	bl	801041c <_sbrk_r>
 800f914:	4580      	cmp	r8, r0
 800f916:	d13a      	bne.n	800f98e <_malloc_r+0xd2>
 800f918:	6821      	ldr	r1, [r4, #0]
 800f91a:	3503      	adds	r5, #3
 800f91c:	1a6d      	subs	r5, r5, r1
 800f91e:	f025 0503 	bic.w	r5, r5, #3
 800f922:	3508      	adds	r5, #8
 800f924:	2d0c      	cmp	r5, #12
 800f926:	bf38      	it	cc
 800f928:	250c      	movcc	r5, #12
 800f92a:	4629      	mov	r1, r5
 800f92c:	4638      	mov	r0, r7
 800f92e:	f7ff ffa5 	bl	800f87c <sbrk_aligned>
 800f932:	3001      	adds	r0, #1
 800f934:	d02b      	beq.n	800f98e <_malloc_r+0xd2>
 800f936:	6823      	ldr	r3, [r4, #0]
 800f938:	442b      	add	r3, r5
 800f93a:	6023      	str	r3, [r4, #0]
 800f93c:	e00e      	b.n	800f95c <_malloc_r+0xa0>
 800f93e:	6822      	ldr	r2, [r4, #0]
 800f940:	1b52      	subs	r2, r2, r5
 800f942:	d41e      	bmi.n	800f982 <_malloc_r+0xc6>
 800f944:	2a0b      	cmp	r2, #11
 800f946:	d916      	bls.n	800f976 <_malloc_r+0xba>
 800f948:	1961      	adds	r1, r4, r5
 800f94a:	42a3      	cmp	r3, r4
 800f94c:	6025      	str	r5, [r4, #0]
 800f94e:	bf18      	it	ne
 800f950:	6059      	strne	r1, [r3, #4]
 800f952:	6863      	ldr	r3, [r4, #4]
 800f954:	bf08      	it	eq
 800f956:	6031      	streq	r1, [r6, #0]
 800f958:	5162      	str	r2, [r4, r5]
 800f95a:	604b      	str	r3, [r1, #4]
 800f95c:	4638      	mov	r0, r7
 800f95e:	f104 060b 	add.w	r6, r4, #11
 800f962:	f001 fdf7 	bl	8011554 <__malloc_unlock>
 800f966:	f026 0607 	bic.w	r6, r6, #7
 800f96a:	1d23      	adds	r3, r4, #4
 800f96c:	1af2      	subs	r2, r6, r3
 800f96e:	d0b6      	beq.n	800f8de <_malloc_r+0x22>
 800f970:	1b9b      	subs	r3, r3, r6
 800f972:	50a3      	str	r3, [r4, r2]
 800f974:	e7b3      	b.n	800f8de <_malloc_r+0x22>
 800f976:	6862      	ldr	r2, [r4, #4]
 800f978:	42a3      	cmp	r3, r4
 800f97a:	bf0c      	ite	eq
 800f97c:	6032      	streq	r2, [r6, #0]
 800f97e:	605a      	strne	r2, [r3, #4]
 800f980:	e7ec      	b.n	800f95c <_malloc_r+0xa0>
 800f982:	4623      	mov	r3, r4
 800f984:	6864      	ldr	r4, [r4, #4]
 800f986:	e7b2      	b.n	800f8ee <_malloc_r+0x32>
 800f988:	4634      	mov	r4, r6
 800f98a:	6876      	ldr	r6, [r6, #4]
 800f98c:	e7b9      	b.n	800f902 <_malloc_r+0x46>
 800f98e:	230c      	movs	r3, #12
 800f990:	603b      	str	r3, [r7, #0]
 800f992:	4638      	mov	r0, r7
 800f994:	f001 fdde 	bl	8011554 <__malloc_unlock>
 800f998:	e7a1      	b.n	800f8de <_malloc_r+0x22>
 800f99a:	6025      	str	r5, [r4, #0]
 800f99c:	e7de      	b.n	800f95c <_malloc_r+0xa0>
 800f99e:	bf00      	nop
 800f9a0:	24005400 	.word	0x24005400

0800f9a4 <__cvt>:
 800f9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9a6:	ed2d 8b02 	vpush	{d8}
 800f9aa:	eeb0 8b40 	vmov.f64	d8, d0
 800f9ae:	b085      	sub	sp, #20
 800f9b0:	4617      	mov	r7, r2
 800f9b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f9b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f9b6:	ee18 2a90 	vmov	r2, s17
 800f9ba:	f025 0520 	bic.w	r5, r5, #32
 800f9be:	2a00      	cmp	r2, #0
 800f9c0:	bfb6      	itet	lt
 800f9c2:	222d      	movlt	r2, #45	; 0x2d
 800f9c4:	2200      	movge	r2, #0
 800f9c6:	eeb1 8b40 	vneglt.f64	d8, d0
 800f9ca:	2d46      	cmp	r5, #70	; 0x46
 800f9cc:	460c      	mov	r4, r1
 800f9ce:	701a      	strb	r2, [r3, #0]
 800f9d0:	d004      	beq.n	800f9dc <__cvt+0x38>
 800f9d2:	2d45      	cmp	r5, #69	; 0x45
 800f9d4:	d100      	bne.n	800f9d8 <__cvt+0x34>
 800f9d6:	3401      	adds	r4, #1
 800f9d8:	2102      	movs	r1, #2
 800f9da:	e000      	b.n	800f9de <__cvt+0x3a>
 800f9dc:	2103      	movs	r1, #3
 800f9de:	ab03      	add	r3, sp, #12
 800f9e0:	9301      	str	r3, [sp, #4]
 800f9e2:	ab02      	add	r3, sp, #8
 800f9e4:	9300      	str	r3, [sp, #0]
 800f9e6:	4622      	mov	r2, r4
 800f9e8:	4633      	mov	r3, r6
 800f9ea:	eeb0 0b48 	vmov.f64	d0, d8
 800f9ee:	f000 fef7 	bl	80107e0 <_dtoa_r>
 800f9f2:	2d47      	cmp	r5, #71	; 0x47
 800f9f4:	d101      	bne.n	800f9fa <__cvt+0x56>
 800f9f6:	07fb      	lsls	r3, r7, #31
 800f9f8:	d51a      	bpl.n	800fa30 <__cvt+0x8c>
 800f9fa:	2d46      	cmp	r5, #70	; 0x46
 800f9fc:	eb00 0204 	add.w	r2, r0, r4
 800fa00:	d10c      	bne.n	800fa1c <__cvt+0x78>
 800fa02:	7803      	ldrb	r3, [r0, #0]
 800fa04:	2b30      	cmp	r3, #48	; 0x30
 800fa06:	d107      	bne.n	800fa18 <__cvt+0x74>
 800fa08:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fa0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa10:	bf1c      	itt	ne
 800fa12:	f1c4 0401 	rsbne	r4, r4, #1
 800fa16:	6034      	strne	r4, [r6, #0]
 800fa18:	6833      	ldr	r3, [r6, #0]
 800fa1a:	441a      	add	r2, r3
 800fa1c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fa20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa24:	bf08      	it	eq
 800fa26:	9203      	streq	r2, [sp, #12]
 800fa28:	2130      	movs	r1, #48	; 0x30
 800fa2a:	9b03      	ldr	r3, [sp, #12]
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	d307      	bcc.n	800fa40 <__cvt+0x9c>
 800fa30:	9b03      	ldr	r3, [sp, #12]
 800fa32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa34:	1a1b      	subs	r3, r3, r0
 800fa36:	6013      	str	r3, [r2, #0]
 800fa38:	b005      	add	sp, #20
 800fa3a:	ecbd 8b02 	vpop	{d8}
 800fa3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa40:	1c5c      	adds	r4, r3, #1
 800fa42:	9403      	str	r4, [sp, #12]
 800fa44:	7019      	strb	r1, [r3, #0]
 800fa46:	e7f0      	b.n	800fa2a <__cvt+0x86>

0800fa48 <__exponent>:
 800fa48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	2900      	cmp	r1, #0
 800fa4e:	bfb8      	it	lt
 800fa50:	4249      	neglt	r1, r1
 800fa52:	f803 2b02 	strb.w	r2, [r3], #2
 800fa56:	bfb4      	ite	lt
 800fa58:	222d      	movlt	r2, #45	; 0x2d
 800fa5a:	222b      	movge	r2, #43	; 0x2b
 800fa5c:	2909      	cmp	r1, #9
 800fa5e:	7042      	strb	r2, [r0, #1]
 800fa60:	dd2a      	ble.n	800fab8 <__exponent+0x70>
 800fa62:	f10d 0407 	add.w	r4, sp, #7
 800fa66:	46a4      	mov	ip, r4
 800fa68:	270a      	movs	r7, #10
 800fa6a:	46a6      	mov	lr, r4
 800fa6c:	460a      	mov	r2, r1
 800fa6e:	fb91 f6f7 	sdiv	r6, r1, r7
 800fa72:	fb07 1516 	mls	r5, r7, r6, r1
 800fa76:	3530      	adds	r5, #48	; 0x30
 800fa78:	2a63      	cmp	r2, #99	; 0x63
 800fa7a:	f104 34ff 	add.w	r4, r4, #4294967295
 800fa7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fa82:	4631      	mov	r1, r6
 800fa84:	dcf1      	bgt.n	800fa6a <__exponent+0x22>
 800fa86:	3130      	adds	r1, #48	; 0x30
 800fa88:	f1ae 0502 	sub.w	r5, lr, #2
 800fa8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fa90:	1c44      	adds	r4, r0, #1
 800fa92:	4629      	mov	r1, r5
 800fa94:	4561      	cmp	r1, ip
 800fa96:	d30a      	bcc.n	800faae <__exponent+0x66>
 800fa98:	f10d 0209 	add.w	r2, sp, #9
 800fa9c:	eba2 020e 	sub.w	r2, r2, lr
 800faa0:	4565      	cmp	r5, ip
 800faa2:	bf88      	it	hi
 800faa4:	2200      	movhi	r2, #0
 800faa6:	4413      	add	r3, r2
 800faa8:	1a18      	subs	r0, r3, r0
 800faaa:	b003      	add	sp, #12
 800faac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fab2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fab6:	e7ed      	b.n	800fa94 <__exponent+0x4c>
 800fab8:	2330      	movs	r3, #48	; 0x30
 800faba:	3130      	adds	r1, #48	; 0x30
 800fabc:	7083      	strb	r3, [r0, #2]
 800fabe:	70c1      	strb	r1, [r0, #3]
 800fac0:	1d03      	adds	r3, r0, #4
 800fac2:	e7f1      	b.n	800faa8 <__exponent+0x60>
 800fac4:	0000      	movs	r0, r0
	...

0800fac8 <_printf_float>:
 800fac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800facc:	b08b      	sub	sp, #44	; 0x2c
 800face:	460c      	mov	r4, r1
 800fad0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800fad4:	4616      	mov	r6, r2
 800fad6:	461f      	mov	r7, r3
 800fad8:	4605      	mov	r5, r0
 800fada:	f001 fcb1 	bl	8011440 <_localeconv_r>
 800fade:	f8d0 b000 	ldr.w	fp, [r0]
 800fae2:	4658      	mov	r0, fp
 800fae4:	f7f0 fbfc 	bl	80002e0 <strlen>
 800fae8:	2300      	movs	r3, #0
 800faea:	9308      	str	r3, [sp, #32]
 800faec:	f8d8 3000 	ldr.w	r3, [r8]
 800faf0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800faf4:	6822      	ldr	r2, [r4, #0]
 800faf6:	3307      	adds	r3, #7
 800faf8:	f023 0307 	bic.w	r3, r3, #7
 800fafc:	f103 0108 	add.w	r1, r3, #8
 800fb00:	f8c8 1000 	str.w	r1, [r8]
 800fb04:	4682      	mov	sl, r0
 800fb06:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fb0a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800fb0e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800fd70 <_printf_float+0x2a8>
 800fb12:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800fb16:	eeb0 6bc0 	vabs.f64	d6, d0
 800fb1a:	eeb4 6b47 	vcmp.f64	d6, d7
 800fb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb22:	dd24      	ble.n	800fb6e <_printf_float+0xa6>
 800fb24:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fb28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb2c:	d502      	bpl.n	800fb34 <_printf_float+0x6c>
 800fb2e:	232d      	movs	r3, #45	; 0x2d
 800fb30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb34:	4b90      	ldr	r3, [pc, #576]	; (800fd78 <_printf_float+0x2b0>)
 800fb36:	4891      	ldr	r0, [pc, #580]	; (800fd7c <_printf_float+0x2b4>)
 800fb38:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fb3c:	bf94      	ite	ls
 800fb3e:	4698      	movls	r8, r3
 800fb40:	4680      	movhi	r8, r0
 800fb42:	2303      	movs	r3, #3
 800fb44:	6123      	str	r3, [r4, #16]
 800fb46:	f022 0204 	bic.w	r2, r2, #4
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	6022      	str	r2, [r4, #0]
 800fb4e:	9304      	str	r3, [sp, #16]
 800fb50:	9700      	str	r7, [sp, #0]
 800fb52:	4633      	mov	r3, r6
 800fb54:	aa09      	add	r2, sp, #36	; 0x24
 800fb56:	4621      	mov	r1, r4
 800fb58:	4628      	mov	r0, r5
 800fb5a:	f000 f9d3 	bl	800ff04 <_printf_common>
 800fb5e:	3001      	adds	r0, #1
 800fb60:	f040 808a 	bne.w	800fc78 <_printf_float+0x1b0>
 800fb64:	f04f 30ff 	mov.w	r0, #4294967295
 800fb68:	b00b      	add	sp, #44	; 0x2c
 800fb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb6e:	eeb4 0b40 	vcmp.f64	d0, d0
 800fb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb76:	d709      	bvc.n	800fb8c <_printf_float+0xc4>
 800fb78:	ee10 3a90 	vmov	r3, s1
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	bfbc      	itt	lt
 800fb80:	232d      	movlt	r3, #45	; 0x2d
 800fb82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fb86:	487e      	ldr	r0, [pc, #504]	; (800fd80 <_printf_float+0x2b8>)
 800fb88:	4b7e      	ldr	r3, [pc, #504]	; (800fd84 <_printf_float+0x2bc>)
 800fb8a:	e7d5      	b.n	800fb38 <_printf_float+0x70>
 800fb8c:	6863      	ldr	r3, [r4, #4]
 800fb8e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800fb92:	9104      	str	r1, [sp, #16]
 800fb94:	1c59      	adds	r1, r3, #1
 800fb96:	d13c      	bne.n	800fc12 <_printf_float+0x14a>
 800fb98:	2306      	movs	r3, #6
 800fb9a:	6063      	str	r3, [r4, #4]
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	9303      	str	r3, [sp, #12]
 800fba0:	ab08      	add	r3, sp, #32
 800fba2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fba6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fbaa:	ab07      	add	r3, sp, #28
 800fbac:	6861      	ldr	r1, [r4, #4]
 800fbae:	9300      	str	r3, [sp, #0]
 800fbb0:	6022      	str	r2, [r4, #0]
 800fbb2:	f10d 031b 	add.w	r3, sp, #27
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	f7ff fef4 	bl	800f9a4 <__cvt>
 800fbbc:	9b04      	ldr	r3, [sp, #16]
 800fbbe:	9907      	ldr	r1, [sp, #28]
 800fbc0:	2b47      	cmp	r3, #71	; 0x47
 800fbc2:	4680      	mov	r8, r0
 800fbc4:	d108      	bne.n	800fbd8 <_printf_float+0x110>
 800fbc6:	1cc8      	adds	r0, r1, #3
 800fbc8:	db02      	blt.n	800fbd0 <_printf_float+0x108>
 800fbca:	6863      	ldr	r3, [r4, #4]
 800fbcc:	4299      	cmp	r1, r3
 800fbce:	dd41      	ble.n	800fc54 <_printf_float+0x18c>
 800fbd0:	f1a9 0902 	sub.w	r9, r9, #2
 800fbd4:	fa5f f989 	uxtb.w	r9, r9
 800fbd8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fbdc:	d820      	bhi.n	800fc20 <_printf_float+0x158>
 800fbde:	3901      	subs	r1, #1
 800fbe0:	464a      	mov	r2, r9
 800fbe2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fbe6:	9107      	str	r1, [sp, #28]
 800fbe8:	f7ff ff2e 	bl	800fa48 <__exponent>
 800fbec:	9a08      	ldr	r2, [sp, #32]
 800fbee:	9004      	str	r0, [sp, #16]
 800fbf0:	1813      	adds	r3, r2, r0
 800fbf2:	2a01      	cmp	r2, #1
 800fbf4:	6123      	str	r3, [r4, #16]
 800fbf6:	dc02      	bgt.n	800fbfe <_printf_float+0x136>
 800fbf8:	6822      	ldr	r2, [r4, #0]
 800fbfa:	07d2      	lsls	r2, r2, #31
 800fbfc:	d501      	bpl.n	800fc02 <_printf_float+0x13a>
 800fbfe:	3301      	adds	r3, #1
 800fc00:	6123      	str	r3, [r4, #16]
 800fc02:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d0a2      	beq.n	800fb50 <_printf_float+0x88>
 800fc0a:	232d      	movs	r3, #45	; 0x2d
 800fc0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc10:	e79e      	b.n	800fb50 <_printf_float+0x88>
 800fc12:	9904      	ldr	r1, [sp, #16]
 800fc14:	2947      	cmp	r1, #71	; 0x47
 800fc16:	d1c1      	bne.n	800fb9c <_printf_float+0xd4>
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d1bf      	bne.n	800fb9c <_printf_float+0xd4>
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	e7bc      	b.n	800fb9a <_printf_float+0xd2>
 800fc20:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800fc24:	d118      	bne.n	800fc58 <_printf_float+0x190>
 800fc26:	2900      	cmp	r1, #0
 800fc28:	6863      	ldr	r3, [r4, #4]
 800fc2a:	dd0b      	ble.n	800fc44 <_printf_float+0x17c>
 800fc2c:	6121      	str	r1, [r4, #16]
 800fc2e:	b913      	cbnz	r3, 800fc36 <_printf_float+0x16e>
 800fc30:	6822      	ldr	r2, [r4, #0]
 800fc32:	07d0      	lsls	r0, r2, #31
 800fc34:	d502      	bpl.n	800fc3c <_printf_float+0x174>
 800fc36:	3301      	adds	r3, #1
 800fc38:	440b      	add	r3, r1
 800fc3a:	6123      	str	r3, [r4, #16]
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	65a1      	str	r1, [r4, #88]	; 0x58
 800fc40:	9304      	str	r3, [sp, #16]
 800fc42:	e7de      	b.n	800fc02 <_printf_float+0x13a>
 800fc44:	b913      	cbnz	r3, 800fc4c <_printf_float+0x184>
 800fc46:	6822      	ldr	r2, [r4, #0]
 800fc48:	07d2      	lsls	r2, r2, #31
 800fc4a:	d501      	bpl.n	800fc50 <_printf_float+0x188>
 800fc4c:	3302      	adds	r3, #2
 800fc4e:	e7f4      	b.n	800fc3a <_printf_float+0x172>
 800fc50:	2301      	movs	r3, #1
 800fc52:	e7f2      	b.n	800fc3a <_printf_float+0x172>
 800fc54:	f04f 0967 	mov.w	r9, #103	; 0x67
 800fc58:	9b08      	ldr	r3, [sp, #32]
 800fc5a:	4299      	cmp	r1, r3
 800fc5c:	db05      	blt.n	800fc6a <_printf_float+0x1a2>
 800fc5e:	6823      	ldr	r3, [r4, #0]
 800fc60:	6121      	str	r1, [r4, #16]
 800fc62:	07d8      	lsls	r0, r3, #31
 800fc64:	d5ea      	bpl.n	800fc3c <_printf_float+0x174>
 800fc66:	1c4b      	adds	r3, r1, #1
 800fc68:	e7e7      	b.n	800fc3a <_printf_float+0x172>
 800fc6a:	2900      	cmp	r1, #0
 800fc6c:	bfd4      	ite	le
 800fc6e:	f1c1 0202 	rsble	r2, r1, #2
 800fc72:	2201      	movgt	r2, #1
 800fc74:	4413      	add	r3, r2
 800fc76:	e7e0      	b.n	800fc3a <_printf_float+0x172>
 800fc78:	6823      	ldr	r3, [r4, #0]
 800fc7a:	055a      	lsls	r2, r3, #21
 800fc7c:	d407      	bmi.n	800fc8e <_printf_float+0x1c6>
 800fc7e:	6923      	ldr	r3, [r4, #16]
 800fc80:	4642      	mov	r2, r8
 800fc82:	4631      	mov	r1, r6
 800fc84:	4628      	mov	r0, r5
 800fc86:	47b8      	blx	r7
 800fc88:	3001      	adds	r0, #1
 800fc8a:	d12a      	bne.n	800fce2 <_printf_float+0x21a>
 800fc8c:	e76a      	b.n	800fb64 <_printf_float+0x9c>
 800fc8e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fc92:	f240 80e2 	bls.w	800fe5a <_printf_float+0x392>
 800fc96:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800fc9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fca2:	d133      	bne.n	800fd0c <_printf_float+0x244>
 800fca4:	4a38      	ldr	r2, [pc, #224]	; (800fd88 <_printf_float+0x2c0>)
 800fca6:	2301      	movs	r3, #1
 800fca8:	4631      	mov	r1, r6
 800fcaa:	4628      	mov	r0, r5
 800fcac:	47b8      	blx	r7
 800fcae:	3001      	adds	r0, #1
 800fcb0:	f43f af58 	beq.w	800fb64 <_printf_float+0x9c>
 800fcb4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	db02      	blt.n	800fcc2 <_printf_float+0x1fa>
 800fcbc:	6823      	ldr	r3, [r4, #0]
 800fcbe:	07d8      	lsls	r0, r3, #31
 800fcc0:	d50f      	bpl.n	800fce2 <_printf_float+0x21a>
 800fcc2:	4653      	mov	r3, sl
 800fcc4:	465a      	mov	r2, fp
 800fcc6:	4631      	mov	r1, r6
 800fcc8:	4628      	mov	r0, r5
 800fcca:	47b8      	blx	r7
 800fccc:	3001      	adds	r0, #1
 800fcce:	f43f af49 	beq.w	800fb64 <_printf_float+0x9c>
 800fcd2:	f04f 0800 	mov.w	r8, #0
 800fcd6:	f104 091a 	add.w	r9, r4, #26
 800fcda:	9b08      	ldr	r3, [sp, #32]
 800fcdc:	3b01      	subs	r3, #1
 800fcde:	4543      	cmp	r3, r8
 800fce0:	dc09      	bgt.n	800fcf6 <_printf_float+0x22e>
 800fce2:	6823      	ldr	r3, [r4, #0]
 800fce4:	079b      	lsls	r3, r3, #30
 800fce6:	f100 8108 	bmi.w	800fefa <_printf_float+0x432>
 800fcea:	68e0      	ldr	r0, [r4, #12]
 800fcec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcee:	4298      	cmp	r0, r3
 800fcf0:	bfb8      	it	lt
 800fcf2:	4618      	movlt	r0, r3
 800fcf4:	e738      	b.n	800fb68 <_printf_float+0xa0>
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	464a      	mov	r2, r9
 800fcfa:	4631      	mov	r1, r6
 800fcfc:	4628      	mov	r0, r5
 800fcfe:	47b8      	blx	r7
 800fd00:	3001      	adds	r0, #1
 800fd02:	f43f af2f 	beq.w	800fb64 <_printf_float+0x9c>
 800fd06:	f108 0801 	add.w	r8, r8, #1
 800fd0a:	e7e6      	b.n	800fcda <_printf_float+0x212>
 800fd0c:	9b07      	ldr	r3, [sp, #28]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	dc3c      	bgt.n	800fd8c <_printf_float+0x2c4>
 800fd12:	4a1d      	ldr	r2, [pc, #116]	; (800fd88 <_printf_float+0x2c0>)
 800fd14:	2301      	movs	r3, #1
 800fd16:	4631      	mov	r1, r6
 800fd18:	4628      	mov	r0, r5
 800fd1a:	47b8      	blx	r7
 800fd1c:	3001      	adds	r0, #1
 800fd1e:	f43f af21 	beq.w	800fb64 <_printf_float+0x9c>
 800fd22:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fd26:	4313      	orrs	r3, r2
 800fd28:	d102      	bne.n	800fd30 <_printf_float+0x268>
 800fd2a:	6823      	ldr	r3, [r4, #0]
 800fd2c:	07d9      	lsls	r1, r3, #31
 800fd2e:	d5d8      	bpl.n	800fce2 <_printf_float+0x21a>
 800fd30:	4653      	mov	r3, sl
 800fd32:	465a      	mov	r2, fp
 800fd34:	4631      	mov	r1, r6
 800fd36:	4628      	mov	r0, r5
 800fd38:	47b8      	blx	r7
 800fd3a:	3001      	adds	r0, #1
 800fd3c:	f43f af12 	beq.w	800fb64 <_printf_float+0x9c>
 800fd40:	f04f 0900 	mov.w	r9, #0
 800fd44:	f104 0a1a 	add.w	sl, r4, #26
 800fd48:	9b07      	ldr	r3, [sp, #28]
 800fd4a:	425b      	negs	r3, r3
 800fd4c:	454b      	cmp	r3, r9
 800fd4e:	dc01      	bgt.n	800fd54 <_printf_float+0x28c>
 800fd50:	9b08      	ldr	r3, [sp, #32]
 800fd52:	e795      	b.n	800fc80 <_printf_float+0x1b8>
 800fd54:	2301      	movs	r3, #1
 800fd56:	4652      	mov	r2, sl
 800fd58:	4631      	mov	r1, r6
 800fd5a:	4628      	mov	r0, r5
 800fd5c:	47b8      	blx	r7
 800fd5e:	3001      	adds	r0, #1
 800fd60:	f43f af00 	beq.w	800fb64 <_printf_float+0x9c>
 800fd64:	f109 0901 	add.w	r9, r9, #1
 800fd68:	e7ee      	b.n	800fd48 <_printf_float+0x280>
 800fd6a:	bf00      	nop
 800fd6c:	f3af 8000 	nop.w
 800fd70:	ffffffff 	.word	0xffffffff
 800fd74:	7fefffff 	.word	0x7fefffff
 800fd78:	08013ea8 	.word	0x08013ea8
 800fd7c:	08013eac 	.word	0x08013eac
 800fd80:	08013eb4 	.word	0x08013eb4
 800fd84:	08013eb0 	.word	0x08013eb0
 800fd88:	08013eb8 	.word	0x08013eb8
 800fd8c:	9a08      	ldr	r2, [sp, #32]
 800fd8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fd90:	429a      	cmp	r2, r3
 800fd92:	bfa8      	it	ge
 800fd94:	461a      	movge	r2, r3
 800fd96:	2a00      	cmp	r2, #0
 800fd98:	4691      	mov	r9, r2
 800fd9a:	dc38      	bgt.n	800fe0e <_printf_float+0x346>
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	9305      	str	r3, [sp, #20]
 800fda0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fda4:	f104 021a 	add.w	r2, r4, #26
 800fda8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fdaa:	9905      	ldr	r1, [sp, #20]
 800fdac:	9304      	str	r3, [sp, #16]
 800fdae:	eba3 0309 	sub.w	r3, r3, r9
 800fdb2:	428b      	cmp	r3, r1
 800fdb4:	dc33      	bgt.n	800fe1e <_printf_float+0x356>
 800fdb6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	db3c      	blt.n	800fe38 <_printf_float+0x370>
 800fdbe:	6823      	ldr	r3, [r4, #0]
 800fdc0:	07da      	lsls	r2, r3, #31
 800fdc2:	d439      	bmi.n	800fe38 <_printf_float+0x370>
 800fdc4:	9b08      	ldr	r3, [sp, #32]
 800fdc6:	9a04      	ldr	r2, [sp, #16]
 800fdc8:	9907      	ldr	r1, [sp, #28]
 800fdca:	1a9a      	subs	r2, r3, r2
 800fdcc:	eba3 0901 	sub.w	r9, r3, r1
 800fdd0:	4591      	cmp	r9, r2
 800fdd2:	bfa8      	it	ge
 800fdd4:	4691      	movge	r9, r2
 800fdd6:	f1b9 0f00 	cmp.w	r9, #0
 800fdda:	dc35      	bgt.n	800fe48 <_printf_float+0x380>
 800fddc:	f04f 0800 	mov.w	r8, #0
 800fde0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fde4:	f104 0a1a 	add.w	sl, r4, #26
 800fde8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fdec:	1a9b      	subs	r3, r3, r2
 800fdee:	eba3 0309 	sub.w	r3, r3, r9
 800fdf2:	4543      	cmp	r3, r8
 800fdf4:	f77f af75 	ble.w	800fce2 <_printf_float+0x21a>
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	4652      	mov	r2, sl
 800fdfc:	4631      	mov	r1, r6
 800fdfe:	4628      	mov	r0, r5
 800fe00:	47b8      	blx	r7
 800fe02:	3001      	adds	r0, #1
 800fe04:	f43f aeae 	beq.w	800fb64 <_printf_float+0x9c>
 800fe08:	f108 0801 	add.w	r8, r8, #1
 800fe0c:	e7ec      	b.n	800fde8 <_printf_float+0x320>
 800fe0e:	4613      	mov	r3, r2
 800fe10:	4631      	mov	r1, r6
 800fe12:	4642      	mov	r2, r8
 800fe14:	4628      	mov	r0, r5
 800fe16:	47b8      	blx	r7
 800fe18:	3001      	adds	r0, #1
 800fe1a:	d1bf      	bne.n	800fd9c <_printf_float+0x2d4>
 800fe1c:	e6a2      	b.n	800fb64 <_printf_float+0x9c>
 800fe1e:	2301      	movs	r3, #1
 800fe20:	4631      	mov	r1, r6
 800fe22:	4628      	mov	r0, r5
 800fe24:	9204      	str	r2, [sp, #16]
 800fe26:	47b8      	blx	r7
 800fe28:	3001      	adds	r0, #1
 800fe2a:	f43f ae9b 	beq.w	800fb64 <_printf_float+0x9c>
 800fe2e:	9b05      	ldr	r3, [sp, #20]
 800fe30:	9a04      	ldr	r2, [sp, #16]
 800fe32:	3301      	adds	r3, #1
 800fe34:	9305      	str	r3, [sp, #20]
 800fe36:	e7b7      	b.n	800fda8 <_printf_float+0x2e0>
 800fe38:	4653      	mov	r3, sl
 800fe3a:	465a      	mov	r2, fp
 800fe3c:	4631      	mov	r1, r6
 800fe3e:	4628      	mov	r0, r5
 800fe40:	47b8      	blx	r7
 800fe42:	3001      	adds	r0, #1
 800fe44:	d1be      	bne.n	800fdc4 <_printf_float+0x2fc>
 800fe46:	e68d      	b.n	800fb64 <_printf_float+0x9c>
 800fe48:	9a04      	ldr	r2, [sp, #16]
 800fe4a:	464b      	mov	r3, r9
 800fe4c:	4442      	add	r2, r8
 800fe4e:	4631      	mov	r1, r6
 800fe50:	4628      	mov	r0, r5
 800fe52:	47b8      	blx	r7
 800fe54:	3001      	adds	r0, #1
 800fe56:	d1c1      	bne.n	800fddc <_printf_float+0x314>
 800fe58:	e684      	b.n	800fb64 <_printf_float+0x9c>
 800fe5a:	9a08      	ldr	r2, [sp, #32]
 800fe5c:	2a01      	cmp	r2, #1
 800fe5e:	dc01      	bgt.n	800fe64 <_printf_float+0x39c>
 800fe60:	07db      	lsls	r3, r3, #31
 800fe62:	d537      	bpl.n	800fed4 <_printf_float+0x40c>
 800fe64:	2301      	movs	r3, #1
 800fe66:	4642      	mov	r2, r8
 800fe68:	4631      	mov	r1, r6
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	47b8      	blx	r7
 800fe6e:	3001      	adds	r0, #1
 800fe70:	f43f ae78 	beq.w	800fb64 <_printf_float+0x9c>
 800fe74:	4653      	mov	r3, sl
 800fe76:	465a      	mov	r2, fp
 800fe78:	4631      	mov	r1, r6
 800fe7a:	4628      	mov	r0, r5
 800fe7c:	47b8      	blx	r7
 800fe7e:	3001      	adds	r0, #1
 800fe80:	f43f ae70 	beq.w	800fb64 <_printf_float+0x9c>
 800fe84:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800fe88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fe8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe90:	d01b      	beq.n	800feca <_printf_float+0x402>
 800fe92:	9b08      	ldr	r3, [sp, #32]
 800fe94:	f108 0201 	add.w	r2, r8, #1
 800fe98:	3b01      	subs	r3, #1
 800fe9a:	4631      	mov	r1, r6
 800fe9c:	4628      	mov	r0, r5
 800fe9e:	47b8      	blx	r7
 800fea0:	3001      	adds	r0, #1
 800fea2:	d10e      	bne.n	800fec2 <_printf_float+0x3fa>
 800fea4:	e65e      	b.n	800fb64 <_printf_float+0x9c>
 800fea6:	2301      	movs	r3, #1
 800fea8:	464a      	mov	r2, r9
 800feaa:	4631      	mov	r1, r6
 800feac:	4628      	mov	r0, r5
 800feae:	47b8      	blx	r7
 800feb0:	3001      	adds	r0, #1
 800feb2:	f43f ae57 	beq.w	800fb64 <_printf_float+0x9c>
 800feb6:	f108 0801 	add.w	r8, r8, #1
 800feba:	9b08      	ldr	r3, [sp, #32]
 800febc:	3b01      	subs	r3, #1
 800febe:	4543      	cmp	r3, r8
 800fec0:	dcf1      	bgt.n	800fea6 <_printf_float+0x3de>
 800fec2:	9b04      	ldr	r3, [sp, #16]
 800fec4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fec8:	e6db      	b.n	800fc82 <_printf_float+0x1ba>
 800feca:	f04f 0800 	mov.w	r8, #0
 800fece:	f104 091a 	add.w	r9, r4, #26
 800fed2:	e7f2      	b.n	800feba <_printf_float+0x3f2>
 800fed4:	2301      	movs	r3, #1
 800fed6:	4642      	mov	r2, r8
 800fed8:	e7df      	b.n	800fe9a <_printf_float+0x3d2>
 800feda:	2301      	movs	r3, #1
 800fedc:	464a      	mov	r2, r9
 800fede:	4631      	mov	r1, r6
 800fee0:	4628      	mov	r0, r5
 800fee2:	47b8      	blx	r7
 800fee4:	3001      	adds	r0, #1
 800fee6:	f43f ae3d 	beq.w	800fb64 <_printf_float+0x9c>
 800feea:	f108 0801 	add.w	r8, r8, #1
 800feee:	68e3      	ldr	r3, [r4, #12]
 800fef0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fef2:	1a5b      	subs	r3, r3, r1
 800fef4:	4543      	cmp	r3, r8
 800fef6:	dcf0      	bgt.n	800feda <_printf_float+0x412>
 800fef8:	e6f7      	b.n	800fcea <_printf_float+0x222>
 800fefa:	f04f 0800 	mov.w	r8, #0
 800fefe:	f104 0919 	add.w	r9, r4, #25
 800ff02:	e7f4      	b.n	800feee <_printf_float+0x426>

0800ff04 <_printf_common>:
 800ff04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff08:	4616      	mov	r6, r2
 800ff0a:	4699      	mov	r9, r3
 800ff0c:	688a      	ldr	r2, [r1, #8]
 800ff0e:	690b      	ldr	r3, [r1, #16]
 800ff10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ff14:	4293      	cmp	r3, r2
 800ff16:	bfb8      	it	lt
 800ff18:	4613      	movlt	r3, r2
 800ff1a:	6033      	str	r3, [r6, #0]
 800ff1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ff20:	4607      	mov	r7, r0
 800ff22:	460c      	mov	r4, r1
 800ff24:	b10a      	cbz	r2, 800ff2a <_printf_common+0x26>
 800ff26:	3301      	adds	r3, #1
 800ff28:	6033      	str	r3, [r6, #0]
 800ff2a:	6823      	ldr	r3, [r4, #0]
 800ff2c:	0699      	lsls	r1, r3, #26
 800ff2e:	bf42      	ittt	mi
 800ff30:	6833      	ldrmi	r3, [r6, #0]
 800ff32:	3302      	addmi	r3, #2
 800ff34:	6033      	strmi	r3, [r6, #0]
 800ff36:	6825      	ldr	r5, [r4, #0]
 800ff38:	f015 0506 	ands.w	r5, r5, #6
 800ff3c:	d106      	bne.n	800ff4c <_printf_common+0x48>
 800ff3e:	f104 0a19 	add.w	sl, r4, #25
 800ff42:	68e3      	ldr	r3, [r4, #12]
 800ff44:	6832      	ldr	r2, [r6, #0]
 800ff46:	1a9b      	subs	r3, r3, r2
 800ff48:	42ab      	cmp	r3, r5
 800ff4a:	dc26      	bgt.n	800ff9a <_printf_common+0x96>
 800ff4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff50:	1e13      	subs	r3, r2, #0
 800ff52:	6822      	ldr	r2, [r4, #0]
 800ff54:	bf18      	it	ne
 800ff56:	2301      	movne	r3, #1
 800ff58:	0692      	lsls	r2, r2, #26
 800ff5a:	d42b      	bmi.n	800ffb4 <_printf_common+0xb0>
 800ff5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff60:	4649      	mov	r1, r9
 800ff62:	4638      	mov	r0, r7
 800ff64:	47c0      	blx	r8
 800ff66:	3001      	adds	r0, #1
 800ff68:	d01e      	beq.n	800ffa8 <_printf_common+0xa4>
 800ff6a:	6823      	ldr	r3, [r4, #0]
 800ff6c:	68e5      	ldr	r5, [r4, #12]
 800ff6e:	6832      	ldr	r2, [r6, #0]
 800ff70:	f003 0306 	and.w	r3, r3, #6
 800ff74:	2b04      	cmp	r3, #4
 800ff76:	bf08      	it	eq
 800ff78:	1aad      	subeq	r5, r5, r2
 800ff7a:	68a3      	ldr	r3, [r4, #8]
 800ff7c:	6922      	ldr	r2, [r4, #16]
 800ff7e:	bf0c      	ite	eq
 800ff80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff84:	2500      	movne	r5, #0
 800ff86:	4293      	cmp	r3, r2
 800ff88:	bfc4      	itt	gt
 800ff8a:	1a9b      	subgt	r3, r3, r2
 800ff8c:	18ed      	addgt	r5, r5, r3
 800ff8e:	2600      	movs	r6, #0
 800ff90:	341a      	adds	r4, #26
 800ff92:	42b5      	cmp	r5, r6
 800ff94:	d11a      	bne.n	800ffcc <_printf_common+0xc8>
 800ff96:	2000      	movs	r0, #0
 800ff98:	e008      	b.n	800ffac <_printf_common+0xa8>
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	4652      	mov	r2, sl
 800ff9e:	4649      	mov	r1, r9
 800ffa0:	4638      	mov	r0, r7
 800ffa2:	47c0      	blx	r8
 800ffa4:	3001      	adds	r0, #1
 800ffa6:	d103      	bne.n	800ffb0 <_printf_common+0xac>
 800ffa8:	f04f 30ff 	mov.w	r0, #4294967295
 800ffac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffb0:	3501      	adds	r5, #1
 800ffb2:	e7c6      	b.n	800ff42 <_printf_common+0x3e>
 800ffb4:	18e1      	adds	r1, r4, r3
 800ffb6:	1c5a      	adds	r2, r3, #1
 800ffb8:	2030      	movs	r0, #48	; 0x30
 800ffba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ffbe:	4422      	add	r2, r4
 800ffc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ffc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ffc8:	3302      	adds	r3, #2
 800ffca:	e7c7      	b.n	800ff5c <_printf_common+0x58>
 800ffcc:	2301      	movs	r3, #1
 800ffce:	4622      	mov	r2, r4
 800ffd0:	4649      	mov	r1, r9
 800ffd2:	4638      	mov	r0, r7
 800ffd4:	47c0      	blx	r8
 800ffd6:	3001      	adds	r0, #1
 800ffd8:	d0e6      	beq.n	800ffa8 <_printf_common+0xa4>
 800ffda:	3601      	adds	r6, #1
 800ffdc:	e7d9      	b.n	800ff92 <_printf_common+0x8e>
	...

0800ffe0 <_printf_i>:
 800ffe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ffe4:	7e0f      	ldrb	r7, [r1, #24]
 800ffe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ffe8:	2f78      	cmp	r7, #120	; 0x78
 800ffea:	4691      	mov	r9, r2
 800ffec:	4680      	mov	r8, r0
 800ffee:	460c      	mov	r4, r1
 800fff0:	469a      	mov	sl, r3
 800fff2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fff6:	d807      	bhi.n	8010008 <_printf_i+0x28>
 800fff8:	2f62      	cmp	r7, #98	; 0x62
 800fffa:	d80a      	bhi.n	8010012 <_printf_i+0x32>
 800fffc:	2f00      	cmp	r7, #0
 800fffe:	f000 80d8 	beq.w	80101b2 <_printf_i+0x1d2>
 8010002:	2f58      	cmp	r7, #88	; 0x58
 8010004:	f000 80a3 	beq.w	801014e <_printf_i+0x16e>
 8010008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801000c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010010:	e03a      	b.n	8010088 <_printf_i+0xa8>
 8010012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010016:	2b15      	cmp	r3, #21
 8010018:	d8f6      	bhi.n	8010008 <_printf_i+0x28>
 801001a:	a101      	add	r1, pc, #4	; (adr r1, 8010020 <_printf_i+0x40>)
 801001c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010020:	08010079 	.word	0x08010079
 8010024:	0801008d 	.word	0x0801008d
 8010028:	08010009 	.word	0x08010009
 801002c:	08010009 	.word	0x08010009
 8010030:	08010009 	.word	0x08010009
 8010034:	08010009 	.word	0x08010009
 8010038:	0801008d 	.word	0x0801008d
 801003c:	08010009 	.word	0x08010009
 8010040:	08010009 	.word	0x08010009
 8010044:	08010009 	.word	0x08010009
 8010048:	08010009 	.word	0x08010009
 801004c:	08010199 	.word	0x08010199
 8010050:	080100bd 	.word	0x080100bd
 8010054:	0801017b 	.word	0x0801017b
 8010058:	08010009 	.word	0x08010009
 801005c:	08010009 	.word	0x08010009
 8010060:	080101bb 	.word	0x080101bb
 8010064:	08010009 	.word	0x08010009
 8010068:	080100bd 	.word	0x080100bd
 801006c:	08010009 	.word	0x08010009
 8010070:	08010009 	.word	0x08010009
 8010074:	08010183 	.word	0x08010183
 8010078:	682b      	ldr	r3, [r5, #0]
 801007a:	1d1a      	adds	r2, r3, #4
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	602a      	str	r2, [r5, #0]
 8010080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010088:	2301      	movs	r3, #1
 801008a:	e0a3      	b.n	80101d4 <_printf_i+0x1f4>
 801008c:	6820      	ldr	r0, [r4, #0]
 801008e:	6829      	ldr	r1, [r5, #0]
 8010090:	0606      	lsls	r6, r0, #24
 8010092:	f101 0304 	add.w	r3, r1, #4
 8010096:	d50a      	bpl.n	80100ae <_printf_i+0xce>
 8010098:	680e      	ldr	r6, [r1, #0]
 801009a:	602b      	str	r3, [r5, #0]
 801009c:	2e00      	cmp	r6, #0
 801009e:	da03      	bge.n	80100a8 <_printf_i+0xc8>
 80100a0:	232d      	movs	r3, #45	; 0x2d
 80100a2:	4276      	negs	r6, r6
 80100a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100a8:	485e      	ldr	r0, [pc, #376]	; (8010224 <_printf_i+0x244>)
 80100aa:	230a      	movs	r3, #10
 80100ac:	e019      	b.n	80100e2 <_printf_i+0x102>
 80100ae:	680e      	ldr	r6, [r1, #0]
 80100b0:	602b      	str	r3, [r5, #0]
 80100b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80100b6:	bf18      	it	ne
 80100b8:	b236      	sxthne	r6, r6
 80100ba:	e7ef      	b.n	801009c <_printf_i+0xbc>
 80100bc:	682b      	ldr	r3, [r5, #0]
 80100be:	6820      	ldr	r0, [r4, #0]
 80100c0:	1d19      	adds	r1, r3, #4
 80100c2:	6029      	str	r1, [r5, #0]
 80100c4:	0601      	lsls	r1, r0, #24
 80100c6:	d501      	bpl.n	80100cc <_printf_i+0xec>
 80100c8:	681e      	ldr	r6, [r3, #0]
 80100ca:	e002      	b.n	80100d2 <_printf_i+0xf2>
 80100cc:	0646      	lsls	r6, r0, #25
 80100ce:	d5fb      	bpl.n	80100c8 <_printf_i+0xe8>
 80100d0:	881e      	ldrh	r6, [r3, #0]
 80100d2:	4854      	ldr	r0, [pc, #336]	; (8010224 <_printf_i+0x244>)
 80100d4:	2f6f      	cmp	r7, #111	; 0x6f
 80100d6:	bf0c      	ite	eq
 80100d8:	2308      	moveq	r3, #8
 80100da:	230a      	movne	r3, #10
 80100dc:	2100      	movs	r1, #0
 80100de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80100e2:	6865      	ldr	r5, [r4, #4]
 80100e4:	60a5      	str	r5, [r4, #8]
 80100e6:	2d00      	cmp	r5, #0
 80100e8:	bfa2      	ittt	ge
 80100ea:	6821      	ldrge	r1, [r4, #0]
 80100ec:	f021 0104 	bicge.w	r1, r1, #4
 80100f0:	6021      	strge	r1, [r4, #0]
 80100f2:	b90e      	cbnz	r6, 80100f8 <_printf_i+0x118>
 80100f4:	2d00      	cmp	r5, #0
 80100f6:	d04d      	beq.n	8010194 <_printf_i+0x1b4>
 80100f8:	4615      	mov	r5, r2
 80100fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80100fe:	fb03 6711 	mls	r7, r3, r1, r6
 8010102:	5dc7      	ldrb	r7, [r0, r7]
 8010104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010108:	4637      	mov	r7, r6
 801010a:	42bb      	cmp	r3, r7
 801010c:	460e      	mov	r6, r1
 801010e:	d9f4      	bls.n	80100fa <_printf_i+0x11a>
 8010110:	2b08      	cmp	r3, #8
 8010112:	d10b      	bne.n	801012c <_printf_i+0x14c>
 8010114:	6823      	ldr	r3, [r4, #0]
 8010116:	07de      	lsls	r6, r3, #31
 8010118:	d508      	bpl.n	801012c <_printf_i+0x14c>
 801011a:	6923      	ldr	r3, [r4, #16]
 801011c:	6861      	ldr	r1, [r4, #4]
 801011e:	4299      	cmp	r1, r3
 8010120:	bfde      	ittt	le
 8010122:	2330      	movle	r3, #48	; 0x30
 8010124:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010128:	f105 35ff 	addle.w	r5, r5, #4294967295
 801012c:	1b52      	subs	r2, r2, r5
 801012e:	6122      	str	r2, [r4, #16]
 8010130:	f8cd a000 	str.w	sl, [sp]
 8010134:	464b      	mov	r3, r9
 8010136:	aa03      	add	r2, sp, #12
 8010138:	4621      	mov	r1, r4
 801013a:	4640      	mov	r0, r8
 801013c:	f7ff fee2 	bl	800ff04 <_printf_common>
 8010140:	3001      	adds	r0, #1
 8010142:	d14c      	bne.n	80101de <_printf_i+0x1fe>
 8010144:	f04f 30ff 	mov.w	r0, #4294967295
 8010148:	b004      	add	sp, #16
 801014a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801014e:	4835      	ldr	r0, [pc, #212]	; (8010224 <_printf_i+0x244>)
 8010150:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010154:	6829      	ldr	r1, [r5, #0]
 8010156:	6823      	ldr	r3, [r4, #0]
 8010158:	f851 6b04 	ldr.w	r6, [r1], #4
 801015c:	6029      	str	r1, [r5, #0]
 801015e:	061d      	lsls	r5, r3, #24
 8010160:	d514      	bpl.n	801018c <_printf_i+0x1ac>
 8010162:	07df      	lsls	r7, r3, #31
 8010164:	bf44      	itt	mi
 8010166:	f043 0320 	orrmi.w	r3, r3, #32
 801016a:	6023      	strmi	r3, [r4, #0]
 801016c:	b91e      	cbnz	r6, 8010176 <_printf_i+0x196>
 801016e:	6823      	ldr	r3, [r4, #0]
 8010170:	f023 0320 	bic.w	r3, r3, #32
 8010174:	6023      	str	r3, [r4, #0]
 8010176:	2310      	movs	r3, #16
 8010178:	e7b0      	b.n	80100dc <_printf_i+0xfc>
 801017a:	6823      	ldr	r3, [r4, #0]
 801017c:	f043 0320 	orr.w	r3, r3, #32
 8010180:	6023      	str	r3, [r4, #0]
 8010182:	2378      	movs	r3, #120	; 0x78
 8010184:	4828      	ldr	r0, [pc, #160]	; (8010228 <_printf_i+0x248>)
 8010186:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801018a:	e7e3      	b.n	8010154 <_printf_i+0x174>
 801018c:	0659      	lsls	r1, r3, #25
 801018e:	bf48      	it	mi
 8010190:	b2b6      	uxthmi	r6, r6
 8010192:	e7e6      	b.n	8010162 <_printf_i+0x182>
 8010194:	4615      	mov	r5, r2
 8010196:	e7bb      	b.n	8010110 <_printf_i+0x130>
 8010198:	682b      	ldr	r3, [r5, #0]
 801019a:	6826      	ldr	r6, [r4, #0]
 801019c:	6961      	ldr	r1, [r4, #20]
 801019e:	1d18      	adds	r0, r3, #4
 80101a0:	6028      	str	r0, [r5, #0]
 80101a2:	0635      	lsls	r5, r6, #24
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	d501      	bpl.n	80101ac <_printf_i+0x1cc>
 80101a8:	6019      	str	r1, [r3, #0]
 80101aa:	e002      	b.n	80101b2 <_printf_i+0x1d2>
 80101ac:	0670      	lsls	r0, r6, #25
 80101ae:	d5fb      	bpl.n	80101a8 <_printf_i+0x1c8>
 80101b0:	8019      	strh	r1, [r3, #0]
 80101b2:	2300      	movs	r3, #0
 80101b4:	6123      	str	r3, [r4, #16]
 80101b6:	4615      	mov	r5, r2
 80101b8:	e7ba      	b.n	8010130 <_printf_i+0x150>
 80101ba:	682b      	ldr	r3, [r5, #0]
 80101bc:	1d1a      	adds	r2, r3, #4
 80101be:	602a      	str	r2, [r5, #0]
 80101c0:	681d      	ldr	r5, [r3, #0]
 80101c2:	6862      	ldr	r2, [r4, #4]
 80101c4:	2100      	movs	r1, #0
 80101c6:	4628      	mov	r0, r5
 80101c8:	f7f0 f892 	bl	80002f0 <memchr>
 80101cc:	b108      	cbz	r0, 80101d2 <_printf_i+0x1f2>
 80101ce:	1b40      	subs	r0, r0, r5
 80101d0:	6060      	str	r0, [r4, #4]
 80101d2:	6863      	ldr	r3, [r4, #4]
 80101d4:	6123      	str	r3, [r4, #16]
 80101d6:	2300      	movs	r3, #0
 80101d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101dc:	e7a8      	b.n	8010130 <_printf_i+0x150>
 80101de:	6923      	ldr	r3, [r4, #16]
 80101e0:	462a      	mov	r2, r5
 80101e2:	4649      	mov	r1, r9
 80101e4:	4640      	mov	r0, r8
 80101e6:	47d0      	blx	sl
 80101e8:	3001      	adds	r0, #1
 80101ea:	d0ab      	beq.n	8010144 <_printf_i+0x164>
 80101ec:	6823      	ldr	r3, [r4, #0]
 80101ee:	079b      	lsls	r3, r3, #30
 80101f0:	d413      	bmi.n	801021a <_printf_i+0x23a>
 80101f2:	68e0      	ldr	r0, [r4, #12]
 80101f4:	9b03      	ldr	r3, [sp, #12]
 80101f6:	4298      	cmp	r0, r3
 80101f8:	bfb8      	it	lt
 80101fa:	4618      	movlt	r0, r3
 80101fc:	e7a4      	b.n	8010148 <_printf_i+0x168>
 80101fe:	2301      	movs	r3, #1
 8010200:	4632      	mov	r2, r6
 8010202:	4649      	mov	r1, r9
 8010204:	4640      	mov	r0, r8
 8010206:	47d0      	blx	sl
 8010208:	3001      	adds	r0, #1
 801020a:	d09b      	beq.n	8010144 <_printf_i+0x164>
 801020c:	3501      	adds	r5, #1
 801020e:	68e3      	ldr	r3, [r4, #12]
 8010210:	9903      	ldr	r1, [sp, #12]
 8010212:	1a5b      	subs	r3, r3, r1
 8010214:	42ab      	cmp	r3, r5
 8010216:	dcf2      	bgt.n	80101fe <_printf_i+0x21e>
 8010218:	e7eb      	b.n	80101f2 <_printf_i+0x212>
 801021a:	2500      	movs	r5, #0
 801021c:	f104 0619 	add.w	r6, r4, #25
 8010220:	e7f5      	b.n	801020e <_printf_i+0x22e>
 8010222:	bf00      	nop
 8010224:	08013eba 	.word	0x08013eba
 8010228:	08013ecb 	.word	0x08013ecb

0801022c <iprintf>:
 801022c:	b40f      	push	{r0, r1, r2, r3}
 801022e:	4b0a      	ldr	r3, [pc, #40]	; (8010258 <iprintf+0x2c>)
 8010230:	b513      	push	{r0, r1, r4, lr}
 8010232:	681c      	ldr	r4, [r3, #0]
 8010234:	b124      	cbz	r4, 8010240 <iprintf+0x14>
 8010236:	69a3      	ldr	r3, [r4, #24]
 8010238:	b913      	cbnz	r3, 8010240 <iprintf+0x14>
 801023a:	4620      	mov	r0, r4
 801023c:	f7ff fa42 	bl	800f6c4 <__sinit>
 8010240:	ab05      	add	r3, sp, #20
 8010242:	9a04      	ldr	r2, [sp, #16]
 8010244:	68a1      	ldr	r1, [r4, #8]
 8010246:	9301      	str	r3, [sp, #4]
 8010248:	4620      	mov	r0, r4
 801024a:	f001 fef5 	bl	8012038 <_vfiprintf_r>
 801024e:	b002      	add	sp, #8
 8010250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010254:	b004      	add	sp, #16
 8010256:	4770      	bx	lr
 8010258:	2400001c 	.word	0x2400001c

0801025c <_puts_r>:
 801025c:	b570      	push	{r4, r5, r6, lr}
 801025e:	460e      	mov	r6, r1
 8010260:	4605      	mov	r5, r0
 8010262:	b118      	cbz	r0, 801026c <_puts_r+0x10>
 8010264:	6983      	ldr	r3, [r0, #24]
 8010266:	b90b      	cbnz	r3, 801026c <_puts_r+0x10>
 8010268:	f7ff fa2c 	bl	800f6c4 <__sinit>
 801026c:	69ab      	ldr	r3, [r5, #24]
 801026e:	68ac      	ldr	r4, [r5, #8]
 8010270:	b913      	cbnz	r3, 8010278 <_puts_r+0x1c>
 8010272:	4628      	mov	r0, r5
 8010274:	f7ff fa26 	bl	800f6c4 <__sinit>
 8010278:	4b2c      	ldr	r3, [pc, #176]	; (801032c <_puts_r+0xd0>)
 801027a:	429c      	cmp	r4, r3
 801027c:	d120      	bne.n	80102c0 <_puts_r+0x64>
 801027e:	686c      	ldr	r4, [r5, #4]
 8010280:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010282:	07db      	lsls	r3, r3, #31
 8010284:	d405      	bmi.n	8010292 <_puts_r+0x36>
 8010286:	89a3      	ldrh	r3, [r4, #12]
 8010288:	0598      	lsls	r0, r3, #22
 801028a:	d402      	bmi.n	8010292 <_puts_r+0x36>
 801028c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801028e:	f7ff fadc 	bl	800f84a <__retarget_lock_acquire_recursive>
 8010292:	89a3      	ldrh	r3, [r4, #12]
 8010294:	0719      	lsls	r1, r3, #28
 8010296:	d51d      	bpl.n	80102d4 <_puts_r+0x78>
 8010298:	6923      	ldr	r3, [r4, #16]
 801029a:	b1db      	cbz	r3, 80102d4 <_puts_r+0x78>
 801029c:	3e01      	subs	r6, #1
 801029e:	68a3      	ldr	r3, [r4, #8]
 80102a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80102a4:	3b01      	subs	r3, #1
 80102a6:	60a3      	str	r3, [r4, #8]
 80102a8:	bb39      	cbnz	r1, 80102fa <_puts_r+0x9e>
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	da38      	bge.n	8010320 <_puts_r+0xc4>
 80102ae:	4622      	mov	r2, r4
 80102b0:	210a      	movs	r1, #10
 80102b2:	4628      	mov	r0, r5
 80102b4:	f000 f926 	bl	8010504 <__swbuf_r>
 80102b8:	3001      	adds	r0, #1
 80102ba:	d011      	beq.n	80102e0 <_puts_r+0x84>
 80102bc:	250a      	movs	r5, #10
 80102be:	e011      	b.n	80102e4 <_puts_r+0x88>
 80102c0:	4b1b      	ldr	r3, [pc, #108]	; (8010330 <_puts_r+0xd4>)
 80102c2:	429c      	cmp	r4, r3
 80102c4:	d101      	bne.n	80102ca <_puts_r+0x6e>
 80102c6:	68ac      	ldr	r4, [r5, #8]
 80102c8:	e7da      	b.n	8010280 <_puts_r+0x24>
 80102ca:	4b1a      	ldr	r3, [pc, #104]	; (8010334 <_puts_r+0xd8>)
 80102cc:	429c      	cmp	r4, r3
 80102ce:	bf08      	it	eq
 80102d0:	68ec      	ldreq	r4, [r5, #12]
 80102d2:	e7d5      	b.n	8010280 <_puts_r+0x24>
 80102d4:	4621      	mov	r1, r4
 80102d6:	4628      	mov	r0, r5
 80102d8:	f000 f978 	bl	80105cc <__swsetup_r>
 80102dc:	2800      	cmp	r0, #0
 80102de:	d0dd      	beq.n	801029c <_puts_r+0x40>
 80102e0:	f04f 35ff 	mov.w	r5, #4294967295
 80102e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102e6:	07da      	lsls	r2, r3, #31
 80102e8:	d405      	bmi.n	80102f6 <_puts_r+0x9a>
 80102ea:	89a3      	ldrh	r3, [r4, #12]
 80102ec:	059b      	lsls	r3, r3, #22
 80102ee:	d402      	bmi.n	80102f6 <_puts_r+0x9a>
 80102f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102f2:	f7ff faab 	bl	800f84c <__retarget_lock_release_recursive>
 80102f6:	4628      	mov	r0, r5
 80102f8:	bd70      	pop	{r4, r5, r6, pc}
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	da04      	bge.n	8010308 <_puts_r+0xac>
 80102fe:	69a2      	ldr	r2, [r4, #24]
 8010300:	429a      	cmp	r2, r3
 8010302:	dc06      	bgt.n	8010312 <_puts_r+0xb6>
 8010304:	290a      	cmp	r1, #10
 8010306:	d004      	beq.n	8010312 <_puts_r+0xb6>
 8010308:	6823      	ldr	r3, [r4, #0]
 801030a:	1c5a      	adds	r2, r3, #1
 801030c:	6022      	str	r2, [r4, #0]
 801030e:	7019      	strb	r1, [r3, #0]
 8010310:	e7c5      	b.n	801029e <_puts_r+0x42>
 8010312:	4622      	mov	r2, r4
 8010314:	4628      	mov	r0, r5
 8010316:	f000 f8f5 	bl	8010504 <__swbuf_r>
 801031a:	3001      	adds	r0, #1
 801031c:	d1bf      	bne.n	801029e <_puts_r+0x42>
 801031e:	e7df      	b.n	80102e0 <_puts_r+0x84>
 8010320:	6823      	ldr	r3, [r4, #0]
 8010322:	250a      	movs	r5, #10
 8010324:	1c5a      	adds	r2, r3, #1
 8010326:	6022      	str	r2, [r4, #0]
 8010328:	701d      	strb	r5, [r3, #0]
 801032a:	e7db      	b.n	80102e4 <_puts_r+0x88>
 801032c:	08013e64 	.word	0x08013e64
 8010330:	08013e84 	.word	0x08013e84
 8010334:	08013e44 	.word	0x08013e44

08010338 <puts>:
 8010338:	4b02      	ldr	r3, [pc, #8]	; (8010344 <puts+0xc>)
 801033a:	4601      	mov	r1, r0
 801033c:	6818      	ldr	r0, [r3, #0]
 801033e:	f7ff bf8d 	b.w	801025c <_puts_r>
 8010342:	bf00      	nop
 8010344:	2400001c 	.word	0x2400001c

08010348 <cleanup_glue>:
 8010348:	b538      	push	{r3, r4, r5, lr}
 801034a:	460c      	mov	r4, r1
 801034c:	6809      	ldr	r1, [r1, #0]
 801034e:	4605      	mov	r5, r0
 8010350:	b109      	cbz	r1, 8010356 <cleanup_glue+0xe>
 8010352:	f7ff fff9 	bl	8010348 <cleanup_glue>
 8010356:	4621      	mov	r1, r4
 8010358:	4628      	mov	r0, r5
 801035a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801035e:	f001 bc99 	b.w	8011c94 <_free_r>
	...

08010364 <_reclaim_reent>:
 8010364:	4b2c      	ldr	r3, [pc, #176]	; (8010418 <_reclaim_reent+0xb4>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	4283      	cmp	r3, r0
 801036a:	b570      	push	{r4, r5, r6, lr}
 801036c:	4604      	mov	r4, r0
 801036e:	d051      	beq.n	8010414 <_reclaim_reent+0xb0>
 8010370:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010372:	b143      	cbz	r3, 8010386 <_reclaim_reent+0x22>
 8010374:	68db      	ldr	r3, [r3, #12]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d14a      	bne.n	8010410 <_reclaim_reent+0xac>
 801037a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801037c:	6819      	ldr	r1, [r3, #0]
 801037e:	b111      	cbz	r1, 8010386 <_reclaim_reent+0x22>
 8010380:	4620      	mov	r0, r4
 8010382:	f001 fc87 	bl	8011c94 <_free_r>
 8010386:	6961      	ldr	r1, [r4, #20]
 8010388:	b111      	cbz	r1, 8010390 <_reclaim_reent+0x2c>
 801038a:	4620      	mov	r0, r4
 801038c:	f001 fc82 	bl	8011c94 <_free_r>
 8010390:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010392:	b111      	cbz	r1, 801039a <_reclaim_reent+0x36>
 8010394:	4620      	mov	r0, r4
 8010396:	f001 fc7d 	bl	8011c94 <_free_r>
 801039a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801039c:	b111      	cbz	r1, 80103a4 <_reclaim_reent+0x40>
 801039e:	4620      	mov	r0, r4
 80103a0:	f001 fc78 	bl	8011c94 <_free_r>
 80103a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80103a6:	b111      	cbz	r1, 80103ae <_reclaim_reent+0x4a>
 80103a8:	4620      	mov	r0, r4
 80103aa:	f001 fc73 	bl	8011c94 <_free_r>
 80103ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80103b0:	b111      	cbz	r1, 80103b8 <_reclaim_reent+0x54>
 80103b2:	4620      	mov	r0, r4
 80103b4:	f001 fc6e 	bl	8011c94 <_free_r>
 80103b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80103ba:	b111      	cbz	r1, 80103c2 <_reclaim_reent+0x5e>
 80103bc:	4620      	mov	r0, r4
 80103be:	f001 fc69 	bl	8011c94 <_free_r>
 80103c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80103c4:	b111      	cbz	r1, 80103cc <_reclaim_reent+0x68>
 80103c6:	4620      	mov	r0, r4
 80103c8:	f001 fc64 	bl	8011c94 <_free_r>
 80103cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103ce:	b111      	cbz	r1, 80103d6 <_reclaim_reent+0x72>
 80103d0:	4620      	mov	r0, r4
 80103d2:	f001 fc5f 	bl	8011c94 <_free_r>
 80103d6:	69a3      	ldr	r3, [r4, #24]
 80103d8:	b1e3      	cbz	r3, 8010414 <_reclaim_reent+0xb0>
 80103da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80103dc:	4620      	mov	r0, r4
 80103de:	4798      	blx	r3
 80103e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80103e2:	b1b9      	cbz	r1, 8010414 <_reclaim_reent+0xb0>
 80103e4:	4620      	mov	r0, r4
 80103e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103ea:	f7ff bfad 	b.w	8010348 <cleanup_glue>
 80103ee:	5949      	ldr	r1, [r1, r5]
 80103f0:	b941      	cbnz	r1, 8010404 <_reclaim_reent+0xa0>
 80103f2:	3504      	adds	r5, #4
 80103f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103f6:	2d80      	cmp	r5, #128	; 0x80
 80103f8:	68d9      	ldr	r1, [r3, #12]
 80103fa:	d1f8      	bne.n	80103ee <_reclaim_reent+0x8a>
 80103fc:	4620      	mov	r0, r4
 80103fe:	f001 fc49 	bl	8011c94 <_free_r>
 8010402:	e7ba      	b.n	801037a <_reclaim_reent+0x16>
 8010404:	680e      	ldr	r6, [r1, #0]
 8010406:	4620      	mov	r0, r4
 8010408:	f001 fc44 	bl	8011c94 <_free_r>
 801040c:	4631      	mov	r1, r6
 801040e:	e7ef      	b.n	80103f0 <_reclaim_reent+0x8c>
 8010410:	2500      	movs	r5, #0
 8010412:	e7ef      	b.n	80103f4 <_reclaim_reent+0x90>
 8010414:	bd70      	pop	{r4, r5, r6, pc}
 8010416:	bf00      	nop
 8010418:	2400001c 	.word	0x2400001c

0801041c <_sbrk_r>:
 801041c:	b538      	push	{r3, r4, r5, lr}
 801041e:	4d06      	ldr	r5, [pc, #24]	; (8010438 <_sbrk_r+0x1c>)
 8010420:	2300      	movs	r3, #0
 8010422:	4604      	mov	r4, r0
 8010424:	4608      	mov	r0, r1
 8010426:	602b      	str	r3, [r5, #0]
 8010428:	f7f4 fe2a 	bl	8005080 <_sbrk>
 801042c:	1c43      	adds	r3, r0, #1
 801042e:	d102      	bne.n	8010436 <_sbrk_r+0x1a>
 8010430:	682b      	ldr	r3, [r5, #0]
 8010432:	b103      	cbz	r3, 8010436 <_sbrk_r+0x1a>
 8010434:	6023      	str	r3, [r4, #0]
 8010436:	bd38      	pop	{r3, r4, r5, pc}
 8010438:	24005408 	.word	0x24005408

0801043c <siprintf>:
 801043c:	b40e      	push	{r1, r2, r3}
 801043e:	b500      	push	{lr}
 8010440:	b09c      	sub	sp, #112	; 0x70
 8010442:	ab1d      	add	r3, sp, #116	; 0x74
 8010444:	9002      	str	r0, [sp, #8]
 8010446:	9006      	str	r0, [sp, #24]
 8010448:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801044c:	4809      	ldr	r0, [pc, #36]	; (8010474 <siprintf+0x38>)
 801044e:	9107      	str	r1, [sp, #28]
 8010450:	9104      	str	r1, [sp, #16]
 8010452:	4909      	ldr	r1, [pc, #36]	; (8010478 <siprintf+0x3c>)
 8010454:	f853 2b04 	ldr.w	r2, [r3], #4
 8010458:	9105      	str	r1, [sp, #20]
 801045a:	6800      	ldr	r0, [r0, #0]
 801045c:	9301      	str	r3, [sp, #4]
 801045e:	a902      	add	r1, sp, #8
 8010460:	f001 fcc0 	bl	8011de4 <_svfiprintf_r>
 8010464:	9b02      	ldr	r3, [sp, #8]
 8010466:	2200      	movs	r2, #0
 8010468:	701a      	strb	r2, [r3, #0]
 801046a:	b01c      	add	sp, #112	; 0x70
 801046c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010470:	b003      	add	sp, #12
 8010472:	4770      	bx	lr
 8010474:	2400001c 	.word	0x2400001c
 8010478:	ffff0208 	.word	0xffff0208

0801047c <__sread>:
 801047c:	b510      	push	{r4, lr}
 801047e:	460c      	mov	r4, r1
 8010480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010484:	f001 ff08 	bl	8012298 <_read_r>
 8010488:	2800      	cmp	r0, #0
 801048a:	bfab      	itete	ge
 801048c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801048e:	89a3      	ldrhlt	r3, [r4, #12]
 8010490:	181b      	addge	r3, r3, r0
 8010492:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010496:	bfac      	ite	ge
 8010498:	6563      	strge	r3, [r4, #84]	; 0x54
 801049a:	81a3      	strhlt	r3, [r4, #12]
 801049c:	bd10      	pop	{r4, pc}

0801049e <__swrite>:
 801049e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104a2:	461f      	mov	r7, r3
 80104a4:	898b      	ldrh	r3, [r1, #12]
 80104a6:	05db      	lsls	r3, r3, #23
 80104a8:	4605      	mov	r5, r0
 80104aa:	460c      	mov	r4, r1
 80104ac:	4616      	mov	r6, r2
 80104ae:	d505      	bpl.n	80104bc <__swrite+0x1e>
 80104b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104b4:	2302      	movs	r3, #2
 80104b6:	2200      	movs	r2, #0
 80104b8:	f000 ffc6 	bl	8011448 <_lseek_r>
 80104bc:	89a3      	ldrh	r3, [r4, #12]
 80104be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80104c6:	81a3      	strh	r3, [r4, #12]
 80104c8:	4632      	mov	r2, r6
 80104ca:	463b      	mov	r3, r7
 80104cc:	4628      	mov	r0, r5
 80104ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104d2:	f000 b869 	b.w	80105a8 <_write_r>

080104d6 <__sseek>:
 80104d6:	b510      	push	{r4, lr}
 80104d8:	460c      	mov	r4, r1
 80104da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104de:	f000 ffb3 	bl	8011448 <_lseek_r>
 80104e2:	1c43      	adds	r3, r0, #1
 80104e4:	89a3      	ldrh	r3, [r4, #12]
 80104e6:	bf15      	itete	ne
 80104e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80104ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80104ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80104f2:	81a3      	strheq	r3, [r4, #12]
 80104f4:	bf18      	it	ne
 80104f6:	81a3      	strhne	r3, [r4, #12]
 80104f8:	bd10      	pop	{r4, pc}

080104fa <__sclose>:
 80104fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104fe:	f000 b8d3 	b.w	80106a8 <_close_r>
	...

08010504 <__swbuf_r>:
 8010504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010506:	460e      	mov	r6, r1
 8010508:	4614      	mov	r4, r2
 801050a:	4605      	mov	r5, r0
 801050c:	b118      	cbz	r0, 8010516 <__swbuf_r+0x12>
 801050e:	6983      	ldr	r3, [r0, #24]
 8010510:	b90b      	cbnz	r3, 8010516 <__swbuf_r+0x12>
 8010512:	f7ff f8d7 	bl	800f6c4 <__sinit>
 8010516:	4b21      	ldr	r3, [pc, #132]	; (801059c <__swbuf_r+0x98>)
 8010518:	429c      	cmp	r4, r3
 801051a:	d12b      	bne.n	8010574 <__swbuf_r+0x70>
 801051c:	686c      	ldr	r4, [r5, #4]
 801051e:	69a3      	ldr	r3, [r4, #24]
 8010520:	60a3      	str	r3, [r4, #8]
 8010522:	89a3      	ldrh	r3, [r4, #12]
 8010524:	071a      	lsls	r2, r3, #28
 8010526:	d52f      	bpl.n	8010588 <__swbuf_r+0x84>
 8010528:	6923      	ldr	r3, [r4, #16]
 801052a:	b36b      	cbz	r3, 8010588 <__swbuf_r+0x84>
 801052c:	6923      	ldr	r3, [r4, #16]
 801052e:	6820      	ldr	r0, [r4, #0]
 8010530:	1ac0      	subs	r0, r0, r3
 8010532:	6963      	ldr	r3, [r4, #20]
 8010534:	b2f6      	uxtb	r6, r6
 8010536:	4283      	cmp	r3, r0
 8010538:	4637      	mov	r7, r6
 801053a:	dc04      	bgt.n	8010546 <__swbuf_r+0x42>
 801053c:	4621      	mov	r1, r4
 801053e:	4628      	mov	r0, r5
 8010540:	f000 ff42 	bl	80113c8 <_fflush_r>
 8010544:	bb30      	cbnz	r0, 8010594 <__swbuf_r+0x90>
 8010546:	68a3      	ldr	r3, [r4, #8]
 8010548:	3b01      	subs	r3, #1
 801054a:	60a3      	str	r3, [r4, #8]
 801054c:	6823      	ldr	r3, [r4, #0]
 801054e:	1c5a      	adds	r2, r3, #1
 8010550:	6022      	str	r2, [r4, #0]
 8010552:	701e      	strb	r6, [r3, #0]
 8010554:	6963      	ldr	r3, [r4, #20]
 8010556:	3001      	adds	r0, #1
 8010558:	4283      	cmp	r3, r0
 801055a:	d004      	beq.n	8010566 <__swbuf_r+0x62>
 801055c:	89a3      	ldrh	r3, [r4, #12]
 801055e:	07db      	lsls	r3, r3, #31
 8010560:	d506      	bpl.n	8010570 <__swbuf_r+0x6c>
 8010562:	2e0a      	cmp	r6, #10
 8010564:	d104      	bne.n	8010570 <__swbuf_r+0x6c>
 8010566:	4621      	mov	r1, r4
 8010568:	4628      	mov	r0, r5
 801056a:	f000 ff2d 	bl	80113c8 <_fflush_r>
 801056e:	b988      	cbnz	r0, 8010594 <__swbuf_r+0x90>
 8010570:	4638      	mov	r0, r7
 8010572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010574:	4b0a      	ldr	r3, [pc, #40]	; (80105a0 <__swbuf_r+0x9c>)
 8010576:	429c      	cmp	r4, r3
 8010578:	d101      	bne.n	801057e <__swbuf_r+0x7a>
 801057a:	68ac      	ldr	r4, [r5, #8]
 801057c:	e7cf      	b.n	801051e <__swbuf_r+0x1a>
 801057e:	4b09      	ldr	r3, [pc, #36]	; (80105a4 <__swbuf_r+0xa0>)
 8010580:	429c      	cmp	r4, r3
 8010582:	bf08      	it	eq
 8010584:	68ec      	ldreq	r4, [r5, #12]
 8010586:	e7ca      	b.n	801051e <__swbuf_r+0x1a>
 8010588:	4621      	mov	r1, r4
 801058a:	4628      	mov	r0, r5
 801058c:	f000 f81e 	bl	80105cc <__swsetup_r>
 8010590:	2800      	cmp	r0, #0
 8010592:	d0cb      	beq.n	801052c <__swbuf_r+0x28>
 8010594:	f04f 37ff 	mov.w	r7, #4294967295
 8010598:	e7ea      	b.n	8010570 <__swbuf_r+0x6c>
 801059a:	bf00      	nop
 801059c:	08013e64 	.word	0x08013e64
 80105a0:	08013e84 	.word	0x08013e84
 80105a4:	08013e44 	.word	0x08013e44

080105a8 <_write_r>:
 80105a8:	b538      	push	{r3, r4, r5, lr}
 80105aa:	4d07      	ldr	r5, [pc, #28]	; (80105c8 <_write_r+0x20>)
 80105ac:	4604      	mov	r4, r0
 80105ae:	4608      	mov	r0, r1
 80105b0:	4611      	mov	r1, r2
 80105b2:	2200      	movs	r2, #0
 80105b4:	602a      	str	r2, [r5, #0]
 80105b6:	461a      	mov	r2, r3
 80105b8:	f7f4 fd12 	bl	8004fe0 <_write>
 80105bc:	1c43      	adds	r3, r0, #1
 80105be:	d102      	bne.n	80105c6 <_write_r+0x1e>
 80105c0:	682b      	ldr	r3, [r5, #0]
 80105c2:	b103      	cbz	r3, 80105c6 <_write_r+0x1e>
 80105c4:	6023      	str	r3, [r4, #0]
 80105c6:	bd38      	pop	{r3, r4, r5, pc}
 80105c8:	24005408 	.word	0x24005408

080105cc <__swsetup_r>:
 80105cc:	4b32      	ldr	r3, [pc, #200]	; (8010698 <__swsetup_r+0xcc>)
 80105ce:	b570      	push	{r4, r5, r6, lr}
 80105d0:	681d      	ldr	r5, [r3, #0]
 80105d2:	4606      	mov	r6, r0
 80105d4:	460c      	mov	r4, r1
 80105d6:	b125      	cbz	r5, 80105e2 <__swsetup_r+0x16>
 80105d8:	69ab      	ldr	r3, [r5, #24]
 80105da:	b913      	cbnz	r3, 80105e2 <__swsetup_r+0x16>
 80105dc:	4628      	mov	r0, r5
 80105de:	f7ff f871 	bl	800f6c4 <__sinit>
 80105e2:	4b2e      	ldr	r3, [pc, #184]	; (801069c <__swsetup_r+0xd0>)
 80105e4:	429c      	cmp	r4, r3
 80105e6:	d10f      	bne.n	8010608 <__swsetup_r+0x3c>
 80105e8:	686c      	ldr	r4, [r5, #4]
 80105ea:	89a3      	ldrh	r3, [r4, #12]
 80105ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80105f0:	0719      	lsls	r1, r3, #28
 80105f2:	d42c      	bmi.n	801064e <__swsetup_r+0x82>
 80105f4:	06dd      	lsls	r5, r3, #27
 80105f6:	d411      	bmi.n	801061c <__swsetup_r+0x50>
 80105f8:	2309      	movs	r3, #9
 80105fa:	6033      	str	r3, [r6, #0]
 80105fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010600:	81a3      	strh	r3, [r4, #12]
 8010602:	f04f 30ff 	mov.w	r0, #4294967295
 8010606:	e03e      	b.n	8010686 <__swsetup_r+0xba>
 8010608:	4b25      	ldr	r3, [pc, #148]	; (80106a0 <__swsetup_r+0xd4>)
 801060a:	429c      	cmp	r4, r3
 801060c:	d101      	bne.n	8010612 <__swsetup_r+0x46>
 801060e:	68ac      	ldr	r4, [r5, #8]
 8010610:	e7eb      	b.n	80105ea <__swsetup_r+0x1e>
 8010612:	4b24      	ldr	r3, [pc, #144]	; (80106a4 <__swsetup_r+0xd8>)
 8010614:	429c      	cmp	r4, r3
 8010616:	bf08      	it	eq
 8010618:	68ec      	ldreq	r4, [r5, #12]
 801061a:	e7e6      	b.n	80105ea <__swsetup_r+0x1e>
 801061c:	0758      	lsls	r0, r3, #29
 801061e:	d512      	bpl.n	8010646 <__swsetup_r+0x7a>
 8010620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010622:	b141      	cbz	r1, 8010636 <__swsetup_r+0x6a>
 8010624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010628:	4299      	cmp	r1, r3
 801062a:	d002      	beq.n	8010632 <__swsetup_r+0x66>
 801062c:	4630      	mov	r0, r6
 801062e:	f001 fb31 	bl	8011c94 <_free_r>
 8010632:	2300      	movs	r3, #0
 8010634:	6363      	str	r3, [r4, #52]	; 0x34
 8010636:	89a3      	ldrh	r3, [r4, #12]
 8010638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801063c:	81a3      	strh	r3, [r4, #12]
 801063e:	2300      	movs	r3, #0
 8010640:	6063      	str	r3, [r4, #4]
 8010642:	6923      	ldr	r3, [r4, #16]
 8010644:	6023      	str	r3, [r4, #0]
 8010646:	89a3      	ldrh	r3, [r4, #12]
 8010648:	f043 0308 	orr.w	r3, r3, #8
 801064c:	81a3      	strh	r3, [r4, #12]
 801064e:	6923      	ldr	r3, [r4, #16]
 8010650:	b94b      	cbnz	r3, 8010666 <__swsetup_r+0x9a>
 8010652:	89a3      	ldrh	r3, [r4, #12]
 8010654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801065c:	d003      	beq.n	8010666 <__swsetup_r+0x9a>
 801065e:	4621      	mov	r1, r4
 8010660:	4630      	mov	r0, r6
 8010662:	f000 ff29 	bl	80114b8 <__smakebuf_r>
 8010666:	89a0      	ldrh	r0, [r4, #12]
 8010668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801066c:	f010 0301 	ands.w	r3, r0, #1
 8010670:	d00a      	beq.n	8010688 <__swsetup_r+0xbc>
 8010672:	2300      	movs	r3, #0
 8010674:	60a3      	str	r3, [r4, #8]
 8010676:	6963      	ldr	r3, [r4, #20]
 8010678:	425b      	negs	r3, r3
 801067a:	61a3      	str	r3, [r4, #24]
 801067c:	6923      	ldr	r3, [r4, #16]
 801067e:	b943      	cbnz	r3, 8010692 <__swsetup_r+0xc6>
 8010680:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010684:	d1ba      	bne.n	80105fc <__swsetup_r+0x30>
 8010686:	bd70      	pop	{r4, r5, r6, pc}
 8010688:	0781      	lsls	r1, r0, #30
 801068a:	bf58      	it	pl
 801068c:	6963      	ldrpl	r3, [r4, #20]
 801068e:	60a3      	str	r3, [r4, #8]
 8010690:	e7f4      	b.n	801067c <__swsetup_r+0xb0>
 8010692:	2000      	movs	r0, #0
 8010694:	e7f7      	b.n	8010686 <__swsetup_r+0xba>
 8010696:	bf00      	nop
 8010698:	2400001c 	.word	0x2400001c
 801069c:	08013e64 	.word	0x08013e64
 80106a0:	08013e84 	.word	0x08013e84
 80106a4:	08013e44 	.word	0x08013e44

080106a8 <_close_r>:
 80106a8:	b538      	push	{r3, r4, r5, lr}
 80106aa:	4d06      	ldr	r5, [pc, #24]	; (80106c4 <_close_r+0x1c>)
 80106ac:	2300      	movs	r3, #0
 80106ae:	4604      	mov	r4, r0
 80106b0:	4608      	mov	r0, r1
 80106b2:	602b      	str	r3, [r5, #0]
 80106b4:	f7f4 fcb0 	bl	8005018 <_close>
 80106b8:	1c43      	adds	r3, r0, #1
 80106ba:	d102      	bne.n	80106c2 <_close_r+0x1a>
 80106bc:	682b      	ldr	r3, [r5, #0]
 80106be:	b103      	cbz	r3, 80106c2 <_close_r+0x1a>
 80106c0:	6023      	str	r3, [r4, #0]
 80106c2:	bd38      	pop	{r3, r4, r5, pc}
 80106c4:	24005408 	.word	0x24005408

080106c8 <quorem>:
 80106c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106cc:	6903      	ldr	r3, [r0, #16]
 80106ce:	690c      	ldr	r4, [r1, #16]
 80106d0:	42a3      	cmp	r3, r4
 80106d2:	4607      	mov	r7, r0
 80106d4:	f2c0 8081 	blt.w	80107da <quorem+0x112>
 80106d8:	3c01      	subs	r4, #1
 80106da:	f101 0814 	add.w	r8, r1, #20
 80106de:	f100 0514 	add.w	r5, r0, #20
 80106e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106e6:	9301      	str	r3, [sp, #4]
 80106e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80106ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80106f0:	3301      	adds	r3, #1
 80106f2:	429a      	cmp	r2, r3
 80106f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80106f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80106fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8010700:	d331      	bcc.n	8010766 <quorem+0x9e>
 8010702:	f04f 0e00 	mov.w	lr, #0
 8010706:	4640      	mov	r0, r8
 8010708:	46ac      	mov	ip, r5
 801070a:	46f2      	mov	sl, lr
 801070c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010710:	b293      	uxth	r3, r2
 8010712:	fb06 e303 	mla	r3, r6, r3, lr
 8010716:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801071a:	b29b      	uxth	r3, r3
 801071c:	ebaa 0303 	sub.w	r3, sl, r3
 8010720:	f8dc a000 	ldr.w	sl, [ip]
 8010724:	0c12      	lsrs	r2, r2, #16
 8010726:	fa13 f38a 	uxtah	r3, r3, sl
 801072a:	fb06 e202 	mla	r2, r6, r2, lr
 801072e:	9300      	str	r3, [sp, #0]
 8010730:	9b00      	ldr	r3, [sp, #0]
 8010732:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010736:	b292      	uxth	r2, r2
 8010738:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801073c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010740:	f8bd 3000 	ldrh.w	r3, [sp]
 8010744:	4581      	cmp	r9, r0
 8010746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801074a:	f84c 3b04 	str.w	r3, [ip], #4
 801074e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010752:	d2db      	bcs.n	801070c <quorem+0x44>
 8010754:	f855 300b 	ldr.w	r3, [r5, fp]
 8010758:	b92b      	cbnz	r3, 8010766 <quorem+0x9e>
 801075a:	9b01      	ldr	r3, [sp, #4]
 801075c:	3b04      	subs	r3, #4
 801075e:	429d      	cmp	r5, r3
 8010760:	461a      	mov	r2, r3
 8010762:	d32e      	bcc.n	80107c2 <quorem+0xfa>
 8010764:	613c      	str	r4, [r7, #16]
 8010766:	4638      	mov	r0, r7
 8010768:	f001 f97c 	bl	8011a64 <__mcmp>
 801076c:	2800      	cmp	r0, #0
 801076e:	db24      	blt.n	80107ba <quorem+0xf2>
 8010770:	3601      	adds	r6, #1
 8010772:	4628      	mov	r0, r5
 8010774:	f04f 0c00 	mov.w	ip, #0
 8010778:	f858 2b04 	ldr.w	r2, [r8], #4
 801077c:	f8d0 e000 	ldr.w	lr, [r0]
 8010780:	b293      	uxth	r3, r2
 8010782:	ebac 0303 	sub.w	r3, ip, r3
 8010786:	0c12      	lsrs	r2, r2, #16
 8010788:	fa13 f38e 	uxtah	r3, r3, lr
 801078c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010790:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010794:	b29b      	uxth	r3, r3
 8010796:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801079a:	45c1      	cmp	r9, r8
 801079c:	f840 3b04 	str.w	r3, [r0], #4
 80107a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80107a4:	d2e8      	bcs.n	8010778 <quorem+0xb0>
 80107a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107ae:	b922      	cbnz	r2, 80107ba <quorem+0xf2>
 80107b0:	3b04      	subs	r3, #4
 80107b2:	429d      	cmp	r5, r3
 80107b4:	461a      	mov	r2, r3
 80107b6:	d30a      	bcc.n	80107ce <quorem+0x106>
 80107b8:	613c      	str	r4, [r7, #16]
 80107ba:	4630      	mov	r0, r6
 80107bc:	b003      	add	sp, #12
 80107be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c2:	6812      	ldr	r2, [r2, #0]
 80107c4:	3b04      	subs	r3, #4
 80107c6:	2a00      	cmp	r2, #0
 80107c8:	d1cc      	bne.n	8010764 <quorem+0x9c>
 80107ca:	3c01      	subs	r4, #1
 80107cc:	e7c7      	b.n	801075e <quorem+0x96>
 80107ce:	6812      	ldr	r2, [r2, #0]
 80107d0:	3b04      	subs	r3, #4
 80107d2:	2a00      	cmp	r2, #0
 80107d4:	d1f0      	bne.n	80107b8 <quorem+0xf0>
 80107d6:	3c01      	subs	r4, #1
 80107d8:	e7eb      	b.n	80107b2 <quorem+0xea>
 80107da:	2000      	movs	r0, #0
 80107dc:	e7ee      	b.n	80107bc <quorem+0xf4>
	...

080107e0 <_dtoa_r>:
 80107e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107e4:	ed2d 8b02 	vpush	{d8}
 80107e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80107ea:	b091      	sub	sp, #68	; 0x44
 80107ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80107f0:	ec59 8b10 	vmov	r8, r9, d0
 80107f4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80107f6:	9106      	str	r1, [sp, #24]
 80107f8:	4606      	mov	r6, r0
 80107fa:	9208      	str	r2, [sp, #32]
 80107fc:	930c      	str	r3, [sp, #48]	; 0x30
 80107fe:	b975      	cbnz	r5, 801081e <_dtoa_r+0x3e>
 8010800:	2010      	movs	r0, #16
 8010802:	f000 fe99 	bl	8011538 <malloc>
 8010806:	4602      	mov	r2, r0
 8010808:	6270      	str	r0, [r6, #36]	; 0x24
 801080a:	b920      	cbnz	r0, 8010816 <_dtoa_r+0x36>
 801080c:	4baa      	ldr	r3, [pc, #680]	; (8010ab8 <_dtoa_r+0x2d8>)
 801080e:	21ea      	movs	r1, #234	; 0xea
 8010810:	48aa      	ldr	r0, [pc, #680]	; (8010abc <_dtoa_r+0x2dc>)
 8010812:	f001 fd53 	bl	80122bc <__assert_func>
 8010816:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801081a:	6005      	str	r5, [r0, #0]
 801081c:	60c5      	str	r5, [r0, #12]
 801081e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010820:	6819      	ldr	r1, [r3, #0]
 8010822:	b151      	cbz	r1, 801083a <_dtoa_r+0x5a>
 8010824:	685a      	ldr	r2, [r3, #4]
 8010826:	604a      	str	r2, [r1, #4]
 8010828:	2301      	movs	r3, #1
 801082a:	4093      	lsls	r3, r2
 801082c:	608b      	str	r3, [r1, #8]
 801082e:	4630      	mov	r0, r6
 8010830:	f000 fed6 	bl	80115e0 <_Bfree>
 8010834:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010836:	2200      	movs	r2, #0
 8010838:	601a      	str	r2, [r3, #0]
 801083a:	f1b9 0300 	subs.w	r3, r9, #0
 801083e:	bfbb      	ittet	lt
 8010840:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010844:	9303      	strlt	r3, [sp, #12]
 8010846:	2300      	movge	r3, #0
 8010848:	2201      	movlt	r2, #1
 801084a:	bfac      	ite	ge
 801084c:	6023      	strge	r3, [r4, #0]
 801084e:	6022      	strlt	r2, [r4, #0]
 8010850:	4b9b      	ldr	r3, [pc, #620]	; (8010ac0 <_dtoa_r+0x2e0>)
 8010852:	9c03      	ldr	r4, [sp, #12]
 8010854:	43a3      	bics	r3, r4
 8010856:	d11c      	bne.n	8010892 <_dtoa_r+0xb2>
 8010858:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801085a:	f242 730f 	movw	r3, #9999	; 0x270f
 801085e:	6013      	str	r3, [r2, #0]
 8010860:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010864:	ea53 0308 	orrs.w	r3, r3, r8
 8010868:	f000 84fd 	beq.w	8011266 <_dtoa_r+0xa86>
 801086c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801086e:	b963      	cbnz	r3, 801088a <_dtoa_r+0xaa>
 8010870:	4b94      	ldr	r3, [pc, #592]	; (8010ac4 <_dtoa_r+0x2e4>)
 8010872:	e01f      	b.n	80108b4 <_dtoa_r+0xd4>
 8010874:	4b94      	ldr	r3, [pc, #592]	; (8010ac8 <_dtoa_r+0x2e8>)
 8010876:	9301      	str	r3, [sp, #4]
 8010878:	3308      	adds	r3, #8
 801087a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801087c:	6013      	str	r3, [r2, #0]
 801087e:	9801      	ldr	r0, [sp, #4]
 8010880:	b011      	add	sp, #68	; 0x44
 8010882:	ecbd 8b02 	vpop	{d8}
 8010886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801088a:	4b8e      	ldr	r3, [pc, #568]	; (8010ac4 <_dtoa_r+0x2e4>)
 801088c:	9301      	str	r3, [sp, #4]
 801088e:	3303      	adds	r3, #3
 8010890:	e7f3      	b.n	801087a <_dtoa_r+0x9a>
 8010892:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010896:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801089e:	d10b      	bne.n	80108b8 <_dtoa_r+0xd8>
 80108a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80108a2:	2301      	movs	r3, #1
 80108a4:	6013      	str	r3, [r2, #0]
 80108a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	f000 84d9 	beq.w	8011260 <_dtoa_r+0xa80>
 80108ae:	4887      	ldr	r0, [pc, #540]	; (8010acc <_dtoa_r+0x2ec>)
 80108b0:	6018      	str	r0, [r3, #0]
 80108b2:	1e43      	subs	r3, r0, #1
 80108b4:	9301      	str	r3, [sp, #4]
 80108b6:	e7e2      	b.n	801087e <_dtoa_r+0x9e>
 80108b8:	a90f      	add	r1, sp, #60	; 0x3c
 80108ba:	aa0e      	add	r2, sp, #56	; 0x38
 80108bc:	4630      	mov	r0, r6
 80108be:	eeb0 0b48 	vmov.f64	d0, d8
 80108c2:	f001 f975 	bl	8011bb0 <__d2b>
 80108c6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80108ca:	4605      	mov	r5, r0
 80108cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80108ce:	2900      	cmp	r1, #0
 80108d0:	d046      	beq.n	8010960 <_dtoa_r+0x180>
 80108d2:	ee18 4a90 	vmov	r4, s17
 80108d6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80108da:	ec53 2b18 	vmov	r2, r3, d8
 80108de:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80108e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80108e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80108ea:	2400      	movs	r4, #0
 80108ec:	ec43 2b16 	vmov	d6, r2, r3
 80108f0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80108f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8010aa0 <_dtoa_r+0x2c0>
 80108f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80108fc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8010aa8 <_dtoa_r+0x2c8>
 8010900:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010904:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8010ab0 <_dtoa_r+0x2d0>
 8010908:	ee07 1a90 	vmov	s15, r1
 801090c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010910:	eeb0 7b46 	vmov.f64	d7, d6
 8010914:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010918:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801091c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010924:	ee16 ba90 	vmov	fp, s13
 8010928:	940a      	str	r4, [sp, #40]	; 0x28
 801092a:	d508      	bpl.n	801093e <_dtoa_r+0x15e>
 801092c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010930:	eeb4 6b47 	vcmp.f64	d6, d7
 8010934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010938:	bf18      	it	ne
 801093a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801093e:	f1bb 0f16 	cmp.w	fp, #22
 8010942:	d82f      	bhi.n	80109a4 <_dtoa_r+0x1c4>
 8010944:	4b62      	ldr	r3, [pc, #392]	; (8010ad0 <_dtoa_r+0x2f0>)
 8010946:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801094a:	ed93 7b00 	vldr	d7, [r3]
 801094e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010956:	d501      	bpl.n	801095c <_dtoa_r+0x17c>
 8010958:	f10b 3bff 	add.w	fp, fp, #4294967295
 801095c:	2300      	movs	r3, #0
 801095e:	e022      	b.n	80109a6 <_dtoa_r+0x1c6>
 8010960:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010962:	4401      	add	r1, r0
 8010964:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8010968:	2b20      	cmp	r3, #32
 801096a:	bfc1      	itttt	gt
 801096c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010970:	fa04 f303 	lslgt.w	r3, r4, r3
 8010974:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8010978:	fa28 f804 	lsrgt.w	r8, r8, r4
 801097c:	bfd6      	itet	le
 801097e:	f1c3 0320 	rsble	r3, r3, #32
 8010982:	ea43 0808 	orrgt.w	r8, r3, r8
 8010986:	fa08 f803 	lslle.w	r8, r8, r3
 801098a:	ee07 8a90 	vmov	s15, r8
 801098e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010992:	3901      	subs	r1, #1
 8010994:	ee17 4a90 	vmov	r4, s15
 8010998:	ec53 2b17 	vmov	r2, r3, d7
 801099c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80109a0:	2401      	movs	r4, #1
 80109a2:	e7a3      	b.n	80108ec <_dtoa_r+0x10c>
 80109a4:	2301      	movs	r3, #1
 80109a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80109a8:	1a43      	subs	r3, r0, r1
 80109aa:	1e5a      	subs	r2, r3, #1
 80109ac:	bf45      	ittet	mi
 80109ae:	f1c3 0301 	rsbmi	r3, r3, #1
 80109b2:	9304      	strmi	r3, [sp, #16]
 80109b4:	2300      	movpl	r3, #0
 80109b6:	2300      	movmi	r3, #0
 80109b8:	9205      	str	r2, [sp, #20]
 80109ba:	bf54      	ite	pl
 80109bc:	9304      	strpl	r3, [sp, #16]
 80109be:	9305      	strmi	r3, [sp, #20]
 80109c0:	f1bb 0f00 	cmp.w	fp, #0
 80109c4:	db18      	blt.n	80109f8 <_dtoa_r+0x218>
 80109c6:	9b05      	ldr	r3, [sp, #20]
 80109c8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80109cc:	445b      	add	r3, fp
 80109ce:	9305      	str	r3, [sp, #20]
 80109d0:	2300      	movs	r3, #0
 80109d2:	9a06      	ldr	r2, [sp, #24]
 80109d4:	2a09      	cmp	r2, #9
 80109d6:	d849      	bhi.n	8010a6c <_dtoa_r+0x28c>
 80109d8:	2a05      	cmp	r2, #5
 80109da:	bfc4      	itt	gt
 80109dc:	3a04      	subgt	r2, #4
 80109de:	9206      	strgt	r2, [sp, #24]
 80109e0:	9a06      	ldr	r2, [sp, #24]
 80109e2:	f1a2 0202 	sub.w	r2, r2, #2
 80109e6:	bfcc      	ite	gt
 80109e8:	2400      	movgt	r4, #0
 80109ea:	2401      	movle	r4, #1
 80109ec:	2a03      	cmp	r2, #3
 80109ee:	d848      	bhi.n	8010a82 <_dtoa_r+0x2a2>
 80109f0:	e8df f002 	tbb	[pc, r2]
 80109f4:	3a2c2e0b 	.word	0x3a2c2e0b
 80109f8:	9b04      	ldr	r3, [sp, #16]
 80109fa:	2200      	movs	r2, #0
 80109fc:	eba3 030b 	sub.w	r3, r3, fp
 8010a00:	9304      	str	r3, [sp, #16]
 8010a02:	9209      	str	r2, [sp, #36]	; 0x24
 8010a04:	f1cb 0300 	rsb	r3, fp, #0
 8010a08:	e7e3      	b.n	80109d2 <_dtoa_r+0x1f2>
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	9207      	str	r2, [sp, #28]
 8010a0e:	9a08      	ldr	r2, [sp, #32]
 8010a10:	2a00      	cmp	r2, #0
 8010a12:	dc39      	bgt.n	8010a88 <_dtoa_r+0x2a8>
 8010a14:	f04f 0a01 	mov.w	sl, #1
 8010a18:	46d1      	mov	r9, sl
 8010a1a:	4652      	mov	r2, sl
 8010a1c:	f8cd a020 	str.w	sl, [sp, #32]
 8010a20:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8010a22:	2100      	movs	r1, #0
 8010a24:	6079      	str	r1, [r7, #4]
 8010a26:	2004      	movs	r0, #4
 8010a28:	f100 0c14 	add.w	ip, r0, #20
 8010a2c:	4594      	cmp	ip, r2
 8010a2e:	6879      	ldr	r1, [r7, #4]
 8010a30:	d92f      	bls.n	8010a92 <_dtoa_r+0x2b2>
 8010a32:	4630      	mov	r0, r6
 8010a34:	930d      	str	r3, [sp, #52]	; 0x34
 8010a36:	f000 fd93 	bl	8011560 <_Balloc>
 8010a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a3c:	9001      	str	r0, [sp, #4]
 8010a3e:	4602      	mov	r2, r0
 8010a40:	2800      	cmp	r0, #0
 8010a42:	d149      	bne.n	8010ad8 <_dtoa_r+0x2f8>
 8010a44:	4b23      	ldr	r3, [pc, #140]	; (8010ad4 <_dtoa_r+0x2f4>)
 8010a46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010a4a:	e6e1      	b.n	8010810 <_dtoa_r+0x30>
 8010a4c:	2201      	movs	r2, #1
 8010a4e:	e7dd      	b.n	8010a0c <_dtoa_r+0x22c>
 8010a50:	2200      	movs	r2, #0
 8010a52:	9207      	str	r2, [sp, #28]
 8010a54:	9a08      	ldr	r2, [sp, #32]
 8010a56:	eb0b 0a02 	add.w	sl, fp, r2
 8010a5a:	f10a 0901 	add.w	r9, sl, #1
 8010a5e:	464a      	mov	r2, r9
 8010a60:	2a01      	cmp	r2, #1
 8010a62:	bfb8      	it	lt
 8010a64:	2201      	movlt	r2, #1
 8010a66:	e7db      	b.n	8010a20 <_dtoa_r+0x240>
 8010a68:	2201      	movs	r2, #1
 8010a6a:	e7f2      	b.n	8010a52 <_dtoa_r+0x272>
 8010a6c:	2401      	movs	r4, #1
 8010a6e:	2200      	movs	r2, #0
 8010a70:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8010a74:	f04f 3aff 	mov.w	sl, #4294967295
 8010a78:	2100      	movs	r1, #0
 8010a7a:	46d1      	mov	r9, sl
 8010a7c:	2212      	movs	r2, #18
 8010a7e:	9108      	str	r1, [sp, #32]
 8010a80:	e7ce      	b.n	8010a20 <_dtoa_r+0x240>
 8010a82:	2201      	movs	r2, #1
 8010a84:	9207      	str	r2, [sp, #28]
 8010a86:	e7f5      	b.n	8010a74 <_dtoa_r+0x294>
 8010a88:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010a8c:	46d1      	mov	r9, sl
 8010a8e:	4652      	mov	r2, sl
 8010a90:	e7c6      	b.n	8010a20 <_dtoa_r+0x240>
 8010a92:	3101      	adds	r1, #1
 8010a94:	6079      	str	r1, [r7, #4]
 8010a96:	0040      	lsls	r0, r0, #1
 8010a98:	e7c6      	b.n	8010a28 <_dtoa_r+0x248>
 8010a9a:	bf00      	nop
 8010a9c:	f3af 8000 	nop.w
 8010aa0:	636f4361 	.word	0x636f4361
 8010aa4:	3fd287a7 	.word	0x3fd287a7
 8010aa8:	8b60c8b3 	.word	0x8b60c8b3
 8010aac:	3fc68a28 	.word	0x3fc68a28
 8010ab0:	509f79fb 	.word	0x509f79fb
 8010ab4:	3fd34413 	.word	0x3fd34413
 8010ab8:	08013ee9 	.word	0x08013ee9
 8010abc:	08013f00 	.word	0x08013f00
 8010ac0:	7ff00000 	.word	0x7ff00000
 8010ac4:	08013ee5 	.word	0x08013ee5
 8010ac8:	08013edc 	.word	0x08013edc
 8010acc:	08013eb9 	.word	0x08013eb9
 8010ad0:	08013ff0 	.word	0x08013ff0
 8010ad4:	08013f5b 	.word	0x08013f5b
 8010ad8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010ada:	9901      	ldr	r1, [sp, #4]
 8010adc:	6011      	str	r1, [r2, #0]
 8010ade:	f1b9 0f0e 	cmp.w	r9, #14
 8010ae2:	d86c      	bhi.n	8010bbe <_dtoa_r+0x3de>
 8010ae4:	2c00      	cmp	r4, #0
 8010ae6:	d06a      	beq.n	8010bbe <_dtoa_r+0x3de>
 8010ae8:	f1bb 0f00 	cmp.w	fp, #0
 8010aec:	f340 80a0 	ble.w	8010c30 <_dtoa_r+0x450>
 8010af0:	49c1      	ldr	r1, [pc, #772]	; (8010df8 <_dtoa_r+0x618>)
 8010af2:	f00b 020f 	and.w	r2, fp, #15
 8010af6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8010afa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010afe:	ed92 7b00 	vldr	d7, [r2]
 8010b02:	ea4f 112b 	mov.w	r1, fp, asr #4
 8010b06:	f000 8087 	beq.w	8010c18 <_dtoa_r+0x438>
 8010b0a:	4abc      	ldr	r2, [pc, #752]	; (8010dfc <_dtoa_r+0x61c>)
 8010b0c:	ed92 6b08 	vldr	d6, [r2, #32]
 8010b10:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010b14:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010b18:	f001 010f 	and.w	r1, r1, #15
 8010b1c:	2203      	movs	r2, #3
 8010b1e:	48b7      	ldr	r0, [pc, #732]	; (8010dfc <_dtoa_r+0x61c>)
 8010b20:	2900      	cmp	r1, #0
 8010b22:	d17b      	bne.n	8010c1c <_dtoa_r+0x43c>
 8010b24:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010b28:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010b2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010b30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010b32:	2900      	cmp	r1, #0
 8010b34:	f000 80a2 	beq.w	8010c7c <_dtoa_r+0x49c>
 8010b38:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010b3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b40:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b48:	f140 8098 	bpl.w	8010c7c <_dtoa_r+0x49c>
 8010b4c:	f1b9 0f00 	cmp.w	r9, #0
 8010b50:	f000 8094 	beq.w	8010c7c <_dtoa_r+0x49c>
 8010b54:	f1ba 0f00 	cmp.w	sl, #0
 8010b58:	dd2f      	ble.n	8010bba <_dtoa_r+0x3da>
 8010b5a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010b5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010b62:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010b66:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010b6a:	3201      	adds	r2, #1
 8010b6c:	4650      	mov	r0, sl
 8010b6e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010b72:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010b76:	ee07 2a90 	vmov	s15, r2
 8010b7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010b7e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010b82:	ee15 4a90 	vmov	r4, s11
 8010b86:	ec52 1b15 	vmov	r1, r2, d5
 8010b8a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8010b8e:	2800      	cmp	r0, #0
 8010b90:	d177      	bne.n	8010c82 <_dtoa_r+0x4a2>
 8010b92:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010b96:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010b9a:	ec42 1b17 	vmov	d7, r1, r2
 8010b9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ba6:	f300 8263 	bgt.w	8011070 <_dtoa_r+0x890>
 8010baa:	eeb1 7b47 	vneg.f64	d7, d7
 8010bae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bb6:	f100 8258 	bmi.w	801106a <_dtoa_r+0x88a>
 8010bba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010bbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010bc0:	2a00      	cmp	r2, #0
 8010bc2:	f2c0 811d 	blt.w	8010e00 <_dtoa_r+0x620>
 8010bc6:	f1bb 0f0e 	cmp.w	fp, #14
 8010bca:	f300 8119 	bgt.w	8010e00 <_dtoa_r+0x620>
 8010bce:	4b8a      	ldr	r3, [pc, #552]	; (8010df8 <_dtoa_r+0x618>)
 8010bd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010bd4:	ed93 6b00 	vldr	d6, [r3]
 8010bd8:	9b08      	ldr	r3, [sp, #32]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f280 80b7 	bge.w	8010d4e <_dtoa_r+0x56e>
 8010be0:	f1b9 0f00 	cmp.w	r9, #0
 8010be4:	f300 80b3 	bgt.w	8010d4e <_dtoa_r+0x56e>
 8010be8:	f040 823f 	bne.w	801106a <_dtoa_r+0x88a>
 8010bec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010bf0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010bf4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010bf8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c00:	464c      	mov	r4, r9
 8010c02:	464f      	mov	r7, r9
 8010c04:	f280 8215 	bge.w	8011032 <_dtoa_r+0x852>
 8010c08:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010c0c:	2331      	movs	r3, #49	; 0x31
 8010c0e:	f808 3b01 	strb.w	r3, [r8], #1
 8010c12:	f10b 0b01 	add.w	fp, fp, #1
 8010c16:	e211      	b.n	801103c <_dtoa_r+0x85c>
 8010c18:	2202      	movs	r2, #2
 8010c1a:	e780      	b.n	8010b1e <_dtoa_r+0x33e>
 8010c1c:	07cc      	lsls	r4, r1, #31
 8010c1e:	d504      	bpl.n	8010c2a <_dtoa_r+0x44a>
 8010c20:	ed90 6b00 	vldr	d6, [r0]
 8010c24:	3201      	adds	r2, #1
 8010c26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010c2a:	1049      	asrs	r1, r1, #1
 8010c2c:	3008      	adds	r0, #8
 8010c2e:	e777      	b.n	8010b20 <_dtoa_r+0x340>
 8010c30:	d022      	beq.n	8010c78 <_dtoa_r+0x498>
 8010c32:	f1cb 0100 	rsb	r1, fp, #0
 8010c36:	4a70      	ldr	r2, [pc, #448]	; (8010df8 <_dtoa_r+0x618>)
 8010c38:	f001 000f 	and.w	r0, r1, #15
 8010c3c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010c40:	ed92 7b00 	vldr	d7, [r2]
 8010c44:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010c48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c4c:	486b      	ldr	r0, [pc, #428]	; (8010dfc <_dtoa_r+0x61c>)
 8010c4e:	1109      	asrs	r1, r1, #4
 8010c50:	2400      	movs	r4, #0
 8010c52:	2202      	movs	r2, #2
 8010c54:	b929      	cbnz	r1, 8010c62 <_dtoa_r+0x482>
 8010c56:	2c00      	cmp	r4, #0
 8010c58:	f43f af6a 	beq.w	8010b30 <_dtoa_r+0x350>
 8010c5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c60:	e766      	b.n	8010b30 <_dtoa_r+0x350>
 8010c62:	07cf      	lsls	r7, r1, #31
 8010c64:	d505      	bpl.n	8010c72 <_dtoa_r+0x492>
 8010c66:	ed90 6b00 	vldr	d6, [r0]
 8010c6a:	3201      	adds	r2, #1
 8010c6c:	2401      	movs	r4, #1
 8010c6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010c72:	1049      	asrs	r1, r1, #1
 8010c74:	3008      	adds	r0, #8
 8010c76:	e7ed      	b.n	8010c54 <_dtoa_r+0x474>
 8010c78:	2202      	movs	r2, #2
 8010c7a:	e759      	b.n	8010b30 <_dtoa_r+0x350>
 8010c7c:	465f      	mov	r7, fp
 8010c7e:	4648      	mov	r0, r9
 8010c80:	e775      	b.n	8010b6e <_dtoa_r+0x38e>
 8010c82:	ec42 1b17 	vmov	d7, r1, r2
 8010c86:	4a5c      	ldr	r2, [pc, #368]	; (8010df8 <_dtoa_r+0x618>)
 8010c88:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010c8c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010c90:	9a01      	ldr	r2, [sp, #4]
 8010c92:	1814      	adds	r4, r2, r0
 8010c94:	9a07      	ldr	r2, [sp, #28]
 8010c96:	b352      	cbz	r2, 8010cee <_dtoa_r+0x50e>
 8010c98:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010c9c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010ca0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010ca4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010ca8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010cac:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010cb0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010cb4:	ee14 2a90 	vmov	r2, s9
 8010cb8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010cbc:	3230      	adds	r2, #48	; 0x30
 8010cbe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010cc2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cca:	f808 2b01 	strb.w	r2, [r8], #1
 8010cce:	d439      	bmi.n	8010d44 <_dtoa_r+0x564>
 8010cd0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010cd4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cdc:	d472      	bmi.n	8010dc4 <_dtoa_r+0x5e4>
 8010cde:	45a0      	cmp	r8, r4
 8010ce0:	f43f af6b 	beq.w	8010bba <_dtoa_r+0x3da>
 8010ce4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010ce8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010cec:	e7e0      	b.n	8010cb0 <_dtoa_r+0x4d0>
 8010cee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010cf2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010cf6:	4621      	mov	r1, r4
 8010cf8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010cfc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010d00:	ee14 2a90 	vmov	r2, s9
 8010d04:	3230      	adds	r2, #48	; 0x30
 8010d06:	f808 2b01 	strb.w	r2, [r8], #1
 8010d0a:	45a0      	cmp	r8, r4
 8010d0c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010d10:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010d14:	d118      	bne.n	8010d48 <_dtoa_r+0x568>
 8010d16:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010d1a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010d1e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d26:	dc4d      	bgt.n	8010dc4 <_dtoa_r+0x5e4>
 8010d28:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010d2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d34:	f57f af41 	bpl.w	8010bba <_dtoa_r+0x3da>
 8010d38:	4688      	mov	r8, r1
 8010d3a:	3901      	subs	r1, #1
 8010d3c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010d40:	2b30      	cmp	r3, #48	; 0x30
 8010d42:	d0f9      	beq.n	8010d38 <_dtoa_r+0x558>
 8010d44:	46bb      	mov	fp, r7
 8010d46:	e02a      	b.n	8010d9e <_dtoa_r+0x5be>
 8010d48:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010d4c:	e7d6      	b.n	8010cfc <_dtoa_r+0x51c>
 8010d4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d52:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010d56:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010d5a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010d5e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010d62:	ee15 3a10 	vmov	r3, s10
 8010d66:	3330      	adds	r3, #48	; 0x30
 8010d68:	f808 3b01 	strb.w	r3, [r8], #1
 8010d6c:	9b01      	ldr	r3, [sp, #4]
 8010d6e:	eba8 0303 	sub.w	r3, r8, r3
 8010d72:	4599      	cmp	r9, r3
 8010d74:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010d78:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010d7c:	d133      	bne.n	8010de6 <_dtoa_r+0x606>
 8010d7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010d82:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d8a:	dc1a      	bgt.n	8010dc2 <_dtoa_r+0x5e2>
 8010d8c:	eeb4 7b46 	vcmp.f64	d7, d6
 8010d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d94:	d103      	bne.n	8010d9e <_dtoa_r+0x5be>
 8010d96:	ee15 3a10 	vmov	r3, s10
 8010d9a:	07d9      	lsls	r1, r3, #31
 8010d9c:	d411      	bmi.n	8010dc2 <_dtoa_r+0x5e2>
 8010d9e:	4629      	mov	r1, r5
 8010da0:	4630      	mov	r0, r6
 8010da2:	f000 fc1d 	bl	80115e0 <_Bfree>
 8010da6:	2300      	movs	r3, #0
 8010da8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010daa:	f888 3000 	strb.w	r3, [r8]
 8010dae:	f10b 0301 	add.w	r3, fp, #1
 8010db2:	6013      	str	r3, [r2, #0]
 8010db4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	f43f ad61 	beq.w	801087e <_dtoa_r+0x9e>
 8010dbc:	f8c3 8000 	str.w	r8, [r3]
 8010dc0:	e55d      	b.n	801087e <_dtoa_r+0x9e>
 8010dc2:	465f      	mov	r7, fp
 8010dc4:	4643      	mov	r3, r8
 8010dc6:	4698      	mov	r8, r3
 8010dc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010dcc:	2a39      	cmp	r2, #57	; 0x39
 8010dce:	d106      	bne.n	8010dde <_dtoa_r+0x5fe>
 8010dd0:	9a01      	ldr	r2, [sp, #4]
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d1f7      	bne.n	8010dc6 <_dtoa_r+0x5e6>
 8010dd6:	9901      	ldr	r1, [sp, #4]
 8010dd8:	2230      	movs	r2, #48	; 0x30
 8010dda:	3701      	adds	r7, #1
 8010ddc:	700a      	strb	r2, [r1, #0]
 8010dde:	781a      	ldrb	r2, [r3, #0]
 8010de0:	3201      	adds	r2, #1
 8010de2:	701a      	strb	r2, [r3, #0]
 8010de4:	e7ae      	b.n	8010d44 <_dtoa_r+0x564>
 8010de6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010dea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010df2:	d1b2      	bne.n	8010d5a <_dtoa_r+0x57a>
 8010df4:	e7d3      	b.n	8010d9e <_dtoa_r+0x5be>
 8010df6:	bf00      	nop
 8010df8:	08013ff0 	.word	0x08013ff0
 8010dfc:	08013fc8 	.word	0x08013fc8
 8010e00:	9907      	ldr	r1, [sp, #28]
 8010e02:	2900      	cmp	r1, #0
 8010e04:	f000 80d0 	beq.w	8010fa8 <_dtoa_r+0x7c8>
 8010e08:	9906      	ldr	r1, [sp, #24]
 8010e0a:	2901      	cmp	r1, #1
 8010e0c:	f300 80b4 	bgt.w	8010f78 <_dtoa_r+0x798>
 8010e10:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010e12:	2900      	cmp	r1, #0
 8010e14:	f000 80ac 	beq.w	8010f70 <_dtoa_r+0x790>
 8010e18:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010e1c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010e20:	461c      	mov	r4, r3
 8010e22:	930a      	str	r3, [sp, #40]	; 0x28
 8010e24:	9b04      	ldr	r3, [sp, #16]
 8010e26:	4413      	add	r3, r2
 8010e28:	9304      	str	r3, [sp, #16]
 8010e2a:	9b05      	ldr	r3, [sp, #20]
 8010e2c:	2101      	movs	r1, #1
 8010e2e:	4413      	add	r3, r2
 8010e30:	4630      	mov	r0, r6
 8010e32:	9305      	str	r3, [sp, #20]
 8010e34:	f000 fc8c 	bl	8011750 <__i2b>
 8010e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e3a:	4607      	mov	r7, r0
 8010e3c:	f1b8 0f00 	cmp.w	r8, #0
 8010e40:	dd0d      	ble.n	8010e5e <_dtoa_r+0x67e>
 8010e42:	9a05      	ldr	r2, [sp, #20]
 8010e44:	2a00      	cmp	r2, #0
 8010e46:	dd0a      	ble.n	8010e5e <_dtoa_r+0x67e>
 8010e48:	4542      	cmp	r2, r8
 8010e4a:	9904      	ldr	r1, [sp, #16]
 8010e4c:	bfa8      	it	ge
 8010e4e:	4642      	movge	r2, r8
 8010e50:	1a89      	subs	r1, r1, r2
 8010e52:	9104      	str	r1, [sp, #16]
 8010e54:	9905      	ldr	r1, [sp, #20]
 8010e56:	eba8 0802 	sub.w	r8, r8, r2
 8010e5a:	1a8a      	subs	r2, r1, r2
 8010e5c:	9205      	str	r2, [sp, #20]
 8010e5e:	b303      	cbz	r3, 8010ea2 <_dtoa_r+0x6c2>
 8010e60:	9a07      	ldr	r2, [sp, #28]
 8010e62:	2a00      	cmp	r2, #0
 8010e64:	f000 80a5 	beq.w	8010fb2 <_dtoa_r+0x7d2>
 8010e68:	2c00      	cmp	r4, #0
 8010e6a:	dd13      	ble.n	8010e94 <_dtoa_r+0x6b4>
 8010e6c:	4639      	mov	r1, r7
 8010e6e:	4622      	mov	r2, r4
 8010e70:	4630      	mov	r0, r6
 8010e72:	930d      	str	r3, [sp, #52]	; 0x34
 8010e74:	f000 fd2c 	bl	80118d0 <__pow5mult>
 8010e78:	462a      	mov	r2, r5
 8010e7a:	4601      	mov	r1, r0
 8010e7c:	4607      	mov	r7, r0
 8010e7e:	4630      	mov	r0, r6
 8010e80:	f000 fc7c 	bl	801177c <__multiply>
 8010e84:	4629      	mov	r1, r5
 8010e86:	900a      	str	r0, [sp, #40]	; 0x28
 8010e88:	4630      	mov	r0, r6
 8010e8a:	f000 fba9 	bl	80115e0 <_Bfree>
 8010e8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e92:	4615      	mov	r5, r2
 8010e94:	1b1a      	subs	r2, r3, r4
 8010e96:	d004      	beq.n	8010ea2 <_dtoa_r+0x6c2>
 8010e98:	4629      	mov	r1, r5
 8010e9a:	4630      	mov	r0, r6
 8010e9c:	f000 fd18 	bl	80118d0 <__pow5mult>
 8010ea0:	4605      	mov	r5, r0
 8010ea2:	2101      	movs	r1, #1
 8010ea4:	4630      	mov	r0, r6
 8010ea6:	f000 fc53 	bl	8011750 <__i2b>
 8010eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	4604      	mov	r4, r0
 8010eb0:	f340 8081 	ble.w	8010fb6 <_dtoa_r+0x7d6>
 8010eb4:	461a      	mov	r2, r3
 8010eb6:	4601      	mov	r1, r0
 8010eb8:	4630      	mov	r0, r6
 8010eba:	f000 fd09 	bl	80118d0 <__pow5mult>
 8010ebe:	9b06      	ldr	r3, [sp, #24]
 8010ec0:	2b01      	cmp	r3, #1
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	dd7a      	ble.n	8010fbc <_dtoa_r+0x7dc>
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	930a      	str	r3, [sp, #40]	; 0x28
 8010eca:	6922      	ldr	r2, [r4, #16]
 8010ecc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010ed0:	6910      	ldr	r0, [r2, #16]
 8010ed2:	f000 fbed 	bl	80116b0 <__hi0bits>
 8010ed6:	f1c0 0020 	rsb	r0, r0, #32
 8010eda:	9b05      	ldr	r3, [sp, #20]
 8010edc:	4418      	add	r0, r3
 8010ede:	f010 001f 	ands.w	r0, r0, #31
 8010ee2:	f000 808c 	beq.w	8010ffe <_dtoa_r+0x81e>
 8010ee6:	f1c0 0220 	rsb	r2, r0, #32
 8010eea:	2a04      	cmp	r2, #4
 8010eec:	f340 8085 	ble.w	8010ffa <_dtoa_r+0x81a>
 8010ef0:	f1c0 001c 	rsb	r0, r0, #28
 8010ef4:	9b04      	ldr	r3, [sp, #16]
 8010ef6:	4403      	add	r3, r0
 8010ef8:	9304      	str	r3, [sp, #16]
 8010efa:	9b05      	ldr	r3, [sp, #20]
 8010efc:	4403      	add	r3, r0
 8010efe:	4480      	add	r8, r0
 8010f00:	9305      	str	r3, [sp, #20]
 8010f02:	9b04      	ldr	r3, [sp, #16]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	dd05      	ble.n	8010f14 <_dtoa_r+0x734>
 8010f08:	4629      	mov	r1, r5
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	4630      	mov	r0, r6
 8010f0e:	f000 fd39 	bl	8011984 <__lshift>
 8010f12:	4605      	mov	r5, r0
 8010f14:	9b05      	ldr	r3, [sp, #20]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	dd05      	ble.n	8010f26 <_dtoa_r+0x746>
 8010f1a:	4621      	mov	r1, r4
 8010f1c:	461a      	mov	r2, r3
 8010f1e:	4630      	mov	r0, r6
 8010f20:	f000 fd30 	bl	8011984 <__lshift>
 8010f24:	4604      	mov	r4, r0
 8010f26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d06a      	beq.n	8011002 <_dtoa_r+0x822>
 8010f2c:	4621      	mov	r1, r4
 8010f2e:	4628      	mov	r0, r5
 8010f30:	f000 fd98 	bl	8011a64 <__mcmp>
 8010f34:	2800      	cmp	r0, #0
 8010f36:	da64      	bge.n	8011002 <_dtoa_r+0x822>
 8010f38:	2300      	movs	r3, #0
 8010f3a:	4629      	mov	r1, r5
 8010f3c:	220a      	movs	r2, #10
 8010f3e:	4630      	mov	r0, r6
 8010f40:	f000 fb70 	bl	8011624 <__multadd>
 8010f44:	9b07      	ldr	r3, [sp, #28]
 8010f46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010f4a:	4605      	mov	r5, r0
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	f000 8191 	beq.w	8011274 <_dtoa_r+0xa94>
 8010f52:	4639      	mov	r1, r7
 8010f54:	2300      	movs	r3, #0
 8010f56:	220a      	movs	r2, #10
 8010f58:	4630      	mov	r0, r6
 8010f5a:	f000 fb63 	bl	8011624 <__multadd>
 8010f5e:	f1ba 0f00 	cmp.w	sl, #0
 8010f62:	4607      	mov	r7, r0
 8010f64:	f300 808d 	bgt.w	8011082 <_dtoa_r+0x8a2>
 8010f68:	9b06      	ldr	r3, [sp, #24]
 8010f6a:	2b02      	cmp	r3, #2
 8010f6c:	dc50      	bgt.n	8011010 <_dtoa_r+0x830>
 8010f6e:	e088      	b.n	8011082 <_dtoa_r+0x8a2>
 8010f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010f72:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010f76:	e751      	b.n	8010e1c <_dtoa_r+0x63c>
 8010f78:	f109 34ff 	add.w	r4, r9, #4294967295
 8010f7c:	42a3      	cmp	r3, r4
 8010f7e:	bfbf      	itttt	lt
 8010f80:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8010f82:	1ae3      	sublt	r3, r4, r3
 8010f84:	18d2      	addlt	r2, r2, r3
 8010f86:	9209      	strlt	r2, [sp, #36]	; 0x24
 8010f88:	bfb6      	itet	lt
 8010f8a:	4623      	movlt	r3, r4
 8010f8c:	1b1c      	subge	r4, r3, r4
 8010f8e:	2400      	movlt	r4, #0
 8010f90:	f1b9 0f00 	cmp.w	r9, #0
 8010f94:	bfb5      	itete	lt
 8010f96:	9a04      	ldrlt	r2, [sp, #16]
 8010f98:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8010f9c:	eba2 0809 	sublt.w	r8, r2, r9
 8010fa0:	464a      	movge	r2, r9
 8010fa2:	bfb8      	it	lt
 8010fa4:	2200      	movlt	r2, #0
 8010fa6:	e73c      	b.n	8010e22 <_dtoa_r+0x642>
 8010fa8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010fac:	9f07      	ldr	r7, [sp, #28]
 8010fae:	461c      	mov	r4, r3
 8010fb0:	e744      	b.n	8010e3c <_dtoa_r+0x65c>
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	e770      	b.n	8010e98 <_dtoa_r+0x6b8>
 8010fb6:	9b06      	ldr	r3, [sp, #24]
 8010fb8:	2b01      	cmp	r3, #1
 8010fba:	dc18      	bgt.n	8010fee <_dtoa_r+0x80e>
 8010fbc:	9b02      	ldr	r3, [sp, #8]
 8010fbe:	b9b3      	cbnz	r3, 8010fee <_dtoa_r+0x80e>
 8010fc0:	9b03      	ldr	r3, [sp, #12]
 8010fc2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010fc6:	b9a2      	cbnz	r2, 8010ff2 <_dtoa_r+0x812>
 8010fc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010fcc:	0d12      	lsrs	r2, r2, #20
 8010fce:	0512      	lsls	r2, r2, #20
 8010fd0:	b18a      	cbz	r2, 8010ff6 <_dtoa_r+0x816>
 8010fd2:	9b04      	ldr	r3, [sp, #16]
 8010fd4:	3301      	adds	r3, #1
 8010fd6:	9304      	str	r3, [sp, #16]
 8010fd8:	9b05      	ldr	r3, [sp, #20]
 8010fda:	3301      	adds	r3, #1
 8010fdc:	9305      	str	r3, [sp, #20]
 8010fde:	2301      	movs	r3, #1
 8010fe0:	930a      	str	r3, [sp, #40]	; 0x28
 8010fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	f47f af70 	bne.w	8010eca <_dtoa_r+0x6ea>
 8010fea:	2001      	movs	r0, #1
 8010fec:	e775      	b.n	8010eda <_dtoa_r+0x6fa>
 8010fee:	2300      	movs	r3, #0
 8010ff0:	e7f6      	b.n	8010fe0 <_dtoa_r+0x800>
 8010ff2:	9b02      	ldr	r3, [sp, #8]
 8010ff4:	e7f4      	b.n	8010fe0 <_dtoa_r+0x800>
 8010ff6:	920a      	str	r2, [sp, #40]	; 0x28
 8010ff8:	e7f3      	b.n	8010fe2 <_dtoa_r+0x802>
 8010ffa:	d082      	beq.n	8010f02 <_dtoa_r+0x722>
 8010ffc:	4610      	mov	r0, r2
 8010ffe:	301c      	adds	r0, #28
 8011000:	e778      	b.n	8010ef4 <_dtoa_r+0x714>
 8011002:	f1b9 0f00 	cmp.w	r9, #0
 8011006:	dc37      	bgt.n	8011078 <_dtoa_r+0x898>
 8011008:	9b06      	ldr	r3, [sp, #24]
 801100a:	2b02      	cmp	r3, #2
 801100c:	dd34      	ble.n	8011078 <_dtoa_r+0x898>
 801100e:	46ca      	mov	sl, r9
 8011010:	f1ba 0f00 	cmp.w	sl, #0
 8011014:	d10d      	bne.n	8011032 <_dtoa_r+0x852>
 8011016:	4621      	mov	r1, r4
 8011018:	4653      	mov	r3, sl
 801101a:	2205      	movs	r2, #5
 801101c:	4630      	mov	r0, r6
 801101e:	f000 fb01 	bl	8011624 <__multadd>
 8011022:	4601      	mov	r1, r0
 8011024:	4604      	mov	r4, r0
 8011026:	4628      	mov	r0, r5
 8011028:	f000 fd1c 	bl	8011a64 <__mcmp>
 801102c:	2800      	cmp	r0, #0
 801102e:	f73f adeb 	bgt.w	8010c08 <_dtoa_r+0x428>
 8011032:	9b08      	ldr	r3, [sp, #32]
 8011034:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011038:	ea6f 0b03 	mvn.w	fp, r3
 801103c:	f04f 0900 	mov.w	r9, #0
 8011040:	4621      	mov	r1, r4
 8011042:	4630      	mov	r0, r6
 8011044:	f000 facc 	bl	80115e0 <_Bfree>
 8011048:	2f00      	cmp	r7, #0
 801104a:	f43f aea8 	beq.w	8010d9e <_dtoa_r+0x5be>
 801104e:	f1b9 0f00 	cmp.w	r9, #0
 8011052:	d005      	beq.n	8011060 <_dtoa_r+0x880>
 8011054:	45b9      	cmp	r9, r7
 8011056:	d003      	beq.n	8011060 <_dtoa_r+0x880>
 8011058:	4649      	mov	r1, r9
 801105a:	4630      	mov	r0, r6
 801105c:	f000 fac0 	bl	80115e0 <_Bfree>
 8011060:	4639      	mov	r1, r7
 8011062:	4630      	mov	r0, r6
 8011064:	f000 fabc 	bl	80115e0 <_Bfree>
 8011068:	e699      	b.n	8010d9e <_dtoa_r+0x5be>
 801106a:	2400      	movs	r4, #0
 801106c:	4627      	mov	r7, r4
 801106e:	e7e0      	b.n	8011032 <_dtoa_r+0x852>
 8011070:	46bb      	mov	fp, r7
 8011072:	4604      	mov	r4, r0
 8011074:	4607      	mov	r7, r0
 8011076:	e5c7      	b.n	8010c08 <_dtoa_r+0x428>
 8011078:	9b07      	ldr	r3, [sp, #28]
 801107a:	46ca      	mov	sl, r9
 801107c:	2b00      	cmp	r3, #0
 801107e:	f000 8100 	beq.w	8011282 <_dtoa_r+0xaa2>
 8011082:	f1b8 0f00 	cmp.w	r8, #0
 8011086:	dd05      	ble.n	8011094 <_dtoa_r+0x8b4>
 8011088:	4639      	mov	r1, r7
 801108a:	4642      	mov	r2, r8
 801108c:	4630      	mov	r0, r6
 801108e:	f000 fc79 	bl	8011984 <__lshift>
 8011092:	4607      	mov	r7, r0
 8011094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011096:	2b00      	cmp	r3, #0
 8011098:	d05d      	beq.n	8011156 <_dtoa_r+0x976>
 801109a:	6879      	ldr	r1, [r7, #4]
 801109c:	4630      	mov	r0, r6
 801109e:	f000 fa5f 	bl	8011560 <_Balloc>
 80110a2:	4680      	mov	r8, r0
 80110a4:	b928      	cbnz	r0, 80110b2 <_dtoa_r+0x8d2>
 80110a6:	4b82      	ldr	r3, [pc, #520]	; (80112b0 <_dtoa_r+0xad0>)
 80110a8:	4602      	mov	r2, r0
 80110aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80110ae:	f7ff bbaf 	b.w	8010810 <_dtoa_r+0x30>
 80110b2:	693a      	ldr	r2, [r7, #16]
 80110b4:	3202      	adds	r2, #2
 80110b6:	0092      	lsls	r2, r2, #2
 80110b8:	f107 010c 	add.w	r1, r7, #12
 80110bc:	300c      	adds	r0, #12
 80110be:	f7fe fbc6 	bl	800f84e <memcpy>
 80110c2:	2201      	movs	r2, #1
 80110c4:	4641      	mov	r1, r8
 80110c6:	4630      	mov	r0, r6
 80110c8:	f000 fc5c 	bl	8011984 <__lshift>
 80110cc:	9b01      	ldr	r3, [sp, #4]
 80110ce:	3301      	adds	r3, #1
 80110d0:	9304      	str	r3, [sp, #16]
 80110d2:	9b01      	ldr	r3, [sp, #4]
 80110d4:	4453      	add	r3, sl
 80110d6:	9308      	str	r3, [sp, #32]
 80110d8:	9b02      	ldr	r3, [sp, #8]
 80110da:	f003 0301 	and.w	r3, r3, #1
 80110de:	46b9      	mov	r9, r7
 80110e0:	9307      	str	r3, [sp, #28]
 80110e2:	4607      	mov	r7, r0
 80110e4:	9b04      	ldr	r3, [sp, #16]
 80110e6:	4621      	mov	r1, r4
 80110e8:	3b01      	subs	r3, #1
 80110ea:	4628      	mov	r0, r5
 80110ec:	9302      	str	r3, [sp, #8]
 80110ee:	f7ff faeb 	bl	80106c8 <quorem>
 80110f2:	4603      	mov	r3, r0
 80110f4:	3330      	adds	r3, #48	; 0x30
 80110f6:	9005      	str	r0, [sp, #20]
 80110f8:	4649      	mov	r1, r9
 80110fa:	4628      	mov	r0, r5
 80110fc:	9309      	str	r3, [sp, #36]	; 0x24
 80110fe:	f000 fcb1 	bl	8011a64 <__mcmp>
 8011102:	463a      	mov	r2, r7
 8011104:	4682      	mov	sl, r0
 8011106:	4621      	mov	r1, r4
 8011108:	4630      	mov	r0, r6
 801110a:	f000 fcc7 	bl	8011a9c <__mdiff>
 801110e:	68c2      	ldr	r2, [r0, #12]
 8011110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011112:	4680      	mov	r8, r0
 8011114:	bb0a      	cbnz	r2, 801115a <_dtoa_r+0x97a>
 8011116:	4601      	mov	r1, r0
 8011118:	4628      	mov	r0, r5
 801111a:	f000 fca3 	bl	8011a64 <__mcmp>
 801111e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011120:	4602      	mov	r2, r0
 8011122:	4641      	mov	r1, r8
 8011124:	4630      	mov	r0, r6
 8011126:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801112a:	f000 fa59 	bl	80115e0 <_Bfree>
 801112e:	9b06      	ldr	r3, [sp, #24]
 8011130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011132:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011136:	ea43 0102 	orr.w	r1, r3, r2
 801113a:	9b07      	ldr	r3, [sp, #28]
 801113c:	430b      	orrs	r3, r1
 801113e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011140:	d10d      	bne.n	801115e <_dtoa_r+0x97e>
 8011142:	2b39      	cmp	r3, #57	; 0x39
 8011144:	d029      	beq.n	801119a <_dtoa_r+0x9ba>
 8011146:	f1ba 0f00 	cmp.w	sl, #0
 801114a:	dd01      	ble.n	8011150 <_dtoa_r+0x970>
 801114c:	9b05      	ldr	r3, [sp, #20]
 801114e:	3331      	adds	r3, #49	; 0x31
 8011150:	9a02      	ldr	r2, [sp, #8]
 8011152:	7013      	strb	r3, [r2, #0]
 8011154:	e774      	b.n	8011040 <_dtoa_r+0x860>
 8011156:	4638      	mov	r0, r7
 8011158:	e7b8      	b.n	80110cc <_dtoa_r+0x8ec>
 801115a:	2201      	movs	r2, #1
 801115c:	e7e1      	b.n	8011122 <_dtoa_r+0x942>
 801115e:	f1ba 0f00 	cmp.w	sl, #0
 8011162:	db06      	blt.n	8011172 <_dtoa_r+0x992>
 8011164:	9906      	ldr	r1, [sp, #24]
 8011166:	ea41 0a0a 	orr.w	sl, r1, sl
 801116a:	9907      	ldr	r1, [sp, #28]
 801116c:	ea5a 0101 	orrs.w	r1, sl, r1
 8011170:	d120      	bne.n	80111b4 <_dtoa_r+0x9d4>
 8011172:	2a00      	cmp	r2, #0
 8011174:	ddec      	ble.n	8011150 <_dtoa_r+0x970>
 8011176:	4629      	mov	r1, r5
 8011178:	2201      	movs	r2, #1
 801117a:	4630      	mov	r0, r6
 801117c:	9304      	str	r3, [sp, #16]
 801117e:	f000 fc01 	bl	8011984 <__lshift>
 8011182:	4621      	mov	r1, r4
 8011184:	4605      	mov	r5, r0
 8011186:	f000 fc6d 	bl	8011a64 <__mcmp>
 801118a:	2800      	cmp	r0, #0
 801118c:	9b04      	ldr	r3, [sp, #16]
 801118e:	dc02      	bgt.n	8011196 <_dtoa_r+0x9b6>
 8011190:	d1de      	bne.n	8011150 <_dtoa_r+0x970>
 8011192:	07da      	lsls	r2, r3, #31
 8011194:	d5dc      	bpl.n	8011150 <_dtoa_r+0x970>
 8011196:	2b39      	cmp	r3, #57	; 0x39
 8011198:	d1d8      	bne.n	801114c <_dtoa_r+0x96c>
 801119a:	9a02      	ldr	r2, [sp, #8]
 801119c:	2339      	movs	r3, #57	; 0x39
 801119e:	7013      	strb	r3, [r2, #0]
 80111a0:	4643      	mov	r3, r8
 80111a2:	4698      	mov	r8, r3
 80111a4:	3b01      	subs	r3, #1
 80111a6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80111aa:	2a39      	cmp	r2, #57	; 0x39
 80111ac:	d051      	beq.n	8011252 <_dtoa_r+0xa72>
 80111ae:	3201      	adds	r2, #1
 80111b0:	701a      	strb	r2, [r3, #0]
 80111b2:	e745      	b.n	8011040 <_dtoa_r+0x860>
 80111b4:	2a00      	cmp	r2, #0
 80111b6:	dd03      	ble.n	80111c0 <_dtoa_r+0x9e0>
 80111b8:	2b39      	cmp	r3, #57	; 0x39
 80111ba:	d0ee      	beq.n	801119a <_dtoa_r+0x9ba>
 80111bc:	3301      	adds	r3, #1
 80111be:	e7c7      	b.n	8011150 <_dtoa_r+0x970>
 80111c0:	9a04      	ldr	r2, [sp, #16]
 80111c2:	9908      	ldr	r1, [sp, #32]
 80111c4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80111c8:	428a      	cmp	r2, r1
 80111ca:	d02b      	beq.n	8011224 <_dtoa_r+0xa44>
 80111cc:	4629      	mov	r1, r5
 80111ce:	2300      	movs	r3, #0
 80111d0:	220a      	movs	r2, #10
 80111d2:	4630      	mov	r0, r6
 80111d4:	f000 fa26 	bl	8011624 <__multadd>
 80111d8:	45b9      	cmp	r9, r7
 80111da:	4605      	mov	r5, r0
 80111dc:	f04f 0300 	mov.w	r3, #0
 80111e0:	f04f 020a 	mov.w	r2, #10
 80111e4:	4649      	mov	r1, r9
 80111e6:	4630      	mov	r0, r6
 80111e8:	d107      	bne.n	80111fa <_dtoa_r+0xa1a>
 80111ea:	f000 fa1b 	bl	8011624 <__multadd>
 80111ee:	4681      	mov	r9, r0
 80111f0:	4607      	mov	r7, r0
 80111f2:	9b04      	ldr	r3, [sp, #16]
 80111f4:	3301      	adds	r3, #1
 80111f6:	9304      	str	r3, [sp, #16]
 80111f8:	e774      	b.n	80110e4 <_dtoa_r+0x904>
 80111fa:	f000 fa13 	bl	8011624 <__multadd>
 80111fe:	4639      	mov	r1, r7
 8011200:	4681      	mov	r9, r0
 8011202:	2300      	movs	r3, #0
 8011204:	220a      	movs	r2, #10
 8011206:	4630      	mov	r0, r6
 8011208:	f000 fa0c 	bl	8011624 <__multadd>
 801120c:	4607      	mov	r7, r0
 801120e:	e7f0      	b.n	80111f2 <_dtoa_r+0xa12>
 8011210:	f1ba 0f00 	cmp.w	sl, #0
 8011214:	9a01      	ldr	r2, [sp, #4]
 8011216:	bfcc      	ite	gt
 8011218:	46d0      	movgt	r8, sl
 801121a:	f04f 0801 	movle.w	r8, #1
 801121e:	4490      	add	r8, r2
 8011220:	f04f 0900 	mov.w	r9, #0
 8011224:	4629      	mov	r1, r5
 8011226:	2201      	movs	r2, #1
 8011228:	4630      	mov	r0, r6
 801122a:	9302      	str	r3, [sp, #8]
 801122c:	f000 fbaa 	bl	8011984 <__lshift>
 8011230:	4621      	mov	r1, r4
 8011232:	4605      	mov	r5, r0
 8011234:	f000 fc16 	bl	8011a64 <__mcmp>
 8011238:	2800      	cmp	r0, #0
 801123a:	dcb1      	bgt.n	80111a0 <_dtoa_r+0x9c0>
 801123c:	d102      	bne.n	8011244 <_dtoa_r+0xa64>
 801123e:	9b02      	ldr	r3, [sp, #8]
 8011240:	07db      	lsls	r3, r3, #31
 8011242:	d4ad      	bmi.n	80111a0 <_dtoa_r+0x9c0>
 8011244:	4643      	mov	r3, r8
 8011246:	4698      	mov	r8, r3
 8011248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801124c:	2a30      	cmp	r2, #48	; 0x30
 801124e:	d0fa      	beq.n	8011246 <_dtoa_r+0xa66>
 8011250:	e6f6      	b.n	8011040 <_dtoa_r+0x860>
 8011252:	9a01      	ldr	r2, [sp, #4]
 8011254:	429a      	cmp	r2, r3
 8011256:	d1a4      	bne.n	80111a2 <_dtoa_r+0x9c2>
 8011258:	f10b 0b01 	add.w	fp, fp, #1
 801125c:	2331      	movs	r3, #49	; 0x31
 801125e:	e778      	b.n	8011152 <_dtoa_r+0x972>
 8011260:	4b14      	ldr	r3, [pc, #80]	; (80112b4 <_dtoa_r+0xad4>)
 8011262:	f7ff bb27 	b.w	80108b4 <_dtoa_r+0xd4>
 8011266:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011268:	2b00      	cmp	r3, #0
 801126a:	f47f ab03 	bne.w	8010874 <_dtoa_r+0x94>
 801126e:	4b12      	ldr	r3, [pc, #72]	; (80112b8 <_dtoa_r+0xad8>)
 8011270:	f7ff bb20 	b.w	80108b4 <_dtoa_r+0xd4>
 8011274:	f1ba 0f00 	cmp.w	sl, #0
 8011278:	dc03      	bgt.n	8011282 <_dtoa_r+0xaa2>
 801127a:	9b06      	ldr	r3, [sp, #24]
 801127c:	2b02      	cmp	r3, #2
 801127e:	f73f aec7 	bgt.w	8011010 <_dtoa_r+0x830>
 8011282:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011286:	4621      	mov	r1, r4
 8011288:	4628      	mov	r0, r5
 801128a:	f7ff fa1d 	bl	80106c8 <quorem>
 801128e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011292:	f808 3b01 	strb.w	r3, [r8], #1
 8011296:	9a01      	ldr	r2, [sp, #4]
 8011298:	eba8 0202 	sub.w	r2, r8, r2
 801129c:	4592      	cmp	sl, r2
 801129e:	ddb7      	ble.n	8011210 <_dtoa_r+0xa30>
 80112a0:	4629      	mov	r1, r5
 80112a2:	2300      	movs	r3, #0
 80112a4:	220a      	movs	r2, #10
 80112a6:	4630      	mov	r0, r6
 80112a8:	f000 f9bc 	bl	8011624 <__multadd>
 80112ac:	4605      	mov	r5, r0
 80112ae:	e7ea      	b.n	8011286 <_dtoa_r+0xaa6>
 80112b0:	08013f5b 	.word	0x08013f5b
 80112b4:	08013eb8 	.word	0x08013eb8
 80112b8:	08013edc 	.word	0x08013edc

080112bc <__sflush_r>:
 80112bc:	898a      	ldrh	r2, [r1, #12]
 80112be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112c2:	4605      	mov	r5, r0
 80112c4:	0710      	lsls	r0, r2, #28
 80112c6:	460c      	mov	r4, r1
 80112c8:	d458      	bmi.n	801137c <__sflush_r+0xc0>
 80112ca:	684b      	ldr	r3, [r1, #4]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	dc05      	bgt.n	80112dc <__sflush_r+0x20>
 80112d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	dc02      	bgt.n	80112dc <__sflush_r+0x20>
 80112d6:	2000      	movs	r0, #0
 80112d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112de:	2e00      	cmp	r6, #0
 80112e0:	d0f9      	beq.n	80112d6 <__sflush_r+0x1a>
 80112e2:	2300      	movs	r3, #0
 80112e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80112e8:	682f      	ldr	r7, [r5, #0]
 80112ea:	602b      	str	r3, [r5, #0]
 80112ec:	d032      	beq.n	8011354 <__sflush_r+0x98>
 80112ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80112f0:	89a3      	ldrh	r3, [r4, #12]
 80112f2:	075a      	lsls	r2, r3, #29
 80112f4:	d505      	bpl.n	8011302 <__sflush_r+0x46>
 80112f6:	6863      	ldr	r3, [r4, #4]
 80112f8:	1ac0      	subs	r0, r0, r3
 80112fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112fc:	b10b      	cbz	r3, 8011302 <__sflush_r+0x46>
 80112fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011300:	1ac0      	subs	r0, r0, r3
 8011302:	2300      	movs	r3, #0
 8011304:	4602      	mov	r2, r0
 8011306:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011308:	6a21      	ldr	r1, [r4, #32]
 801130a:	4628      	mov	r0, r5
 801130c:	47b0      	blx	r6
 801130e:	1c43      	adds	r3, r0, #1
 8011310:	89a3      	ldrh	r3, [r4, #12]
 8011312:	d106      	bne.n	8011322 <__sflush_r+0x66>
 8011314:	6829      	ldr	r1, [r5, #0]
 8011316:	291d      	cmp	r1, #29
 8011318:	d82c      	bhi.n	8011374 <__sflush_r+0xb8>
 801131a:	4a2a      	ldr	r2, [pc, #168]	; (80113c4 <__sflush_r+0x108>)
 801131c:	40ca      	lsrs	r2, r1
 801131e:	07d6      	lsls	r6, r2, #31
 8011320:	d528      	bpl.n	8011374 <__sflush_r+0xb8>
 8011322:	2200      	movs	r2, #0
 8011324:	6062      	str	r2, [r4, #4]
 8011326:	04d9      	lsls	r1, r3, #19
 8011328:	6922      	ldr	r2, [r4, #16]
 801132a:	6022      	str	r2, [r4, #0]
 801132c:	d504      	bpl.n	8011338 <__sflush_r+0x7c>
 801132e:	1c42      	adds	r2, r0, #1
 8011330:	d101      	bne.n	8011336 <__sflush_r+0x7a>
 8011332:	682b      	ldr	r3, [r5, #0]
 8011334:	b903      	cbnz	r3, 8011338 <__sflush_r+0x7c>
 8011336:	6560      	str	r0, [r4, #84]	; 0x54
 8011338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801133a:	602f      	str	r7, [r5, #0]
 801133c:	2900      	cmp	r1, #0
 801133e:	d0ca      	beq.n	80112d6 <__sflush_r+0x1a>
 8011340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011344:	4299      	cmp	r1, r3
 8011346:	d002      	beq.n	801134e <__sflush_r+0x92>
 8011348:	4628      	mov	r0, r5
 801134a:	f000 fca3 	bl	8011c94 <_free_r>
 801134e:	2000      	movs	r0, #0
 8011350:	6360      	str	r0, [r4, #52]	; 0x34
 8011352:	e7c1      	b.n	80112d8 <__sflush_r+0x1c>
 8011354:	6a21      	ldr	r1, [r4, #32]
 8011356:	2301      	movs	r3, #1
 8011358:	4628      	mov	r0, r5
 801135a:	47b0      	blx	r6
 801135c:	1c41      	adds	r1, r0, #1
 801135e:	d1c7      	bne.n	80112f0 <__sflush_r+0x34>
 8011360:	682b      	ldr	r3, [r5, #0]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d0c4      	beq.n	80112f0 <__sflush_r+0x34>
 8011366:	2b1d      	cmp	r3, #29
 8011368:	d001      	beq.n	801136e <__sflush_r+0xb2>
 801136a:	2b16      	cmp	r3, #22
 801136c:	d101      	bne.n	8011372 <__sflush_r+0xb6>
 801136e:	602f      	str	r7, [r5, #0]
 8011370:	e7b1      	b.n	80112d6 <__sflush_r+0x1a>
 8011372:	89a3      	ldrh	r3, [r4, #12]
 8011374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011378:	81a3      	strh	r3, [r4, #12]
 801137a:	e7ad      	b.n	80112d8 <__sflush_r+0x1c>
 801137c:	690f      	ldr	r7, [r1, #16]
 801137e:	2f00      	cmp	r7, #0
 8011380:	d0a9      	beq.n	80112d6 <__sflush_r+0x1a>
 8011382:	0793      	lsls	r3, r2, #30
 8011384:	680e      	ldr	r6, [r1, #0]
 8011386:	bf08      	it	eq
 8011388:	694b      	ldreq	r3, [r1, #20]
 801138a:	600f      	str	r7, [r1, #0]
 801138c:	bf18      	it	ne
 801138e:	2300      	movne	r3, #0
 8011390:	eba6 0807 	sub.w	r8, r6, r7
 8011394:	608b      	str	r3, [r1, #8]
 8011396:	f1b8 0f00 	cmp.w	r8, #0
 801139a:	dd9c      	ble.n	80112d6 <__sflush_r+0x1a>
 801139c:	6a21      	ldr	r1, [r4, #32]
 801139e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80113a0:	4643      	mov	r3, r8
 80113a2:	463a      	mov	r2, r7
 80113a4:	4628      	mov	r0, r5
 80113a6:	47b0      	blx	r6
 80113a8:	2800      	cmp	r0, #0
 80113aa:	dc06      	bgt.n	80113ba <__sflush_r+0xfe>
 80113ac:	89a3      	ldrh	r3, [r4, #12]
 80113ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113b2:	81a3      	strh	r3, [r4, #12]
 80113b4:	f04f 30ff 	mov.w	r0, #4294967295
 80113b8:	e78e      	b.n	80112d8 <__sflush_r+0x1c>
 80113ba:	4407      	add	r7, r0
 80113bc:	eba8 0800 	sub.w	r8, r8, r0
 80113c0:	e7e9      	b.n	8011396 <__sflush_r+0xda>
 80113c2:	bf00      	nop
 80113c4:	20400001 	.word	0x20400001

080113c8 <_fflush_r>:
 80113c8:	b538      	push	{r3, r4, r5, lr}
 80113ca:	690b      	ldr	r3, [r1, #16]
 80113cc:	4605      	mov	r5, r0
 80113ce:	460c      	mov	r4, r1
 80113d0:	b913      	cbnz	r3, 80113d8 <_fflush_r+0x10>
 80113d2:	2500      	movs	r5, #0
 80113d4:	4628      	mov	r0, r5
 80113d6:	bd38      	pop	{r3, r4, r5, pc}
 80113d8:	b118      	cbz	r0, 80113e2 <_fflush_r+0x1a>
 80113da:	6983      	ldr	r3, [r0, #24]
 80113dc:	b90b      	cbnz	r3, 80113e2 <_fflush_r+0x1a>
 80113de:	f7fe f971 	bl	800f6c4 <__sinit>
 80113e2:	4b14      	ldr	r3, [pc, #80]	; (8011434 <_fflush_r+0x6c>)
 80113e4:	429c      	cmp	r4, r3
 80113e6:	d11b      	bne.n	8011420 <_fflush_r+0x58>
 80113e8:	686c      	ldr	r4, [r5, #4]
 80113ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d0ef      	beq.n	80113d2 <_fflush_r+0xa>
 80113f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80113f4:	07d0      	lsls	r0, r2, #31
 80113f6:	d404      	bmi.n	8011402 <_fflush_r+0x3a>
 80113f8:	0599      	lsls	r1, r3, #22
 80113fa:	d402      	bmi.n	8011402 <_fflush_r+0x3a>
 80113fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113fe:	f7fe fa24 	bl	800f84a <__retarget_lock_acquire_recursive>
 8011402:	4628      	mov	r0, r5
 8011404:	4621      	mov	r1, r4
 8011406:	f7ff ff59 	bl	80112bc <__sflush_r>
 801140a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801140c:	07da      	lsls	r2, r3, #31
 801140e:	4605      	mov	r5, r0
 8011410:	d4e0      	bmi.n	80113d4 <_fflush_r+0xc>
 8011412:	89a3      	ldrh	r3, [r4, #12]
 8011414:	059b      	lsls	r3, r3, #22
 8011416:	d4dd      	bmi.n	80113d4 <_fflush_r+0xc>
 8011418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801141a:	f7fe fa17 	bl	800f84c <__retarget_lock_release_recursive>
 801141e:	e7d9      	b.n	80113d4 <_fflush_r+0xc>
 8011420:	4b05      	ldr	r3, [pc, #20]	; (8011438 <_fflush_r+0x70>)
 8011422:	429c      	cmp	r4, r3
 8011424:	d101      	bne.n	801142a <_fflush_r+0x62>
 8011426:	68ac      	ldr	r4, [r5, #8]
 8011428:	e7df      	b.n	80113ea <_fflush_r+0x22>
 801142a:	4b04      	ldr	r3, [pc, #16]	; (801143c <_fflush_r+0x74>)
 801142c:	429c      	cmp	r4, r3
 801142e:	bf08      	it	eq
 8011430:	68ec      	ldreq	r4, [r5, #12]
 8011432:	e7da      	b.n	80113ea <_fflush_r+0x22>
 8011434:	08013e64 	.word	0x08013e64
 8011438:	08013e84 	.word	0x08013e84
 801143c:	08013e44 	.word	0x08013e44

08011440 <_localeconv_r>:
 8011440:	4800      	ldr	r0, [pc, #0]	; (8011444 <_localeconv_r+0x4>)
 8011442:	4770      	bx	lr
 8011444:	24000170 	.word	0x24000170

08011448 <_lseek_r>:
 8011448:	b538      	push	{r3, r4, r5, lr}
 801144a:	4d07      	ldr	r5, [pc, #28]	; (8011468 <_lseek_r+0x20>)
 801144c:	4604      	mov	r4, r0
 801144e:	4608      	mov	r0, r1
 8011450:	4611      	mov	r1, r2
 8011452:	2200      	movs	r2, #0
 8011454:	602a      	str	r2, [r5, #0]
 8011456:	461a      	mov	r2, r3
 8011458:	f7f3 fe05 	bl	8005066 <_lseek>
 801145c:	1c43      	adds	r3, r0, #1
 801145e:	d102      	bne.n	8011466 <_lseek_r+0x1e>
 8011460:	682b      	ldr	r3, [r5, #0]
 8011462:	b103      	cbz	r3, 8011466 <_lseek_r+0x1e>
 8011464:	6023      	str	r3, [r4, #0]
 8011466:	bd38      	pop	{r3, r4, r5, pc}
 8011468:	24005408 	.word	0x24005408

0801146c <__swhatbuf_r>:
 801146c:	b570      	push	{r4, r5, r6, lr}
 801146e:	460e      	mov	r6, r1
 8011470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011474:	2900      	cmp	r1, #0
 8011476:	b096      	sub	sp, #88	; 0x58
 8011478:	4614      	mov	r4, r2
 801147a:	461d      	mov	r5, r3
 801147c:	da08      	bge.n	8011490 <__swhatbuf_r+0x24>
 801147e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011482:	2200      	movs	r2, #0
 8011484:	602a      	str	r2, [r5, #0]
 8011486:	061a      	lsls	r2, r3, #24
 8011488:	d410      	bmi.n	80114ac <__swhatbuf_r+0x40>
 801148a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801148e:	e00e      	b.n	80114ae <__swhatbuf_r+0x42>
 8011490:	466a      	mov	r2, sp
 8011492:	f000 ff43 	bl	801231c <_fstat_r>
 8011496:	2800      	cmp	r0, #0
 8011498:	dbf1      	blt.n	801147e <__swhatbuf_r+0x12>
 801149a:	9a01      	ldr	r2, [sp, #4]
 801149c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80114a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80114a4:	425a      	negs	r2, r3
 80114a6:	415a      	adcs	r2, r3
 80114a8:	602a      	str	r2, [r5, #0]
 80114aa:	e7ee      	b.n	801148a <__swhatbuf_r+0x1e>
 80114ac:	2340      	movs	r3, #64	; 0x40
 80114ae:	2000      	movs	r0, #0
 80114b0:	6023      	str	r3, [r4, #0]
 80114b2:	b016      	add	sp, #88	; 0x58
 80114b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080114b8 <__smakebuf_r>:
 80114b8:	898b      	ldrh	r3, [r1, #12]
 80114ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114bc:	079d      	lsls	r5, r3, #30
 80114be:	4606      	mov	r6, r0
 80114c0:	460c      	mov	r4, r1
 80114c2:	d507      	bpl.n	80114d4 <__smakebuf_r+0x1c>
 80114c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80114c8:	6023      	str	r3, [r4, #0]
 80114ca:	6123      	str	r3, [r4, #16]
 80114cc:	2301      	movs	r3, #1
 80114ce:	6163      	str	r3, [r4, #20]
 80114d0:	b002      	add	sp, #8
 80114d2:	bd70      	pop	{r4, r5, r6, pc}
 80114d4:	ab01      	add	r3, sp, #4
 80114d6:	466a      	mov	r2, sp
 80114d8:	f7ff ffc8 	bl	801146c <__swhatbuf_r>
 80114dc:	9900      	ldr	r1, [sp, #0]
 80114de:	4605      	mov	r5, r0
 80114e0:	4630      	mov	r0, r6
 80114e2:	f7fe f9eb 	bl	800f8bc <_malloc_r>
 80114e6:	b948      	cbnz	r0, 80114fc <__smakebuf_r+0x44>
 80114e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114ec:	059a      	lsls	r2, r3, #22
 80114ee:	d4ef      	bmi.n	80114d0 <__smakebuf_r+0x18>
 80114f0:	f023 0303 	bic.w	r3, r3, #3
 80114f4:	f043 0302 	orr.w	r3, r3, #2
 80114f8:	81a3      	strh	r3, [r4, #12]
 80114fa:	e7e3      	b.n	80114c4 <__smakebuf_r+0xc>
 80114fc:	4b0d      	ldr	r3, [pc, #52]	; (8011534 <__smakebuf_r+0x7c>)
 80114fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8011500:	89a3      	ldrh	r3, [r4, #12]
 8011502:	6020      	str	r0, [r4, #0]
 8011504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011508:	81a3      	strh	r3, [r4, #12]
 801150a:	9b00      	ldr	r3, [sp, #0]
 801150c:	6163      	str	r3, [r4, #20]
 801150e:	9b01      	ldr	r3, [sp, #4]
 8011510:	6120      	str	r0, [r4, #16]
 8011512:	b15b      	cbz	r3, 801152c <__smakebuf_r+0x74>
 8011514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011518:	4630      	mov	r0, r6
 801151a:	f000 ff11 	bl	8012340 <_isatty_r>
 801151e:	b128      	cbz	r0, 801152c <__smakebuf_r+0x74>
 8011520:	89a3      	ldrh	r3, [r4, #12]
 8011522:	f023 0303 	bic.w	r3, r3, #3
 8011526:	f043 0301 	orr.w	r3, r3, #1
 801152a:	81a3      	strh	r3, [r4, #12]
 801152c:	89a0      	ldrh	r0, [r4, #12]
 801152e:	4305      	orrs	r5, r0
 8011530:	81a5      	strh	r5, [r4, #12]
 8011532:	e7cd      	b.n	80114d0 <__smakebuf_r+0x18>
 8011534:	0800f65d 	.word	0x0800f65d

08011538 <malloc>:
 8011538:	4b02      	ldr	r3, [pc, #8]	; (8011544 <malloc+0xc>)
 801153a:	4601      	mov	r1, r0
 801153c:	6818      	ldr	r0, [r3, #0]
 801153e:	f7fe b9bd 	b.w	800f8bc <_malloc_r>
 8011542:	bf00      	nop
 8011544:	2400001c 	.word	0x2400001c

08011548 <__malloc_lock>:
 8011548:	4801      	ldr	r0, [pc, #4]	; (8011550 <__malloc_lock+0x8>)
 801154a:	f7fe b97e 	b.w	800f84a <__retarget_lock_acquire_recursive>
 801154e:	bf00      	nop
 8011550:	240053fc 	.word	0x240053fc

08011554 <__malloc_unlock>:
 8011554:	4801      	ldr	r0, [pc, #4]	; (801155c <__malloc_unlock+0x8>)
 8011556:	f7fe b979 	b.w	800f84c <__retarget_lock_release_recursive>
 801155a:	bf00      	nop
 801155c:	240053fc 	.word	0x240053fc

08011560 <_Balloc>:
 8011560:	b570      	push	{r4, r5, r6, lr}
 8011562:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011564:	4604      	mov	r4, r0
 8011566:	460d      	mov	r5, r1
 8011568:	b976      	cbnz	r6, 8011588 <_Balloc+0x28>
 801156a:	2010      	movs	r0, #16
 801156c:	f7ff ffe4 	bl	8011538 <malloc>
 8011570:	4602      	mov	r2, r0
 8011572:	6260      	str	r0, [r4, #36]	; 0x24
 8011574:	b920      	cbnz	r0, 8011580 <_Balloc+0x20>
 8011576:	4b18      	ldr	r3, [pc, #96]	; (80115d8 <_Balloc+0x78>)
 8011578:	4818      	ldr	r0, [pc, #96]	; (80115dc <_Balloc+0x7c>)
 801157a:	2166      	movs	r1, #102	; 0x66
 801157c:	f000 fe9e 	bl	80122bc <__assert_func>
 8011580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011584:	6006      	str	r6, [r0, #0]
 8011586:	60c6      	str	r6, [r0, #12]
 8011588:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801158a:	68f3      	ldr	r3, [r6, #12]
 801158c:	b183      	cbz	r3, 80115b0 <_Balloc+0x50>
 801158e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011590:	68db      	ldr	r3, [r3, #12]
 8011592:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011596:	b9b8      	cbnz	r0, 80115c8 <_Balloc+0x68>
 8011598:	2101      	movs	r1, #1
 801159a:	fa01 f605 	lsl.w	r6, r1, r5
 801159e:	1d72      	adds	r2, r6, #5
 80115a0:	0092      	lsls	r2, r2, #2
 80115a2:	4620      	mov	r0, r4
 80115a4:	f000 fb60 	bl	8011c68 <_calloc_r>
 80115a8:	b160      	cbz	r0, 80115c4 <_Balloc+0x64>
 80115aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80115ae:	e00e      	b.n	80115ce <_Balloc+0x6e>
 80115b0:	2221      	movs	r2, #33	; 0x21
 80115b2:	2104      	movs	r1, #4
 80115b4:	4620      	mov	r0, r4
 80115b6:	f000 fb57 	bl	8011c68 <_calloc_r>
 80115ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115bc:	60f0      	str	r0, [r6, #12]
 80115be:	68db      	ldr	r3, [r3, #12]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d1e4      	bne.n	801158e <_Balloc+0x2e>
 80115c4:	2000      	movs	r0, #0
 80115c6:	bd70      	pop	{r4, r5, r6, pc}
 80115c8:	6802      	ldr	r2, [r0, #0]
 80115ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80115ce:	2300      	movs	r3, #0
 80115d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80115d4:	e7f7      	b.n	80115c6 <_Balloc+0x66>
 80115d6:	bf00      	nop
 80115d8:	08013ee9 	.word	0x08013ee9
 80115dc:	08013f6c 	.word	0x08013f6c

080115e0 <_Bfree>:
 80115e0:	b570      	push	{r4, r5, r6, lr}
 80115e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80115e4:	4605      	mov	r5, r0
 80115e6:	460c      	mov	r4, r1
 80115e8:	b976      	cbnz	r6, 8011608 <_Bfree+0x28>
 80115ea:	2010      	movs	r0, #16
 80115ec:	f7ff ffa4 	bl	8011538 <malloc>
 80115f0:	4602      	mov	r2, r0
 80115f2:	6268      	str	r0, [r5, #36]	; 0x24
 80115f4:	b920      	cbnz	r0, 8011600 <_Bfree+0x20>
 80115f6:	4b09      	ldr	r3, [pc, #36]	; (801161c <_Bfree+0x3c>)
 80115f8:	4809      	ldr	r0, [pc, #36]	; (8011620 <_Bfree+0x40>)
 80115fa:	218a      	movs	r1, #138	; 0x8a
 80115fc:	f000 fe5e 	bl	80122bc <__assert_func>
 8011600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011604:	6006      	str	r6, [r0, #0]
 8011606:	60c6      	str	r6, [r0, #12]
 8011608:	b13c      	cbz	r4, 801161a <_Bfree+0x3a>
 801160a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801160c:	6862      	ldr	r2, [r4, #4]
 801160e:	68db      	ldr	r3, [r3, #12]
 8011610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011614:	6021      	str	r1, [r4, #0]
 8011616:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801161a:	bd70      	pop	{r4, r5, r6, pc}
 801161c:	08013ee9 	.word	0x08013ee9
 8011620:	08013f6c 	.word	0x08013f6c

08011624 <__multadd>:
 8011624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011628:	690d      	ldr	r5, [r1, #16]
 801162a:	4607      	mov	r7, r0
 801162c:	460c      	mov	r4, r1
 801162e:	461e      	mov	r6, r3
 8011630:	f101 0c14 	add.w	ip, r1, #20
 8011634:	2000      	movs	r0, #0
 8011636:	f8dc 3000 	ldr.w	r3, [ip]
 801163a:	b299      	uxth	r1, r3
 801163c:	fb02 6101 	mla	r1, r2, r1, r6
 8011640:	0c1e      	lsrs	r6, r3, #16
 8011642:	0c0b      	lsrs	r3, r1, #16
 8011644:	fb02 3306 	mla	r3, r2, r6, r3
 8011648:	b289      	uxth	r1, r1
 801164a:	3001      	adds	r0, #1
 801164c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011650:	4285      	cmp	r5, r0
 8011652:	f84c 1b04 	str.w	r1, [ip], #4
 8011656:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801165a:	dcec      	bgt.n	8011636 <__multadd+0x12>
 801165c:	b30e      	cbz	r6, 80116a2 <__multadd+0x7e>
 801165e:	68a3      	ldr	r3, [r4, #8]
 8011660:	42ab      	cmp	r3, r5
 8011662:	dc19      	bgt.n	8011698 <__multadd+0x74>
 8011664:	6861      	ldr	r1, [r4, #4]
 8011666:	4638      	mov	r0, r7
 8011668:	3101      	adds	r1, #1
 801166a:	f7ff ff79 	bl	8011560 <_Balloc>
 801166e:	4680      	mov	r8, r0
 8011670:	b928      	cbnz	r0, 801167e <__multadd+0x5a>
 8011672:	4602      	mov	r2, r0
 8011674:	4b0c      	ldr	r3, [pc, #48]	; (80116a8 <__multadd+0x84>)
 8011676:	480d      	ldr	r0, [pc, #52]	; (80116ac <__multadd+0x88>)
 8011678:	21b5      	movs	r1, #181	; 0xb5
 801167a:	f000 fe1f 	bl	80122bc <__assert_func>
 801167e:	6922      	ldr	r2, [r4, #16]
 8011680:	3202      	adds	r2, #2
 8011682:	f104 010c 	add.w	r1, r4, #12
 8011686:	0092      	lsls	r2, r2, #2
 8011688:	300c      	adds	r0, #12
 801168a:	f7fe f8e0 	bl	800f84e <memcpy>
 801168e:	4621      	mov	r1, r4
 8011690:	4638      	mov	r0, r7
 8011692:	f7ff ffa5 	bl	80115e0 <_Bfree>
 8011696:	4644      	mov	r4, r8
 8011698:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801169c:	3501      	adds	r5, #1
 801169e:	615e      	str	r6, [r3, #20]
 80116a0:	6125      	str	r5, [r4, #16]
 80116a2:	4620      	mov	r0, r4
 80116a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116a8:	08013f5b 	.word	0x08013f5b
 80116ac:	08013f6c 	.word	0x08013f6c

080116b0 <__hi0bits>:
 80116b0:	0c03      	lsrs	r3, r0, #16
 80116b2:	041b      	lsls	r3, r3, #16
 80116b4:	b9d3      	cbnz	r3, 80116ec <__hi0bits+0x3c>
 80116b6:	0400      	lsls	r0, r0, #16
 80116b8:	2310      	movs	r3, #16
 80116ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80116be:	bf04      	itt	eq
 80116c0:	0200      	lsleq	r0, r0, #8
 80116c2:	3308      	addeq	r3, #8
 80116c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80116c8:	bf04      	itt	eq
 80116ca:	0100      	lsleq	r0, r0, #4
 80116cc:	3304      	addeq	r3, #4
 80116ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80116d2:	bf04      	itt	eq
 80116d4:	0080      	lsleq	r0, r0, #2
 80116d6:	3302      	addeq	r3, #2
 80116d8:	2800      	cmp	r0, #0
 80116da:	db05      	blt.n	80116e8 <__hi0bits+0x38>
 80116dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80116e0:	f103 0301 	add.w	r3, r3, #1
 80116e4:	bf08      	it	eq
 80116e6:	2320      	moveq	r3, #32
 80116e8:	4618      	mov	r0, r3
 80116ea:	4770      	bx	lr
 80116ec:	2300      	movs	r3, #0
 80116ee:	e7e4      	b.n	80116ba <__hi0bits+0xa>

080116f0 <__lo0bits>:
 80116f0:	6803      	ldr	r3, [r0, #0]
 80116f2:	f013 0207 	ands.w	r2, r3, #7
 80116f6:	4601      	mov	r1, r0
 80116f8:	d00b      	beq.n	8011712 <__lo0bits+0x22>
 80116fa:	07da      	lsls	r2, r3, #31
 80116fc:	d423      	bmi.n	8011746 <__lo0bits+0x56>
 80116fe:	0798      	lsls	r0, r3, #30
 8011700:	bf49      	itett	mi
 8011702:	085b      	lsrmi	r3, r3, #1
 8011704:	089b      	lsrpl	r3, r3, #2
 8011706:	2001      	movmi	r0, #1
 8011708:	600b      	strmi	r3, [r1, #0]
 801170a:	bf5c      	itt	pl
 801170c:	600b      	strpl	r3, [r1, #0]
 801170e:	2002      	movpl	r0, #2
 8011710:	4770      	bx	lr
 8011712:	b298      	uxth	r0, r3
 8011714:	b9a8      	cbnz	r0, 8011742 <__lo0bits+0x52>
 8011716:	0c1b      	lsrs	r3, r3, #16
 8011718:	2010      	movs	r0, #16
 801171a:	b2da      	uxtb	r2, r3
 801171c:	b90a      	cbnz	r2, 8011722 <__lo0bits+0x32>
 801171e:	3008      	adds	r0, #8
 8011720:	0a1b      	lsrs	r3, r3, #8
 8011722:	071a      	lsls	r2, r3, #28
 8011724:	bf04      	itt	eq
 8011726:	091b      	lsreq	r3, r3, #4
 8011728:	3004      	addeq	r0, #4
 801172a:	079a      	lsls	r2, r3, #30
 801172c:	bf04      	itt	eq
 801172e:	089b      	lsreq	r3, r3, #2
 8011730:	3002      	addeq	r0, #2
 8011732:	07da      	lsls	r2, r3, #31
 8011734:	d403      	bmi.n	801173e <__lo0bits+0x4e>
 8011736:	085b      	lsrs	r3, r3, #1
 8011738:	f100 0001 	add.w	r0, r0, #1
 801173c:	d005      	beq.n	801174a <__lo0bits+0x5a>
 801173e:	600b      	str	r3, [r1, #0]
 8011740:	4770      	bx	lr
 8011742:	4610      	mov	r0, r2
 8011744:	e7e9      	b.n	801171a <__lo0bits+0x2a>
 8011746:	2000      	movs	r0, #0
 8011748:	4770      	bx	lr
 801174a:	2020      	movs	r0, #32
 801174c:	4770      	bx	lr
	...

08011750 <__i2b>:
 8011750:	b510      	push	{r4, lr}
 8011752:	460c      	mov	r4, r1
 8011754:	2101      	movs	r1, #1
 8011756:	f7ff ff03 	bl	8011560 <_Balloc>
 801175a:	4602      	mov	r2, r0
 801175c:	b928      	cbnz	r0, 801176a <__i2b+0x1a>
 801175e:	4b05      	ldr	r3, [pc, #20]	; (8011774 <__i2b+0x24>)
 8011760:	4805      	ldr	r0, [pc, #20]	; (8011778 <__i2b+0x28>)
 8011762:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011766:	f000 fda9 	bl	80122bc <__assert_func>
 801176a:	2301      	movs	r3, #1
 801176c:	6144      	str	r4, [r0, #20]
 801176e:	6103      	str	r3, [r0, #16]
 8011770:	bd10      	pop	{r4, pc}
 8011772:	bf00      	nop
 8011774:	08013f5b 	.word	0x08013f5b
 8011778:	08013f6c 	.word	0x08013f6c

0801177c <__multiply>:
 801177c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011780:	4691      	mov	r9, r2
 8011782:	690a      	ldr	r2, [r1, #16]
 8011784:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011788:	429a      	cmp	r2, r3
 801178a:	bfb8      	it	lt
 801178c:	460b      	movlt	r3, r1
 801178e:	460c      	mov	r4, r1
 8011790:	bfbc      	itt	lt
 8011792:	464c      	movlt	r4, r9
 8011794:	4699      	movlt	r9, r3
 8011796:	6927      	ldr	r7, [r4, #16]
 8011798:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801179c:	68a3      	ldr	r3, [r4, #8]
 801179e:	6861      	ldr	r1, [r4, #4]
 80117a0:	eb07 060a 	add.w	r6, r7, sl
 80117a4:	42b3      	cmp	r3, r6
 80117a6:	b085      	sub	sp, #20
 80117a8:	bfb8      	it	lt
 80117aa:	3101      	addlt	r1, #1
 80117ac:	f7ff fed8 	bl	8011560 <_Balloc>
 80117b0:	b930      	cbnz	r0, 80117c0 <__multiply+0x44>
 80117b2:	4602      	mov	r2, r0
 80117b4:	4b44      	ldr	r3, [pc, #272]	; (80118c8 <__multiply+0x14c>)
 80117b6:	4845      	ldr	r0, [pc, #276]	; (80118cc <__multiply+0x150>)
 80117b8:	f240 115d 	movw	r1, #349	; 0x15d
 80117bc:	f000 fd7e 	bl	80122bc <__assert_func>
 80117c0:	f100 0514 	add.w	r5, r0, #20
 80117c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80117c8:	462b      	mov	r3, r5
 80117ca:	2200      	movs	r2, #0
 80117cc:	4543      	cmp	r3, r8
 80117ce:	d321      	bcc.n	8011814 <__multiply+0x98>
 80117d0:	f104 0314 	add.w	r3, r4, #20
 80117d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80117d8:	f109 0314 	add.w	r3, r9, #20
 80117dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80117e0:	9202      	str	r2, [sp, #8]
 80117e2:	1b3a      	subs	r2, r7, r4
 80117e4:	3a15      	subs	r2, #21
 80117e6:	f022 0203 	bic.w	r2, r2, #3
 80117ea:	3204      	adds	r2, #4
 80117ec:	f104 0115 	add.w	r1, r4, #21
 80117f0:	428f      	cmp	r7, r1
 80117f2:	bf38      	it	cc
 80117f4:	2204      	movcc	r2, #4
 80117f6:	9201      	str	r2, [sp, #4]
 80117f8:	9a02      	ldr	r2, [sp, #8]
 80117fa:	9303      	str	r3, [sp, #12]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d80c      	bhi.n	801181a <__multiply+0x9e>
 8011800:	2e00      	cmp	r6, #0
 8011802:	dd03      	ble.n	801180c <__multiply+0x90>
 8011804:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011808:	2b00      	cmp	r3, #0
 801180a:	d05a      	beq.n	80118c2 <__multiply+0x146>
 801180c:	6106      	str	r6, [r0, #16]
 801180e:	b005      	add	sp, #20
 8011810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011814:	f843 2b04 	str.w	r2, [r3], #4
 8011818:	e7d8      	b.n	80117cc <__multiply+0x50>
 801181a:	f8b3 a000 	ldrh.w	sl, [r3]
 801181e:	f1ba 0f00 	cmp.w	sl, #0
 8011822:	d024      	beq.n	801186e <__multiply+0xf2>
 8011824:	f104 0e14 	add.w	lr, r4, #20
 8011828:	46a9      	mov	r9, r5
 801182a:	f04f 0c00 	mov.w	ip, #0
 801182e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011832:	f8d9 1000 	ldr.w	r1, [r9]
 8011836:	fa1f fb82 	uxth.w	fp, r2
 801183a:	b289      	uxth	r1, r1
 801183c:	fb0a 110b 	mla	r1, sl, fp, r1
 8011840:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011844:	f8d9 2000 	ldr.w	r2, [r9]
 8011848:	4461      	add	r1, ip
 801184a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801184e:	fb0a c20b 	mla	r2, sl, fp, ip
 8011852:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011856:	b289      	uxth	r1, r1
 8011858:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801185c:	4577      	cmp	r7, lr
 801185e:	f849 1b04 	str.w	r1, [r9], #4
 8011862:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011866:	d8e2      	bhi.n	801182e <__multiply+0xb2>
 8011868:	9a01      	ldr	r2, [sp, #4]
 801186a:	f845 c002 	str.w	ip, [r5, r2]
 801186e:	9a03      	ldr	r2, [sp, #12]
 8011870:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011874:	3304      	adds	r3, #4
 8011876:	f1b9 0f00 	cmp.w	r9, #0
 801187a:	d020      	beq.n	80118be <__multiply+0x142>
 801187c:	6829      	ldr	r1, [r5, #0]
 801187e:	f104 0c14 	add.w	ip, r4, #20
 8011882:	46ae      	mov	lr, r5
 8011884:	f04f 0a00 	mov.w	sl, #0
 8011888:	f8bc b000 	ldrh.w	fp, [ip]
 801188c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011890:	fb09 220b 	mla	r2, r9, fp, r2
 8011894:	4492      	add	sl, r2
 8011896:	b289      	uxth	r1, r1
 8011898:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801189c:	f84e 1b04 	str.w	r1, [lr], #4
 80118a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80118a4:	f8be 1000 	ldrh.w	r1, [lr]
 80118a8:	0c12      	lsrs	r2, r2, #16
 80118aa:	fb09 1102 	mla	r1, r9, r2, r1
 80118ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80118b2:	4567      	cmp	r7, ip
 80118b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80118b8:	d8e6      	bhi.n	8011888 <__multiply+0x10c>
 80118ba:	9a01      	ldr	r2, [sp, #4]
 80118bc:	50a9      	str	r1, [r5, r2]
 80118be:	3504      	adds	r5, #4
 80118c0:	e79a      	b.n	80117f8 <__multiply+0x7c>
 80118c2:	3e01      	subs	r6, #1
 80118c4:	e79c      	b.n	8011800 <__multiply+0x84>
 80118c6:	bf00      	nop
 80118c8:	08013f5b 	.word	0x08013f5b
 80118cc:	08013f6c 	.word	0x08013f6c

080118d0 <__pow5mult>:
 80118d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118d4:	4615      	mov	r5, r2
 80118d6:	f012 0203 	ands.w	r2, r2, #3
 80118da:	4606      	mov	r6, r0
 80118dc:	460f      	mov	r7, r1
 80118de:	d007      	beq.n	80118f0 <__pow5mult+0x20>
 80118e0:	4c25      	ldr	r4, [pc, #148]	; (8011978 <__pow5mult+0xa8>)
 80118e2:	3a01      	subs	r2, #1
 80118e4:	2300      	movs	r3, #0
 80118e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80118ea:	f7ff fe9b 	bl	8011624 <__multadd>
 80118ee:	4607      	mov	r7, r0
 80118f0:	10ad      	asrs	r5, r5, #2
 80118f2:	d03d      	beq.n	8011970 <__pow5mult+0xa0>
 80118f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80118f6:	b97c      	cbnz	r4, 8011918 <__pow5mult+0x48>
 80118f8:	2010      	movs	r0, #16
 80118fa:	f7ff fe1d 	bl	8011538 <malloc>
 80118fe:	4602      	mov	r2, r0
 8011900:	6270      	str	r0, [r6, #36]	; 0x24
 8011902:	b928      	cbnz	r0, 8011910 <__pow5mult+0x40>
 8011904:	4b1d      	ldr	r3, [pc, #116]	; (801197c <__pow5mult+0xac>)
 8011906:	481e      	ldr	r0, [pc, #120]	; (8011980 <__pow5mult+0xb0>)
 8011908:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801190c:	f000 fcd6 	bl	80122bc <__assert_func>
 8011910:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011914:	6004      	str	r4, [r0, #0]
 8011916:	60c4      	str	r4, [r0, #12]
 8011918:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801191c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011920:	b94c      	cbnz	r4, 8011936 <__pow5mult+0x66>
 8011922:	f240 2171 	movw	r1, #625	; 0x271
 8011926:	4630      	mov	r0, r6
 8011928:	f7ff ff12 	bl	8011750 <__i2b>
 801192c:	2300      	movs	r3, #0
 801192e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011932:	4604      	mov	r4, r0
 8011934:	6003      	str	r3, [r0, #0]
 8011936:	f04f 0900 	mov.w	r9, #0
 801193a:	07eb      	lsls	r3, r5, #31
 801193c:	d50a      	bpl.n	8011954 <__pow5mult+0x84>
 801193e:	4639      	mov	r1, r7
 8011940:	4622      	mov	r2, r4
 8011942:	4630      	mov	r0, r6
 8011944:	f7ff ff1a 	bl	801177c <__multiply>
 8011948:	4639      	mov	r1, r7
 801194a:	4680      	mov	r8, r0
 801194c:	4630      	mov	r0, r6
 801194e:	f7ff fe47 	bl	80115e0 <_Bfree>
 8011952:	4647      	mov	r7, r8
 8011954:	106d      	asrs	r5, r5, #1
 8011956:	d00b      	beq.n	8011970 <__pow5mult+0xa0>
 8011958:	6820      	ldr	r0, [r4, #0]
 801195a:	b938      	cbnz	r0, 801196c <__pow5mult+0x9c>
 801195c:	4622      	mov	r2, r4
 801195e:	4621      	mov	r1, r4
 8011960:	4630      	mov	r0, r6
 8011962:	f7ff ff0b 	bl	801177c <__multiply>
 8011966:	6020      	str	r0, [r4, #0]
 8011968:	f8c0 9000 	str.w	r9, [r0]
 801196c:	4604      	mov	r4, r0
 801196e:	e7e4      	b.n	801193a <__pow5mult+0x6a>
 8011970:	4638      	mov	r0, r7
 8011972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011976:	bf00      	nop
 8011978:	080140b8 	.word	0x080140b8
 801197c:	08013ee9 	.word	0x08013ee9
 8011980:	08013f6c 	.word	0x08013f6c

08011984 <__lshift>:
 8011984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011988:	460c      	mov	r4, r1
 801198a:	6849      	ldr	r1, [r1, #4]
 801198c:	6923      	ldr	r3, [r4, #16]
 801198e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011992:	68a3      	ldr	r3, [r4, #8]
 8011994:	4607      	mov	r7, r0
 8011996:	4691      	mov	r9, r2
 8011998:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801199c:	f108 0601 	add.w	r6, r8, #1
 80119a0:	42b3      	cmp	r3, r6
 80119a2:	db0b      	blt.n	80119bc <__lshift+0x38>
 80119a4:	4638      	mov	r0, r7
 80119a6:	f7ff fddb 	bl	8011560 <_Balloc>
 80119aa:	4605      	mov	r5, r0
 80119ac:	b948      	cbnz	r0, 80119c2 <__lshift+0x3e>
 80119ae:	4602      	mov	r2, r0
 80119b0:	4b2a      	ldr	r3, [pc, #168]	; (8011a5c <__lshift+0xd8>)
 80119b2:	482b      	ldr	r0, [pc, #172]	; (8011a60 <__lshift+0xdc>)
 80119b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80119b8:	f000 fc80 	bl	80122bc <__assert_func>
 80119bc:	3101      	adds	r1, #1
 80119be:	005b      	lsls	r3, r3, #1
 80119c0:	e7ee      	b.n	80119a0 <__lshift+0x1c>
 80119c2:	2300      	movs	r3, #0
 80119c4:	f100 0114 	add.w	r1, r0, #20
 80119c8:	f100 0210 	add.w	r2, r0, #16
 80119cc:	4618      	mov	r0, r3
 80119ce:	4553      	cmp	r3, sl
 80119d0:	db37      	blt.n	8011a42 <__lshift+0xbe>
 80119d2:	6920      	ldr	r0, [r4, #16]
 80119d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119d8:	f104 0314 	add.w	r3, r4, #20
 80119dc:	f019 091f 	ands.w	r9, r9, #31
 80119e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80119e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80119e8:	d02f      	beq.n	8011a4a <__lshift+0xc6>
 80119ea:	f1c9 0e20 	rsb	lr, r9, #32
 80119ee:	468a      	mov	sl, r1
 80119f0:	f04f 0c00 	mov.w	ip, #0
 80119f4:	681a      	ldr	r2, [r3, #0]
 80119f6:	fa02 f209 	lsl.w	r2, r2, r9
 80119fa:	ea42 020c 	orr.w	r2, r2, ip
 80119fe:	f84a 2b04 	str.w	r2, [sl], #4
 8011a02:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a06:	4298      	cmp	r0, r3
 8011a08:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011a0c:	d8f2      	bhi.n	80119f4 <__lshift+0x70>
 8011a0e:	1b03      	subs	r3, r0, r4
 8011a10:	3b15      	subs	r3, #21
 8011a12:	f023 0303 	bic.w	r3, r3, #3
 8011a16:	3304      	adds	r3, #4
 8011a18:	f104 0215 	add.w	r2, r4, #21
 8011a1c:	4290      	cmp	r0, r2
 8011a1e:	bf38      	it	cc
 8011a20:	2304      	movcc	r3, #4
 8011a22:	f841 c003 	str.w	ip, [r1, r3]
 8011a26:	f1bc 0f00 	cmp.w	ip, #0
 8011a2a:	d001      	beq.n	8011a30 <__lshift+0xac>
 8011a2c:	f108 0602 	add.w	r6, r8, #2
 8011a30:	3e01      	subs	r6, #1
 8011a32:	4638      	mov	r0, r7
 8011a34:	612e      	str	r6, [r5, #16]
 8011a36:	4621      	mov	r1, r4
 8011a38:	f7ff fdd2 	bl	80115e0 <_Bfree>
 8011a3c:	4628      	mov	r0, r5
 8011a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a42:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a46:	3301      	adds	r3, #1
 8011a48:	e7c1      	b.n	80119ce <__lshift+0x4a>
 8011a4a:	3904      	subs	r1, #4
 8011a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a50:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a54:	4298      	cmp	r0, r3
 8011a56:	d8f9      	bhi.n	8011a4c <__lshift+0xc8>
 8011a58:	e7ea      	b.n	8011a30 <__lshift+0xac>
 8011a5a:	bf00      	nop
 8011a5c:	08013f5b 	.word	0x08013f5b
 8011a60:	08013f6c 	.word	0x08013f6c

08011a64 <__mcmp>:
 8011a64:	b530      	push	{r4, r5, lr}
 8011a66:	6902      	ldr	r2, [r0, #16]
 8011a68:	690c      	ldr	r4, [r1, #16]
 8011a6a:	1b12      	subs	r2, r2, r4
 8011a6c:	d10e      	bne.n	8011a8c <__mcmp+0x28>
 8011a6e:	f100 0314 	add.w	r3, r0, #20
 8011a72:	3114      	adds	r1, #20
 8011a74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011a78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011a7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011a80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011a84:	42a5      	cmp	r5, r4
 8011a86:	d003      	beq.n	8011a90 <__mcmp+0x2c>
 8011a88:	d305      	bcc.n	8011a96 <__mcmp+0x32>
 8011a8a:	2201      	movs	r2, #1
 8011a8c:	4610      	mov	r0, r2
 8011a8e:	bd30      	pop	{r4, r5, pc}
 8011a90:	4283      	cmp	r3, r0
 8011a92:	d3f3      	bcc.n	8011a7c <__mcmp+0x18>
 8011a94:	e7fa      	b.n	8011a8c <__mcmp+0x28>
 8011a96:	f04f 32ff 	mov.w	r2, #4294967295
 8011a9a:	e7f7      	b.n	8011a8c <__mcmp+0x28>

08011a9c <__mdiff>:
 8011a9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aa0:	460c      	mov	r4, r1
 8011aa2:	4606      	mov	r6, r0
 8011aa4:	4611      	mov	r1, r2
 8011aa6:	4620      	mov	r0, r4
 8011aa8:	4690      	mov	r8, r2
 8011aaa:	f7ff ffdb 	bl	8011a64 <__mcmp>
 8011aae:	1e05      	subs	r5, r0, #0
 8011ab0:	d110      	bne.n	8011ad4 <__mdiff+0x38>
 8011ab2:	4629      	mov	r1, r5
 8011ab4:	4630      	mov	r0, r6
 8011ab6:	f7ff fd53 	bl	8011560 <_Balloc>
 8011aba:	b930      	cbnz	r0, 8011aca <__mdiff+0x2e>
 8011abc:	4b3a      	ldr	r3, [pc, #232]	; (8011ba8 <__mdiff+0x10c>)
 8011abe:	4602      	mov	r2, r0
 8011ac0:	f240 2132 	movw	r1, #562	; 0x232
 8011ac4:	4839      	ldr	r0, [pc, #228]	; (8011bac <__mdiff+0x110>)
 8011ac6:	f000 fbf9 	bl	80122bc <__assert_func>
 8011aca:	2301      	movs	r3, #1
 8011acc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011ad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ad4:	bfa4      	itt	ge
 8011ad6:	4643      	movge	r3, r8
 8011ad8:	46a0      	movge	r8, r4
 8011ada:	4630      	mov	r0, r6
 8011adc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011ae0:	bfa6      	itte	ge
 8011ae2:	461c      	movge	r4, r3
 8011ae4:	2500      	movge	r5, #0
 8011ae6:	2501      	movlt	r5, #1
 8011ae8:	f7ff fd3a 	bl	8011560 <_Balloc>
 8011aec:	b920      	cbnz	r0, 8011af8 <__mdiff+0x5c>
 8011aee:	4b2e      	ldr	r3, [pc, #184]	; (8011ba8 <__mdiff+0x10c>)
 8011af0:	4602      	mov	r2, r0
 8011af2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011af6:	e7e5      	b.n	8011ac4 <__mdiff+0x28>
 8011af8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011afc:	6926      	ldr	r6, [r4, #16]
 8011afe:	60c5      	str	r5, [r0, #12]
 8011b00:	f104 0914 	add.w	r9, r4, #20
 8011b04:	f108 0514 	add.w	r5, r8, #20
 8011b08:	f100 0e14 	add.w	lr, r0, #20
 8011b0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011b10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011b14:	f108 0210 	add.w	r2, r8, #16
 8011b18:	46f2      	mov	sl, lr
 8011b1a:	2100      	movs	r1, #0
 8011b1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011b20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011b24:	fa1f f883 	uxth.w	r8, r3
 8011b28:	fa11 f18b 	uxtah	r1, r1, fp
 8011b2c:	0c1b      	lsrs	r3, r3, #16
 8011b2e:	eba1 0808 	sub.w	r8, r1, r8
 8011b32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011b36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011b3a:	fa1f f888 	uxth.w	r8, r8
 8011b3e:	1419      	asrs	r1, r3, #16
 8011b40:	454e      	cmp	r6, r9
 8011b42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011b46:	f84a 3b04 	str.w	r3, [sl], #4
 8011b4a:	d8e7      	bhi.n	8011b1c <__mdiff+0x80>
 8011b4c:	1b33      	subs	r3, r6, r4
 8011b4e:	3b15      	subs	r3, #21
 8011b50:	f023 0303 	bic.w	r3, r3, #3
 8011b54:	3304      	adds	r3, #4
 8011b56:	3415      	adds	r4, #21
 8011b58:	42a6      	cmp	r6, r4
 8011b5a:	bf38      	it	cc
 8011b5c:	2304      	movcc	r3, #4
 8011b5e:	441d      	add	r5, r3
 8011b60:	4473      	add	r3, lr
 8011b62:	469e      	mov	lr, r3
 8011b64:	462e      	mov	r6, r5
 8011b66:	4566      	cmp	r6, ip
 8011b68:	d30e      	bcc.n	8011b88 <__mdiff+0xec>
 8011b6a:	f10c 0203 	add.w	r2, ip, #3
 8011b6e:	1b52      	subs	r2, r2, r5
 8011b70:	f022 0203 	bic.w	r2, r2, #3
 8011b74:	3d03      	subs	r5, #3
 8011b76:	45ac      	cmp	ip, r5
 8011b78:	bf38      	it	cc
 8011b7a:	2200      	movcc	r2, #0
 8011b7c:	441a      	add	r2, r3
 8011b7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011b82:	b17b      	cbz	r3, 8011ba4 <__mdiff+0x108>
 8011b84:	6107      	str	r7, [r0, #16]
 8011b86:	e7a3      	b.n	8011ad0 <__mdiff+0x34>
 8011b88:	f856 8b04 	ldr.w	r8, [r6], #4
 8011b8c:	fa11 f288 	uxtah	r2, r1, r8
 8011b90:	1414      	asrs	r4, r2, #16
 8011b92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011b96:	b292      	uxth	r2, r2
 8011b98:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011b9c:	f84e 2b04 	str.w	r2, [lr], #4
 8011ba0:	1421      	asrs	r1, r4, #16
 8011ba2:	e7e0      	b.n	8011b66 <__mdiff+0xca>
 8011ba4:	3f01      	subs	r7, #1
 8011ba6:	e7ea      	b.n	8011b7e <__mdiff+0xe2>
 8011ba8:	08013f5b 	.word	0x08013f5b
 8011bac:	08013f6c 	.word	0x08013f6c

08011bb0 <__d2b>:
 8011bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011bb4:	4689      	mov	r9, r1
 8011bb6:	2101      	movs	r1, #1
 8011bb8:	ec57 6b10 	vmov	r6, r7, d0
 8011bbc:	4690      	mov	r8, r2
 8011bbe:	f7ff fccf 	bl	8011560 <_Balloc>
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	b930      	cbnz	r0, 8011bd4 <__d2b+0x24>
 8011bc6:	4602      	mov	r2, r0
 8011bc8:	4b25      	ldr	r3, [pc, #148]	; (8011c60 <__d2b+0xb0>)
 8011bca:	4826      	ldr	r0, [pc, #152]	; (8011c64 <__d2b+0xb4>)
 8011bcc:	f240 310a 	movw	r1, #778	; 0x30a
 8011bd0:	f000 fb74 	bl	80122bc <__assert_func>
 8011bd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011bd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011bdc:	bb35      	cbnz	r5, 8011c2c <__d2b+0x7c>
 8011bde:	2e00      	cmp	r6, #0
 8011be0:	9301      	str	r3, [sp, #4]
 8011be2:	d028      	beq.n	8011c36 <__d2b+0x86>
 8011be4:	4668      	mov	r0, sp
 8011be6:	9600      	str	r6, [sp, #0]
 8011be8:	f7ff fd82 	bl	80116f0 <__lo0bits>
 8011bec:	9900      	ldr	r1, [sp, #0]
 8011bee:	b300      	cbz	r0, 8011c32 <__d2b+0x82>
 8011bf0:	9a01      	ldr	r2, [sp, #4]
 8011bf2:	f1c0 0320 	rsb	r3, r0, #32
 8011bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8011bfa:	430b      	orrs	r3, r1
 8011bfc:	40c2      	lsrs	r2, r0
 8011bfe:	6163      	str	r3, [r4, #20]
 8011c00:	9201      	str	r2, [sp, #4]
 8011c02:	9b01      	ldr	r3, [sp, #4]
 8011c04:	61a3      	str	r3, [r4, #24]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	bf14      	ite	ne
 8011c0a:	2202      	movne	r2, #2
 8011c0c:	2201      	moveq	r2, #1
 8011c0e:	6122      	str	r2, [r4, #16]
 8011c10:	b1d5      	cbz	r5, 8011c48 <__d2b+0x98>
 8011c12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011c16:	4405      	add	r5, r0
 8011c18:	f8c9 5000 	str.w	r5, [r9]
 8011c1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011c20:	f8c8 0000 	str.w	r0, [r8]
 8011c24:	4620      	mov	r0, r4
 8011c26:	b003      	add	sp, #12
 8011c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011c30:	e7d5      	b.n	8011bde <__d2b+0x2e>
 8011c32:	6161      	str	r1, [r4, #20]
 8011c34:	e7e5      	b.n	8011c02 <__d2b+0x52>
 8011c36:	a801      	add	r0, sp, #4
 8011c38:	f7ff fd5a 	bl	80116f0 <__lo0bits>
 8011c3c:	9b01      	ldr	r3, [sp, #4]
 8011c3e:	6163      	str	r3, [r4, #20]
 8011c40:	2201      	movs	r2, #1
 8011c42:	6122      	str	r2, [r4, #16]
 8011c44:	3020      	adds	r0, #32
 8011c46:	e7e3      	b.n	8011c10 <__d2b+0x60>
 8011c48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011c4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011c50:	f8c9 0000 	str.w	r0, [r9]
 8011c54:	6918      	ldr	r0, [r3, #16]
 8011c56:	f7ff fd2b 	bl	80116b0 <__hi0bits>
 8011c5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011c5e:	e7df      	b.n	8011c20 <__d2b+0x70>
 8011c60:	08013f5b 	.word	0x08013f5b
 8011c64:	08013f6c 	.word	0x08013f6c

08011c68 <_calloc_r>:
 8011c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c6a:	fba1 2402 	umull	r2, r4, r1, r2
 8011c6e:	b94c      	cbnz	r4, 8011c84 <_calloc_r+0x1c>
 8011c70:	4611      	mov	r1, r2
 8011c72:	9201      	str	r2, [sp, #4]
 8011c74:	f7fd fe22 	bl	800f8bc <_malloc_r>
 8011c78:	9a01      	ldr	r2, [sp, #4]
 8011c7a:	4605      	mov	r5, r0
 8011c7c:	b930      	cbnz	r0, 8011c8c <_calloc_r+0x24>
 8011c7e:	4628      	mov	r0, r5
 8011c80:	b003      	add	sp, #12
 8011c82:	bd30      	pop	{r4, r5, pc}
 8011c84:	220c      	movs	r2, #12
 8011c86:	6002      	str	r2, [r0, #0]
 8011c88:	2500      	movs	r5, #0
 8011c8a:	e7f8      	b.n	8011c7e <_calloc_r+0x16>
 8011c8c:	4621      	mov	r1, r4
 8011c8e:	f7fd fdec 	bl	800f86a <memset>
 8011c92:	e7f4      	b.n	8011c7e <_calloc_r+0x16>

08011c94 <_free_r>:
 8011c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c96:	2900      	cmp	r1, #0
 8011c98:	d044      	beq.n	8011d24 <_free_r+0x90>
 8011c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c9e:	9001      	str	r0, [sp, #4]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	f1a1 0404 	sub.w	r4, r1, #4
 8011ca6:	bfb8      	it	lt
 8011ca8:	18e4      	addlt	r4, r4, r3
 8011caa:	f7ff fc4d 	bl	8011548 <__malloc_lock>
 8011cae:	4a1e      	ldr	r2, [pc, #120]	; (8011d28 <_free_r+0x94>)
 8011cb0:	9801      	ldr	r0, [sp, #4]
 8011cb2:	6813      	ldr	r3, [r2, #0]
 8011cb4:	b933      	cbnz	r3, 8011cc4 <_free_r+0x30>
 8011cb6:	6063      	str	r3, [r4, #4]
 8011cb8:	6014      	str	r4, [r2, #0]
 8011cba:	b003      	add	sp, #12
 8011cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011cc0:	f7ff bc48 	b.w	8011554 <__malloc_unlock>
 8011cc4:	42a3      	cmp	r3, r4
 8011cc6:	d908      	bls.n	8011cda <_free_r+0x46>
 8011cc8:	6825      	ldr	r5, [r4, #0]
 8011cca:	1961      	adds	r1, r4, r5
 8011ccc:	428b      	cmp	r3, r1
 8011cce:	bf01      	itttt	eq
 8011cd0:	6819      	ldreq	r1, [r3, #0]
 8011cd2:	685b      	ldreq	r3, [r3, #4]
 8011cd4:	1949      	addeq	r1, r1, r5
 8011cd6:	6021      	streq	r1, [r4, #0]
 8011cd8:	e7ed      	b.n	8011cb6 <_free_r+0x22>
 8011cda:	461a      	mov	r2, r3
 8011cdc:	685b      	ldr	r3, [r3, #4]
 8011cde:	b10b      	cbz	r3, 8011ce4 <_free_r+0x50>
 8011ce0:	42a3      	cmp	r3, r4
 8011ce2:	d9fa      	bls.n	8011cda <_free_r+0x46>
 8011ce4:	6811      	ldr	r1, [r2, #0]
 8011ce6:	1855      	adds	r5, r2, r1
 8011ce8:	42a5      	cmp	r5, r4
 8011cea:	d10b      	bne.n	8011d04 <_free_r+0x70>
 8011cec:	6824      	ldr	r4, [r4, #0]
 8011cee:	4421      	add	r1, r4
 8011cf0:	1854      	adds	r4, r2, r1
 8011cf2:	42a3      	cmp	r3, r4
 8011cf4:	6011      	str	r1, [r2, #0]
 8011cf6:	d1e0      	bne.n	8011cba <_free_r+0x26>
 8011cf8:	681c      	ldr	r4, [r3, #0]
 8011cfa:	685b      	ldr	r3, [r3, #4]
 8011cfc:	6053      	str	r3, [r2, #4]
 8011cfe:	4421      	add	r1, r4
 8011d00:	6011      	str	r1, [r2, #0]
 8011d02:	e7da      	b.n	8011cba <_free_r+0x26>
 8011d04:	d902      	bls.n	8011d0c <_free_r+0x78>
 8011d06:	230c      	movs	r3, #12
 8011d08:	6003      	str	r3, [r0, #0]
 8011d0a:	e7d6      	b.n	8011cba <_free_r+0x26>
 8011d0c:	6825      	ldr	r5, [r4, #0]
 8011d0e:	1961      	adds	r1, r4, r5
 8011d10:	428b      	cmp	r3, r1
 8011d12:	bf04      	itt	eq
 8011d14:	6819      	ldreq	r1, [r3, #0]
 8011d16:	685b      	ldreq	r3, [r3, #4]
 8011d18:	6063      	str	r3, [r4, #4]
 8011d1a:	bf04      	itt	eq
 8011d1c:	1949      	addeq	r1, r1, r5
 8011d1e:	6021      	streq	r1, [r4, #0]
 8011d20:	6054      	str	r4, [r2, #4]
 8011d22:	e7ca      	b.n	8011cba <_free_r+0x26>
 8011d24:	b003      	add	sp, #12
 8011d26:	bd30      	pop	{r4, r5, pc}
 8011d28:	24005400 	.word	0x24005400

08011d2c <__ssputs_r>:
 8011d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d30:	688e      	ldr	r6, [r1, #8]
 8011d32:	429e      	cmp	r6, r3
 8011d34:	4682      	mov	sl, r0
 8011d36:	460c      	mov	r4, r1
 8011d38:	4690      	mov	r8, r2
 8011d3a:	461f      	mov	r7, r3
 8011d3c:	d838      	bhi.n	8011db0 <__ssputs_r+0x84>
 8011d3e:	898a      	ldrh	r2, [r1, #12]
 8011d40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011d44:	d032      	beq.n	8011dac <__ssputs_r+0x80>
 8011d46:	6825      	ldr	r5, [r4, #0]
 8011d48:	6909      	ldr	r1, [r1, #16]
 8011d4a:	eba5 0901 	sub.w	r9, r5, r1
 8011d4e:	6965      	ldr	r5, [r4, #20]
 8011d50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011d58:	3301      	adds	r3, #1
 8011d5a:	444b      	add	r3, r9
 8011d5c:	106d      	asrs	r5, r5, #1
 8011d5e:	429d      	cmp	r5, r3
 8011d60:	bf38      	it	cc
 8011d62:	461d      	movcc	r5, r3
 8011d64:	0553      	lsls	r3, r2, #21
 8011d66:	d531      	bpl.n	8011dcc <__ssputs_r+0xa0>
 8011d68:	4629      	mov	r1, r5
 8011d6a:	f7fd fda7 	bl	800f8bc <_malloc_r>
 8011d6e:	4606      	mov	r6, r0
 8011d70:	b950      	cbnz	r0, 8011d88 <__ssputs_r+0x5c>
 8011d72:	230c      	movs	r3, #12
 8011d74:	f8ca 3000 	str.w	r3, [sl]
 8011d78:	89a3      	ldrh	r3, [r4, #12]
 8011d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d7e:	81a3      	strh	r3, [r4, #12]
 8011d80:	f04f 30ff 	mov.w	r0, #4294967295
 8011d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d88:	6921      	ldr	r1, [r4, #16]
 8011d8a:	464a      	mov	r2, r9
 8011d8c:	f7fd fd5f 	bl	800f84e <memcpy>
 8011d90:	89a3      	ldrh	r3, [r4, #12]
 8011d92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d9a:	81a3      	strh	r3, [r4, #12]
 8011d9c:	6126      	str	r6, [r4, #16]
 8011d9e:	6165      	str	r5, [r4, #20]
 8011da0:	444e      	add	r6, r9
 8011da2:	eba5 0509 	sub.w	r5, r5, r9
 8011da6:	6026      	str	r6, [r4, #0]
 8011da8:	60a5      	str	r5, [r4, #8]
 8011daa:	463e      	mov	r6, r7
 8011dac:	42be      	cmp	r6, r7
 8011dae:	d900      	bls.n	8011db2 <__ssputs_r+0x86>
 8011db0:	463e      	mov	r6, r7
 8011db2:	6820      	ldr	r0, [r4, #0]
 8011db4:	4632      	mov	r2, r6
 8011db6:	4641      	mov	r1, r8
 8011db8:	f000 fae4 	bl	8012384 <memmove>
 8011dbc:	68a3      	ldr	r3, [r4, #8]
 8011dbe:	1b9b      	subs	r3, r3, r6
 8011dc0:	60a3      	str	r3, [r4, #8]
 8011dc2:	6823      	ldr	r3, [r4, #0]
 8011dc4:	4433      	add	r3, r6
 8011dc6:	6023      	str	r3, [r4, #0]
 8011dc8:	2000      	movs	r0, #0
 8011dca:	e7db      	b.n	8011d84 <__ssputs_r+0x58>
 8011dcc:	462a      	mov	r2, r5
 8011dce:	f000 faf3 	bl	80123b8 <_realloc_r>
 8011dd2:	4606      	mov	r6, r0
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	d1e1      	bne.n	8011d9c <__ssputs_r+0x70>
 8011dd8:	6921      	ldr	r1, [r4, #16]
 8011dda:	4650      	mov	r0, sl
 8011ddc:	f7ff ff5a 	bl	8011c94 <_free_r>
 8011de0:	e7c7      	b.n	8011d72 <__ssputs_r+0x46>
	...

08011de4 <_svfiprintf_r>:
 8011de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011de8:	4698      	mov	r8, r3
 8011dea:	898b      	ldrh	r3, [r1, #12]
 8011dec:	061b      	lsls	r3, r3, #24
 8011dee:	b09d      	sub	sp, #116	; 0x74
 8011df0:	4607      	mov	r7, r0
 8011df2:	460d      	mov	r5, r1
 8011df4:	4614      	mov	r4, r2
 8011df6:	d50e      	bpl.n	8011e16 <_svfiprintf_r+0x32>
 8011df8:	690b      	ldr	r3, [r1, #16]
 8011dfa:	b963      	cbnz	r3, 8011e16 <_svfiprintf_r+0x32>
 8011dfc:	2140      	movs	r1, #64	; 0x40
 8011dfe:	f7fd fd5d 	bl	800f8bc <_malloc_r>
 8011e02:	6028      	str	r0, [r5, #0]
 8011e04:	6128      	str	r0, [r5, #16]
 8011e06:	b920      	cbnz	r0, 8011e12 <_svfiprintf_r+0x2e>
 8011e08:	230c      	movs	r3, #12
 8011e0a:	603b      	str	r3, [r7, #0]
 8011e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e10:	e0d1      	b.n	8011fb6 <_svfiprintf_r+0x1d2>
 8011e12:	2340      	movs	r3, #64	; 0x40
 8011e14:	616b      	str	r3, [r5, #20]
 8011e16:	2300      	movs	r3, #0
 8011e18:	9309      	str	r3, [sp, #36]	; 0x24
 8011e1a:	2320      	movs	r3, #32
 8011e1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e20:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e24:	2330      	movs	r3, #48	; 0x30
 8011e26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011fd0 <_svfiprintf_r+0x1ec>
 8011e2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e2e:	f04f 0901 	mov.w	r9, #1
 8011e32:	4623      	mov	r3, r4
 8011e34:	469a      	mov	sl, r3
 8011e36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e3a:	b10a      	cbz	r2, 8011e40 <_svfiprintf_r+0x5c>
 8011e3c:	2a25      	cmp	r2, #37	; 0x25
 8011e3e:	d1f9      	bne.n	8011e34 <_svfiprintf_r+0x50>
 8011e40:	ebba 0b04 	subs.w	fp, sl, r4
 8011e44:	d00b      	beq.n	8011e5e <_svfiprintf_r+0x7a>
 8011e46:	465b      	mov	r3, fp
 8011e48:	4622      	mov	r2, r4
 8011e4a:	4629      	mov	r1, r5
 8011e4c:	4638      	mov	r0, r7
 8011e4e:	f7ff ff6d 	bl	8011d2c <__ssputs_r>
 8011e52:	3001      	adds	r0, #1
 8011e54:	f000 80aa 	beq.w	8011fac <_svfiprintf_r+0x1c8>
 8011e58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e5a:	445a      	add	r2, fp
 8011e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8011e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	f000 80a2 	beq.w	8011fac <_svfiprintf_r+0x1c8>
 8011e68:	2300      	movs	r3, #0
 8011e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8011e6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e72:	f10a 0a01 	add.w	sl, sl, #1
 8011e76:	9304      	str	r3, [sp, #16]
 8011e78:	9307      	str	r3, [sp, #28]
 8011e7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e7e:	931a      	str	r3, [sp, #104]	; 0x68
 8011e80:	4654      	mov	r4, sl
 8011e82:	2205      	movs	r2, #5
 8011e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e88:	4851      	ldr	r0, [pc, #324]	; (8011fd0 <_svfiprintf_r+0x1ec>)
 8011e8a:	f7ee fa31 	bl	80002f0 <memchr>
 8011e8e:	9a04      	ldr	r2, [sp, #16]
 8011e90:	b9d8      	cbnz	r0, 8011eca <_svfiprintf_r+0xe6>
 8011e92:	06d0      	lsls	r0, r2, #27
 8011e94:	bf44      	itt	mi
 8011e96:	2320      	movmi	r3, #32
 8011e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e9c:	0711      	lsls	r1, r2, #28
 8011e9e:	bf44      	itt	mi
 8011ea0:	232b      	movmi	r3, #43	; 0x2b
 8011ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8011eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8011eac:	d015      	beq.n	8011eda <_svfiprintf_r+0xf6>
 8011eae:	9a07      	ldr	r2, [sp, #28]
 8011eb0:	4654      	mov	r4, sl
 8011eb2:	2000      	movs	r0, #0
 8011eb4:	f04f 0c0a 	mov.w	ip, #10
 8011eb8:	4621      	mov	r1, r4
 8011eba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ebe:	3b30      	subs	r3, #48	; 0x30
 8011ec0:	2b09      	cmp	r3, #9
 8011ec2:	d94e      	bls.n	8011f62 <_svfiprintf_r+0x17e>
 8011ec4:	b1b0      	cbz	r0, 8011ef4 <_svfiprintf_r+0x110>
 8011ec6:	9207      	str	r2, [sp, #28]
 8011ec8:	e014      	b.n	8011ef4 <_svfiprintf_r+0x110>
 8011eca:	eba0 0308 	sub.w	r3, r0, r8
 8011ece:	fa09 f303 	lsl.w	r3, r9, r3
 8011ed2:	4313      	orrs	r3, r2
 8011ed4:	9304      	str	r3, [sp, #16]
 8011ed6:	46a2      	mov	sl, r4
 8011ed8:	e7d2      	b.n	8011e80 <_svfiprintf_r+0x9c>
 8011eda:	9b03      	ldr	r3, [sp, #12]
 8011edc:	1d19      	adds	r1, r3, #4
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	9103      	str	r1, [sp, #12]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	bfbb      	ittet	lt
 8011ee6:	425b      	neglt	r3, r3
 8011ee8:	f042 0202 	orrlt.w	r2, r2, #2
 8011eec:	9307      	strge	r3, [sp, #28]
 8011eee:	9307      	strlt	r3, [sp, #28]
 8011ef0:	bfb8      	it	lt
 8011ef2:	9204      	strlt	r2, [sp, #16]
 8011ef4:	7823      	ldrb	r3, [r4, #0]
 8011ef6:	2b2e      	cmp	r3, #46	; 0x2e
 8011ef8:	d10c      	bne.n	8011f14 <_svfiprintf_r+0x130>
 8011efa:	7863      	ldrb	r3, [r4, #1]
 8011efc:	2b2a      	cmp	r3, #42	; 0x2a
 8011efe:	d135      	bne.n	8011f6c <_svfiprintf_r+0x188>
 8011f00:	9b03      	ldr	r3, [sp, #12]
 8011f02:	1d1a      	adds	r2, r3, #4
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	9203      	str	r2, [sp, #12]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	bfb8      	it	lt
 8011f0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011f10:	3402      	adds	r4, #2
 8011f12:	9305      	str	r3, [sp, #20]
 8011f14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011fe0 <_svfiprintf_r+0x1fc>
 8011f18:	7821      	ldrb	r1, [r4, #0]
 8011f1a:	2203      	movs	r2, #3
 8011f1c:	4650      	mov	r0, sl
 8011f1e:	f7ee f9e7 	bl	80002f0 <memchr>
 8011f22:	b140      	cbz	r0, 8011f36 <_svfiprintf_r+0x152>
 8011f24:	2340      	movs	r3, #64	; 0x40
 8011f26:	eba0 000a 	sub.w	r0, r0, sl
 8011f2a:	fa03 f000 	lsl.w	r0, r3, r0
 8011f2e:	9b04      	ldr	r3, [sp, #16]
 8011f30:	4303      	orrs	r3, r0
 8011f32:	3401      	adds	r4, #1
 8011f34:	9304      	str	r3, [sp, #16]
 8011f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f3a:	4826      	ldr	r0, [pc, #152]	; (8011fd4 <_svfiprintf_r+0x1f0>)
 8011f3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f40:	2206      	movs	r2, #6
 8011f42:	f7ee f9d5 	bl	80002f0 <memchr>
 8011f46:	2800      	cmp	r0, #0
 8011f48:	d038      	beq.n	8011fbc <_svfiprintf_r+0x1d8>
 8011f4a:	4b23      	ldr	r3, [pc, #140]	; (8011fd8 <_svfiprintf_r+0x1f4>)
 8011f4c:	bb1b      	cbnz	r3, 8011f96 <_svfiprintf_r+0x1b2>
 8011f4e:	9b03      	ldr	r3, [sp, #12]
 8011f50:	3307      	adds	r3, #7
 8011f52:	f023 0307 	bic.w	r3, r3, #7
 8011f56:	3308      	adds	r3, #8
 8011f58:	9303      	str	r3, [sp, #12]
 8011f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f5c:	4433      	add	r3, r6
 8011f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8011f60:	e767      	b.n	8011e32 <_svfiprintf_r+0x4e>
 8011f62:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f66:	460c      	mov	r4, r1
 8011f68:	2001      	movs	r0, #1
 8011f6a:	e7a5      	b.n	8011eb8 <_svfiprintf_r+0xd4>
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	3401      	adds	r4, #1
 8011f70:	9305      	str	r3, [sp, #20]
 8011f72:	4619      	mov	r1, r3
 8011f74:	f04f 0c0a 	mov.w	ip, #10
 8011f78:	4620      	mov	r0, r4
 8011f7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f7e:	3a30      	subs	r2, #48	; 0x30
 8011f80:	2a09      	cmp	r2, #9
 8011f82:	d903      	bls.n	8011f8c <_svfiprintf_r+0x1a8>
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d0c5      	beq.n	8011f14 <_svfiprintf_r+0x130>
 8011f88:	9105      	str	r1, [sp, #20]
 8011f8a:	e7c3      	b.n	8011f14 <_svfiprintf_r+0x130>
 8011f8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f90:	4604      	mov	r4, r0
 8011f92:	2301      	movs	r3, #1
 8011f94:	e7f0      	b.n	8011f78 <_svfiprintf_r+0x194>
 8011f96:	ab03      	add	r3, sp, #12
 8011f98:	9300      	str	r3, [sp, #0]
 8011f9a:	462a      	mov	r2, r5
 8011f9c:	4b0f      	ldr	r3, [pc, #60]	; (8011fdc <_svfiprintf_r+0x1f8>)
 8011f9e:	a904      	add	r1, sp, #16
 8011fa0:	4638      	mov	r0, r7
 8011fa2:	f7fd fd91 	bl	800fac8 <_printf_float>
 8011fa6:	1c42      	adds	r2, r0, #1
 8011fa8:	4606      	mov	r6, r0
 8011faa:	d1d6      	bne.n	8011f5a <_svfiprintf_r+0x176>
 8011fac:	89ab      	ldrh	r3, [r5, #12]
 8011fae:	065b      	lsls	r3, r3, #25
 8011fb0:	f53f af2c 	bmi.w	8011e0c <_svfiprintf_r+0x28>
 8011fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011fb6:	b01d      	add	sp, #116	; 0x74
 8011fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fbc:	ab03      	add	r3, sp, #12
 8011fbe:	9300      	str	r3, [sp, #0]
 8011fc0:	462a      	mov	r2, r5
 8011fc2:	4b06      	ldr	r3, [pc, #24]	; (8011fdc <_svfiprintf_r+0x1f8>)
 8011fc4:	a904      	add	r1, sp, #16
 8011fc6:	4638      	mov	r0, r7
 8011fc8:	f7fe f80a 	bl	800ffe0 <_printf_i>
 8011fcc:	e7eb      	b.n	8011fa6 <_svfiprintf_r+0x1c2>
 8011fce:	bf00      	nop
 8011fd0:	080140c4 	.word	0x080140c4
 8011fd4:	080140ce 	.word	0x080140ce
 8011fd8:	0800fac9 	.word	0x0800fac9
 8011fdc:	08011d2d 	.word	0x08011d2d
 8011fe0:	080140ca 	.word	0x080140ca

08011fe4 <__sfputc_r>:
 8011fe4:	6893      	ldr	r3, [r2, #8]
 8011fe6:	3b01      	subs	r3, #1
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	b410      	push	{r4}
 8011fec:	6093      	str	r3, [r2, #8]
 8011fee:	da08      	bge.n	8012002 <__sfputc_r+0x1e>
 8011ff0:	6994      	ldr	r4, [r2, #24]
 8011ff2:	42a3      	cmp	r3, r4
 8011ff4:	db01      	blt.n	8011ffa <__sfputc_r+0x16>
 8011ff6:	290a      	cmp	r1, #10
 8011ff8:	d103      	bne.n	8012002 <__sfputc_r+0x1e>
 8011ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ffe:	f7fe ba81 	b.w	8010504 <__swbuf_r>
 8012002:	6813      	ldr	r3, [r2, #0]
 8012004:	1c58      	adds	r0, r3, #1
 8012006:	6010      	str	r0, [r2, #0]
 8012008:	7019      	strb	r1, [r3, #0]
 801200a:	4608      	mov	r0, r1
 801200c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012010:	4770      	bx	lr

08012012 <__sfputs_r>:
 8012012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012014:	4606      	mov	r6, r0
 8012016:	460f      	mov	r7, r1
 8012018:	4614      	mov	r4, r2
 801201a:	18d5      	adds	r5, r2, r3
 801201c:	42ac      	cmp	r4, r5
 801201e:	d101      	bne.n	8012024 <__sfputs_r+0x12>
 8012020:	2000      	movs	r0, #0
 8012022:	e007      	b.n	8012034 <__sfputs_r+0x22>
 8012024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012028:	463a      	mov	r2, r7
 801202a:	4630      	mov	r0, r6
 801202c:	f7ff ffda 	bl	8011fe4 <__sfputc_r>
 8012030:	1c43      	adds	r3, r0, #1
 8012032:	d1f3      	bne.n	801201c <__sfputs_r+0xa>
 8012034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012038 <_vfiprintf_r>:
 8012038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801203c:	460d      	mov	r5, r1
 801203e:	b09d      	sub	sp, #116	; 0x74
 8012040:	4614      	mov	r4, r2
 8012042:	4698      	mov	r8, r3
 8012044:	4606      	mov	r6, r0
 8012046:	b118      	cbz	r0, 8012050 <_vfiprintf_r+0x18>
 8012048:	6983      	ldr	r3, [r0, #24]
 801204a:	b90b      	cbnz	r3, 8012050 <_vfiprintf_r+0x18>
 801204c:	f7fd fb3a 	bl	800f6c4 <__sinit>
 8012050:	4b89      	ldr	r3, [pc, #548]	; (8012278 <_vfiprintf_r+0x240>)
 8012052:	429d      	cmp	r5, r3
 8012054:	d11b      	bne.n	801208e <_vfiprintf_r+0x56>
 8012056:	6875      	ldr	r5, [r6, #4]
 8012058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801205a:	07d9      	lsls	r1, r3, #31
 801205c:	d405      	bmi.n	801206a <_vfiprintf_r+0x32>
 801205e:	89ab      	ldrh	r3, [r5, #12]
 8012060:	059a      	lsls	r2, r3, #22
 8012062:	d402      	bmi.n	801206a <_vfiprintf_r+0x32>
 8012064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012066:	f7fd fbf0 	bl	800f84a <__retarget_lock_acquire_recursive>
 801206a:	89ab      	ldrh	r3, [r5, #12]
 801206c:	071b      	lsls	r3, r3, #28
 801206e:	d501      	bpl.n	8012074 <_vfiprintf_r+0x3c>
 8012070:	692b      	ldr	r3, [r5, #16]
 8012072:	b9eb      	cbnz	r3, 80120b0 <_vfiprintf_r+0x78>
 8012074:	4629      	mov	r1, r5
 8012076:	4630      	mov	r0, r6
 8012078:	f7fe faa8 	bl	80105cc <__swsetup_r>
 801207c:	b1c0      	cbz	r0, 80120b0 <_vfiprintf_r+0x78>
 801207e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012080:	07dc      	lsls	r4, r3, #31
 8012082:	d50e      	bpl.n	80120a2 <_vfiprintf_r+0x6a>
 8012084:	f04f 30ff 	mov.w	r0, #4294967295
 8012088:	b01d      	add	sp, #116	; 0x74
 801208a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801208e:	4b7b      	ldr	r3, [pc, #492]	; (801227c <_vfiprintf_r+0x244>)
 8012090:	429d      	cmp	r5, r3
 8012092:	d101      	bne.n	8012098 <_vfiprintf_r+0x60>
 8012094:	68b5      	ldr	r5, [r6, #8]
 8012096:	e7df      	b.n	8012058 <_vfiprintf_r+0x20>
 8012098:	4b79      	ldr	r3, [pc, #484]	; (8012280 <_vfiprintf_r+0x248>)
 801209a:	429d      	cmp	r5, r3
 801209c:	bf08      	it	eq
 801209e:	68f5      	ldreq	r5, [r6, #12]
 80120a0:	e7da      	b.n	8012058 <_vfiprintf_r+0x20>
 80120a2:	89ab      	ldrh	r3, [r5, #12]
 80120a4:	0598      	lsls	r0, r3, #22
 80120a6:	d4ed      	bmi.n	8012084 <_vfiprintf_r+0x4c>
 80120a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80120aa:	f7fd fbcf 	bl	800f84c <__retarget_lock_release_recursive>
 80120ae:	e7e9      	b.n	8012084 <_vfiprintf_r+0x4c>
 80120b0:	2300      	movs	r3, #0
 80120b2:	9309      	str	r3, [sp, #36]	; 0x24
 80120b4:	2320      	movs	r3, #32
 80120b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80120ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80120be:	2330      	movs	r3, #48	; 0x30
 80120c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012284 <_vfiprintf_r+0x24c>
 80120c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120c8:	f04f 0901 	mov.w	r9, #1
 80120cc:	4623      	mov	r3, r4
 80120ce:	469a      	mov	sl, r3
 80120d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120d4:	b10a      	cbz	r2, 80120da <_vfiprintf_r+0xa2>
 80120d6:	2a25      	cmp	r2, #37	; 0x25
 80120d8:	d1f9      	bne.n	80120ce <_vfiprintf_r+0x96>
 80120da:	ebba 0b04 	subs.w	fp, sl, r4
 80120de:	d00b      	beq.n	80120f8 <_vfiprintf_r+0xc0>
 80120e0:	465b      	mov	r3, fp
 80120e2:	4622      	mov	r2, r4
 80120e4:	4629      	mov	r1, r5
 80120e6:	4630      	mov	r0, r6
 80120e8:	f7ff ff93 	bl	8012012 <__sfputs_r>
 80120ec:	3001      	adds	r0, #1
 80120ee:	f000 80aa 	beq.w	8012246 <_vfiprintf_r+0x20e>
 80120f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120f4:	445a      	add	r2, fp
 80120f6:	9209      	str	r2, [sp, #36]	; 0x24
 80120f8:	f89a 3000 	ldrb.w	r3, [sl]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	f000 80a2 	beq.w	8012246 <_vfiprintf_r+0x20e>
 8012102:	2300      	movs	r3, #0
 8012104:	f04f 32ff 	mov.w	r2, #4294967295
 8012108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801210c:	f10a 0a01 	add.w	sl, sl, #1
 8012110:	9304      	str	r3, [sp, #16]
 8012112:	9307      	str	r3, [sp, #28]
 8012114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012118:	931a      	str	r3, [sp, #104]	; 0x68
 801211a:	4654      	mov	r4, sl
 801211c:	2205      	movs	r2, #5
 801211e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012122:	4858      	ldr	r0, [pc, #352]	; (8012284 <_vfiprintf_r+0x24c>)
 8012124:	f7ee f8e4 	bl	80002f0 <memchr>
 8012128:	9a04      	ldr	r2, [sp, #16]
 801212a:	b9d8      	cbnz	r0, 8012164 <_vfiprintf_r+0x12c>
 801212c:	06d1      	lsls	r1, r2, #27
 801212e:	bf44      	itt	mi
 8012130:	2320      	movmi	r3, #32
 8012132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012136:	0713      	lsls	r3, r2, #28
 8012138:	bf44      	itt	mi
 801213a:	232b      	movmi	r3, #43	; 0x2b
 801213c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012140:	f89a 3000 	ldrb.w	r3, [sl]
 8012144:	2b2a      	cmp	r3, #42	; 0x2a
 8012146:	d015      	beq.n	8012174 <_vfiprintf_r+0x13c>
 8012148:	9a07      	ldr	r2, [sp, #28]
 801214a:	4654      	mov	r4, sl
 801214c:	2000      	movs	r0, #0
 801214e:	f04f 0c0a 	mov.w	ip, #10
 8012152:	4621      	mov	r1, r4
 8012154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012158:	3b30      	subs	r3, #48	; 0x30
 801215a:	2b09      	cmp	r3, #9
 801215c:	d94e      	bls.n	80121fc <_vfiprintf_r+0x1c4>
 801215e:	b1b0      	cbz	r0, 801218e <_vfiprintf_r+0x156>
 8012160:	9207      	str	r2, [sp, #28]
 8012162:	e014      	b.n	801218e <_vfiprintf_r+0x156>
 8012164:	eba0 0308 	sub.w	r3, r0, r8
 8012168:	fa09 f303 	lsl.w	r3, r9, r3
 801216c:	4313      	orrs	r3, r2
 801216e:	9304      	str	r3, [sp, #16]
 8012170:	46a2      	mov	sl, r4
 8012172:	e7d2      	b.n	801211a <_vfiprintf_r+0xe2>
 8012174:	9b03      	ldr	r3, [sp, #12]
 8012176:	1d19      	adds	r1, r3, #4
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	9103      	str	r1, [sp, #12]
 801217c:	2b00      	cmp	r3, #0
 801217e:	bfbb      	ittet	lt
 8012180:	425b      	neglt	r3, r3
 8012182:	f042 0202 	orrlt.w	r2, r2, #2
 8012186:	9307      	strge	r3, [sp, #28]
 8012188:	9307      	strlt	r3, [sp, #28]
 801218a:	bfb8      	it	lt
 801218c:	9204      	strlt	r2, [sp, #16]
 801218e:	7823      	ldrb	r3, [r4, #0]
 8012190:	2b2e      	cmp	r3, #46	; 0x2e
 8012192:	d10c      	bne.n	80121ae <_vfiprintf_r+0x176>
 8012194:	7863      	ldrb	r3, [r4, #1]
 8012196:	2b2a      	cmp	r3, #42	; 0x2a
 8012198:	d135      	bne.n	8012206 <_vfiprintf_r+0x1ce>
 801219a:	9b03      	ldr	r3, [sp, #12]
 801219c:	1d1a      	adds	r2, r3, #4
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	9203      	str	r2, [sp, #12]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	bfb8      	it	lt
 80121a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80121aa:	3402      	adds	r4, #2
 80121ac:	9305      	str	r3, [sp, #20]
 80121ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012294 <_vfiprintf_r+0x25c>
 80121b2:	7821      	ldrb	r1, [r4, #0]
 80121b4:	2203      	movs	r2, #3
 80121b6:	4650      	mov	r0, sl
 80121b8:	f7ee f89a 	bl	80002f0 <memchr>
 80121bc:	b140      	cbz	r0, 80121d0 <_vfiprintf_r+0x198>
 80121be:	2340      	movs	r3, #64	; 0x40
 80121c0:	eba0 000a 	sub.w	r0, r0, sl
 80121c4:	fa03 f000 	lsl.w	r0, r3, r0
 80121c8:	9b04      	ldr	r3, [sp, #16]
 80121ca:	4303      	orrs	r3, r0
 80121cc:	3401      	adds	r4, #1
 80121ce:	9304      	str	r3, [sp, #16]
 80121d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121d4:	482c      	ldr	r0, [pc, #176]	; (8012288 <_vfiprintf_r+0x250>)
 80121d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121da:	2206      	movs	r2, #6
 80121dc:	f7ee f888 	bl	80002f0 <memchr>
 80121e0:	2800      	cmp	r0, #0
 80121e2:	d03f      	beq.n	8012264 <_vfiprintf_r+0x22c>
 80121e4:	4b29      	ldr	r3, [pc, #164]	; (801228c <_vfiprintf_r+0x254>)
 80121e6:	bb1b      	cbnz	r3, 8012230 <_vfiprintf_r+0x1f8>
 80121e8:	9b03      	ldr	r3, [sp, #12]
 80121ea:	3307      	adds	r3, #7
 80121ec:	f023 0307 	bic.w	r3, r3, #7
 80121f0:	3308      	adds	r3, #8
 80121f2:	9303      	str	r3, [sp, #12]
 80121f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121f6:	443b      	add	r3, r7
 80121f8:	9309      	str	r3, [sp, #36]	; 0x24
 80121fa:	e767      	b.n	80120cc <_vfiprintf_r+0x94>
 80121fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8012200:	460c      	mov	r4, r1
 8012202:	2001      	movs	r0, #1
 8012204:	e7a5      	b.n	8012152 <_vfiprintf_r+0x11a>
 8012206:	2300      	movs	r3, #0
 8012208:	3401      	adds	r4, #1
 801220a:	9305      	str	r3, [sp, #20]
 801220c:	4619      	mov	r1, r3
 801220e:	f04f 0c0a 	mov.w	ip, #10
 8012212:	4620      	mov	r0, r4
 8012214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012218:	3a30      	subs	r2, #48	; 0x30
 801221a:	2a09      	cmp	r2, #9
 801221c:	d903      	bls.n	8012226 <_vfiprintf_r+0x1ee>
 801221e:	2b00      	cmp	r3, #0
 8012220:	d0c5      	beq.n	80121ae <_vfiprintf_r+0x176>
 8012222:	9105      	str	r1, [sp, #20]
 8012224:	e7c3      	b.n	80121ae <_vfiprintf_r+0x176>
 8012226:	fb0c 2101 	mla	r1, ip, r1, r2
 801222a:	4604      	mov	r4, r0
 801222c:	2301      	movs	r3, #1
 801222e:	e7f0      	b.n	8012212 <_vfiprintf_r+0x1da>
 8012230:	ab03      	add	r3, sp, #12
 8012232:	9300      	str	r3, [sp, #0]
 8012234:	462a      	mov	r2, r5
 8012236:	4b16      	ldr	r3, [pc, #88]	; (8012290 <_vfiprintf_r+0x258>)
 8012238:	a904      	add	r1, sp, #16
 801223a:	4630      	mov	r0, r6
 801223c:	f7fd fc44 	bl	800fac8 <_printf_float>
 8012240:	4607      	mov	r7, r0
 8012242:	1c78      	adds	r0, r7, #1
 8012244:	d1d6      	bne.n	80121f4 <_vfiprintf_r+0x1bc>
 8012246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012248:	07d9      	lsls	r1, r3, #31
 801224a:	d405      	bmi.n	8012258 <_vfiprintf_r+0x220>
 801224c:	89ab      	ldrh	r3, [r5, #12]
 801224e:	059a      	lsls	r2, r3, #22
 8012250:	d402      	bmi.n	8012258 <_vfiprintf_r+0x220>
 8012252:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012254:	f7fd fafa 	bl	800f84c <__retarget_lock_release_recursive>
 8012258:	89ab      	ldrh	r3, [r5, #12]
 801225a:	065b      	lsls	r3, r3, #25
 801225c:	f53f af12 	bmi.w	8012084 <_vfiprintf_r+0x4c>
 8012260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012262:	e711      	b.n	8012088 <_vfiprintf_r+0x50>
 8012264:	ab03      	add	r3, sp, #12
 8012266:	9300      	str	r3, [sp, #0]
 8012268:	462a      	mov	r2, r5
 801226a:	4b09      	ldr	r3, [pc, #36]	; (8012290 <_vfiprintf_r+0x258>)
 801226c:	a904      	add	r1, sp, #16
 801226e:	4630      	mov	r0, r6
 8012270:	f7fd feb6 	bl	800ffe0 <_printf_i>
 8012274:	e7e4      	b.n	8012240 <_vfiprintf_r+0x208>
 8012276:	bf00      	nop
 8012278:	08013e64 	.word	0x08013e64
 801227c:	08013e84 	.word	0x08013e84
 8012280:	08013e44 	.word	0x08013e44
 8012284:	080140c4 	.word	0x080140c4
 8012288:	080140ce 	.word	0x080140ce
 801228c:	0800fac9 	.word	0x0800fac9
 8012290:	08012013 	.word	0x08012013
 8012294:	080140ca 	.word	0x080140ca

08012298 <_read_r>:
 8012298:	b538      	push	{r3, r4, r5, lr}
 801229a:	4d07      	ldr	r5, [pc, #28]	; (80122b8 <_read_r+0x20>)
 801229c:	4604      	mov	r4, r0
 801229e:	4608      	mov	r0, r1
 80122a0:	4611      	mov	r1, r2
 80122a2:	2200      	movs	r2, #0
 80122a4:	602a      	str	r2, [r5, #0]
 80122a6:	461a      	mov	r2, r3
 80122a8:	f7f2 fe7d 	bl	8004fa6 <_read>
 80122ac:	1c43      	adds	r3, r0, #1
 80122ae:	d102      	bne.n	80122b6 <_read_r+0x1e>
 80122b0:	682b      	ldr	r3, [r5, #0]
 80122b2:	b103      	cbz	r3, 80122b6 <_read_r+0x1e>
 80122b4:	6023      	str	r3, [r4, #0]
 80122b6:	bd38      	pop	{r3, r4, r5, pc}
 80122b8:	24005408 	.word	0x24005408

080122bc <__assert_func>:
 80122bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80122be:	4614      	mov	r4, r2
 80122c0:	461a      	mov	r2, r3
 80122c2:	4b09      	ldr	r3, [pc, #36]	; (80122e8 <__assert_func+0x2c>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	4605      	mov	r5, r0
 80122c8:	68d8      	ldr	r0, [r3, #12]
 80122ca:	b14c      	cbz	r4, 80122e0 <__assert_func+0x24>
 80122cc:	4b07      	ldr	r3, [pc, #28]	; (80122ec <__assert_func+0x30>)
 80122ce:	9100      	str	r1, [sp, #0]
 80122d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80122d4:	4906      	ldr	r1, [pc, #24]	; (80122f0 <__assert_func+0x34>)
 80122d6:	462b      	mov	r3, r5
 80122d8:	f000 f80e 	bl	80122f8 <fiprintf>
 80122dc:	f000 f8a8 	bl	8012430 <abort>
 80122e0:	4b04      	ldr	r3, [pc, #16]	; (80122f4 <__assert_func+0x38>)
 80122e2:	461c      	mov	r4, r3
 80122e4:	e7f3      	b.n	80122ce <__assert_func+0x12>
 80122e6:	bf00      	nop
 80122e8:	2400001c 	.word	0x2400001c
 80122ec:	080140d5 	.word	0x080140d5
 80122f0:	080140e2 	.word	0x080140e2
 80122f4:	08014110 	.word	0x08014110

080122f8 <fiprintf>:
 80122f8:	b40e      	push	{r1, r2, r3}
 80122fa:	b503      	push	{r0, r1, lr}
 80122fc:	4601      	mov	r1, r0
 80122fe:	ab03      	add	r3, sp, #12
 8012300:	4805      	ldr	r0, [pc, #20]	; (8012318 <fiprintf+0x20>)
 8012302:	f853 2b04 	ldr.w	r2, [r3], #4
 8012306:	6800      	ldr	r0, [r0, #0]
 8012308:	9301      	str	r3, [sp, #4]
 801230a:	f7ff fe95 	bl	8012038 <_vfiprintf_r>
 801230e:	b002      	add	sp, #8
 8012310:	f85d eb04 	ldr.w	lr, [sp], #4
 8012314:	b003      	add	sp, #12
 8012316:	4770      	bx	lr
 8012318:	2400001c 	.word	0x2400001c

0801231c <_fstat_r>:
 801231c:	b538      	push	{r3, r4, r5, lr}
 801231e:	4d07      	ldr	r5, [pc, #28]	; (801233c <_fstat_r+0x20>)
 8012320:	2300      	movs	r3, #0
 8012322:	4604      	mov	r4, r0
 8012324:	4608      	mov	r0, r1
 8012326:	4611      	mov	r1, r2
 8012328:	602b      	str	r3, [r5, #0]
 801232a:	f7f2 fe81 	bl	8005030 <_fstat>
 801232e:	1c43      	adds	r3, r0, #1
 8012330:	d102      	bne.n	8012338 <_fstat_r+0x1c>
 8012332:	682b      	ldr	r3, [r5, #0]
 8012334:	b103      	cbz	r3, 8012338 <_fstat_r+0x1c>
 8012336:	6023      	str	r3, [r4, #0]
 8012338:	bd38      	pop	{r3, r4, r5, pc}
 801233a:	bf00      	nop
 801233c:	24005408 	.word	0x24005408

08012340 <_isatty_r>:
 8012340:	b538      	push	{r3, r4, r5, lr}
 8012342:	4d06      	ldr	r5, [pc, #24]	; (801235c <_isatty_r+0x1c>)
 8012344:	2300      	movs	r3, #0
 8012346:	4604      	mov	r4, r0
 8012348:	4608      	mov	r0, r1
 801234a:	602b      	str	r3, [r5, #0]
 801234c:	f7f2 fe80 	bl	8005050 <_isatty>
 8012350:	1c43      	adds	r3, r0, #1
 8012352:	d102      	bne.n	801235a <_isatty_r+0x1a>
 8012354:	682b      	ldr	r3, [r5, #0]
 8012356:	b103      	cbz	r3, 801235a <_isatty_r+0x1a>
 8012358:	6023      	str	r3, [r4, #0]
 801235a:	bd38      	pop	{r3, r4, r5, pc}
 801235c:	24005408 	.word	0x24005408

08012360 <__ascii_mbtowc>:
 8012360:	b082      	sub	sp, #8
 8012362:	b901      	cbnz	r1, 8012366 <__ascii_mbtowc+0x6>
 8012364:	a901      	add	r1, sp, #4
 8012366:	b142      	cbz	r2, 801237a <__ascii_mbtowc+0x1a>
 8012368:	b14b      	cbz	r3, 801237e <__ascii_mbtowc+0x1e>
 801236a:	7813      	ldrb	r3, [r2, #0]
 801236c:	600b      	str	r3, [r1, #0]
 801236e:	7812      	ldrb	r2, [r2, #0]
 8012370:	1e10      	subs	r0, r2, #0
 8012372:	bf18      	it	ne
 8012374:	2001      	movne	r0, #1
 8012376:	b002      	add	sp, #8
 8012378:	4770      	bx	lr
 801237a:	4610      	mov	r0, r2
 801237c:	e7fb      	b.n	8012376 <__ascii_mbtowc+0x16>
 801237e:	f06f 0001 	mvn.w	r0, #1
 8012382:	e7f8      	b.n	8012376 <__ascii_mbtowc+0x16>

08012384 <memmove>:
 8012384:	4288      	cmp	r0, r1
 8012386:	b510      	push	{r4, lr}
 8012388:	eb01 0402 	add.w	r4, r1, r2
 801238c:	d902      	bls.n	8012394 <memmove+0x10>
 801238e:	4284      	cmp	r4, r0
 8012390:	4623      	mov	r3, r4
 8012392:	d807      	bhi.n	80123a4 <memmove+0x20>
 8012394:	1e43      	subs	r3, r0, #1
 8012396:	42a1      	cmp	r1, r4
 8012398:	d008      	beq.n	80123ac <memmove+0x28>
 801239a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801239e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80123a2:	e7f8      	b.n	8012396 <memmove+0x12>
 80123a4:	4402      	add	r2, r0
 80123a6:	4601      	mov	r1, r0
 80123a8:	428a      	cmp	r2, r1
 80123aa:	d100      	bne.n	80123ae <memmove+0x2a>
 80123ac:	bd10      	pop	{r4, pc}
 80123ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80123b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80123b6:	e7f7      	b.n	80123a8 <memmove+0x24>

080123b8 <_realloc_r>:
 80123b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123bc:	4680      	mov	r8, r0
 80123be:	4614      	mov	r4, r2
 80123c0:	460e      	mov	r6, r1
 80123c2:	b921      	cbnz	r1, 80123ce <_realloc_r+0x16>
 80123c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123c8:	4611      	mov	r1, r2
 80123ca:	f7fd ba77 	b.w	800f8bc <_malloc_r>
 80123ce:	b92a      	cbnz	r2, 80123dc <_realloc_r+0x24>
 80123d0:	f7ff fc60 	bl	8011c94 <_free_r>
 80123d4:	4625      	mov	r5, r4
 80123d6:	4628      	mov	r0, r5
 80123d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123dc:	f000 f82f 	bl	801243e <_malloc_usable_size_r>
 80123e0:	4284      	cmp	r4, r0
 80123e2:	4607      	mov	r7, r0
 80123e4:	d802      	bhi.n	80123ec <_realloc_r+0x34>
 80123e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80123ea:	d812      	bhi.n	8012412 <_realloc_r+0x5a>
 80123ec:	4621      	mov	r1, r4
 80123ee:	4640      	mov	r0, r8
 80123f0:	f7fd fa64 	bl	800f8bc <_malloc_r>
 80123f4:	4605      	mov	r5, r0
 80123f6:	2800      	cmp	r0, #0
 80123f8:	d0ed      	beq.n	80123d6 <_realloc_r+0x1e>
 80123fa:	42bc      	cmp	r4, r7
 80123fc:	4622      	mov	r2, r4
 80123fe:	4631      	mov	r1, r6
 8012400:	bf28      	it	cs
 8012402:	463a      	movcs	r2, r7
 8012404:	f7fd fa23 	bl	800f84e <memcpy>
 8012408:	4631      	mov	r1, r6
 801240a:	4640      	mov	r0, r8
 801240c:	f7ff fc42 	bl	8011c94 <_free_r>
 8012410:	e7e1      	b.n	80123d6 <_realloc_r+0x1e>
 8012412:	4635      	mov	r5, r6
 8012414:	e7df      	b.n	80123d6 <_realloc_r+0x1e>

08012416 <__ascii_wctomb>:
 8012416:	b149      	cbz	r1, 801242c <__ascii_wctomb+0x16>
 8012418:	2aff      	cmp	r2, #255	; 0xff
 801241a:	bf85      	ittet	hi
 801241c:	238a      	movhi	r3, #138	; 0x8a
 801241e:	6003      	strhi	r3, [r0, #0]
 8012420:	700a      	strbls	r2, [r1, #0]
 8012422:	f04f 30ff 	movhi.w	r0, #4294967295
 8012426:	bf98      	it	ls
 8012428:	2001      	movls	r0, #1
 801242a:	4770      	bx	lr
 801242c:	4608      	mov	r0, r1
 801242e:	4770      	bx	lr

08012430 <abort>:
 8012430:	b508      	push	{r3, lr}
 8012432:	2006      	movs	r0, #6
 8012434:	f000 f834 	bl	80124a0 <raise>
 8012438:	2001      	movs	r0, #1
 801243a:	f7f2 fdaa 	bl	8004f92 <_exit>

0801243e <_malloc_usable_size_r>:
 801243e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012442:	1f18      	subs	r0, r3, #4
 8012444:	2b00      	cmp	r3, #0
 8012446:	bfbc      	itt	lt
 8012448:	580b      	ldrlt	r3, [r1, r0]
 801244a:	18c0      	addlt	r0, r0, r3
 801244c:	4770      	bx	lr

0801244e <_raise_r>:
 801244e:	291f      	cmp	r1, #31
 8012450:	b538      	push	{r3, r4, r5, lr}
 8012452:	4604      	mov	r4, r0
 8012454:	460d      	mov	r5, r1
 8012456:	d904      	bls.n	8012462 <_raise_r+0x14>
 8012458:	2316      	movs	r3, #22
 801245a:	6003      	str	r3, [r0, #0]
 801245c:	f04f 30ff 	mov.w	r0, #4294967295
 8012460:	bd38      	pop	{r3, r4, r5, pc}
 8012462:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012464:	b112      	cbz	r2, 801246c <_raise_r+0x1e>
 8012466:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801246a:	b94b      	cbnz	r3, 8012480 <_raise_r+0x32>
 801246c:	4620      	mov	r0, r4
 801246e:	f000 f831 	bl	80124d4 <_getpid_r>
 8012472:	462a      	mov	r2, r5
 8012474:	4601      	mov	r1, r0
 8012476:	4620      	mov	r0, r4
 8012478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801247c:	f000 b818 	b.w	80124b0 <_kill_r>
 8012480:	2b01      	cmp	r3, #1
 8012482:	d00a      	beq.n	801249a <_raise_r+0x4c>
 8012484:	1c59      	adds	r1, r3, #1
 8012486:	d103      	bne.n	8012490 <_raise_r+0x42>
 8012488:	2316      	movs	r3, #22
 801248a:	6003      	str	r3, [r0, #0]
 801248c:	2001      	movs	r0, #1
 801248e:	e7e7      	b.n	8012460 <_raise_r+0x12>
 8012490:	2400      	movs	r4, #0
 8012492:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012496:	4628      	mov	r0, r5
 8012498:	4798      	blx	r3
 801249a:	2000      	movs	r0, #0
 801249c:	e7e0      	b.n	8012460 <_raise_r+0x12>
	...

080124a0 <raise>:
 80124a0:	4b02      	ldr	r3, [pc, #8]	; (80124ac <raise+0xc>)
 80124a2:	4601      	mov	r1, r0
 80124a4:	6818      	ldr	r0, [r3, #0]
 80124a6:	f7ff bfd2 	b.w	801244e <_raise_r>
 80124aa:	bf00      	nop
 80124ac:	2400001c 	.word	0x2400001c

080124b0 <_kill_r>:
 80124b0:	b538      	push	{r3, r4, r5, lr}
 80124b2:	4d07      	ldr	r5, [pc, #28]	; (80124d0 <_kill_r+0x20>)
 80124b4:	2300      	movs	r3, #0
 80124b6:	4604      	mov	r4, r0
 80124b8:	4608      	mov	r0, r1
 80124ba:	4611      	mov	r1, r2
 80124bc:	602b      	str	r3, [r5, #0]
 80124be:	f7f2 fd58 	bl	8004f72 <_kill>
 80124c2:	1c43      	adds	r3, r0, #1
 80124c4:	d102      	bne.n	80124cc <_kill_r+0x1c>
 80124c6:	682b      	ldr	r3, [r5, #0]
 80124c8:	b103      	cbz	r3, 80124cc <_kill_r+0x1c>
 80124ca:	6023      	str	r3, [r4, #0]
 80124cc:	bd38      	pop	{r3, r4, r5, pc}
 80124ce:	bf00      	nop
 80124d0:	24005408 	.word	0x24005408

080124d4 <_getpid_r>:
 80124d4:	f7f2 bd45 	b.w	8004f62 <_getpid>

080124d8 <cos>:
 80124d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80124da:	eeb0 7b40 	vmov.f64	d7, d0
 80124de:	ee17 3a90 	vmov	r3, s15
 80124e2:	4a21      	ldr	r2, [pc, #132]	; (8012568 <cos+0x90>)
 80124e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80124e8:	4293      	cmp	r3, r2
 80124ea:	dc06      	bgt.n	80124fa <cos+0x22>
 80124ec:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8012560 <cos+0x88>
 80124f0:	b005      	add	sp, #20
 80124f2:	f85d eb04 	ldr.w	lr, [sp], #4
 80124f6:	f000 ba93 	b.w	8012a20 <__kernel_cos>
 80124fa:	4a1c      	ldr	r2, [pc, #112]	; (801256c <cos+0x94>)
 80124fc:	4293      	cmp	r3, r2
 80124fe:	dd04      	ble.n	801250a <cos+0x32>
 8012500:	ee30 0b40 	vsub.f64	d0, d0, d0
 8012504:	b005      	add	sp, #20
 8012506:	f85d fb04 	ldr.w	pc, [sp], #4
 801250a:	4668      	mov	r0, sp
 801250c:	f000 f944 	bl	8012798 <__ieee754_rem_pio2>
 8012510:	f000 0003 	and.w	r0, r0, #3
 8012514:	2801      	cmp	r0, #1
 8012516:	d009      	beq.n	801252c <cos+0x54>
 8012518:	2802      	cmp	r0, #2
 801251a:	d010      	beq.n	801253e <cos+0x66>
 801251c:	b9b0      	cbnz	r0, 801254c <cos+0x74>
 801251e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012522:	ed9d 0b00 	vldr	d0, [sp]
 8012526:	f000 fa7b 	bl	8012a20 <__kernel_cos>
 801252a:	e7eb      	b.n	8012504 <cos+0x2c>
 801252c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012530:	ed9d 0b00 	vldr	d0, [sp]
 8012534:	f000 fd78 	bl	8013028 <__kernel_sin>
 8012538:	eeb1 0b40 	vneg.f64	d0, d0
 801253c:	e7e2      	b.n	8012504 <cos+0x2c>
 801253e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012542:	ed9d 0b00 	vldr	d0, [sp]
 8012546:	f000 fa6b 	bl	8012a20 <__kernel_cos>
 801254a:	e7f5      	b.n	8012538 <cos+0x60>
 801254c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012550:	ed9d 0b00 	vldr	d0, [sp]
 8012554:	2001      	movs	r0, #1
 8012556:	f000 fd67 	bl	8013028 <__kernel_sin>
 801255a:	e7d3      	b.n	8012504 <cos+0x2c>
 801255c:	f3af 8000 	nop.w
	...
 8012568:	3fe921fb 	.word	0x3fe921fb
 801256c:	7fefffff 	.word	0x7fefffff

08012570 <sin>:
 8012570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012572:	eeb0 7b40 	vmov.f64	d7, d0
 8012576:	ee17 3a90 	vmov	r3, s15
 801257a:	4a21      	ldr	r2, [pc, #132]	; (8012600 <sin+0x90>)
 801257c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012580:	4293      	cmp	r3, r2
 8012582:	dc07      	bgt.n	8012594 <sin+0x24>
 8012584:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80125f8 <sin+0x88>
 8012588:	2000      	movs	r0, #0
 801258a:	b005      	add	sp, #20
 801258c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012590:	f000 bd4a 	b.w	8013028 <__kernel_sin>
 8012594:	4a1b      	ldr	r2, [pc, #108]	; (8012604 <sin+0x94>)
 8012596:	4293      	cmp	r3, r2
 8012598:	dd04      	ble.n	80125a4 <sin+0x34>
 801259a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801259e:	b005      	add	sp, #20
 80125a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80125a4:	4668      	mov	r0, sp
 80125a6:	f000 f8f7 	bl	8012798 <__ieee754_rem_pio2>
 80125aa:	f000 0003 	and.w	r0, r0, #3
 80125ae:	2801      	cmp	r0, #1
 80125b0:	d00a      	beq.n	80125c8 <sin+0x58>
 80125b2:	2802      	cmp	r0, #2
 80125b4:	d00f      	beq.n	80125d6 <sin+0x66>
 80125b6:	b9c0      	cbnz	r0, 80125ea <sin+0x7a>
 80125b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80125bc:	ed9d 0b00 	vldr	d0, [sp]
 80125c0:	2001      	movs	r0, #1
 80125c2:	f000 fd31 	bl	8013028 <__kernel_sin>
 80125c6:	e7ea      	b.n	801259e <sin+0x2e>
 80125c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80125cc:	ed9d 0b00 	vldr	d0, [sp]
 80125d0:	f000 fa26 	bl	8012a20 <__kernel_cos>
 80125d4:	e7e3      	b.n	801259e <sin+0x2e>
 80125d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80125da:	ed9d 0b00 	vldr	d0, [sp]
 80125de:	2001      	movs	r0, #1
 80125e0:	f000 fd22 	bl	8013028 <__kernel_sin>
 80125e4:	eeb1 0b40 	vneg.f64	d0, d0
 80125e8:	e7d9      	b.n	801259e <sin+0x2e>
 80125ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80125ee:	ed9d 0b00 	vldr	d0, [sp]
 80125f2:	f000 fa15 	bl	8012a20 <__kernel_cos>
 80125f6:	e7f5      	b.n	80125e4 <sin+0x74>
	...
 8012600:	3fe921fb 	.word	0x3fe921fb
 8012604:	7fefffff 	.word	0x7fefffff

08012608 <atan2>:
 8012608:	f000 b802 	b.w	8012610 <__ieee754_atan2>
 801260c:	0000      	movs	r0, r0
	...

08012610 <__ieee754_atan2>:
 8012610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012612:	eeb0 7b40 	vmov.f64	d7, d0
 8012616:	ee11 6a10 	vmov	r6, s2
 801261a:	ee11 0a90 	vmov	r0, s3
 801261e:	4273      	negs	r3, r6
 8012620:	4f59      	ldr	r7, [pc, #356]	; (8012788 <__ieee754_atan2+0x178>)
 8012622:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8012626:	4333      	orrs	r3, r6
 8012628:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801262c:	42bb      	cmp	r3, r7
 801262e:	d80d      	bhi.n	801264c <__ieee754_atan2+0x3c>
 8012630:	ee10 ca10 	vmov	ip, s0
 8012634:	ee17 5a90 	vmov	r5, s15
 8012638:	f1cc 0100 	rsb	r1, ip, #0
 801263c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012640:	ea41 010c 	orr.w	r1, r1, ip
 8012644:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8012648:	42b9      	cmp	r1, r7
 801264a:	d904      	bls.n	8012656 <__ieee754_atan2+0x46>
 801264c:	ee37 7b01 	vadd.f64	d7, d7, d1
 8012650:	eeb0 0b47 	vmov.f64	d0, d7
 8012654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012656:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 801265a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 801265e:	4331      	orrs	r1, r6
 8012660:	d103      	bne.n	801266a <__ieee754_atan2+0x5a>
 8012662:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012666:	f000 bd37 	b.w	80130d8 <atan>
 801266a:	1784      	asrs	r4, r0, #30
 801266c:	f004 0402 	and.w	r4, r4, #2
 8012670:	ea53 010c 	orrs.w	r1, r3, ip
 8012674:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8012678:	d107      	bne.n	801268a <__ieee754_atan2+0x7a>
 801267a:	2c02      	cmp	r4, #2
 801267c:	d05d      	beq.n	801273a <__ieee754_atan2+0x12a>
 801267e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8012750 <__ieee754_atan2+0x140>
 8012682:	2c03      	cmp	r4, #3
 8012684:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8012688:	e7e2      	b.n	8012650 <__ieee754_atan2+0x40>
 801268a:	ea52 0106 	orrs.w	r1, r2, r6
 801268e:	d107      	bne.n	80126a0 <__ieee754_atan2+0x90>
 8012690:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8012758 <__ieee754_atan2+0x148>
 8012694:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8012760 <__ieee754_atan2+0x150>
 8012698:	2d00      	cmp	r5, #0
 801269a:	fe27 7b00 	vselge.f64	d7, d7, d0
 801269e:	e7d7      	b.n	8012650 <__ieee754_atan2+0x40>
 80126a0:	42ba      	cmp	r2, r7
 80126a2:	d10f      	bne.n	80126c4 <__ieee754_atan2+0xb4>
 80126a4:	4293      	cmp	r3, r2
 80126a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80126aa:	d107      	bne.n	80126bc <__ieee754_atan2+0xac>
 80126ac:	2c02      	cmp	r4, #2
 80126ae:	d847      	bhi.n	8012740 <__ieee754_atan2+0x130>
 80126b0:	4b36      	ldr	r3, [pc, #216]	; (801278c <__ieee754_atan2+0x17c>)
 80126b2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80126b6:	ed94 7b00 	vldr	d7, [r4]
 80126ba:	e7c9      	b.n	8012650 <__ieee754_atan2+0x40>
 80126bc:	2c02      	cmp	r4, #2
 80126be:	d842      	bhi.n	8012746 <__ieee754_atan2+0x136>
 80126c0:	4b33      	ldr	r3, [pc, #204]	; (8012790 <__ieee754_atan2+0x180>)
 80126c2:	e7f6      	b.n	80126b2 <__ieee754_atan2+0xa2>
 80126c4:	42bb      	cmp	r3, r7
 80126c6:	d0e3      	beq.n	8012690 <__ieee754_atan2+0x80>
 80126c8:	1a9b      	subs	r3, r3, r2
 80126ca:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80126ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 80126d2:	da1a      	bge.n	801270a <__ieee754_atan2+0xfa>
 80126d4:	2800      	cmp	r0, #0
 80126d6:	da01      	bge.n	80126dc <__ieee754_atan2+0xcc>
 80126d8:	323c      	adds	r2, #60	; 0x3c
 80126da:	db19      	blt.n	8012710 <__ieee754_atan2+0x100>
 80126dc:	ee87 0b01 	vdiv.f64	d0, d7, d1
 80126e0:	f000 fdf4 	bl	80132cc <fabs>
 80126e4:	f000 fcf8 	bl	80130d8 <atan>
 80126e8:	eeb0 7b40 	vmov.f64	d7, d0
 80126ec:	2c01      	cmp	r4, #1
 80126ee:	d012      	beq.n	8012716 <__ieee754_atan2+0x106>
 80126f0:	2c02      	cmp	r4, #2
 80126f2:	d019      	beq.n	8012728 <__ieee754_atan2+0x118>
 80126f4:	2c00      	cmp	r4, #0
 80126f6:	d0ab      	beq.n	8012650 <__ieee754_atan2+0x40>
 80126f8:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8012768 <__ieee754_atan2+0x158>
 80126fc:	ee37 7b40 	vsub.f64	d7, d7, d0
 8012700:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8012770 <__ieee754_atan2+0x160>
 8012704:	ee37 7b40 	vsub.f64	d7, d7, d0
 8012708:	e7a2      	b.n	8012650 <__ieee754_atan2+0x40>
 801270a:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012758 <__ieee754_atan2+0x148>
 801270e:	e7ed      	b.n	80126ec <__ieee754_atan2+0xdc>
 8012710:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8012778 <__ieee754_atan2+0x168>
 8012714:	e7ea      	b.n	80126ec <__ieee754_atan2+0xdc>
 8012716:	ee17 1a90 	vmov	r1, s15
 801271a:	ec53 2b17 	vmov	r2, r3, d7
 801271e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012722:	ec43 2b17 	vmov	d7, r2, r3
 8012726:	e793      	b.n	8012650 <__ieee754_atan2+0x40>
 8012728:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8012768 <__ieee754_atan2+0x158>
 801272c:	ee37 7b40 	vsub.f64	d7, d7, d0
 8012730:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8012770 <__ieee754_atan2+0x160>
 8012734:	ee30 7b47 	vsub.f64	d7, d0, d7
 8012738:	e78a      	b.n	8012650 <__ieee754_atan2+0x40>
 801273a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8012770 <__ieee754_atan2+0x160>
 801273e:	e787      	b.n	8012650 <__ieee754_atan2+0x40>
 8012740:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8012780 <__ieee754_atan2+0x170>
 8012744:	e784      	b.n	8012650 <__ieee754_atan2+0x40>
 8012746:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012778 <__ieee754_atan2+0x168>
 801274a:	e781      	b.n	8012650 <__ieee754_atan2+0x40>
 801274c:	f3af 8000 	nop.w
 8012750:	54442d18 	.word	0x54442d18
 8012754:	c00921fb 	.word	0xc00921fb
 8012758:	54442d18 	.word	0x54442d18
 801275c:	3ff921fb 	.word	0x3ff921fb
 8012760:	54442d18 	.word	0x54442d18
 8012764:	bff921fb 	.word	0xbff921fb
 8012768:	33145c07 	.word	0x33145c07
 801276c:	3ca1a626 	.word	0x3ca1a626
 8012770:	54442d18 	.word	0x54442d18
 8012774:	400921fb 	.word	0x400921fb
	...
 8012780:	54442d18 	.word	0x54442d18
 8012784:	3fe921fb 	.word	0x3fe921fb
 8012788:	7ff00000 	.word	0x7ff00000
 801278c:	08014220 	.word	0x08014220
 8012790:	08014238 	.word	0x08014238
 8012794:	00000000 	.word	0x00000000

08012798 <__ieee754_rem_pio2>:
 8012798:	b570      	push	{r4, r5, r6, lr}
 801279a:	eeb0 7b40 	vmov.f64	d7, d0
 801279e:	ee17 5a90 	vmov	r5, s15
 80127a2:	4b99      	ldr	r3, [pc, #612]	; (8012a08 <__ieee754_rem_pio2+0x270>)
 80127a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80127a8:	429e      	cmp	r6, r3
 80127aa:	b088      	sub	sp, #32
 80127ac:	4604      	mov	r4, r0
 80127ae:	dc07      	bgt.n	80127c0 <__ieee754_rem_pio2+0x28>
 80127b0:	2200      	movs	r2, #0
 80127b2:	2300      	movs	r3, #0
 80127b4:	ed84 0b00 	vstr	d0, [r4]
 80127b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80127bc:	2000      	movs	r0, #0
 80127be:	e01b      	b.n	80127f8 <__ieee754_rem_pio2+0x60>
 80127c0:	4b92      	ldr	r3, [pc, #584]	; (8012a0c <__ieee754_rem_pio2+0x274>)
 80127c2:	429e      	cmp	r6, r3
 80127c4:	dc3b      	bgt.n	801283e <__ieee754_rem_pio2+0xa6>
 80127c6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80127ca:	2d00      	cmp	r5, #0
 80127cc:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80129c8 <__ieee754_rem_pio2+0x230>
 80127d0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80127d4:	dd19      	ble.n	801280a <__ieee754_rem_pio2+0x72>
 80127d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80127da:	429e      	cmp	r6, r3
 80127dc:	d00e      	beq.n	80127fc <__ieee754_rem_pio2+0x64>
 80127de:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80129d0 <__ieee754_rem_pio2+0x238>
 80127e2:	ee37 5b46 	vsub.f64	d5, d7, d6
 80127e6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80127ea:	ed84 5b00 	vstr	d5, [r4]
 80127ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80127f2:	ed84 7b02 	vstr	d7, [r4, #8]
 80127f6:	2001      	movs	r0, #1
 80127f8:	b008      	add	sp, #32
 80127fa:	bd70      	pop	{r4, r5, r6, pc}
 80127fc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80129d8 <__ieee754_rem_pio2+0x240>
 8012800:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012804:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80129e0 <__ieee754_rem_pio2+0x248>
 8012808:	e7eb      	b.n	80127e2 <__ieee754_rem_pio2+0x4a>
 801280a:	429e      	cmp	r6, r3
 801280c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8012810:	d00e      	beq.n	8012830 <__ieee754_rem_pio2+0x98>
 8012812:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80129d0 <__ieee754_rem_pio2+0x238>
 8012816:	ee37 5b06 	vadd.f64	d5, d7, d6
 801281a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801281e:	ed84 5b00 	vstr	d5, [r4]
 8012822:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012826:	f04f 30ff 	mov.w	r0, #4294967295
 801282a:	ed84 7b02 	vstr	d7, [r4, #8]
 801282e:	e7e3      	b.n	80127f8 <__ieee754_rem_pio2+0x60>
 8012830:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80129d8 <__ieee754_rem_pio2+0x240>
 8012834:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012838:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80129e0 <__ieee754_rem_pio2+0x248>
 801283c:	e7eb      	b.n	8012816 <__ieee754_rem_pio2+0x7e>
 801283e:	4b74      	ldr	r3, [pc, #464]	; (8012a10 <__ieee754_rem_pio2+0x278>)
 8012840:	429e      	cmp	r6, r3
 8012842:	dc70      	bgt.n	8012926 <__ieee754_rem_pio2+0x18e>
 8012844:	f000 fd42 	bl	80132cc <fabs>
 8012848:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801284c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80129e8 <__ieee754_rem_pio2+0x250>
 8012850:	eea0 7b06 	vfma.f64	d7, d0, d6
 8012854:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8012858:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801285c:	ee17 0a90 	vmov	r0, s15
 8012860:	eeb1 4b45 	vneg.f64	d4, d5
 8012864:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80129c8 <__ieee754_rem_pio2+0x230>
 8012868:	eea5 0b47 	vfms.f64	d0, d5, d7
 801286c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80129d0 <__ieee754_rem_pio2+0x238>
 8012870:	281f      	cmp	r0, #31
 8012872:	ee25 7b07 	vmul.f64	d7, d5, d7
 8012876:	ee30 6b47 	vsub.f64	d6, d0, d7
 801287a:	dc08      	bgt.n	801288e <__ieee754_rem_pio2+0xf6>
 801287c:	4b65      	ldr	r3, [pc, #404]	; (8012a14 <__ieee754_rem_pio2+0x27c>)
 801287e:	1e42      	subs	r2, r0, #1
 8012880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012884:	42b3      	cmp	r3, r6
 8012886:	d002      	beq.n	801288e <__ieee754_rem_pio2+0xf6>
 8012888:	ed84 6b00 	vstr	d6, [r4]
 801288c:	e026      	b.n	80128dc <__ieee754_rem_pio2+0x144>
 801288e:	ee16 3a90 	vmov	r3, s13
 8012892:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8012896:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801289a:	2b10      	cmp	r3, #16
 801289c:	ea4f 5226 	mov.w	r2, r6, asr #20
 80128a0:	ddf2      	ble.n	8012888 <__ieee754_rem_pio2+0xf0>
 80128a2:	eeb0 6b40 	vmov.f64	d6, d0
 80128a6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80129d8 <__ieee754_rem_pio2+0x240>
 80128aa:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 80129e0 <__ieee754_rem_pio2+0x248>
 80128ae:	eea4 6b07 	vfma.f64	d6, d4, d7
 80128b2:	ee30 0b46 	vsub.f64	d0, d0, d6
 80128b6:	eea4 0b07 	vfma.f64	d0, d4, d7
 80128ba:	eeb0 7b40 	vmov.f64	d7, d0
 80128be:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80128c2:	ee36 3b47 	vsub.f64	d3, d6, d7
 80128c6:	ee13 3a90 	vmov	r3, s7
 80128ca:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80128ce:	1ad3      	subs	r3, r2, r3
 80128d0:	2b31      	cmp	r3, #49	; 0x31
 80128d2:	dc17      	bgt.n	8012904 <__ieee754_rem_pio2+0x16c>
 80128d4:	eeb0 0b46 	vmov.f64	d0, d6
 80128d8:	ed84 3b00 	vstr	d3, [r4]
 80128dc:	ed94 6b00 	vldr	d6, [r4]
 80128e0:	2d00      	cmp	r5, #0
 80128e2:	ee30 0b46 	vsub.f64	d0, d0, d6
 80128e6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80128ea:	ed84 0b02 	vstr	d0, [r4, #8]
 80128ee:	da83      	bge.n	80127f8 <__ieee754_rem_pio2+0x60>
 80128f0:	eeb1 6b46 	vneg.f64	d6, d6
 80128f4:	eeb1 0b40 	vneg.f64	d0, d0
 80128f8:	ed84 6b00 	vstr	d6, [r4]
 80128fc:	ed84 0b02 	vstr	d0, [r4, #8]
 8012900:	4240      	negs	r0, r0
 8012902:	e779      	b.n	80127f8 <__ieee754_rem_pio2+0x60>
 8012904:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 80129f0 <__ieee754_rem_pio2+0x258>
 8012908:	eeb0 0b46 	vmov.f64	d0, d6
 801290c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8012910:	ee36 7b40 	vsub.f64	d7, d6, d0
 8012914:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80129f8 <__ieee754_rem_pio2+0x260>
 8012918:	eea4 7b03 	vfma.f64	d7, d4, d3
 801291c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8012920:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012924:	e7b0      	b.n	8012888 <__ieee754_rem_pio2+0xf0>
 8012926:	4b3c      	ldr	r3, [pc, #240]	; (8012a18 <__ieee754_rem_pio2+0x280>)
 8012928:	429e      	cmp	r6, r3
 801292a:	dd06      	ble.n	801293a <__ieee754_rem_pio2+0x1a2>
 801292c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8012930:	ed80 7b02 	vstr	d7, [r0, #8]
 8012934:	ed80 7b00 	vstr	d7, [r0]
 8012938:	e740      	b.n	80127bc <__ieee754_rem_pio2+0x24>
 801293a:	1532      	asrs	r2, r6, #20
 801293c:	ee10 0a10 	vmov	r0, s0
 8012940:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8012944:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8012948:	ec41 0b17 	vmov	d7, r0, r1
 801294c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8012950:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8012a00 <__ieee754_rem_pio2+0x268>
 8012954:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8012958:	ee37 7b46 	vsub.f64	d7, d7, d6
 801295c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012960:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012964:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8012968:	a902      	add	r1, sp, #8
 801296a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801296e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012972:	ed8d 6b04 	vstr	d6, [sp, #16]
 8012976:	ee27 7b05 	vmul.f64	d7, d7, d5
 801297a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801297e:	2603      	movs	r6, #3
 8012980:	4608      	mov	r0, r1
 8012982:	ed91 7b04 	vldr	d7, [r1, #16]
 8012986:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801298a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801298e:	4633      	mov	r3, r6
 8012990:	f1a1 0108 	sub.w	r1, r1, #8
 8012994:	f106 36ff 	add.w	r6, r6, #4294967295
 8012998:	d0f3      	beq.n	8012982 <__ieee754_rem_pio2+0x1ea>
 801299a:	4920      	ldr	r1, [pc, #128]	; (8012a1c <__ieee754_rem_pio2+0x284>)
 801299c:	9101      	str	r1, [sp, #4]
 801299e:	2102      	movs	r1, #2
 80129a0:	9100      	str	r1, [sp, #0]
 80129a2:	4621      	mov	r1, r4
 80129a4:	f000 f8a8 	bl	8012af8 <__kernel_rem_pio2>
 80129a8:	2d00      	cmp	r5, #0
 80129aa:	f6bf af25 	bge.w	80127f8 <__ieee754_rem_pio2+0x60>
 80129ae:	ed94 7b00 	vldr	d7, [r4]
 80129b2:	eeb1 7b47 	vneg.f64	d7, d7
 80129b6:	ed84 7b00 	vstr	d7, [r4]
 80129ba:	ed94 7b02 	vldr	d7, [r4, #8]
 80129be:	eeb1 7b47 	vneg.f64	d7, d7
 80129c2:	ed84 7b02 	vstr	d7, [r4, #8]
 80129c6:	e79b      	b.n	8012900 <__ieee754_rem_pio2+0x168>
 80129c8:	54400000 	.word	0x54400000
 80129cc:	3ff921fb 	.word	0x3ff921fb
 80129d0:	1a626331 	.word	0x1a626331
 80129d4:	3dd0b461 	.word	0x3dd0b461
 80129d8:	1a600000 	.word	0x1a600000
 80129dc:	3dd0b461 	.word	0x3dd0b461
 80129e0:	2e037073 	.word	0x2e037073
 80129e4:	3ba3198a 	.word	0x3ba3198a
 80129e8:	6dc9c883 	.word	0x6dc9c883
 80129ec:	3fe45f30 	.word	0x3fe45f30
 80129f0:	2e000000 	.word	0x2e000000
 80129f4:	3ba3198a 	.word	0x3ba3198a
 80129f8:	252049c1 	.word	0x252049c1
 80129fc:	397b839a 	.word	0x397b839a
 8012a00:	00000000 	.word	0x00000000
 8012a04:	41700000 	.word	0x41700000
 8012a08:	3fe921fb 	.word	0x3fe921fb
 8012a0c:	4002d97b 	.word	0x4002d97b
 8012a10:	413921fb 	.word	0x413921fb
 8012a14:	08014250 	.word	0x08014250
 8012a18:	7fefffff 	.word	0x7fefffff
 8012a1c:	080142d0 	.word	0x080142d0

08012a20 <__kernel_cos>:
 8012a20:	ee10 1a90 	vmov	r1, s1
 8012a24:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8012a28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012a2c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8012a30:	da05      	bge.n	8012a3e <__kernel_cos+0x1e>
 8012a32:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8012a36:	ee17 3a90 	vmov	r3, s15
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d03d      	beq.n	8012aba <__kernel_cos+0x9a>
 8012a3e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8012a42:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8012ac0 <__kernel_cos+0xa0>
 8012a46:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8012ac8 <__kernel_cos+0xa8>
 8012a4a:	eea3 6b07 	vfma.f64	d6, d3, d7
 8012a4e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012ad0 <__kernel_cos+0xb0>
 8012a52:	eea6 7b03 	vfma.f64	d7, d6, d3
 8012a56:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8012ad8 <__kernel_cos+0xb8>
 8012a5a:	eea7 6b03 	vfma.f64	d6, d7, d3
 8012a5e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012ae0 <__kernel_cos+0xc0>
 8012a62:	4b23      	ldr	r3, [pc, #140]	; (8012af0 <__kernel_cos+0xd0>)
 8012a64:	eea6 7b03 	vfma.f64	d7, d6, d3
 8012a68:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8012ae8 <__kernel_cos+0xc8>
 8012a6c:	4299      	cmp	r1, r3
 8012a6e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8012a72:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8012a76:	ee26 5b03 	vmul.f64	d5, d6, d3
 8012a7a:	ee23 7b07 	vmul.f64	d7, d3, d7
 8012a7e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8012a82:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012a86:	dc04      	bgt.n	8012a92 <__kernel_cos+0x72>
 8012a88:	ee37 6b46 	vsub.f64	d6, d7, d6
 8012a8c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8012a90:	4770      	bx	lr
 8012a92:	4b18      	ldr	r3, [pc, #96]	; (8012af4 <__kernel_cos+0xd4>)
 8012a94:	4299      	cmp	r1, r3
 8012a96:	dc0d      	bgt.n	8012ab4 <__kernel_cos+0x94>
 8012a98:	2200      	movs	r2, #0
 8012a9a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8012a9e:	ec43 2b15 	vmov	d5, r2, r3
 8012aa2:	ee34 0b45 	vsub.f64	d0, d4, d5
 8012aa6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8012aaa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012aae:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012ab2:	4770      	bx	lr
 8012ab4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8012ab8:	e7f3      	b.n	8012aa2 <__kernel_cos+0x82>
 8012aba:	eeb0 0b44 	vmov.f64	d0, d4
 8012abe:	4770      	bx	lr
 8012ac0:	be8838d4 	.word	0xbe8838d4
 8012ac4:	bda8fae9 	.word	0xbda8fae9
 8012ac8:	bdb4b1c4 	.word	0xbdb4b1c4
 8012acc:	3e21ee9e 	.word	0x3e21ee9e
 8012ad0:	809c52ad 	.word	0x809c52ad
 8012ad4:	be927e4f 	.word	0xbe927e4f
 8012ad8:	19cb1590 	.word	0x19cb1590
 8012adc:	3efa01a0 	.word	0x3efa01a0
 8012ae0:	16c15177 	.word	0x16c15177
 8012ae4:	bf56c16c 	.word	0xbf56c16c
 8012ae8:	5555554c 	.word	0x5555554c
 8012aec:	3fa55555 	.word	0x3fa55555
 8012af0:	3fd33332 	.word	0x3fd33332
 8012af4:	3fe90000 	.word	0x3fe90000

08012af8 <__kernel_rem_pio2>:
 8012af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012afc:	ed2d 8b06 	vpush	{d8-d10}
 8012b00:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8012b04:	460f      	mov	r7, r1
 8012b06:	9002      	str	r0, [sp, #8]
 8012b08:	49c5      	ldr	r1, [pc, #788]	; (8012e20 <__kernel_rem_pio2+0x328>)
 8012b0a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8012b0c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8012b10:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8012b14:	9301      	str	r3, [sp, #4]
 8012b16:	f112 0f14 	cmn.w	r2, #20
 8012b1a:	bfa8      	it	ge
 8012b1c:	2018      	movge	r0, #24
 8012b1e:	f103 31ff 	add.w	r1, r3, #4294967295
 8012b22:	bfb8      	it	lt
 8012b24:	2000      	movlt	r0, #0
 8012b26:	f06f 0417 	mvn.w	r4, #23
 8012b2a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8012e08 <__kernel_rem_pio2+0x310>
 8012b2e:	bfa4      	itt	ge
 8012b30:	f1a2 0a03 	subge.w	sl, r2, #3
 8012b34:	fb9a f0f0 	sdivge	r0, sl, r0
 8012b38:	fb00 4404 	mla	r4, r0, r4, r4
 8012b3c:	1a46      	subs	r6, r0, r1
 8012b3e:	4414      	add	r4, r2
 8012b40:	eb09 0c01 	add.w	ip, r9, r1
 8012b44:	ad1a      	add	r5, sp, #104	; 0x68
 8012b46:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	4562      	cmp	r2, ip
 8012b4e:	dd10      	ble.n	8012b72 <__kernel_rem_pio2+0x7a>
 8012b50:	9a01      	ldr	r2, [sp, #4]
 8012b52:	ab1a      	add	r3, sp, #104	; 0x68
 8012b54:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8012b58:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8012b5c:	f04f 0c00 	mov.w	ip, #0
 8012b60:	45cc      	cmp	ip, r9
 8012b62:	dc26      	bgt.n	8012bb2 <__kernel_rem_pio2+0xba>
 8012b64:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8012e08 <__kernel_rem_pio2+0x310>
 8012b68:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8012b6c:	4616      	mov	r6, r2
 8012b6e:	2500      	movs	r5, #0
 8012b70:	e015      	b.n	8012b9e <__kernel_rem_pio2+0xa6>
 8012b72:	42d6      	cmn	r6, r2
 8012b74:	d409      	bmi.n	8012b8a <__kernel_rem_pio2+0x92>
 8012b76:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8012b7a:	ee07 3a90 	vmov	s15, r3
 8012b7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012b82:	eca5 7b02 	vstmia	r5!, {d7}
 8012b86:	3201      	adds	r2, #1
 8012b88:	e7e0      	b.n	8012b4c <__kernel_rem_pio2+0x54>
 8012b8a:	eeb0 7b46 	vmov.f64	d7, d6
 8012b8e:	e7f8      	b.n	8012b82 <__kernel_rem_pio2+0x8a>
 8012b90:	ecb8 5b02 	vldmia	r8!, {d5}
 8012b94:	ed96 6b00 	vldr	d6, [r6]
 8012b98:	3501      	adds	r5, #1
 8012b9a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012b9e:	428d      	cmp	r5, r1
 8012ba0:	f1a6 0608 	sub.w	r6, r6, #8
 8012ba4:	ddf4      	ble.n	8012b90 <__kernel_rem_pio2+0x98>
 8012ba6:	ecaa 7b02 	vstmia	sl!, {d7}
 8012baa:	f10c 0c01 	add.w	ip, ip, #1
 8012bae:	3208      	adds	r2, #8
 8012bb0:	e7d6      	b.n	8012b60 <__kernel_rem_pio2+0x68>
 8012bb2:	ab06      	add	r3, sp, #24
 8012bb4:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8012e10 <__kernel_rem_pio2+0x318>
 8012bb8:	ed9f ab97 	vldr	d10, [pc, #604]	; 8012e18 <__kernel_rem_pio2+0x320>
 8012bbc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8012bc0:	9303      	str	r3, [sp, #12]
 8012bc2:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8012bc6:	464d      	mov	r5, r9
 8012bc8:	00eb      	lsls	r3, r5, #3
 8012bca:	9304      	str	r3, [sp, #16]
 8012bcc:	ab92      	add	r3, sp, #584	; 0x248
 8012bce:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8012bd2:	f10d 0b18 	add.w	fp, sp, #24
 8012bd6:	ab6a      	add	r3, sp, #424	; 0x1a8
 8012bd8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8012bdc:	465e      	mov	r6, fp
 8012bde:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8012be2:	4628      	mov	r0, r5
 8012be4:	2800      	cmp	r0, #0
 8012be6:	f1a2 0208 	sub.w	r2, r2, #8
 8012bea:	dc4c      	bgt.n	8012c86 <__kernel_rem_pio2+0x18e>
 8012bec:	4620      	mov	r0, r4
 8012bee:	9105      	str	r1, [sp, #20]
 8012bf0:	f000 fbea 	bl	80133c8 <scalbn>
 8012bf4:	eeb0 8b40 	vmov.f64	d8, d0
 8012bf8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8012bfc:	ee28 0b00 	vmul.f64	d0, d8, d0
 8012c00:	f000 fb6e 	bl	80132e0 <floor>
 8012c04:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8012c08:	eea0 8b47 	vfms.f64	d8, d0, d7
 8012c0c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8012c10:	2c00      	cmp	r4, #0
 8012c12:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8012c16:	ee17 8a90 	vmov	r8, s15
 8012c1a:	ee38 8b40 	vsub.f64	d8, d8, d0
 8012c1e:	9905      	ldr	r1, [sp, #20]
 8012c20:	dd43      	ble.n	8012caa <__kernel_rem_pio2+0x1b2>
 8012c22:	1e68      	subs	r0, r5, #1
 8012c24:	ab06      	add	r3, sp, #24
 8012c26:	f1c4 0c18 	rsb	ip, r4, #24
 8012c2a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8012c2e:	fa46 f20c 	asr.w	r2, r6, ip
 8012c32:	4490      	add	r8, r2
 8012c34:	fa02 f20c 	lsl.w	r2, r2, ip
 8012c38:	1ab6      	subs	r6, r6, r2
 8012c3a:	f1c4 0217 	rsb	r2, r4, #23
 8012c3e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8012c42:	4116      	asrs	r6, r2
 8012c44:	2e00      	cmp	r6, #0
 8012c46:	dd3f      	ble.n	8012cc8 <__kernel_rem_pio2+0x1d0>
 8012c48:	f04f 0c00 	mov.w	ip, #0
 8012c4c:	f108 0801 	add.w	r8, r8, #1
 8012c50:	4660      	mov	r0, ip
 8012c52:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8012c56:	4565      	cmp	r5, ip
 8012c58:	dc6e      	bgt.n	8012d38 <__kernel_rem_pio2+0x240>
 8012c5a:	2c00      	cmp	r4, #0
 8012c5c:	dd04      	ble.n	8012c68 <__kernel_rem_pio2+0x170>
 8012c5e:	2c01      	cmp	r4, #1
 8012c60:	d07f      	beq.n	8012d62 <__kernel_rem_pio2+0x26a>
 8012c62:	2c02      	cmp	r4, #2
 8012c64:	f000 8087 	beq.w	8012d76 <__kernel_rem_pio2+0x27e>
 8012c68:	2e02      	cmp	r6, #2
 8012c6a:	d12d      	bne.n	8012cc8 <__kernel_rem_pio2+0x1d0>
 8012c6c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8012c70:	ee30 8b48 	vsub.f64	d8, d0, d8
 8012c74:	b340      	cbz	r0, 8012cc8 <__kernel_rem_pio2+0x1d0>
 8012c76:	4620      	mov	r0, r4
 8012c78:	9105      	str	r1, [sp, #20]
 8012c7a:	f000 fba5 	bl	80133c8 <scalbn>
 8012c7e:	9905      	ldr	r1, [sp, #20]
 8012c80:	ee38 8b40 	vsub.f64	d8, d8, d0
 8012c84:	e020      	b.n	8012cc8 <__kernel_rem_pio2+0x1d0>
 8012c86:	ee20 7b09 	vmul.f64	d7, d0, d9
 8012c8a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8012c8e:	3801      	subs	r0, #1
 8012c90:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8012c94:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8012c98:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012c9c:	eca6 0a01 	vstmia	r6!, {s0}
 8012ca0:	ed92 0b00 	vldr	d0, [r2]
 8012ca4:	ee37 0b00 	vadd.f64	d0, d7, d0
 8012ca8:	e79c      	b.n	8012be4 <__kernel_rem_pio2+0xec>
 8012caa:	d105      	bne.n	8012cb8 <__kernel_rem_pio2+0x1c0>
 8012cac:	1e6a      	subs	r2, r5, #1
 8012cae:	ab06      	add	r3, sp, #24
 8012cb0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8012cb4:	15f6      	asrs	r6, r6, #23
 8012cb6:	e7c5      	b.n	8012c44 <__kernel_rem_pio2+0x14c>
 8012cb8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8012cbc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cc4:	da36      	bge.n	8012d34 <__kernel_rem_pio2+0x23c>
 8012cc6:	2600      	movs	r6, #0
 8012cc8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cd0:	f040 80aa 	bne.w	8012e28 <__kernel_rem_pio2+0x330>
 8012cd4:	f105 3bff 	add.w	fp, r5, #4294967295
 8012cd8:	4658      	mov	r0, fp
 8012cda:	2200      	movs	r2, #0
 8012cdc:	4548      	cmp	r0, r9
 8012cde:	da52      	bge.n	8012d86 <__kernel_rem_pio2+0x28e>
 8012ce0:	2a00      	cmp	r2, #0
 8012ce2:	f000 8081 	beq.w	8012de8 <__kernel_rem_pio2+0x2f0>
 8012ce6:	ab06      	add	r3, sp, #24
 8012ce8:	3c18      	subs	r4, #24
 8012cea:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	f000 8087 	beq.w	8012e02 <__kernel_rem_pio2+0x30a>
 8012cf4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	f000 fb65 	bl	80133c8 <scalbn>
 8012cfe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012d02:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8012e10 <__kernel_rem_pio2+0x318>
 8012d06:	a96a      	add	r1, sp, #424	; 0x1a8
 8012d08:	f103 0208 	add.w	r2, r3, #8
 8012d0c:	1888      	adds	r0, r1, r2
 8012d0e:	4659      	mov	r1, fp
 8012d10:	2900      	cmp	r1, #0
 8012d12:	f280 80b7 	bge.w	8012e84 <__kernel_rem_pio2+0x38c>
 8012d16:	4659      	mov	r1, fp
 8012d18:	2900      	cmp	r1, #0
 8012d1a:	f2c0 80d5 	blt.w	8012ec8 <__kernel_rem_pio2+0x3d0>
 8012d1e:	a86a      	add	r0, sp, #424	; 0x1a8
 8012d20:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8012d24:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8012e08 <__kernel_rem_pio2+0x310>
 8012d28:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8012e24 <__kernel_rem_pio2+0x32c>
 8012d2c:	2400      	movs	r4, #0
 8012d2e:	ebab 0001 	sub.w	r0, fp, r1
 8012d32:	e0be      	b.n	8012eb2 <__kernel_rem_pio2+0x3ba>
 8012d34:	2602      	movs	r6, #2
 8012d36:	e787      	b.n	8012c48 <__kernel_rem_pio2+0x150>
 8012d38:	f8db 2000 	ldr.w	r2, [fp]
 8012d3c:	b958      	cbnz	r0, 8012d56 <__kernel_rem_pio2+0x25e>
 8012d3e:	b122      	cbz	r2, 8012d4a <__kernel_rem_pio2+0x252>
 8012d40:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8012d44:	f8cb 2000 	str.w	r2, [fp]
 8012d48:	2201      	movs	r2, #1
 8012d4a:	f10c 0c01 	add.w	ip, ip, #1
 8012d4e:	f10b 0b04 	add.w	fp, fp, #4
 8012d52:	4610      	mov	r0, r2
 8012d54:	e77f      	b.n	8012c56 <__kernel_rem_pio2+0x15e>
 8012d56:	ebae 0202 	sub.w	r2, lr, r2
 8012d5a:	f8cb 2000 	str.w	r2, [fp]
 8012d5e:	4602      	mov	r2, r0
 8012d60:	e7f3      	b.n	8012d4a <__kernel_rem_pio2+0x252>
 8012d62:	f105 3cff 	add.w	ip, r5, #4294967295
 8012d66:	ab06      	add	r3, sp, #24
 8012d68:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8012d6c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8012d70:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8012d74:	e778      	b.n	8012c68 <__kernel_rem_pio2+0x170>
 8012d76:	f105 3cff 	add.w	ip, r5, #4294967295
 8012d7a:	ab06      	add	r3, sp, #24
 8012d7c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8012d80:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8012d84:	e7f4      	b.n	8012d70 <__kernel_rem_pio2+0x278>
 8012d86:	ab06      	add	r3, sp, #24
 8012d88:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012d8c:	3801      	subs	r0, #1
 8012d8e:	431a      	orrs	r2, r3
 8012d90:	e7a4      	b.n	8012cdc <__kernel_rem_pio2+0x1e4>
 8012d92:	f10c 0c01 	add.w	ip, ip, #1
 8012d96:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8012d9a:	2800      	cmp	r0, #0
 8012d9c:	d0f9      	beq.n	8012d92 <__kernel_rem_pio2+0x29a>
 8012d9e:	9b04      	ldr	r3, [sp, #16]
 8012da0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8012da4:	eb0d 0203 	add.w	r2, sp, r3
 8012da8:	9b01      	ldr	r3, [sp, #4]
 8012daa:	18e8      	adds	r0, r5, r3
 8012dac:	ab1a      	add	r3, sp, #104	; 0x68
 8012dae:	1c6e      	adds	r6, r5, #1
 8012db0:	3a98      	subs	r2, #152	; 0x98
 8012db2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8012db6:	4465      	add	r5, ip
 8012db8:	42b5      	cmp	r5, r6
 8012dba:	f6ff af05 	blt.w	8012bc8 <__kernel_rem_pio2+0xd0>
 8012dbe:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8012dc2:	f8dd e008 	ldr.w	lr, [sp, #8]
 8012dc6:	ee07 3a90 	vmov	s15, r3
 8012dca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012dce:	f04f 0c00 	mov.w	ip, #0
 8012dd2:	eca0 7b02 	vstmia	r0!, {d7}
 8012dd6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012e08 <__kernel_rem_pio2+0x310>
 8012dda:	4680      	mov	r8, r0
 8012ddc:	458c      	cmp	ip, r1
 8012dde:	dd07      	ble.n	8012df0 <__kernel_rem_pio2+0x2f8>
 8012de0:	eca2 7b02 	vstmia	r2!, {d7}
 8012de4:	3601      	adds	r6, #1
 8012de6:	e7e7      	b.n	8012db8 <__kernel_rem_pio2+0x2c0>
 8012de8:	9a03      	ldr	r2, [sp, #12]
 8012dea:	f04f 0c01 	mov.w	ip, #1
 8012dee:	e7d2      	b.n	8012d96 <__kernel_rem_pio2+0x29e>
 8012df0:	ecbe 5b02 	vldmia	lr!, {d5}
 8012df4:	ed38 6b02 	vldmdb	r8!, {d6}
 8012df8:	f10c 0c01 	add.w	ip, ip, #1
 8012dfc:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012e00:	e7ec      	b.n	8012ddc <__kernel_rem_pio2+0x2e4>
 8012e02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012e06:	e76e      	b.n	8012ce6 <__kernel_rem_pio2+0x1ee>
	...
 8012e14:	3e700000 	.word	0x3e700000
 8012e18:	00000000 	.word	0x00000000
 8012e1c:	41700000 	.word	0x41700000
 8012e20:	08014418 	.word	0x08014418
 8012e24:	080143d8 	.word	0x080143d8
 8012e28:	4260      	negs	r0, r4
 8012e2a:	eeb0 0b48 	vmov.f64	d0, d8
 8012e2e:	f000 facb 	bl	80133c8 <scalbn>
 8012e32:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8013010 <__kernel_rem_pio2+0x518>
 8012e36:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8012e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e3e:	db18      	blt.n	8012e72 <__kernel_rem_pio2+0x37a>
 8012e40:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8013018 <__kernel_rem_pio2+0x520>
 8012e44:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012e48:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8012e4c:	aa06      	add	r2, sp, #24
 8012e4e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8012e52:	eea5 0b46 	vfms.f64	d0, d5, d6
 8012e56:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012e5a:	f105 0b01 	add.w	fp, r5, #1
 8012e5e:	ee10 3a10 	vmov	r3, s0
 8012e62:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8012e66:	ee17 3a10 	vmov	r3, s14
 8012e6a:	3418      	adds	r4, #24
 8012e6c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8012e70:	e740      	b.n	8012cf4 <__kernel_rem_pio2+0x1fc>
 8012e72:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012e76:	aa06      	add	r2, sp, #24
 8012e78:	ee10 3a10 	vmov	r3, s0
 8012e7c:	46ab      	mov	fp, r5
 8012e7e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8012e82:	e737      	b.n	8012cf4 <__kernel_rem_pio2+0x1fc>
 8012e84:	ac06      	add	r4, sp, #24
 8012e86:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8012e8a:	9401      	str	r4, [sp, #4]
 8012e8c:	ee07 4a90 	vmov	s15, r4
 8012e90:	3901      	subs	r1, #1
 8012e92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012e96:	ee27 7b00 	vmul.f64	d7, d7, d0
 8012e9a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8012e9e:	ed20 7b02 	vstmdb	r0!, {d7}
 8012ea2:	e735      	b.n	8012d10 <__kernel_rem_pio2+0x218>
 8012ea4:	ecbc 5b02 	vldmia	ip!, {d5}
 8012ea8:	ecb5 6b02 	vldmia	r5!, {d6}
 8012eac:	3401      	adds	r4, #1
 8012eae:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012eb2:	454c      	cmp	r4, r9
 8012eb4:	dc01      	bgt.n	8012eba <__kernel_rem_pio2+0x3c2>
 8012eb6:	4284      	cmp	r4, r0
 8012eb8:	ddf4      	ble.n	8012ea4 <__kernel_rem_pio2+0x3ac>
 8012eba:	ac42      	add	r4, sp, #264	; 0x108
 8012ebc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8012ec0:	ed80 7b00 	vstr	d7, [r0]
 8012ec4:	3901      	subs	r1, #1
 8012ec6:	e727      	b.n	8012d18 <__kernel_rem_pio2+0x220>
 8012ec8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8012eca:	2902      	cmp	r1, #2
 8012ecc:	dc0a      	bgt.n	8012ee4 <__kernel_rem_pio2+0x3ec>
 8012ece:	2900      	cmp	r1, #0
 8012ed0:	dc2c      	bgt.n	8012f2c <__kernel_rem_pio2+0x434>
 8012ed2:	d045      	beq.n	8012f60 <__kernel_rem_pio2+0x468>
 8012ed4:	f008 0007 	and.w	r0, r8, #7
 8012ed8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8012edc:	ecbd 8b06 	vpop	{d8-d10}
 8012ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ee4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8012ee6:	2a03      	cmp	r2, #3
 8012ee8:	d1f4      	bne.n	8012ed4 <__kernel_rem_pio2+0x3dc>
 8012eea:	aa42      	add	r2, sp, #264	; 0x108
 8012eec:	4413      	add	r3, r2
 8012eee:	461a      	mov	r2, r3
 8012ef0:	4619      	mov	r1, r3
 8012ef2:	4658      	mov	r0, fp
 8012ef4:	2800      	cmp	r0, #0
 8012ef6:	f1a1 0108 	sub.w	r1, r1, #8
 8012efa:	dc54      	bgt.n	8012fa6 <__kernel_rem_pio2+0x4ae>
 8012efc:	4659      	mov	r1, fp
 8012efe:	2901      	cmp	r1, #1
 8012f00:	f1a2 0208 	sub.w	r2, r2, #8
 8012f04:	dc5f      	bgt.n	8012fc6 <__kernel_rem_pio2+0x4ce>
 8012f06:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8013020 <__kernel_rem_pio2+0x528>
 8012f0a:	3308      	adds	r3, #8
 8012f0c:	f1bb 0f01 	cmp.w	fp, #1
 8012f10:	dc69      	bgt.n	8012fe6 <__kernel_rem_pio2+0x4ee>
 8012f12:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8012f16:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8012f1a:	2e00      	cmp	r6, #0
 8012f1c:	d16a      	bne.n	8012ff4 <__kernel_rem_pio2+0x4fc>
 8012f1e:	ed87 5b00 	vstr	d5, [r7]
 8012f22:	ed87 6b02 	vstr	d6, [r7, #8]
 8012f26:	ed87 7b04 	vstr	d7, [r7, #16]
 8012f2a:	e7d3      	b.n	8012ed4 <__kernel_rem_pio2+0x3dc>
 8012f2c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8013020 <__kernel_rem_pio2+0x528>
 8012f30:	ab42      	add	r3, sp, #264	; 0x108
 8012f32:	441a      	add	r2, r3
 8012f34:	465b      	mov	r3, fp
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	da26      	bge.n	8012f88 <__kernel_rem_pio2+0x490>
 8012f3a:	b35e      	cbz	r6, 8012f94 <__kernel_rem_pio2+0x49c>
 8012f3c:	eeb1 7b46 	vneg.f64	d7, d6
 8012f40:	ed87 7b00 	vstr	d7, [r7]
 8012f44:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8012f48:	aa44      	add	r2, sp, #272	; 0x110
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012f50:	459b      	cmp	fp, r3
 8012f52:	da22      	bge.n	8012f9a <__kernel_rem_pio2+0x4a2>
 8012f54:	b10e      	cbz	r6, 8012f5a <__kernel_rem_pio2+0x462>
 8012f56:	eeb1 7b47 	vneg.f64	d7, d7
 8012f5a:	ed87 7b02 	vstr	d7, [r7, #8]
 8012f5e:	e7b9      	b.n	8012ed4 <__kernel_rem_pio2+0x3dc>
 8012f60:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8013020 <__kernel_rem_pio2+0x528>
 8012f64:	ab42      	add	r3, sp, #264	; 0x108
 8012f66:	441a      	add	r2, r3
 8012f68:	f1bb 0f00 	cmp.w	fp, #0
 8012f6c:	da05      	bge.n	8012f7a <__kernel_rem_pio2+0x482>
 8012f6e:	b10e      	cbz	r6, 8012f74 <__kernel_rem_pio2+0x47c>
 8012f70:	eeb1 7b47 	vneg.f64	d7, d7
 8012f74:	ed87 7b00 	vstr	d7, [r7]
 8012f78:	e7ac      	b.n	8012ed4 <__kernel_rem_pio2+0x3dc>
 8012f7a:	ed32 6b02 	vldmdb	r2!, {d6}
 8012f7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012f82:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012f86:	e7ef      	b.n	8012f68 <__kernel_rem_pio2+0x470>
 8012f88:	ed32 7b02 	vldmdb	r2!, {d7}
 8012f8c:	3b01      	subs	r3, #1
 8012f8e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8012f92:	e7d0      	b.n	8012f36 <__kernel_rem_pio2+0x43e>
 8012f94:	eeb0 7b46 	vmov.f64	d7, d6
 8012f98:	e7d2      	b.n	8012f40 <__kernel_rem_pio2+0x448>
 8012f9a:	ecb2 6b02 	vldmia	r2!, {d6}
 8012f9e:	3301      	adds	r3, #1
 8012fa0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012fa4:	e7d4      	b.n	8012f50 <__kernel_rem_pio2+0x458>
 8012fa6:	ed91 7b00 	vldr	d7, [r1]
 8012faa:	ed91 5b02 	vldr	d5, [r1, #8]
 8012fae:	3801      	subs	r0, #1
 8012fb0:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012fb4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012fb8:	ed81 6b00 	vstr	d6, [r1]
 8012fbc:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012fc0:	ed81 7b02 	vstr	d7, [r1, #8]
 8012fc4:	e796      	b.n	8012ef4 <__kernel_rem_pio2+0x3fc>
 8012fc6:	ed92 7b00 	vldr	d7, [r2]
 8012fca:	ed92 5b02 	vldr	d5, [r2, #8]
 8012fce:	3901      	subs	r1, #1
 8012fd0:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012fd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012fd8:	ed82 6b00 	vstr	d6, [r2]
 8012fdc:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012fe0:	ed82 7b02 	vstr	d7, [r2, #8]
 8012fe4:	e78b      	b.n	8012efe <__kernel_rem_pio2+0x406>
 8012fe6:	ed33 6b02 	vldmdb	r3!, {d6}
 8012fea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012fee:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012ff2:	e78b      	b.n	8012f0c <__kernel_rem_pio2+0x414>
 8012ff4:	eeb1 5b45 	vneg.f64	d5, d5
 8012ff8:	eeb1 6b46 	vneg.f64	d6, d6
 8012ffc:	ed87 5b00 	vstr	d5, [r7]
 8013000:	eeb1 7b47 	vneg.f64	d7, d7
 8013004:	ed87 6b02 	vstr	d6, [r7, #8]
 8013008:	e78d      	b.n	8012f26 <__kernel_rem_pio2+0x42e>
 801300a:	bf00      	nop
 801300c:	f3af 8000 	nop.w
 8013010:	00000000 	.word	0x00000000
 8013014:	41700000 	.word	0x41700000
 8013018:	00000000 	.word	0x00000000
 801301c:	3e700000 	.word	0x3e700000
	...

08013028 <__kernel_sin>:
 8013028:	ee10 3a90 	vmov	r3, s1
 801302c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013030:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013034:	da04      	bge.n	8013040 <__kernel_sin+0x18>
 8013036:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801303a:	ee17 3a90 	vmov	r3, s15
 801303e:	b35b      	cbz	r3, 8013098 <__kernel_sin+0x70>
 8013040:	ee20 6b00 	vmul.f64	d6, d0, d0
 8013044:	ee20 5b06 	vmul.f64	d5, d0, d6
 8013048:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80130a0 <__kernel_sin+0x78>
 801304c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80130a8 <__kernel_sin+0x80>
 8013050:	eea6 4b07 	vfma.f64	d4, d6, d7
 8013054:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80130b0 <__kernel_sin+0x88>
 8013058:	eea4 7b06 	vfma.f64	d7, d4, d6
 801305c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80130b8 <__kernel_sin+0x90>
 8013060:	eea7 4b06 	vfma.f64	d4, d7, d6
 8013064:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80130c0 <__kernel_sin+0x98>
 8013068:	eea4 7b06 	vfma.f64	d7, d4, d6
 801306c:	b930      	cbnz	r0, 801307c <__kernel_sin+0x54>
 801306e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80130c8 <__kernel_sin+0xa0>
 8013072:	eea6 4b07 	vfma.f64	d4, d6, d7
 8013076:	eea4 0b05 	vfma.f64	d0, d4, d5
 801307a:	4770      	bx	lr
 801307c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8013080:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8013084:	eea1 7b04 	vfma.f64	d7, d1, d4
 8013088:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801308c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80130d0 <__kernel_sin+0xa8>
 8013090:	eea5 1b07 	vfma.f64	d1, d5, d7
 8013094:	ee30 0b41 	vsub.f64	d0, d0, d1
 8013098:	4770      	bx	lr
 801309a:	bf00      	nop
 801309c:	f3af 8000 	nop.w
 80130a0:	5acfd57c 	.word	0x5acfd57c
 80130a4:	3de5d93a 	.word	0x3de5d93a
 80130a8:	8a2b9ceb 	.word	0x8a2b9ceb
 80130ac:	be5ae5e6 	.word	0xbe5ae5e6
 80130b0:	57b1fe7d 	.word	0x57b1fe7d
 80130b4:	3ec71de3 	.word	0x3ec71de3
 80130b8:	19c161d5 	.word	0x19c161d5
 80130bc:	bf2a01a0 	.word	0xbf2a01a0
 80130c0:	1110f8a6 	.word	0x1110f8a6
 80130c4:	3f811111 	.word	0x3f811111
 80130c8:	55555549 	.word	0x55555549
 80130cc:	bfc55555 	.word	0xbfc55555
 80130d0:	55555549 	.word	0x55555549
 80130d4:	3fc55555 	.word	0x3fc55555

080130d8 <atan>:
 80130d8:	b538      	push	{r3, r4, r5, lr}
 80130da:	eeb0 7b40 	vmov.f64	d7, d0
 80130de:	ee17 5a90 	vmov	r5, s15
 80130e2:	4b73      	ldr	r3, [pc, #460]	; (80132b0 <atan+0x1d8>)
 80130e4:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80130e8:	429c      	cmp	r4, r3
 80130ea:	dd13      	ble.n	8013114 <atan+0x3c>
 80130ec:	4b71      	ldr	r3, [pc, #452]	; (80132b4 <atan+0x1dc>)
 80130ee:	429c      	cmp	r4, r3
 80130f0:	dc03      	bgt.n	80130fa <atan+0x22>
 80130f2:	d107      	bne.n	8013104 <atan+0x2c>
 80130f4:	ee10 3a10 	vmov	r3, s0
 80130f8:	b123      	cbz	r3, 8013104 <atan+0x2c>
 80130fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80130fe:	eeb0 0b47 	vmov.f64	d0, d7
 8013102:	bd38      	pop	{r3, r4, r5, pc}
 8013104:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8013240 <atan+0x168>
 8013108:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8013248 <atan+0x170>
 801310c:	2d00      	cmp	r5, #0
 801310e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8013112:	e7f4      	b.n	80130fe <atan+0x26>
 8013114:	4b68      	ldr	r3, [pc, #416]	; (80132b8 <atan+0x1e0>)
 8013116:	429c      	cmp	r4, r3
 8013118:	dc11      	bgt.n	801313e <atan+0x66>
 801311a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801311e:	429c      	cmp	r4, r3
 8013120:	dc0a      	bgt.n	8013138 <atan+0x60>
 8013122:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8013126:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8013250 <atan+0x178>
 801312a:	ee30 6b06 	vadd.f64	d6, d0, d6
 801312e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013136:	dce2      	bgt.n	80130fe <atan+0x26>
 8013138:	f04f 33ff 	mov.w	r3, #4294967295
 801313c:	e013      	b.n	8013166 <atan+0x8e>
 801313e:	f000 f8c5 	bl	80132cc <fabs>
 8013142:	4b5e      	ldr	r3, [pc, #376]	; (80132bc <atan+0x1e4>)
 8013144:	429c      	cmp	r4, r3
 8013146:	dc4f      	bgt.n	80131e8 <atan+0x110>
 8013148:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801314c:	429c      	cmp	r4, r3
 801314e:	dc41      	bgt.n	80131d4 <atan+0xfc>
 8013150:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8013154:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8013158:	2300      	movs	r3, #0
 801315a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801315e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013162:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8013166:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8013258 <atan+0x180>
 801316a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801316e:	ee24 5b04 	vmul.f64	d5, d4, d4
 8013172:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8013260 <atan+0x188>
 8013176:	eea5 3b06 	vfma.f64	d3, d5, d6
 801317a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8013268 <atan+0x190>
 801317e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8013182:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8013270 <atan+0x198>
 8013186:	eea6 3b05 	vfma.f64	d3, d6, d5
 801318a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8013278 <atan+0x1a0>
 801318e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8013192:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8013280 <atan+0x1a8>
 8013196:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8013288 <atan+0x1b0>
 801319a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801319e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8013290 <atan+0x1b8>
 80131a2:	eea5 2b06 	vfma.f64	d2, d5, d6
 80131a6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8013298 <atan+0x1c0>
 80131aa:	eea2 6b05 	vfma.f64	d6, d2, d5
 80131ae:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80132a0 <atan+0x1c8>
 80131b2:	eea6 2b05 	vfma.f64	d2, d6, d5
 80131b6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80132a8 <atan+0x1d0>
 80131ba:	1c5a      	adds	r2, r3, #1
 80131bc:	eea2 6b05 	vfma.f64	d6, d2, d5
 80131c0:	ee26 6b05 	vmul.f64	d6, d6, d5
 80131c4:	eea3 6b04 	vfma.f64	d6, d3, d4
 80131c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80131cc:	d121      	bne.n	8013212 <atan+0x13a>
 80131ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80131d2:	e794      	b.n	80130fe <atan+0x26>
 80131d4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80131d8:	2301      	movs	r3, #1
 80131da:	ee30 6b47 	vsub.f64	d6, d0, d7
 80131de:	ee30 0b07 	vadd.f64	d0, d0, d7
 80131e2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80131e6:	e7be      	b.n	8013166 <atan+0x8e>
 80131e8:	4b35      	ldr	r3, [pc, #212]	; (80132c0 <atan+0x1e8>)
 80131ea:	429c      	cmp	r4, r3
 80131ec:	da0b      	bge.n	8013206 <atan+0x12e>
 80131ee:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80131f2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80131f6:	ee30 5b47 	vsub.f64	d5, d0, d7
 80131fa:	eea0 6b07 	vfma.f64	d6, d0, d7
 80131fe:	2302      	movs	r3, #2
 8013200:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8013204:	e7af      	b.n	8013166 <atan+0x8e>
 8013206:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801320a:	2303      	movs	r3, #3
 801320c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8013210:	e7a9      	b.n	8013166 <atan+0x8e>
 8013212:	4a2c      	ldr	r2, [pc, #176]	; (80132c4 <atan+0x1ec>)
 8013214:	492c      	ldr	r1, [pc, #176]	; (80132c8 <atan+0x1f0>)
 8013216:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801321a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801321e:	ed93 5b00 	vldr	d5, [r3]
 8013222:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013226:	ee36 7b47 	vsub.f64	d7, d6, d7
 801322a:	ed92 6b00 	vldr	d6, [r2]
 801322e:	2d00      	cmp	r5, #0
 8013230:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013234:	bfb8      	it	lt
 8013236:	eeb1 7b47 	vneglt.f64	d7, d7
 801323a:	e760      	b.n	80130fe <atan+0x26>
 801323c:	f3af 8000 	nop.w
 8013240:	54442d18 	.word	0x54442d18
 8013244:	3ff921fb 	.word	0x3ff921fb
 8013248:	54442d18 	.word	0x54442d18
 801324c:	bff921fb 	.word	0xbff921fb
 8013250:	8800759c 	.word	0x8800759c
 8013254:	7e37e43c 	.word	0x7e37e43c
 8013258:	e322da11 	.word	0xe322da11
 801325c:	3f90ad3a 	.word	0x3f90ad3a
 8013260:	24760deb 	.word	0x24760deb
 8013264:	3fa97b4b 	.word	0x3fa97b4b
 8013268:	a0d03d51 	.word	0xa0d03d51
 801326c:	3fb10d66 	.word	0x3fb10d66
 8013270:	c54c206e 	.word	0xc54c206e
 8013274:	3fb745cd 	.word	0x3fb745cd
 8013278:	920083ff 	.word	0x920083ff
 801327c:	3fc24924 	.word	0x3fc24924
 8013280:	5555550d 	.word	0x5555550d
 8013284:	3fd55555 	.word	0x3fd55555
 8013288:	52defd9a 	.word	0x52defd9a
 801328c:	bfadde2d 	.word	0xbfadde2d
 8013290:	2c6a6c2f 	.word	0x2c6a6c2f
 8013294:	bfa2b444 	.word	0xbfa2b444
 8013298:	af749a6d 	.word	0xaf749a6d
 801329c:	bfb3b0f2 	.word	0xbfb3b0f2
 80132a0:	fe231671 	.word	0xfe231671
 80132a4:	bfbc71c6 	.word	0xbfbc71c6
 80132a8:	9998ebc4 	.word	0x9998ebc4
 80132ac:	bfc99999 	.word	0xbfc99999
 80132b0:	440fffff 	.word	0x440fffff
 80132b4:	7ff00000 	.word	0x7ff00000
 80132b8:	3fdbffff 	.word	0x3fdbffff
 80132bc:	3ff2ffff 	.word	0x3ff2ffff
 80132c0:	40038000 	.word	0x40038000
 80132c4:	08014428 	.word	0x08014428
 80132c8:	08014448 	.word	0x08014448

080132cc <fabs>:
 80132cc:	ec51 0b10 	vmov	r0, r1, d0
 80132d0:	ee10 2a10 	vmov	r2, s0
 80132d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80132d8:	ec43 2b10 	vmov	d0, r2, r3
 80132dc:	4770      	bx	lr
	...

080132e0 <floor>:
 80132e0:	ee10 1a90 	vmov	r1, s1
 80132e4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80132e8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80132ec:	2b13      	cmp	r3, #19
 80132ee:	b530      	push	{r4, r5, lr}
 80132f0:	ee10 0a10 	vmov	r0, s0
 80132f4:	ee10 5a10 	vmov	r5, s0
 80132f8:	dc31      	bgt.n	801335e <floor+0x7e>
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	da15      	bge.n	801332a <floor+0x4a>
 80132fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80133b8 <floor+0xd8>
 8013302:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013306:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801330a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801330e:	dd07      	ble.n	8013320 <floor+0x40>
 8013310:	2900      	cmp	r1, #0
 8013312:	da4e      	bge.n	80133b2 <floor+0xd2>
 8013314:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013318:	4318      	orrs	r0, r3
 801331a:	d001      	beq.n	8013320 <floor+0x40>
 801331c:	4928      	ldr	r1, [pc, #160]	; (80133c0 <floor+0xe0>)
 801331e:	2000      	movs	r0, #0
 8013320:	460b      	mov	r3, r1
 8013322:	4602      	mov	r2, r0
 8013324:	ec43 2b10 	vmov	d0, r2, r3
 8013328:	e020      	b.n	801336c <floor+0x8c>
 801332a:	4a26      	ldr	r2, [pc, #152]	; (80133c4 <floor+0xe4>)
 801332c:	411a      	asrs	r2, r3
 801332e:	ea01 0402 	and.w	r4, r1, r2
 8013332:	4304      	orrs	r4, r0
 8013334:	d01a      	beq.n	801336c <floor+0x8c>
 8013336:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80133b8 <floor+0xd8>
 801333a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801333e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013346:	ddeb      	ble.n	8013320 <floor+0x40>
 8013348:	2900      	cmp	r1, #0
 801334a:	bfbe      	ittt	lt
 801334c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8013350:	fa40 f303 	asrlt.w	r3, r0, r3
 8013354:	18c9      	addlt	r1, r1, r3
 8013356:	ea21 0102 	bic.w	r1, r1, r2
 801335a:	2000      	movs	r0, #0
 801335c:	e7e0      	b.n	8013320 <floor+0x40>
 801335e:	2b33      	cmp	r3, #51	; 0x33
 8013360:	dd05      	ble.n	801336e <floor+0x8e>
 8013362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013366:	d101      	bne.n	801336c <floor+0x8c>
 8013368:	ee30 0b00 	vadd.f64	d0, d0, d0
 801336c:	bd30      	pop	{r4, r5, pc}
 801336e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8013372:	f04f 32ff 	mov.w	r2, #4294967295
 8013376:	40e2      	lsrs	r2, r4
 8013378:	4202      	tst	r2, r0
 801337a:	d0f7      	beq.n	801336c <floor+0x8c>
 801337c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80133b8 <floor+0xd8>
 8013380:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013384:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801338c:	ddc8      	ble.n	8013320 <floor+0x40>
 801338e:	2900      	cmp	r1, #0
 8013390:	da02      	bge.n	8013398 <floor+0xb8>
 8013392:	2b14      	cmp	r3, #20
 8013394:	d103      	bne.n	801339e <floor+0xbe>
 8013396:	3101      	adds	r1, #1
 8013398:	ea20 0002 	bic.w	r0, r0, r2
 801339c:	e7c0      	b.n	8013320 <floor+0x40>
 801339e:	2401      	movs	r4, #1
 80133a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80133a4:	fa04 f303 	lsl.w	r3, r4, r3
 80133a8:	4418      	add	r0, r3
 80133aa:	42a8      	cmp	r0, r5
 80133ac:	bf38      	it	cc
 80133ae:	1909      	addcc	r1, r1, r4
 80133b0:	e7f2      	b.n	8013398 <floor+0xb8>
 80133b2:	2000      	movs	r0, #0
 80133b4:	4601      	mov	r1, r0
 80133b6:	e7b3      	b.n	8013320 <floor+0x40>
 80133b8:	8800759c 	.word	0x8800759c
 80133bc:	7e37e43c 	.word	0x7e37e43c
 80133c0:	bff00000 	.word	0xbff00000
 80133c4:	000fffff 	.word	0x000fffff

080133c8 <scalbn>:
 80133c8:	ee10 1a90 	vmov	r1, s1
 80133cc:	b510      	push	{r4, lr}
 80133ce:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80133d2:	b98c      	cbnz	r4, 80133f8 <scalbn+0x30>
 80133d4:	ee10 3a10 	vmov	r3, s0
 80133d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80133dc:	430b      	orrs	r3, r1
 80133de:	d011      	beq.n	8013404 <scalbn+0x3c>
 80133e0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80134a8 <scalbn+0xe0>
 80133e4:	4b3c      	ldr	r3, [pc, #240]	; (80134d8 <scalbn+0x110>)
 80133e6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80133ea:	4298      	cmp	r0, r3
 80133ec:	da0b      	bge.n	8013406 <scalbn+0x3e>
 80133ee:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80134b0 <scalbn+0xe8>
 80133f2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80133f6:	e005      	b.n	8013404 <scalbn+0x3c>
 80133f8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80133fc:	429c      	cmp	r4, r3
 80133fe:	d107      	bne.n	8013410 <scalbn+0x48>
 8013400:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013404:	bd10      	pop	{r4, pc}
 8013406:	ee10 1a90 	vmov	r1, s1
 801340a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801340e:	3c36      	subs	r4, #54	; 0x36
 8013410:	4404      	add	r4, r0
 8013412:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8013416:	429c      	cmp	r4, r3
 8013418:	dd0d      	ble.n	8013436 <scalbn+0x6e>
 801341a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80134b8 <scalbn+0xf0>
 801341e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80134c0 <scalbn+0xf8>
 8013422:	eeb0 6b47 	vmov.f64	d6, d7
 8013426:	ee10 3a90 	vmov	r3, s1
 801342a:	2b00      	cmp	r3, #0
 801342c:	fe27 7b05 	vselge.f64	d7, d7, d5
 8013430:	ee27 0b06 	vmul.f64	d0, d7, d6
 8013434:	e7e6      	b.n	8013404 <scalbn+0x3c>
 8013436:	2c00      	cmp	r4, #0
 8013438:	dd0a      	ble.n	8013450 <scalbn+0x88>
 801343a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801343e:	ec53 2b10 	vmov	r2, r3, d0
 8013442:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8013446:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801344a:	ec43 2b10 	vmov	d0, r2, r3
 801344e:	e7d9      	b.n	8013404 <scalbn+0x3c>
 8013450:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8013454:	da19      	bge.n	801348a <scalbn+0xc2>
 8013456:	f24c 3350 	movw	r3, #50000	; 0xc350
 801345a:	4298      	cmp	r0, r3
 801345c:	ee10 3a90 	vmov	r3, s1
 8013460:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013464:	dd09      	ble.n	801347a <scalbn+0xb2>
 8013466:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80134b8 <scalbn+0xf0>
 801346a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80134c0 <scalbn+0xf8>
 801346e:	eeb0 7b40 	vmov.f64	d7, d0
 8013472:	2b00      	cmp	r3, #0
 8013474:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8013478:	e7bb      	b.n	80133f2 <scalbn+0x2a>
 801347a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80134b0 <scalbn+0xe8>
 801347e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80134c8 <scalbn+0x100>
 8013482:	eeb0 7b40 	vmov.f64	d7, d0
 8013486:	2b00      	cmp	r3, #0
 8013488:	e7f4      	b.n	8013474 <scalbn+0xac>
 801348a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801348e:	ec53 2b10 	vmov	r2, r3, d0
 8013492:	3436      	adds	r4, #54	; 0x36
 8013494:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8013498:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801349c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80134d0 <scalbn+0x108>
 80134a0:	ec43 2b10 	vmov	d0, r2, r3
 80134a4:	e7a5      	b.n	80133f2 <scalbn+0x2a>
 80134a6:	bf00      	nop
 80134a8:	00000000 	.word	0x00000000
 80134ac:	43500000 	.word	0x43500000
 80134b0:	c2f8f359 	.word	0xc2f8f359
 80134b4:	01a56e1f 	.word	0x01a56e1f
 80134b8:	8800759c 	.word	0x8800759c
 80134bc:	7e37e43c 	.word	0x7e37e43c
 80134c0:	8800759c 	.word	0x8800759c
 80134c4:	fe37e43c 	.word	0xfe37e43c
 80134c8:	c2f8f359 	.word	0xc2f8f359
 80134cc:	81a56e1f 	.word	0x81a56e1f
 80134d0:	00000000 	.word	0x00000000
 80134d4:	3c900000 	.word	0x3c900000
 80134d8:	ffff3cb0 	.word	0xffff3cb0

080134dc <_init>:
 80134dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134de:	bf00      	nop
 80134e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134e2:	bc08      	pop	{r3}
 80134e4:	469e      	mov	lr, r3
 80134e6:	4770      	bx	lr

080134e8 <_fini>:
 80134e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ea:	bf00      	nop
 80134ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134ee:	bc08      	pop	{r3}
 80134f0:	469e      	mov	lr, r3
 80134f2:	4770      	bx	lr
>>>>>>> Stashed changes
