
stm32_JohnDeere_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f998  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  0800fc38  0800fc38  0001fc38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010460  08010460  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08010460  08010460  00020460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010468  08010468  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010468  08010468  00020468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801046c  0801046c  0002046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  08010470  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e94  240001dc  0801064c  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005070  0801064c  00035070  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025dce  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e43  00000000  00000000  0005601b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c98  00000000  00000000  0005ae60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000160e  00000000  00000000  0005caf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00040283  00000000  00000000  0005e106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026a87  00000000  00000000  0009e389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001987cc  00000000  00000000  000c4e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000880c  00000000  00000000  0025d5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00265de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fc20 	.word	0x0800fc20

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	0800fc20 	.word	0x0800fc20

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemInit+0xfc>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <SystemInit+0xfc>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0xfc>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <SystemInit+0xfc>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	2b06      	cmp	r3, #6
 80006b6:	d807      	bhi.n	80006c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemInit+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x100>)
 80006c2:	f043 0307 	orr.w	r3, r3, #7
 80006c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <SystemInit+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <SystemInit+0x104>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x104>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <SystemInit+0x104>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	492c      	ldr	r1, [pc, #176]	; (8000790 <SystemInit+0x104>)
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemInit+0x108>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemInit+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <SystemInit+0x100>)
 80006fc:	f043 0307 	orr.w	r3, r3, #7
 8000700:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemInit+0x104>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemInit+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemInit+0x104>)
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <SystemInit+0x10c>)
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <SystemInit+0x104>)
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <SystemInit+0x110>)
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <SystemInit+0x104>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <SystemInit+0x114>)
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <SystemInit+0x104>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <SystemInit+0x114>)
 8000730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <SystemInit+0x104>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <SystemInit+0x114>)
 800073c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <SystemInit+0x104>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <SystemInit+0x104>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <SystemInit+0x104>)
 8000752:	2200      	movs	r2, #0
 8000754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x118>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <SystemInit+0x118>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x11c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x120>)
 8000768:	4013      	ands	r3, r2
 800076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076e:	d202      	bcs.n	8000776 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SystemInit+0x124>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0x128>)
 8000778:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800077c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	52002000 	.word	0x52002000
 8000790:	58024400 	.word	0x58024400
 8000794:	eaf6ed7f 	.word	0xeaf6ed7f
 8000798:	02020200 	.word	0x02020200
 800079c:	01ff0000 	.word	0x01ff0000
 80007a0:	01010280 	.word	0x01010280
 80007a4:	580000c0 	.word	0x580000c0
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	ffff0000 	.word	0xffff0000
 80007b0:	51008108 	.word	0x51008108
 80007b4:	52004000 	.word	0x52004000

080007b8 <setPwmS>:
	htimN.Instance->CCR1 = ccr;


}

void setPwmS(struct escValues *escValues){
 80007b8:	b480      	push	{r7}
 80007ba:	b087      	sub	sp, #28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	double ccr;
	double pwmPeriodInSeconds; //Fix from setPwmS

	escValues->minPulseWidth = MY_SATURATE(escValues->minPulseWidth,escValues->pwmPeriod);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007c8:	429a      	cmp	r2, r3
 80007ca:	bf28      	it	cs
 80007cc:	461a      	movcs	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	64da      	str	r2, [r3, #76]	; 0x4c
	escValues->maxPulseWidth = MY_SATURATE(escValues->maxPulseWidth,escValues->pwmPeriod);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007da:	429a      	cmp	r2, r3
 80007dc:	bf28      	it	cs
 80007de:	461a      	movcs	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	651a      	str	r2, [r3, #80]	; 0x50
	escValues->percentage = MY_SATURATE(escValues->percentage, escValues->resolution);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ec:	429a      	cmp	r2, r3
 80007ee:	bf28      	it	cs
 80007f0:	461a      	movcs	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	65da      	str	r2, [r3, #92]	; 0x5c

	escValues->pulseWidth =  ( ( (escValues->maxPulseWidth - escValues->minPulseWidth)/escValues->resolution ) * escValues->percentage ) + escValues->minPulseWidth;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	1ad2      	subs	r2, r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000804:	fbb2 f3f3 	udiv	r3, r2, r3
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800080c:	fb03 f202 	mul.w	r2, r3, r2
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	4413      	add	r3, r2
 8000816:	ee07 3a90 	vmov	s15, r3
 800081a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

	escValues->pulseWidth = escValues->pulseWidth/1e6;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 800082a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000890 <setPwmS+0xd8>
 800082e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	pwmPeriodInSeconds = escValues->pwmPeriod/1e6;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800083c:	ee07 3a90 	vmov	s15, r3
 8000840:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000844:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000890 <setPwmS+0xd8>
 8000848:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800084c:	ed87 7b04 	vstr	d7, [r7, #16]

	ccr = (escValues->pulseWidth * escValues->htimN.Init.Period) / pwmPeriodInSeconds;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	ee07 3a90 	vmov	s15, r3
 800085e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000862:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000866:	ed97 6b04 	vldr	d6, [r7, #16]
 800086a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800086e:	ed87 7b02 	vstr	d7, [r7, #8]
	escValues->htimN.Instance->CCR1 = ccr;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	ed97 7b02 	vldr	d7, [r7, #8]
 800087a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800087e:	ee17 2a90 	vmov	r2, s15
 8000882:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000884:	bf00      	nop
 8000886:	371c      	adds	r7, #28
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	00000000 	.word	0x00000000
 8000894:	412e8480 	.word	0x412e8480

08000898 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 800089c:	4813      	ldr	r0, [pc, #76]	; (80008ec <MX_FREERTOS_Init+0x54>)
 800089e:	f008 fc42 	bl	8009126 <osMutexNew>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <MX_FREERTOS_Init+0x58>)
 80008a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008a8:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <MX_FREERTOS_Init+0x5c>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	4812      	ldr	r0, [pc, #72]	; (80008f8 <MX_FREERTOS_Init+0x60>)
 80008ae:	f008 fb8d 	bl	8008fcc <osThreadNew>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a11      	ldr	r2, [pc, #68]	; (80008fc <MX_FREERTOS_Init+0x64>)
 80008b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  blinkGreenTaskHandle = osThreadNew(blinkGreenTask, NULL, &blinkGreenTask_attributes);
 80008b8:	4a11      	ldr	r2, [pc, #68]	; (8000900 <MX_FREERTOS_Init+0x68>)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <MX_FREERTOS_Init+0x6c>)
 80008be:	f008 fb85 	bl	8008fcc <osThreadNew>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a10      	ldr	r2, [pc, #64]	; (8000908 <MX_FREERTOS_Init+0x70>)
 80008c6:	6013      	str	r3, [r2, #0]
  servoTaskHandle = osThreadNew(servoTask, NULL, &servoTaskHandle_attributes);
 80008c8:	4a10      	ldr	r2, [pc, #64]	; (800090c <MX_FREERTOS_Init+0x74>)
 80008ca:	2100      	movs	r1, #0
 80008cc:	4810      	ldr	r0, [pc, #64]	; (8000910 <MX_FREERTOS_Init+0x78>)
 80008ce:	f008 fb7d 	bl	8008fcc <osThreadNew>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <MX_FREERTOS_Init+0x7c>)
 80008d6:	6013      	str	r3, [r2, #0]
  escTaskHandle = osThreadNew(escTask, NULL, &escTaskHandle_attributes);
 80008d8:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <MX_FREERTOS_Init+0x80>)
 80008da:	2100      	movs	r1, #0
 80008dc:	480f      	ldr	r0, [pc, #60]	; (800091c <MX_FREERTOS_Init+0x84>)
 80008de:	f008 fb75 	bl	8008fcc <osThreadNew>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <MX_FREERTOS_Init+0x88>)
 80008e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	0800fe6c 	.word	0x0800fe6c
 80008f0:	240002f8 	.word	0x240002f8
 80008f4:	0800fe48 	.word	0x0800fe48
 80008f8:	08000925 	.word	0x08000925
 80008fc:	240002f4 	.word	0x240002f4
 8000900:	0800fd94 	.word	0x0800fd94
 8000904:	08000939 	.word	0x08000939
 8000908:	240002e0 	.word	0x240002e0
 800090c:	0800fe00 	.word	0x0800fe00
 8000910:	08000ba1 	.word	0x08000ba1
 8000914:	240002ec 	.word	0x240002ec
 8000918:	0800fddc 	.word	0x0800fddc
 800091c:	08000ac5 	.word	0x08000ac5
 8000920:	240002e8 	.word	0x240002e8

08000924 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 800092c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000930:	f008 fbde 	bl	80090f0 <osDelay>
 8000934:	e7fa      	b.n	800092c <StartDefaultTask+0x8>
	...

08000938 <blinkGreenTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void blinkGreenTask(void *argument)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_yellow_GPIO_Port,LD2_yellow_Pin);
 8000940:	2102      	movs	r1, #2
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <blinkGreenTask+0x24>)
 8000944:	f002 fdbf 	bl	80034c6 <HAL_GPIO_TogglePin>
	for(;;)
	{
		HAL_GPIO_TogglePin(LD1_Green_GPIO_Port,LD1_Green_Pin);
 8000948:	2101      	movs	r1, #1
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <blinkGreenTask+0x28>)
 800094c:	f002 fdbb 	bl	80034c6 <HAL_GPIO_TogglePin>
		osDelay(500);
 8000950:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000954:	f008 fbcc 	bl	80090f0 <osDelay>
		HAL_GPIO_TogglePin(LD1_Green_GPIO_Port,LD1_Green_Pin);
 8000958:	e7f6      	b.n	8000948 <blinkGreenTask+0x10>
 800095a:	bf00      	nop
 800095c:	58021000 	.word	0x58021000
 8000960:	58020400 	.word	0x58020400

08000964 <imuTask>:
		osDelay(100);
	}
}

void imuTask(void *argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b090      	sub	sp, #64	; 0x40
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	  char axisLabel[3] = {'X','Y','Z'}; //Var for printing labels
 800096c:	4a47      	ldr	r2, [pc, #284]	; (8000a8c <imuTask+0x128>)
 800096e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000972:	6812      	ldr	r2, [r2, #0]
 8000974:	4611      	mov	r1, r2
 8000976:	8019      	strh	r1, [r3, #0]
 8000978:	3302      	adds	r3, #2
 800097a:	0c12      	lsrs	r2, r2, #16
 800097c:	701a      	strb	r2, [r3, #0]
	  printf("Initiating IMU...\r\n"); //Initiating MPU9250
 800097e:	4844      	ldr	r0, [pc, #272]	; (8000a90 <imuTask+0x12c>)
 8000980:	f00c f9e8 	bl	800cd54 <puts>
	  initMPU9250(&mpu, AFS_2G, GFS_250DPS, M_8Hz);
 8000984:	2302      	movs	r3, #2
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	4842      	ldr	r0, [pc, #264]	; (8000a94 <imuTask+0x130>)
 800098c:	f000 fbef 	bl	800116e <initMPU9250>

	  printf("Calibrating IMU...\r\n");
 8000990:	4841      	ldr	r0, [pc, #260]	; (8000a98 <imuTask+0x134>)
 8000992:	f00c f9df 	bl	800cd54 <puts>
	  float accelBias[3], gyroBias[3]; //Calibrating and Printing Biases MPU9250
	  calibrateMPU9250(gyroBias, accelBias);
 8000996:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800099a:	f107 0318 	add.w	r3, r7, #24
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fcb1 	bl	8001308 <calibrateMPU9250>
	  printf("AccBias {");
 80009a6:	483d      	ldr	r0, [pc, #244]	; (8000a9c <imuTask+0x138>)
 80009a8:	f00c f96e 	bl	800cc88 <iprintf>
	  for(int i=0; i<3; i++){
 80009ac:	2300      	movs	r3, #0
 80009ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80009b0:	e016      	b.n	80009e0 <imuTask+0x7c>
		  printf(" %c %.3f ",axisLabel[i],gyroBias[i]);
 80009b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80009b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009b8:	4413      	add	r3, r2
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	3340      	adds	r3, #64	; 0x40
 80009c4:	443b      	add	r3, r7
 80009c6:	3b28      	subs	r3, #40	; 0x28
 80009c8:	edd3 7a00 	vldr	s15, [r3]
 80009cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009d0:	ec53 2b17 	vmov	r2, r3, d7
 80009d4:	4832      	ldr	r0, [pc, #200]	; (8000aa0 <imuTask+0x13c>)
 80009d6:	f00c f957 	bl	800cc88 <iprintf>
	  for(int i=0; i<3; i++){
 80009da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009dc:	3301      	adds	r3, #1
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80009e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	dde5      	ble.n	80009b2 <imuTask+0x4e>
	  }
	  printf("} GyroBias{");
 80009e6:	482f      	ldr	r0, [pc, #188]	; (8000aa4 <imuTask+0x140>)
 80009e8:	f00c f94e 	bl	800cc88 <iprintf>
	  for(int i=0; i<3; i++){
 80009ec:	2300      	movs	r3, #0
 80009ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80009f0:	e016      	b.n	8000a20 <imuTask+0xbc>
		  printf(" %c %.3f ",axisLabel[i],accelBias[i]);
 80009f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80009f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009f8:	4413      	add	r3, r2
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	3340      	adds	r3, #64	; 0x40
 8000a04:	443b      	add	r3, r7
 8000a06:	3b1c      	subs	r3, #28
 8000a08:	edd3 7a00 	vldr	s15, [r3]
 8000a0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a10:	ec53 2b17 	vmov	r2, r3, d7
 8000a14:	4822      	ldr	r0, [pc, #136]	; (8000aa0 <imuTask+0x13c>)
 8000a16:	f00c f937 	bl	800cc88 <iprintf>
	  for(int i=0; i<3; i++){
 8000a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	dde5      	ble.n	80009f2 <imuTask+0x8e>
	  }
	  printf("}\r\n");
 8000a26:	4820      	ldr	r0, [pc, #128]	; (8000aa8 <imuTask+0x144>)
 8000a28:	f00c f994 	bl	800cd54 <puts>

	  printf("Starting IMU...\r\n");
 8000a2c:	481f      	ldr	r0, [pc, #124]	; (8000aac <imuTask+0x148>)
 8000a2e:	f00c f991 	bl	800cd54 <puts>
	  float initPose[] = {0,0,0};
 8000a32:	f04f 0300 	mov.w	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	f04f 0300 	mov.w	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	f04f 0300 	mov.w	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
	  setPose(&mpu, initPose);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4812      	ldr	r0, [pc, #72]	; (8000a94 <imuTask+0x130>)
 8000a4c:	f001 f980 	bl	8001d50 <setPose>
    stanleyTaskHandle = osThreadNew(stanleyTask, NULL, &stanleyTaskHandle_attributes);
 8000a50:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <imuTask+0x14c>)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4817      	ldr	r0, [pc, #92]	; (8000ab4 <imuTask+0x150>)
 8000a56:	f008 fab9 	bl	8008fcc <osThreadNew>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a16      	ldr	r2, [pc, #88]	; (8000ab8 <imuTask+0x154>)
 8000a5e:	6013      	str	r3, [r2, #0]
    float dt = 0.05;
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <imuTask+0x158>)
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
	for(;;)
	{
		updateData(&mpu, dt, 1); //Printing with func from header file
 8000a64:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000a68:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <imuTask+0x130>)
 8000a6e:	f000 ffbb 	bl	80019e8 <updateData>
		// for(int i = 0; i<3;i++){
		//    printf("{%05.1f}",mpu.pose[i]);
		// }
		// printf("\r\n");
    // osMutexRelease(myMutex01Handle);
		osDelay(dt*1000);
 8000a72:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000a76:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000ac0 <imuTask+0x15c>
 8000a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a82:	ee17 0a90 	vmov	r0, s15
 8000a86:	f008 fb33 	bl	80090f0 <osDelay>
		updateData(&mpu, dt, 1); //Printing with func from header file
 8000a8a:	e7eb      	b.n	8000a64 <imuTask+0x100>
 8000a8c:	0800fd2c 	.word	0x0800fd2c
 8000a90:	0800fcc8 	.word	0x0800fcc8
 8000a94:	240001f8 	.word	0x240001f8
 8000a98:	0800fcdc 	.word	0x0800fcdc
 8000a9c:	0800fcf0 	.word	0x0800fcf0
 8000aa0:	0800fcfc 	.word	0x0800fcfc
 8000aa4:	0800fd08 	.word	0x0800fd08
 8000aa8:	0800fd14 	.word	0x0800fd14
 8000aac:	0800fd18 	.word	0x0800fd18
 8000ab0:	0800fe24 	.word	0x0800fe24
 8000ab4:	08000ca9 	.word	0x08000ca9
 8000ab8:	240002f0 	.word	0x240002f0
 8000abc:	3d4ccccd 	.word	0x3d4ccccd
 8000ac0:	447a0000 	.word	0x447a0000

08000ac4 <escTask>:
	}
}

void escTask(void *argument){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b0a2      	sub	sp, #136	; 0x88
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Staring Timer 3
 8000acc:	2100      	movs	r1, #0
 8000ace:	4830      	ldr	r0, [pc, #192]	; (8000b90 <escTask+0xcc>)
 8000ad0:	f006 f91c 	bl	8006d0c <HAL_TIM_PWM_Start>
	int minPulseWidthEsc = 1000; //Range for right and left Esc
 8000ad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int maxPulseWidthEsc = 1500;
 8000adc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000ae0:	67fb      	str	r3, [r7, #124]	; 0x7c
	unsigned int pwmPeriod = 20000;
 8000ae2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000ae6:	67bb      	str	r3, [r7, #120]	; 0x78
	int resolution = 100;
 8000ae8:	2364      	movs	r3, #100	; 0x64
 8000aea:	677b      	str	r3, [r7, #116]	; 0x74
	struct escValues escValues = {htim2, minPulseWidthEsc, //Struct Containing all
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	2268      	movs	r2, #104	; 0x68
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f00c fa0d 	bl	800cf14 <memset>
 8000afa:	4a25      	ldr	r2, [pc, #148]	; (8000b90 <escTask+0xcc>)
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	4611      	mov	r1, r2
 8000b02:	224c      	movs	r2, #76	; 0x4c
 8000b04:	4618      	mov	r0, r3
 8000b06:	f00c fada 	bl	800d0be <memcpy>
 8000b0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8000b10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b12:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b1a:	663b      	str	r3, [r7, #96]	; 0x60
	maxPulseWidthEsc, pwmPeriod, resolution};	  	 //PWM Variables for Esc

  // Calibration
  int i = 100;
 8000b1c:	2364      	movs	r3, #100	; 0x64
 8000b1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  int dt = 1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	673b      	str	r3, [r7, #112]	; 0x70
  do{
	  setPwmS(&escValues);
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fe44 	bl	80007b8 <setPwmS>
	  escValues.percentage=(unsigned int)i;
 8000b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b34:	667b      	str	r3, [r7, #100]	; 0x64
	  HAL_Delay(10);
 8000b36:	200a      	movs	r0, #10
 8000b38:	f002 f9e8 	bl	8002f0c <HAL_Delay>
	  i=i-dt;
 8000b3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000b40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  }while(i > 50);
 8000b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b4c:	2b32      	cmp	r3, #50	; 0x32
 8000b4e:	dcea      	bgt.n	8000b26 <escTask+0x62>

  minPulseWidthEsc = 1500;
 8000b50:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000b54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  maxPulseWidthEsc = 2000;
 8000b58:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  escValues.maxPulseWidth = maxPulseWidthEsc;
 8000b5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b60:	65bb      	str	r3, [r7, #88]	; 0x58
  escValues.minPulseWidth = minPulseWidthEsc;
 8000b62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b66:	657b      	str	r3, [r7, #84]	; 0x54

  imuTaskHandle = osThreadNew(imuTask, NULL, &imuTaskHandle_attributes);
 8000b68:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <escTask+0xd0>)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	480a      	ldr	r0, [pc, #40]	; (8000b98 <escTask+0xd4>)
 8000b6e:	f008 fa2d 	bl	8008fcc <osThreadNew>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <escTask+0xd8>)
 8000b76:	6013      	str	r3, [r2, #0]

	escValues.percentage = 30;
 8000b78:	231e      	movs	r3, #30
 8000b7a:	667b      	str	r3, [r7, #100]	; 0x64
	setPwmS(&escValues);
 8000b7c:	f107 0308 	add.w	r3, r7, #8
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fe19 	bl	80007b8 <setPwmS>
	for(;;){
    osDelay(100);
 8000b86:	2064      	movs	r0, #100	; 0x64
 8000b88:	f008 fab2 	bl	80090f0 <osDelay>
 8000b8c:	e7fb      	b.n	8000b86 <escTask+0xc2>
 8000b8e:	bf00      	nop
 8000b90:	24000410 	.word	0x24000410
 8000b94:	0800fdb8 	.word	0x0800fdb8
 8000b98:	08000965 	.word	0x08000965
 8000b9c:	240002e4 	.word	0x240002e4

08000ba0 <servoTask>:
	}
}

void servoTask(void *argument){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0a6      	sub	sp, #152	; 0x98
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Staring Timer 3
 8000ba8:	2100      	movs	r1, #0
 8000baa:	483b      	ldr	r0, [pc, #236]	; (8000c98 <servoTask+0xf8>)
 8000bac:	f006 f8ae 	bl	8006d0c <HAL_TIM_PWM_Start>
  int minPulseWidthServo = 1000; //Range for right and left Servo
 8000bb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int maxPulseWidthServo = 2000;
 8000bb8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  unsigned int pwmPeriod = 20000;
 8000bc0:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  int resolution = 100;
 8000bc8:	2364      	movs	r3, #100	; 0x64
 8000bca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  struct escValues servoValues = {htim3, minPulseWidthServo, //Struct Containing all
 8000bce:	f107 0318 	add.w	r3, r7, #24
 8000bd2:	2268      	movs	r2, #104	; 0x68
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f00c f99c 	bl	800cf14 <memset>
 8000bdc:	4a2e      	ldr	r2, [pc, #184]	; (8000c98 <servoTask+0xf8>)
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	4611      	mov	r1, r2
 8000be4:	224c      	movs	r2, #76	; 0x4c
 8000be6:	4618      	mov	r0, r3
 8000be8:	f00c fa69 	bl	800d0be <memcpy>
 8000bec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000bf0:	667b      	str	r3, [r7, #100]	; 0x64
 8000bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000bf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8000bf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c02:	673b      	str	r3, [r7, #112]	; 0x70
  maxPulseWidthServo, pwmPeriod, resolution};	  	 //PWM Variables for Servo

  float in[2] = {stanley.sat[1], stanley.sat[0]}; // min, max delta values
 8000c04:	4b25      	ldr	r3, [pc, #148]	; (8000c9c <servoTask+0xfc>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <servoTask+0xfc>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	617b      	str	r3, [r7, #20]
  float out[2] = {90, 0}; // min, max percentage values
 8000c10:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <servoTask+0x100>)
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
  float slope = (float)(out[1] - out[0]) / (in[1] - in[0]);
 8000c1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c22:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000c26:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c36:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80

  uint8_t last_steer = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  servoValues.percentage = 50;
 8000c40:	2332      	movs	r3, #50	; 0x32
 8000c42:	677b      	str	r3, [r7, #116]	; 0x74
  setPwmS(&servoValues);
 8000c44:	f107 0318 	add.w	r3, r7, #24
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fdb5 	bl	80007b8 <setPwmS>

	for(;;){
     servoValues.percentage = (int) ( (out[0] + (slope * (stanley.delta - in[0]))));
 8000c4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <servoTask+0xfc>)
 8000c54:	edd3 6a02 	vldr	s13, [r3, #8]
 8000c58:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c5c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000c60:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8000c64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c70:	ee17 3a90 	vmov	r3, s15
 8000c74:	677b      	str	r3, [r7, #116]	; 0x74
//     osMutexWait(myMutex01Handle, osWaitForever);
	//  printf("Y {%u}",servoValues.percentage);
     if(servoValues.percentage != last_steer){
 8000c76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000c78:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d004      	beq.n	8000c8a <servoTask+0xea>
       setPwmS(&servoValues);
 8000c80:	f107 0318 	add.w	r3, r7, #24
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fd97 	bl	80007b8 <setPwmS>
	  //  printf("servo {%u},last {%u}",servoValues.percentage, last_steer);
     }
//     osMutexRelease(myMutex01Handle);
     last_steer = servoValues.percentage;
 8000c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c8c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    osDelay(100);
 8000c90:	2064      	movs	r0, #100	; 0x64
 8000c92:	f008 fa2d 	bl	80090f0 <osDelay>
     servoValues.percentage = (int) ( (out[0] + (slope * (stanley.delta - in[0]))));
 8000c96:	e7da      	b.n	8000c4e <servoTask+0xae>
 8000c98:	2400045c 	.word	0x2400045c
 8000c9c:	240002b8 	.word	0x240002b8
 8000ca0:	42b40000 	.word	0x42b40000
 8000ca4:	00000000 	.word	0x00000000

08000ca8 <stanleyTask>:
	}
}

void stanleyTask(void *argument){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b090      	sub	sp, #64	; 0x40
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  float st_saturation_limits[] = {21.4 * M_PI / 180, -21.4 * M_PI / 180}; // Saturation array
 8000cb0:	4a55      	ldr	r2, [pc, #340]	; (8000e08 <stanleyTask+0x160>)
 8000cb2:	f107 0320 	add.w	r3, r7, #32
 8000cb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cba:	e883 0003 	stmia.w	r3, {r0, r1}
  float st_k = 5; // Gain
 8000cbe:	4b53      	ldr	r3, [pc, #332]	; (8000e0c <stanleyTask+0x164>)
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  float st_k_soft = 0.01; // Soft gain
 8000cc2:	4b53      	ldr	r3, [pc, #332]	; (8000e10 <stanleyTask+0x168>)
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t precision = 10; // Result's float resolution
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  // Control signals
  float vel = 0;
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Vehicle pose
  struct Point vehicle_pos = {0, 0};
 8000cd2:	f04f 0300 	mov.w	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  float psi = 0;
 8000cde:	f04f 0300 	mov.w	r3, #0
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28

  // Path
  struct Point p1;
  struct Point p2;

  p1.x = 0;
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  p1.y = 0;
 8000cea:	f04f 0300 	mov.w	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  p2.x = 10;
 8000cf0:	4b48      	ldr	r3, [pc, #288]	; (8000e14 <stanleyTask+0x16c>)
 8000cf2:	60bb      	str	r3, [r7, #8]
  p2.y = 0;
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]

  initStanley(&stanley,st_saturation_limits, st_k, st_k_soft);
 8000cfa:	f107 0320 	add.w	r3, r7, #32
 8000cfe:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8000d02:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8000d06:	4619      	mov	r1, r3
 8000d08:	4843      	ldr	r0, [pc, #268]	; (8000e18 <stanleyTask+0x170>)
 8000d0a:	f001 fa07 	bl	800211c <initStanley>
  
	for(;;){
    vehicle_pos.x = mpu.pose[0];
 8000d0e:	4b43      	ldr	r3, [pc, #268]	; (8000e1c <stanleyTask+0x174>)
 8000d10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000d14:	61bb      	str	r3, [r7, #24]
    vehicle_pos.y = mpu.pose[1];
 8000d16:	4b41      	ldr	r3, [pc, #260]	; (8000e1c <stanleyTask+0x174>)
 8000d18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000d1c:	61fb      	str	r3, [r7, #28]
    psi = mpu.pose[2] * M_PI / 180;
 8000d1e:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <stanleyTask+0x174>)
 8000d20:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8000d24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d28:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8000df8 <stanleyTask+0x150>
 8000d2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d30:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8000e00 <stanleyTask+0x158>
 8000d34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d3c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    vel = 0.5;
 8000d40:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    calculateCrosstrackError(&stanley, &vehicle_pos, &p1, &p2);
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	f107 0210 	add.w	r2, r7, #16
 8000d4e:	f107 0118 	add.w	r1, r7, #24
 8000d52:	4831      	ldr	r0, [pc, #196]	; (8000e18 <stanleyTask+0x170>)
 8000d54:	f001 fa04 	bl	8002160 <calculateCrosstrackError>
    setYawAngle(&stanley, psi);
 8000d58:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8000d5c:	482e      	ldr	r0, [pc, #184]	; (8000e18 <stanleyTask+0x170>)
 8000d5e:	f001 fbb5 	bl	80024cc <setYawAngle>
    calculateSteering(&stanley, vel, precision);
 8000d62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d66:	4619      	mov	r1, r3
 8000d68:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8000d6c:	482a      	ldr	r0, [pc, #168]	; (8000e18 <stanleyTask+0x170>)
 8000d6e:	f001 fbbf 	bl	80024f0 <calculateSteering>
    osMutexWait(myMutex01Handle, osWaitForever);
 8000d72:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <stanleyTask+0x178>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f008 fa59 	bl	8009232 <osMutexAcquire>
    printf(" Pose XYZ:");
 8000d80:	4828      	ldr	r0, [pc, #160]	; (8000e24 <stanleyTask+0x17c>)
 8000d82:	f00b ff81 	bl	800cc88 <iprintf>
	for(int i = 0; i<3;i++){
 8000d86:	2300      	movs	r3, #0
 8000d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d8a:	e011      	b.n	8000db0 <stanleyTask+0x108>
	   printf("{%05.1f}",mpu.pose[i]);
 8000d8c:	4a23      	ldr	r2, [pc, #140]	; (8000e1c <stanleyTask+0x174>)
 8000d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d90:	332c      	adds	r3, #44	; 0x2c
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	3304      	adds	r3, #4
 8000d98:	edd3 7a00 	vldr	s15, [r3]
 8000d9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000da0:	ec53 2b17 	vmov	r2, r3, d7
 8000da4:	4820      	ldr	r0, [pc, #128]	; (8000e28 <stanleyTask+0x180>)
 8000da6:	f00b ff6f 	bl	800cc88 <iprintf>
	for(int i = 0; i<3;i++){
 8000daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dac:	3301      	adds	r3, #1
 8000dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	ddea      	ble.n	8000d8c <stanleyTask+0xe4>
	}
	printf(" Delta: {%05.1f}",stanley.delta * 180 / M_PI);
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <stanleyTask+0x170>)
 8000db8:	edd3 7a02 	vldr	s15, [r3, #8]
 8000dbc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000e2c <stanleyTask+0x184>
 8000dc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dc8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000df8 <stanleyTask+0x150>
 8000dcc:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000dd0:	ec53 2b15 	vmov	r2, r3, d5
 8000dd4:	4816      	ldr	r0, [pc, #88]	; (8000e30 <stanleyTask+0x188>)
 8000dd6:	f00b ff57 	bl	800cc88 <iprintf>
	printf("\r\n");
 8000dda:	4816      	ldr	r0, [pc, #88]	; (8000e34 <stanleyTask+0x18c>)
 8000ddc:	f00b ffba 	bl	800cd54 <puts>
    osMutexRelease(myMutex01Handle);
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <stanleyTask+0x178>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f008 fa6f 	bl	80092c8 <osMutexRelease>
    osDelay(50);
 8000dea:	2032      	movs	r0, #50	; 0x32
 8000dec:	f008 f980 	bl	80090f0 <osDelay>
    vehicle_pos.x = mpu.pose[0];
 8000df0:	e78d      	b.n	8000d0e <stanleyTask+0x66>
 8000df2:	bf00      	nop
 8000df4:	f3af 8000 	nop.w
 8000df8:	54442d18 	.word	0x54442d18
 8000dfc:	400921fb 	.word	0x400921fb
 8000e00:	00000000 	.word	0x00000000
 8000e04:	40668000 	.word	0x40668000
 8000e08:	0800fd60 	.word	0x0800fd60
 8000e0c:	40a00000 	.word	0x40a00000
 8000e10:	3c23d70a 	.word	0x3c23d70a
 8000e14:	41200000 	.word	0x41200000
 8000e18:	240002b8 	.word	0x240002b8
 8000e1c:	240001f8 	.word	0x240001f8
 8000e20:	240002f8 	.word	0x240002f8
 8000e24:	0800fd30 	.word	0x0800fd30
 8000e28:	0800fd3c 	.word	0x0800fd3c
 8000e2c:	43340000 	.word	0x43340000
 8000e30:	0800fd48 	.word	0x0800fd48
 8000e34:	0800fd5c 	.word	0x0800fd5c

08000e38 <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	4b56      	ldr	r3, [pc, #344]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	4a54      	ldr	r2, [pc, #336]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5e:	4b52      	ldr	r3, [pc, #328]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6c:	4b4e      	ldr	r3, [pc, #312]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	4a4d      	ldr	r2, [pc, #308]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7c:	4b4a      	ldr	r3, [pc, #296]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b47      	ldr	r3, [pc, #284]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	4a45      	ldr	r2, [pc, #276]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9a:	4b43      	ldr	r3, [pc, #268]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea8:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eae:	4a3e      	ldr	r2, [pc, #248]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb8:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ecc:	4a36      	ldr	r2, [pc, #216]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed6:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee4:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eea:	4a2f      	ldr	r2, [pc, #188]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000eec:	f043 0310 	orr.w	r3, r3, #16
 8000ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef4:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2110      	movs	r1, #16
 8000f06:	4829      	ldr	r0, [pc, #164]	; (8000fac <MX_GPIO_Init+0x174>)
 8000f08:	f002 fac4 	bl	8003494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_Green_GPIO_Port, LD1_Green_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4827      	ldr	r0, [pc, #156]	; (8000fb0 <MX_GPIO_Init+0x178>)
 8000f12:	f002 fabf 	bl	8003494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CE_Pin_Pin|CSN_Pin_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000f1c:	4825      	ldr	r0, [pc, #148]	; (8000fb4 <MX_GPIO_Init+0x17c>)
 8000f1e:	f002 fab9 	bl	8003494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_yellow_GPIO_Port, LD2_yellow_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2102      	movs	r1, #2
 8000f26:	4824      	ldr	r0, [pc, #144]	; (8000fb8 <MX_GPIO_Init+0x180>)
 8000f28:	f002 fab4 	bl	8003494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	481a      	ldr	r0, [pc, #104]	; (8000fac <MX_GPIO_Init+0x174>)
 8000f44:	f002 f8f6 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Green_Pin;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_Green_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4814      	ldr	r0, [pc, #80]	; (8000fb0 <MX_GPIO_Init+0x178>)
 8000f60:	f002 f8e8 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CE_Pin_Pin|CSN_Pin_Pin;
 8000f64:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <MX_GPIO_Init+0x17c>)
 8000f7e:	f002 f8d9 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_yellow_Pin;
 8000f82:	2302      	movs	r3, #2
 8000f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_yellow_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4619      	mov	r1, r3
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <MX_GPIO_Init+0x180>)
 8000f9a:	f002 f8cb 	bl	8003134 <HAL_GPIO_Init>

}
 8000f9e:	bf00      	nop
 8000fa0:	3730      	adds	r7, #48	; 0x30
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	58024400 	.word	0x58024400
 8000fac:	58020000 	.word	0x58020000
 8000fb0:	58020400 	.word	0x58020400
 8000fb4:	58020c00 	.word	0x58020c00
 8000fb8:	58021000 	.word	0x58021000

08000fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fc6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000fc8:	bf00      	nop
 8000fca:	4b28      	ldr	r3, [pc, #160]	; (800106c <main+0xb0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d004      	beq.n	8000fe0 <main+0x24>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	1e5a      	subs	r2, r3, #1
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	dcf4      	bgt.n	8000fca <main+0xe>
  if ( timeout < 0 )
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	da01      	bge.n	8000fea <main+0x2e>
  {
  Error_Handler();
 8000fe6:	f000 f8bd 	bl	8001164 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fea:	f001 fefd 	bl	8002de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fee:	f000 f83f 	bl	8001070 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	; (800106c <main+0xb0>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff8:	4a1c      	ldr	r2, [pc, #112]	; (800106c <main+0xb0>)
 8000ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <main+0xb0>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001010:	2000      	movs	r0, #0
 8001012:	f002 fa73 	bl	80034fc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001016:	2100      	movs	r1, #0
 8001018:	2000      	movs	r0, #0
 800101a:	f002 fa89 	bl	8003530 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800101e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001022:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001024:	bf00      	nop
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <main+0xb0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d104      	bne.n	800103c <main+0x80>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	dcf4      	bgt.n	8001026 <main+0x6a>
if ( timeout < 0 )
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	da01      	bge.n	8001046 <main+0x8a>
{
Error_Handler();
 8001042:	f000 f88f 	bl	8001164 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f7ff fef7 	bl	8000e38 <MX_GPIO_Init>
  MX_SPI1_Init();
 800104a:	f000 feb5 	bl	8001db8 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800104e:	f001 fdef 	bl	8002c30 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001052:	f000 ff09 	bl	8001e68 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001056:	f001 fc65 	bl	8002924 <MX_TIM2_Init>
  MX_TIM3_Init();
 800105a:	f001 fcd9 	bl	8002a10 <MX_TIM3_Init>
//  setPwmS(&servoValues);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800105e:	f007 ff6b 	bl	8008f38 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001062:	f7ff fc19 	bl	8000898 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001066:	f007 ff8b 	bl	8008f80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800106a:	e7fe      	b.n	800106a <main+0xae>
 800106c:	58024400 	.word	0x58024400

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b09c      	sub	sp, #112	; 0x70
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107a:	224c      	movs	r2, #76	; 0x4c
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f00b ff48 	bl	800cf14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2220      	movs	r2, #32
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f00b ff42 	bl	800cf14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001090:	2004      	movs	r0, #4
 8001092:	f002 fa61 	bl	8003558 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	4b30      	ldr	r3, [pc, #192]	; (800115c <SystemClock_Config+0xec>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	4a2f      	ldr	r2, [pc, #188]	; (800115c <SystemClock_Config+0xec>)
 80010a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010a4:	6193      	str	r3, [r2, #24]
 80010a6:	4b2d      	ldr	r3, [pc, #180]	; (800115c <SystemClock_Config+0xec>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <SystemClock_Config+0xf0>)
 80010b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b4:	4a2a      	ldr	r2, [pc, #168]	; (8001160 <SystemClock_Config+0xf0>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <SystemClock_Config+0xf0>)
 80010be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010c8:	bf00      	nop
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <SystemClock_Config+0xec>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010d6:	d1f8      	bne.n	80010ca <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d8:	2301      	movs	r3, #1
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e2:	2302      	movs	r3, #2
 80010e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e6:	2302      	movs	r3, #2
 80010e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80010ee:	2378      	movs	r3, #120	; 0x78
 80010f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80010f6:	2305      	movs	r3, #5
 80010f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010fe:	230c      	movs	r3, #12
 8001100:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001102:	2300      	movs	r3, #0
 8001104:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110e:	4618      	mov	r0, r3
 8001110:	f002 fa7c 	bl	800360c <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800111a:	f000 f823 	bl	8001164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	233f      	movs	r3, #63	; 0x3f
 8001120:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001122:	2303      	movs	r3, #3
 8001124:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800112a:	2308      	movs	r3, #8
 800112c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800112e:	2340      	movs	r3, #64	; 0x40
 8001130:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001132:	2340      	movs	r3, #64	; 0x40
 8001134:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800113c:	2340      	movs	r3, #64	; 0x40
 800113e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2104      	movs	r1, #4
 8001144:	4618      	mov	r0, r3
 8001146:	f002 fe8f 	bl	8003e68 <HAL_RCC_ClockConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001150:	f000 f808 	bl	8001164 <Error_Handler>
  }
}
 8001154:	bf00      	nop
 8001156:	3770      	adds	r7, #112	; 0x70
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	58024800 	.word	0x58024800
 8001160:	58000400 	.word	0x58000400

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116c:	e7fe      	b.n	800116c <Error_Handler+0x8>

0800116e <initMPU9250>:
#include "spi.h"
#include "stm32h7xx_hal.h"
#include "myprintf.h"

void initMPU9250(struct mpu9250 * mpu9250, uint8_t Ascale, uint8_t Gscale, uint8_t sampleRate)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	4608      	mov	r0, r1
 8001178:	4611      	mov	r1, r2
 800117a:	461a      	mov	r2, r3
 800117c:	4603      	mov	r3, r0
 800117e:	70fb      	strb	r3, [r7, #3]
 8001180:	460b      	mov	r3, r1
 8001182:	70bb      	strb	r3, [r7, #2]
 8001184:	4613      	mov	r3, r2
 8001186:	707b      	strb	r3, [r7, #1]
  for (int i = 0 ; i < 3 ; i++){
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	e040      	b.n	8001210 <initMPU9250+0xa2>
    for(int j = 0 ; j < filt_size ; j++){
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	e01d      	b.n	80011d0 <initMPU9250+0x62>
      mpu9250->accBuff[i][j] = 0;
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4413      	add	r3, r2
 80011a2:	330e      	adds	r3, #14
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
      mpu9250->gyroBuff[i][j] = 0;
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4413      	add	r3, r2
 80011bc:	331c      	adds	r3, #28
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	3304      	adds	r3, #4
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
    for(int j = 0 ; j < filt_size ; j++){
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	3301      	adds	r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	ddde      	ble.n	8001194 <initMPU9250+0x26>
    }
    mpu9250->acc[i] = 0;
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3306      	adds	r3, #6
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	3304      	adds	r3, #4
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
    mpu9250->gyro[i] = 0;
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	330a      	adds	r3, #10
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
    mpu9250->pose[i] = 0;
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	332c      	adds	r3, #44	; 0x2c
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	3304      	adds	r3, #4
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
  for (int i = 0 ; i < 3 ; i++){
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	2b02      	cmp	r3, #2
 8001214:	ddbb      	ble.n	800118e <initMPU9250+0x20>
  }

  mpu9250->buffPointer = 0;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	uint8_t c;
 // wake up device
  mpu9250_write_reg(PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 800121e:	2100      	movs	r1, #0
 8001220:	206b      	movs	r0, #107	; 0x6b
 8001222:	f000 ff27 	bl	8002074 <mpu9250_write_reg>
  HAL_Delay(100); // Wait for all registers to reset
 8001226:	2064      	movs	r0, #100	; 0x64
 8001228:	f001 fe70 	bl	8002f0c <HAL_Delay>

 // get stable time source
  mpu9250_write_reg(PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 800122c:	2101      	movs	r1, #1
 800122e:	206b      	movs	r0, #107	; 0x6b
 8001230:	f000 ff20 	bl	8002074 <mpu9250_write_reg>
  HAL_Delay(200);
 8001234:	20c8      	movs	r0, #200	; 0xc8
 8001236:	f001 fe69 	bl	8002f0c <HAL_Delay>
 // Disable FSYNC and set thermometer and gyro bandwidth to 41 and 42 Hz, respectively;
 // minimum HAL_HAL_Delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
 // be higher than 1 / 0.0059 = 170 Hz
 // DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
 // With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
  mpu9250_write_reg(CONFIG, 0x03);
 800123a:	2103      	movs	r1, #3
 800123c:	201a      	movs	r0, #26
 800123e:	f000 ff19 	bl	8002074 <mpu9250_write_reg>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  mpu9250_write_reg(SMPLRT_DIV, sampleRate);  // Use a 200 Hz rate; a rate consistent with the filter update rate
 8001242:	787b      	ldrb	r3, [r7, #1]
 8001244:	4619      	mov	r1, r3
 8001246:	2019      	movs	r0, #25
 8001248:	f000 ff14 	bl	8002074 <mpu9250_write_reg>
                                                       // determined inset in CONFIG above

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  mpu9250_read_reg(GYRO_CONFIG, &c,sizeof(c)); // get current GYRO_CONFIG register value
 800124c:	f107 030f 	add.w	r3, r7, #15
 8001250:	2201      	movs	r2, #1
 8001252:	4619      	mov	r1, r3
 8001254:	201b      	movs	r0, #27
 8001256:	f000 ff33 	bl	80020c0 <mpu9250_read_reg>
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	f023 0302 	bic.w	r3, r3, #2
 8001260:	b2db      	uxtb	r3, r3
 8001262:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x18; // Clear AFS bits [4:3]
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	f023 0318 	bic.w	r3, r3, #24
 800126a:	b2db      	uxtb	r3, r3
 800126c:	73fb      	strb	r3, [r7, #15]
  c = c | Gscale << 3; // Set full scale range for the gyro
 800126e:	78bb      	ldrb	r3, [r7, #2]
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	b25a      	sxtb	r2, r3
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	b25b      	sxtb	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b25b      	sxtb	r3, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	73fb      	strb	r3, [r7, #15]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
  mpu9250_write_reg(GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	4619      	mov	r1, r3
 8001284:	201b      	movs	r0, #27
 8001286:	f000 fef5 	bl	8002074 <mpu9250_write_reg>

 // Set accelerometer full-scale range configuration
  mpu9250_read_reg(ACCEL_CONFIG, &c, sizeof(c)); // get current ACCEL_CONFIG register value
 800128a:	f107 030f 	add.w	r3, r7, #15
 800128e:	2201      	movs	r2, #1
 8001290:	4619      	mov	r1, r3
 8001292:	201c      	movs	r0, #28
 8001294:	f000 ff14 	bl	80020c0 <mpu9250_read_reg>
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	f023 0318 	bic.w	r3, r3, #24
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	73fb      	strb	r3, [r7, #15]
  c = c | Ascale << 3; // Set full scale range for the accelerometer
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	b25a      	sxtb	r2, r3
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	73fb      	strb	r3, [r7, #15]
  mpu9250_write_reg(ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	4619      	mov	r1, r3
 80012b8:	201c      	movs	r0, #28
 80012ba:	f000 fedb 	bl	8002074 <mpu9250_write_reg>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  mpu9250_read_reg(ACCEL_CONFIG2, &c, sizeof(c)); // get current ACCEL_CONFIG2 register value
 80012be:	f107 030f 	add.w	r3, r7, #15
 80012c2:	2201      	movs	r2, #1
 80012c4:	4619      	mov	r1, r3
 80012c6:	201d      	movs	r0, #29
 80012c8:	f000 fefa 	bl	80020c0 <mpu9250_read_reg>
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	f023 030f 	bic.w	r3, r3, #15
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	73fb      	strb	r3, [r7, #15]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	f043 0303 	orr.w	r3, r3, #3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	73fb      	strb	r3, [r7, #15]
  mpu9250_write_reg(ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	4619      	mov	r1, r3
 80012e4:	201d      	movs	r0, #29
 80012e6:	f000 fec5 	bl	8002074 <mpu9250_write_reg>
  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
  // clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
//   mpu9250_write_reg(INT_PIN_CFG, 0x22);
   mpu9250_write_reg(INT_PIN_CFG, 0x12);  // INT is 50 microsecond pulse and any read to clear
 80012ea:	2112      	movs	r1, #18
 80012ec:	2037      	movs	r0, #55	; 0x37
 80012ee:	f000 fec1 	bl	8002074 <mpu9250_write_reg>
   mpu9250_write_reg(INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 80012f2:	2101      	movs	r1, #1
 80012f4:	2038      	movs	r0, #56	; 0x38
 80012f6:	f000 febd 	bl	8002074 <mpu9250_write_reg>
   HAL_Delay(100);
 80012fa:	2064      	movs	r0, #100	; 0x64
 80012fc:	f001 fe06 	bl	8002f0c <HAL_Delay>
}
 8001300:	bf00      	nop
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <calibrateMPU9250>:

void calibrateMPU9250(float * dest1, float * dest2)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b098      	sub	sp, #96	; 0x60
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8001312:	2300      	movs	r3, #0
 8001314:	63bb      	str	r3, [r7, #56]	; 0x38
 8001316:	2300      	movs	r3, #0
 8001318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800131a:	2300      	movs	r3, #0
 800131c:	643b      	str	r3, [r7, #64]	; 0x40
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001322:	2300      	movs	r3, #0
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
 8001326:	2300      	movs	r3, #0
 8001328:	637b      	str	r3, [r7, #52]	; 0x34

 // reset device
  mpu9250_write_reg(PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	206b      	movs	r0, #107	; 0x6b
 800132e:	f000 fea1 	bl	8002074 <mpu9250_write_reg>
  HAL_Delay(100);
 8001332:	2064      	movs	r0, #100	; 0x64
 8001334:	f001 fdea 	bl	8002f0c <HAL_Delay>

 // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
 // else use the internal oscillator, bits 2:0 = 001
  mpu9250_write_reg(PWR_MGMT_1, 0x01);
 8001338:	2101      	movs	r1, #1
 800133a:	206b      	movs	r0, #107	; 0x6b
 800133c:	f000 fe9a 	bl	8002074 <mpu9250_write_reg>
  mpu9250_write_reg(PWR_MGMT_2, 0x00);
 8001340:	2100      	movs	r1, #0
 8001342:	206c      	movs	r0, #108	; 0x6c
 8001344:	f000 fe96 	bl	8002074 <mpu9250_write_reg>
  HAL_Delay(200);
 8001348:	20c8      	movs	r0, #200	; 0xc8
 800134a:	f001 fddf 	bl	8002f0c <HAL_Delay>

// Configure device for bias calculation
  mpu9250_write_reg(INT_ENABLE, 0x00);   // Disable all interrupts
 800134e:	2100      	movs	r1, #0
 8001350:	2038      	movs	r0, #56	; 0x38
 8001352:	f000 fe8f 	bl	8002074 <mpu9250_write_reg>
  mpu9250_write_reg(FIFO_EN, 0x00);      // Disable FIFO
 8001356:	2100      	movs	r1, #0
 8001358:	2023      	movs	r0, #35	; 0x23
 800135a:	f000 fe8b 	bl	8002074 <mpu9250_write_reg>
  mpu9250_write_reg(PWR_MGMT_1, 0x00);   // Turn on internal clock source
 800135e:	2100      	movs	r1, #0
 8001360:	206b      	movs	r0, #107	; 0x6b
 8001362:	f000 fe87 	bl	8002074 <mpu9250_write_reg>
  mpu9250_write_reg(I2C_MST_CTRL, 0x00); // Disable I2C master
 8001366:	2100      	movs	r1, #0
 8001368:	2024      	movs	r0, #36	; 0x24
 800136a:	f000 fe83 	bl	8002074 <mpu9250_write_reg>
  mpu9250_write_reg(USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 800136e:	2100      	movs	r1, #0
 8001370:	206a      	movs	r0, #106	; 0x6a
 8001372:	f000 fe7f 	bl	8002074 <mpu9250_write_reg>
  mpu9250_write_reg(USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001376:	210c      	movs	r1, #12
 8001378:	206a      	movs	r0, #106	; 0x6a
 800137a:	f000 fe7b 	bl	8002074 <mpu9250_write_reg>
  HAL_Delay(15);
 800137e:	200f      	movs	r0, #15
 8001380:	f001 fdc4 	bl	8002f0c <HAL_Delay>

// Configure MPU6050 gyro and accelerometer for bias calculation
  mpu9250_write_reg(CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8001384:	2101      	movs	r1, #1
 8001386:	201a      	movs	r0, #26
 8001388:	f000 fe74 	bl	8002074 <mpu9250_write_reg>
  mpu9250_write_reg(SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 800138c:	2100      	movs	r1, #0
 800138e:	2019      	movs	r0, #25
 8001390:	f000 fe70 	bl	8002074 <mpu9250_write_reg>
  mpu9250_write_reg(GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001394:	2100      	movs	r1, #0
 8001396:	201b      	movs	r0, #27
 8001398:	f000 fe6c 	bl	8002074 <mpu9250_write_reg>
  mpu9250_write_reg(ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 800139c:	2100      	movs	r1, #0
 800139e:	201c      	movs	r0, #28
 80013a0:	f000 fe68 	bl	8002074 <mpu9250_write_reg>

  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 80013a4:	2383      	movs	r3, #131	; 0x83
 80013a6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 80013aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ae:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
  mpu9250_write_reg(USER_CTRL, 0x40);   // Enable FIFO
 80013b2:	2140      	movs	r1, #64	; 0x40
 80013b4:	206a      	movs	r0, #106	; 0x6a
 80013b6:	f000 fe5d 	bl	8002074 <mpu9250_write_reg>
  mpu9250_write_reg(FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 80013ba:	2178      	movs	r1, #120	; 0x78
 80013bc:	2023      	movs	r0, #35	; 0x23
 80013be:	f000 fe59 	bl	8002074 <mpu9250_write_reg>
  HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 80013c2:	2028      	movs	r0, #40	; 0x28
 80013c4:	f001 fda2 	bl	8002f0c <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  mpu9250_write_reg(FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 80013c8:	2100      	movs	r1, #0
 80013ca:	2023      	movs	r0, #35	; 0x23
 80013cc:	f000 fe52 	bl	8002074 <mpu9250_write_reg>
  mpu9250_read_reg(FIFO_COUNTH,  &data[0], 2); // read FIFO sample count
 80013d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013d4:	2202      	movs	r2, #2
 80013d6:	4619      	mov	r1, r3
 80013d8:	2072      	movs	r0, #114	; 0x72
 80013da:	f000 fe71 	bl	80020c0 <mpu9250_read_reg>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 80013de:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 80013f4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80013f8:	4ac0      	ldr	r2, [pc, #768]	; (80016fc <calibrateMPU9250+0x3f4>)
 80013fa:	fba2 2303 	umull	r2, r3, r2, r3
 80013fe:	08db      	lsrs	r3, r3, #3
 8001400:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

  for (ii = 0; ii < packet_count; ii++) {
 8001404:	2300      	movs	r3, #0
 8001406:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800140a:	e071      	b.n	80014f0 <calibrateMPU9250+0x1e8>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 800140c:	2300      	movs	r3, #0
 800140e:	82bb      	strh	r3, [r7, #20]
 8001410:	2300      	movs	r3, #0
 8001412:	82fb      	strh	r3, [r7, #22]
 8001414:	2300      	movs	r3, #0
 8001416:	833b      	strh	r3, [r7, #24]
 8001418:	2300      	movs	r3, #0
 800141a:	81bb      	strh	r3, [r7, #12]
 800141c:	2300      	movs	r3, #0
 800141e:	81fb      	strh	r3, [r7, #14]
 8001420:	2300      	movs	r3, #0
 8001422:	823b      	strh	r3, [r7, #16]
    mpu9250_read_reg(FIFO_R_W,  &data[0], 12); // read data for averaging
 8001424:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001428:	220c      	movs	r2, #12
 800142a:	4619      	mov	r1, r3
 800142c:	2074      	movs	r0, #116	; 0x74
 800142e:	f000 fe47 	bl	80020c0 <mpu9250_read_reg>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8001432:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	b21a      	sxth	r2, r3
 800143a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800143e:	b21b      	sxth	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b21b      	sxth	r3, r3
 8001444:	82bb      	strh	r3, [r7, #20]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8001446:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	b21a      	sxth	r2, r3
 800144e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001452:	b21b      	sxth	r3, r3
 8001454:	4313      	orrs	r3, r2
 8001456:	b21b      	sxth	r3, r3
 8001458:	82fb      	strh	r3, [r7, #22]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 800145a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21b      	sxth	r3, r3
 800146c:	833b      	strh	r3, [r7, #24]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 800146e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21a      	sxth	r2, r3
 8001476:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800147a:	b21b      	sxth	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b21b      	sxth	r3, r3
 8001480:	81bb      	strh	r3, [r7, #12]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8001482:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b21a      	sxth	r2, r3
 800148a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800148e:	b21b      	sxth	r3, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	b21b      	sxth	r3, r3
 8001494:	81fb      	strh	r3, [r7, #14]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001496:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	b21a      	sxth	r2, r3
 800149e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	823b      	strh	r3, [r7, #16]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 80014aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ac:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80014b0:	4413      	add	r3, r2
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] += (int32_t) accel_temp[1];
 80014b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014ba:	4413      	add	r3, r2
 80014bc:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] += (int32_t) accel_temp[2];
 80014be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014c4:	4413      	add	r3, r2
 80014c6:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 80014c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 80014d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014d4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014d8:	4413      	add	r3, r2
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 80014dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014de:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80014e2:	4413      	add	r3, r2
 80014e4:	643b      	str	r3, [r7, #64]	; 0x40
  for (ii = 0; ii < packet_count; ii++) {
 80014e6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80014ea:	3301      	adds	r3, #1
 80014ec:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80014f0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80014f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d387      	bcc.n	800140c <calibrateMPU9250+0x104>

  }

    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 80014fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001502:	fb92 f3f3 	sdiv	r3, r2, r3
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] /= (int32_t) packet_count;
 8001508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800150a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800150e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] /= (int32_t) packet_count;
 8001514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001516:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800151a:	fb92 f3f3 	sdiv	r3, r2, r3
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  /= (int32_t) packet_count;
 8001520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001522:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001526:	fb92 f3f3 	sdiv	r3, r2, r3
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  /= (int32_t) packet_count;
 800152c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800152e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001532:	fb92 f3f3 	sdiv	r3, r2, r3
 8001536:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  /= (int32_t) packet_count;
 8001538:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800153a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800153e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001542:	643b      	str	r3, [r7, #64]	; 0x40

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8001544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001546:	2b00      	cmp	r3, #0
 8001548:	dd05      	ble.n	8001556 <calibrateMPU9250+0x24e>
 800154a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800154c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	637b      	str	r3, [r7, #52]	; 0x34
 8001554:	e004      	b.n	8001560 <calibrateMPU9250+0x258>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 8001556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001558:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800155c:	4413      	add	r3, r2
 800155e:	637b      	str	r3, [r7, #52]	; 0x34

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001562:	425b      	negs	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	da00      	bge.n	800156a <calibrateMPU9250+0x262>
 8001568:	3303      	adds	r3, #3
 800156a:	109b      	asrs	r3, r3, #2
 800156c:	121b      	asrs	r3, r3, #8
 800156e:	b2db      	uxtb	r3, r3
 8001570:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001576:	425b      	negs	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	da00      	bge.n	800157e <calibrateMPU9250+0x276>
 800157c:	3303      	adds	r3, #3
 800157e:	109b      	asrs	r3, r3, #2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8001586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001588:	425b      	negs	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	da00      	bge.n	8001590 <calibrateMPU9250+0x288>
 800158e:	3303      	adds	r3, #3
 8001590:	109b      	asrs	r3, r3, #2
 8001592:	121b      	asrs	r3, r3, #8
 8001594:	b2db      	uxtb	r3, r3
 8001596:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 800159a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800159c:	425b      	negs	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	da00      	bge.n	80015a4 <calibrateMPU9250+0x29c>
 80015a2:	3303      	adds	r3, #3
 80015a4:	109b      	asrs	r3, r3, #2
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 80015ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015ae:	425b      	negs	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	da00      	bge.n	80015b6 <calibrateMPU9250+0x2ae>
 80015b4:	3303      	adds	r3, #3
 80015b6:	109b      	asrs	r3, r3, #2
 80015b8:	121b      	asrs	r3, r3, #8
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 80015c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015c2:	425b      	negs	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	da00      	bge.n	80015ca <calibrateMPU9250+0x2c2>
 80015c8:	3303      	adds	r3, #3
 80015ca:	109b      	asrs	r3, r3, #2
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

// Push gyro biases to hardware registers
  mpu9250_write_reg(XG_OFFSET_H, data[0]);
 80015d2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80015d6:	4619      	mov	r1, r3
 80015d8:	2013      	movs	r0, #19
 80015da:	f000 fd4b 	bl	8002074 <mpu9250_write_reg>
  mpu9250_write_reg(XG_OFFSET_L, data[1]);
 80015de:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80015e2:	4619      	mov	r1, r3
 80015e4:	2014      	movs	r0, #20
 80015e6:	f000 fd45 	bl	8002074 <mpu9250_write_reg>
  mpu9250_write_reg(YG_OFFSET_H, data[2]);
 80015ea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80015ee:	4619      	mov	r1, r3
 80015f0:	2015      	movs	r0, #21
 80015f2:	f000 fd3f 	bl	8002074 <mpu9250_write_reg>
  mpu9250_write_reg(YG_OFFSET_L, data[3]);
 80015f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015fa:	4619      	mov	r1, r3
 80015fc:	2016      	movs	r0, #22
 80015fe:	f000 fd39 	bl	8002074 <mpu9250_write_reg>
  mpu9250_write_reg(ZG_OFFSET_H, data[4]);
 8001602:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001606:	4619      	mov	r1, r3
 8001608:	2017      	movs	r0, #23
 800160a:	f000 fd33 	bl	8002074 <mpu9250_write_reg>
  mpu9250_write_reg(ZG_OFFSET_L, data[5]);
 800160e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001612:	4619      	mov	r1, r3
 8001614:	2018      	movs	r0, #24
 8001616:	f000 fd2d 	bl	8002074 <mpu9250_write_reg>

// Output scaled gyro biases for display in the main program
  dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 800161a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800161c:	ee07 3a90 	vmov	s15, r3
 8001620:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001624:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	edc3 7a00 	vstr	s15, [r3]
  dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 800163a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001644:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001648:	ee07 3a90 	vmov	s15, r3
 800164c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3304      	adds	r3, #4
 8001654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001658:	edc3 7a00 	vstr	s15, [r3]
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 800165c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800165e:	ee07 3a90 	vmov	s15, r3
 8001662:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001666:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3308      	adds	r3, #8
 8001676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800167a:	edc3 7a00 	vstr	s15, [r3]
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
 8001686:	2300      	movs	r3, #0
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
  mpu9250_read_reg(XA_OFFSET_H, &data[0] ,2); // Read factory accelerometer trim values
 800168a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800168e:	2202      	movs	r2, #2
 8001690:	4619      	mov	r1, r3
 8001692:	2077      	movs	r0, #119	; 0x77
 8001694:	f000 fd14 	bl	80020c0 <mpu9250_read_reg>
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8001698:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80016a2:	4313      	orrs	r3, r2
 80016a4:	623b      	str	r3, [r7, #32]
  mpu9250_read_reg(YA_OFFSET_H, &data[0], 2);
 80016a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016aa:	2202      	movs	r2, #2
 80016ac:	4619      	mov	r1, r3
 80016ae:	207a      	movs	r0, #122	; 0x7a
 80016b0:	f000 fd06 	bl	80020c0 <mpu9250_read_reg>
  accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 80016b4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80016be:	4313      	orrs	r3, r2
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
  mpu9250_read_reg(ZA_OFFSET_H,  &data[0], 2);
 80016c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016c6:	2202      	movs	r2, #2
 80016c8:	4619      	mov	r1, r3
 80016ca:	207d      	movs	r0, #125	; 0x7d
 80016cc:	f000 fcf8 	bl	80020c0 <mpu9250_read_reg>
  accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 80016d0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80016da:	4313      	orrs	r3, r2
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 80016de:	2301      	movs	r3, #1
 80016e0:	653b      	str	r3, [r7, #80]	; 0x50
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 80016e2:	4a07      	ldr	r2, [pc, #28]	; (8001700 <calibrateMPU9250+0x3f8>)
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	4611      	mov	r1, r2
 80016ec:	8019      	strh	r1, [r3, #0]
 80016ee:	3302      	adds	r3, #2
 80016f0:	0c12      	lsrs	r2, r2, #16
 80016f2:	701a      	strb	r2, [r3, #0]

  for(ii = 0; ii < 3; ii++) {
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80016fa:	e01b      	b.n	8001734 <calibrateMPU9250+0x42c>
 80016fc:	aaaaaaab 	.word	0xaaaaaaab
 8001700:	0800fd68 	.word	0x0800fd68
    if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8001704:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	3360      	adds	r3, #96	; 0x60
 800170c:	443b      	add	r3, r7
 800170e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8001712:	461a      	mov	r2, r3
 8001714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001716:	4013      	ands	r3, r2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <calibrateMPU9250+0x422>
 800171c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001720:	3360      	adds	r3, #96	; 0x60
 8001722:	443b      	add	r3, r7
 8001724:	2201      	movs	r2, #1
 8001726:	f803 2c44 	strb.w	r2, [r3, #-68]
  for(ii = 0; ii < 3; ii++) {
 800172a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800172e:	3301      	adds	r3, #1
 8001730:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001734:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001738:	2b02      	cmp	r3, #2
 800173a:	d9e3      	bls.n	8001704 <calibrateMPU9250+0x3fc>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 800173c:	6a3a      	ldr	r2, [r7, #32]
 800173e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001740:	2b00      	cmp	r3, #0
 8001742:	da00      	bge.n	8001746 <calibrateMPU9250+0x43e>
 8001744:	3307      	adds	r3, #7
 8001746:	10db      	asrs	r3, r3, #3
 8001748:	425b      	negs	r3, r3
 800174a:	4413      	add	r3, r2
 800174c:	623b      	str	r3, [r7, #32]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 800174e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001752:	2b00      	cmp	r3, #0
 8001754:	da00      	bge.n	8001758 <calibrateMPU9250+0x450>
 8001756:	3307      	adds	r3, #7
 8001758:	10db      	asrs	r3, r3, #3
 800175a:	425b      	negs	r3, r3
 800175c:	4413      	add	r3, r2
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
  accel_bias_reg[2] -= (accel_bias[2]/8);
 8001760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001764:	2b00      	cmp	r3, #0
 8001766:	da00      	bge.n	800176a <calibrateMPU9250+0x462>
 8001768:	3307      	adds	r3, #7
 800176a:	10db      	asrs	r3, r3, #3
 800176c:	425b      	negs	r3, r3
 800176e:	4413      	add	r3, r2
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	121b      	asrs	r3, r3, #8
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (accel_bias_reg[0])      & 0xFF;
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001784:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001788:	7f3b      	ldrb	r3, [r7, #28]
 800178a:	4313      	orrs	r3, r2
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	121b      	asrs	r3, r3, #8
 8001796:	b2db      	uxtb	r3, r3
 8001798:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (accel_bias_reg[1])      & 0xFF;
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80017a4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80017a8:	7f7b      	ldrb	r3, [r7, #29]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80017b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b4:	121b      	asrs	r3, r3, #8
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (accel_bias_reg[2])      & 0xFF;
 80017bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80017c4:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80017c8:	7fbb      	ldrb	r3, [r7, #30]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
//  mpu9250_write_reg(YA_OFFSET_L, data[3]);
//  mpu9250_write_reg(ZA_OFFSET_H, data[4]);
//  mpu9250_write_reg(ZA_OFFSET_L, data[5]);

// Output scaled accelerometer biases for display in the main program
   dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017dc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80017e0:	ee07 3a90 	vmov	s15, r3
 80017e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	edc3 7a00 	vstr	s15, [r3]
   dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 80017f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017fc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	3304      	adds	r3, #4
 800180c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001810:	edc3 7a00 	vstr	s15, [r3]
   dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8001814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001816:	ee07 3a90 	vmov	s15, r3
 800181a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800181e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001822:	ee07 3a90 	vmov	s15, r3
 8001826:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	3308      	adds	r3, #8
 800182e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001832:	edc3 7a00 	vstr	s15, [r3]
}
 8001836:	bf00      	nop
 8001838:	3760      	adds	r7, #96	; 0x60
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop

08001840 <readMPU9250Data>:

void readMPU9250Data(int16_t * destination)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint8_t rawData[14];  // x/y/z accel register data stored here
  mpu9250_read_reg(ACCEL_XOUT_H ,rawData, 14);  // Read the 14 raw data registers into data array
 8001848:	f107 0308 	add.w	r3, r7, #8
 800184c:	220e      	movs	r2, #14
 800184e:	4619      	mov	r1, r3
 8001850:	203b      	movs	r0, #59	; 0x3b
 8001852:	f000 fc35 	bl	80020c0 <mpu9250_read_reg>
  destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
 8001856:	7a3b      	ldrb	r3, [r7, #8]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	b21a      	sxth	r2, r3
 800185c:	7a7b      	ldrb	r3, [r7, #9]
 800185e:	b21b      	sxth	r3, r3
 8001860:	4313      	orrs	r3, r2
 8001862:	b21a      	sxth	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
 8001868:	7abb      	ldrb	r3, [r7, #10]
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	b219      	sxth	r1, r3
 800186e:	7afb      	ldrb	r3, [r7, #11]
 8001870:	b21a      	sxth	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3302      	adds	r3, #2
 8001876:	430a      	orrs	r2, r1
 8001878:	b212      	sxth	r2, r2
 800187a:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
 800187c:	7b3b      	ldrb	r3, [r7, #12]
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	b219      	sxth	r1, r3
 8001882:	7b7b      	ldrb	r3, [r7, #13]
 8001884:	b21a      	sxth	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3304      	adds	r3, #4
 800188a:	430a      	orrs	r2, r1
 800188c:	b212      	sxth	r2, r2
 800188e:	801a      	strh	r2, [r3, #0]
  destination[3] = ((int16_t)rawData[6] << 8) | rawData[7] ;
 8001890:	7bbb      	ldrb	r3, [r7, #14]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	b219      	sxth	r1, r3
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	b21a      	sxth	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3306      	adds	r3, #6
 800189e:	430a      	orrs	r2, r1
 80018a0:	b212      	sxth	r2, r2
 80018a2:	801a      	strh	r2, [r3, #0]
  destination[4] = ((int16_t)rawData[8] << 8) | rawData[9] ;
 80018a4:	7c3b      	ldrb	r3, [r7, #16]
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	b219      	sxth	r1, r3
 80018aa:	7c7b      	ldrb	r3, [r7, #17]
 80018ac:	b21a      	sxth	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3308      	adds	r3, #8
 80018b2:	430a      	orrs	r2, r1
 80018b4:	b212      	sxth	r2, r2
 80018b6:	801a      	strh	r2, [r3, #0]
  destination[5] = ((int16_t)rawData[10] << 8) | rawData[11] ;
 80018b8:	7cbb      	ldrb	r3, [r7, #18]
 80018ba:	021b      	lsls	r3, r3, #8
 80018bc:	b219      	sxth	r1, r3
 80018be:	7cfb      	ldrb	r3, [r7, #19]
 80018c0:	b21a      	sxth	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	330a      	adds	r3, #10
 80018c6:	430a      	orrs	r2, r1
 80018c8:	b212      	sxth	r2, r2
 80018ca:	801a      	strh	r2, [r3, #0]
  destination[6] = ((int16_t)rawData[12] << 8) | rawData[13] ;
 80018cc:	7d3b      	ldrb	r3, [r7, #20]
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	b219      	sxth	r1, r3
 80018d2:	7d7b      	ldrb	r3, [r7, #21]
 80018d4:	b21a      	sxth	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	330c      	adds	r3, #12
 80018da:	430a      	orrs	r2, r1
 80018dc:	b212      	sxth	r2, r2
 80018de:	801a      	strh	r2, [r3, #0]
}
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <getGres>:

float getGres(struct mpu9250 * mpu9250) {
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint8_t Gscale = mpu9250->Gscale;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	785b      	ldrb	r3, [r3, #1]
 80018f4:	73fb      	strb	r3, [r7, #15]
  switch (Gscale)
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d823      	bhi.n	8001944 <getGres+0x5c>
 80018fc:	a201      	add	r2, pc, #4	; (adr r2, 8001904 <getGres+0x1c>)
 80018fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001902:	bf00      	nop
 8001904:	08001915 	.word	0x08001915
 8001908:	08001921 	.word	0x08001921
 800190c:	0800192d 	.word	0x0800192d
 8001910:	08001939 	.word	0x08001939
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
    case GFS_250DPS:
    		mpu9250->_gRes = 250.0/32768.0;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a11      	ldr	r2, [pc, #68]	; (800195c <getGres+0x74>)
 8001918:	609a      	str	r2, [r3, #8]
          return mpu9250->_gRes;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	e013      	b.n	8001948 <getGres+0x60>
          break;
    case GFS_500DPS:
    		mpu9250->_gRes = 500.0/32768.0;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <getGres+0x78>)
 8001924:	609a      	str	r2, [r3, #8]
          return mpu9250->_gRes;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	e00d      	b.n	8001948 <getGres+0x60>
          break;
    case GFS_1000DPS:
    		mpu9250->_gRes = 1000.0/32768.0;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <getGres+0x7c>)
 8001930:	609a      	str	r2, [r3, #8]
         return mpu9250->_gRes;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	e007      	b.n	8001948 <getGres+0x60>
         break;
    case GFS_2000DPS:
    		mpu9250->_gRes = 2000.0/32768.0;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <getGres+0x80>)
 800193c:	609a      	str	r2, [r3, #8]
         return mpu9250->_gRes;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	e001      	b.n	8001948 <getGres+0x60>
         break;
  }
  return 0.0;
 8001944:	f04f 0300 	mov.w	r3, #0
}
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eeb0 0a67 	vmov.f32	s0, s15
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	3bfa0000 	.word	0x3bfa0000
 8001960:	3c7a0000 	.word	0x3c7a0000
 8001964:	3cfa0000 	.word	0x3cfa0000
 8001968:	3d7a0000 	.word	0x3d7a0000

0800196c <getAres>:

float getAres(struct mpu9250 * mpu9250) {
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint8_t Ascale = mpu9250->Ascale;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	73fb      	strb	r3, [r7, #15]
  switch (Ascale)
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d827      	bhi.n	80019d0 <getAres+0x64>
 8001980:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <getAres+0x1c>)
 8001982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001986:	bf00      	nop
 8001988:	08001999 	.word	0x08001999
 800198c:	080019a7 	.word	0x080019a7
 8001990:	080019b5 	.word	0x080019b5
 8001994:	080019c3 	.word	0x080019c3
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
		 mpu9250->_aRes = 2.0f/32768.0f;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800199e:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	e016      	b.n	80019d4 <getAres+0x68>
         break;
    case AFS_4G:
		mpu9250->_aRes = 4.0f/32768.0f;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80019ac:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	e00f      	b.n	80019d4 <getAres+0x68>
         break;
    case AFS_8G:
		mpu9250->_aRes = 8.0f/32768.0f;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80019ba:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	e008      	b.n	80019d4 <getAres+0x68>
         break;
    case AFS_16G:
		mpu9250->_aRes = 16.0f/32768.0f;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80019c8:	605a      	str	r2, [r3, #4]
         return mpu9250->_aRes;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	e001      	b.n	80019d4 <getAres+0x68>
         break;
  }
  return 0.0;
 80019d0:	f04f 0300 	mov.w	r3, #0
}
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eeb0 0a67 	vmov.f32	s0, s15
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop

080019e8 <updateData>:

void updateData(struct mpu9250 * mpu9250, float dt, float vel){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	ed2d 8b02 	vpush	{d8}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80019f8:	edc7 0a01 	vstr	s1, [r7, #4]
	readMPU9250Data(mpu9250->rawData);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	330c      	adds	r3, #12
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff1d 	bl	8001840 <readMPU9250Data>

  // Update buffers' values
	for (int i = 0; i<3; i++){
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	e023      	b.n	8001a54 <updateData+0x6c>
		mpu9250->accBuff[i][mpu9250->buffPointer] = (float)(mpu9250->rawData[i] * getAres(mpu9250));
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f7ff ffa2 	bl	800196c <getAres>
 8001a28:	eef0 7a40 	vmov.f32	s15, s0
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a32:	4618      	mov	r0, r3
 8001a34:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001a38:	68f9      	ldr	r1, [r7, #12]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	4403      	add	r3, r0
 8001a44:	330e      	adds	r3, #14
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i<3; i++){
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3301      	adds	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	ddd8      	ble.n	8001a0c <updateData+0x24>
	}
	for (int i = 4; i<7; i++){
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	e025      	b.n	8001aac <updateData+0xc4>
		mpu9250->gyroBuff[i-4][mpu9250->buffPointer] = (float)(mpu9250->rawData[i] * getGres(mpu9250));
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	3304      	adds	r3, #4
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f7ff ff36 	bl	80018e8 <getGres>
 8001a7c:	eef0 7a40 	vmov.f32	s15, s0
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	1f1a      	subs	r2, r3, #4
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001a90:	68f9      	ldr	r1, [r7, #12]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	4403      	add	r3, r0
 8001a9a:	331c      	adds	r3, #28
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 4; i<7; i++){
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	ddd6      	ble.n	8001a60 <updateData+0x78>
	}

	mpu9250->buffPointer = (mpu9250->buffPointer+1) % filt_size;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	4ba1      	ldr	r3, [pc, #644]	; (8001d40 <updateData+0x358>)
 8001abc:	fb83 1302 	smull	r1, r3, r3, r2
 8001ac0:	1059      	asrs	r1, r3, #1
 8001ac2:	17d3      	asrs	r3, r2, #31
 8001ac4:	1ac9      	subs	r1, r1, r3
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	1ad1      	subs	r1, r2, r3
 8001ace:	b2ca      	uxtb	r2, r1
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mpu9250->lastAngVel = mpu9250->gyro[2];
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  // Calculate moving average's new iteration
	for(int i = 0 ; i < 3 ; i++){
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	e07d      	b.n	8001be2 <updateData+0x1fa>
		mpu9250->acc[i] = 0;
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3306      	adds	r3, #6
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	3304      	adds	r3, #4
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
		mpu9250->gyro[i] = 0;
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	330a      	adds	r3, #10
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < filt_size ; j++){
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	e03d      	b.n	8001b8a <updateData+0x1a2>
			mpu9250->acc[i]+= mpu9250->accBuff[i][j];
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3306      	adds	r3, #6
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	3304      	adds	r3, #4
 8001b1a:	ed93 7a00 	vldr	s14, [r3]
 8001b1e:	68f9      	ldr	r1, [r7, #12]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	330e      	adds	r3, #14
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3306      	adds	r3, #6
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	3304      	adds	r3, #4
 8001b46:	edc3 7a00 	vstr	s15, [r3]
			mpu9250->gyro[i]+= mpu9250->gyroBuff[i][j];
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	330a      	adds	r3, #10
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	ed93 7a00 	vldr	s14, [r3]
 8001b58:	68f9      	ldr	r1, [r7, #12]
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4413      	add	r3, r2
 8001b66:	331c      	adds	r3, #28
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	edd3 7a00 	vldr	s15, [r3]
 8001b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	330a      	adds	r3, #10
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	edc3 7a00 	vstr	s15, [r3]
		for(int j = 0 ; j < filt_size ; j++){
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	3301      	adds	r3, #1
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	ddbe      	ble.n	8001b0e <updateData+0x126>
		}
		mpu9250->acc[i]/= filt_size;
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3306      	adds	r3, #6
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	ed93 7a00 	vldr	s14, [r3]
 8001ba0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001ba4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3306      	adds	r3, #6
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	edc3 7a00 	vstr	s15, [r3]
		mpu9250->gyro[i]/= filt_size;
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	330a      	adds	r3, #10
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	ed93 7a00 	vldr	s14, [r3]
 8001bc6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001bca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	330a      	adds	r3, #10
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0 ; i < 3 ; i++){
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3301      	adds	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	f77f af7e 	ble.w	8001ae6 <updateData+0xfe>
	}

  // Update orientation
	// 1.1 = gyroscope's error
	mpu9250->pose[2] += 1.1* dt * (mpu9250->gyro[2] + mpu9250->lastAngVel) / 2;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001bf0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001bf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bf8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bfc:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8001d30 <updateData+0x348>
 8001c00:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c18:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001c1c:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8001c20:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001c24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	if(mpu9250->pose[2] < -180)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001c38:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001d44 <updateData+0x35c>
 8001c3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c44:	d50a      	bpl.n	8001c5c <updateData+0x274>
		mpu9250->pose[2] += 360;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001c4c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001d48 <updateData+0x360>
 8001c50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
 8001c5a:	e013      	b.n	8001c84 <updateData+0x29c>
	else if(mpu9250->pose[2] > 180)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001c62:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001d4c <updateData+0x364>
 8001c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	dd09      	ble.n	8001c84 <updateData+0x29c>
		mpu9250->pose[2] -= 360;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001c76:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001d48 <updateData+0x360>
 8001c7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

  //Update position
  mpu9250->pose[0] += cos(M_PI/180 * mpu9250->pose[2]) * dt * vel;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8001c8a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001c94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c98:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001d38 <updateData+0x350>
 8001c9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ca0:	eeb0 0b47 	vmov.f64	d0, d7
 8001ca4:	f00c ffc8 	bl	800ec38 <cos>
 8001ca8:	eeb0 6b40 	vmov.f64	d6, d0
 8001cac:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cb4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001cb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cc0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001cc4:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001cc8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
  mpu9250->pose[1] += sin(M_PI/180 * mpu9250->pose[2]) * dt * vel;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001cd8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001ce2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ce6:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8001d38 <updateData+0x350>
 8001cea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cee:	eeb0 0b47 	vmov.f64	d0, d7
 8001cf2:	f00c ffed 	bl	800ecd0 <sin>
 8001cf6:	eeb0 6b40 	vmov.f64	d6, d0
 8001cfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d02:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001d06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d12:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001d16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
}
 8001d20:	bf00      	nop
 8001d22:	3720      	adds	r7, #32
 8001d24:	46bd      	mov	sp, r7
 8001d26:	ecbd 8b02 	vpop	{d8}
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	f3af 8000 	nop.w
 8001d30:	9999999a 	.word	0x9999999a
 8001d34:	3ff19999 	.word	0x3ff19999
 8001d38:	a2529d39 	.word	0xa2529d39
 8001d3c:	3f91df46 	.word	0x3f91df46
 8001d40:	66666667 	.word	0x66666667
 8001d44:	c3340000 	.word	0xc3340000
 8001d48:	43b40000 	.word	0x43b40000
 8001d4c:	43340000 	.word	0x43340000

08001d50 <setPose>:

void setPose(struct mpu9250 * mpu9250, float *pos){
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
	for(int i = 0 ; i < 3 ; i++){
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	e00e      	b.n	8001d7e <setPose+0x2e>
		mpu9250->pose[i] = pos[i];
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	332c      	adds	r3, #44	; 0x2c
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	3304      	adds	r3, #4
 8001d76:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < 3 ; i++){
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	dded      	ble.n	8001d60 <setPose+0x10>
	}
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001d9c:	1d39      	adds	r1, r7, #4
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	2201      	movs	r2, #1
 8001da4:	4803      	ldr	r0, [pc, #12]	; (8001db4 <__io_putchar+0x20>)
 8001da6:	f005 ffdd 	bl	8007d64 <HAL_UART_Transmit>
  return ch;
 8001daa:	687b      	ldr	r3, [r7, #4]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	240004a8 	.word	0x240004a8

08001db8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001dbc:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001dbe:	4a29      	ldr	r2, [pc, #164]	; (8001e64 <MX_SPI1_Init+0xac>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dc2:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001dc4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001dc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dca:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dd0:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001dd2:	2207      	movs	r2, #7
 8001dd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001dd6:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001dd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ddc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001de0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001de4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001de8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001dee:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001df0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001df4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e14:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e4c:	4804      	ldr	r0, [pc, #16]	; (8001e60 <MX_SPI1_Init+0xa8>)
 8001e4e:	f003 feff 	bl	8005c50 <HAL_SPI_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001e58:	f7ff f984 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	240002fc 	.word	0x240002fc
 8001e64:	40013000 	.word	0x40013000

08001e68 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e6c:	4b27      	ldr	r3, [pc, #156]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001e6e:	4a28      	ldr	r2, [pc, #160]	; (8001f10 <MX_SPI2_Init+0xa8>)
 8001e70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e72:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001e74:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e7a:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e80:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001e82:	2207      	movs	r2, #7
 8001e84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e86:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e92:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001e94:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001e9a:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001e9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001ea0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ea8:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eae:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001eb4:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001ebc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ec0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ece:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ef8:	4804      	ldr	r0, [pc, #16]	; (8001f0c <MX_SPI2_Init+0xa4>)
 8001efa:	f003 fea9 	bl	8005c50 <HAL_SPI_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001f04:	f7ff f92e 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	24000384 	.word	0x24000384
 8001f10:	40003800 	.word	0x40003800

08001f14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b0ba      	sub	sp, #232	; 0xe8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f2c:	f107 0318 	add.w	r3, r7, #24
 8001f30:	22bc      	movs	r2, #188	; 0xbc
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f00a ffed 	bl	800cf14 <memset>
  if(spiHandle->Instance==SPI1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a49      	ldr	r2, [pc, #292]	; (8002064 <HAL_SPI_MspInit+0x150>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d142      	bne.n	8001fca <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f48:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f4e:	f107 0318 	add.w	r3, r7, #24
 8001f52:	4618      	mov	r0, r3
 8001f54:	f002 fb14 	bl	8004580 <HAL_RCCEx_PeriphCLKConfig>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001f5e:	f7ff f901 	bl	8001164 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f62:	4b41      	ldr	r3, [pc, #260]	; (8002068 <HAL_SPI_MspInit+0x154>)
 8001f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f68:	4a3f      	ldr	r2, [pc, #252]	; (8002068 <HAL_SPI_MspInit+0x154>)
 8001f6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_SPI_MspInit+0x154>)
 8001f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f80:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_SPI_MspInit+0x154>)
 8001f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f86:	4a38      	ldr	r2, [pc, #224]	; (8002068 <HAL_SPI_MspInit+0x154>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f90:	4b35      	ldr	r3, [pc, #212]	; (8002068 <HAL_SPI_MspInit+0x154>)
 8001f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f9e:	2338      	movs	r3, #56	; 0x38
 8001fa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fb6:	2305      	movs	r3, #5
 8001fb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	482a      	ldr	r0, [pc, #168]	; (800206c <HAL_SPI_MspInit+0x158>)
 8001fc4:	f001 f8b6 	bl	8003134 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001fc8:	e047      	b.n	800205a <HAL_SPI_MspInit+0x146>
  else if(spiHandle->Instance==SPI2)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a28      	ldr	r2, [pc, #160]	; (8002070 <HAL_SPI_MspInit+0x15c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d142      	bne.n	800205a <HAL_SPI_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fde:	f107 0318 	add.w	r3, r7, #24
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 facc 	bl	8004580 <HAL_RCCEx_PeriphCLKConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8001fee:	f7ff f8b9 	bl	8001164 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_SPI_MspInit+0x154>)
 8001ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <HAL_SPI_MspInit+0x154>)
 8001ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ffe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_SPI_MspInit+0x154>)
 8002004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_SPI_MspInit+0x154>)
 8002012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002016:	4a14      	ldr	r2, [pc, #80]	; (8002068 <HAL_SPI_MspInit+0x154>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_SPI_MspInit+0x154>)
 8002022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800202e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002032:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002048:	2305      	movs	r3, #5
 800204a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <HAL_SPI_MspInit+0x158>)
 8002056:	f001 f86d 	bl	8003134 <HAL_GPIO_Init>
}
 800205a:	bf00      	nop
 800205c:	37e8      	adds	r7, #232	; 0xe8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40013000 	.word	0x40013000
 8002068:	58024400 	.word	0x58024400
 800206c:	58020400 	.word	0x58020400
 8002070:	40003800 	.word	0x40003800

08002074 <mpu9250_write_reg>:
  }
}

/* USER CODE BEGIN 1 */
void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	460a      	mov	r2, r1
 800207e:	71fb      	strb	r3, [r7, #7]
 8002080:	4613      	mov	r3, r2
 8002082:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8002084:	2200      	movs	r2, #0
 8002086:	2110      	movs	r1, #16
 8002088:	480b      	ldr	r0, [pc, #44]	; (80020b8 <mpu9250_write_reg+0x44>)
 800208a:	f001 fa03 	bl	8003494 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 800208e:	1df9      	adds	r1, r7, #7
 8002090:	2364      	movs	r3, #100	; 0x64
 8002092:	2201      	movs	r2, #1
 8002094:	4809      	ldr	r0, [pc, #36]	; (80020bc <mpu9250_write_reg+0x48>)
 8002096:	f003 fee1 	bl	8005e5c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 800209a:	1db9      	adds	r1, r7, #6
 800209c:	2364      	movs	r3, #100	; 0x64
 800209e:	2201      	movs	r2, #1
 80020a0:	4806      	ldr	r0, [pc, #24]	; (80020bc <mpu9250_write_reg+0x48>)
 80020a2:	f003 fedb 	bl	8005e5c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80020a6:	2201      	movs	r2, #1
 80020a8:	2110      	movs	r1, #16
 80020aa:	4803      	ldr	r0, [pc, #12]	; (80020b8 <mpu9250_write_reg+0x44>)
 80020ac:	f001 f9f2 	bl	8003494 <HAL_GPIO_WritePin>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	58020000 	.word	0x58020000
 80020bc:	240002fc 	.word	0x240002fc

080020c0 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
 80020cc:	4613      	mov	r3, r2
 80020ce:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80020da:	2200      	movs	r2, #0
 80020dc:	2110      	movs	r1, #16
 80020de:	480d      	ldr	r0, [pc, #52]	; (8002114 <mpu9250_read_reg+0x54>)
 80020e0:	f001 f9d8 	bl	8003494 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 80020e4:	f107 010f 	add.w	r1, r7, #15
 80020e8:	2364      	movs	r3, #100	; 0x64
 80020ea:	2201      	movs	r2, #1
 80020ec:	480a      	ldr	r0, [pc, #40]	; (8002118 <mpu9250_read_reg+0x58>)
 80020ee:	f003 feb5 	bl	8005e5c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, len, 100);
 80020f2:	79bb      	ldrb	r3, [r7, #6]
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	2364      	movs	r3, #100	; 0x64
 80020f8:	6839      	ldr	r1, [r7, #0]
 80020fa:	4807      	ldr	r0, [pc, #28]	; (8002118 <mpu9250_read_reg+0x58>)
 80020fc:	f004 f8a0 	bl	8006240 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8002100:	2201      	movs	r2, #1
 8002102:	2110      	movs	r1, #16
 8002104:	4803      	ldr	r0, [pc, #12]	; (8002114 <mpu9250_read_reg+0x54>)
 8002106:	f001 f9c5 	bl	8003494 <HAL_GPIO_WritePin>
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	58020000 	.word	0x58020000
 8002118:	240002fc 	.word	0x240002fc

0800211c <initStanley>:
 * */

#include "stanley_controller.h"

void initStanley(struct Stanley * stanley, float *delta_sat, float k, float k_soft)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	ed87 0a01 	vstr	s0, [r7, #4]
 800212a:	edc7 0a00 	vstr	s1, [r7]
    stanley->sat[0] = delta_sat[0];
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	601a      	str	r2, [r3, #0]
    stanley->sat[1] = delta_sat[1];
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	605a      	str	r2, [r3, #4]
    stanley->psi = 0;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
    stanley->k = k;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	611a      	str	r2, [r3, #16]
    stanley->k_soft = k_soft;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	615a      	str	r2, [r3, #20]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <calculateCrosstrackError>:

void calculateCrosstrackError(struct Stanley * stanley, struct Point * vehicle_pos, struct Point * p1, struct Point * p2){
 8002160:	b580      	push	{r7, lr}
 8002162:	ed2d 8b04 	vpush	{d8-d9}
 8002166:	b08c      	sub	sp, #48	; 0x30
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
    float b;
    float c;
    float xp;
    float yp;

    float ex = p2->x - p1->x;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	ed93 7a00 	vldr	s14, [r3]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	edd3 7a00 	vldr	s15, [r3]
 800217e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002182:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float ey = p2->y - p1->y;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	ed93 7a01 	vldr	s14, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002196:	edc7 7a08 	vstr	s15, [r7, #32]

    // Angle of path frame
    stanley->ak = atan2(ey,ex);
 800219a:	edd7 7a08 	vldr	s15, [r7, #32]
 800219e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021a2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80021a6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80021aa:	eeb0 1b46 	vmov.f64	d1, d6
 80021ae:	eeb0 0b47 	vmov.f64	d0, d7
 80021b2:	f00c fd3d 	bl	800ec30 <atan2>
 80021b6:	eeb0 7b40 	vmov.f64	d7, d0
 80021ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    if(isnormal(ex) && isnormal(ey)){
 80021c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021c8:	eef0 7ae7 	vabs.f32	s15, s15
 80021cc:	ed9f 7abd 	vldr	s14, [pc, #756]	; 80024c4 <calculateCrosstrackError+0x364>
 80021d0:	eef4 7a47 	vcmp.f32	s15, s14
 80021d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d8:	bf8c      	ite	hi
 80021da:	2301      	movhi	r3, #1
 80021dc:	2300      	movls	r3, #0
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f083 0301 	eor.w	r3, r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021f0:	eef0 7ae7 	vabs.f32	s15, s15
 80021f4:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 80024c8 <calculateCrosstrackError+0x368>
 80021f8:	eef4 7a47 	vcmp.f32	s15, s14
 80021fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002200:	bfb4      	ite	lt
 8002202:	2301      	movlt	r3, #1
 8002204:	2300      	movge	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f083 0301 	eor.w	r3, r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	b2db      	uxtb	r3, r3
 8002214:	4013      	ands	r3, r2
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d074      	beq.n	8002306 <calculateCrosstrackError+0x1a6>
 800221c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002220:	eef0 7ae7 	vabs.f32	s15, s15
 8002224:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80024c4 <calculateCrosstrackError+0x364>
 8002228:	eef4 7a47 	vcmp.f32	s15, s14
 800222c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002230:	bf8c      	ite	hi
 8002232:	2301      	movhi	r3, #1
 8002234:	2300      	movls	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f083 0301 	eor.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	b2da      	uxtb	r2, r3
 8002244:	edd7 7a08 	vldr	s15, [r7, #32]
 8002248:	eef0 7ae7 	vabs.f32	s15, s15
 800224c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80024c8 <calculateCrosstrackError+0x368>
 8002250:	eef4 7a47 	vcmp.f32	s15, s14
 8002254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002258:	bfb4      	ite	lt
 800225a:	2301      	movlt	r3, #1
 800225c:	2300      	movge	r3, #0
 800225e:	b2db      	uxtb	r3, r3
 8002260:	f083 0301 	eor.w	r3, r3, #1
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	b2db      	uxtb	r3, r3
 800226c:	4013      	ands	r3, r2
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d048      	beq.n	8002306 <calculateCrosstrackError+0x1a6>
        // Slope of path
        m1 = ex/ey;
 8002274:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002278:	ed97 7a08 	vldr	s14, [r7, #32]
 800227c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002280:	edc7 7a07 	vstr	s15, [r7, #28]
        b = p2->x - m1*p2->y;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	ed93 7a00 	vldr	s14, [r3]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002290:	edd7 7a07 	vldr	s15, [r7, #28]
 8002294:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800229c:	edc7 7a06 	vstr	s15, [r7, #24]

        // Slope of normal line to the path
        m2 = -1/m1;
 80022a0:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80022a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80022a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022ac:	edc7 7a05 	vstr	s15, [r7, #20]
        c = vehicle_pos->x - m2*vehicle_pos->y;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	ed93 7a00 	vldr	s14, [r3]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80022bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80022c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c8:	edc7 7a04 	vstr	s15, [r7, #16]

        // Obtain intersection point
        yp = (c - b)/(m1 - m2);
 80022cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80022d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80022d4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80022dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80022e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        xp = m1*yp + b;
 80022ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80022f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80022f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80022fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002300:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8002304:	e06f      	b.n	80023e6 <calculateCrosstrackError+0x286>

    } else {
        if(!isnormal(ex)){
 8002306:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800230a:	eef0 7ae7 	vabs.f32	s15, s15
 800230e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80024c4 <calculateCrosstrackError+0x364>
 8002312:	eef4 7a47 	vcmp.f32	s15, s14
 8002316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231a:	bf8c      	ite	hi
 800231c:	2301      	movhi	r3, #1
 800231e:	2300      	movls	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f083 0301 	eor.w	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f083 0301 	eor.w	r3, r3, #1
 8002332:	b2da      	uxtb	r2, r3
 8002334:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002338:	eef0 7ae7 	vabs.f32	s15, s15
 800233c:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80024c8 <calculateCrosstrackError+0x368>
 8002340:	eef4 7a47 	vcmp.f32	s15, s14
 8002344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002348:	bfb4      	ite	lt
 800234a:	2301      	movlt	r3, #1
 800234c:	2300      	movge	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f083 0301 	eor.w	r3, r3, #1
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f083 0301 	eor.w	r3, r3, #1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <calculateCrosstrackError+0x216>
            yp = vehicle_pos->y;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28
            xp = p2->x; // or x1
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        if(!isnormal(ey)){
 8002376:	edd7 7a08 	vldr	s15, [r7, #32]
 800237a:	eef0 7ae7 	vabs.f32	s15, s15
 800237e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80024c4 <calculateCrosstrackError+0x364>
 8002382:	eef4 7a47 	vcmp.f32	s15, s14
 8002386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238a:	bf8c      	ite	hi
 800238c:	2301      	movhi	r3, #1
 800238e:	2300      	movls	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f083 0301 	eor.w	r3, r3, #1
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f083 0301 	eor.w	r3, r3, #1
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80023a8:	eef0 7ae7 	vabs.f32	s15, s15
 80023ac:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80024c8 <calculateCrosstrackError+0x368>
 80023b0:	eef4 7a47 	vcmp.f32	s15, s14
 80023b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b8:	bfb4      	ite	lt
 80023ba:	2301      	movlt	r3, #1
 80023bc:	2300      	movge	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f083 0301 	eor.w	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f083 0301 	eor.w	r3, r3, #1
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	4313      	orrs	r3, r2
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <calculateCrosstrackError+0x286>
            yp = p2->y; // or y1
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	62bb      	str	r3, [r7, #40]	; 0x28
            xp = vehicle_pos->x;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    // Along-track and crosstrack errors in path frame
    stanley->e_a = (p2->x - xp) * cos(stanley->ak) + (p2->y - yp) * sin(stanley->ak); // along-track error
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	ed93 7a00 	vldr	s14, [r3]
 80023ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80023fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002402:	eeb0 0b47 	vmov.f64	d0, d7
 8002406:	f00c fc17 	bl	800ec38 <cos>
 800240a:	eeb0 7b40 	vmov.f64	d7, d0
 800240e:	ee28 8b07 	vmul.f64	d8, d8, d7
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	ed93 7a01 	vldr	s14, [r3, #4]
 8002418:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800241c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002420:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800242a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800242e:	eeb0 0b47 	vmov.f64	d0, d7
 8002432:	f00c fc4d 	bl	800ecd0 <sin>
 8002436:	eeb0 7b40 	vmov.f64	d7, d0
 800243a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800243e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002442:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	edc3 7a06 	vstr	s15, [r3, #24]
    stanley->e_c = -(vehicle_pos->x - xp) * sin(stanley->ak) + (vehicle_pos->y - yp) * cos(stanley->ak); // crosstrack error
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	ed93 7a00 	vldr	s14, [r3]
 8002452:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800245a:	eef1 7a67 	vneg.f32	s15, s15
 800245e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002468:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800246c:	eeb0 0b47 	vmov.f64	d0, d7
 8002470:	f00c fc2e 	bl	800ecd0 <sin>
 8002474:	eeb0 7b40 	vmov.f64	d7, d0
 8002478:	ee28 8b07 	vmul.f64	d8, d8, d7
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002482:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800248a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002494:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002498:	eeb0 0b47 	vmov.f64	d0, d7
 800249c:	f00c fbcc 	bl	800ec38 <cos>
 80024a0:	eeb0 7b40 	vmov.f64	d7, d0
 80024a4:	ee29 7b07 	vmul.f64	d7, d9, d7
 80024a8:	ee38 7b07 	vadd.f64	d7, d8, d7
 80024ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80024b6:	bf00      	nop
 80024b8:	3730      	adds	r7, #48	; 0x30
 80024ba:	46bd      	mov	sp, r7
 80024bc:	ecbd 8b04 	vpop	{d8-d9}
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	7f7fffff 	.word	0x7f7fffff
 80024c8:	00800000 	.word	0x00800000

080024cc <setYawAngle>:

void setYawAngle(struct Stanley * stanley, float psi){
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	ed87 0a00 	vstr	s0, [r7]
    stanley->psi = psi;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	60da      	str	r2, [r3, #12]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	0000      	movs	r0, r0
 80024ec:	0000      	movs	r0, r0
	...

080024f0 <calculateSteering>:

void calculateSteering(struct Stanley * stanley, float vel, uint8_t precision){
 80024f0:	b580      	push	{r7, lr}
 80024f2:	ed2d 8b02 	vpush	{d8}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8002500:	460b      	mov	r3, r1
 8002502:	71fb      	strb	r3, [r7, #7]
    stanley->vel = vel;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	621a      	str	r2, [r3, #32]

    // PI error fixed due to rounding in ak_ angle when the path is vertical that makes it greater than M_PI
    double PI = M_PI + 1e-3;
 800250a:	a381      	add	r3, pc, #516	; (adr r3, 8002710 <calculateSteering+0x220>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if(stanley->ak >= PI/2 && stanley->ak <=  PI && stanley->psi <= -PI/2 && stanley->psi >= - PI){
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800251a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800251e:	ed97 5b06 	vldr	d5, [r7, #24]
 8002522:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8002526:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800252a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002532:	db3c      	blt.n	80025ae <calculateSteering+0xbe>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800253a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800253e:	ed97 6b06 	vldr	d6, [r7, #24]
 8002542:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254a:	db30      	blt.n	80025ae <calculateSteering+0xbe>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002552:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002556:	ed97 7b06 	vldr	d7, [r7, #24]
 800255a:	eeb1 5b47 	vneg.f64	d5, d7
 800255e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8002562:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002566:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256e:	d81e      	bhi.n	80025ae <calculateSteering+0xbe>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	edd3 7a03 	vldr	s15, [r3, #12]
 8002576:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800257a:	ed97 7b06 	vldr	d7, [r7, #24]
 800257e:	eeb1 7b47 	vneg.f64	d7, d7
 8002582:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258a:	db10      	blt.n	80025ae <calculateSteering+0xbe>
        stanley->psi = stanley->psi + PI*2;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002592:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002596:	ed97 7b06 	vldr	d7, [r7, #24]
 800259a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800259e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80025a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	edc3 7a03 	vstr	s15, [r3, #12]
 80025ac:	e04b      	b.n	8002646 <calculateSteering+0x156>
    } else if (stanley->ak < -PI/2 && stanley->ak > - PI && stanley->psi > PI/2 && stanley->psi <  PI){
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80025b4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80025b8:	ed97 7b06 	vldr	d7, [r7, #24]
 80025bc:	eeb1 5b47 	vneg.f64	d5, d7
 80025c0:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80025c4:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80025c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80025cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d0:	d539      	bpl.n	8002646 <calculateSteering+0x156>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80025d8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80025dc:	ed97 7b06 	vldr	d7, [r7, #24]
 80025e0:	eeb1 7b47 	vneg.f64	d7, d7
 80025e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80025e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ec:	dd2b      	ble.n	8002646 <calculateSteering+0x156>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80025f4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80025f8:	ed97 5b06 	vldr	d5, [r7, #24]
 80025fc:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8002600:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002604:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260c:	dd1b      	ble.n	8002646 <calculateSteering+0x156>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	edd3 7a03 	vldr	s15, [r3, #12]
 8002614:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002618:	ed97 6b06 	vldr	d6, [r7, #24]
 800261c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002624:	dd0f      	ble.n	8002646 <calculateSteering+0x156>
        stanley->psi = stanley->psi - PI*2;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	edd3 7a03 	vldr	s15, [r3, #12]
 800262c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002630:	ed97 7b06 	vldr	d7, [r7, #24]
 8002634:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002638:	ee36 7b47 	vsub.f64	d7, d6, d7
 800263c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    float phi = stanley->psi - stanley->ak;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	ed93 7a03 	vldr	s14, [r3, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002656:	edc7 7a05 	vstr	s15, [r7, #20]
    stanley->delta = phi + atan2(stanley->k*stanley->e_c,stanley->k_soft + stanley->vel);
 800265a:	edd7 7a05 	vldr	s15, [r7, #20]
 800265e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	ed93 7a04 	vldr	s14, [r3, #16]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	edd3 7a07 	vldr	s15, [r3, #28]
 800266e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002672:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	ed93 6a05 	vldr	s12, [r3, #20]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	edd3 6a08 	vldr	s13, [r3, #32]
 8002682:	ee76 6a26 	vadd.f32	s13, s12, s13
 8002686:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800268a:	eeb0 1b46 	vmov.f64	d1, d6
 800268e:	eeb0 0b47 	vmov.f64	d0, d7
 8002692:	f00c facd 	bl	800ec30 <atan2>
 8002696:	eeb0 7b40 	vmov.f64	d7, d0
 800269a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800269e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	edc3 7a02 	vstr	s15, [r3, #8]

    // You want to reduce psi by delta so ...
    stanley->delta = -stanley->delta;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80026ae:	eef1 7a67 	vneg.f32	s15, s15
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	edc3 7a02 	vstr	s15, [r3, #8]

    stanley->delta = stanley->delta < stanley->sat[1] ? stanley->sat[1] : stanley->delta;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80026c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026cc:	d502      	bpl.n	80026d4 <calculateSteering+0x1e4>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	e001      	b.n	80026d8 <calculateSteering+0x1e8>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	6093      	str	r3, [r2, #8]
    stanley->delta = stanley->delta > stanley->sat[0] ? stanley->sat[0] : stanley->delta;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	ed93 7a02 	vldr	s14, [r3, #8]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	edd3 7a00 	vldr	s15, [r3]
 80026e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f0:	dd02      	ble.n	80026f8 <calculateSteering+0x208>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	e001      	b.n	80026fc <calculateSteering+0x20c>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	6093      	str	r3, [r2, #8]
 8002700:	bf00      	nop
 8002702:	3720      	adds	r7, #32
 8002704:	46bd      	mov	sp, r7
 8002706:	ecbd 8b02 	vpop	{d8}
 800270a:	bd80      	pop	{r7, pc}
 800270c:	f3af 8000 	nop.w
 8002710:	9dfe8b4d 	.word	0x9dfe8b4d
 8002714:	40092407 	.word	0x40092407

08002718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <HAL_MspInit+0x38>)
 8002720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002724:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <HAL_MspInit+0x38>)
 8002726:	f043 0302 	orr.w	r3, r3, #2
 800272a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800272e:	4b08      	ldr	r3, [pc, #32]	; (8002750 <HAL_MspInit+0x38>)
 8002730:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800273c:	2200      	movs	r2, #0
 800273e:	210f      	movs	r1, #15
 8002740:	f06f 0001 	mvn.w	r0, #1
 8002744:	f000 fccf 	bl	80030e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	58024400 	.word	0x58024400

08002754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <NMI_Handler+0x4>

0800275a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800275e:	e7fe      	b.n	800275e <HardFault_Handler+0x4>

08002760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002764:	e7fe      	b.n	8002764 <MemManage_Handler+0x4>

08002766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800276a:	e7fe      	b.n	800276a <BusFault_Handler+0x4>

0800276c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002770:	e7fe      	b.n	8002770 <UsageFault_Handler+0x4>

08002772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002784:	f000 fba2 	bl	8002ecc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002788:	f009 f856 	bl	800b838 <xTaskGetSchedulerState>
 800278c:	4603      	mov	r3, r0
 800278e:	2b01      	cmp	r3, #1
 8002790:	d001      	beq.n	8002796 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002792:	f007 fa69 	bl	8009c68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}

0800279a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
	return 1;
 800279e:	2301      	movs	r3, #1
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <_kill>:

int _kill(int pid, int sig)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027b4:	f00a fc56 	bl	800d064 <__errno>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2216      	movs	r2, #22
 80027bc:	601a      	str	r2, [r3, #0]
	return -1;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <_exit>:

void _exit (int status)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027d2:	f04f 31ff 	mov.w	r1, #4294967295
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ffe7 	bl	80027aa <_kill>
	while (1) {}		/* Make sure we hang here */
 80027dc:	e7fe      	b.n	80027dc <_exit+0x12>

080027de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b086      	sub	sp, #24
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e00a      	b.n	8002806 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027f0:	f3af 8000 	nop.w
 80027f4:	4601      	mov	r1, r0
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	60ba      	str	r2, [r7, #8]
 80027fc:	b2ca      	uxtb	r2, r1
 80027fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3301      	adds	r3, #1
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	429a      	cmp	r2, r3
 800280c:	dbf0      	blt.n	80027f0 <_read+0x12>
	}

return len;
 800280e:	687b      	ldr	r3, [r7, #4]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	e009      	b.n	800283e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	60ba      	str	r2, [r7, #8]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff faae 	bl	8001d94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	3301      	adds	r3, #1
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	429a      	cmp	r2, r3
 8002844:	dbf1      	blt.n	800282a <_write+0x12>
	}
	return len;
 8002846:	687b      	ldr	r3, [r7, #4]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_close>:

int _close(int file)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	return -1;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002878:	605a      	str	r2, [r3, #4]
	return 0;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_isatty>:

int _isatty(int file)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	return 1;
 8002890:	2301      	movs	r3, #1
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800289e:	b480      	push	{r7}
 80028a0:	b085      	sub	sp, #20
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
	return 0;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028c0:	4a14      	ldr	r2, [pc, #80]	; (8002914 <_sbrk+0x5c>)
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <_sbrk+0x60>)
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028cc:	4b13      	ldr	r3, [pc, #76]	; (800291c <_sbrk+0x64>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d102      	bne.n	80028da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028d4:	4b11      	ldr	r3, [pc, #68]	; (800291c <_sbrk+0x64>)
 80028d6:	4a12      	ldr	r2, [pc, #72]	; (8002920 <_sbrk+0x68>)
 80028d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <_sbrk+0x64>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d207      	bcs.n	80028f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028e8:	f00a fbbc 	bl	800d064 <__errno>
 80028ec:	4603      	mov	r3, r0
 80028ee:	220c      	movs	r2, #12
 80028f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
 80028f6:	e009      	b.n	800290c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028f8:	4b08      	ldr	r3, [pc, #32]	; (800291c <_sbrk+0x64>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028fe:	4b07      	ldr	r3, [pc, #28]	; (800291c <_sbrk+0x64>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	4a05      	ldr	r2, [pc, #20]	; (800291c <_sbrk+0x64>)
 8002908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800290a:	68fb      	ldr	r3, [r7, #12]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	24080000 	.word	0x24080000
 8002918:	00000400 	.word	0x00000400
 800291c:	2400040c 	.word	0x2400040c
 8002920:	24005070 	.word	0x24005070

08002924 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08e      	sub	sp, #56	; 0x38
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800292a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002938:	f107 031c 	add.w	r3, r7, #28
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002944:	463b      	mov	r3, r7
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	609a      	str	r2, [r3, #8]
 800294e:	60da      	str	r2, [r3, #12]
 8002950:	611a      	str	r2, [r3, #16]
 8002952:	615a      	str	r2, [r3, #20]
 8002954:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002956:	4b2d      	ldr	r3, [pc, #180]	; (8002a0c <MX_TIM2_Init+0xe8>)
 8002958:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800295c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800295e:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <MX_TIM2_Init+0xe8>)
 8002960:	2248      	movs	r2, #72	; 0x48
 8002962:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002964:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <MX_TIM2_Init+0xe8>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800296a:	4b28      	ldr	r3, [pc, #160]	; (8002a0c <MX_TIM2_Init+0xe8>)
 800296c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002970:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002972:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <MX_TIM2_Init+0xe8>)
 8002974:	2200      	movs	r2, #0
 8002976:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002978:	4b24      	ldr	r3, [pc, #144]	; (8002a0c <MX_TIM2_Init+0xe8>)
 800297a:	2280      	movs	r2, #128	; 0x80
 800297c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800297e:	4823      	ldr	r0, [pc, #140]	; (8002a0c <MX_TIM2_Init+0xe8>)
 8002980:	f004 f90b 	bl	8006b9a <HAL_TIM_Base_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800298a:	f7fe fbeb 	bl	8001164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800298e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002992:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002994:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002998:	4619      	mov	r1, r3
 800299a:	481c      	ldr	r0, [pc, #112]	; (8002a0c <MX_TIM2_Init+0xe8>)
 800299c:	f004 fbd8 	bl	8007150 <HAL_TIM_ConfigClockSource>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80029a6:	f7fe fbdd 	bl	8001164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80029aa:	4818      	ldr	r0, [pc, #96]	; (8002a0c <MX_TIM2_Init+0xe8>)
 80029ac:	f004 f94c 	bl	8006c48 <HAL_TIM_PWM_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80029b6:	f7fe fbd5 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029be:	2300      	movs	r3, #0
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029c2:	f107 031c 	add.w	r3, r7, #28
 80029c6:	4619      	mov	r1, r3
 80029c8:	4810      	ldr	r0, [pc, #64]	; (8002a0c <MX_TIM2_Init+0xe8>)
 80029ca:	f005 f8ed 	bl	8007ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80029d4:	f7fe fbc6 	bl	8001164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029d8:	2360      	movs	r3, #96	; 0x60
 80029da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029e8:	463b      	mov	r3, r7
 80029ea:	2200      	movs	r2, #0
 80029ec:	4619      	mov	r1, r3
 80029ee:	4807      	ldr	r0, [pc, #28]	; (8002a0c <MX_TIM2_Init+0xe8>)
 80029f0:	f004 fa9a 	bl	8006f28 <HAL_TIM_PWM_ConfigChannel>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80029fa:	f7fe fbb3 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80029fe:	4803      	ldr	r0, [pc, #12]	; (8002a0c <MX_TIM2_Init+0xe8>)
 8002a00:	f000 f8b6 	bl	8002b70 <HAL_TIM_MspPostInit>

}
 8002a04:	bf00      	nop
 8002a06:	3738      	adds	r7, #56	; 0x38
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	24000410 	.word	0x24000410

08002a10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08e      	sub	sp, #56	; 0x38
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a24:	f107 031c 	add.w	r3, r7, #28
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a30:	463b      	mov	r3, r7
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	609a      	str	r2, [r3, #8]
 8002a3a:	60da      	str	r2, [r3, #12]
 8002a3c:	611a      	str	r2, [r3, #16]
 8002a3e:	615a      	str	r2, [r3, #20]
 8002a40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a42:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <MX_TIM3_Init+0xe8>)
 8002a44:	4a2d      	ldr	r2, [pc, #180]	; (8002afc <MX_TIM3_Init+0xec>)
 8002a46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8002a48:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <MX_TIM3_Init+0xe8>)
 8002a4a:	2248      	movs	r2, #72	; 0x48
 8002a4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <MX_TIM3_Init+0xe8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a54:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <MX_TIM3_Init+0xe8>)
 8002a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a5c:	4b26      	ldr	r3, [pc, #152]	; (8002af8 <MX_TIM3_Init+0xe8>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a62:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <MX_TIM3_Init+0xe8>)
 8002a64:	2280      	movs	r2, #128	; 0x80
 8002a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a68:	4823      	ldr	r0, [pc, #140]	; (8002af8 <MX_TIM3_Init+0xe8>)
 8002a6a:	f004 f896 	bl	8006b9a <HAL_TIM_Base_Init>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002a74:	f7fe fb76 	bl	8001164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a82:	4619      	mov	r1, r3
 8002a84:	481c      	ldr	r0, [pc, #112]	; (8002af8 <MX_TIM3_Init+0xe8>)
 8002a86:	f004 fb63 	bl	8007150 <HAL_TIM_ConfigClockSource>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002a90:	f7fe fb68 	bl	8001164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a94:	4818      	ldr	r0, [pc, #96]	; (8002af8 <MX_TIM3_Init+0xe8>)
 8002a96:	f004 f8d7 	bl	8006c48 <HAL_TIM_PWM_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002aa0:	f7fe fb60 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4811      	ldr	r0, [pc, #68]	; (8002af8 <MX_TIM3_Init+0xe8>)
 8002ab4:	f005 f878 	bl	8007ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002abe:	f7fe fb51 	bl	8001164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ac2:	2360      	movs	r3, #96	; 0x60
 8002ac4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ad2:	463b      	mov	r3, r7
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4807      	ldr	r0, [pc, #28]	; (8002af8 <MX_TIM3_Init+0xe8>)
 8002ada:	f004 fa25 	bl	8006f28 <HAL_TIM_PWM_ConfigChannel>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002ae4:	f7fe fb3e 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ae8:	4803      	ldr	r0, [pc, #12]	; (8002af8 <MX_TIM3_Init+0xe8>)
 8002aea:	f000 f841 	bl	8002b70 <HAL_TIM_MspPostInit>

}
 8002aee:	bf00      	nop
 8002af0:	3738      	adds	r7, #56	; 0x38
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	2400045c 	.word	0x2400045c
 8002afc:	40000400 	.word	0x40000400

08002b00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b10:	d10f      	bne.n	8002b32 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <HAL_TIM_Base_MspInit+0x68>)
 8002b14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b18:	4a13      	ldr	r2, [pc, #76]	; (8002b68 <HAL_TIM_Base_MspInit+0x68>)
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b22:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <HAL_TIM_Base_MspInit+0x68>)
 8002b24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002b30:	e013      	b.n	8002b5a <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM3)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a0d      	ldr	r2, [pc, #52]	; (8002b6c <HAL_TIM_Base_MspInit+0x6c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d10e      	bne.n	8002b5a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_TIM_Base_MspInit+0x68>)
 8002b3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b42:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <HAL_TIM_Base_MspInit+0x68>)
 8002b44:	f043 0302 	orr.w	r3, r3, #2
 8002b48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_TIM_Base_MspInit+0x68>)
 8002b4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
}
 8002b5a:	bf00      	nop
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	58024400 	.word	0x58024400
 8002b6c:	40000400 	.word	0x40000400

08002b70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08a      	sub	sp, #40	; 0x28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b90:	d120      	bne.n	8002bd4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b92:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <HAL_TIM_MspPostInit+0xb4>)
 8002b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b98:	4a22      	ldr	r2, [pc, #136]	; (8002c24 <HAL_TIM_MspPostInit+0xb4>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ba2:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <HAL_TIM_MspPostInit+0xb4>)
 8002ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc6:	f107 0314 	add.w	r3, r7, #20
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4816      	ldr	r0, [pc, #88]	; (8002c28 <HAL_TIM_MspPostInit+0xb8>)
 8002bce:	f000 fab1 	bl	8003134 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002bd2:	e023      	b.n	8002c1c <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <HAL_TIM_MspPostInit+0xbc>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d11e      	bne.n	8002c1c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_TIM_MspPostInit+0xb4>)
 8002be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be4:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <HAL_TIM_MspPostInit+0xb4>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_TIM_MspPostInit+0xb4>)
 8002bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bfc:	2340      	movs	r3, #64	; 0x40
 8002bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c00:	2302      	movs	r3, #2
 8002c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	4619      	mov	r1, r3
 8002c16:	4804      	ldr	r0, [pc, #16]	; (8002c28 <HAL_TIM_MspPostInit+0xb8>)
 8002c18:	f000 fa8c 	bl	8003134 <HAL_GPIO_Init>
}
 8002c1c:	bf00      	nop
 8002c1e:	3728      	adds	r7, #40	; 0x28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	58024400 	.word	0x58024400
 8002c28:	58020000 	.word	0x58020000
 8002c2c:	40000400 	.word	0x40000400

08002c30 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c34:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <MX_USART3_UART_Init+0x90>)
 8002c36:	4a23      	ldr	r2, [pc, #140]	; (8002cc4 <MX_USART3_UART_Init+0x94>)
 8002c38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002c3a:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <MX_USART3_UART_Init+0x90>)
 8002c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c42:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <MX_USART3_UART_Init+0x90>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <MX_USART3_UART_Init+0x90>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c4e:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <MX_USART3_UART_Init+0x90>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c54:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <MX_USART3_UART_Init+0x90>)
 8002c56:	220c      	movs	r2, #12
 8002c58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c5a:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <MX_USART3_UART_Init+0x90>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c60:	4b17      	ldr	r3, [pc, #92]	; (8002cc0 <MX_USART3_UART_Init+0x90>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c66:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <MX_USART3_UART_Init+0x90>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c6c:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <MX_USART3_UART_Init+0x90>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <MX_USART3_UART_Init+0x90>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c78:	4811      	ldr	r0, [pc, #68]	; (8002cc0 <MX_USART3_UART_Init+0x90>)
 8002c7a:	f005 f823 	bl	8007cc4 <HAL_UART_Init>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002c84:	f7fe fa6e 	bl	8001164 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c88:	2100      	movs	r1, #0
 8002c8a:	480d      	ldr	r0, [pc, #52]	; (8002cc0 <MX_USART3_UART_Init+0x90>)
 8002c8c:	f006 f856 	bl	8008d3c <HAL_UARTEx_SetTxFifoThreshold>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002c96:	f7fe fa65 	bl	8001164 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	4808      	ldr	r0, [pc, #32]	; (8002cc0 <MX_USART3_UART_Init+0x90>)
 8002c9e:	f006 f88b 	bl	8008db8 <HAL_UARTEx_SetRxFifoThreshold>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002ca8:	f7fe fa5c 	bl	8001164 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002cac:	4804      	ldr	r0, [pc, #16]	; (8002cc0 <MX_USART3_UART_Init+0x90>)
 8002cae:	f006 f80c 	bl	8008cca <HAL_UARTEx_DisableFifoMode>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002cb8:	f7fe fa54 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	240004a8 	.word	0x240004a8
 8002cc4:	40004800 	.word	0x40004800

08002cc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b0b8      	sub	sp, #224	; 0xe0
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ce0:	f107 0310 	add.w	r3, r7, #16
 8002ce4:	22bc      	movs	r2, #188	; 0xbc
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f00a f913 	bl	800cf14 <memset>
  if(uartHandle->Instance==USART3)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a25      	ldr	r2, [pc, #148]	; (8002d88 <HAL_UART_MspInit+0xc0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d142      	bne.n	8002d7e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d02:	f107 0310 	add.w	r3, r7, #16
 8002d06:	4618      	mov	r0, r3
 8002d08:	f001 fc3a 	bl	8004580 <HAL_RCCEx_PeriphCLKConfig>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d12:	f7fe fa27 	bl	8001164 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d16:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <HAL_UART_MspInit+0xc4>)
 8002d18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d1c:	4a1b      	ldr	r2, [pc, #108]	; (8002d8c <HAL_UART_MspInit+0xc4>)
 8002d1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d26:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <HAL_UART_MspInit+0xc4>)
 8002d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d34:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_UART_MspInit+0xc4>)
 8002d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3a:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <HAL_UART_MspInit+0xc4>)
 8002d3c:	f043 0308 	orr.w	r3, r3, #8
 8002d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <HAL_UART_MspInit+0xc4>)
 8002d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d6c:	2307      	movs	r3, #7
 8002d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d76:	4619      	mov	r1, r3
 8002d78:	4805      	ldr	r0, [pc, #20]	; (8002d90 <HAL_UART_MspInit+0xc8>)
 8002d7a:	f000 f9db 	bl	8003134 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002d7e:	bf00      	nop
 8002d80:	37e0      	adds	r7, #224	; 0xe0
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40004800 	.word	0x40004800
 8002d8c:	58024400 	.word	0x58024400
 8002d90:	58020c00 	.word	0x58020c00

08002d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d98:	f7fd fc78 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d9c:	480c      	ldr	r0, [pc, #48]	; (8002dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d9e:	490d      	ldr	r1, [pc, #52]	; (8002dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002da0:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da4:	e002      	b.n	8002dac <LoopCopyDataInit>

08002da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002daa:	3304      	adds	r3, #4

08002dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db0:	d3f9      	bcc.n	8002da6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002db2:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002db4:	4c0a      	ldr	r4, [pc, #40]	; (8002de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db8:	e001      	b.n	8002dbe <LoopFillZerobss>

08002dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dbc:	3204      	adds	r2, #4

08002dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc0:	d3fb      	bcc.n	8002dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dc2:	f00a f955 	bl	800d070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dc6:	f7fe f8f9 	bl	8000fbc <main>
  bx  lr
 8002dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dcc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002dd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002dd4:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8002dd8:	08010470 	.word	0x08010470
  ldr r2, =_sbss
 8002ddc:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8002de0:	24005070 	.word	0x24005070

08002de4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002de4:	e7fe      	b.n	8002de4 <ADC3_IRQHandler>
	...

08002de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dee:	2003      	movs	r0, #3
 8002df0:	f000 f96e 	bl	80030d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002df4:	f001 f9ee 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <HAL_Init+0x68>)
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	0a1b      	lsrs	r3, r3, #8
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	4913      	ldr	r1, [pc, #76]	; (8002e54 <HAL_Init+0x6c>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <HAL_Init+0x68>)
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	4a0e      	ldr	r2, [pc, #56]	; (8002e54 <HAL_Init+0x6c>)
 8002e1c:	5cd3      	ldrb	r3, [r2, r3]
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
 8002e28:	4a0b      	ldr	r2, [pc, #44]	; (8002e58 <HAL_Init+0x70>)
 8002e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e2c:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <HAL_Init+0x74>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e32:	200f      	movs	r0, #15
 8002e34:	f000 f814 	bl	8002e60 <HAL_InitTick>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e002      	b.n	8002e48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e42:	f7ff fc69 	bl	8002718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	58024400 	.word	0x58024400
 8002e54:	0800fd84 	.word	0x0800fd84
 8002e58:	24000004 	.word	0x24000004
 8002e5c:	24000000 	.word	0x24000000

08002e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002e68:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <HAL_InitTick+0x60>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e021      	b.n	8002eb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002e74:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_InitTick+0x64>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_InitTick+0x60>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 f945 	bl	800311a <HAL_SYSTICK_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e00e      	b.n	8002eb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b0f      	cmp	r3, #15
 8002e9e:	d80a      	bhi.n	8002eb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea8:	f000 f91d 	bl	80030e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eac:	4a06      	ldr	r2, [pc, #24]	; (8002ec8 <HAL_InitTick+0x68>)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e000      	b.n	8002eb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	2400000c 	.word	0x2400000c
 8002ec4:	24000000 	.word	0x24000000
 8002ec8:	24000008 	.word	0x24000008

08002ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_IncTick+0x20>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_IncTick+0x24>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <HAL_IncTick+0x24>)
 8002ede:	6013      	str	r3, [r2, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	2400000c 	.word	0x2400000c
 8002ef0:	24000538 	.word	0x24000538

08002ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <HAL_GetTick+0x14>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	24000538 	.word	0x24000538

08002f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f14:	f7ff ffee 	bl	8002ef4 <HAL_GetTick>
 8002f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d005      	beq.n	8002f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_Delay+0x44>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4413      	add	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f32:	bf00      	nop
 8002f34:	f7ff ffde 	bl	8002ef4 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d8f7      	bhi.n	8002f34 <HAL_Delay+0x28>
  {
  }
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	2400000c 	.word	0x2400000c

08002f54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002f58:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <HAL_GetREVID+0x14>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	0c1b      	lsrs	r3, r3, #16
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	5c001000 	.word	0x5c001000

08002f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <__NVIC_SetPriorityGrouping+0x40>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f9a:	4a04      	ldr	r2, [pc, #16]	; (8002fac <__NVIC_SetPriorityGrouping+0x40>)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	60d3      	str	r3, [r2, #12]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000ed00 	.word	0xe000ed00
 8002fb0:	05fa0000 	.word	0x05fa0000

08002fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <__NVIC_GetPriorityGrouping+0x18>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	f003 0307 	and.w	r3, r3, #7
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	6039      	str	r1, [r7, #0]
 8002fda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	db0a      	blt.n	8002ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	490c      	ldr	r1, [pc, #48]	; (800301c <__NVIC_SetPriority+0x4c>)
 8002fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fee:	0112      	lsls	r2, r2, #4
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff8:	e00a      	b.n	8003010 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	4908      	ldr	r1, [pc, #32]	; (8003020 <__NVIC_SetPriority+0x50>)
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	3b04      	subs	r3, #4
 8003008:	0112      	lsls	r2, r2, #4
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	440b      	add	r3, r1
 800300e:	761a      	strb	r2, [r3, #24]
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000e100 	.word	0xe000e100
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003024:	b480      	push	{r7}
 8003026:	b089      	sub	sp, #36	; 0x24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f1c3 0307 	rsb	r3, r3, #7
 800303e:	2b04      	cmp	r3, #4
 8003040:	bf28      	it	cs
 8003042:	2304      	movcs	r3, #4
 8003044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3304      	adds	r3, #4
 800304a:	2b06      	cmp	r3, #6
 800304c:	d902      	bls.n	8003054 <NVIC_EncodePriority+0x30>
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3b03      	subs	r3, #3
 8003052:	e000      	b.n	8003056 <NVIC_EncodePriority+0x32>
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003058:	f04f 32ff 	mov.w	r2, #4294967295
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43da      	mvns	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	401a      	ands	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800306c:	f04f 31ff 	mov.w	r1, #4294967295
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	43d9      	mvns	r1, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800307c:	4313      	orrs	r3, r2
         );
}
 800307e:	4618      	mov	r0, r3
 8003080:	3724      	adds	r7, #36	; 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3b01      	subs	r3, #1
 8003098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800309c:	d301      	bcc.n	80030a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800309e:	2301      	movs	r3, #1
 80030a0:	e00f      	b.n	80030c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030a2:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <SysTick_Config+0x40>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030aa:	210f      	movs	r1, #15
 80030ac:	f04f 30ff 	mov.w	r0, #4294967295
 80030b0:	f7ff ff8e 	bl	8002fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <SysTick_Config+0x40>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ba:	4b04      	ldr	r3, [pc, #16]	; (80030cc <SysTick_Config+0x40>)
 80030bc:	2207      	movs	r2, #7
 80030be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	e000e010 	.word	0xe000e010

080030d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff ff47 	bl	8002f6c <__NVIC_SetPriorityGrouping>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b086      	sub	sp, #24
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	4603      	mov	r3, r0
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030f4:	f7ff ff5e 	bl	8002fb4 <__NVIC_GetPriorityGrouping>
 80030f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	6978      	ldr	r0, [r7, #20]
 8003100:	f7ff ff90 	bl	8003024 <NVIC_EncodePriority>
 8003104:	4602      	mov	r2, r0
 8003106:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800310a:	4611      	mov	r1, r2
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ff5f 	bl	8002fd0 <__NVIC_SetPriority>
}
 8003112:	bf00      	nop
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff ffb2 	bl	800308c <SysTick_Config>
 8003128:	4603      	mov	r3, r0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	; 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003142:	4b89      	ldr	r3, [pc, #548]	; (8003368 <HAL_GPIO_Init+0x234>)
 8003144:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003146:	e194      	b.n	8003472 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	2101      	movs	r1, #1
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8186 	beq.w	800346c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	2b01      	cmp	r3, #1
 800316a:	d005      	beq.n	8003178 <HAL_GPIO_Init+0x44>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d130      	bne.n	80031da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	2203      	movs	r2, #3
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031ae:	2201      	movs	r2, #1
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	091b      	lsrs	r3, r3, #4
 80031c4:	f003 0201 	and.w	r2, r3, #1
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d017      	beq.n	8003216 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	2203      	movs	r2, #3
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d123      	bne.n	800326a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	08da      	lsrs	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3208      	adds	r2, #8
 800322a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	220f      	movs	r2, #15
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	08da      	lsrs	r2, r3, #3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3208      	adds	r2, #8
 8003264:	69b9      	ldr	r1, [r7, #24]
 8003266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	2203      	movs	r2, #3
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 0203 	and.w	r2, r3, #3
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80e0 	beq.w	800346c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ac:	4b2f      	ldr	r3, [pc, #188]	; (800336c <HAL_GPIO_Init+0x238>)
 80032ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032b2:	4a2e      	ldr	r2, [pc, #184]	; (800336c <HAL_GPIO_Init+0x238>)
 80032b4:	f043 0302 	orr.w	r3, r3, #2
 80032b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80032bc:	4b2b      	ldr	r3, [pc, #172]	; (800336c <HAL_GPIO_Init+0x238>)
 80032be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ca:	4a29      	ldr	r2, [pc, #164]	; (8003370 <HAL_GPIO_Init+0x23c>)
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	089b      	lsrs	r3, r3, #2
 80032d0:	3302      	adds	r3, #2
 80032d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	220f      	movs	r2, #15
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a20      	ldr	r2, [pc, #128]	; (8003374 <HAL_GPIO_Init+0x240>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d052      	beq.n	800339c <HAL_GPIO_Init+0x268>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a1f      	ldr	r2, [pc, #124]	; (8003378 <HAL_GPIO_Init+0x244>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d031      	beq.n	8003362 <HAL_GPIO_Init+0x22e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a1e      	ldr	r2, [pc, #120]	; (800337c <HAL_GPIO_Init+0x248>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d02b      	beq.n	800335e <HAL_GPIO_Init+0x22a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1d      	ldr	r2, [pc, #116]	; (8003380 <HAL_GPIO_Init+0x24c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d025      	beq.n	800335a <HAL_GPIO_Init+0x226>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <HAL_GPIO_Init+0x250>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d01f      	beq.n	8003356 <HAL_GPIO_Init+0x222>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a1b      	ldr	r2, [pc, #108]	; (8003388 <HAL_GPIO_Init+0x254>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d019      	beq.n	8003352 <HAL_GPIO_Init+0x21e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a1a      	ldr	r2, [pc, #104]	; (800338c <HAL_GPIO_Init+0x258>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <HAL_GPIO_Init+0x21a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a19      	ldr	r2, [pc, #100]	; (8003390 <HAL_GPIO_Init+0x25c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00d      	beq.n	800334a <HAL_GPIO_Init+0x216>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a18      	ldr	r2, [pc, #96]	; (8003394 <HAL_GPIO_Init+0x260>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <HAL_GPIO_Init+0x212>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a17      	ldr	r2, [pc, #92]	; (8003398 <HAL_GPIO_Init+0x264>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d101      	bne.n	8003342 <HAL_GPIO_Init+0x20e>
 800333e:	2309      	movs	r3, #9
 8003340:	e02d      	b.n	800339e <HAL_GPIO_Init+0x26a>
 8003342:	230a      	movs	r3, #10
 8003344:	e02b      	b.n	800339e <HAL_GPIO_Init+0x26a>
 8003346:	2308      	movs	r3, #8
 8003348:	e029      	b.n	800339e <HAL_GPIO_Init+0x26a>
 800334a:	2307      	movs	r3, #7
 800334c:	e027      	b.n	800339e <HAL_GPIO_Init+0x26a>
 800334e:	2306      	movs	r3, #6
 8003350:	e025      	b.n	800339e <HAL_GPIO_Init+0x26a>
 8003352:	2305      	movs	r3, #5
 8003354:	e023      	b.n	800339e <HAL_GPIO_Init+0x26a>
 8003356:	2304      	movs	r3, #4
 8003358:	e021      	b.n	800339e <HAL_GPIO_Init+0x26a>
 800335a:	2303      	movs	r3, #3
 800335c:	e01f      	b.n	800339e <HAL_GPIO_Init+0x26a>
 800335e:	2302      	movs	r3, #2
 8003360:	e01d      	b.n	800339e <HAL_GPIO_Init+0x26a>
 8003362:	2301      	movs	r3, #1
 8003364:	e01b      	b.n	800339e <HAL_GPIO_Init+0x26a>
 8003366:	bf00      	nop
 8003368:	58000080 	.word	0x58000080
 800336c:	58024400 	.word	0x58024400
 8003370:	58000400 	.word	0x58000400
 8003374:	58020000 	.word	0x58020000
 8003378:	58020400 	.word	0x58020400
 800337c:	58020800 	.word	0x58020800
 8003380:	58020c00 	.word	0x58020c00
 8003384:	58021000 	.word	0x58021000
 8003388:	58021400 	.word	0x58021400
 800338c:	58021800 	.word	0x58021800
 8003390:	58021c00 	.word	0x58021c00
 8003394:	58022000 	.word	0x58022000
 8003398:	58022400 	.word	0x58022400
 800339c:	2300      	movs	r3, #0
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	f002 0203 	and.w	r2, r2, #3
 80033a4:	0092      	lsls	r2, r2, #2
 80033a6:	4093      	lsls	r3, r2
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033ae:	4938      	ldr	r1, [pc, #224]	; (8003490 <HAL_GPIO_Init+0x35c>)
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	3302      	adds	r3, #2
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80033e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80033ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	3301      	adds	r3, #1
 8003470:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	f47f ae63 	bne.w	8003148 <HAL_GPIO_Init+0x14>
  }
}
 8003482:	bf00      	nop
 8003484:	bf00      	nop
 8003486:	3724      	adds	r7, #36	; 0x24
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	58000400 	.word	0x58000400

08003494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
 80034a0:	4613      	mov	r3, r2
 80034a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034a4:	787b      	ldrb	r3, [r7, #1]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034aa:	887a      	ldrh	r2, [r7, #2]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80034b0:	e003      	b.n	80034ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80034b2:	887b      	ldrh	r3, [r7, #2]
 80034b4:	041a      	lsls	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	619a      	str	r2, [r3, #24]
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b085      	sub	sp, #20
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034d8:	887a      	ldrh	r2, [r7, #2]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4013      	ands	r3, r2
 80034de:	041a      	lsls	r2, r3, #16
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	43d9      	mvns	r1, r3
 80034e4:	887b      	ldrh	r3, [r7, #2]
 80034e6:	400b      	ands	r3, r1
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	619a      	str	r2, [r3, #24]
}
 80034ee:	bf00      	nop
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003504:	4a08      	ldr	r2, [pc, #32]	; (8003528 <HAL_HSEM_FastTake+0x2c>)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3320      	adds	r3, #32
 800350a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350e:	4a07      	ldr	r2, [pc, #28]	; (800352c <HAL_HSEM_FastTake+0x30>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d101      	bne.n	8003518 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	e000      	b.n	800351a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	58026400 	.word	0x58026400
 800352c:	80000300 	.word	0x80000300

08003530 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800353a:	4906      	ldr	r1, [pc, #24]	; (8003554 <HAL_HSEM_Release+0x24>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	58026400 	.word	0x58026400

08003558 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003560:	4b29      	ldr	r3, [pc, #164]	; (8003608 <HAL_PWREx_ConfigSupply+0xb0>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	2b06      	cmp	r3, #6
 800356a:	d00a      	beq.n	8003582 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800356c:	4b26      	ldr	r3, [pc, #152]	; (8003608 <HAL_PWREx_ConfigSupply+0xb0>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	429a      	cmp	r2, r3
 8003578:	d001      	beq.n	800357e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e040      	b.n	8003600 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	e03e      	b.n	8003600 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003582:	4b21      	ldr	r3, [pc, #132]	; (8003608 <HAL_PWREx_ConfigSupply+0xb0>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800358a:	491f      	ldr	r1, [pc, #124]	; (8003608 <HAL_PWREx_ConfigSupply+0xb0>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4313      	orrs	r3, r2
 8003590:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003592:	f7ff fcaf 	bl	8002ef4 <HAL_GetTick>
 8003596:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003598:	e009      	b.n	80035ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800359a:	f7ff fcab 	bl	8002ef4 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035a8:	d901      	bls.n	80035ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e028      	b.n	8003600 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035ae:	4b16      	ldr	r3, [pc, #88]	; (8003608 <HAL_PWREx_ConfigSupply+0xb0>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ba:	d1ee      	bne.n	800359a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b1e      	cmp	r3, #30
 80035c0:	d008      	beq.n	80035d4 <HAL_PWREx_ConfigSupply+0x7c>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b2e      	cmp	r3, #46	; 0x2e
 80035c6:	d005      	beq.n	80035d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b1d      	cmp	r3, #29
 80035cc:	d002      	beq.n	80035d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b2d      	cmp	r3, #45	; 0x2d
 80035d2:	d114      	bne.n	80035fe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80035d4:	f7ff fc8e 	bl	8002ef4 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80035da:	e009      	b.n	80035f0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035dc:	f7ff fc8a 	bl	8002ef4 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ea:	d901      	bls.n	80035f0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e007      	b.n	8003600 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_PWREx_ConfigSupply+0xb0>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fc:	d1ee      	bne.n	80035dc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	58024800 	.word	0x58024800

0800360c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08c      	sub	sp, #48	; 0x30
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d102      	bne.n	8003620 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	f000 bc1d 	b.w	8003e5a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 8087 	beq.w	800373c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800362e:	4b99      	ldr	r3, [pc, #612]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003638:	4b96      	ldr	r3, [pc, #600]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	2b10      	cmp	r3, #16
 8003642:	d007      	beq.n	8003654 <HAL_RCC_OscConfig+0x48>
 8003644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003646:	2b18      	cmp	r3, #24
 8003648:	d110      	bne.n	800366c <HAL_RCC_OscConfig+0x60>
 800364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d10b      	bne.n	800366c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003654:	4b8f      	ldr	r3, [pc, #572]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d06c      	beq.n	800373a <HAL_RCC_OscConfig+0x12e>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d168      	bne.n	800373a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e3f6      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003674:	d106      	bne.n	8003684 <HAL_RCC_OscConfig+0x78>
 8003676:	4b87      	ldr	r3, [pc, #540]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a86      	ldr	r2, [pc, #536]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 800367c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e02e      	b.n	80036e2 <HAL_RCC_OscConfig+0xd6>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10c      	bne.n	80036a6 <HAL_RCC_OscConfig+0x9a>
 800368c:	4b81      	ldr	r3, [pc, #516]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a80      	ldr	r2, [pc, #512]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 8003692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	4b7e      	ldr	r3, [pc, #504]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a7d      	ldr	r2, [pc, #500]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 800369e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	e01d      	b.n	80036e2 <HAL_RCC_OscConfig+0xd6>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ae:	d10c      	bne.n	80036ca <HAL_RCC_OscConfig+0xbe>
 80036b0:	4b78      	ldr	r3, [pc, #480]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a77      	ldr	r2, [pc, #476]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 80036b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	4b75      	ldr	r3, [pc, #468]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a74      	ldr	r2, [pc, #464]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 80036c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	e00b      	b.n	80036e2 <HAL_RCC_OscConfig+0xd6>
 80036ca:	4b72      	ldr	r3, [pc, #456]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a71      	ldr	r2, [pc, #452]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 80036d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b6f      	ldr	r3, [pc, #444]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6e      	ldr	r2, [pc, #440]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 80036dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d013      	beq.n	8003712 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ea:	f7ff fc03 	bl	8002ef4 <HAL_GetTick>
 80036ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036f2:	f7ff fbff 	bl	8002ef4 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b64      	cmp	r3, #100	; 0x64
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e3aa      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003704:	4b63      	ldr	r3, [pc, #396]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0f0      	beq.n	80036f2 <HAL_RCC_OscConfig+0xe6>
 8003710:	e014      	b.n	800373c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7ff fbef 	bl	8002ef4 <HAL_GetTick>
 8003716:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800371a:	f7ff fbeb 	bl	8002ef4 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b64      	cmp	r3, #100	; 0x64
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e396      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800372c:	4b59      	ldr	r3, [pc, #356]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f0      	bne.n	800371a <HAL_RCC_OscConfig+0x10e>
 8003738:	e000      	b.n	800373c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80cb 	beq.w	80038e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800374a:	4b52      	ldr	r3, [pc, #328]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003752:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003754:	4b4f      	ldr	r3, [pc, #316]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d007      	beq.n	8003770 <HAL_RCC_OscConfig+0x164>
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	2b18      	cmp	r3, #24
 8003764:	d156      	bne.n	8003814 <HAL_RCC_OscConfig+0x208>
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d151      	bne.n	8003814 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003770:	4b48      	ldr	r3, [pc, #288]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_RCC_OscConfig+0x17c>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e368      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003788:	4b42      	ldr	r3, [pc, #264]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f023 0219 	bic.w	r2, r3, #25
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	493f      	ldr	r1, [pc, #252]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 8003796:	4313      	orrs	r3, r2
 8003798:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800379a:	f7ff fbab 	bl	8002ef4 <HAL_GetTick>
 800379e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a2:	f7ff fba7 	bl	8002ef4 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e352      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037b4:	4b37      	ldr	r3, [pc, #220]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c0:	f7ff fbc8 	bl	8002f54 <HAL_GetREVID>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d817      	bhi.n	80037fe <HAL_RCC_OscConfig+0x1f2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b40      	cmp	r3, #64	; 0x40
 80037d4:	d108      	bne.n	80037e8 <HAL_RCC_OscConfig+0x1dc>
 80037d6:	4b2f      	ldr	r3, [pc, #188]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80037de:	4a2d      	ldr	r2, [pc, #180]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 80037e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e6:	e07b      	b.n	80038e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e8:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	031b      	lsls	r3, r3, #12
 80037f6:	4927      	ldr	r1, [pc, #156]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037fc:	e070      	b.n	80038e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fe:	4b25      	ldr	r3, [pc, #148]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	061b      	lsls	r3, r3, #24
 800380c:	4921      	ldr	r1, [pc, #132]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 800380e:	4313      	orrs	r3, r2
 8003810:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003812:	e065      	b.n	80038e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d048      	beq.n	80038ae <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800381c:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f023 0219 	bic.w	r2, r3, #25
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	491a      	ldr	r1, [pc, #104]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382e:	f7ff fb61 	bl	8002ef4 <HAL_GetTick>
 8003832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003836:	f7ff fb5d 	bl	8002ef4 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e308      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003848:	4b12      	ldr	r3, [pc, #72]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003854:	f7ff fb7e 	bl	8002f54 <HAL_GetREVID>
 8003858:	4603      	mov	r3, r0
 800385a:	f241 0203 	movw	r2, #4099	; 0x1003
 800385e:	4293      	cmp	r3, r2
 8003860:	d81a      	bhi.n	8003898 <HAL_RCC_OscConfig+0x28c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b40      	cmp	r3, #64	; 0x40
 8003868:	d108      	bne.n	800387c <HAL_RCC_OscConfig+0x270>
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003872:	4a08      	ldr	r2, [pc, #32]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 8003874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003878:	6053      	str	r3, [r2, #4]
 800387a:	e031      	b.n	80038e0 <HAL_RCC_OscConfig+0x2d4>
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	031b      	lsls	r3, r3, #12
 800388a:	4902      	ldr	r1, [pc, #8]	; (8003894 <HAL_RCC_OscConfig+0x288>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]
 8003890:	e026      	b.n	80038e0 <HAL_RCC_OscConfig+0x2d4>
 8003892:	bf00      	nop
 8003894:	58024400 	.word	0x58024400
 8003898:	4b9a      	ldr	r3, [pc, #616]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	061b      	lsls	r3, r3, #24
 80038a6:	4997      	ldr	r1, [pc, #604]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]
 80038ac:	e018      	b.n	80038e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ae:	4b95      	ldr	r3, [pc, #596]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a94      	ldr	r2, [pc, #592]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ba:	f7ff fb1b 	bl	8002ef4 <HAL_GetTick>
 80038be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c2:	f7ff fb17 	bl	8002ef4 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e2c2      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038d4:	4b8b      	ldr	r3, [pc, #556]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f0      	bne.n	80038c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80a9 	beq.w	8003a40 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ee:	4b85      	ldr	r3, [pc, #532]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038f8:	4b82      	ldr	r3, [pc, #520]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b08      	cmp	r3, #8
 8003902:	d007      	beq.n	8003914 <HAL_RCC_OscConfig+0x308>
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b18      	cmp	r3, #24
 8003908:	d13a      	bne.n	8003980 <HAL_RCC_OscConfig+0x374>
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	2b01      	cmp	r3, #1
 8003912:	d135      	bne.n	8003980 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003914:	4b7b      	ldr	r3, [pc, #492]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_RCC_OscConfig+0x320>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	2b80      	cmp	r3, #128	; 0x80
 8003926:	d001      	beq.n	800392c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e296      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800392c:	f7ff fb12 	bl	8002f54 <HAL_GetREVID>
 8003930:	4603      	mov	r3, r0
 8003932:	f241 0203 	movw	r2, #4099	; 0x1003
 8003936:	4293      	cmp	r3, r2
 8003938:	d817      	bhi.n	800396a <HAL_RCC_OscConfig+0x35e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	2b20      	cmp	r3, #32
 8003940:	d108      	bne.n	8003954 <HAL_RCC_OscConfig+0x348>
 8003942:	4b70      	ldr	r3, [pc, #448]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800394a:	4a6e      	ldr	r2, [pc, #440]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 800394c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003950:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003952:	e075      	b.n	8003a40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003954:	4b6b      	ldr	r3, [pc, #428]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	069b      	lsls	r3, r3, #26
 8003962:	4968      	ldr	r1, [pc, #416]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003968:	e06a      	b.n	8003a40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800396a:	4b66      	ldr	r3, [pc, #408]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	061b      	lsls	r3, r3, #24
 8003978:	4962      	ldr	r1, [pc, #392]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 800397a:	4313      	orrs	r3, r2
 800397c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800397e:	e05f      	b.n	8003a40 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d042      	beq.n	8003a0e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003988:	4b5e      	ldr	r3, [pc, #376]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a5d      	ldr	r2, [pc, #372]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 800398e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7ff faae 	bl	8002ef4 <HAL_GetTick>
 8003998:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800399c:	f7ff faaa 	bl	8002ef4 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e255      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039ae:	4b55      	ldr	r3, [pc, #340]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039ba:	f7ff facb 	bl	8002f54 <HAL_GetREVID>
 80039be:	4603      	mov	r3, r0
 80039c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d817      	bhi.n	80039f8 <HAL_RCC_OscConfig+0x3ec>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d108      	bne.n	80039e2 <HAL_RCC_OscConfig+0x3d6>
 80039d0:	4b4c      	ldr	r3, [pc, #304]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039d8:	4a4a      	ldr	r2, [pc, #296]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 80039da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039de:	6053      	str	r3, [r2, #4]
 80039e0:	e02e      	b.n	8003a40 <HAL_RCC_OscConfig+0x434>
 80039e2:	4b48      	ldr	r3, [pc, #288]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	069b      	lsls	r3, r3, #26
 80039f0:	4944      	ldr	r1, [pc, #272]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	604b      	str	r3, [r1, #4]
 80039f6:	e023      	b.n	8003a40 <HAL_RCC_OscConfig+0x434>
 80039f8:	4b42      	ldr	r3, [pc, #264]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	061b      	lsls	r3, r3, #24
 8003a06:	493f      	ldr	r1, [pc, #252]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60cb      	str	r3, [r1, #12]
 8003a0c:	e018      	b.n	8003a40 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a0e:	4b3d      	ldr	r3, [pc, #244]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a3c      	ldr	r2, [pc, #240]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 8003a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1a:	f7ff fa6b 	bl	8002ef4 <HAL_GetTick>
 8003a1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a22:	f7ff fa67 	bl	8002ef4 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e212      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a34:	4b33      	ldr	r3, [pc, #204]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f0      	bne.n	8003a22 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d036      	beq.n	8003aba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d019      	beq.n	8003a88 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a54:	4b2b      	ldr	r3, [pc, #172]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 8003a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a58:	4a2a      	ldr	r2, [pc, #168]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7ff fa48 	bl	8002ef4 <HAL_GetTick>
 8003a64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a68:	f7ff fa44 	bl	8002ef4 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e1ef      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a7a:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 8003a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x45c>
 8003a86:	e018      	b.n	8003aba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a88:	4b1e      	ldr	r3, [pc, #120]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 8003a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8c:	4a1d      	ldr	r2, [pc, #116]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 8003a8e:	f023 0301 	bic.w	r3, r3, #1
 8003a92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a94:	f7ff fa2e 	bl	8002ef4 <HAL_GetTick>
 8003a98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a9c:	f7ff fa2a 	bl	8002ef4 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e1d5      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003aae:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 8003ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d039      	beq.n	8003b3a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d01c      	beq.n	8003b08 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ace:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a0c      	ldr	r2, [pc, #48]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 8003ad4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ad8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ada:	f7ff fa0b 	bl	8002ef4 <HAL_GetTick>
 8003ade:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ae2:	f7ff fa07 	bl	8002ef4 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e1b2      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <HAL_RCC_OscConfig+0x4f8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x4d6>
 8003b00:	e01b      	b.n	8003b3a <HAL_RCC_OscConfig+0x52e>
 8003b02:	bf00      	nop
 8003b04:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b08:	4b9b      	ldr	r3, [pc, #620]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a9a      	ldr	r2, [pc, #616]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003b0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b14:	f7ff f9ee 	bl	8002ef4 <HAL_GetTick>
 8003b18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b1c:	f7ff f9ea 	bl	8002ef4 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e195      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b2e:	4b92      	ldr	r3, [pc, #584]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 8081 	beq.w	8003c4a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b48:	4b8c      	ldr	r3, [pc, #560]	; (8003d7c <HAL_RCC_OscConfig+0x770>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a8b      	ldr	r2, [pc, #556]	; (8003d7c <HAL_RCC_OscConfig+0x770>)
 8003b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b54:	f7ff f9ce 	bl	8002ef4 <HAL_GetTick>
 8003b58:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b5c:	f7ff f9ca 	bl	8002ef4 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e175      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b6e:	4b83      	ldr	r3, [pc, #524]	; (8003d7c <HAL_RCC_OscConfig+0x770>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d106      	bne.n	8003b90 <HAL_RCC_OscConfig+0x584>
 8003b82:	4b7d      	ldr	r3, [pc, #500]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	4a7c      	ldr	r2, [pc, #496]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8e:	e02d      	b.n	8003bec <HAL_RCC_OscConfig+0x5e0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10c      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x5a6>
 8003b98:	4b77      	ldr	r3, [pc, #476]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	4a76      	ldr	r2, [pc, #472]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003b9e:	f023 0301 	bic.w	r3, r3, #1
 8003ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba4:	4b74      	ldr	r3, [pc, #464]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4a73      	ldr	r2, [pc, #460]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003baa:	f023 0304 	bic.w	r3, r3, #4
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb0:	e01c      	b.n	8003bec <HAL_RCC_OscConfig+0x5e0>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b05      	cmp	r3, #5
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x5c8>
 8003bba:	4b6f      	ldr	r3, [pc, #444]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	4a6e      	ldr	r2, [pc, #440]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003bc0:	f043 0304 	orr.w	r3, r3, #4
 8003bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc6:	4b6c      	ldr	r3, [pc, #432]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bca:	4a6b      	ldr	r2, [pc, #428]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd2:	e00b      	b.n	8003bec <HAL_RCC_OscConfig+0x5e0>
 8003bd4:	4b68      	ldr	r3, [pc, #416]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a67      	ldr	r2, [pc, #412]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
 8003be0:	4b65      	ldr	r3, [pc, #404]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be4:	4a64      	ldr	r2, [pc, #400]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003be6:	f023 0304 	bic.w	r3, r3, #4
 8003bea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d015      	beq.n	8003c20 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf4:	f7ff f97e 	bl	8002ef4 <HAL_GetTick>
 8003bf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bfc:	f7ff f97a 	bl	8002ef4 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e123      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c12:	4b59      	ldr	r3, [pc, #356]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0ee      	beq.n	8003bfc <HAL_RCC_OscConfig+0x5f0>
 8003c1e:	e014      	b.n	8003c4a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7ff f968 	bl	8002ef4 <HAL_GetTick>
 8003c24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7ff f964 	bl	8002ef4 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e10d      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c3e:	4b4e      	ldr	r3, [pc, #312]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1ee      	bne.n	8003c28 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 8102 	beq.w	8003e58 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c54:	4b48      	ldr	r3, [pc, #288]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c5c:	2b18      	cmp	r3, #24
 8003c5e:	f000 80bd 	beq.w	8003ddc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	f040 809e 	bne.w	8003da8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6c:	4b42      	ldr	r3, [pc, #264]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a41      	ldr	r2, [pc, #260]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7ff f93c 	bl	8002ef4 <HAL_GetTick>
 8003c7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c80:	f7ff f938 	bl	8002ef4 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e0e3      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c92:	4b39      	ldr	r3, [pc, #228]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c9e:	4b36      	ldr	r3, [pc, #216]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ca2:	4b37      	ldr	r3, [pc, #220]	; (8003d80 <HAL_RCC_OscConfig+0x774>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cae:	0112      	lsls	r2, r2, #4
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	4931      	ldr	r1, [pc, #196]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	628b      	str	r3, [r1, #40]	; 0x28
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	025b      	lsls	r3, r3, #9
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	061b      	lsls	r3, r3, #24
 8003ce4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ce8:	4923      	ldr	r1, [pc, #140]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003cee:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	4a21      	ldr	r2, [pc, #132]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003cf4:	f023 0301 	bic.w	r3, r3, #1
 8003cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003cfa:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cfe:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <HAL_RCC_OscConfig+0x778>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d06:	00d2      	lsls	r2, r2, #3
 8003d08:	491b      	ldr	r1, [pc, #108]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d0e:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	f023 020c 	bic.w	r2, r3, #12
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	4917      	ldr	r1, [pc, #92]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d20:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	f023 0202 	bic.w	r2, r3, #2
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2c:	4912      	ldr	r1, [pc, #72]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d32:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	4a10      	ldr	r2, [pc, #64]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	4a0d      	ldr	r2, [pc, #52]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	4a07      	ldr	r2, [pc, #28]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <HAL_RCC_OscConfig+0x76c>)
 8003d68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6e:	f7ff f8c1 	bl	8002ef4 <HAL_GetTick>
 8003d72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d74:	e011      	b.n	8003d9a <HAL_RCC_OscConfig+0x78e>
 8003d76:	bf00      	nop
 8003d78:	58024400 	.word	0x58024400
 8003d7c:	58024800 	.word	0x58024800
 8003d80:	fffffc0c 	.word	0xfffffc0c
 8003d84:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d88:	f7ff f8b4 	bl	8002ef4 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e05f      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d9a:	4b32      	ldr	r3, [pc, #200]	; (8003e64 <HAL_RCC_OscConfig+0x858>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x77c>
 8003da6:	e057      	b.n	8003e58 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da8:	4b2e      	ldr	r3, [pc, #184]	; (8003e64 <HAL_RCC_OscConfig+0x858>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2d      	ldr	r2, [pc, #180]	; (8003e64 <HAL_RCC_OscConfig+0x858>)
 8003dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7ff f89e 	bl	8002ef4 <HAL_GetTick>
 8003db8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dbc:	f7ff f89a 	bl	8002ef4 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e045      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dce:	4b25      	ldr	r3, [pc, #148]	; (8003e64 <HAL_RCC_OscConfig+0x858>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCC_OscConfig+0x7b0>
 8003dda:	e03d      	b.n	8003e58 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ddc:	4b21      	ldr	r3, [pc, #132]	; (8003e64 <HAL_RCC_OscConfig+0x858>)
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003de2:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <HAL_RCC_OscConfig+0x858>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d031      	beq.n	8003e54 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f003 0203 	and.w	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d12a      	bne.n	8003e54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d122      	bne.n	8003e54 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d11a      	bne.n	8003e54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	0a5b      	lsrs	r3, r3, #9
 8003e22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d111      	bne.n	8003e54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	0c1b      	lsrs	r3, r3, #16
 8003e34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d108      	bne.n	8003e54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	0e1b      	lsrs	r3, r3, #24
 8003e46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3730      	adds	r7, #48	; 0x30
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	58024400 	.word	0x58024400

08003e68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e19c      	b.n	80041b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b8a      	ldr	r3, [pc, #552]	; (80040a8 <HAL_RCC_ClockConfig+0x240>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d910      	bls.n	8003eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b87      	ldr	r3, [pc, #540]	; (80040a8 <HAL_RCC_ClockConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 020f 	bic.w	r2, r3, #15
 8003e92:	4985      	ldr	r1, [pc, #532]	; (80040a8 <HAL_RCC_ClockConfig+0x240>)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b83      	ldr	r3, [pc, #524]	; (80040a8 <HAL_RCC_ClockConfig+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e184      	b.n	80041b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d010      	beq.n	8003eda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	4b7b      	ldr	r3, [pc, #492]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d908      	bls.n	8003eda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ec8:	4b78      	ldr	r3, [pc, #480]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	4975      	ldr	r1, [pc, #468]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d010      	beq.n	8003f08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695a      	ldr	r2, [r3, #20]
 8003eea:	4b70      	ldr	r3, [pc, #448]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d908      	bls.n	8003f08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ef6:	4b6d      	ldr	r3, [pc, #436]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	496a      	ldr	r1, [pc, #424]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d010      	beq.n	8003f36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699a      	ldr	r2, [r3, #24]
 8003f18:	4b64      	ldr	r3, [pc, #400]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d908      	bls.n	8003f36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f24:	4b61      	ldr	r3, [pc, #388]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	495e      	ldr	r1, [pc, #376]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d010      	beq.n	8003f64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69da      	ldr	r2, [r3, #28]
 8003f46:	4b59      	ldr	r3, [pc, #356]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d908      	bls.n	8003f64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f52:	4b56      	ldr	r3, [pc, #344]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	4953      	ldr	r1, [pc, #332]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d010      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	4b4d      	ldr	r3, [pc, #308]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d908      	bls.n	8003f92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f80:	4b4a      	ldr	r3, [pc, #296]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f023 020f 	bic.w	r2, r3, #15
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4947      	ldr	r1, [pc, #284]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d055      	beq.n	800404a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f9e:	4b43      	ldr	r3, [pc, #268]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	4940      	ldr	r1, [pc, #256]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d107      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fb8:	4b3c      	ldr	r3, [pc, #240]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d121      	bne.n	8004008 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0f6      	b.n	80041b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	d107      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fd0:	4b36      	ldr	r3, [pc, #216]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d115      	bne.n	8004008 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0ea      	b.n	80041b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d107      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fe8:	4b30      	ldr	r3, [pc, #192]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d109      	bne.n	8004008 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0de      	b.n	80041b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ff8:	4b2c      	ldr	r3, [pc, #176]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0d6      	b.n	80041b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004008:	4b28      	ldr	r3, [pc, #160]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f023 0207 	bic.w	r2, r3, #7
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4925      	ldr	r1, [pc, #148]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8004016:	4313      	orrs	r3, r2
 8004018:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401a:	f7fe ff6b 	bl	8002ef4 <HAL_GetTick>
 800401e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004020:	e00a      	b.n	8004038 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004022:	f7fe ff67 	bl	8002ef4 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004030:	4293      	cmp	r3, r2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e0be      	b.n	80041b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004038:	4b1c      	ldr	r3, [pc, #112]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	429a      	cmp	r2, r3
 8004048:	d1eb      	bne.n	8004022 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d010      	beq.n	8004078 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	4b14      	ldr	r3, [pc, #80]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	429a      	cmp	r2, r3
 8004064:	d208      	bcs.n	8004078 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004066:	4b11      	ldr	r3, [pc, #68]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f023 020f 	bic.w	r2, r3, #15
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	490e      	ldr	r1, [pc, #56]	; (80040ac <HAL_RCC_ClockConfig+0x244>)
 8004074:	4313      	orrs	r3, r2
 8004076:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_RCC_ClockConfig+0x240>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d214      	bcs.n	80040b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <HAL_RCC_ClockConfig+0x240>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 020f 	bic.w	r2, r3, #15
 800408e:	4906      	ldr	r1, [pc, #24]	; (80040a8 <HAL_RCC_ClockConfig+0x240>)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <HAL_RCC_ClockConfig+0x240>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d005      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e086      	b.n	80041b6 <HAL_RCC_ClockConfig+0x34e>
 80040a8:	52002000 	.word	0x52002000
 80040ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d010      	beq.n	80040de <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	4b3f      	ldr	r3, [pc, #252]	; (80041c0 <HAL_RCC_ClockConfig+0x358>)
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d208      	bcs.n	80040de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040cc:	4b3c      	ldr	r3, [pc, #240]	; (80041c0 <HAL_RCC_ClockConfig+0x358>)
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	4939      	ldr	r1, [pc, #228]	; (80041c0 <HAL_RCC_ClockConfig+0x358>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d010      	beq.n	800410c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <HAL_RCC_ClockConfig+0x358>)
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d208      	bcs.n	800410c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040fa:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <HAL_RCC_ClockConfig+0x358>)
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	492e      	ldr	r1, [pc, #184]	; (80041c0 <HAL_RCC_ClockConfig+0x358>)
 8004108:	4313      	orrs	r3, r2
 800410a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	2b00      	cmp	r3, #0
 8004116:	d010      	beq.n	800413a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699a      	ldr	r2, [r3, #24]
 800411c:	4b28      	ldr	r3, [pc, #160]	; (80041c0 <HAL_RCC_ClockConfig+0x358>)
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004124:	429a      	cmp	r2, r3
 8004126:	d208      	bcs.n	800413a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004128:	4b25      	ldr	r3, [pc, #148]	; (80041c0 <HAL_RCC_ClockConfig+0x358>)
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	4922      	ldr	r1, [pc, #136]	; (80041c0 <HAL_RCC_ClockConfig+0x358>)
 8004136:	4313      	orrs	r3, r2
 8004138:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b00      	cmp	r3, #0
 8004144:	d010      	beq.n	8004168 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69da      	ldr	r2, [r3, #28]
 800414a:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <HAL_RCC_ClockConfig+0x358>)
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004152:	429a      	cmp	r2, r3
 8004154:	d208      	bcs.n	8004168 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004156:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <HAL_RCC_ClockConfig+0x358>)
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	4917      	ldr	r1, [pc, #92]	; (80041c0 <HAL_RCC_ClockConfig+0x358>)
 8004164:	4313      	orrs	r3, r2
 8004166:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004168:	f000 f834 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 800416c:	4602      	mov	r2, r0
 800416e:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <HAL_RCC_ClockConfig+0x358>)
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	0a1b      	lsrs	r3, r3, #8
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	4912      	ldr	r1, [pc, #72]	; (80041c4 <HAL_RCC_ClockConfig+0x35c>)
 800417a:	5ccb      	ldrb	r3, [r1, r3]
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
 8004184:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004186:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <HAL_RCC_ClockConfig+0x358>)
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	4a0d      	ldr	r2, [pc, #52]	; (80041c4 <HAL_RCC_ClockConfig+0x35c>)
 8004190:	5cd3      	ldrb	r3, [r2, r3]
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
 800419c:	4a0a      	ldr	r2, [pc, #40]	; (80041c8 <HAL_RCC_ClockConfig+0x360>)
 800419e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041a0:	4a0a      	ldr	r2, [pc, #40]	; (80041cc <HAL_RCC_ClockConfig+0x364>)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80041a6:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <HAL_RCC_ClockConfig+0x368>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe fe58 	bl	8002e60 <HAL_InitTick>
 80041b0:	4603      	mov	r3, r0
 80041b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	58024400 	.word	0x58024400
 80041c4:	0800fd84 	.word	0x0800fd84
 80041c8:	24000004 	.word	0x24000004
 80041cc:	24000000 	.word	0x24000000
 80041d0:	24000008 	.word	0x24000008

080041d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b089      	sub	sp, #36	; 0x24
 80041d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041da:	4bb3      	ldr	r3, [pc, #716]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041e2:	2b18      	cmp	r3, #24
 80041e4:	f200 8155 	bhi.w	8004492 <HAL_RCC_GetSysClockFreq+0x2be>
 80041e8:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80041ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ee:	bf00      	nop
 80041f0:	08004255 	.word	0x08004255
 80041f4:	08004493 	.word	0x08004493
 80041f8:	08004493 	.word	0x08004493
 80041fc:	08004493 	.word	0x08004493
 8004200:	08004493 	.word	0x08004493
 8004204:	08004493 	.word	0x08004493
 8004208:	08004493 	.word	0x08004493
 800420c:	08004493 	.word	0x08004493
 8004210:	0800427b 	.word	0x0800427b
 8004214:	08004493 	.word	0x08004493
 8004218:	08004493 	.word	0x08004493
 800421c:	08004493 	.word	0x08004493
 8004220:	08004493 	.word	0x08004493
 8004224:	08004493 	.word	0x08004493
 8004228:	08004493 	.word	0x08004493
 800422c:	08004493 	.word	0x08004493
 8004230:	08004281 	.word	0x08004281
 8004234:	08004493 	.word	0x08004493
 8004238:	08004493 	.word	0x08004493
 800423c:	08004493 	.word	0x08004493
 8004240:	08004493 	.word	0x08004493
 8004244:	08004493 	.word	0x08004493
 8004248:	08004493 	.word	0x08004493
 800424c:	08004493 	.word	0x08004493
 8004250:	08004287 	.word	0x08004287
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004254:	4b94      	ldr	r3, [pc, #592]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d009      	beq.n	8004274 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004260:	4b91      	ldr	r3, [pc, #580]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	08db      	lsrs	r3, r3, #3
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	4a90      	ldr	r2, [pc, #576]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
 8004270:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004272:	e111      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004274:	4b8d      	ldr	r3, [pc, #564]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004276:	61bb      	str	r3, [r7, #24]
    break;
 8004278:	e10e      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800427a:	4b8d      	ldr	r3, [pc, #564]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800427c:	61bb      	str	r3, [r7, #24]
    break;
 800427e:	e10b      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004280:	4b8c      	ldr	r3, [pc, #560]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004282:	61bb      	str	r3, [r7, #24]
    break;
 8004284:	e108      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004286:	4b88      	ldr	r3, [pc, #544]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004290:	4b85      	ldr	r3, [pc, #532]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800429a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800429c:	4b82      	ldr	r3, [pc, #520]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80042a6:	4b80      	ldr	r3, [pc, #512]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042aa:	08db      	lsrs	r3, r3, #3
 80042ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	fb02 f303 	mul.w	r3, r2, r3
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80e1 	beq.w	800448c <HAL_RCC_GetSysClockFreq+0x2b8>
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	f000 8083 	beq.w	80043d8 <HAL_RCC_GetSysClockFreq+0x204>
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	f200 80a1 	bhi.w	800441c <HAL_RCC_GetSysClockFreq+0x248>
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x114>
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d056      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0x1c0>
 80042e6:	e099      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042e8:	4b6f      	ldr	r3, [pc, #444]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d02d      	beq.n	8004350 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042f4:	4b6c      	ldr	r3, [pc, #432]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	08db      	lsrs	r3, r3, #3
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	4a6b      	ldr	r2, [pc, #428]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
 8004304:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	ee07 3a90 	vmov	s15, r3
 800430c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800431e:	4b62      	ldr	r3, [pc, #392]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800432e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004332:	eddf 5a61 	vldr	s11, [pc, #388]	; 80044b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800433a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800433e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800434a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800434e:	e087      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80044bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800435e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004362:	4b51      	ldr	r3, [pc, #324]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004372:	ed97 6a02 	vldr	s12, [r7, #8]
 8004376:	eddf 5a50 	vldr	s11, [pc, #320]	; 80044b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800437a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800437e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800438a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004392:	e065      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80044c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a6:	4b40      	ldr	r3, [pc, #256]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80044b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043d6:	e043      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80044c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80043e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ea:	4b2f      	ldr	r3, [pc, #188]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f2:	ee07 3a90 	vmov	s15, r3
 80043f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80043fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80044b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800440e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800441a:	e021      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004426:	eddf 6a26 	vldr	s13, [pc, #152]	; 80044c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800442a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442e:	4b1e      	ldr	r3, [pc, #120]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004442:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80044b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800445e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004460:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	0a5b      	lsrs	r3, r3, #9
 8004466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800446a:	3301      	adds	r3, #1
 800446c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	ee07 3a90 	vmov	s15, r3
 8004474:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004478:	edd7 6a07 	vldr	s13, [r7, #28]
 800447c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004484:	ee17 3a90 	vmov	r3, s15
 8004488:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800448a:	e005      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	61bb      	str	r3, [r7, #24]
    break;
 8004490:	e002      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004492:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004494:	61bb      	str	r3, [r7, #24]
    break;
 8004496:	bf00      	nop
  }

  return sysclockfreq;
 8004498:	69bb      	ldr	r3, [r7, #24]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3724      	adds	r7, #36	; 0x24
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	58024400 	.word	0x58024400
 80044ac:	03d09000 	.word	0x03d09000
 80044b0:	003d0900 	.word	0x003d0900
 80044b4:	007a1200 	.word	0x007a1200
 80044b8:	46000000 	.word	0x46000000
 80044bc:	4c742400 	.word	0x4c742400
 80044c0:	4a742400 	.word	0x4a742400
 80044c4:	4af42400 	.word	0x4af42400

080044c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80044ce:	f7ff fe81 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 80044d2:	4602      	mov	r2, r0
 80044d4:	4b10      	ldr	r3, [pc, #64]	; (8004518 <HAL_RCC_GetHCLKFreq+0x50>)
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	0a1b      	lsrs	r3, r3, #8
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	490f      	ldr	r1, [pc, #60]	; (800451c <HAL_RCC_GetHCLKFreq+0x54>)
 80044e0:	5ccb      	ldrb	r3, [r1, r3]
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044ec:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <HAL_RCC_GetHCLKFreq+0x50>)
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	4a09      	ldr	r2, [pc, #36]	; (800451c <HAL_RCC_GetHCLKFreq+0x54>)
 80044f6:	5cd3      	ldrb	r3, [r2, r3]
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004502:	4a07      	ldr	r2, [pc, #28]	; (8004520 <HAL_RCC_GetHCLKFreq+0x58>)
 8004504:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004506:	4a07      	ldr	r2, [pc, #28]	; (8004524 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800450c:	4b04      	ldr	r3, [pc, #16]	; (8004520 <HAL_RCC_GetHCLKFreq+0x58>)
 800450e:	681b      	ldr	r3, [r3, #0]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	58024400 	.word	0x58024400
 800451c:	0800fd84 	.word	0x0800fd84
 8004520:	24000004 	.word	0x24000004
 8004524:	24000000 	.word	0x24000000

08004528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800452c:	f7ff ffcc 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 8004530:	4602      	mov	r2, r0
 8004532:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	091b      	lsrs	r3, r3, #4
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	4904      	ldr	r1, [pc, #16]	; (8004550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800453e:	5ccb      	ldrb	r3, [r1, r3]
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004548:	4618      	mov	r0, r3
 800454a:	bd80      	pop	{r7, pc}
 800454c:	58024400 	.word	0x58024400
 8004550:	0800fd84 	.word	0x0800fd84

08004554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004558:	f7ff ffb6 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b06      	ldr	r3, [pc, #24]	; (8004578 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	0a1b      	lsrs	r3, r3, #8
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4904      	ldr	r1, [pc, #16]	; (800457c <HAL_RCC_GetPCLK2Freq+0x28>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004574:	4618      	mov	r0, r3
 8004576:	bd80      	pop	{r7, pc}
 8004578:	58024400 	.word	0x58024400
 800457c:	0800fd84 	.word	0x0800fd84

08004580 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004588:	2300      	movs	r3, #0
 800458a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800458c:	2300      	movs	r3, #0
 800458e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d03f      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045a4:	d02a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045aa:	d824      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045b0:	d018      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045b6:	d81e      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045c0:	d007      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045c2:	e018      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c4:	4ba3      	ldr	r3, [pc, #652]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	4aa2      	ldr	r2, [pc, #648]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045d0:	e015      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3304      	adds	r3, #4
 80045d6:	2102      	movs	r1, #2
 80045d8:	4618      	mov	r0, r3
 80045da:	f001 f9d5 	bl	8005988 <RCCEx_PLL2_Config>
 80045de:	4603      	mov	r3, r0
 80045e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045e2:	e00c      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3324      	adds	r3, #36	; 0x24
 80045e8:	2102      	movs	r1, #2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f001 fa7e 	bl	8005aec <RCCEx_PLL3_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045f4:	e003      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	75fb      	strb	r3, [r7, #23]
      break;
 80045fa:	e000      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80045fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d109      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004604:	4b93      	ldr	r3, [pc, #588]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004608:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004610:	4990      	ldr	r1, [pc, #576]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004612:	4313      	orrs	r3, r2
 8004614:	650b      	str	r3, [r1, #80]	; 0x50
 8004616:	e001      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004618:	7dfb      	ldrb	r3, [r7, #23]
 800461a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d03d      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462c:	2b04      	cmp	r3, #4
 800462e:	d826      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004630:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004636:	bf00      	nop
 8004638:	0800464d 	.word	0x0800464d
 800463c:	0800465b 	.word	0x0800465b
 8004640:	0800466d 	.word	0x0800466d
 8004644:	08004685 	.word	0x08004685
 8004648:	08004685 	.word	0x08004685
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800464c:	4b81      	ldr	r3, [pc, #516]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	4a80      	ldr	r2, [pc, #512]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004656:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004658:	e015      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3304      	adds	r3, #4
 800465e:	2100      	movs	r1, #0
 8004660:	4618      	mov	r0, r3
 8004662:	f001 f991 	bl	8005988 <RCCEx_PLL2_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800466a:	e00c      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3324      	adds	r3, #36	; 0x24
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f001 fa3a 	bl	8005aec <RCCEx_PLL3_Config>
 8004678:	4603      	mov	r3, r0
 800467a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800467c:	e003      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	75fb      	strb	r3, [r7, #23]
      break;
 8004682:	e000      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004686:	7dfb      	ldrb	r3, [r7, #23]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d109      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800468c:	4b71      	ldr	r3, [pc, #452]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800468e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004690:	f023 0207 	bic.w	r2, r3, #7
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004698:	496e      	ldr	r1, [pc, #440]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800469a:	4313      	orrs	r3, r2
 800469c:	650b      	str	r3, [r1, #80]	; 0x50
 800469e:	e001      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
 80046a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d042      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b8:	d02b      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80046ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046be:	d825      	bhi.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80046c0:	2bc0      	cmp	r3, #192	; 0xc0
 80046c2:	d028      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80046c4:	2bc0      	cmp	r3, #192	; 0xc0
 80046c6:	d821      	bhi.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80046c8:	2b80      	cmp	r3, #128	; 0x80
 80046ca:	d016      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80046cc:	2b80      	cmp	r3, #128	; 0x80
 80046ce:	d81d      	bhi.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80046d4:	2b40      	cmp	r3, #64	; 0x40
 80046d6:	d007      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80046d8:	e018      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046da:	4b5e      	ldr	r3, [pc, #376]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	4a5d      	ldr	r2, [pc, #372]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80046e6:	e017      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3304      	adds	r3, #4
 80046ec:	2100      	movs	r1, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f001 f94a 	bl	8005988 <RCCEx_PLL2_Config>
 80046f4:	4603      	mov	r3, r0
 80046f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80046f8:	e00e      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3324      	adds	r3, #36	; 0x24
 80046fe:	2100      	movs	r1, #0
 8004700:	4618      	mov	r0, r3
 8004702:	f001 f9f3 	bl	8005aec <RCCEx_PLL3_Config>
 8004706:	4603      	mov	r3, r0
 8004708:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800470a:	e005      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	75fb      	strb	r3, [r7, #23]
      break;
 8004710:	e002      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004712:	bf00      	nop
 8004714:	e000      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004718:	7dfb      	ldrb	r3, [r7, #23]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800471e:	4b4d      	ldr	r3, [pc, #308]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004722:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472a:	494a      	ldr	r1, [pc, #296]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800472c:	4313      	orrs	r3, r2
 800472e:	650b      	str	r3, [r1, #80]	; 0x50
 8004730:	e001      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004732:	7dfb      	ldrb	r3, [r7, #23]
 8004734:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473e:	2b00      	cmp	r3, #0
 8004740:	d049      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004748:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800474c:	d030      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800474e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004752:	d82a      	bhi.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004754:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004758:	d02c      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800475a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800475e:	d824      	bhi.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004764:	d018      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800476a:	d81e      	bhi.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004774:	d007      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004776:	e018      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004778:	4b36      	ldr	r3, [pc, #216]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	4a35      	ldr	r2, [pc, #212]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800477e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004782:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004784:	e017      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3304      	adds	r3, #4
 800478a:	2100      	movs	r1, #0
 800478c:	4618      	mov	r0, r3
 800478e:	f001 f8fb 	bl	8005988 <RCCEx_PLL2_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004796:	e00e      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3324      	adds	r3, #36	; 0x24
 800479c:	2100      	movs	r1, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	f001 f9a4 	bl	8005aec <RCCEx_PLL3_Config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047a8:	e005      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]
      break;
 80047ae:	e002      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80047b0:	bf00      	nop
 80047b2:	e000      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80047b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047b6:	7dfb      	ldrb	r3, [r7, #23]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10a      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80047bc:	4b25      	ldr	r3, [pc, #148]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047ca:	4922      	ldr	r1, [pc, #136]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	658b      	str	r3, [r1, #88]	; 0x58
 80047d0:	e001      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
 80047d4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d04b      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80047e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047ec:	d030      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80047ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047f2:	d82a      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80047f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047f8:	d02e      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80047fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047fe:	d824      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004800:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004804:	d018      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004806:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800480a:	d81e      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004814:	d007      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004816:	e018      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004818:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	4a0d      	ldr	r2, [pc, #52]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800481e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004824:	e019      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f001 f8ab 	bl	8005988 <RCCEx_PLL2_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004836:	e010      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3324      	adds	r3, #36	; 0x24
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f001 f954 	bl	8005aec <RCCEx_PLL3_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004848:	e007      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	75fb      	strb	r3, [r7, #23]
      break;
 800484e:	e004      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004850:	bf00      	nop
 8004852:	e002      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004854:	58024400 	.word	0x58024400
      break;
 8004858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800485a:	7dfb      	ldrb	r3, [r7, #23]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004860:	4b99      	ldr	r3, [pc, #612]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004864:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800486e:	4996      	ldr	r1, [pc, #600]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004870:	4313      	orrs	r3, r2
 8004872:	658b      	str	r3, [r1, #88]	; 0x58
 8004874:	e001      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004876:	7dfb      	ldrb	r3, [r7, #23]
 8004878:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d032      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488a:	2b30      	cmp	r3, #48	; 0x30
 800488c:	d01c      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800488e:	2b30      	cmp	r3, #48	; 0x30
 8004890:	d817      	bhi.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004892:	2b20      	cmp	r3, #32
 8004894:	d00c      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004896:	2b20      	cmp	r3, #32
 8004898:	d813      	bhi.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d016      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800489e:	2b10      	cmp	r3, #16
 80048a0:	d10f      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a2:	4b89      	ldr	r3, [pc, #548]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	4a88      	ldr	r2, [pc, #544]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80048ae:	e00e      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	2102      	movs	r1, #2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f001 f866 	bl	8005988 <RCCEx_PLL2_Config>
 80048bc:	4603      	mov	r3, r0
 80048be:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80048c0:	e005      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	75fb      	strb	r3, [r7, #23]
      break;
 80048c6:	e002      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80048c8:	bf00      	nop
 80048ca:	e000      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80048cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d109      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80048d4:	4b7c      	ldr	r3, [pc, #496]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e0:	4979      	ldr	r1, [pc, #484]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80048e6:	e001      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d047      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004900:	d030      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004906:	d82a      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004908:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800490c:	d02c      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800490e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004912:	d824      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004918:	d018      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800491a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800491e:	d81e      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004928:	d007      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800492a:	e018      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800492c:	4b66      	ldr	r3, [pc, #408]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	4a65      	ldr	r2, [pc, #404]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004936:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004938:	e017      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3304      	adds	r3, #4
 800493e:	2100      	movs	r1, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f001 f821 	bl	8005988 <RCCEx_PLL2_Config>
 8004946:	4603      	mov	r3, r0
 8004948:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800494a:	e00e      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3324      	adds	r3, #36	; 0x24
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f001 f8ca 	bl	8005aec <RCCEx_PLL3_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800495c:	e005      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	75fb      	strb	r3, [r7, #23]
      break;
 8004962:	e002      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004964:	bf00      	nop
 8004966:	e000      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004968:	bf00      	nop
    }

    if(ret == HAL_OK)
 800496a:	7dfb      	ldrb	r3, [r7, #23]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d109      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004970:	4b55      	ldr	r3, [pc, #340]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004974:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497c:	4952      	ldr	r1, [pc, #328]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800497e:	4313      	orrs	r3, r2
 8004980:	650b      	str	r3, [r1, #80]	; 0x50
 8004982:	e001      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004984:	7dfb      	ldrb	r3, [r7, #23]
 8004986:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d049      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800499c:	d02e      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800499e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049a2:	d828      	bhi.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80049a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049a8:	d02a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80049aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049ae:	d822      	bhi.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80049b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049b4:	d026      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80049b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049ba:	d81c      	bhi.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80049bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049c0:	d010      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80049c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049c6:	d816      	bhi.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01d      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80049cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d0:	d111      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3304      	adds	r3, #4
 80049d6:	2101      	movs	r1, #1
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 ffd5 	bl	8005988 <RCCEx_PLL2_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80049e2:	e012      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3324      	adds	r3, #36	; 0x24
 80049e8:	2101      	movs	r1, #1
 80049ea:	4618      	mov	r0, r3
 80049ec:	f001 f87e 	bl	8005aec <RCCEx_PLL3_Config>
 80049f0:	4603      	mov	r3, r0
 80049f2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80049f4:	e009      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	75fb      	strb	r3, [r7, #23]
      break;
 80049fa:	e006      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80049fc:	bf00      	nop
 80049fe:	e004      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a00:	bf00      	nop
 8004a02:	e002      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a04:	bf00      	nop
 8004a06:	e000      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a0a:	7dfb      	ldrb	r3, [r7, #23]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d109      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a10:	4b2d      	ldr	r3, [pc, #180]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a14:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1c:	492a      	ldr	r1, [pc, #168]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	650b      	str	r3, [r1, #80]	; 0x50
 8004a22:	e001      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a24:	7dfb      	ldrb	r3, [r7, #23]
 8004a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d04d      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a3e:	d02e      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a44:	d828      	bhi.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4a:	d02a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a50:	d822      	bhi.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004a52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a56:	d026      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004a58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a5c:	d81c      	bhi.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a62:	d010      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a68:	d816      	bhi.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01d      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a72:	d111      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3304      	adds	r3, #4
 8004a78:	2101      	movs	r1, #1
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 ff84 	bl	8005988 <RCCEx_PLL2_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004a84:	e012      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3324      	adds	r3, #36	; 0x24
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 f82d 	bl	8005aec <RCCEx_PLL3_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004a96:	e009      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a9c:	e006      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e004      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e002      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004aa6:	bf00      	nop
 8004aa8:	e000      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10c      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ac0:	4901      	ldr	r1, [pc, #4]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	658b      	str	r3, [r1, #88]	; 0x58
 8004ac6:	e003      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004ac8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004acc:	7dfb      	ldrb	r3, [r7, #23]
 8004ace:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d02f      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae4:	d00e      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aea:	d814      	bhi.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d015      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004af0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004af4:	d10f      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af6:	4baf      	ldr	r3, [pc, #700]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	4aae      	ldr	r2, [pc, #696]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b02:	e00c      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3304      	adds	r3, #4
 8004b08:	2101      	movs	r1, #1
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 ff3c 	bl	8005988 <RCCEx_PLL2_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b14:	e003      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	75fb      	strb	r3, [r7, #23]
      break;
 8004b1a:	e000      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004b1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d109      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b24:	4ba3      	ldr	r3, [pc, #652]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b28:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b30:	49a0      	ldr	r1, [pc, #640]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	650b      	str	r3, [r1, #80]	; 0x50
 8004b36:	e001      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b38:	7dfb      	ldrb	r3, [r7, #23]
 8004b3a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d032      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d81b      	bhi.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004b50:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b8f 	.word	0x08004b8f
 8004b5c:	08004b69 	.word	0x08004b69
 8004b60:	08004b77 	.word	0x08004b77
 8004b64:	08004b8f 	.word	0x08004b8f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b68:	4b92      	ldr	r3, [pc, #584]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	4a91      	ldr	r2, [pc, #580]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004b74:	e00c      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	2102      	movs	r1, #2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 ff03 	bl	8005988 <RCCEx_PLL2_Config>
 8004b82:	4603      	mov	r3, r0
 8004b84:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004b86:	e003      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b8c:	e000      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b90:	7dfb      	ldrb	r3, [r7, #23]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d109      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004b96:	4b87      	ldr	r3, [pc, #540]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9a:	f023 0203 	bic.w	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	4984      	ldr	r1, [pc, #528]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ba8:	e001      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
 8004bac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8086 	beq.w	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bbc:	4b7e      	ldr	r3, [pc, #504]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a7d      	ldr	r2, [pc, #500]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bc8:	f7fe f994 	bl	8002ef4 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bce:	e009      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd0:	f7fe f990 	bl	8002ef4 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	; 0x64
 8004bdc:	d902      	bls.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	75fb      	strb	r3, [r7, #23]
        break;
 8004be2:	e005      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004be4:	4b74      	ldr	r3, [pc, #464]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ef      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d166      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004bf6:	4b6f      	ldr	r3, [pc, #444]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c00:	4053      	eors	r3, r2
 8004c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d013      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c0a:	4b6a      	ldr	r3, [pc, #424]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c12:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c14:	4b67      	ldr	r3, [pc, #412]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	4a66      	ldr	r2, [pc, #408]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c20:	4b64      	ldr	r3, [pc, #400]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	4a63      	ldr	r2, [pc, #396]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004c2c:	4a61      	ldr	r2, [pc, #388]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3c:	d115      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3e:	f7fe f959 	bl	8002ef4 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c44:	e00b      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c46:	f7fe f955 	bl	8002ef4 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d902      	bls.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	75fb      	strb	r3, [r7, #23]
            break;
 8004c5c:	e005      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c5e:	4b55      	ldr	r3, [pc, #340]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0ed      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004c6a:	7dfb      	ldrb	r3, [r7, #23]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d126      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c7e:	d10d      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004c80:	4b4c      	ldr	r3, [pc, #304]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c8e:	0919      	lsrs	r1, r3, #4
 8004c90:	4b4a      	ldr	r3, [pc, #296]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004c92:	400b      	ands	r3, r1
 8004c94:	4947      	ldr	r1, [pc, #284]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	610b      	str	r3, [r1, #16]
 8004c9a:	e005      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004c9c:	4b45      	ldr	r3, [pc, #276]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	4a44      	ldr	r2, [pc, #272]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ca2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ca6:	6113      	str	r3, [r2, #16]
 8004ca8:	4b42      	ldr	r3, [pc, #264]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004caa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb6:	493f      	ldr	r1, [pc, #252]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	670b      	str	r3, [r1, #112]	; 0x70
 8004cbc:	e004      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	75bb      	strb	r3, [r7, #22]
 8004cc2:	e001      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc4:	7dfb      	ldrb	r3, [r7, #23]
 8004cc6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8085 	beq.w	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cda:	2b28      	cmp	r3, #40	; 0x28
 8004cdc:	d866      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004cde:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce4:	08004dc1 	.word	0x08004dc1
 8004ce8:	08004dad 	.word	0x08004dad
 8004cec:	08004dad 	.word	0x08004dad
 8004cf0:	08004dad 	.word	0x08004dad
 8004cf4:	08004dad 	.word	0x08004dad
 8004cf8:	08004dad 	.word	0x08004dad
 8004cfc:	08004dad 	.word	0x08004dad
 8004d00:	08004dad 	.word	0x08004dad
 8004d04:	08004d89 	.word	0x08004d89
 8004d08:	08004dad 	.word	0x08004dad
 8004d0c:	08004dad 	.word	0x08004dad
 8004d10:	08004dad 	.word	0x08004dad
 8004d14:	08004dad 	.word	0x08004dad
 8004d18:	08004dad 	.word	0x08004dad
 8004d1c:	08004dad 	.word	0x08004dad
 8004d20:	08004dad 	.word	0x08004dad
 8004d24:	08004d9b 	.word	0x08004d9b
 8004d28:	08004dad 	.word	0x08004dad
 8004d2c:	08004dad 	.word	0x08004dad
 8004d30:	08004dad 	.word	0x08004dad
 8004d34:	08004dad 	.word	0x08004dad
 8004d38:	08004dad 	.word	0x08004dad
 8004d3c:	08004dad 	.word	0x08004dad
 8004d40:	08004dad 	.word	0x08004dad
 8004d44:	08004dc1 	.word	0x08004dc1
 8004d48:	08004dad 	.word	0x08004dad
 8004d4c:	08004dad 	.word	0x08004dad
 8004d50:	08004dad 	.word	0x08004dad
 8004d54:	08004dad 	.word	0x08004dad
 8004d58:	08004dad 	.word	0x08004dad
 8004d5c:	08004dad 	.word	0x08004dad
 8004d60:	08004dad 	.word	0x08004dad
 8004d64:	08004dc1 	.word	0x08004dc1
 8004d68:	08004dad 	.word	0x08004dad
 8004d6c:	08004dad 	.word	0x08004dad
 8004d70:	08004dad 	.word	0x08004dad
 8004d74:	08004dad 	.word	0x08004dad
 8004d78:	08004dad 	.word	0x08004dad
 8004d7c:	08004dad 	.word	0x08004dad
 8004d80:	08004dad 	.word	0x08004dad
 8004d84:	08004dc1 	.word	0x08004dc1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fdfa 	bl	8005988 <RCCEx_PLL2_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004d98:	e013      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3324      	adds	r3, #36	; 0x24
 8004d9e:	2101      	movs	r1, #1
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 fea3 	bl	8005aec <RCCEx_PLL3_Config>
 8004da6:	4603      	mov	r3, r0
 8004da8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	75fb      	strb	r3, [r7, #23]
      break;
 8004db0:	e007      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004db2:	bf00      	nop
 8004db4:	58024400 	.word	0x58024400
 8004db8:	58024800 	.word	0x58024800
 8004dbc:	00ffffcf 	.word	0x00ffffcf
      break;
 8004dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d109      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004dc8:	4b96      	ldr	r3, [pc, #600]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dcc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dd4:	4993      	ldr	r1, [pc, #588]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	654b      	str	r3, [r1, #84]	; 0x54
 8004dda:	e001      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ddc:	7dfb      	ldrb	r3, [r7, #23]
 8004dde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d038      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df0:	2b05      	cmp	r3, #5
 8004df2:	d821      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004df4:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e3f 	.word	0x08004e3f
 8004e00:	08004e15 	.word	0x08004e15
 8004e04:	08004e27 	.word	0x08004e27
 8004e08:	08004e3f 	.word	0x08004e3f
 8004e0c:	08004e3f 	.word	0x08004e3f
 8004e10:	08004e3f 	.word	0x08004e3f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3304      	adds	r3, #4
 8004e18:	2101      	movs	r1, #1
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fdb4 	bl	8005988 <RCCEx_PLL2_Config>
 8004e20:	4603      	mov	r3, r0
 8004e22:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e24:	e00c      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3324      	adds	r3, #36	; 0x24
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fe5d 	bl	8005aec <RCCEx_PLL3_Config>
 8004e32:	4603      	mov	r3, r0
 8004e34:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e36:	e003      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e3c:	e000      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004e3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e46:	4b77      	ldr	r3, [pc, #476]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4a:	f023 0207 	bic.w	r2, r3, #7
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e52:	4974      	ldr	r1, [pc, #464]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	654b      	str	r3, [r1, #84]	; 0x54
 8004e58:	e001      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5a:	7dfb      	ldrb	r3, [r7, #23]
 8004e5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d03a      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e70:	2b05      	cmp	r3, #5
 8004e72:	d821      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004e74:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7a:	bf00      	nop
 8004e7c:	08004ebf 	.word	0x08004ebf
 8004e80:	08004e95 	.word	0x08004e95
 8004e84:	08004ea7 	.word	0x08004ea7
 8004e88:	08004ebf 	.word	0x08004ebf
 8004e8c:	08004ebf 	.word	0x08004ebf
 8004e90:	08004ebf 	.word	0x08004ebf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3304      	adds	r3, #4
 8004e98:	2101      	movs	r1, #1
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fd74 	bl	8005988 <RCCEx_PLL2_Config>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004ea4:	e00c      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3324      	adds	r3, #36	; 0x24
 8004eaa:	2101      	movs	r1, #1
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fe1d 	bl	8005aec <RCCEx_PLL3_Config>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004eb6:	e003      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	75fb      	strb	r3, [r7, #23]
      break;
 8004ebc:	e000      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ec6:	4b57      	ldr	r3, [pc, #348]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eca:	f023 0207 	bic.w	r2, r3, #7
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed4:	4953      	ldr	r1, [pc, #332]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	658b      	str	r3, [r1, #88]	; 0x58
 8004eda:	e001      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d04b      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ef2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ef6:	d02e      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004efc:	d828      	bhi.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f02:	d02a      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f08:	d822      	bhi.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004f0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f0e:	d026      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004f10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f14:	d81c      	bhi.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f1a:	d010      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f20:	d816      	bhi.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01d      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004f26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f2a:	d111      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	2100      	movs	r1, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fd28 	bl	8005988 <RCCEx_PLL2_Config>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f3c:	e012      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3324      	adds	r3, #36	; 0x24
 8004f42:	2102      	movs	r1, #2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fdd1 	bl	8005aec <RCCEx_PLL3_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f4e:	e009      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	75fb      	strb	r3, [r7, #23]
      break;
 8004f54:	e006      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f56:	bf00      	nop
 8004f58:	e004      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f5a:	bf00      	nop
 8004f5c:	e002      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f5e:	bf00      	nop
 8004f60:	e000      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f64:	7dfb      	ldrb	r3, [r7, #23]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10a      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f6a:	4b2e      	ldr	r3, [pc, #184]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f78:	492a      	ldr	r1, [pc, #168]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	654b      	str	r3, [r1, #84]	; 0x54
 8004f7e:	e001      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d04d      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f96:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f9a:	d02e      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004f9c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004fa0:	d828      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa6:	d02a      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fac:	d822      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004fae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fb2:	d026      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004fb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fb8:	d81c      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fbe:	d010      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc4:	d816      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d01d      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fce:	d111      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fcd6 	bl	8005988 <RCCEx_PLL2_Config>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004fe0:	e012      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3324      	adds	r3, #36	; 0x24
 8004fe6:	2102      	movs	r1, #2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fd7f 	bl	8005aec <RCCEx_PLL3_Config>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ff2:	e009      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff8:	e006      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004ffa:	bf00      	nop
 8004ffc:	e004      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004ffe:	bf00      	nop
 8005000:	e002      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005002:	bf00      	nop
 8005004:	e000      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005008:	7dfb      	ldrb	r3, [r7, #23]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10c      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800500e:	4b05      	ldr	r3, [pc, #20]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005012:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800501c:	4901      	ldr	r1, [pc, #4]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800501e:	4313      	orrs	r3, r2
 8005020:	658b      	str	r3, [r1, #88]	; 0x58
 8005022:	e003      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005024:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	7dfb      	ldrb	r3, [r7, #23]
 800502a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005034:	2b00      	cmp	r3, #0
 8005036:	d04b      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800503e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005042:	d02e      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005044:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005048:	d828      	bhi.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800504a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800504e:	d02a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005054:	d822      	bhi.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005056:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800505a:	d026      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800505c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005060:	d81c      	bhi.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005062:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005066:	d010      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800506c:	d816      	bhi.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800506e:	2b00      	cmp	r3, #0
 8005070:	d01d      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005076:	d111      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	2100      	movs	r1, #0
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fc82 	bl	8005988 <RCCEx_PLL2_Config>
 8005084:	4603      	mov	r3, r0
 8005086:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005088:	e012      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3324      	adds	r3, #36	; 0x24
 800508e:	2102      	movs	r1, #2
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fd2b 	bl	8005aec <RCCEx_PLL3_Config>
 8005096:	4603      	mov	r3, r0
 8005098:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800509a:	e009      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	75fb      	strb	r3, [r7, #23]
      break;
 80050a0:	e006      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80050a2:	bf00      	nop
 80050a4:	e004      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80050a6:	bf00      	nop
 80050a8:	e002      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80050aa:	bf00      	nop
 80050ac:	e000      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80050ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050b0:	7dfb      	ldrb	r3, [r7, #23]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10a      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80050b6:	4b9d      	ldr	r3, [pc, #628]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050c4:	4999      	ldr	r1, [pc, #612]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	658b      	str	r3, [r1, #88]	; 0x58
 80050ca:	e001      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01a      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e6:	d10a      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3324      	adds	r3, #36	; 0x24
 80050ec:	2102      	movs	r1, #2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fcfc 	bl	8005aec <RCCEx_PLL3_Config>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80050fe:	4b8b      	ldr	r3, [pc, #556]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800510c:	4987      	ldr	r1, [pc, #540]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800510e:	4313      	orrs	r3, r2
 8005110:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01a      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005128:	d10a      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3324      	adds	r3, #36	; 0x24
 800512e:	2102      	movs	r1, #2
 8005130:	4618      	mov	r0, r3
 8005132:	f000 fcdb 	bl	8005aec <RCCEx_PLL3_Config>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005140:	4b7a      	ldr	r3, [pc, #488]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005144:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800514e:	4977      	ldr	r1, [pc, #476]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005150:	4313      	orrs	r3, r2
 8005152:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d034      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005166:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800516a:	d01d      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800516c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005170:	d817      	bhi.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800517a:	d009      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800517c:	e011      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3304      	adds	r3, #4
 8005182:	2100      	movs	r1, #0
 8005184:	4618      	mov	r0, r3
 8005186:	f000 fbff 	bl	8005988 <RCCEx_PLL2_Config>
 800518a:	4603      	mov	r3, r0
 800518c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800518e:	e00c      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3324      	adds	r3, #36	; 0x24
 8005194:	2102      	movs	r1, #2
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fca8 	bl	8005aec <RCCEx_PLL3_Config>
 800519c:	4603      	mov	r3, r0
 800519e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80051a0:	e003      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	75fb      	strb	r3, [r7, #23]
      break;
 80051a6:	e000      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80051a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051b0:	4b5e      	ldr	r3, [pc, #376]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051be:	495b      	ldr	r1, [pc, #364]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	658b      	str	r3, [r1, #88]	; 0x58
 80051c4:	e001      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
 80051c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d033      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051e0:	d01c      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80051e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051e6:	d816      	bhi.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80051e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ec:	d003      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80051ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051f2:	d007      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80051f4:	e00f      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f6:	4b4d      	ldr	r3, [pc, #308]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	4a4c      	ldr	r2, [pc, #304]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005200:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005202:	e00c      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3324      	adds	r3, #36	; 0x24
 8005208:	2101      	movs	r1, #1
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fc6e 	bl	8005aec <RCCEx_PLL3_Config>
 8005210:	4603      	mov	r3, r0
 8005212:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005214:	e003      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	75fb      	strb	r3, [r7, #23]
      break;
 800521a:	e000      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800521c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800521e:	7dfb      	ldrb	r3, [r7, #23]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005224:	4b41      	ldr	r3, [pc, #260]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005228:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005232:	493e      	ldr	r1, [pc, #248]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005234:	4313      	orrs	r3, r2
 8005236:	654b      	str	r3, [r1, #84]	; 0x54
 8005238:	e001      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523a:	7dfb      	ldrb	r3, [r7, #23]
 800523c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d029      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005256:	d007      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005258:	e00f      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800525a:	4b34      	ldr	r3, [pc, #208]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	4a33      	ldr	r2, [pc, #204]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005264:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005266:	e00b      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3304      	adds	r3, #4
 800526c:	2102      	movs	r1, #2
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fb8a 	bl	8005988 <RCCEx_PLL2_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005278:	e002      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	75fb      	strb	r3, [r7, #23]
      break;
 800527e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005280:	7dfb      	ldrb	r3, [r7, #23]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005286:	4b29      	ldr	r3, [pc, #164]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005292:	4926      	ldr	r1, [pc, #152]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005294:	4313      	orrs	r3, r2
 8005296:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005298:	e001      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529a:	7dfb      	ldrb	r3, [r7, #23]
 800529c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3324      	adds	r3, #36	; 0x24
 80052ae:	2102      	movs	r1, #2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fc1b 	bl	8005aec <RCCEx_PLL3_Config>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d033      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052d4:	d017      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80052d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052da:	d811      	bhi.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80052dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e0:	d013      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80052e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e6:	d80b      	bhi.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d010      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80052ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f0:	d106      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f2:	4b0e      	ldr	r3, [pc, #56]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	4a0d      	ldr	r2, [pc, #52]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80052fe:	e007      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	75fb      	strb	r3, [r7, #23]
      break;
 8005304:	e004      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005306:	bf00      	nop
 8005308:	e002      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800530a:	bf00      	nop
 800530c:	e000      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800530e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005310:	7dfb      	ldrb	r3, [r7, #23]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10c      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005316:	4b05      	ldr	r3, [pc, #20]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005322:	4902      	ldr	r1, [pc, #8]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005324:	4313      	orrs	r3, r2
 8005326:	654b      	str	r3, [r1, #84]	; 0x54
 8005328:	e004      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800532a:	bf00      	nop
 800532c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	7dfb      	ldrb	r3, [r7, #23]
 8005332:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d008      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005340:	4b31      	ldr	r3, [pc, #196]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005344:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534c:	492e      	ldr	r1, [pc, #184]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800534e:	4313      	orrs	r3, r2
 8005350:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d009      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800535e:	4b2a      	ldr	r3, [pc, #168]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800536c:	4926      	ldr	r1, [pc, #152]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800536e:	4313      	orrs	r3, r2
 8005370:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800537e:	4b22      	ldr	r3, [pc, #136]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005382:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800538a:	491f      	ldr	r1, [pc, #124]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800538c:	4313      	orrs	r3, r2
 800538e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00d      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800539c:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	4a19      	ldr	r2, [pc, #100]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053a6:	6113      	str	r3, [r2, #16]
 80053a8:	4b17      	ldr	r3, [pc, #92]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80053b2:	4915      	ldr	r1, [pc, #84]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	da08      	bge.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80053c0:	4b11      	ldr	r3, [pc, #68]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053cc:	490e      	ldr	r1, [pc, #56]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053de:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ec:	4906      	ldr	r1, [pc, #24]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80053f2:	7dbb      	ldrb	r3, [r7, #22]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	e000      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	58024400 	.word	0x58024400

0800540c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005410:	f7ff f85a 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 8005414:	4602      	mov	r2, r0
 8005416:	4b06      	ldr	r3, [pc, #24]	; (8005430 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	091b      	lsrs	r3, r3, #4
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	4904      	ldr	r1, [pc, #16]	; (8005434 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005422:	5ccb      	ldrb	r3, [r1, r3]
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800542c:	4618      	mov	r0, r3
 800542e:	bd80      	pop	{r7, pc}
 8005430:	58024400 	.word	0x58024400
 8005434:	0800fd84 	.word	0x0800fd84

08005438 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005438:	b480      	push	{r7}
 800543a:	b089      	sub	sp, #36	; 0x24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005440:	4ba1      	ldr	r3, [pc, #644]	; (80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800544a:	4b9f      	ldr	r3, [pc, #636]	; (80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544e:	0b1b      	lsrs	r3, r3, #12
 8005450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005454:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005456:	4b9c      	ldr	r3, [pc, #624]	; (80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545a:	091b      	lsrs	r3, r3, #4
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005462:	4b99      	ldr	r3, [pc, #612]	; (80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005466:	08db      	lsrs	r3, r3, #3
 8005468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	fb02 f303 	mul.w	r3, r2, r3
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 8111 	beq.w	80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	2b02      	cmp	r3, #2
 800548a:	f000 8083 	beq.w	8005594 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b02      	cmp	r3, #2
 8005492:	f200 80a1 	bhi.w	80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d056      	beq.n	8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80054a2:	e099      	b.n	80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054a4:	4b88      	ldr	r3, [pc, #544]	; (80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d02d      	beq.n	800550c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054b0:	4b85      	ldr	r3, [pc, #532]	; (80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	08db      	lsrs	r3, r3, #3
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	4a84      	ldr	r2, [pc, #528]	; (80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80054bc:	fa22 f303 	lsr.w	r3, r2, r3
 80054c0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	ee07 3a90 	vmov	s15, r3
 80054c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054da:	4b7b      	ldr	r3, [pc, #492]	; (80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005506:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800550a:	e087      	b.n	800561c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	ee07 3a90 	vmov	s15, r3
 8005512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005516:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800551a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800551e:	4b6a      	ldr	r3, [pc, #424]	; (80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005526:	ee07 3a90 	vmov	s15, r3
 800552a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800552e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005532:	eddf 5a67 	vldr	s11, [pc, #412]	; 80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800553a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800553e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800554e:	e065      	b.n	800561c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80056d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800555e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005562:	4b59      	ldr	r3, [pc, #356]	; (80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005572:	ed97 6a03 	vldr	s12, [r7, #12]
 8005576:	eddf 5a56 	vldr	s11, [pc, #344]	; 80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800557a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800557e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005592:	e043      	b.n	800561c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80056dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80055a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055a6:	4b48      	ldr	r3, [pc, #288]	; (80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055d6:	e021      	b.n	800561c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80056d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ea:	4b37      	ldr	r3, [pc, #220]	; (80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f2:	ee07 3a90 	vmov	s15, r3
 80055f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80055fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800560a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800560e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005616:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800561a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800561c:	4b2a      	ldr	r3, [pc, #168]	; (80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	0a5b      	lsrs	r3, r3, #9
 8005622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005632:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005636:	edd7 6a07 	vldr	s13, [r7, #28]
 800563a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800563e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005642:	ee17 2a90 	vmov	r2, s15
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800564a:	4b1f      	ldr	r3, [pc, #124]	; (80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	0c1b      	lsrs	r3, r3, #16
 8005650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005654:	ee07 3a90 	vmov	s15, r3
 8005658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005660:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005664:	edd7 6a07 	vldr	s13, [r7, #28]
 8005668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800566c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005670:	ee17 2a90 	vmov	r2, s15
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005678:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	0e1b      	lsrs	r3, r3, #24
 800567e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800568e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005692:	edd7 6a07 	vldr	s13, [r7, #28]
 8005696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800569a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800569e:	ee17 2a90 	vmov	r2, s15
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80056a6:	e008      	b.n	80056ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	609a      	str	r2, [r3, #8]
}
 80056ba:	bf00      	nop
 80056bc:	3724      	adds	r7, #36	; 0x24
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	58024400 	.word	0x58024400
 80056cc:	03d09000 	.word	0x03d09000
 80056d0:	46000000 	.word	0x46000000
 80056d4:	4c742400 	.word	0x4c742400
 80056d8:	4a742400 	.word	0x4a742400
 80056dc:	4af42400 	.word	0x4af42400

080056e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b089      	sub	sp, #36	; 0x24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056e8:	4ba1      	ldr	r3, [pc, #644]	; (8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	f003 0303 	and.w	r3, r3, #3
 80056f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80056f2:	4b9f      	ldr	r3, [pc, #636]	; (8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	0d1b      	lsrs	r3, r3, #20
 80056f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80056fe:	4b9c      	ldr	r3, [pc, #624]	; (8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005702:	0a1b      	lsrs	r3, r3, #8
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800570a:	4b99      	ldr	r3, [pc, #612]	; (8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800570c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570e:	08db      	lsrs	r3, r3, #3
 8005710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	fb02 f303 	mul.w	r3, r2, r3
 800571a:	ee07 3a90 	vmov	s15, r3
 800571e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005722:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8111 	beq.w	8005950 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	2b02      	cmp	r3, #2
 8005732:	f000 8083 	beq.w	800583c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	2b02      	cmp	r3, #2
 800573a:	f200 80a1 	bhi.w	8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d056      	beq.n	80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800574a:	e099      	b.n	8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800574c:	4b88      	ldr	r3, [pc, #544]	; (8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0320 	and.w	r3, r3, #32
 8005754:	2b00      	cmp	r3, #0
 8005756:	d02d      	beq.n	80057b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005758:	4b85      	ldr	r3, [pc, #532]	; (8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	08db      	lsrs	r3, r3, #3
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	4a84      	ldr	r2, [pc, #528]	; (8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005764:	fa22 f303 	lsr.w	r3, r2, r3
 8005768:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005782:	4b7b      	ldr	r3, [pc, #492]	; (8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005792:	ed97 6a03 	vldr	s12, [r7, #12]
 8005796:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800579a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800579e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057b2:	e087      	b.n	80058c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	ee07 3a90 	vmov	s15, r3
 80057ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800597c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80057c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c6:	4b6a      	ldr	r3, [pc, #424]	; (8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80057da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057f6:	e065      	b.n	80058c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005802:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005980 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580a:	4b59      	ldr	r3, [pc, #356]	; (8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581a:	ed97 6a03 	vldr	s12, [r7, #12]
 800581e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800582e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005836:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800583a:	e043      	b.n	80058c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005846:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005984 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800584a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584e:	4b48      	ldr	r3, [pc, #288]	; (8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005862:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800587e:	e021      	b.n	80058c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	ee07 3a90 	vmov	s15, r3
 8005886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005980 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800588e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005892:	4b37      	ldr	r3, [pc, #220]	; (8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589a:	ee07 3a90 	vmov	s15, r3
 800589e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80058c4:	4b2a      	ldr	r3, [pc, #168]	; (8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c8:	0a5b      	lsrs	r3, r3, #9
 80058ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058de:	edd7 6a07 	vldr	s13, [r7, #28]
 80058e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ea:	ee17 2a90 	vmov	r2, s15
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80058f2:	4b1f      	ldr	r3, [pc, #124]	; (8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	0c1b      	lsrs	r3, r3, #16
 80058f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058fc:	ee07 3a90 	vmov	s15, r3
 8005900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005904:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005908:	ee37 7a87 	vadd.f32	s14, s15, s14
 800590c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005918:	ee17 2a90 	vmov	r2, s15
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005920:	4b13      	ldr	r3, [pc, #76]	; (8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	0e1b      	lsrs	r3, r3, #24
 8005926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800592a:	ee07 3a90 	vmov	s15, r3
 800592e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800593a:	edd7 6a07 	vldr	s13, [r7, #28]
 800593e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005946:	ee17 2a90 	vmov	r2, s15
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800594e:	e008      	b.n	8005962 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	609a      	str	r2, [r3, #8]
}
 8005962:	bf00      	nop
 8005964:	3724      	adds	r7, #36	; 0x24
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	58024400 	.word	0x58024400
 8005974:	03d09000 	.word	0x03d09000
 8005978:	46000000 	.word	0x46000000
 800597c:	4c742400 	.word	0x4c742400
 8005980:	4a742400 	.word	0x4a742400
 8005984:	4af42400 	.word	0x4af42400

08005988 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005996:	4b53      	ldr	r3, [pc, #332]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d101      	bne.n	80059a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e099      	b.n	8005ada <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80059a6:	4b4f      	ldr	r3, [pc, #316]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a4e      	ldr	r2, [pc, #312]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 80059ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b2:	f7fd fa9f 	bl	8002ef4 <HAL_GetTick>
 80059b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059b8:	e008      	b.n	80059cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80059ba:	f7fd fa9b 	bl	8002ef4 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d901      	bls.n	80059cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e086      	b.n	8005ada <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059cc:	4b45      	ldr	r3, [pc, #276]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1f0      	bne.n	80059ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80059d8:	4b42      	ldr	r3, [pc, #264]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 80059da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	031b      	lsls	r3, r3, #12
 80059e6:	493f      	ldr	r1, [pc, #252]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	628b      	str	r3, [r1, #40]	; 0x28
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	025b      	lsls	r3, r3, #9
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	041b      	lsls	r3, r3, #16
 8005a0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	061b      	lsls	r3, r3, #24
 8005a18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a1c:	4931      	ldr	r1, [pc, #196]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a22:	4b30      	ldr	r3, [pc, #192]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	492d      	ldr	r1, [pc, #180]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a34:	4b2b      	ldr	r3, [pc, #172]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	f023 0220 	bic.w	r2, r3, #32
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	4928      	ldr	r1, [pc, #160]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a46:	4b27      	ldr	r3, [pc, #156]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	4a26      	ldr	r2, [pc, #152]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005a4c:	f023 0310 	bic.w	r3, r3, #16
 8005a50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a52:	4b24      	ldr	r3, [pc, #144]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005a54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a56:	4b24      	ldr	r3, [pc, #144]	; (8005ae8 <RCCEx_PLL2_Config+0x160>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	69d2      	ldr	r2, [r2, #28]
 8005a5e:	00d2      	lsls	r2, r2, #3
 8005a60:	4920      	ldr	r1, [pc, #128]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a66:	4b1f      	ldr	r3, [pc, #124]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005a6c:	f043 0310 	orr.w	r3, r3, #16
 8005a70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d106      	bne.n	8005a86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a78:	4b1a      	ldr	r3, [pc, #104]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	4a19      	ldr	r2, [pc, #100]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005a7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a84:	e00f      	b.n	8005aa6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d106      	bne.n	8005a9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a8c:	4b15      	ldr	r3, [pc, #84]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a90:	4a14      	ldr	r2, [pc, #80]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a98:	e005      	b.n	8005aa6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a9a:	4b12      	ldr	r3, [pc, #72]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9e:	4a11      	ldr	r2, [pc, #68]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005aa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005aa4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005aa6:	4b0f      	ldr	r3, [pc, #60]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a0e      	ldr	r2, [pc, #56]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005aac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab2:	f7fd fa1f 	bl	8002ef4 <HAL_GetTick>
 8005ab6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ab8:	e008      	b.n	8005acc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005aba:	f7fd fa1b 	bl	8002ef4 <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d901      	bls.n	8005acc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e006      	b.n	8005ada <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005acc:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <RCCEx_PLL2_Config+0x15c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0f0      	beq.n	8005aba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	58024400 	.word	0x58024400
 8005ae8:	ffff0007 	.word	0xffff0007

08005aec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005afa:	4b53      	ldr	r3, [pc, #332]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d101      	bne.n	8005b0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e099      	b.n	8005c3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b0a:	4b4f      	ldr	r3, [pc, #316]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a4e      	ldr	r2, [pc, #312]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b16:	f7fd f9ed 	bl	8002ef4 <HAL_GetTick>
 8005b1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b1c:	e008      	b.n	8005b30 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b1e:	f7fd f9e9 	bl	8002ef4 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d901      	bls.n	8005b30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e086      	b.n	8005c3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b30:	4b45      	ldr	r3, [pc, #276]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1f0      	bne.n	8005b1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005b3c:	4b42      	ldr	r3, [pc, #264]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	051b      	lsls	r3, r3, #20
 8005b4a:	493f      	ldr	r1, [pc, #252]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	628b      	str	r3, [r1, #40]	; 0x28
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	025b      	lsls	r3, r3, #9
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	041b      	lsls	r3, r3, #16
 8005b6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	061b      	lsls	r3, r3, #24
 8005b7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b80:	4931      	ldr	r1, [pc, #196]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b86:	4b30      	ldr	r3, [pc, #192]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	492d      	ldr	r1, [pc, #180]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b98:	4b2b      	ldr	r3, [pc, #172]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	4928      	ldr	r1, [pc, #160]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005baa:	4b27      	ldr	r3, [pc, #156]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	4a26      	ldr	r2, [pc, #152]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005bb6:	4b24      	ldr	r3, [pc, #144]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bba:	4b24      	ldr	r3, [pc, #144]	; (8005c4c <RCCEx_PLL3_Config+0x160>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	69d2      	ldr	r2, [r2, #28]
 8005bc2:	00d2      	lsls	r2, r2, #3
 8005bc4:	4920      	ldr	r1, [pc, #128]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005bca:	4b1f      	ldr	r3, [pc, #124]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	4a1e      	ldr	r2, [pc, #120]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d106      	bne.n	8005bea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005bdc:	4b1a      	ldr	r3, [pc, #104]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	4a19      	ldr	r2, [pc, #100]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005be2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005be6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005be8:	e00f      	b.n	8005c0a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d106      	bne.n	8005bfe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005bf0:	4b15      	ldr	r3, [pc, #84]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	4a14      	ldr	r2, [pc, #80]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005bf6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005bfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bfc:	e005      	b.n	8005c0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005bfe:	4b12      	ldr	r3, [pc, #72]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c02:	4a11      	ldr	r2, [pc, #68]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005c04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c0a:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a0e      	ldr	r2, [pc, #56]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c16:	f7fd f96d 	bl	8002ef4 <HAL_GetTick>
 8005c1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c1c:	e008      	b.n	8005c30 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c1e:	f7fd f969 	bl	8002ef4 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e006      	b.n	8005c3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c30:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <RCCEx_PLL3_Config+0x15c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0f0      	beq.n	8005c1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	58024400 	.word	0x58024400
 8005c4c:	ffff0007 	.word	0xffff0007

08005c50 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e0f1      	b.n	8005e46 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a78      	ldr	r2, [pc, #480]	; (8005e50 <HAL_SPI_Init+0x200>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00f      	beq.n	8005c92 <HAL_SPI_Init+0x42>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a77      	ldr	r2, [pc, #476]	; (8005e54 <HAL_SPI_Init+0x204>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00a      	beq.n	8005c92 <HAL_SPI_Init+0x42>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a75      	ldr	r2, [pc, #468]	; (8005e58 <HAL_SPI_Init+0x208>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d005      	beq.n	8005c92 <HAL_SPI_Init+0x42>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	2b0f      	cmp	r3, #15
 8005c8c:	d901      	bls.n	8005c92 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e0d9      	b.n	8005e46 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 ff66 	bl	8006b64 <SPI_GetPacketSize>
 8005c98:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a6c      	ldr	r2, [pc, #432]	; (8005e50 <HAL_SPI_Init+0x200>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00c      	beq.n	8005cbe <HAL_SPI_Init+0x6e>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a6a      	ldr	r2, [pc, #424]	; (8005e54 <HAL_SPI_Init+0x204>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d007      	beq.n	8005cbe <HAL_SPI_Init+0x6e>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a69      	ldr	r2, [pc, #420]	; (8005e58 <HAL_SPI_Init+0x208>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d002      	beq.n	8005cbe <HAL_SPI_Init+0x6e>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d811      	bhi.n	8005ce2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005cc2:	4a63      	ldr	r2, [pc, #396]	; (8005e50 <HAL_SPI_Init+0x200>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d009      	beq.n	8005cdc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a61      	ldr	r2, [pc, #388]	; (8005e54 <HAL_SPI_Init+0x204>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d004      	beq.n	8005cdc <HAL_SPI_Init+0x8c>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a60      	ldr	r2, [pc, #384]	; (8005e58 <HAL_SPI_Init+0x208>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d104      	bne.n	8005ce6 <HAL_SPI_Init+0x96>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b10      	cmp	r3, #16
 8005ce0:	d901      	bls.n	8005ce6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e0af      	b.n	8005e46 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d106      	bne.n	8005d00 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7fc f90a 	bl	8001f14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0201 	bic.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005d22:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d2c:	d119      	bne.n	8005d62 <HAL_SPI_Init+0x112>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d36:	d103      	bne.n	8005d40 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d008      	beq.n	8005d52 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10c      	bne.n	8005d62 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005d4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d50:	d107      	bne.n	8005d62 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d60:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69da      	ldr	r2, [r3, #28]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d74:	ea42 0103 	orr.w	r1, r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc2:	ea42 0103 	orr.w	r1, r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d113      	bne.n	8005e02 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e00:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0201 	bic.w	r2, r2, #1
 8005e10:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40013000 	.word	0x40013000
 8005e54:	40003800 	.word	0x40003800
 8005e58:	40003c00 	.word	0x40003c00

08005e5c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08a      	sub	sp, #40	; 0x28
 8005e60:	af02      	add	r7, sp, #8
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	603b      	str	r3, [r7, #0]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3320      	adds	r3, #32
 8005e72:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_SPI_Transmit+0x2a>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e1d7      	b.n	8006236 <HAL_SPI_Transmit+0x3da>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e8e:	f7fd f831 	bl	8002ef4 <HAL_GetTick>
 8005e92:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d007      	beq.n	8005eb0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005eac:	7efb      	ldrb	r3, [r7, #27]
 8005eae:	e1c2      	b.n	8006236 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_SPI_Transmit+0x60>
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d107      	bne.n	8005ecc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005ec8:	7efb      	ldrb	r3, [r7, #27]
 8005eca:	e1b4      	b.n	8006236 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2203      	movs	r2, #3
 8005ed0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	88fa      	ldrh	r2, [r7, #6]
 8005ee6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	88fa      	ldrh	r2, [r7, #6]
 8005eee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005f1c:	d107      	bne.n	8005f2e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	4b96      	ldr	r3, [pc, #600]	; (8006190 <HAL_SPI_Transmit+0x334>)
 8005f36:	4013      	ands	r3, r2
 8005f38:	88f9      	ldrh	r1, [r7, #6]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	6812      	ldr	r2, [r2, #0]
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0201 	orr.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f5a:	d107      	bne.n	8005f6c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	2b0f      	cmp	r3, #15
 8005f72:	d947      	bls.n	8006004 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005f74:	e03f      	b.n	8005ff6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d114      	bne.n	8005fae <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6812      	ldr	r2, [r2, #0]
 8005f8e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f94:	1d1a      	adds	r2, r3, #4
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005fac:	e023      	b.n	8005ff6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fae:	f7fc ffa1 	bl	8002ef4 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d803      	bhi.n	8005fc6 <HAL_SPI_Transmit+0x16a>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d102      	bne.n	8005fcc <HAL_SPI_Transmit+0x170>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d114      	bne.n	8005ff6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 fcfb 	bl	80069c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fe0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e11f      	b.n	8006236 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1b9      	bne.n	8005f76 <HAL_SPI_Transmit+0x11a>
 8006002:	e0f2      	b.n	80061ea <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	2b07      	cmp	r3, #7
 800600a:	f240 80e7 	bls.w	80061dc <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800600e:	e05d      	b.n	80060cc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b02      	cmp	r3, #2
 800601c:	d132      	bne.n	8006084 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006024:	b29b      	uxth	r3, r3
 8006026:	2b01      	cmp	r3, #1
 8006028:	d918      	bls.n	800605c <HAL_SPI_Transmit+0x200>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602e:	2b00      	cmp	r3, #0
 8006030:	d014      	beq.n	800605c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6812      	ldr	r2, [r2, #0]
 800603c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006042:	1d1a      	adds	r2, r3, #4
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800604e:	b29b      	uxth	r3, r3
 8006050:	3b02      	subs	r3, #2
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800605a:	e037      	b.n	80060cc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006060:	881a      	ldrh	r2, [r3, #0]
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606a:	1c9a      	adds	r2, r3, #2
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006082:	e023      	b.n	80060cc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006084:	f7fc ff36 	bl	8002ef4 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d803      	bhi.n	800609c <HAL_SPI_Transmit+0x240>
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609a:	d102      	bne.n	80060a2 <HAL_SPI_Transmit+0x246>
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d114      	bne.n	80060cc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 fc90 	bl	80069c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e0b4      	b.n	8006236 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d19b      	bne.n	8006010 <HAL_SPI_Transmit+0x1b4>
 80060d8:	e087      	b.n	80061ea <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d155      	bne.n	8006194 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d918      	bls.n	8006126 <HAL_SPI_Transmit+0x2ca>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f8:	2b40      	cmp	r3, #64	; 0x40
 80060fa:	d914      	bls.n	8006126 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6812      	ldr	r2, [r2, #0]
 8006106:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800610c:	1d1a      	adds	r2, r3, #4
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006118:	b29b      	uxth	r3, r3
 800611a:	3b04      	subs	r3, #4
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006124:	e05a      	b.n	80061dc <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b01      	cmp	r3, #1
 8006130:	d917      	bls.n	8006162 <HAL_SPI_Transmit+0x306>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d013      	beq.n	8006162 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613e:	881a      	ldrh	r2, [r3, #0]
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006148:	1c9a      	adds	r2, r3, #2
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006154:	b29b      	uxth	r3, r3
 8006156:	3b02      	subs	r3, #2
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006160:	e03c      	b.n	80061dc <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3320      	adds	r3, #32
 800616c:	7812      	ldrb	r2, [r2, #0]
 800616e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800618c:	e026      	b.n	80061dc <HAL_SPI_Transmit+0x380>
 800618e:	bf00      	nop
 8006190:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006194:	f7fc feae 	bl	8002ef4 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d803      	bhi.n	80061ac <HAL_SPI_Transmit+0x350>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061aa:	d102      	bne.n	80061b2 <HAL_SPI_Transmit+0x356>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d114      	bne.n	80061dc <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fc08 	bl	80069c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e02c      	b.n	8006236 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f47f af78 	bne.w	80060da <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2200      	movs	r2, #0
 80061f2:	2108      	movs	r1, #8
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 fc87 	bl	8006b08 <SPI_WaitOnFlagUntilTimeout>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d007      	beq.n	8006210 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006206:	f043 0220 	orr.w	r2, r3, #32
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fbd9 	bl	80069c8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e000      	b.n	8006236 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8006234:	7efb      	ldrb	r3, [r7, #27]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop

08006240 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08a      	sub	sp, #40	; 0x28
 8006244:	af02      	add	r7, sp, #8
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	603b      	str	r3, [r7, #0]
 800624c:	4613      	mov	r3, r2
 800624e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3330      	adds	r3, #48	; 0x30
 800625a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006264:	d112      	bne.n	800628c <HAL_SPI_Receive+0x4c>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10e      	bne.n	800628c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2204      	movs	r2, #4
 8006272:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006276:	88fa      	ldrh	r2, [r7, #6]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	4613      	mov	r3, r2
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	68b9      	ldr	r1, [r7, #8]
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 f978 	bl	8006578 <HAL_SPI_TransmitReceive>
 8006288:	4603      	mov	r3, r0
 800628a:	e16f      	b.n	800656c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006292:	2b01      	cmp	r3, #1
 8006294:	d101      	bne.n	800629a <HAL_SPI_Receive+0x5a>
 8006296:	2302      	movs	r3, #2
 8006298:	e168      	b.n	800656c <HAL_SPI_Receive+0x32c>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062a2:	f7fc fe27 	bl	8002ef4 <HAL_GetTick>
 80062a6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d007      	beq.n	80062c4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80062b4:	2302      	movs	r3, #2
 80062b6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80062c0:	7ffb      	ldrb	r3, [r7, #31]
 80062c2:	e153      	b.n	800656c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <HAL_SPI_Receive+0x90>
 80062ca:	88fb      	ldrh	r3, [r7, #6]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d107      	bne.n	80062e0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80062dc:	7ffb      	ldrb	r3, [r7, #31]
 80062de:	e145      	b.n	800656c <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2204      	movs	r2, #4
 80062e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	88fa      	ldrh	r2, [r7, #6]
 80062fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	88fa      	ldrh	r2, [r7, #6]
 8006302:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006330:	d107      	bne.n	8006342 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006340:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	4b8a      	ldr	r3, [pc, #552]	; (8006574 <HAL_SPI_Receive+0x334>)
 800634a:	4013      	ands	r3, r2
 800634c:	88f9      	ldrh	r1, [r7, #6]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	6812      	ldr	r2, [r2, #0]
 8006352:	430b      	orrs	r3, r1
 8006354:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 0201 	orr.w	r2, r2, #1
 8006364:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800636e:	d107      	bne.n	8006380 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800637e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	2b0f      	cmp	r3, #15
 8006386:	d948      	bls.n	800641a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006388:	e040      	b.n	800640c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695a      	ldr	r2, [r3, #20]
 8006390:	f248 0308 	movw	r3, #32776	; 0x8008
 8006394:	4013      	ands	r3, r2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d014      	beq.n	80063c4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80063a4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063aa:	1d1a      	adds	r2, r3, #4
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80063c2:	e023      	b.n	800640c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063c4:	f7fc fd96 	bl	8002ef4 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d803      	bhi.n	80063dc <HAL_SPI_Receive+0x19c>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d102      	bne.n	80063e2 <HAL_SPI_Receive+0x1a2>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d114      	bne.n	800640c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 faf0 	bl	80069c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e0af      	b.n	800656c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006412:	b29b      	uxth	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1b8      	bne.n	800638a <HAL_SPI_Receive+0x14a>
 8006418:	e095      	b.n	8006546 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	2b07      	cmp	r3, #7
 8006420:	f240 808b 	bls.w	800653a <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006424:	e03f      	b.n	80064a6 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b01      	cmp	r3, #1
 8006432:	d114      	bne.n	800645e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	8812      	ldrh	r2, [r2, #0]
 800643c:	b292      	uxth	r2, r2
 800643e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006444:	1c9a      	adds	r2, r3, #2
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800645c:	e023      	b.n	80064a6 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800645e:	f7fc fd49 	bl	8002ef4 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	429a      	cmp	r2, r3
 800646c:	d803      	bhi.n	8006476 <HAL_SPI_Receive+0x236>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006474:	d102      	bne.n	800647c <HAL_SPI_Receive+0x23c>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d114      	bne.n	80064a6 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 faa3 	bl	80069c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006490:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e062      	b.n	800656c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1b9      	bne.n	8006426 <HAL_SPI_Receive+0x1e6>
 80064b2:	e048      	b.n	8006546 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d117      	bne.n	80064f2 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ce:	7812      	ldrb	r2, [r2, #0]
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80064f0:	e023      	b.n	800653a <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064f2:	f7fc fcff 	bl	8002ef4 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d803      	bhi.n	800650a <HAL_SPI_Receive+0x2ca>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006508:	d102      	bne.n	8006510 <HAL_SPI_Receive+0x2d0>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d114      	bne.n	800653a <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 fa59 	bl	80069c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006524:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e018      	b.n	800656c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1b6      	bne.n	80064b4 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 fa3e 	bl	80069c8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800656a:	7ffb      	ldrb	r3, [r7, #31]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3720      	adds	r7, #32
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	ffff0000 	.word	0xffff0000

08006578 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08e      	sub	sp, #56	; 0x38
 800657c:	af02      	add	r7, sp, #8
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3320      	adds	r3, #32
 8006592:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3330      	adds	r3, #48	; 0x30
 800659a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_SPI_TransmitReceive+0x32>
 80065a6:	2302      	movs	r3, #2
 80065a8:	e209      	b.n	80069be <HAL_SPI_TransmitReceive+0x446>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065b2:	f7fc fc9f 	bl	8002ef4 <HAL_GetTick>
 80065b6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80065b8:	887b      	ldrh	r3, [r7, #2]
 80065ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80065bc:	887b      	ldrh	r3, [r7, #2]
 80065be:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80065c6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065ce:	7efb      	ldrb	r3, [r7, #27]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d014      	beq.n	80065fe <HAL_SPI_TransmitReceive+0x86>
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065da:	d106      	bne.n	80065ea <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d102      	bne.n	80065ea <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80065e4:	7efb      	ldrb	r3, [r7, #27]
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d009      	beq.n	80065fe <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 80065ea:	2302      	movs	r3, #2
 80065ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80065f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065fc:	e1df      	b.n	80069be <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d005      	beq.n	8006610 <HAL_SPI_TransmitReceive+0x98>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <HAL_SPI_TransmitReceive+0x98>
 800660a:	887b      	ldrh	r3, [r7, #2]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d109      	bne.n	8006624 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800661e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006622:	e1cc      	b.n	80069be <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b04      	cmp	r3, #4
 800662e:	d003      	beq.n	8006638 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2205      	movs	r2, #5
 8006634:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	887a      	ldrh	r2, [r7, #2]
 800664a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	887a      	ldrh	r2, [r7, #2]
 8006652:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	887a      	ldrh	r2, [r7, #2]
 8006660:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	887a      	ldrh	r2, [r7, #2]
 8006668:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	4b82      	ldr	r3, [pc, #520]	; (8006888 <HAL_SPI_TransmitReceive+0x310>)
 8006680:	4013      	ands	r3, r2
 8006682:	8879      	ldrh	r1, [r7, #2]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	6812      	ldr	r2, [r2, #0]
 8006688:	430b      	orrs	r3, r1
 800668a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0201 	orr.w	r2, r2, #1
 800669a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066a4:	d107      	bne.n	80066b6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	2b0f      	cmp	r3, #15
 80066bc:	d970      	bls.n	80067a0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80066be:	e068      	b.n	8006792 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d11a      	bne.n	8006704 <HAL_SPI_TransmitReceive+0x18c>
 80066ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d017      	beq.n	8006704 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6812      	ldr	r2, [r2, #0]
 80066de:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e4:	1d1a      	adds	r2, r3, #4
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	3b01      	subs	r3, #1
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006702:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695a      	ldr	r2, [r3, #20]
 800670a:	f248 0308 	movw	r3, #32776	; 0x8008
 800670e:	4013      	ands	r3, r2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01a      	beq.n	800674a <HAL_SPI_TransmitReceive+0x1d2>
 8006714:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006716:	2b00      	cmp	r3, #0
 8006718:	d017      	beq.n	800674a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006722:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006724:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800672a:	1d1a      	adds	r2, r3, #4
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006736:	b29b      	uxth	r3, r3
 8006738:	3b01      	subs	r3, #1
 800673a:	b29a      	uxth	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006748:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800674a:	f7fc fbd3 	bl	8002ef4 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006756:	429a      	cmp	r2, r3
 8006758:	d803      	bhi.n	8006762 <HAL_SPI_TransmitReceive+0x1ea>
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006760:	d102      	bne.n	8006768 <HAL_SPI_TransmitReceive+0x1f0>
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	2b00      	cmp	r3, #0
 8006766:	d114      	bne.n	8006792 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 f92d 	bl	80069c8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800677c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e115      	b.n	80069be <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006792:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006794:	2b00      	cmp	r3, #0
 8006796:	d193      	bne.n	80066c0 <HAL_SPI_TransmitReceive+0x148>
 8006798:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d190      	bne.n	80066c0 <HAL_SPI_TransmitReceive+0x148>
 800679e:	e0e7      	b.n	8006970 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	2b07      	cmp	r3, #7
 80067a6:	f240 80dd 	bls.w	8006964 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80067aa:	e066      	b.n	800687a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d119      	bne.n	80067ee <HAL_SPI_TransmitReceive+0x276>
 80067ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d016      	beq.n	80067ee <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c4:	881a      	ldrh	r2, [r3, #0]
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ce:	1c9a      	adds	r2, r3, #2
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80067da:	b29b      	uxth	r3, r3
 80067dc:	3b01      	subs	r3, #1
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80067ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d11a      	bne.n	8006832 <HAL_SPI_TransmitReceive+0x2ba>
 80067fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d017      	beq.n	8006832 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006806:	6a3a      	ldr	r2, [r7, #32]
 8006808:	8812      	ldrh	r2, [r2, #0]
 800680a:	b292      	uxth	r2, r2
 800680c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006812:	1c9a      	adds	r2, r3, #2
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800681e:	b29b      	uxth	r3, r3
 8006820:	3b01      	subs	r3, #1
 8006822:	b29a      	uxth	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006830:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006832:	f7fc fb5f 	bl	8002ef4 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800683e:	429a      	cmp	r2, r3
 8006840:	d803      	bhi.n	800684a <HAL_SPI_TransmitReceive+0x2d2>
 8006842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006848:	d102      	bne.n	8006850 <HAL_SPI_TransmitReceive+0x2d8>
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	2b00      	cmp	r3, #0
 800684e:	d114      	bne.n	800687a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 f8b9 	bl	80069c8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006864:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e0a1      	b.n	80069be <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800687a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800687c:	2b00      	cmp	r3, #0
 800687e:	d195      	bne.n	80067ac <HAL_SPI_TransmitReceive+0x234>
 8006880:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006882:	2b00      	cmp	r3, #0
 8006884:	d192      	bne.n	80067ac <HAL_SPI_TransmitReceive+0x234>
 8006886:	e073      	b.n	8006970 <HAL_SPI_TransmitReceive+0x3f8>
 8006888:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b02      	cmp	r3, #2
 8006898:	d11b      	bne.n	80068d2 <HAL_SPI_TransmitReceive+0x35a>
 800689a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800689c:	2b00      	cmp	r3, #0
 800689e:	d018      	beq.n	80068d2 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3320      	adds	r3, #32
 80068aa:	7812      	ldrb	r2, [r2, #0]
 80068ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068be:	b29b      	uxth	r3, r3
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d11d      	bne.n	800691c <HAL_SPI_TransmitReceive+0x3a4>
 80068e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d01a      	beq.n	800691c <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068f2:	7812      	ldrb	r2, [r2, #0]
 80068f4:	b2d2      	uxtb	r2, r2
 80068f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006908:	b29b      	uxth	r3, r3
 800690a:	3b01      	subs	r3, #1
 800690c:	b29a      	uxth	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800691a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800691c:	f7fc faea 	bl	8002ef4 <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006928:	429a      	cmp	r2, r3
 800692a:	d803      	bhi.n	8006934 <HAL_SPI_TransmitReceive+0x3bc>
 800692c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006932:	d102      	bne.n	800693a <HAL_SPI_TransmitReceive+0x3c2>
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	2b00      	cmp	r3, #0
 8006938:	d114      	bne.n	8006964 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 f844 	bl	80069c8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800694e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e02c      	b.n	80069be <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006964:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006966:	2b00      	cmp	r3, #0
 8006968:	d190      	bne.n	800688c <HAL_SPI_TransmitReceive+0x314>
 800696a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800696c:	2b00      	cmp	r3, #0
 800696e:	d18d      	bne.n	800688c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	2200      	movs	r2, #0
 8006978:	2108      	movs	r1, #8
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 f8c4 	bl	8006b08 <SPI_WaitOnFlagUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d007      	beq.n	8006996 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800698c:	f043 0220 	orr.w	r2, r3, #32
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 f816 	bl	80069c8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e001      	b.n	80069be <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 80069ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3730      	adds	r7, #48	; 0x30
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop

080069c8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	699a      	ldr	r2, [r3, #24]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0208 	orr.w	r2, r2, #8
 80069e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699a      	ldr	r2, [r3, #24]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0210 	orr.w	r2, r2, #16
 80069f6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0201 	bic.w	r2, r2, #1
 8006a06:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6919      	ldr	r1, [r3, #16]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	4b3c      	ldr	r3, [pc, #240]	; (8006b04 <SPI_CloseTransfer+0x13c>)
 8006a14:	400b      	ands	r3, r1
 8006a16:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689a      	ldr	r2, [r3, #8]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006a26:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	d014      	beq.n	8006a5e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00f      	beq.n	8006a5e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	699a      	ldr	r2, [r3, #24]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0220 	orr.w	r2, r2, #32
 8006a5c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	d014      	beq.n	8006a94 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00f      	beq.n	8006a94 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a7a:	f043 0204 	orr.w	r2, r3, #4
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a92:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00f      	beq.n	8006abe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aa4:	f043 0201 	orr.w	r2, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	699a      	ldr	r2, [r3, #24]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006abc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00f      	beq.n	8006ae8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ace:	f043 0208 	orr.w	r2, r3, #8
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ae6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006af8:	bf00      	nop
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	fffffc90 	.word	0xfffffc90

08006b08 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	603b      	str	r3, [r7, #0]
 8006b14:	4613      	mov	r3, r2
 8006b16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006b18:	e010      	b.n	8006b3c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b1a:	f7fc f9eb 	bl	8002ef4 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d803      	bhi.n	8006b32 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d102      	bne.n	8006b38 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e00f      	b.n	8006b5c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	695a      	ldr	r2, [r3, #20]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	4013      	ands	r3, r2
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	bf0c      	ite	eq
 8006b4c:	2301      	moveq	r3, #1
 8006b4e:	2300      	movne	r3, #0
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	461a      	mov	r2, r3
 8006b54:	79fb      	ldrb	r3, [r7, #7]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d0df      	beq.n	8006b1a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b70:	095b      	lsrs	r3, r3, #5
 8006b72:	3301      	adds	r3, #1
 8006b74:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	3307      	adds	r3, #7
 8006b82:	08db      	lsrs	r3, r3, #3
 8006b84:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	fb02 f303 	mul.w	r3, r2, r3
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b082      	sub	sp, #8
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e049      	b.n	8006c40 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d106      	bne.n	8006bc6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7fb ff9d 	bl	8002b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2202      	movs	r2, #2
 8006bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4610      	mov	r0, r2
 8006bda:	f000 fbb1 	bl	8007340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e049      	b.n	8006cee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f841 	bl	8006cf6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	f000 fb5a 	bl	8007340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
	...

08006d0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d109      	bne.n	8006d30 <HAL_TIM_PWM_Start+0x24>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	bf14      	ite	ne
 8006d28:	2301      	movne	r3, #1
 8006d2a:	2300      	moveq	r3, #0
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	e03c      	b.n	8006daa <HAL_TIM_PWM_Start+0x9e>
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	d109      	bne.n	8006d4a <HAL_TIM_PWM_Start+0x3e>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	bf14      	ite	ne
 8006d42:	2301      	movne	r3, #1
 8006d44:	2300      	moveq	r3, #0
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	e02f      	b.n	8006daa <HAL_TIM_PWM_Start+0x9e>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	d109      	bne.n	8006d64 <HAL_TIM_PWM_Start+0x58>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	bf14      	ite	ne
 8006d5c:	2301      	movne	r3, #1
 8006d5e:	2300      	moveq	r3, #0
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	e022      	b.n	8006daa <HAL_TIM_PWM_Start+0x9e>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b0c      	cmp	r3, #12
 8006d68:	d109      	bne.n	8006d7e <HAL_TIM_PWM_Start+0x72>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	bf14      	ite	ne
 8006d76:	2301      	movne	r3, #1
 8006d78:	2300      	moveq	r3, #0
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	e015      	b.n	8006daa <HAL_TIM_PWM_Start+0x9e>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b10      	cmp	r3, #16
 8006d82:	d109      	bne.n	8006d98 <HAL_TIM_PWM_Start+0x8c>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	bf14      	ite	ne
 8006d90:	2301      	movne	r3, #1
 8006d92:	2300      	moveq	r3, #0
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	e008      	b.n	8006daa <HAL_TIM_PWM_Start+0x9e>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	bf14      	ite	ne
 8006da4:	2301      	movne	r3, #1
 8006da6:	2300      	moveq	r3, #0
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e0a1      	b.n	8006ef6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d104      	bne.n	8006dc2 <HAL_TIM_PWM_Start+0xb6>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dc0:	e023      	b.n	8006e0a <HAL_TIM_PWM_Start+0xfe>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b04      	cmp	r3, #4
 8006dc6:	d104      	bne.n	8006dd2 <HAL_TIM_PWM_Start+0xc6>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dd0:	e01b      	b.n	8006e0a <HAL_TIM_PWM_Start+0xfe>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b08      	cmp	r3, #8
 8006dd6:	d104      	bne.n	8006de2 <HAL_TIM_PWM_Start+0xd6>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006de0:	e013      	b.n	8006e0a <HAL_TIM_PWM_Start+0xfe>
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b0c      	cmp	r3, #12
 8006de6:	d104      	bne.n	8006df2 <HAL_TIM_PWM_Start+0xe6>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006df0:	e00b      	b.n	8006e0a <HAL_TIM_PWM_Start+0xfe>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b10      	cmp	r3, #16
 8006df6:	d104      	bne.n	8006e02 <HAL_TIM_PWM_Start+0xf6>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e00:	e003      	b.n	8006e0a <HAL_TIM_PWM_Start+0xfe>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2202      	movs	r2, #2
 8006e06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fea2 	bl	8007b5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a38      	ldr	r2, [pc, #224]	; (8006f00 <HAL_TIM_PWM_Start+0x1f4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d013      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x13e>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a37      	ldr	r2, [pc, #220]	; (8006f04 <HAL_TIM_PWM_Start+0x1f8>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d00e      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x13e>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a35      	ldr	r2, [pc, #212]	; (8006f08 <HAL_TIM_PWM_Start+0x1fc>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d009      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x13e>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a34      	ldr	r2, [pc, #208]	; (8006f0c <HAL_TIM_PWM_Start+0x200>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d004      	beq.n	8006e4a <HAL_TIM_PWM_Start+0x13e>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a32      	ldr	r2, [pc, #200]	; (8006f10 <HAL_TIM_PWM_Start+0x204>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d101      	bne.n	8006e4e <HAL_TIM_PWM_Start+0x142>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e000      	b.n	8006e50 <HAL_TIM_PWM_Start+0x144>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d007      	beq.n	8006e64 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a25      	ldr	r2, [pc, #148]	; (8006f00 <HAL_TIM_PWM_Start+0x1f4>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d022      	beq.n	8006eb4 <HAL_TIM_PWM_Start+0x1a8>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e76:	d01d      	beq.n	8006eb4 <HAL_TIM_PWM_Start+0x1a8>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a25      	ldr	r2, [pc, #148]	; (8006f14 <HAL_TIM_PWM_Start+0x208>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d018      	beq.n	8006eb4 <HAL_TIM_PWM_Start+0x1a8>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a24      	ldr	r2, [pc, #144]	; (8006f18 <HAL_TIM_PWM_Start+0x20c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d013      	beq.n	8006eb4 <HAL_TIM_PWM_Start+0x1a8>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a22      	ldr	r2, [pc, #136]	; (8006f1c <HAL_TIM_PWM_Start+0x210>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d00e      	beq.n	8006eb4 <HAL_TIM_PWM_Start+0x1a8>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a1a      	ldr	r2, [pc, #104]	; (8006f04 <HAL_TIM_PWM_Start+0x1f8>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d009      	beq.n	8006eb4 <HAL_TIM_PWM_Start+0x1a8>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a1e      	ldr	r2, [pc, #120]	; (8006f20 <HAL_TIM_PWM_Start+0x214>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d004      	beq.n	8006eb4 <HAL_TIM_PWM_Start+0x1a8>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a16      	ldr	r2, [pc, #88]	; (8006f08 <HAL_TIM_PWM_Start+0x1fc>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d115      	bne.n	8006ee0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	4b1a      	ldr	r3, [pc, #104]	; (8006f24 <HAL_TIM_PWM_Start+0x218>)
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b06      	cmp	r3, #6
 8006ec4:	d015      	beq.n	8006ef2 <HAL_TIM_PWM_Start+0x1e6>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ecc:	d011      	beq.n	8006ef2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f042 0201 	orr.w	r2, r2, #1
 8006edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ede:	e008      	b.n	8006ef2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0201 	orr.w	r2, r2, #1
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	e000      	b.n	8006ef4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ef2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	40010000 	.word	0x40010000
 8006f04:	40010400 	.word	0x40010400
 8006f08:	40014000 	.word	0x40014000
 8006f0c:	40014400 	.word	0x40014400
 8006f10:	40014800 	.word	0x40014800
 8006f14:	40000400 	.word	0x40000400
 8006f18:	40000800 	.word	0x40000800
 8006f1c:	40000c00 	.word	0x40000c00
 8006f20:	40001800 	.word	0x40001800
 8006f24:	00010007 	.word	0x00010007

08006f28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d101      	bne.n	8006f46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f42:	2302      	movs	r3, #2
 8006f44:	e0ff      	b.n	8007146 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b14      	cmp	r3, #20
 8006f52:	f200 80f0 	bhi.w	8007136 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f56:	a201      	add	r2, pc, #4	; (adr r2, 8006f5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5c:	08006fb1 	.word	0x08006fb1
 8006f60:	08007137 	.word	0x08007137
 8006f64:	08007137 	.word	0x08007137
 8006f68:	08007137 	.word	0x08007137
 8006f6c:	08006ff1 	.word	0x08006ff1
 8006f70:	08007137 	.word	0x08007137
 8006f74:	08007137 	.word	0x08007137
 8006f78:	08007137 	.word	0x08007137
 8006f7c:	08007033 	.word	0x08007033
 8006f80:	08007137 	.word	0x08007137
 8006f84:	08007137 	.word	0x08007137
 8006f88:	08007137 	.word	0x08007137
 8006f8c:	08007073 	.word	0x08007073
 8006f90:	08007137 	.word	0x08007137
 8006f94:	08007137 	.word	0x08007137
 8006f98:	08007137 	.word	0x08007137
 8006f9c:	080070b5 	.word	0x080070b5
 8006fa0:	08007137 	.word	0x08007137
 8006fa4:	08007137 	.word	0x08007137
 8006fa8:	08007137 	.word	0x08007137
 8006fac:	080070f5 	.word	0x080070f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68b9      	ldr	r1, [r7, #8]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fa5c 	bl	8007474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699a      	ldr	r2, [r3, #24]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0208 	orr.w	r2, r2, #8
 8006fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0204 	bic.w	r2, r2, #4
 8006fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6999      	ldr	r1, [r3, #24]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	691a      	ldr	r2, [r3, #16]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	619a      	str	r2, [r3, #24]
      break;
 8006fee:	e0a5      	b.n	800713c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68b9      	ldr	r1, [r7, #8]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 facc 	bl	8007594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699a      	ldr	r2, [r3, #24]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800700a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699a      	ldr	r2, [r3, #24]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800701a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6999      	ldr	r1, [r3, #24]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	021a      	lsls	r2, r3, #8
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	619a      	str	r2, [r3, #24]
      break;
 8007030:	e084      	b.n	800713c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fb35 	bl	80076a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69da      	ldr	r2, [r3, #28]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f042 0208 	orr.w	r2, r2, #8
 800704c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69da      	ldr	r2, [r3, #28]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0204 	bic.w	r2, r2, #4
 800705c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69d9      	ldr	r1, [r3, #28]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	691a      	ldr	r2, [r3, #16]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	61da      	str	r2, [r3, #28]
      break;
 8007070:	e064      	b.n	800713c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68b9      	ldr	r1, [r7, #8]
 8007078:	4618      	mov	r0, r3
 800707a:	f000 fb9d 	bl	80077b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69da      	ldr	r2, [r3, #28]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800708c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69da      	ldr	r2, [r3, #28]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800709c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	69d9      	ldr	r1, [r3, #28]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	021a      	lsls	r2, r3, #8
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	61da      	str	r2, [r3, #28]
      break;
 80070b2:	e043      	b.n	800713c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68b9      	ldr	r1, [r7, #8]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 fbe6 	bl	800788c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0208 	orr.w	r2, r2, #8
 80070ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f022 0204 	bic.w	r2, r2, #4
 80070de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	691a      	ldr	r2, [r3, #16]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070f2:	e023      	b.n	800713c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68b9      	ldr	r1, [r7, #8]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fc2a 	bl	8007954 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800710e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800711e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	021a      	lsls	r2, r3, #8
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007134:	e002      	b.n	800713c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	75fb      	strb	r3, [r7, #23]
      break;
 800713a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007144:	7dfb      	ldrb	r3, [r7, #23]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop

08007150 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007164:	2b01      	cmp	r3, #1
 8007166:	d101      	bne.n	800716c <HAL_TIM_ConfigClockSource+0x1c>
 8007168:	2302      	movs	r3, #2
 800716a:	e0dc      	b.n	8007326 <HAL_TIM_ConfigClockSource+0x1d6>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	4b6a      	ldr	r3, [pc, #424]	; (8007330 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007188:	4013      	ands	r3, r2
 800718a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007192:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a64      	ldr	r2, [pc, #400]	; (8007334 <HAL_TIM_ConfigClockSource+0x1e4>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	f000 80a9 	beq.w	80072fa <HAL_TIM_ConfigClockSource+0x1aa>
 80071a8:	4a62      	ldr	r2, [pc, #392]	; (8007334 <HAL_TIM_ConfigClockSource+0x1e4>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	f200 80ae 	bhi.w	800730c <HAL_TIM_ConfigClockSource+0x1bc>
 80071b0:	4a61      	ldr	r2, [pc, #388]	; (8007338 <HAL_TIM_ConfigClockSource+0x1e8>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	f000 80a1 	beq.w	80072fa <HAL_TIM_ConfigClockSource+0x1aa>
 80071b8:	4a5f      	ldr	r2, [pc, #380]	; (8007338 <HAL_TIM_ConfigClockSource+0x1e8>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	f200 80a6 	bhi.w	800730c <HAL_TIM_ConfigClockSource+0x1bc>
 80071c0:	4a5e      	ldr	r2, [pc, #376]	; (800733c <HAL_TIM_ConfigClockSource+0x1ec>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	f000 8099 	beq.w	80072fa <HAL_TIM_ConfigClockSource+0x1aa>
 80071c8:	4a5c      	ldr	r2, [pc, #368]	; (800733c <HAL_TIM_ConfigClockSource+0x1ec>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	f200 809e 	bhi.w	800730c <HAL_TIM_ConfigClockSource+0x1bc>
 80071d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80071d4:	f000 8091 	beq.w	80072fa <HAL_TIM_ConfigClockSource+0x1aa>
 80071d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80071dc:	f200 8096 	bhi.w	800730c <HAL_TIM_ConfigClockSource+0x1bc>
 80071e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071e4:	f000 8089 	beq.w	80072fa <HAL_TIM_ConfigClockSource+0x1aa>
 80071e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071ec:	f200 808e 	bhi.w	800730c <HAL_TIM_ConfigClockSource+0x1bc>
 80071f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071f4:	d03e      	beq.n	8007274 <HAL_TIM_ConfigClockSource+0x124>
 80071f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071fa:	f200 8087 	bhi.w	800730c <HAL_TIM_ConfigClockSource+0x1bc>
 80071fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007202:	f000 8086 	beq.w	8007312 <HAL_TIM_ConfigClockSource+0x1c2>
 8007206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800720a:	d87f      	bhi.n	800730c <HAL_TIM_ConfigClockSource+0x1bc>
 800720c:	2b70      	cmp	r3, #112	; 0x70
 800720e:	d01a      	beq.n	8007246 <HAL_TIM_ConfigClockSource+0xf6>
 8007210:	2b70      	cmp	r3, #112	; 0x70
 8007212:	d87b      	bhi.n	800730c <HAL_TIM_ConfigClockSource+0x1bc>
 8007214:	2b60      	cmp	r3, #96	; 0x60
 8007216:	d050      	beq.n	80072ba <HAL_TIM_ConfigClockSource+0x16a>
 8007218:	2b60      	cmp	r3, #96	; 0x60
 800721a:	d877      	bhi.n	800730c <HAL_TIM_ConfigClockSource+0x1bc>
 800721c:	2b50      	cmp	r3, #80	; 0x50
 800721e:	d03c      	beq.n	800729a <HAL_TIM_ConfigClockSource+0x14a>
 8007220:	2b50      	cmp	r3, #80	; 0x50
 8007222:	d873      	bhi.n	800730c <HAL_TIM_ConfigClockSource+0x1bc>
 8007224:	2b40      	cmp	r3, #64	; 0x40
 8007226:	d058      	beq.n	80072da <HAL_TIM_ConfigClockSource+0x18a>
 8007228:	2b40      	cmp	r3, #64	; 0x40
 800722a:	d86f      	bhi.n	800730c <HAL_TIM_ConfigClockSource+0x1bc>
 800722c:	2b30      	cmp	r3, #48	; 0x30
 800722e:	d064      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x1aa>
 8007230:	2b30      	cmp	r3, #48	; 0x30
 8007232:	d86b      	bhi.n	800730c <HAL_TIM_ConfigClockSource+0x1bc>
 8007234:	2b20      	cmp	r3, #32
 8007236:	d060      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x1aa>
 8007238:	2b20      	cmp	r3, #32
 800723a:	d867      	bhi.n	800730c <HAL_TIM_ConfigClockSource+0x1bc>
 800723c:	2b00      	cmp	r3, #0
 800723e:	d05c      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x1aa>
 8007240:	2b10      	cmp	r3, #16
 8007242:	d05a      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x1aa>
 8007244:	e062      	b.n	800730c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6818      	ldr	r0, [r3, #0]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6899      	ldr	r1, [r3, #8]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f000 fc61 	bl	8007b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007268:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	609a      	str	r2, [r3, #8]
      break;
 8007272:	e04f      	b.n	8007314 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6818      	ldr	r0, [r3, #0]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	6899      	ldr	r1, [r3, #8]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f000 fc4a 	bl	8007b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689a      	ldr	r2, [r3, #8]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007296:	609a      	str	r2, [r3, #8]
      break;
 8007298:	e03c      	b.n	8007314 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6818      	ldr	r0, [r3, #0]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	6859      	ldr	r1, [r3, #4]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	461a      	mov	r2, r3
 80072a8:	f000 fbba 	bl	8007a20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2150      	movs	r1, #80	; 0x50
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 fc14 	bl	8007ae0 <TIM_ITRx_SetConfig>
      break;
 80072b8:	e02c      	b.n	8007314 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	6859      	ldr	r1, [r3, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	461a      	mov	r2, r3
 80072c8:	f000 fbd9 	bl	8007a7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2160      	movs	r1, #96	; 0x60
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fc04 	bl	8007ae0 <TIM_ITRx_SetConfig>
      break;
 80072d8:	e01c      	b.n	8007314 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6818      	ldr	r0, [r3, #0]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	6859      	ldr	r1, [r3, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	461a      	mov	r2, r3
 80072e8:	f000 fb9a 	bl	8007a20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2140      	movs	r1, #64	; 0x40
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 fbf4 	bl	8007ae0 <TIM_ITRx_SetConfig>
      break;
 80072f8:	e00c      	b.n	8007314 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4619      	mov	r1, r3
 8007304:	4610      	mov	r0, r2
 8007306:	f000 fbeb 	bl	8007ae0 <TIM_ITRx_SetConfig>
      break;
 800730a:	e003      	b.n	8007314 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	73fb      	strb	r3, [r7, #15]
      break;
 8007310:	e000      	b.n	8007314 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007312:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007324:	7bfb      	ldrb	r3, [r7, #15]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	ffceff88 	.word	0xffceff88
 8007334:	00100040 	.word	0x00100040
 8007338:	00100030 	.word	0x00100030
 800733c:	00100020 	.word	0x00100020

08007340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a40      	ldr	r2, [pc, #256]	; (8007454 <TIM_Base_SetConfig+0x114>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d013      	beq.n	8007380 <TIM_Base_SetConfig+0x40>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800735e:	d00f      	beq.n	8007380 <TIM_Base_SetConfig+0x40>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a3d      	ldr	r2, [pc, #244]	; (8007458 <TIM_Base_SetConfig+0x118>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d00b      	beq.n	8007380 <TIM_Base_SetConfig+0x40>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a3c      	ldr	r2, [pc, #240]	; (800745c <TIM_Base_SetConfig+0x11c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d007      	beq.n	8007380 <TIM_Base_SetConfig+0x40>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a3b      	ldr	r2, [pc, #236]	; (8007460 <TIM_Base_SetConfig+0x120>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d003      	beq.n	8007380 <TIM_Base_SetConfig+0x40>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a3a      	ldr	r2, [pc, #232]	; (8007464 <TIM_Base_SetConfig+0x124>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d108      	bne.n	8007392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a2f      	ldr	r2, [pc, #188]	; (8007454 <TIM_Base_SetConfig+0x114>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d01f      	beq.n	80073da <TIM_Base_SetConfig+0x9a>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a0:	d01b      	beq.n	80073da <TIM_Base_SetConfig+0x9a>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a2c      	ldr	r2, [pc, #176]	; (8007458 <TIM_Base_SetConfig+0x118>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d017      	beq.n	80073da <TIM_Base_SetConfig+0x9a>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a2b      	ldr	r2, [pc, #172]	; (800745c <TIM_Base_SetConfig+0x11c>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d013      	beq.n	80073da <TIM_Base_SetConfig+0x9a>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a2a      	ldr	r2, [pc, #168]	; (8007460 <TIM_Base_SetConfig+0x120>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d00f      	beq.n	80073da <TIM_Base_SetConfig+0x9a>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a29      	ldr	r2, [pc, #164]	; (8007464 <TIM_Base_SetConfig+0x124>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d00b      	beq.n	80073da <TIM_Base_SetConfig+0x9a>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a28      	ldr	r2, [pc, #160]	; (8007468 <TIM_Base_SetConfig+0x128>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d007      	beq.n	80073da <TIM_Base_SetConfig+0x9a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a27      	ldr	r2, [pc, #156]	; (800746c <TIM_Base_SetConfig+0x12c>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d003      	beq.n	80073da <TIM_Base_SetConfig+0x9a>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a26      	ldr	r2, [pc, #152]	; (8007470 <TIM_Base_SetConfig+0x130>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d108      	bne.n	80073ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a10      	ldr	r2, [pc, #64]	; (8007454 <TIM_Base_SetConfig+0x114>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d00f      	beq.n	8007438 <TIM_Base_SetConfig+0xf8>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a12      	ldr	r2, [pc, #72]	; (8007464 <TIM_Base_SetConfig+0x124>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d00b      	beq.n	8007438 <TIM_Base_SetConfig+0xf8>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a11      	ldr	r2, [pc, #68]	; (8007468 <TIM_Base_SetConfig+0x128>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d007      	beq.n	8007438 <TIM_Base_SetConfig+0xf8>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a10      	ldr	r2, [pc, #64]	; (800746c <TIM_Base_SetConfig+0x12c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d003      	beq.n	8007438 <TIM_Base_SetConfig+0xf8>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a0f      	ldr	r2, [pc, #60]	; (8007470 <TIM_Base_SetConfig+0x130>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d103      	bne.n	8007440 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	691a      	ldr	r2, [r3, #16]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	615a      	str	r2, [r3, #20]
}
 8007446:	bf00      	nop
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	40010000 	.word	0x40010000
 8007458:	40000400 	.word	0x40000400
 800745c:	40000800 	.word	0x40000800
 8007460:	40000c00 	.word	0x40000c00
 8007464:	40010400 	.word	0x40010400
 8007468:	40014000 	.word	0x40014000
 800746c:	40014400 	.word	0x40014400
 8007470:	40014800 	.word	0x40014800

08007474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	f023 0201 	bic.w	r2, r3, #1
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	4b37      	ldr	r3, [pc, #220]	; (800757c <TIM_OC1_SetConfig+0x108>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f023 0303 	bic.w	r3, r3, #3
 80074aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f023 0302 	bic.w	r3, r3, #2
 80074bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a2d      	ldr	r2, [pc, #180]	; (8007580 <TIM_OC1_SetConfig+0x10c>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d00f      	beq.n	80074f0 <TIM_OC1_SetConfig+0x7c>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a2c      	ldr	r2, [pc, #176]	; (8007584 <TIM_OC1_SetConfig+0x110>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00b      	beq.n	80074f0 <TIM_OC1_SetConfig+0x7c>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a2b      	ldr	r2, [pc, #172]	; (8007588 <TIM_OC1_SetConfig+0x114>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d007      	beq.n	80074f0 <TIM_OC1_SetConfig+0x7c>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a2a      	ldr	r2, [pc, #168]	; (800758c <TIM_OC1_SetConfig+0x118>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d003      	beq.n	80074f0 <TIM_OC1_SetConfig+0x7c>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a29      	ldr	r2, [pc, #164]	; (8007590 <TIM_OC1_SetConfig+0x11c>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d10c      	bne.n	800750a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f023 0308 	bic.w	r3, r3, #8
 80074f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	4313      	orrs	r3, r2
 8007500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f023 0304 	bic.w	r3, r3, #4
 8007508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a1c      	ldr	r2, [pc, #112]	; (8007580 <TIM_OC1_SetConfig+0x10c>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00f      	beq.n	8007532 <TIM_OC1_SetConfig+0xbe>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a1b      	ldr	r2, [pc, #108]	; (8007584 <TIM_OC1_SetConfig+0x110>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d00b      	beq.n	8007532 <TIM_OC1_SetConfig+0xbe>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a1a      	ldr	r2, [pc, #104]	; (8007588 <TIM_OC1_SetConfig+0x114>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d007      	beq.n	8007532 <TIM_OC1_SetConfig+0xbe>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a19      	ldr	r2, [pc, #100]	; (800758c <TIM_OC1_SetConfig+0x118>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d003      	beq.n	8007532 <TIM_OC1_SetConfig+0xbe>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a18      	ldr	r2, [pc, #96]	; (8007590 <TIM_OC1_SetConfig+0x11c>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d111      	bne.n	8007556 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	4313      	orrs	r3, r2
 800754a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	621a      	str	r2, [r3, #32]
}
 8007570:	bf00      	nop
 8007572:	371c      	adds	r7, #28
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	fffeff8f 	.word	0xfffeff8f
 8007580:	40010000 	.word	0x40010000
 8007584:	40010400 	.word	0x40010400
 8007588:	40014000 	.word	0x40014000
 800758c:	40014400 	.word	0x40014400
 8007590:	40014800 	.word	0x40014800

08007594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	f023 0210 	bic.w	r2, r3, #16
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4b34      	ldr	r3, [pc, #208]	; (8007690 <TIM_OC2_SetConfig+0xfc>)
 80075c0:	4013      	ands	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	021b      	lsls	r3, r3, #8
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f023 0320 	bic.w	r3, r3, #32
 80075de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	011b      	lsls	r3, r3, #4
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a29      	ldr	r2, [pc, #164]	; (8007694 <TIM_OC2_SetConfig+0x100>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d003      	beq.n	80075fc <TIM_OC2_SetConfig+0x68>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a28      	ldr	r2, [pc, #160]	; (8007698 <TIM_OC2_SetConfig+0x104>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d10d      	bne.n	8007618 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	4313      	orrs	r3, r2
 800760e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007616:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a1e      	ldr	r2, [pc, #120]	; (8007694 <TIM_OC2_SetConfig+0x100>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d00f      	beq.n	8007640 <TIM_OC2_SetConfig+0xac>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a1d      	ldr	r2, [pc, #116]	; (8007698 <TIM_OC2_SetConfig+0x104>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d00b      	beq.n	8007640 <TIM_OC2_SetConfig+0xac>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a1c      	ldr	r2, [pc, #112]	; (800769c <TIM_OC2_SetConfig+0x108>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d007      	beq.n	8007640 <TIM_OC2_SetConfig+0xac>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a1b      	ldr	r2, [pc, #108]	; (80076a0 <TIM_OC2_SetConfig+0x10c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d003      	beq.n	8007640 <TIM_OC2_SetConfig+0xac>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a1a      	ldr	r2, [pc, #104]	; (80076a4 <TIM_OC2_SetConfig+0x110>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d113      	bne.n	8007668 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007646:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800764e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4313      	orrs	r3, r2
 800765a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	4313      	orrs	r3, r2
 8007666:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	621a      	str	r2, [r3, #32]
}
 8007682:	bf00      	nop
 8007684:	371c      	adds	r7, #28
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	feff8fff 	.word	0xfeff8fff
 8007694:	40010000 	.word	0x40010000
 8007698:	40010400 	.word	0x40010400
 800769c:	40014000 	.word	0x40014000
 80076a0:	40014400 	.word	0x40014400
 80076a4:	40014800 	.word	0x40014800

080076a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	4b33      	ldr	r3, [pc, #204]	; (80077a0 <TIM_OC3_SetConfig+0xf8>)
 80076d4:	4013      	ands	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0303 	bic.w	r3, r3, #3
 80076de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	021b      	lsls	r3, r3, #8
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a28      	ldr	r2, [pc, #160]	; (80077a4 <TIM_OC3_SetConfig+0xfc>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d003      	beq.n	800770e <TIM_OC3_SetConfig+0x66>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a27      	ldr	r2, [pc, #156]	; (80077a8 <TIM_OC3_SetConfig+0x100>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d10d      	bne.n	800772a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	021b      	lsls	r3, r3, #8
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	4313      	orrs	r3, r2
 8007720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a1d      	ldr	r2, [pc, #116]	; (80077a4 <TIM_OC3_SetConfig+0xfc>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d00f      	beq.n	8007752 <TIM_OC3_SetConfig+0xaa>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a1c      	ldr	r2, [pc, #112]	; (80077a8 <TIM_OC3_SetConfig+0x100>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d00b      	beq.n	8007752 <TIM_OC3_SetConfig+0xaa>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a1b      	ldr	r2, [pc, #108]	; (80077ac <TIM_OC3_SetConfig+0x104>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d007      	beq.n	8007752 <TIM_OC3_SetConfig+0xaa>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a1a      	ldr	r2, [pc, #104]	; (80077b0 <TIM_OC3_SetConfig+0x108>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d003      	beq.n	8007752 <TIM_OC3_SetConfig+0xaa>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a19      	ldr	r2, [pc, #100]	; (80077b4 <TIM_OC3_SetConfig+0x10c>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d113      	bne.n	800777a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	011b      	lsls	r3, r3, #4
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	4313      	orrs	r3, r2
 8007778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	621a      	str	r2, [r3, #32]
}
 8007794:	bf00      	nop
 8007796:	371c      	adds	r7, #28
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	fffeff8f 	.word	0xfffeff8f
 80077a4:	40010000 	.word	0x40010000
 80077a8:	40010400 	.word	0x40010400
 80077ac:	40014000 	.word	0x40014000
 80077b0:	40014400 	.word	0x40014400
 80077b4:	40014800 	.word	0x40014800

080077b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	4b24      	ldr	r3, [pc, #144]	; (8007874 <TIM_OC4_SetConfig+0xbc>)
 80077e4:	4013      	ands	r3, r2
 80077e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	021b      	lsls	r3, r3, #8
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	031b      	lsls	r3, r3, #12
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	4313      	orrs	r3, r2
 800780e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a19      	ldr	r2, [pc, #100]	; (8007878 <TIM_OC4_SetConfig+0xc0>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00f      	beq.n	8007838 <TIM_OC4_SetConfig+0x80>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a18      	ldr	r2, [pc, #96]	; (800787c <TIM_OC4_SetConfig+0xc4>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d00b      	beq.n	8007838 <TIM_OC4_SetConfig+0x80>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a17      	ldr	r2, [pc, #92]	; (8007880 <TIM_OC4_SetConfig+0xc8>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d007      	beq.n	8007838 <TIM_OC4_SetConfig+0x80>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a16      	ldr	r2, [pc, #88]	; (8007884 <TIM_OC4_SetConfig+0xcc>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d003      	beq.n	8007838 <TIM_OC4_SetConfig+0x80>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a15      	ldr	r2, [pc, #84]	; (8007888 <TIM_OC4_SetConfig+0xd0>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d109      	bne.n	800784c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800783e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	019b      	lsls	r3, r3, #6
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	4313      	orrs	r3, r2
 800784a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	621a      	str	r2, [r3, #32]
}
 8007866:	bf00      	nop
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	feff8fff 	.word	0xfeff8fff
 8007878:	40010000 	.word	0x40010000
 800787c:	40010400 	.word	0x40010400
 8007880:	40014000 	.word	0x40014000
 8007884:	40014400 	.word	0x40014400
 8007888:	40014800 	.word	0x40014800

0800788c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4b21      	ldr	r3, [pc, #132]	; (800793c <TIM_OC5_SetConfig+0xb0>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80078cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	041b      	lsls	r3, r3, #16
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a18      	ldr	r2, [pc, #96]	; (8007940 <TIM_OC5_SetConfig+0xb4>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00f      	beq.n	8007902 <TIM_OC5_SetConfig+0x76>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a17      	ldr	r2, [pc, #92]	; (8007944 <TIM_OC5_SetConfig+0xb8>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00b      	beq.n	8007902 <TIM_OC5_SetConfig+0x76>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a16      	ldr	r2, [pc, #88]	; (8007948 <TIM_OC5_SetConfig+0xbc>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d007      	beq.n	8007902 <TIM_OC5_SetConfig+0x76>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a15      	ldr	r2, [pc, #84]	; (800794c <TIM_OC5_SetConfig+0xc0>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d003      	beq.n	8007902 <TIM_OC5_SetConfig+0x76>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a14      	ldr	r2, [pc, #80]	; (8007950 <TIM_OC5_SetConfig+0xc4>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d109      	bne.n	8007916 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007908:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	021b      	lsls	r3, r3, #8
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	4313      	orrs	r3, r2
 8007914:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	621a      	str	r2, [r3, #32]
}
 8007930:	bf00      	nop
 8007932:	371c      	adds	r7, #28
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	fffeff8f 	.word	0xfffeff8f
 8007940:	40010000 	.word	0x40010000
 8007944:	40010400 	.word	0x40010400
 8007948:	40014000 	.word	0x40014000
 800794c:	40014400 	.word	0x40014400
 8007950:	40014800 	.word	0x40014800

08007954 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800797a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	4b22      	ldr	r3, [pc, #136]	; (8007a08 <TIM_OC6_SetConfig+0xb4>)
 8007980:	4013      	ands	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	4313      	orrs	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	051b      	lsls	r3, r3, #20
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a19      	ldr	r2, [pc, #100]	; (8007a0c <TIM_OC6_SetConfig+0xb8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d00f      	beq.n	80079cc <TIM_OC6_SetConfig+0x78>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a18      	ldr	r2, [pc, #96]	; (8007a10 <TIM_OC6_SetConfig+0xbc>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00b      	beq.n	80079cc <TIM_OC6_SetConfig+0x78>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a17      	ldr	r2, [pc, #92]	; (8007a14 <TIM_OC6_SetConfig+0xc0>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d007      	beq.n	80079cc <TIM_OC6_SetConfig+0x78>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a16      	ldr	r2, [pc, #88]	; (8007a18 <TIM_OC6_SetConfig+0xc4>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d003      	beq.n	80079cc <TIM_OC6_SetConfig+0x78>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a15      	ldr	r2, [pc, #84]	; (8007a1c <TIM_OC6_SetConfig+0xc8>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d109      	bne.n	80079e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	029b      	lsls	r3, r3, #10
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	4313      	orrs	r3, r2
 80079de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	621a      	str	r2, [r3, #32]
}
 80079fa:	bf00      	nop
 80079fc:	371c      	adds	r7, #28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	feff8fff 	.word	0xfeff8fff
 8007a0c:	40010000 	.word	0x40010000
 8007a10:	40010400 	.word	0x40010400
 8007a14:	40014000 	.word	0x40014000
 8007a18:	40014400 	.word	0x40014400
 8007a1c:	40014800 	.word	0x40014800

08007a20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	f023 0201 	bic.w	r2, r3, #1
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	011b      	lsls	r3, r3, #4
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f023 030a 	bic.w	r3, r3, #10
 8007a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	621a      	str	r2, [r3, #32]
}
 8007a72:	bf00      	nop
 8007a74:	371c      	adds	r7, #28
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b087      	sub	sp, #28
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	60b9      	str	r1, [r7, #8]
 8007a88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	f023 0210 	bic.w	r2, r3, #16
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007aa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	031b      	lsls	r3, r3, #12
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007aba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	011b      	lsls	r3, r3, #4
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	621a      	str	r2, [r3, #32]
}
 8007ad2:	bf00      	nop
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
	...

08007ae0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	4b09      	ldr	r3, [pc, #36]	; (8007b18 <TIM_ITRx_SetConfig+0x38>)
 8007af4:	4013      	ands	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	f043 0307 	orr.w	r3, r3, #7
 8007b02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	609a      	str	r2, [r3, #8]
}
 8007b0a:	bf00      	nop
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	ffcfff8f 	.word	0xffcfff8f

08007b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	021a      	lsls	r2, r3, #8
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	609a      	str	r2, [r3, #8]
}
 8007b50:	bf00      	nop
 8007b52:	371c      	adds	r7, #28
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	f003 031f 	and.w	r3, r3, #31
 8007b6e:	2201      	movs	r2, #1
 8007b70:	fa02 f303 	lsl.w	r3, r2, r3
 8007b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6a1a      	ldr	r2, [r3, #32]
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	43db      	mvns	r3, r3
 8007b7e:	401a      	ands	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6a1a      	ldr	r2, [r3, #32]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	f003 031f 	and.w	r3, r3, #31
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	fa01 f303 	lsl.w	r3, r1, r3
 8007b94:	431a      	orrs	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	621a      	str	r2, [r3, #32]
}
 8007b9a:	bf00      	nop
 8007b9c:	371c      	adds	r7, #28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
	...

08007ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e06d      	b.n	8007c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a30      	ldr	r2, [pc, #192]	; (8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d004      	beq.n	8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a2f      	ldr	r2, [pc, #188]	; (8007cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d108      	bne.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007bfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a20      	ldr	r2, [pc, #128]	; (8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d022      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c32:	d01d      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a1d      	ldr	r2, [pc, #116]	; (8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d018      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a1c      	ldr	r2, [pc, #112]	; (8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d013      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a1a      	ldr	r2, [pc, #104]	; (8007cb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d00e      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a15      	ldr	r2, [pc, #84]	; (8007cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d009      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a16      	ldr	r2, [pc, #88]	; (8007cbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d004      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a15      	ldr	r2, [pc, #84]	; (8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d10c      	bne.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	40010000 	.word	0x40010000
 8007cac:	40010400 	.word	0x40010400
 8007cb0:	40000400 	.word	0x40000400
 8007cb4:	40000800 	.word	0x40000800
 8007cb8:	40000c00 	.word	0x40000c00
 8007cbc:	40001800 	.word	0x40001800
 8007cc0:	40014000 	.word	0x40014000

08007cc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e042      	b.n	8007d5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d106      	bne.n	8007cee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7fa ffed 	bl	8002cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2224      	movs	r2, #36	; 0x24
 8007cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 0201 	bic.w	r2, r2, #1
 8007d04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f8c2 	bl	8007e90 <UART_SetConfig>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d101      	bne.n	8007d16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e022      	b.n	8007d5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fe1e 	bl	8008960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685a      	ldr	r2, [r3, #4]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689a      	ldr	r2, [r3, #8]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f042 0201 	orr.w	r2, r2, #1
 8007d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fea5 	bl	8008aa4 <UART_CheckIdleState>
 8007d5a:	4603      	mov	r3, r0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b08a      	sub	sp, #40	; 0x28
 8007d68:	af02      	add	r7, sp, #8
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	4613      	mov	r3, r2
 8007d72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d7a:	2b20      	cmp	r3, #32
 8007d7c:	f040 8083 	bne.w	8007e86 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d002      	beq.n	8007d8c <HAL_UART_Transmit+0x28>
 8007d86:	88fb      	ldrh	r3, [r7, #6]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e07b      	b.n	8007e88 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d101      	bne.n	8007d9e <HAL_UART_Transmit+0x3a>
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	e074      	b.n	8007e88 <HAL_UART_Transmit+0x124>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2221      	movs	r2, #33	; 0x21
 8007db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007db6:	f7fb f89d 	bl	8002ef4 <HAL_GetTick>
 8007dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	88fa      	ldrh	r2, [r7, #6]
 8007dc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	88fa      	ldrh	r2, [r7, #6]
 8007dc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd4:	d108      	bne.n	8007de8 <HAL_UART_Transmit+0x84>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d104      	bne.n	8007de8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007dde:	2300      	movs	r3, #0
 8007de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	61bb      	str	r3, [r7, #24]
 8007de6:	e003      	b.n	8007df0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dec:	2300      	movs	r3, #0
 8007dee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007df8:	e02c      	b.n	8007e54 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2200      	movs	r2, #0
 8007e02:	2180      	movs	r1, #128	; 0x80
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f000 fe98 	bl	8008b3a <UART_WaitOnFlagUntilTimeout>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e039      	b.n	8007e88 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10b      	bne.n	8007e32 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	881b      	ldrh	r3, [r3, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	3302      	adds	r3, #2
 8007e2e:	61bb      	str	r3, [r7, #24]
 8007e30:	e007      	b.n	8007e42 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	781a      	ldrb	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1cc      	bne.n	8007dfa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	2200      	movs	r2, #0
 8007e68:	2140      	movs	r1, #64	; 0x40
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f000 fe65 	bl	8008b3a <UART_WaitOnFlagUntilTimeout>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d001      	beq.n	8007e7a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e006      	b.n	8007e88 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	e000      	b.n	8007e88 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007e86:	2302      	movs	r3, #2
  }
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3720      	adds	r7, #32
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e94:	b092      	sub	sp, #72	; 0x48
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	689a      	ldr	r2, [r3, #8]
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	4bbe      	ldr	r3, [pc, #760]	; (80081b8 <UART_SetConfig+0x328>)
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	6812      	ldr	r2, [r2, #0]
 8007ec6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4ab3      	ldr	r2, [pc, #716]	; (80081bc <UART_SetConfig+0x32c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d004      	beq.n	8007efc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	4baf      	ldr	r3, [pc, #700]	; (80081c0 <UART_SetConfig+0x330>)
 8007f04:	4013      	ands	r3, r2
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	6812      	ldr	r2, [r2, #0]
 8007f0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f0c:	430b      	orrs	r3, r1
 8007f0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f16:	f023 010f 	bic.w	r1, r3, #15
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	430a      	orrs	r2, r1
 8007f24:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4aa6      	ldr	r2, [pc, #664]	; (80081c4 <UART_SetConfig+0x334>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d177      	bne.n	8008020 <UART_SetConfig+0x190>
 8007f30:	4ba5      	ldr	r3, [pc, #660]	; (80081c8 <UART_SetConfig+0x338>)
 8007f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f38:	2b28      	cmp	r3, #40	; 0x28
 8007f3a:	d86d      	bhi.n	8008018 <UART_SetConfig+0x188>
 8007f3c:	a201      	add	r2, pc, #4	; (adr r2, 8007f44 <UART_SetConfig+0xb4>)
 8007f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f42:	bf00      	nop
 8007f44:	08007fe9 	.word	0x08007fe9
 8007f48:	08008019 	.word	0x08008019
 8007f4c:	08008019 	.word	0x08008019
 8007f50:	08008019 	.word	0x08008019
 8007f54:	08008019 	.word	0x08008019
 8007f58:	08008019 	.word	0x08008019
 8007f5c:	08008019 	.word	0x08008019
 8007f60:	08008019 	.word	0x08008019
 8007f64:	08007ff1 	.word	0x08007ff1
 8007f68:	08008019 	.word	0x08008019
 8007f6c:	08008019 	.word	0x08008019
 8007f70:	08008019 	.word	0x08008019
 8007f74:	08008019 	.word	0x08008019
 8007f78:	08008019 	.word	0x08008019
 8007f7c:	08008019 	.word	0x08008019
 8007f80:	08008019 	.word	0x08008019
 8007f84:	08007ff9 	.word	0x08007ff9
 8007f88:	08008019 	.word	0x08008019
 8007f8c:	08008019 	.word	0x08008019
 8007f90:	08008019 	.word	0x08008019
 8007f94:	08008019 	.word	0x08008019
 8007f98:	08008019 	.word	0x08008019
 8007f9c:	08008019 	.word	0x08008019
 8007fa0:	08008019 	.word	0x08008019
 8007fa4:	08008001 	.word	0x08008001
 8007fa8:	08008019 	.word	0x08008019
 8007fac:	08008019 	.word	0x08008019
 8007fb0:	08008019 	.word	0x08008019
 8007fb4:	08008019 	.word	0x08008019
 8007fb8:	08008019 	.word	0x08008019
 8007fbc:	08008019 	.word	0x08008019
 8007fc0:	08008019 	.word	0x08008019
 8007fc4:	08008009 	.word	0x08008009
 8007fc8:	08008019 	.word	0x08008019
 8007fcc:	08008019 	.word	0x08008019
 8007fd0:	08008019 	.word	0x08008019
 8007fd4:	08008019 	.word	0x08008019
 8007fd8:	08008019 	.word	0x08008019
 8007fdc:	08008019 	.word	0x08008019
 8007fe0:	08008019 	.word	0x08008019
 8007fe4:	08008011 	.word	0x08008011
 8007fe8:	2301      	movs	r3, #1
 8007fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fee:	e222      	b.n	8008436 <UART_SetConfig+0x5a6>
 8007ff0:	2304      	movs	r3, #4
 8007ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ff6:	e21e      	b.n	8008436 <UART_SetConfig+0x5a6>
 8007ff8:	2308      	movs	r3, #8
 8007ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ffe:	e21a      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008000:	2310      	movs	r3, #16
 8008002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008006:	e216      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008008:	2320      	movs	r3, #32
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800e:	e212      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008010:	2340      	movs	r3, #64	; 0x40
 8008012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008016:	e20e      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008018:	2380      	movs	r3, #128	; 0x80
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801e:	e20a      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a69      	ldr	r2, [pc, #420]	; (80081cc <UART_SetConfig+0x33c>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d130      	bne.n	800808c <UART_SetConfig+0x1fc>
 800802a:	4b67      	ldr	r3, [pc, #412]	; (80081c8 <UART_SetConfig+0x338>)
 800802c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800802e:	f003 0307 	and.w	r3, r3, #7
 8008032:	2b05      	cmp	r3, #5
 8008034:	d826      	bhi.n	8008084 <UART_SetConfig+0x1f4>
 8008036:	a201      	add	r2, pc, #4	; (adr r2, 800803c <UART_SetConfig+0x1ac>)
 8008038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803c:	08008055 	.word	0x08008055
 8008040:	0800805d 	.word	0x0800805d
 8008044:	08008065 	.word	0x08008065
 8008048:	0800806d 	.word	0x0800806d
 800804c:	08008075 	.word	0x08008075
 8008050:	0800807d 	.word	0x0800807d
 8008054:	2300      	movs	r3, #0
 8008056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800805a:	e1ec      	b.n	8008436 <UART_SetConfig+0x5a6>
 800805c:	2304      	movs	r3, #4
 800805e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008062:	e1e8      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008064:	2308      	movs	r3, #8
 8008066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800806a:	e1e4      	b.n	8008436 <UART_SetConfig+0x5a6>
 800806c:	2310      	movs	r3, #16
 800806e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008072:	e1e0      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008074:	2320      	movs	r3, #32
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807a:	e1dc      	b.n	8008436 <UART_SetConfig+0x5a6>
 800807c:	2340      	movs	r3, #64	; 0x40
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008082:	e1d8      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008084:	2380      	movs	r3, #128	; 0x80
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808a:	e1d4      	b.n	8008436 <UART_SetConfig+0x5a6>
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a4f      	ldr	r2, [pc, #316]	; (80081d0 <UART_SetConfig+0x340>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d130      	bne.n	80080f8 <UART_SetConfig+0x268>
 8008096:	4b4c      	ldr	r3, [pc, #304]	; (80081c8 <UART_SetConfig+0x338>)
 8008098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	2b05      	cmp	r3, #5
 80080a0:	d826      	bhi.n	80080f0 <UART_SetConfig+0x260>
 80080a2:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <UART_SetConfig+0x218>)
 80080a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a8:	080080c1 	.word	0x080080c1
 80080ac:	080080c9 	.word	0x080080c9
 80080b0:	080080d1 	.word	0x080080d1
 80080b4:	080080d9 	.word	0x080080d9
 80080b8:	080080e1 	.word	0x080080e1
 80080bc:	080080e9 	.word	0x080080e9
 80080c0:	2300      	movs	r3, #0
 80080c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080c6:	e1b6      	b.n	8008436 <UART_SetConfig+0x5a6>
 80080c8:	2304      	movs	r3, #4
 80080ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ce:	e1b2      	b.n	8008436 <UART_SetConfig+0x5a6>
 80080d0:	2308      	movs	r3, #8
 80080d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080d6:	e1ae      	b.n	8008436 <UART_SetConfig+0x5a6>
 80080d8:	2310      	movs	r3, #16
 80080da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080de:	e1aa      	b.n	8008436 <UART_SetConfig+0x5a6>
 80080e0:	2320      	movs	r3, #32
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e6:	e1a6      	b.n	8008436 <UART_SetConfig+0x5a6>
 80080e8:	2340      	movs	r3, #64	; 0x40
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ee:	e1a2      	b.n	8008436 <UART_SetConfig+0x5a6>
 80080f0:	2380      	movs	r3, #128	; 0x80
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f6:	e19e      	b.n	8008436 <UART_SetConfig+0x5a6>
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a35      	ldr	r2, [pc, #212]	; (80081d4 <UART_SetConfig+0x344>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d130      	bne.n	8008164 <UART_SetConfig+0x2d4>
 8008102:	4b31      	ldr	r3, [pc, #196]	; (80081c8 <UART_SetConfig+0x338>)
 8008104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008106:	f003 0307 	and.w	r3, r3, #7
 800810a:	2b05      	cmp	r3, #5
 800810c:	d826      	bhi.n	800815c <UART_SetConfig+0x2cc>
 800810e:	a201      	add	r2, pc, #4	; (adr r2, 8008114 <UART_SetConfig+0x284>)
 8008110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008114:	0800812d 	.word	0x0800812d
 8008118:	08008135 	.word	0x08008135
 800811c:	0800813d 	.word	0x0800813d
 8008120:	08008145 	.word	0x08008145
 8008124:	0800814d 	.word	0x0800814d
 8008128:	08008155 	.word	0x08008155
 800812c:	2300      	movs	r3, #0
 800812e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008132:	e180      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008134:	2304      	movs	r3, #4
 8008136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800813a:	e17c      	b.n	8008436 <UART_SetConfig+0x5a6>
 800813c:	2308      	movs	r3, #8
 800813e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008142:	e178      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008144:	2310      	movs	r3, #16
 8008146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800814a:	e174      	b.n	8008436 <UART_SetConfig+0x5a6>
 800814c:	2320      	movs	r3, #32
 800814e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008152:	e170      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008154:	2340      	movs	r3, #64	; 0x40
 8008156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800815a:	e16c      	b.n	8008436 <UART_SetConfig+0x5a6>
 800815c:	2380      	movs	r3, #128	; 0x80
 800815e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008162:	e168      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a1b      	ldr	r2, [pc, #108]	; (80081d8 <UART_SetConfig+0x348>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d142      	bne.n	80081f4 <UART_SetConfig+0x364>
 800816e:	4b16      	ldr	r3, [pc, #88]	; (80081c8 <UART_SetConfig+0x338>)
 8008170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008172:	f003 0307 	and.w	r3, r3, #7
 8008176:	2b05      	cmp	r3, #5
 8008178:	d838      	bhi.n	80081ec <UART_SetConfig+0x35c>
 800817a:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <UART_SetConfig+0x2f0>)
 800817c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008180:	08008199 	.word	0x08008199
 8008184:	080081a1 	.word	0x080081a1
 8008188:	080081a9 	.word	0x080081a9
 800818c:	080081b1 	.word	0x080081b1
 8008190:	080081dd 	.word	0x080081dd
 8008194:	080081e5 	.word	0x080081e5
 8008198:	2300      	movs	r3, #0
 800819a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800819e:	e14a      	b.n	8008436 <UART_SetConfig+0x5a6>
 80081a0:	2304      	movs	r3, #4
 80081a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081a6:	e146      	b.n	8008436 <UART_SetConfig+0x5a6>
 80081a8:	2308      	movs	r3, #8
 80081aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ae:	e142      	b.n	8008436 <UART_SetConfig+0x5a6>
 80081b0:	2310      	movs	r3, #16
 80081b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081b6:	e13e      	b.n	8008436 <UART_SetConfig+0x5a6>
 80081b8:	cfff69f3 	.word	0xcfff69f3
 80081bc:	58000c00 	.word	0x58000c00
 80081c0:	11fff4ff 	.word	0x11fff4ff
 80081c4:	40011000 	.word	0x40011000
 80081c8:	58024400 	.word	0x58024400
 80081cc:	40004400 	.word	0x40004400
 80081d0:	40004800 	.word	0x40004800
 80081d4:	40004c00 	.word	0x40004c00
 80081d8:	40005000 	.word	0x40005000
 80081dc:	2320      	movs	r3, #32
 80081de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081e2:	e128      	b.n	8008436 <UART_SetConfig+0x5a6>
 80081e4:	2340      	movs	r3, #64	; 0x40
 80081e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ea:	e124      	b.n	8008436 <UART_SetConfig+0x5a6>
 80081ec:	2380      	movs	r3, #128	; 0x80
 80081ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081f2:	e120      	b.n	8008436 <UART_SetConfig+0x5a6>
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4acb      	ldr	r2, [pc, #812]	; (8008528 <UART_SetConfig+0x698>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d176      	bne.n	80082ec <UART_SetConfig+0x45c>
 80081fe:	4bcb      	ldr	r3, [pc, #812]	; (800852c <UART_SetConfig+0x69c>)
 8008200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008202:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008206:	2b28      	cmp	r3, #40	; 0x28
 8008208:	d86c      	bhi.n	80082e4 <UART_SetConfig+0x454>
 800820a:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <UART_SetConfig+0x380>)
 800820c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008210:	080082b5 	.word	0x080082b5
 8008214:	080082e5 	.word	0x080082e5
 8008218:	080082e5 	.word	0x080082e5
 800821c:	080082e5 	.word	0x080082e5
 8008220:	080082e5 	.word	0x080082e5
 8008224:	080082e5 	.word	0x080082e5
 8008228:	080082e5 	.word	0x080082e5
 800822c:	080082e5 	.word	0x080082e5
 8008230:	080082bd 	.word	0x080082bd
 8008234:	080082e5 	.word	0x080082e5
 8008238:	080082e5 	.word	0x080082e5
 800823c:	080082e5 	.word	0x080082e5
 8008240:	080082e5 	.word	0x080082e5
 8008244:	080082e5 	.word	0x080082e5
 8008248:	080082e5 	.word	0x080082e5
 800824c:	080082e5 	.word	0x080082e5
 8008250:	080082c5 	.word	0x080082c5
 8008254:	080082e5 	.word	0x080082e5
 8008258:	080082e5 	.word	0x080082e5
 800825c:	080082e5 	.word	0x080082e5
 8008260:	080082e5 	.word	0x080082e5
 8008264:	080082e5 	.word	0x080082e5
 8008268:	080082e5 	.word	0x080082e5
 800826c:	080082e5 	.word	0x080082e5
 8008270:	080082cd 	.word	0x080082cd
 8008274:	080082e5 	.word	0x080082e5
 8008278:	080082e5 	.word	0x080082e5
 800827c:	080082e5 	.word	0x080082e5
 8008280:	080082e5 	.word	0x080082e5
 8008284:	080082e5 	.word	0x080082e5
 8008288:	080082e5 	.word	0x080082e5
 800828c:	080082e5 	.word	0x080082e5
 8008290:	080082d5 	.word	0x080082d5
 8008294:	080082e5 	.word	0x080082e5
 8008298:	080082e5 	.word	0x080082e5
 800829c:	080082e5 	.word	0x080082e5
 80082a0:	080082e5 	.word	0x080082e5
 80082a4:	080082e5 	.word	0x080082e5
 80082a8:	080082e5 	.word	0x080082e5
 80082ac:	080082e5 	.word	0x080082e5
 80082b0:	080082dd 	.word	0x080082dd
 80082b4:	2301      	movs	r3, #1
 80082b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ba:	e0bc      	b.n	8008436 <UART_SetConfig+0x5a6>
 80082bc:	2304      	movs	r3, #4
 80082be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082c2:	e0b8      	b.n	8008436 <UART_SetConfig+0x5a6>
 80082c4:	2308      	movs	r3, #8
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ca:	e0b4      	b.n	8008436 <UART_SetConfig+0x5a6>
 80082cc:	2310      	movs	r3, #16
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082d2:	e0b0      	b.n	8008436 <UART_SetConfig+0x5a6>
 80082d4:	2320      	movs	r3, #32
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082da:	e0ac      	b.n	8008436 <UART_SetConfig+0x5a6>
 80082dc:	2340      	movs	r3, #64	; 0x40
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e2:	e0a8      	b.n	8008436 <UART_SetConfig+0x5a6>
 80082e4:	2380      	movs	r3, #128	; 0x80
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ea:	e0a4      	b.n	8008436 <UART_SetConfig+0x5a6>
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a8f      	ldr	r2, [pc, #572]	; (8008530 <UART_SetConfig+0x6a0>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d130      	bne.n	8008358 <UART_SetConfig+0x4c8>
 80082f6:	4b8d      	ldr	r3, [pc, #564]	; (800852c <UART_SetConfig+0x69c>)
 80082f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082fa:	f003 0307 	and.w	r3, r3, #7
 80082fe:	2b05      	cmp	r3, #5
 8008300:	d826      	bhi.n	8008350 <UART_SetConfig+0x4c0>
 8008302:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <UART_SetConfig+0x478>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	08008321 	.word	0x08008321
 800830c:	08008329 	.word	0x08008329
 8008310:	08008331 	.word	0x08008331
 8008314:	08008339 	.word	0x08008339
 8008318:	08008341 	.word	0x08008341
 800831c:	08008349 	.word	0x08008349
 8008320:	2300      	movs	r3, #0
 8008322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008326:	e086      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008328:	2304      	movs	r3, #4
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800832e:	e082      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008330:	2308      	movs	r3, #8
 8008332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008336:	e07e      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008338:	2310      	movs	r3, #16
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833e:	e07a      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008340:	2320      	movs	r3, #32
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008346:	e076      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008348:	2340      	movs	r3, #64	; 0x40
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834e:	e072      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008350:	2380      	movs	r3, #128	; 0x80
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008356:	e06e      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a75      	ldr	r2, [pc, #468]	; (8008534 <UART_SetConfig+0x6a4>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d130      	bne.n	80083c4 <UART_SetConfig+0x534>
 8008362:	4b72      	ldr	r3, [pc, #456]	; (800852c <UART_SetConfig+0x69c>)
 8008364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008366:	f003 0307 	and.w	r3, r3, #7
 800836a:	2b05      	cmp	r3, #5
 800836c:	d826      	bhi.n	80083bc <UART_SetConfig+0x52c>
 800836e:	a201      	add	r2, pc, #4	; (adr r2, 8008374 <UART_SetConfig+0x4e4>)
 8008370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008374:	0800838d 	.word	0x0800838d
 8008378:	08008395 	.word	0x08008395
 800837c:	0800839d 	.word	0x0800839d
 8008380:	080083a5 	.word	0x080083a5
 8008384:	080083ad 	.word	0x080083ad
 8008388:	080083b5 	.word	0x080083b5
 800838c:	2300      	movs	r3, #0
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008392:	e050      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008394:	2304      	movs	r3, #4
 8008396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800839a:	e04c      	b.n	8008436 <UART_SetConfig+0x5a6>
 800839c:	2308      	movs	r3, #8
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083a2:	e048      	b.n	8008436 <UART_SetConfig+0x5a6>
 80083a4:	2310      	movs	r3, #16
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083aa:	e044      	b.n	8008436 <UART_SetConfig+0x5a6>
 80083ac:	2320      	movs	r3, #32
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b2:	e040      	b.n	8008436 <UART_SetConfig+0x5a6>
 80083b4:	2340      	movs	r3, #64	; 0x40
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ba:	e03c      	b.n	8008436 <UART_SetConfig+0x5a6>
 80083bc:	2380      	movs	r3, #128	; 0x80
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c2:	e038      	b.n	8008436 <UART_SetConfig+0x5a6>
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a5b      	ldr	r2, [pc, #364]	; (8008538 <UART_SetConfig+0x6a8>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d130      	bne.n	8008430 <UART_SetConfig+0x5a0>
 80083ce:	4b57      	ldr	r3, [pc, #348]	; (800852c <UART_SetConfig+0x69c>)
 80083d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	2b05      	cmp	r3, #5
 80083d8:	d826      	bhi.n	8008428 <UART_SetConfig+0x598>
 80083da:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <UART_SetConfig+0x550>)
 80083dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e0:	080083f9 	.word	0x080083f9
 80083e4:	08008401 	.word	0x08008401
 80083e8:	08008409 	.word	0x08008409
 80083ec:	08008411 	.word	0x08008411
 80083f0:	08008419 	.word	0x08008419
 80083f4:	08008421 	.word	0x08008421
 80083f8:	2302      	movs	r3, #2
 80083fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083fe:	e01a      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008400:	2304      	movs	r3, #4
 8008402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008406:	e016      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008408:	2308      	movs	r3, #8
 800840a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800840e:	e012      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008410:	2310      	movs	r3, #16
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008416:	e00e      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008418:	2320      	movs	r3, #32
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800841e:	e00a      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008420:	2340      	movs	r3, #64	; 0x40
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008426:	e006      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008428:	2380      	movs	r3, #128	; 0x80
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842e:	e002      	b.n	8008436 <UART_SetConfig+0x5a6>
 8008430:	2380      	movs	r3, #128	; 0x80
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a3f      	ldr	r2, [pc, #252]	; (8008538 <UART_SetConfig+0x6a8>)
 800843c:	4293      	cmp	r3, r2
 800843e:	f040 80f8 	bne.w	8008632 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008442:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008446:	2b20      	cmp	r3, #32
 8008448:	dc46      	bgt.n	80084d8 <UART_SetConfig+0x648>
 800844a:	2b02      	cmp	r3, #2
 800844c:	f2c0 8082 	blt.w	8008554 <UART_SetConfig+0x6c4>
 8008450:	3b02      	subs	r3, #2
 8008452:	2b1e      	cmp	r3, #30
 8008454:	d87e      	bhi.n	8008554 <UART_SetConfig+0x6c4>
 8008456:	a201      	add	r2, pc, #4	; (adr r2, 800845c <UART_SetConfig+0x5cc>)
 8008458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845c:	080084df 	.word	0x080084df
 8008460:	08008555 	.word	0x08008555
 8008464:	080084e7 	.word	0x080084e7
 8008468:	08008555 	.word	0x08008555
 800846c:	08008555 	.word	0x08008555
 8008470:	08008555 	.word	0x08008555
 8008474:	080084f7 	.word	0x080084f7
 8008478:	08008555 	.word	0x08008555
 800847c:	08008555 	.word	0x08008555
 8008480:	08008555 	.word	0x08008555
 8008484:	08008555 	.word	0x08008555
 8008488:	08008555 	.word	0x08008555
 800848c:	08008555 	.word	0x08008555
 8008490:	08008555 	.word	0x08008555
 8008494:	08008507 	.word	0x08008507
 8008498:	08008555 	.word	0x08008555
 800849c:	08008555 	.word	0x08008555
 80084a0:	08008555 	.word	0x08008555
 80084a4:	08008555 	.word	0x08008555
 80084a8:	08008555 	.word	0x08008555
 80084ac:	08008555 	.word	0x08008555
 80084b0:	08008555 	.word	0x08008555
 80084b4:	08008555 	.word	0x08008555
 80084b8:	08008555 	.word	0x08008555
 80084bc:	08008555 	.word	0x08008555
 80084c0:	08008555 	.word	0x08008555
 80084c4:	08008555 	.word	0x08008555
 80084c8:	08008555 	.word	0x08008555
 80084cc:	08008555 	.word	0x08008555
 80084d0:	08008555 	.word	0x08008555
 80084d4:	08008547 	.word	0x08008547
 80084d8:	2b40      	cmp	r3, #64	; 0x40
 80084da:	d037      	beq.n	800854c <UART_SetConfig+0x6bc>
 80084dc:	e03a      	b.n	8008554 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80084de:	f7fc ff95 	bl	800540c <HAL_RCCEx_GetD3PCLK1Freq>
 80084e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084e4:	e03c      	b.n	8008560 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fc ffa4 	bl	8005438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f4:	e034      	b.n	8008560 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084f6:	f107 0318 	add.w	r3, r7, #24
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fd f8f0 	bl	80056e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008504:	e02c      	b.n	8008560 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008506:	4b09      	ldr	r3, [pc, #36]	; (800852c <UART_SetConfig+0x69c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0320 	and.w	r3, r3, #32
 800850e:	2b00      	cmp	r3, #0
 8008510:	d016      	beq.n	8008540 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008512:	4b06      	ldr	r3, [pc, #24]	; (800852c <UART_SetConfig+0x69c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	08db      	lsrs	r3, r3, #3
 8008518:	f003 0303 	and.w	r3, r3, #3
 800851c:	4a07      	ldr	r2, [pc, #28]	; (800853c <UART_SetConfig+0x6ac>)
 800851e:	fa22 f303 	lsr.w	r3, r2, r3
 8008522:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008524:	e01c      	b.n	8008560 <UART_SetConfig+0x6d0>
 8008526:	bf00      	nop
 8008528:	40011400 	.word	0x40011400
 800852c:	58024400 	.word	0x58024400
 8008530:	40007800 	.word	0x40007800
 8008534:	40007c00 	.word	0x40007c00
 8008538:	58000c00 	.word	0x58000c00
 800853c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008540:	4b9d      	ldr	r3, [pc, #628]	; (80087b8 <UART_SetConfig+0x928>)
 8008542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008544:	e00c      	b.n	8008560 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008546:	4b9d      	ldr	r3, [pc, #628]	; (80087bc <UART_SetConfig+0x92c>)
 8008548:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800854a:	e009      	b.n	8008560 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800854c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008550:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008552:	e005      	b.n	8008560 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008554:	2300      	movs	r3, #0
 8008556:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800855e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 81de 	beq.w	8008924 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856c:	4a94      	ldr	r2, [pc, #592]	; (80087c0 <UART_SetConfig+0x930>)
 800856e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008572:	461a      	mov	r2, r3
 8008574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008576:	fbb3 f3f2 	udiv	r3, r3, r2
 800857a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	4613      	mov	r3, r2
 8008582:	005b      	lsls	r3, r3, #1
 8008584:	4413      	add	r3, r2
 8008586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008588:	429a      	cmp	r2, r3
 800858a:	d305      	bcc.n	8008598 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008594:	429a      	cmp	r2, r3
 8008596:	d903      	bls.n	80085a0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800859e:	e1c1      	b.n	8008924 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a2:	2200      	movs	r2, #0
 80085a4:	60bb      	str	r3, [r7, #8]
 80085a6:	60fa      	str	r2, [r7, #12]
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ac:	4a84      	ldr	r2, [pc, #528]	; (80087c0 <UART_SetConfig+0x930>)
 80085ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	2200      	movs	r2, #0
 80085b6:	603b      	str	r3, [r7, #0]
 80085b8:	607a      	str	r2, [r7, #4]
 80085ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085c2:	f7f7 fee5 	bl	8000390 <__aeabi_uldivmod>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	4610      	mov	r0, r2
 80085cc:	4619      	mov	r1, r3
 80085ce:	f04f 0200 	mov.w	r2, #0
 80085d2:	f04f 0300 	mov.w	r3, #0
 80085d6:	020b      	lsls	r3, r1, #8
 80085d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085dc:	0202      	lsls	r2, r0, #8
 80085de:	6979      	ldr	r1, [r7, #20]
 80085e0:	6849      	ldr	r1, [r1, #4]
 80085e2:	0849      	lsrs	r1, r1, #1
 80085e4:	2000      	movs	r0, #0
 80085e6:	460c      	mov	r4, r1
 80085e8:	4605      	mov	r5, r0
 80085ea:	eb12 0804 	adds.w	r8, r2, r4
 80085ee:	eb43 0905 	adc.w	r9, r3, r5
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	469a      	mov	sl, r3
 80085fa:	4693      	mov	fp, r2
 80085fc:	4652      	mov	r2, sl
 80085fe:	465b      	mov	r3, fp
 8008600:	4640      	mov	r0, r8
 8008602:	4649      	mov	r1, r9
 8008604:	f7f7 fec4 	bl	8000390 <__aeabi_uldivmod>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	4613      	mov	r3, r2
 800860e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008616:	d308      	bcc.n	800862a <UART_SetConfig+0x79a>
 8008618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800861e:	d204      	bcs.n	800862a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008626:	60da      	str	r2, [r3, #12]
 8008628:	e17c      	b.n	8008924 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008630:	e178      	b.n	8008924 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800863a:	f040 80c5 	bne.w	80087c8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800863e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008642:	2b20      	cmp	r3, #32
 8008644:	dc48      	bgt.n	80086d8 <UART_SetConfig+0x848>
 8008646:	2b00      	cmp	r3, #0
 8008648:	db7b      	blt.n	8008742 <UART_SetConfig+0x8b2>
 800864a:	2b20      	cmp	r3, #32
 800864c:	d879      	bhi.n	8008742 <UART_SetConfig+0x8b2>
 800864e:	a201      	add	r2, pc, #4	; (adr r2, 8008654 <UART_SetConfig+0x7c4>)
 8008650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008654:	080086df 	.word	0x080086df
 8008658:	080086e7 	.word	0x080086e7
 800865c:	08008743 	.word	0x08008743
 8008660:	08008743 	.word	0x08008743
 8008664:	080086ef 	.word	0x080086ef
 8008668:	08008743 	.word	0x08008743
 800866c:	08008743 	.word	0x08008743
 8008670:	08008743 	.word	0x08008743
 8008674:	080086ff 	.word	0x080086ff
 8008678:	08008743 	.word	0x08008743
 800867c:	08008743 	.word	0x08008743
 8008680:	08008743 	.word	0x08008743
 8008684:	08008743 	.word	0x08008743
 8008688:	08008743 	.word	0x08008743
 800868c:	08008743 	.word	0x08008743
 8008690:	08008743 	.word	0x08008743
 8008694:	0800870f 	.word	0x0800870f
 8008698:	08008743 	.word	0x08008743
 800869c:	08008743 	.word	0x08008743
 80086a0:	08008743 	.word	0x08008743
 80086a4:	08008743 	.word	0x08008743
 80086a8:	08008743 	.word	0x08008743
 80086ac:	08008743 	.word	0x08008743
 80086b0:	08008743 	.word	0x08008743
 80086b4:	08008743 	.word	0x08008743
 80086b8:	08008743 	.word	0x08008743
 80086bc:	08008743 	.word	0x08008743
 80086c0:	08008743 	.word	0x08008743
 80086c4:	08008743 	.word	0x08008743
 80086c8:	08008743 	.word	0x08008743
 80086cc:	08008743 	.word	0x08008743
 80086d0:	08008743 	.word	0x08008743
 80086d4:	08008735 	.word	0x08008735
 80086d8:	2b40      	cmp	r3, #64	; 0x40
 80086da:	d02e      	beq.n	800873a <UART_SetConfig+0x8aa>
 80086dc:	e031      	b.n	8008742 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086de:	f7fb ff23 	bl	8004528 <HAL_RCC_GetPCLK1Freq>
 80086e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80086e4:	e033      	b.n	800874e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086e6:	f7fb ff35 	bl	8004554 <HAL_RCC_GetPCLK2Freq>
 80086ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80086ec:	e02f      	b.n	800874e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fc fea0 	bl	8005438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086fc:	e027      	b.n	800874e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086fe:	f107 0318 	add.w	r3, r7, #24
 8008702:	4618      	mov	r0, r3
 8008704:	f7fc ffec 	bl	80056e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800870c:	e01f      	b.n	800874e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800870e:	4b2d      	ldr	r3, [pc, #180]	; (80087c4 <UART_SetConfig+0x934>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0320 	and.w	r3, r3, #32
 8008716:	2b00      	cmp	r3, #0
 8008718:	d009      	beq.n	800872e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800871a:	4b2a      	ldr	r3, [pc, #168]	; (80087c4 <UART_SetConfig+0x934>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	08db      	lsrs	r3, r3, #3
 8008720:	f003 0303 	and.w	r3, r3, #3
 8008724:	4a24      	ldr	r2, [pc, #144]	; (80087b8 <UART_SetConfig+0x928>)
 8008726:	fa22 f303 	lsr.w	r3, r2, r3
 800872a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800872c:	e00f      	b.n	800874e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800872e:	4b22      	ldr	r3, [pc, #136]	; (80087b8 <UART_SetConfig+0x928>)
 8008730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008732:	e00c      	b.n	800874e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008734:	4b21      	ldr	r3, [pc, #132]	; (80087bc <UART_SetConfig+0x92c>)
 8008736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008738:	e009      	b.n	800874e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800873a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800873e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008740:	e005      	b.n	800874e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800874c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800874e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 80e7 	beq.w	8008924 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875a:	4a19      	ldr	r2, [pc, #100]	; (80087c0 <UART_SetConfig+0x930>)
 800875c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008760:	461a      	mov	r2, r3
 8008762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008764:	fbb3 f3f2 	udiv	r3, r3, r2
 8008768:	005a      	lsls	r2, r3, #1
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	085b      	lsrs	r3, r3, #1
 8008770:	441a      	add	r2, r3
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	fbb2 f3f3 	udiv	r3, r2, r3
 800877a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800877c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877e:	2b0f      	cmp	r3, #15
 8008780:	d916      	bls.n	80087b0 <UART_SetConfig+0x920>
 8008782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008788:	d212      	bcs.n	80087b0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800878a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878c:	b29b      	uxth	r3, r3
 800878e:	f023 030f 	bic.w	r3, r3, #15
 8008792:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008796:	085b      	lsrs	r3, r3, #1
 8008798:	b29b      	uxth	r3, r3
 800879a:	f003 0307 	and.w	r3, r3, #7
 800879e:	b29a      	uxth	r2, r3
 80087a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80087a2:	4313      	orrs	r3, r2
 80087a4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80087ac:	60da      	str	r2, [r3, #12]
 80087ae:	e0b9      	b.n	8008924 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80087b6:	e0b5      	b.n	8008924 <UART_SetConfig+0xa94>
 80087b8:	03d09000 	.word	0x03d09000
 80087bc:	003d0900 	.word	0x003d0900
 80087c0:	0800fe7c 	.word	0x0800fe7c
 80087c4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80087c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80087cc:	2b20      	cmp	r3, #32
 80087ce:	dc49      	bgt.n	8008864 <UART_SetConfig+0x9d4>
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	db7c      	blt.n	80088ce <UART_SetConfig+0xa3e>
 80087d4:	2b20      	cmp	r3, #32
 80087d6:	d87a      	bhi.n	80088ce <UART_SetConfig+0xa3e>
 80087d8:	a201      	add	r2, pc, #4	; (adr r2, 80087e0 <UART_SetConfig+0x950>)
 80087da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087de:	bf00      	nop
 80087e0:	0800886b 	.word	0x0800886b
 80087e4:	08008873 	.word	0x08008873
 80087e8:	080088cf 	.word	0x080088cf
 80087ec:	080088cf 	.word	0x080088cf
 80087f0:	0800887b 	.word	0x0800887b
 80087f4:	080088cf 	.word	0x080088cf
 80087f8:	080088cf 	.word	0x080088cf
 80087fc:	080088cf 	.word	0x080088cf
 8008800:	0800888b 	.word	0x0800888b
 8008804:	080088cf 	.word	0x080088cf
 8008808:	080088cf 	.word	0x080088cf
 800880c:	080088cf 	.word	0x080088cf
 8008810:	080088cf 	.word	0x080088cf
 8008814:	080088cf 	.word	0x080088cf
 8008818:	080088cf 	.word	0x080088cf
 800881c:	080088cf 	.word	0x080088cf
 8008820:	0800889b 	.word	0x0800889b
 8008824:	080088cf 	.word	0x080088cf
 8008828:	080088cf 	.word	0x080088cf
 800882c:	080088cf 	.word	0x080088cf
 8008830:	080088cf 	.word	0x080088cf
 8008834:	080088cf 	.word	0x080088cf
 8008838:	080088cf 	.word	0x080088cf
 800883c:	080088cf 	.word	0x080088cf
 8008840:	080088cf 	.word	0x080088cf
 8008844:	080088cf 	.word	0x080088cf
 8008848:	080088cf 	.word	0x080088cf
 800884c:	080088cf 	.word	0x080088cf
 8008850:	080088cf 	.word	0x080088cf
 8008854:	080088cf 	.word	0x080088cf
 8008858:	080088cf 	.word	0x080088cf
 800885c:	080088cf 	.word	0x080088cf
 8008860:	080088c1 	.word	0x080088c1
 8008864:	2b40      	cmp	r3, #64	; 0x40
 8008866:	d02e      	beq.n	80088c6 <UART_SetConfig+0xa36>
 8008868:	e031      	b.n	80088ce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800886a:	f7fb fe5d 	bl	8004528 <HAL_RCC_GetPCLK1Freq>
 800886e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008870:	e033      	b.n	80088da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008872:	f7fb fe6f 	bl	8004554 <HAL_RCC_GetPCLK2Freq>
 8008876:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008878:	e02f      	b.n	80088da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800887a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800887e:	4618      	mov	r0, r3
 8008880:	f7fc fdda 	bl	8005438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008888:	e027      	b.n	80088da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800888a:	f107 0318 	add.w	r3, r7, #24
 800888e:	4618      	mov	r0, r3
 8008890:	f7fc ff26 	bl	80056e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008898:	e01f      	b.n	80088da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800889a:	4b2d      	ldr	r3, [pc, #180]	; (8008950 <UART_SetConfig+0xac0>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0320 	and.w	r3, r3, #32
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d009      	beq.n	80088ba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088a6:	4b2a      	ldr	r3, [pc, #168]	; (8008950 <UART_SetConfig+0xac0>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	08db      	lsrs	r3, r3, #3
 80088ac:	f003 0303 	and.w	r3, r3, #3
 80088b0:	4a28      	ldr	r2, [pc, #160]	; (8008954 <UART_SetConfig+0xac4>)
 80088b2:	fa22 f303 	lsr.w	r3, r2, r3
 80088b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088b8:	e00f      	b.n	80088da <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80088ba:	4b26      	ldr	r3, [pc, #152]	; (8008954 <UART_SetConfig+0xac4>)
 80088bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088be:	e00c      	b.n	80088da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088c0:	4b25      	ldr	r3, [pc, #148]	; (8008958 <UART_SetConfig+0xac8>)
 80088c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088c4:	e009      	b.n	80088da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088cc:	e005      	b.n	80088da <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80088ce:	2300      	movs	r3, #0
 80088d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80088d8:	bf00      	nop
    }

    if (pclk != 0U)
 80088da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d021      	beq.n	8008924 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	4a1d      	ldr	r2, [pc, #116]	; (800895c <UART_SetConfig+0xacc>)
 80088e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088ea:	461a      	mov	r2, r3
 80088ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	085b      	lsrs	r3, r3, #1
 80088f8:	441a      	add	r2, r3
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008902:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008906:	2b0f      	cmp	r3, #15
 8008908:	d909      	bls.n	800891e <UART_SetConfig+0xa8e>
 800890a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008910:	d205      	bcs.n	800891e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008914:	b29a      	uxth	r2, r3
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	60da      	str	r2, [r3, #12]
 800891c:	e002      	b.n	8008924 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	2201      	movs	r2, #1
 8008928:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	2201      	movs	r2, #1
 8008930:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	2200      	movs	r2, #0
 8008938:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2200      	movs	r2, #0
 800893e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008940:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008944:	4618      	mov	r0, r3
 8008946:	3748      	adds	r7, #72	; 0x48
 8008948:	46bd      	mov	sp, r7
 800894a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800894e:	bf00      	nop
 8008950:	58024400 	.word	0x58024400
 8008954:	03d09000 	.word	0x03d09000
 8008958:	003d0900 	.word	0x003d0900
 800895c:	0800fe7c 	.word	0x0800fe7c

08008960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896c:	f003 0301 	and.w	r3, r3, #1
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00a      	beq.n	800898a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898e:	f003 0302 	and.w	r3, r3, #2
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00a      	beq.n	80089ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	430a      	orrs	r2, r1
 80089aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b0:	f003 0304 	and.w	r3, r3, #4
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00a      	beq.n	80089ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	430a      	orrs	r2, r1
 80089cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d2:	f003 0308 	and.w	r3, r3, #8
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00a      	beq.n	80089f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	430a      	orrs	r2, r1
 80089ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f4:	f003 0310 	and.w	r3, r3, #16
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00a      	beq.n	8008a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a16:	f003 0320 	and.w	r3, r3, #32
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00a      	beq.n	8008a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d01a      	beq.n	8008a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	430a      	orrs	r2, r1
 8008a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a5e:	d10a      	bne.n	8008a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	430a      	orrs	r2, r1
 8008a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00a      	beq.n	8008a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	430a      	orrs	r2, r1
 8008a96:	605a      	str	r2, [r3, #4]
  }
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af02      	add	r7, sp, #8
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ab4:	f7fa fa1e 	bl	8002ef4 <HAL_GetTick>
 8008ab8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0308 	and.w	r3, r3, #8
 8008ac4:	2b08      	cmp	r3, #8
 8008ac6:	d10e      	bne.n	8008ae6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f82f 	bl	8008b3a <UART_WaitOnFlagUntilTimeout>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e025      	b.n	8008b32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b04      	cmp	r3, #4
 8008af2:	d10e      	bne.n	8008b12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008af4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f819 	bl	8008b3a <UART_WaitOnFlagUntilTimeout>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e00f      	b.n	8008b32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2220      	movs	r2, #32
 8008b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b09c      	sub	sp, #112	; 0x70
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	60f8      	str	r0, [r7, #12]
 8008b42:	60b9      	str	r1, [r7, #8]
 8008b44:	603b      	str	r3, [r7, #0]
 8008b46:	4613      	mov	r3, r2
 8008b48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b4a:	e0a9      	b.n	8008ca0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b52:	f000 80a5 	beq.w	8008ca0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b56:	f7fa f9cd 	bl	8002ef4 <HAL_GetTick>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d302      	bcc.n	8008b6c <UART_WaitOnFlagUntilTimeout+0x32>
 8008b66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d140      	bne.n	8008bee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b74:	e853 3f00 	ldrex	r3, [r3]
 8008b78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b80:	667b      	str	r3, [r7, #100]	; 0x64
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	461a      	mov	r2, r3
 8008b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b8c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b92:	e841 2300 	strex	r3, r2, [r1]
 8008b96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1e6      	bne.n	8008b6c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba8:	e853 3f00 	ldrex	r3, [r3]
 8008bac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb0:	f023 0301 	bic.w	r3, r3, #1
 8008bb4:	663b      	str	r3, [r7, #96]	; 0x60
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3308      	adds	r3, #8
 8008bbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008bbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8008bc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bc6:	e841 2300 	strex	r3, r2, [r1]
 8008bca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1e5      	bne.n	8008b9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2220      	movs	r2, #32
 8008bde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e069      	b.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0304 	and.w	r3, r3, #4
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d051      	beq.n	8008ca0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	69db      	ldr	r3, [r3, #28]
 8008c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c0a:	d149      	bne.n	8008ca0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	e853 3f00 	ldrex	r3, [r3]
 8008c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	461a      	mov	r2, r3
 8008c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c34:	637b      	str	r3, [r7, #52]	; 0x34
 8008c36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c3c:	e841 2300 	strex	r3, r2, [r1]
 8008c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1e6      	bne.n	8008c16 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	e853 3f00 	ldrex	r3, [r3]
 8008c56:	613b      	str	r3, [r7, #16]
   return(result);
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f023 0301 	bic.w	r3, r3, #1
 8008c5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	3308      	adds	r3, #8
 8008c66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c68:	623a      	str	r2, [r7, #32]
 8008c6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6c:	69f9      	ldr	r1, [r7, #28]
 8008c6e:	6a3a      	ldr	r2, [r7, #32]
 8008c70:	e841 2300 	strex	r3, r2, [r1]
 8008c74:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1e5      	bne.n	8008c48 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2220      	movs	r2, #32
 8008c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2220      	movs	r2, #32
 8008c90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e010      	b.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	69da      	ldr	r2, [r3, #28]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	bf0c      	ite	eq
 8008cb0:	2301      	moveq	r3, #1
 8008cb2:	2300      	movne	r3, #0
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	79fb      	ldrb	r3, [r7, #7]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	f43f af46 	beq.w	8008b4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3770      	adds	r7, #112	; 0x70
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b085      	sub	sp, #20
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d101      	bne.n	8008ce0 <HAL_UARTEx_DisableFifoMode+0x16>
 8008cdc:	2302      	movs	r3, #2
 8008cde:	e027      	b.n	8008d30 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2224      	movs	r2, #36	; 0x24
 8008cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f022 0201 	bic.w	r2, r2, #1
 8008d06:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d0e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2220      	movs	r2, #32
 8008d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d101      	bne.n	8008d54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d50:	2302      	movs	r3, #2
 8008d52:	e02d      	b.n	8008db0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2224      	movs	r2, #36	; 0x24
 8008d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f022 0201 	bic.w	r2, r2, #1
 8008d7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f84f 	bl	8008e34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2220      	movs	r2, #32
 8008da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d101      	bne.n	8008dd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008dcc:	2302      	movs	r3, #2
 8008dce:	e02d      	b.n	8008e2c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2224      	movs	r2, #36	; 0x24
 8008ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f022 0201 	bic.w	r2, r2, #1
 8008df6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	430a      	orrs	r2, r1
 8008e0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f811 	bl	8008e34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2220      	movs	r2, #32
 8008e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d108      	bne.n	8008e56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e54:	e031      	b.n	8008eba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e56:	2310      	movs	r3, #16
 8008e58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e5a:	2310      	movs	r3, #16
 8008e5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	0e5b      	lsrs	r3, r3, #25
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	f003 0307 	and.w	r3, r3, #7
 8008e6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	0f5b      	lsrs	r3, r3, #29
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	f003 0307 	and.w	r3, r3, #7
 8008e7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
 8008e80:	7b3a      	ldrb	r2, [r7, #12]
 8008e82:	4911      	ldr	r1, [pc, #68]	; (8008ec8 <UARTEx_SetNbDataToProcess+0x94>)
 8008e84:	5c8a      	ldrb	r2, [r1, r2]
 8008e86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e8a:	7b3a      	ldrb	r2, [r7, #12]
 8008e8c:	490f      	ldr	r1, [pc, #60]	; (8008ecc <UARTEx_SetNbDataToProcess+0x98>)
 8008e8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e90:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	7b7a      	ldrb	r2, [r7, #13]
 8008ea0:	4909      	ldr	r1, [pc, #36]	; (8008ec8 <UARTEx_SetNbDataToProcess+0x94>)
 8008ea2:	5c8a      	ldrb	r2, [r1, r2]
 8008ea4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ea8:	7b7a      	ldrb	r2, [r7, #13]
 8008eaa:	4908      	ldr	r1, [pc, #32]	; (8008ecc <UARTEx_SetNbDataToProcess+0x98>)
 8008eac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008eae:	fb93 f3f2 	sdiv	r3, r3, r2
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008eba:	bf00      	nop
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	0800fe94 	.word	0x0800fe94
 8008ecc:	0800fe9c 	.word	0x0800fe9c

08008ed0 <__NVIC_SetPriority>:
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	6039      	str	r1, [r7, #0]
 8008eda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008edc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	db0a      	blt.n	8008efa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	b2da      	uxtb	r2, r3
 8008ee8:	490c      	ldr	r1, [pc, #48]	; (8008f1c <__NVIC_SetPriority+0x4c>)
 8008eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008eee:	0112      	lsls	r2, r2, #4
 8008ef0:	b2d2      	uxtb	r2, r2
 8008ef2:	440b      	add	r3, r1
 8008ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008ef8:	e00a      	b.n	8008f10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	4908      	ldr	r1, [pc, #32]	; (8008f20 <__NVIC_SetPriority+0x50>)
 8008f00:	88fb      	ldrh	r3, [r7, #6]
 8008f02:	f003 030f 	and.w	r3, r3, #15
 8008f06:	3b04      	subs	r3, #4
 8008f08:	0112      	lsls	r2, r2, #4
 8008f0a:	b2d2      	uxtb	r2, r2
 8008f0c:	440b      	add	r3, r1
 8008f0e:	761a      	strb	r2, [r3, #24]
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	e000e100 	.word	0xe000e100
 8008f20:	e000ed00 	.word	0xe000ed00

08008f24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008f24:	b580      	push	{r7, lr}
 8008f26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008f28:	2100      	movs	r1, #0
 8008f2a:	f06f 0004 	mvn.w	r0, #4
 8008f2e:	f7ff ffcf 	bl	8008ed0 <__NVIC_SetPriority>
#endif
}
 8008f32:	bf00      	nop
 8008f34:	bd80      	pop	{r7, pc}
	...

08008f38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f3e:	f3ef 8305 	mrs	r3, IPSR
 8008f42:	603b      	str	r3, [r7, #0]
  return(result);
 8008f44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008f4a:	f06f 0305 	mvn.w	r3, #5
 8008f4e:	607b      	str	r3, [r7, #4]
 8008f50:	e00c      	b.n	8008f6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f52:	4b0a      	ldr	r3, [pc, #40]	; (8008f7c <osKernelInitialize+0x44>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d105      	bne.n	8008f66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f5a:	4b08      	ldr	r3, [pc, #32]	; (8008f7c <osKernelInitialize+0x44>)
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f60:	2300      	movs	r3, #0
 8008f62:	607b      	str	r3, [r7, #4]
 8008f64:	e002      	b.n	8008f6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f66:	f04f 33ff 	mov.w	r3, #4294967295
 8008f6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f6c:	687b      	ldr	r3, [r7, #4]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	2400053c 	.word	0x2400053c

08008f80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f86:	f3ef 8305 	mrs	r3, IPSR
 8008f8a:	603b      	str	r3, [r7, #0]
  return(result);
 8008f8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d003      	beq.n	8008f9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008f92:	f06f 0305 	mvn.w	r3, #5
 8008f96:	607b      	str	r3, [r7, #4]
 8008f98:	e010      	b.n	8008fbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f9a:	4b0b      	ldr	r3, [pc, #44]	; (8008fc8 <osKernelStart+0x48>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d109      	bne.n	8008fb6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008fa2:	f7ff ffbf 	bl	8008f24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008fa6:	4b08      	ldr	r3, [pc, #32]	; (8008fc8 <osKernelStart+0x48>)
 8008fa8:	2202      	movs	r2, #2
 8008faa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008fac:	f001 ffd8 	bl	800af60 <vTaskStartScheduler>
      stat = osOK;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	607b      	str	r3, [r7, #4]
 8008fb4:	e002      	b.n	8008fbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008fbc:	687b      	ldr	r3, [r7, #4]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	2400053c 	.word	0x2400053c

08008fcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08e      	sub	sp, #56	; 0x38
 8008fd0:	af04      	add	r7, sp, #16
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fdc:	f3ef 8305 	mrs	r3, IPSR
 8008fe0:	617b      	str	r3, [r7, #20]
  return(result);
 8008fe2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d17e      	bne.n	80090e6 <osThreadNew+0x11a>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d07b      	beq.n	80090e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008fee:	2380      	movs	r3, #128	; 0x80
 8008ff0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008ff2:	2318      	movs	r3, #24
 8008ff4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8008ffe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d045      	beq.n	8009092 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d002      	beq.n	8009014 <osThreadNew+0x48>
        name = attr->name;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d002      	beq.n	8009022 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	699b      	ldr	r3, [r3, #24]
 8009020:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d008      	beq.n	800903a <osThreadNew+0x6e>
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	2b38      	cmp	r3, #56	; 0x38
 800902c:	d805      	bhi.n	800903a <osThreadNew+0x6e>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <osThreadNew+0x72>
        return (NULL);
 800903a:	2300      	movs	r3, #0
 800903c:	e054      	b.n	80090e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d003      	beq.n	800904e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	089b      	lsrs	r3, r3, #2
 800904c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00e      	beq.n	8009074 <osThreadNew+0xa8>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	2ba7      	cmp	r3, #167	; 0xa7
 800905c:	d90a      	bls.n	8009074 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009062:	2b00      	cmp	r3, #0
 8009064:	d006      	beq.n	8009074 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d002      	beq.n	8009074 <osThreadNew+0xa8>
        mem = 1;
 800906e:	2301      	movs	r3, #1
 8009070:	61bb      	str	r3, [r7, #24]
 8009072:	e010      	b.n	8009096 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10c      	bne.n	8009096 <osThreadNew+0xca>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d108      	bne.n	8009096 <osThreadNew+0xca>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d104      	bne.n	8009096 <osThreadNew+0xca>
          mem = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	61bb      	str	r3, [r7, #24]
 8009090:	e001      	b.n	8009096 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009092:	2300      	movs	r3, #0
 8009094:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d110      	bne.n	80090be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090a4:	9202      	str	r2, [sp, #8]
 80090a6:	9301      	str	r3, [sp, #4]
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	6a3a      	ldr	r2, [r7, #32]
 80090b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f001 fd68 	bl	800ab88 <xTaskCreateStatic>
 80090b8:	4603      	mov	r3, r0
 80090ba:	613b      	str	r3, [r7, #16]
 80090bc:	e013      	b.n	80090e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d110      	bne.n	80090e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	f107 0310 	add.w	r3, r7, #16
 80090cc:	9301      	str	r3, [sp, #4]
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f001 fdb3 	bl	800ac42 <xTaskCreate>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d001      	beq.n	80090e6 <osThreadNew+0x11a>
            hTask = NULL;
 80090e2:	2300      	movs	r3, #0
 80090e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80090e6:	693b      	ldr	r3, [r7, #16]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3728      	adds	r7, #40	; 0x28
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090f8:	f3ef 8305 	mrs	r3, IPSR
 80090fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80090fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009100:	2b00      	cmp	r3, #0
 8009102:	d003      	beq.n	800910c <osDelay+0x1c>
    stat = osErrorISR;
 8009104:	f06f 0305 	mvn.w	r3, #5
 8009108:	60fb      	str	r3, [r7, #12]
 800910a:	e007      	b.n	800911c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800910c:	2300      	movs	r3, #0
 800910e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f001 feee 	bl	800aef8 <vTaskDelay>
    }
  }

  return (stat);
 800911c:	68fb      	ldr	r3, [r7, #12]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009126:	b580      	push	{r7, lr}
 8009128:	b088      	sub	sp, #32
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800912e:	2300      	movs	r3, #0
 8009130:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009132:	f3ef 8305 	mrs	r3, IPSR
 8009136:	60bb      	str	r3, [r7, #8]
  return(result);
 8009138:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800913a:	2b00      	cmp	r3, #0
 800913c:	d174      	bne.n	8009228 <osMutexNew+0x102>
    if (attr != NULL) {
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d003      	beq.n	800914c <osMutexNew+0x26>
      type = attr->attr_bits;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	61bb      	str	r3, [r7, #24]
 800914a:	e001      	b.n	8009150 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	2b00      	cmp	r3, #0
 8009158:	d002      	beq.n	8009160 <osMutexNew+0x3a>
      rmtx = 1U;
 800915a:	2301      	movs	r3, #1
 800915c:	617b      	str	r3, [r7, #20]
 800915e:	e001      	b.n	8009164 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009160:	2300      	movs	r3, #0
 8009162:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	f003 0308 	and.w	r3, r3, #8
 800916a:	2b00      	cmp	r3, #0
 800916c:	d15c      	bne.n	8009228 <osMutexNew+0x102>
      mem = -1;
 800916e:	f04f 33ff 	mov.w	r3, #4294967295
 8009172:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d015      	beq.n	80091a6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d006      	beq.n	8009190 <osMutexNew+0x6a>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	2b4f      	cmp	r3, #79	; 0x4f
 8009188:	d902      	bls.n	8009190 <osMutexNew+0x6a>
          mem = 1;
 800918a:	2301      	movs	r3, #1
 800918c:	613b      	str	r3, [r7, #16]
 800918e:	e00c      	b.n	80091aa <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d108      	bne.n	80091aa <osMutexNew+0x84>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d104      	bne.n	80091aa <osMutexNew+0x84>
            mem = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	613b      	str	r3, [r7, #16]
 80091a4:	e001      	b.n	80091aa <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80091a6:	2300      	movs	r3, #0
 80091a8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d112      	bne.n	80091d6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d007      	beq.n	80091c6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	4619      	mov	r1, r3
 80091bc:	2004      	movs	r0, #4
 80091be:	f000 ff52 	bl	800a066 <xQueueCreateMutexStatic>
 80091c2:	61f8      	str	r0, [r7, #28]
 80091c4:	e016      	b.n	80091f4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	4619      	mov	r1, r3
 80091cc:	2001      	movs	r0, #1
 80091ce:	f000 ff4a 	bl	800a066 <xQueueCreateMutexStatic>
 80091d2:	61f8      	str	r0, [r7, #28]
 80091d4:	e00e      	b.n	80091f4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10b      	bne.n	80091f4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d004      	beq.n	80091ec <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80091e2:	2004      	movs	r0, #4
 80091e4:	f000 ff27 	bl	800a036 <xQueueCreateMutex>
 80091e8:	61f8      	str	r0, [r7, #28]
 80091ea:	e003      	b.n	80091f4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80091ec:	2001      	movs	r0, #1
 80091ee:	f000 ff22 	bl	800a036 <xQueueCreateMutex>
 80091f2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00c      	beq.n	8009214 <osMutexNew+0xee>
        if (attr != NULL) {
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d003      	beq.n	8009208 <osMutexNew+0xe2>
          name = attr->name;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	e001      	b.n	800920c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009208:	2300      	movs	r3, #0
 800920a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800920c:	68f9      	ldr	r1, [r7, #12]
 800920e:	69f8      	ldr	r0, [r7, #28]
 8009210:	f001 fc5c 	bl	800aacc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d006      	beq.n	8009228 <osMutexNew+0x102>
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d003      	beq.n	8009228 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	f043 0301 	orr.w	r3, r3, #1
 8009226:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009228:	69fb      	ldr	r3, [r7, #28]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3720      	adds	r7, #32
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009232:	b580      	push	{r7, lr}
 8009234:	b086      	sub	sp, #24
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f023 0301 	bic.w	r3, r3, #1
 8009242:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800924c:	2300      	movs	r3, #0
 800924e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009250:	f3ef 8305 	mrs	r3, IPSR
 8009254:	60bb      	str	r3, [r7, #8]
  return(result);
 8009256:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800925c:	f06f 0305 	mvn.w	r3, #5
 8009260:	617b      	str	r3, [r7, #20]
 8009262:	e02c      	b.n	80092be <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d103      	bne.n	8009272 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800926a:	f06f 0303 	mvn.w	r3, #3
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	e025      	b.n	80092be <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d011      	beq.n	800929c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6938      	ldr	r0, [r7, #16]
 800927c:	f000 ff42 	bl	800a104 <xQueueTakeMutexRecursive>
 8009280:	4603      	mov	r3, r0
 8009282:	2b01      	cmp	r3, #1
 8009284:	d01b      	beq.n	80092be <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d003      	beq.n	8009294 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800928c:	f06f 0301 	mvn.w	r3, #1
 8009290:	617b      	str	r3, [r7, #20]
 8009292:	e014      	b.n	80092be <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009294:	f06f 0302 	mvn.w	r3, #2
 8009298:	617b      	str	r3, [r7, #20]
 800929a:	e010      	b.n	80092be <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800929c:	6839      	ldr	r1, [r7, #0]
 800929e:	6938      	ldr	r0, [r7, #16]
 80092a0:	f001 f9e0 	bl	800a664 <xQueueSemaphoreTake>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d009      	beq.n	80092be <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d003      	beq.n	80092b8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80092b0:	f06f 0301 	mvn.w	r3, #1
 80092b4:	617b      	str	r3, [r7, #20]
 80092b6:	e002      	b.n	80092be <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80092b8:	f06f 0302 	mvn.w	r3, #2
 80092bc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80092be:	697b      	ldr	r3, [r7, #20]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f023 0301 	bic.w	r3, r3, #1
 80092d6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092e4:	f3ef 8305 	mrs	r3, IPSR
 80092e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80092ea:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d003      	beq.n	80092f8 <osMutexRelease+0x30>
    stat = osErrorISR;
 80092f0:	f06f 0305 	mvn.w	r3, #5
 80092f4:	617b      	str	r3, [r7, #20]
 80092f6:	e01f      	b.n	8009338 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d103      	bne.n	8009306 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80092fe:	f06f 0303 	mvn.w	r3, #3
 8009302:	617b      	str	r3, [r7, #20]
 8009304:	e018      	b.n	8009338 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d009      	beq.n	8009320 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800930c:	6938      	ldr	r0, [r7, #16]
 800930e:	f000 fec5 	bl	800a09c <xQueueGiveMutexRecursive>
 8009312:	4603      	mov	r3, r0
 8009314:	2b01      	cmp	r3, #1
 8009316:	d00f      	beq.n	8009338 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009318:	f06f 0302 	mvn.w	r3, #2
 800931c:	617b      	str	r3, [r7, #20]
 800931e:	e00b      	b.n	8009338 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009320:	2300      	movs	r3, #0
 8009322:	2200      	movs	r2, #0
 8009324:	2100      	movs	r1, #0
 8009326:	6938      	ldr	r0, [r7, #16]
 8009328:	f000 ff22 	bl	800a170 <xQueueGenericSend>
 800932c:	4603      	mov	r3, r0
 800932e:	2b01      	cmp	r3, #1
 8009330:	d002      	beq.n	8009338 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009332:	f06f 0302 	mvn.w	r3, #2
 8009336:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009338:	697b      	ldr	r3, [r7, #20]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3718      	adds	r7, #24
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
	...

08009344 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	4a07      	ldr	r2, [pc, #28]	; (8009370 <vApplicationGetIdleTaskMemory+0x2c>)
 8009354:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	4a06      	ldr	r2, [pc, #24]	; (8009374 <vApplicationGetIdleTaskMemory+0x30>)
 800935a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2280      	movs	r2, #128	; 0x80
 8009360:	601a      	str	r2, [r3, #0]
}
 8009362:	bf00      	nop
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	24000540 	.word	0x24000540
 8009374:	240005e8 	.word	0x240005e8

08009378 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	4a07      	ldr	r2, [pc, #28]	; (80093a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009388:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	4a06      	ldr	r2, [pc, #24]	; (80093a8 <vApplicationGetTimerTaskMemory+0x30>)
 800938e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009396:	601a      	str	r2, [r3, #0]
}
 8009398:	bf00      	nop
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr
 80093a4:	240007e8 	.word	0x240007e8
 80093a8:	24000890 	.word	0x24000890

080093ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b08a      	sub	sp, #40	; 0x28
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80093b4:	2300      	movs	r3, #0
 80093b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80093b8:	f001 fe42 	bl	800b040 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80093bc:	4b5b      	ldr	r3, [pc, #364]	; (800952c <pvPortMalloc+0x180>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d101      	bne.n	80093c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80093c4:	f000 f920 	bl	8009608 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80093c8:	4b59      	ldr	r3, [pc, #356]	; (8009530 <pvPortMalloc+0x184>)
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4013      	ands	r3, r2
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f040 8093 	bne.w	80094fc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d01d      	beq.n	8009418 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80093dc:	2208      	movs	r2, #8
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4413      	add	r3, r2
 80093e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f003 0307 	and.w	r3, r3, #7
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d014      	beq.n	8009418 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f023 0307 	bic.w	r3, r3, #7
 80093f4:	3308      	adds	r3, #8
 80093f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f003 0307 	and.w	r3, r3, #7
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00a      	beq.n	8009418 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009414:	bf00      	nop
 8009416:	e7fe      	b.n	8009416 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d06e      	beq.n	80094fc <pvPortMalloc+0x150>
 800941e:	4b45      	ldr	r3, [pc, #276]	; (8009534 <pvPortMalloc+0x188>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	429a      	cmp	r2, r3
 8009426:	d869      	bhi.n	80094fc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009428:	4b43      	ldr	r3, [pc, #268]	; (8009538 <pvPortMalloc+0x18c>)
 800942a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800942c:	4b42      	ldr	r3, [pc, #264]	; (8009538 <pvPortMalloc+0x18c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009432:	e004      	b.n	800943e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009436:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800943e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	429a      	cmp	r2, r3
 8009446:	d903      	bls.n	8009450 <pvPortMalloc+0xa4>
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1f1      	bne.n	8009434 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009450:	4b36      	ldr	r3, [pc, #216]	; (800952c <pvPortMalloc+0x180>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009456:	429a      	cmp	r2, r3
 8009458:	d050      	beq.n	80094fc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2208      	movs	r2, #8
 8009460:	4413      	add	r3, r2
 8009462:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	6a3b      	ldr	r3, [r7, #32]
 800946a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800946c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	1ad2      	subs	r2, r2, r3
 8009474:	2308      	movs	r3, #8
 8009476:	005b      	lsls	r3, r3, #1
 8009478:	429a      	cmp	r2, r3
 800947a:	d91f      	bls.n	80094bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800947c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4413      	add	r3, r2
 8009482:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	f003 0307 	and.w	r3, r3, #7
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00a      	beq.n	80094a4 <pvPortMalloc+0xf8>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	613b      	str	r3, [r7, #16]
}
 80094a0:	bf00      	nop
 80094a2:	e7fe      	b.n	80094a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	685a      	ldr	r2, [r3, #4]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	1ad2      	subs	r2, r2, r3
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094b6:	69b8      	ldr	r0, [r7, #24]
 80094b8:	f000 f908 	bl	80096cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094bc:	4b1d      	ldr	r3, [pc, #116]	; (8009534 <pvPortMalloc+0x188>)
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	4a1b      	ldr	r2, [pc, #108]	; (8009534 <pvPortMalloc+0x188>)
 80094c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094ca:	4b1a      	ldr	r3, [pc, #104]	; (8009534 <pvPortMalloc+0x188>)
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	4b1b      	ldr	r3, [pc, #108]	; (800953c <pvPortMalloc+0x190>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d203      	bcs.n	80094de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80094d6:	4b17      	ldr	r3, [pc, #92]	; (8009534 <pvPortMalloc+0x188>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a18      	ldr	r2, [pc, #96]	; (800953c <pvPortMalloc+0x190>)
 80094dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	4b13      	ldr	r3, [pc, #76]	; (8009530 <pvPortMalloc+0x184>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	431a      	orrs	r2, r3
 80094e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	2200      	movs	r2, #0
 80094f0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80094f2:	4b13      	ldr	r3, [pc, #76]	; (8009540 <pvPortMalloc+0x194>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3301      	adds	r3, #1
 80094f8:	4a11      	ldr	r2, [pc, #68]	; (8009540 <pvPortMalloc+0x194>)
 80094fa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80094fc:	f001 fdae 	bl	800b05c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	f003 0307 	and.w	r3, r3, #7
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00a      	beq.n	8009520 <pvPortMalloc+0x174>
	__asm volatile
 800950a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	60fb      	str	r3, [r7, #12]
}
 800951c:	bf00      	nop
 800951e:	e7fe      	b.n	800951e <pvPortMalloc+0x172>
	return pvReturn;
 8009520:	69fb      	ldr	r3, [r7, #28]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3728      	adds	r7, #40	; 0x28
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	24004898 	.word	0x24004898
 8009530:	240048ac 	.word	0x240048ac
 8009534:	2400489c 	.word	0x2400489c
 8009538:	24004890 	.word	0x24004890
 800953c:	240048a0 	.word	0x240048a0
 8009540:	240048a4 	.word	0x240048a4

08009544 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d04d      	beq.n	80095f2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009556:	2308      	movs	r3, #8
 8009558:	425b      	negs	r3, r3
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	4413      	add	r3, r2
 800955e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	4b24      	ldr	r3, [pc, #144]	; (80095fc <vPortFree+0xb8>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4013      	ands	r3, r2
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10a      	bne.n	8009588 <vPortFree+0x44>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	60fb      	str	r3, [r7, #12]
}
 8009584:	bf00      	nop
 8009586:	e7fe      	b.n	8009586 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00a      	beq.n	80095a6 <vPortFree+0x62>
	__asm volatile
 8009590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	60bb      	str	r3, [r7, #8]
}
 80095a2:	bf00      	nop
 80095a4:	e7fe      	b.n	80095a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	4b14      	ldr	r3, [pc, #80]	; (80095fc <vPortFree+0xb8>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4013      	ands	r3, r2
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d01e      	beq.n	80095f2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d11a      	bne.n	80095f2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	4b0e      	ldr	r3, [pc, #56]	; (80095fc <vPortFree+0xb8>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	43db      	mvns	r3, r3
 80095c6:	401a      	ands	r2, r3
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80095cc:	f001 fd38 	bl	800b040 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <vPortFree+0xbc>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4413      	add	r3, r2
 80095da:	4a09      	ldr	r2, [pc, #36]	; (8009600 <vPortFree+0xbc>)
 80095dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80095de:	6938      	ldr	r0, [r7, #16]
 80095e0:	f000 f874 	bl	80096cc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80095e4:	4b07      	ldr	r3, [pc, #28]	; (8009604 <vPortFree+0xc0>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3301      	adds	r3, #1
 80095ea:	4a06      	ldr	r2, [pc, #24]	; (8009604 <vPortFree+0xc0>)
 80095ec:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80095ee:	f001 fd35 	bl	800b05c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80095f2:	bf00      	nop
 80095f4:	3718      	adds	r7, #24
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	240048ac 	.word	0x240048ac
 8009600:	2400489c 	.word	0x2400489c
 8009604:	240048a8 	.word	0x240048a8

08009608 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800960e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009612:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009614:	4b27      	ldr	r3, [pc, #156]	; (80096b4 <prvHeapInit+0xac>)
 8009616:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f003 0307 	and.w	r3, r3, #7
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00c      	beq.n	800963c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	3307      	adds	r3, #7
 8009626:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f023 0307 	bic.w	r3, r3, #7
 800962e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	4a1f      	ldr	r2, [pc, #124]	; (80096b4 <prvHeapInit+0xac>)
 8009638:	4413      	add	r3, r2
 800963a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009640:	4a1d      	ldr	r2, [pc, #116]	; (80096b8 <prvHeapInit+0xb0>)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009646:	4b1c      	ldr	r3, [pc, #112]	; (80096b8 <prvHeapInit+0xb0>)
 8009648:	2200      	movs	r2, #0
 800964a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	4413      	add	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009654:	2208      	movs	r2, #8
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	1a9b      	subs	r3, r3, r2
 800965a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f023 0307 	bic.w	r3, r3, #7
 8009662:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	4a15      	ldr	r2, [pc, #84]	; (80096bc <prvHeapInit+0xb4>)
 8009668:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800966a:	4b14      	ldr	r3, [pc, #80]	; (80096bc <prvHeapInit+0xb4>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2200      	movs	r2, #0
 8009670:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009672:	4b12      	ldr	r3, [pc, #72]	; (80096bc <prvHeapInit+0xb4>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2200      	movs	r2, #0
 8009678:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	1ad2      	subs	r2, r2, r3
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009688:	4b0c      	ldr	r3, [pc, #48]	; (80096bc <prvHeapInit+0xb4>)
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	4a0a      	ldr	r2, [pc, #40]	; (80096c0 <prvHeapInit+0xb8>)
 8009696:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	4a09      	ldr	r2, [pc, #36]	; (80096c4 <prvHeapInit+0xbc>)
 800969e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80096a0:	4b09      	ldr	r3, [pc, #36]	; (80096c8 <prvHeapInit+0xc0>)
 80096a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80096a6:	601a      	str	r2, [r3, #0]
}
 80096a8:	bf00      	nop
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	24000c90 	.word	0x24000c90
 80096b8:	24004890 	.word	0x24004890
 80096bc:	24004898 	.word	0x24004898
 80096c0:	240048a0 	.word	0x240048a0
 80096c4:	2400489c 	.word	0x2400489c
 80096c8:	240048ac 	.word	0x240048ac

080096cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80096d4:	4b28      	ldr	r3, [pc, #160]	; (8009778 <prvInsertBlockIntoFreeList+0xac>)
 80096d6:	60fb      	str	r3, [r7, #12]
 80096d8:	e002      	b.n	80096e0 <prvInsertBlockIntoFreeList+0x14>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d8f7      	bhi.n	80096da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	4413      	add	r3, r2
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d108      	bne.n	800970e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	441a      	add	r2, r3
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	441a      	add	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	429a      	cmp	r2, r3
 8009720:	d118      	bne.n	8009754 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	4b15      	ldr	r3, [pc, #84]	; (800977c <prvInsertBlockIntoFreeList+0xb0>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	429a      	cmp	r2, r3
 800972c:	d00d      	beq.n	800974a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	441a      	add	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	601a      	str	r2, [r3, #0]
 8009748:	e008      	b.n	800975c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800974a:	4b0c      	ldr	r3, [pc, #48]	; (800977c <prvInsertBlockIntoFreeList+0xb0>)
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	601a      	str	r2, [r3, #0]
 8009752:	e003      	b.n	800975c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	429a      	cmp	r2, r3
 8009762:	d002      	beq.n	800976a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800976a:	bf00      	nop
 800976c:	3714      	adds	r7, #20
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	24004890 	.word	0x24004890
 800977c:	24004898 	.word	0x24004898

08009780 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f103 0208 	add.w	r2, r3, #8
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f04f 32ff 	mov.w	r2, #4294967295
 8009798:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f103 0208 	add.w	r2, r3, #8
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f103 0208 	add.w	r2, r3, #8
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80097b4:	bf00      	nop
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80097ce:	bf00      	nop
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097da:	b480      	push	{r7}
 80097dc:	b085      	sub	sp, #20
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	689a      	ldr	r2, [r3, #8]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	1c5a      	adds	r2, r3, #1
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	601a      	str	r2, [r3, #0]
}
 8009816:	bf00      	nop
 8009818:	3714      	adds	r7, #20
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009822:	b480      	push	{r7}
 8009824:	b085      	sub	sp, #20
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009838:	d103      	bne.n	8009842 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	60fb      	str	r3, [r7, #12]
 8009840:	e00c      	b.n	800985c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	3308      	adds	r3, #8
 8009846:	60fb      	str	r3, [r7, #12]
 8009848:	e002      	b.n	8009850 <vListInsert+0x2e>
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	60fb      	str	r3, [r7, #12]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	429a      	cmp	r2, r3
 800985a:	d2f6      	bcs.n	800984a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	685a      	ldr	r2, [r3, #4]
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	683a      	ldr	r2, [r7, #0]
 8009876:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	1c5a      	adds	r2, r3, #1
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	601a      	str	r2, [r3, #0]
}
 8009888:	bf00      	nop
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	6892      	ldr	r2, [r2, #8]
 80098aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	6852      	ldr	r2, [r2, #4]
 80098b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d103      	bne.n	80098c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	689a      	ldr	r2, [r3, #8]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	1e5a      	subs	r2, r3, #1
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3714      	adds	r7, #20
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3b04      	subs	r3, #4
 80098f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3b04      	subs	r3, #4
 8009906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	f023 0201 	bic.w	r2, r3, #1
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	3b04      	subs	r3, #4
 8009916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009918:	4a0c      	ldr	r2, [pc, #48]	; (800994c <pxPortInitialiseStack+0x64>)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3b14      	subs	r3, #20
 8009922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3b04      	subs	r3, #4
 800992e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f06f 0202 	mvn.w	r2, #2
 8009936:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3b20      	subs	r3, #32
 800993c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800993e:	68fb      	ldr	r3, [r7, #12]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3714      	adds	r7, #20
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	08009951 	.word	0x08009951

08009950 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800995a:	4b12      	ldr	r3, [pc, #72]	; (80099a4 <prvTaskExitError+0x54>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009962:	d00a      	beq.n	800997a <prvTaskExitError+0x2a>
	__asm volatile
 8009964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	60fb      	str	r3, [r7, #12]
}
 8009976:	bf00      	nop
 8009978:	e7fe      	b.n	8009978 <prvTaskExitError+0x28>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	60bb      	str	r3, [r7, #8]
}
 800998c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800998e:	bf00      	nop
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d0fc      	beq.n	8009990 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009996:	bf00      	nop
 8009998:	bf00      	nop
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	24000010 	.word	0x24000010
	...

080099b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099b0:	4b07      	ldr	r3, [pc, #28]	; (80099d0 <pxCurrentTCBConst2>)
 80099b2:	6819      	ldr	r1, [r3, #0]
 80099b4:	6808      	ldr	r0, [r1, #0]
 80099b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ba:	f380 8809 	msr	PSP, r0
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f04f 0000 	mov.w	r0, #0
 80099c6:	f380 8811 	msr	BASEPRI, r0
 80099ca:	4770      	bx	lr
 80099cc:	f3af 8000 	nop.w

080099d0 <pxCurrentTCBConst2>:
 80099d0:	240048f8 	.word	0x240048f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099d4:	bf00      	nop
 80099d6:	bf00      	nop

080099d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099d8:	4808      	ldr	r0, [pc, #32]	; (80099fc <prvPortStartFirstTask+0x24>)
 80099da:	6800      	ldr	r0, [r0, #0]
 80099dc:	6800      	ldr	r0, [r0, #0]
 80099de:	f380 8808 	msr	MSP, r0
 80099e2:	f04f 0000 	mov.w	r0, #0
 80099e6:	f380 8814 	msr	CONTROL, r0
 80099ea:	b662      	cpsie	i
 80099ec:	b661      	cpsie	f
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	df00      	svc	0
 80099f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099fa:	bf00      	nop
 80099fc:	e000ed08 	.word	0xe000ed08

08009a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b086      	sub	sp, #24
 8009a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a06:	4b46      	ldr	r3, [pc, #280]	; (8009b20 <xPortStartScheduler+0x120>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a46      	ldr	r2, [pc, #280]	; (8009b24 <xPortStartScheduler+0x124>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d10a      	bne.n	8009a26 <xPortStartScheduler+0x26>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	613b      	str	r3, [r7, #16]
}
 8009a22:	bf00      	nop
 8009a24:	e7fe      	b.n	8009a24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a26:	4b3e      	ldr	r3, [pc, #248]	; (8009b20 <xPortStartScheduler+0x120>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a3f      	ldr	r2, [pc, #252]	; (8009b28 <xPortStartScheduler+0x128>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d10a      	bne.n	8009a46 <xPortStartScheduler+0x46>
	__asm volatile
 8009a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	60fb      	str	r3, [r7, #12]
}
 8009a42:	bf00      	nop
 8009a44:	e7fe      	b.n	8009a44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a46:	4b39      	ldr	r3, [pc, #228]	; (8009b2c <xPortStartScheduler+0x12c>)
 8009a48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	22ff      	movs	r2, #255	; 0xff
 8009a56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	4b31      	ldr	r3, [pc, #196]	; (8009b30 <xPortStartScheduler+0x130>)
 8009a6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a6e:	4b31      	ldr	r3, [pc, #196]	; (8009b34 <xPortStartScheduler+0x134>)
 8009a70:	2207      	movs	r2, #7
 8009a72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a74:	e009      	b.n	8009a8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a76:	4b2f      	ldr	r3, [pc, #188]	; (8009b34 <xPortStartScheduler+0x134>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	4a2d      	ldr	r2, [pc, #180]	; (8009b34 <xPortStartScheduler+0x134>)
 8009a7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a80:	78fb      	ldrb	r3, [r7, #3]
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a92:	2b80      	cmp	r3, #128	; 0x80
 8009a94:	d0ef      	beq.n	8009a76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a96:	4b27      	ldr	r3, [pc, #156]	; (8009b34 <xPortStartScheduler+0x134>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f1c3 0307 	rsb	r3, r3, #7
 8009a9e:	2b04      	cmp	r3, #4
 8009aa0:	d00a      	beq.n	8009ab8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa6:	f383 8811 	msr	BASEPRI, r3
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	60bb      	str	r3, [r7, #8]
}
 8009ab4:	bf00      	nop
 8009ab6:	e7fe      	b.n	8009ab6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ab8:	4b1e      	ldr	r3, [pc, #120]	; (8009b34 <xPortStartScheduler+0x134>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	021b      	lsls	r3, r3, #8
 8009abe:	4a1d      	ldr	r2, [pc, #116]	; (8009b34 <xPortStartScheduler+0x134>)
 8009ac0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ac2:	4b1c      	ldr	r3, [pc, #112]	; (8009b34 <xPortStartScheduler+0x134>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009aca:	4a1a      	ldr	r2, [pc, #104]	; (8009b34 <xPortStartScheduler+0x134>)
 8009acc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ad6:	4b18      	ldr	r3, [pc, #96]	; (8009b38 <xPortStartScheduler+0x138>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a17      	ldr	r2, [pc, #92]	; (8009b38 <xPortStartScheduler+0x138>)
 8009adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ae0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ae2:	4b15      	ldr	r3, [pc, #84]	; (8009b38 <xPortStartScheduler+0x138>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a14      	ldr	r2, [pc, #80]	; (8009b38 <xPortStartScheduler+0x138>)
 8009ae8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009aec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009aee:	f000 f8dd 	bl	8009cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009af2:	4b12      	ldr	r3, [pc, #72]	; (8009b3c <xPortStartScheduler+0x13c>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009af8:	f000 f8fc 	bl	8009cf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009afc:	4b10      	ldr	r3, [pc, #64]	; (8009b40 <xPortStartScheduler+0x140>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a0f      	ldr	r2, [pc, #60]	; (8009b40 <xPortStartScheduler+0x140>)
 8009b02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b08:	f7ff ff66 	bl	80099d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b0c:	f001 fc0e 	bl	800b32c <vTaskSwitchContext>
	prvTaskExitError();
 8009b10:	f7ff ff1e 	bl	8009950 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	e000ed00 	.word	0xe000ed00
 8009b24:	410fc271 	.word	0x410fc271
 8009b28:	410fc270 	.word	0x410fc270
 8009b2c:	e000e400 	.word	0xe000e400
 8009b30:	240048b0 	.word	0x240048b0
 8009b34:	240048b4 	.word	0x240048b4
 8009b38:	e000ed20 	.word	0xe000ed20
 8009b3c:	24000010 	.word	0x24000010
 8009b40:	e000ef34 	.word	0xe000ef34

08009b44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
	__asm volatile
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	607b      	str	r3, [r7, #4]
}
 8009b5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b5e:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <vPortEnterCritical+0x58>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	3301      	adds	r3, #1
 8009b64:	4a0d      	ldr	r2, [pc, #52]	; (8009b9c <vPortEnterCritical+0x58>)
 8009b66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b68:	4b0c      	ldr	r3, [pc, #48]	; (8009b9c <vPortEnterCritical+0x58>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d10f      	bne.n	8009b90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b70:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <vPortEnterCritical+0x5c>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00a      	beq.n	8009b90 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	603b      	str	r3, [r7, #0]
}
 8009b8c:	bf00      	nop
 8009b8e:	e7fe      	b.n	8009b8e <vPortEnterCritical+0x4a>
	}
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	24000010 	.word	0x24000010
 8009ba0:	e000ed04 	.word	0xe000ed04

08009ba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009baa:	4b12      	ldr	r3, [pc, #72]	; (8009bf4 <vPortExitCritical+0x50>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10a      	bne.n	8009bc8 <vPortExitCritical+0x24>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	607b      	str	r3, [r7, #4]
}
 8009bc4:	bf00      	nop
 8009bc6:	e7fe      	b.n	8009bc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009bc8:	4b0a      	ldr	r3, [pc, #40]	; (8009bf4 <vPortExitCritical+0x50>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	4a09      	ldr	r2, [pc, #36]	; (8009bf4 <vPortExitCritical+0x50>)
 8009bd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009bd2:	4b08      	ldr	r3, [pc, #32]	; (8009bf4 <vPortExitCritical+0x50>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d105      	bne.n	8009be6 <vPortExitCritical+0x42>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009be4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009be6:	bf00      	nop
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	24000010 	.word	0x24000010
	...

08009c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c00:	f3ef 8009 	mrs	r0, PSP
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	4b15      	ldr	r3, [pc, #84]	; (8009c60 <pxCurrentTCBConst>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	f01e 0f10 	tst.w	lr, #16
 8009c10:	bf08      	it	eq
 8009c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1a:	6010      	str	r0, [r2, #0]
 8009c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c24:	f380 8811 	msr	BASEPRI, r0
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f001 fb7c 	bl	800b32c <vTaskSwitchContext>
 8009c34:	f04f 0000 	mov.w	r0, #0
 8009c38:	f380 8811 	msr	BASEPRI, r0
 8009c3c:	bc09      	pop	{r0, r3}
 8009c3e:	6819      	ldr	r1, [r3, #0]
 8009c40:	6808      	ldr	r0, [r1, #0]
 8009c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c46:	f01e 0f10 	tst.w	lr, #16
 8009c4a:	bf08      	it	eq
 8009c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c50:	f380 8809 	msr	PSP, r0
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	f3af 8000 	nop.w

08009c60 <pxCurrentTCBConst>:
 8009c60:	240048f8 	.word	0x240048f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c64:	bf00      	nop
 8009c66:	bf00      	nop

08009c68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	607b      	str	r3, [r7, #4]
}
 8009c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c82:	f001 fa99 	bl	800b1b8 <xTaskIncrementTick>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d003      	beq.n	8009c94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c8c:	4b06      	ldr	r3, [pc, #24]	; (8009ca8 <xPortSysTickHandler+0x40>)
 8009c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	2300      	movs	r3, #0
 8009c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	f383 8811 	msr	BASEPRI, r3
}
 8009c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ca0:	bf00      	nop
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	e000ed04 	.word	0xe000ed04

08009cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009cac:	b480      	push	{r7}
 8009cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009cb0:	4b0b      	ldr	r3, [pc, #44]	; (8009ce0 <vPortSetupTimerInterrupt+0x34>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009cb6:	4b0b      	ldr	r3, [pc, #44]	; (8009ce4 <vPortSetupTimerInterrupt+0x38>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009cbc:	4b0a      	ldr	r3, [pc, #40]	; (8009ce8 <vPortSetupTimerInterrupt+0x3c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a0a      	ldr	r2, [pc, #40]	; (8009cec <vPortSetupTimerInterrupt+0x40>)
 8009cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc6:	099b      	lsrs	r3, r3, #6
 8009cc8:	4a09      	ldr	r2, [pc, #36]	; (8009cf0 <vPortSetupTimerInterrupt+0x44>)
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cce:	4b04      	ldr	r3, [pc, #16]	; (8009ce0 <vPortSetupTimerInterrupt+0x34>)
 8009cd0:	2207      	movs	r2, #7
 8009cd2:	601a      	str	r2, [r3, #0]
}
 8009cd4:	bf00      	nop
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	e000e010 	.word	0xe000e010
 8009ce4:	e000e018 	.word	0xe000e018
 8009ce8:	24000000 	.word	0x24000000
 8009cec:	10624dd3 	.word	0x10624dd3
 8009cf0:	e000e014 	.word	0xe000e014

08009cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d04 <vPortEnableVFP+0x10>
 8009cf8:	6801      	ldr	r1, [r0, #0]
 8009cfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cfe:	6001      	str	r1, [r0, #0]
 8009d00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d02:	bf00      	nop
 8009d04:	e000ed88 	.word	0xe000ed88

08009d08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d0e:	f3ef 8305 	mrs	r3, IPSR
 8009d12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b0f      	cmp	r3, #15
 8009d18:	d914      	bls.n	8009d44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d1a:	4a17      	ldr	r2, [pc, #92]	; (8009d78 <vPortValidateInterruptPriority+0x70>)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	4413      	add	r3, r2
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d24:	4b15      	ldr	r3, [pc, #84]	; (8009d7c <vPortValidateInterruptPriority+0x74>)
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	7afa      	ldrb	r2, [r7, #11]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d20a      	bcs.n	8009d44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d32:	f383 8811 	msr	BASEPRI, r3
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	607b      	str	r3, [r7, #4]
}
 8009d40:	bf00      	nop
 8009d42:	e7fe      	b.n	8009d42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d44:	4b0e      	ldr	r3, [pc, #56]	; (8009d80 <vPortValidateInterruptPriority+0x78>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d4c:	4b0d      	ldr	r3, [pc, #52]	; (8009d84 <vPortValidateInterruptPriority+0x7c>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d90a      	bls.n	8009d6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	603b      	str	r3, [r7, #0]
}
 8009d66:	bf00      	nop
 8009d68:	e7fe      	b.n	8009d68 <vPortValidateInterruptPriority+0x60>
	}
 8009d6a:	bf00      	nop
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	e000e3f0 	.word	0xe000e3f0
 8009d7c:	240048b0 	.word	0x240048b0
 8009d80:	e000ed0c 	.word	0xe000ed0c
 8009d84:	240048b4 	.word	0x240048b4

08009d88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10a      	bne.n	8009db2 <xQueueGenericReset+0x2a>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	60bb      	str	r3, [r7, #8]
}
 8009dae:	bf00      	nop
 8009db0:	e7fe      	b.n	8009db0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009db2:	f7ff fec7 	bl	8009b44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dbe:	68f9      	ldr	r1, [r7, #12]
 8009dc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009dc2:	fb01 f303 	mul.w	r3, r1, r3
 8009dc6:	441a      	add	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009de2:	3b01      	subs	r3, #1
 8009de4:	68f9      	ldr	r1, [r7, #12]
 8009de6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009de8:	fb01 f303 	mul.w	r3, r1, r3
 8009dec:	441a      	add	r2, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	22ff      	movs	r2, #255	; 0xff
 8009df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	22ff      	movs	r2, #255	; 0xff
 8009dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d114      	bne.n	8009e32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d01a      	beq.n	8009e46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	3310      	adds	r3, #16
 8009e14:	4618      	mov	r0, r3
 8009e16:	f001 fb3d 	bl	800b494 <xTaskRemoveFromEventList>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d012      	beq.n	8009e46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e20:	4b0c      	ldr	r3, [pc, #48]	; (8009e54 <xQueueGenericReset+0xcc>)
 8009e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e26:	601a      	str	r2, [r3, #0]
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	e009      	b.n	8009e46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	3310      	adds	r3, #16
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7ff fca2 	bl	8009780 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	3324      	adds	r3, #36	; 0x24
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7ff fc9d 	bl	8009780 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009e46:	f7ff fead 	bl	8009ba4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009e4a:	2301      	movs	r3, #1
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	e000ed04 	.word	0xe000ed04

08009e58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b08e      	sub	sp, #56	; 0x38
 8009e5c:	af02      	add	r7, sp, #8
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10a      	bne.n	8009e82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e70:	f383 8811 	msr	BASEPRI, r3
 8009e74:	f3bf 8f6f 	isb	sy
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e7e:	bf00      	nop
 8009e80:	e7fe      	b.n	8009e80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10a      	bne.n	8009e9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e9a:	bf00      	nop
 8009e9c:	e7fe      	b.n	8009e9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <xQueueGenericCreateStatic+0x52>
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <xQueueGenericCreateStatic+0x56>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e000      	b.n	8009eb0 <xQueueGenericCreateStatic+0x58>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10a      	bne.n	8009eca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	623b      	str	r3, [r7, #32]
}
 8009ec6:	bf00      	nop
 8009ec8:	e7fe      	b.n	8009ec8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d102      	bne.n	8009ed6 <xQueueGenericCreateStatic+0x7e>
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d101      	bne.n	8009eda <xQueueGenericCreateStatic+0x82>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e000      	b.n	8009edc <xQueueGenericCreateStatic+0x84>
 8009eda:	2300      	movs	r3, #0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10a      	bne.n	8009ef6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	61fb      	str	r3, [r7, #28]
}
 8009ef2:	bf00      	nop
 8009ef4:	e7fe      	b.n	8009ef4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009ef6:	2350      	movs	r3, #80	; 0x50
 8009ef8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2b50      	cmp	r3, #80	; 0x50
 8009efe:	d00a      	beq.n	8009f16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	61bb      	str	r3, [r7, #24]
}
 8009f12:	bf00      	nop
 8009f14:	e7fe      	b.n	8009f14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00d      	beq.n	8009f3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f24:	2201      	movs	r2, #1
 8009f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	4613      	mov	r3, r2
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	68b9      	ldr	r1, [r7, #8]
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f000 f83f 	bl	8009fbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3730      	adds	r7, #48	; 0x30
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b08a      	sub	sp, #40	; 0x28
 8009f4c:	af02      	add	r7, sp, #8
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	4613      	mov	r3, r2
 8009f54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10a      	bne.n	8009f72 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	613b      	str	r3, [r7, #16]
}
 8009f6e:	bf00      	nop
 8009f70:	e7fe      	b.n	8009f70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	fb02 f303 	mul.w	r3, r2, r3
 8009f7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	3350      	adds	r3, #80	; 0x50
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7ff fa13 	bl	80093ac <pvPortMalloc>
 8009f86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d011      	beq.n	8009fb2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	3350      	adds	r3, #80	; 0x50
 8009f96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fa0:	79fa      	ldrb	r2, [r7, #7]
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	68b9      	ldr	r1, [r7, #8]
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f000 f805 	bl	8009fbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fb2:	69bb      	ldr	r3, [r7, #24]
	}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3720      	adds	r7, #32
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d103      	bne.n	8009fd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	69ba      	ldr	r2, [r7, #24]
 8009fd4:	601a      	str	r2, [r3, #0]
 8009fd6:	e002      	b.n	8009fde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	68ba      	ldr	r2, [r7, #8]
 8009fe8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009fea:	2101      	movs	r1, #1
 8009fec:	69b8      	ldr	r0, [r7, #24]
 8009fee:	f7ff fecb 	bl	8009d88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	78fa      	ldrb	r2, [r7, #3]
 8009ff6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ffa:	bf00      	nop
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a002:	b580      	push	{r7, lr}
 800a004:	b082      	sub	sp, #8
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00e      	beq.n	800a02e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a022:	2300      	movs	r3, #0
 800a024:	2200      	movs	r2, #0
 800a026:	2100      	movs	r1, #0
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f8a1 	bl	800a170 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a02e:	bf00      	nop
 800a030:	3708      	adds	r7, #8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a036:	b580      	push	{r7, lr}
 800a038:	b086      	sub	sp, #24
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	4603      	mov	r3, r0
 800a03e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a040:	2301      	movs	r3, #1
 800a042:	617b      	str	r3, [r7, #20]
 800a044:	2300      	movs	r3, #0
 800a046:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a048:	79fb      	ldrb	r3, [r7, #7]
 800a04a:	461a      	mov	r2, r3
 800a04c:	6939      	ldr	r1, [r7, #16]
 800a04e:	6978      	ldr	r0, [r7, #20]
 800a050:	f7ff ff7a 	bl	8009f48 <xQueueGenericCreate>
 800a054:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f7ff ffd3 	bl	800a002 <prvInitialiseMutex>

		return xNewQueue;
 800a05c:	68fb      	ldr	r3, [r7, #12]
	}
 800a05e:	4618      	mov	r0, r3
 800a060:	3718      	adds	r7, #24
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a066:	b580      	push	{r7, lr}
 800a068:	b088      	sub	sp, #32
 800a06a:	af02      	add	r7, sp, #8
 800a06c:	4603      	mov	r3, r0
 800a06e:	6039      	str	r1, [r7, #0]
 800a070:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a072:	2301      	movs	r3, #1
 800a074:	617b      	str	r3, [r7, #20]
 800a076:	2300      	movs	r3, #0
 800a078:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a07a:	79fb      	ldrb	r3, [r7, #7]
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2200      	movs	r2, #0
 800a082:	6939      	ldr	r1, [r7, #16]
 800a084:	6978      	ldr	r0, [r7, #20]
 800a086:	f7ff fee7 	bl	8009e58 <xQueueGenericCreateStatic>
 800a08a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f7ff ffb8 	bl	800a002 <prvInitialiseMutex>

		return xNewQueue;
 800a092:	68fb      	ldr	r3, [r7, #12]
	}
 800a094:	4618      	mov	r0, r3
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a09c:	b590      	push	{r4, r7, lr}
 800a09e:	b087      	sub	sp, #28
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10a      	bne.n	800a0c4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	60fb      	str	r3, [r7, #12]
}
 800a0c0:	bf00      	nop
 800a0c2:	e7fe      	b.n	800a0c2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	689c      	ldr	r4, [r3, #8]
 800a0c8:	f001 fba6 	bl	800b818 <xTaskGetCurrentTaskHandle>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	429c      	cmp	r4, r3
 800a0d0:	d111      	bne.n	800a0f6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	1e5a      	subs	r2, r3, #1
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d105      	bne.n	800a0f0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	6938      	ldr	r0, [r7, #16]
 800a0ec:	f000 f840 	bl	800a170 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	617b      	str	r3, [r7, #20]
 800a0f4:	e001      	b.n	800a0fa <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a0fa:	697b      	ldr	r3, [r7, #20]
	}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	371c      	adds	r7, #28
 800a100:	46bd      	mov	sp, r7
 800a102:	bd90      	pop	{r4, r7, pc}

0800a104 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a104:	b590      	push	{r4, r7, lr}
 800a106:	b087      	sub	sp, #28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10a      	bne.n	800a12e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	60fb      	str	r3, [r7, #12]
}
 800a12a:	bf00      	nop
 800a12c:	e7fe      	b.n	800a12c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	689c      	ldr	r4, [r3, #8]
 800a132:	f001 fb71 	bl	800b818 <xTaskGetCurrentTaskHandle>
 800a136:	4603      	mov	r3, r0
 800a138:	429c      	cmp	r4, r3
 800a13a:	d107      	bne.n	800a14c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	1c5a      	adds	r2, r3, #1
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a146:	2301      	movs	r3, #1
 800a148:	617b      	str	r3, [r7, #20]
 800a14a:	e00c      	b.n	800a166 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a14c:	6839      	ldr	r1, [r7, #0]
 800a14e:	6938      	ldr	r0, [r7, #16]
 800a150:	f000 fa88 	bl	800a664 <xQueueSemaphoreTake>
 800a154:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d004      	beq.n	800a166 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	1c5a      	adds	r2, r3, #1
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a166:	697b      	ldr	r3, [r7, #20]
	}
 800a168:	4618      	mov	r0, r3
 800a16a:	371c      	adds	r7, #28
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd90      	pop	{r4, r7, pc}

0800a170 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b08e      	sub	sp, #56	; 0x38
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a17e:	2300      	movs	r3, #0
 800a180:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10a      	bne.n	800a1a2 <xQueueGenericSend+0x32>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d103      	bne.n	800a1b0 <xQueueGenericSend+0x40>
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d101      	bne.n	800a1b4 <xQueueGenericSend+0x44>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e000      	b.n	800a1b6 <xQueueGenericSend+0x46>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d10a      	bne.n	800a1d0 <xQueueGenericSend+0x60>
	__asm volatile
 800a1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1cc:	bf00      	nop
 800a1ce:	e7fe      	b.n	800a1ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d103      	bne.n	800a1de <xQueueGenericSend+0x6e>
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d101      	bne.n	800a1e2 <xQueueGenericSend+0x72>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e000      	b.n	800a1e4 <xQueueGenericSend+0x74>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d10a      	bne.n	800a1fe <xQueueGenericSend+0x8e>
	__asm volatile
 800a1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ec:	f383 8811 	msr	BASEPRI, r3
 800a1f0:	f3bf 8f6f 	isb	sy
 800a1f4:	f3bf 8f4f 	dsb	sy
 800a1f8:	623b      	str	r3, [r7, #32]
}
 800a1fa:	bf00      	nop
 800a1fc:	e7fe      	b.n	800a1fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1fe:	f001 fb1b 	bl	800b838 <xTaskGetSchedulerState>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d102      	bne.n	800a20e <xQueueGenericSend+0x9e>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d101      	bne.n	800a212 <xQueueGenericSend+0xa2>
 800a20e:	2301      	movs	r3, #1
 800a210:	e000      	b.n	800a214 <xQueueGenericSend+0xa4>
 800a212:	2300      	movs	r3, #0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10a      	bne.n	800a22e <xQueueGenericSend+0xbe>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	61fb      	str	r3, [r7, #28]
}
 800a22a:	bf00      	nop
 800a22c:	e7fe      	b.n	800a22c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a22e:	f7ff fc89 	bl	8009b44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d302      	bcc.n	800a244 <xQueueGenericSend+0xd4>
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	2b02      	cmp	r3, #2
 800a242:	d129      	bne.n	800a298 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	68b9      	ldr	r1, [r7, #8]
 800a248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a24a:	f000 fb2f 	bl	800a8ac <prvCopyDataToQueue>
 800a24e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a254:	2b00      	cmp	r3, #0
 800a256:	d010      	beq.n	800a27a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25a:	3324      	adds	r3, #36	; 0x24
 800a25c:	4618      	mov	r0, r3
 800a25e:	f001 f919 	bl	800b494 <xTaskRemoveFromEventList>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d013      	beq.n	800a290 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a268:	4b3f      	ldr	r3, [pc, #252]	; (800a368 <xQueueGenericSend+0x1f8>)
 800a26a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	e00a      	b.n	800a290 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d007      	beq.n	800a290 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a280:	4b39      	ldr	r3, [pc, #228]	; (800a368 <xQueueGenericSend+0x1f8>)
 800a282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a286:	601a      	str	r2, [r3, #0]
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a290:	f7ff fc88 	bl	8009ba4 <vPortExitCritical>
				return pdPASS;
 800a294:	2301      	movs	r3, #1
 800a296:	e063      	b.n	800a360 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d103      	bne.n	800a2a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a29e:	f7ff fc81 	bl	8009ba4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	e05c      	b.n	800a360 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d106      	bne.n	800a2ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2ac:	f107 0314 	add.w	r3, r7, #20
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f001 f953 	bl	800b55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2ba:	f7ff fc73 	bl	8009ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2be:	f000 febf 	bl	800b040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2c2:	f7ff fc3f 	bl	8009b44 <vPortEnterCritical>
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2cc:	b25b      	sxtb	r3, r3
 800a2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d2:	d103      	bne.n	800a2dc <xQueueGenericSend+0x16c>
 800a2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2e2:	b25b      	sxtb	r3, r3
 800a2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e8:	d103      	bne.n	800a2f2 <xQueueGenericSend+0x182>
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2f2:	f7ff fc57 	bl	8009ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2f6:	1d3a      	adds	r2, r7, #4
 800a2f8:	f107 0314 	add.w	r3, r7, #20
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	4618      	mov	r0, r3
 800a300:	f001 f942 	bl	800b588 <xTaskCheckForTimeOut>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d124      	bne.n	800a354 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a30a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a30c:	f000 fbc6 	bl	800aa9c <prvIsQueueFull>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d018      	beq.n	800a348 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a318:	3310      	adds	r3, #16
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	4611      	mov	r1, r2
 800a31e:	4618      	mov	r0, r3
 800a320:	f001 f868 	bl	800b3f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a326:	f000 fb51 	bl	800a9cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a32a:	f000 fe97 	bl	800b05c <xTaskResumeAll>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	f47f af7c 	bne.w	800a22e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a336:	4b0c      	ldr	r3, [pc, #48]	; (800a368 <xQueueGenericSend+0x1f8>)
 800a338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a33c:	601a      	str	r2, [r3, #0]
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	e772      	b.n	800a22e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a34a:	f000 fb3f 	bl	800a9cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a34e:	f000 fe85 	bl	800b05c <xTaskResumeAll>
 800a352:	e76c      	b.n	800a22e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a356:	f000 fb39 	bl	800a9cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a35a:	f000 fe7f 	bl	800b05c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a35e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a360:	4618      	mov	r0, r3
 800a362:	3738      	adds	r7, #56	; 0x38
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	e000ed04 	.word	0xe000ed04

0800a36c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b090      	sub	sp, #64	; 0x40
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
 800a378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10a      	bne.n	800a39a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a396:	bf00      	nop
 800a398:	e7fe      	b.n	800a398 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d103      	bne.n	800a3a8 <xQueueGenericSendFromISR+0x3c>
 800a3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d101      	bne.n	800a3ac <xQueueGenericSendFromISR+0x40>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e000      	b.n	800a3ae <xQueueGenericSendFromISR+0x42>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d10a      	bne.n	800a3c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b6:	f383 8811 	msr	BASEPRI, r3
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a3c4:	bf00      	nop
 800a3c6:	e7fe      	b.n	800a3c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d103      	bne.n	800a3d6 <xQueueGenericSendFromISR+0x6a>
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d101      	bne.n	800a3da <xQueueGenericSendFromISR+0x6e>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e000      	b.n	800a3dc <xQueueGenericSendFromISR+0x70>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d10a      	bne.n	800a3f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e4:	f383 8811 	msr	BASEPRI, r3
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	f3bf 8f4f 	dsb	sy
 800a3f0:	623b      	str	r3, [r7, #32]
}
 800a3f2:	bf00      	nop
 800a3f4:	e7fe      	b.n	800a3f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3f6:	f7ff fc87 	bl	8009d08 <vPortValidateInterruptPriority>
	__asm volatile
 800a3fa:	f3ef 8211 	mrs	r2, BASEPRI
 800a3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	61fa      	str	r2, [r7, #28]
 800a410:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a412:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a414:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a41e:	429a      	cmp	r2, r3
 800a420:	d302      	bcc.n	800a428 <xQueueGenericSendFromISR+0xbc>
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b02      	cmp	r3, #2
 800a426:	d12f      	bne.n	800a488 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a436:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	68b9      	ldr	r1, [r7, #8]
 800a43c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a43e:	f000 fa35 	bl	800a8ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a442:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a44a:	d112      	bne.n	800a472 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a450:	2b00      	cmp	r3, #0
 800a452:	d016      	beq.n	800a482 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	3324      	adds	r3, #36	; 0x24
 800a458:	4618      	mov	r0, r3
 800a45a:	f001 f81b 	bl	800b494 <xTaskRemoveFromEventList>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00e      	beq.n	800a482 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00b      	beq.n	800a482 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	601a      	str	r2, [r3, #0]
 800a470:	e007      	b.n	800a482 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a472:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a476:	3301      	adds	r3, #1
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	b25a      	sxtb	r2, r3
 800a47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a482:	2301      	movs	r3, #1
 800a484:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a486:	e001      	b.n	800a48c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a488:	2300      	movs	r3, #0
 800a48a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	f383 8811 	msr	BASEPRI, r3
}
 800a496:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3740      	adds	r7, #64	; 0x40
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
	...

0800a4a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b08c      	sub	sp, #48	; 0x30
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10a      	bne.n	800a4d4 <xQueueReceive+0x30>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	623b      	str	r3, [r7, #32]
}
 800a4d0:	bf00      	nop
 800a4d2:	e7fe      	b.n	800a4d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d103      	bne.n	800a4e2 <xQueueReceive+0x3e>
 800a4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <xQueueReceive+0x42>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e000      	b.n	800a4e8 <xQueueReceive+0x44>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10a      	bne.n	800a502 <xQueueReceive+0x5e>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	61fb      	str	r3, [r7, #28]
}
 800a4fe:	bf00      	nop
 800a500:	e7fe      	b.n	800a500 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a502:	f001 f999 	bl	800b838 <xTaskGetSchedulerState>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d102      	bne.n	800a512 <xQueueReceive+0x6e>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d101      	bne.n	800a516 <xQueueReceive+0x72>
 800a512:	2301      	movs	r3, #1
 800a514:	e000      	b.n	800a518 <xQueueReceive+0x74>
 800a516:	2300      	movs	r3, #0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10a      	bne.n	800a532 <xQueueReceive+0x8e>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	61bb      	str	r3, [r7, #24]
}
 800a52e:	bf00      	nop
 800a530:	e7fe      	b.n	800a530 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a532:	f7ff fb07 	bl	8009b44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d01f      	beq.n	800a582 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a542:	68b9      	ldr	r1, [r7, #8]
 800a544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a546:	f000 fa1b 	bl	800a980 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54c:	1e5a      	subs	r2, r3, #1
 800a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a550:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00f      	beq.n	800a57a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	3310      	adds	r3, #16
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 ff98 	bl	800b494 <xTaskRemoveFromEventList>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d007      	beq.n	800a57a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a56a:	4b3d      	ldr	r3, [pc, #244]	; (800a660 <xQueueReceive+0x1bc>)
 800a56c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a570:	601a      	str	r2, [r3, #0]
 800a572:	f3bf 8f4f 	dsb	sy
 800a576:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a57a:	f7ff fb13 	bl	8009ba4 <vPortExitCritical>
				return pdPASS;
 800a57e:	2301      	movs	r3, #1
 800a580:	e069      	b.n	800a656 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d103      	bne.n	800a590 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a588:	f7ff fb0c 	bl	8009ba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a58c:	2300      	movs	r3, #0
 800a58e:	e062      	b.n	800a656 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a592:	2b00      	cmp	r3, #0
 800a594:	d106      	bne.n	800a5a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a596:	f107 0310 	add.w	r3, r7, #16
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 ffde 	bl	800b55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5a4:	f7ff fafe 	bl	8009ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5a8:	f000 fd4a 	bl	800b040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5ac:	f7ff faca 	bl	8009b44 <vPortEnterCritical>
 800a5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5b6:	b25b      	sxtb	r3, r3
 800a5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5bc:	d103      	bne.n	800a5c6 <xQueueReceive+0x122>
 800a5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5cc:	b25b      	sxtb	r3, r3
 800a5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d2:	d103      	bne.n	800a5dc <xQueueReceive+0x138>
 800a5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5dc:	f7ff fae2 	bl	8009ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5e0:	1d3a      	adds	r2, r7, #4
 800a5e2:	f107 0310 	add.w	r3, r7, #16
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f000 ffcd 	bl	800b588 <xTaskCheckForTimeOut>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d123      	bne.n	800a63c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5f6:	f000 fa3b 	bl	800aa70 <prvIsQueueEmpty>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d017      	beq.n	800a630 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a602:	3324      	adds	r3, #36	; 0x24
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	4611      	mov	r1, r2
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 fef3 	bl	800b3f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a60e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a610:	f000 f9dc 	bl	800a9cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a614:	f000 fd22 	bl	800b05c <xTaskResumeAll>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d189      	bne.n	800a532 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a61e:	4b10      	ldr	r3, [pc, #64]	; (800a660 <xQueueReceive+0x1bc>)
 800a620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	f3bf 8f6f 	isb	sy
 800a62e:	e780      	b.n	800a532 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a632:	f000 f9cb 	bl	800a9cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a636:	f000 fd11 	bl	800b05c <xTaskResumeAll>
 800a63a:	e77a      	b.n	800a532 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a63c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a63e:	f000 f9c5 	bl	800a9cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a642:	f000 fd0b 	bl	800b05c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a648:	f000 fa12 	bl	800aa70 <prvIsQueueEmpty>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f43f af6f 	beq.w	800a532 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a654:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a656:	4618      	mov	r0, r3
 800a658:	3730      	adds	r7, #48	; 0x30
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	e000ed04 	.word	0xe000ed04

0800a664 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08e      	sub	sp, #56	; 0x38
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a66e:	2300      	movs	r3, #0
 800a670:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a676:	2300      	movs	r3, #0
 800a678:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10a      	bne.n	800a696 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a684:	f383 8811 	msr	BASEPRI, r3
 800a688:	f3bf 8f6f 	isb	sy
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	623b      	str	r3, [r7, #32]
}
 800a692:	bf00      	nop
 800a694:	e7fe      	b.n	800a694 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00a      	beq.n	800a6b4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	61fb      	str	r3, [r7, #28]
}
 800a6b0:	bf00      	nop
 800a6b2:	e7fe      	b.n	800a6b2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6b4:	f001 f8c0 	bl	800b838 <xTaskGetSchedulerState>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d102      	bne.n	800a6c4 <xQueueSemaphoreTake+0x60>
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d101      	bne.n	800a6c8 <xQueueSemaphoreTake+0x64>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e000      	b.n	800a6ca <xQueueSemaphoreTake+0x66>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10a      	bne.n	800a6e4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	61bb      	str	r3, [r7, #24]
}
 800a6e0:	bf00      	nop
 800a6e2:	e7fe      	b.n	800a6e2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6e4:	f7ff fa2e 	bl	8009b44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d024      	beq.n	800a73e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	1e5a      	subs	r2, r3, #1
 800a6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d104      	bne.n	800a70e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a704:	f001 fa0e 	bl	800bb24 <pvTaskIncrementMutexHeldCount>
 800a708:	4602      	mov	r2, r0
 800a70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00f      	beq.n	800a736 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a718:	3310      	adds	r3, #16
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 feba 	bl	800b494 <xTaskRemoveFromEventList>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d007      	beq.n	800a736 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a726:	4b54      	ldr	r3, [pc, #336]	; (800a878 <xQueueSemaphoreTake+0x214>)
 800a728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a72c:	601a      	str	r2, [r3, #0]
 800a72e:	f3bf 8f4f 	dsb	sy
 800a732:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a736:	f7ff fa35 	bl	8009ba4 <vPortExitCritical>
				return pdPASS;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e097      	b.n	800a86e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d111      	bne.n	800a768 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	2b00      	cmp	r3, #0
 800a748:	d00a      	beq.n	800a760 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	617b      	str	r3, [r7, #20]
}
 800a75c:	bf00      	nop
 800a75e:	e7fe      	b.n	800a75e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a760:	f7ff fa20 	bl	8009ba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a764:	2300      	movs	r3, #0
 800a766:	e082      	b.n	800a86e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d106      	bne.n	800a77c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a76e:	f107 030c 	add.w	r3, r7, #12
 800a772:	4618      	mov	r0, r3
 800a774:	f000 fef2 	bl	800b55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a778:	2301      	movs	r3, #1
 800a77a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a77c:	f7ff fa12 	bl	8009ba4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a780:	f000 fc5e 	bl	800b040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a784:	f7ff f9de 	bl	8009b44 <vPortEnterCritical>
 800a788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a78e:	b25b      	sxtb	r3, r3
 800a790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a794:	d103      	bne.n	800a79e <xQueueSemaphoreTake+0x13a>
 800a796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a798:	2200      	movs	r2, #0
 800a79a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7a4:	b25b      	sxtb	r3, r3
 800a7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7aa:	d103      	bne.n	800a7b4 <xQueueSemaphoreTake+0x150>
 800a7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7b4:	f7ff f9f6 	bl	8009ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7b8:	463a      	mov	r2, r7
 800a7ba:	f107 030c 	add.w	r3, r7, #12
 800a7be:	4611      	mov	r1, r2
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f000 fee1 	bl	800b588 <xTaskCheckForTimeOut>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d132      	bne.n	800a832 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7ce:	f000 f94f 	bl	800aa70 <prvIsQueueEmpty>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d026      	beq.n	800a826 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d109      	bne.n	800a7f4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a7e0:	f7ff f9b0 	bl	8009b44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f001 f843 	bl	800b874 <xTaskPriorityInherit>
 800a7ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a7f0:	f7ff f9d8 	bl	8009ba4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f6:	3324      	adds	r3, #36	; 0x24
 800a7f8:	683a      	ldr	r2, [r7, #0]
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f000 fdf9 	bl	800b3f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a802:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a804:	f000 f8e2 	bl	800a9cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a808:	f000 fc28 	bl	800b05c <xTaskResumeAll>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f47f af68 	bne.w	800a6e4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a814:	4b18      	ldr	r3, [pc, #96]	; (800a878 <xQueueSemaphoreTake+0x214>)
 800a816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a81a:	601a      	str	r2, [r3, #0]
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	e75e      	b.n	800a6e4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a828:	f000 f8d0 	bl	800a9cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a82c:	f000 fc16 	bl	800b05c <xTaskResumeAll>
 800a830:	e758      	b.n	800a6e4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a834:	f000 f8ca 	bl	800a9cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a838:	f000 fc10 	bl	800b05c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a83c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a83e:	f000 f917 	bl	800aa70 <prvIsQueueEmpty>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	f43f af4d 	beq.w	800a6e4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00d      	beq.n	800a86c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a850:	f7ff f978 	bl	8009b44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a854:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a856:	f000 f811 	bl	800a87c <prvGetDisinheritPriorityAfterTimeout>
 800a85a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a862:	4618      	mov	r0, r3
 800a864:	f001 f8dc 	bl	800ba20 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a868:	f7ff f99c 	bl	8009ba4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a86c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3738      	adds	r7, #56	; 0x38
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	e000ed04 	.word	0xe000ed04

0800a87c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d006      	beq.n	800a89a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	e001      	b.n	800a89e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a89a:	2300      	movs	r3, #0
 800a89c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a89e:	68fb      	ldr	r3, [r7, #12]
	}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3714      	adds	r7, #20
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10d      	bne.n	800a8e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d14d      	bne.n	800a96e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f001 f834 	bl	800b944 <xTaskPriorityDisinherit>
 800a8dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	609a      	str	r2, [r3, #8]
 800a8e4:	e043      	b.n	800a96e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d119      	bne.n	800a920 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6858      	ldr	r0, [r3, #4]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	68b9      	ldr	r1, [r7, #8]
 800a8f8:	f002 fbe1 	bl	800d0be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a904:	441a      	add	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	685a      	ldr	r2, [r3, #4]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	429a      	cmp	r2, r3
 800a914:	d32b      	bcc.n	800a96e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	605a      	str	r2, [r3, #4]
 800a91e:	e026      	b.n	800a96e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	68d8      	ldr	r0, [r3, #12]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a928:	461a      	mov	r2, r3
 800a92a:	68b9      	ldr	r1, [r7, #8]
 800a92c:	f002 fbc7 	bl	800d0be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	68da      	ldr	r2, [r3, #12]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a938:	425b      	negs	r3, r3
 800a93a:	441a      	add	r2, r3
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	68da      	ldr	r2, [r3, #12]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d207      	bcs.n	800a95c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	689a      	ldr	r2, [r3, #8]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a954:	425b      	negs	r3, r3
 800a956:	441a      	add	r2, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d105      	bne.n	800a96e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d002      	beq.n	800a96e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	3b01      	subs	r3, #1
 800a96c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	1c5a      	adds	r2, r3, #1
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a976:	697b      	ldr	r3, [r7, #20]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3718      	adds	r7, #24
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d018      	beq.n	800a9c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	68da      	ldr	r2, [r3, #12]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99a:	441a      	add	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	68da      	ldr	r2, [r3, #12]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d303      	bcc.n	800a9b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	68d9      	ldr	r1, [r3, #12]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9bc:	461a      	mov	r2, r3
 800a9be:	6838      	ldr	r0, [r7, #0]
 800a9c0:	f002 fb7d 	bl	800d0be <memcpy>
	}
}
 800a9c4:	bf00      	nop
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a9d4:	f7ff f8b6 	bl	8009b44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9e0:	e011      	b.n	800aa06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d012      	beq.n	800aa10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	3324      	adds	r3, #36	; 0x24
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 fd50 	bl	800b494 <xTaskRemoveFromEventList>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d001      	beq.n	800a9fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a9fa:	f000 fe27 	bl	800b64c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a9fe:	7bfb      	ldrb	r3, [r7, #15]
 800aa00:	3b01      	subs	r3, #1
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	dce9      	bgt.n	800a9e2 <prvUnlockQueue+0x16>
 800aa0e:	e000      	b.n	800aa12 <prvUnlockQueue+0x46>
					break;
 800aa10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	22ff      	movs	r2, #255	; 0xff
 800aa16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aa1a:	f7ff f8c3 	bl	8009ba4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa1e:	f7ff f891 	bl	8009b44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa2a:	e011      	b.n	800aa50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	691b      	ldr	r3, [r3, #16]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d012      	beq.n	800aa5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	3310      	adds	r3, #16
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 fd2b 	bl	800b494 <xTaskRemoveFromEventList>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d001      	beq.n	800aa48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aa44:	f000 fe02 	bl	800b64c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa48:	7bbb      	ldrb	r3, [r7, #14]
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	dce9      	bgt.n	800aa2c <prvUnlockQueue+0x60>
 800aa58:	e000      	b.n	800aa5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	22ff      	movs	r2, #255	; 0xff
 800aa60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aa64:	f7ff f89e 	bl	8009ba4 <vPortExitCritical>
}
 800aa68:	bf00      	nop
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa78:	f7ff f864 	bl	8009b44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d102      	bne.n	800aa8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa84:	2301      	movs	r3, #1
 800aa86:	60fb      	str	r3, [r7, #12]
 800aa88:	e001      	b.n	800aa8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa8e:	f7ff f889 	bl	8009ba4 <vPortExitCritical>

	return xReturn;
 800aa92:	68fb      	ldr	r3, [r7, #12]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aaa4:	f7ff f84e 	bl	8009b44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d102      	bne.n	800aaba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aab4:	2301      	movs	r3, #1
 800aab6:	60fb      	str	r3, [r7, #12]
 800aab8:	e001      	b.n	800aabe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aaba:	2300      	movs	r3, #0
 800aabc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aabe:	f7ff f871 	bl	8009ba4 <vPortExitCritical>

	return xReturn;
 800aac2:	68fb      	ldr	r3, [r7, #12]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aad6:	2300      	movs	r3, #0
 800aad8:	60fb      	str	r3, [r7, #12]
 800aada:	e014      	b.n	800ab06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aadc:	4a0f      	ldr	r2, [pc, #60]	; (800ab1c <vQueueAddToRegistry+0x50>)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10b      	bne.n	800ab00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aae8:	490c      	ldr	r1, [pc, #48]	; (800ab1c <vQueueAddToRegistry+0x50>)
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	683a      	ldr	r2, [r7, #0]
 800aaee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aaf2:	4a0a      	ldr	r2, [pc, #40]	; (800ab1c <vQueueAddToRegistry+0x50>)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	00db      	lsls	r3, r3, #3
 800aaf8:	4413      	add	r3, r2
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aafe:	e006      	b.n	800ab0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	3301      	adds	r3, #1
 800ab04:	60fb      	str	r3, [r7, #12]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2b07      	cmp	r3, #7
 800ab0a:	d9e7      	bls.n	800aadc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab0c:	bf00      	nop
 800ab0e:	bf00      	nop
 800ab10:	3714      	adds	r7, #20
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	240048b8 	.word	0x240048b8

0800ab20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ab30:	f7ff f808 	bl	8009b44 <vPortEnterCritical>
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab3a:	b25b      	sxtb	r3, r3
 800ab3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab40:	d103      	bne.n	800ab4a <vQueueWaitForMessageRestricted+0x2a>
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab50:	b25b      	sxtb	r3, r3
 800ab52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab56:	d103      	bne.n	800ab60 <vQueueWaitForMessageRestricted+0x40>
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab60:	f7ff f820 	bl	8009ba4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d106      	bne.n	800ab7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	3324      	adds	r3, #36	; 0x24
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	68b9      	ldr	r1, [r7, #8]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f000 fc61 	bl	800b43c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ab7a:	6978      	ldr	r0, [r7, #20]
 800ab7c:	f7ff ff26 	bl	800a9cc <prvUnlockQueue>
	}
 800ab80:	bf00      	nop
 800ab82:	3718      	adds	r7, #24
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b08e      	sub	sp, #56	; 0x38
 800ab8c:	af04      	add	r7, sp, #16
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10a      	bne.n	800abb2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ab9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	623b      	str	r3, [r7, #32]
}
 800abae:	bf00      	nop
 800abb0:	e7fe      	b.n	800abb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800abb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10a      	bne.n	800abce <xTaskCreateStatic+0x46>
	__asm volatile
 800abb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	61fb      	str	r3, [r7, #28]
}
 800abca:	bf00      	nop
 800abcc:	e7fe      	b.n	800abcc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800abce:	23a8      	movs	r3, #168	; 0xa8
 800abd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	2ba8      	cmp	r3, #168	; 0xa8
 800abd6:	d00a      	beq.n	800abee <xTaskCreateStatic+0x66>
	__asm volatile
 800abd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abdc:	f383 8811 	msr	BASEPRI, r3
 800abe0:	f3bf 8f6f 	isb	sy
 800abe4:	f3bf 8f4f 	dsb	sy
 800abe8:	61bb      	str	r3, [r7, #24]
}
 800abea:	bf00      	nop
 800abec:	e7fe      	b.n	800abec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800abee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800abf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d01e      	beq.n	800ac34 <xTaskCreateStatic+0xac>
 800abf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d01b      	beq.n	800ac34 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac08:	2202      	movs	r2, #2
 800ac0a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac0e:	2300      	movs	r3, #0
 800ac10:	9303      	str	r3, [sp, #12]
 800ac12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac14:	9302      	str	r3, [sp, #8]
 800ac16:	f107 0314 	add.w	r3, r7, #20
 800ac1a:	9301      	str	r3, [sp, #4]
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	68b9      	ldr	r1, [r7, #8]
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f000 f850 	bl	800accc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac2e:	f000 f8f3 	bl	800ae18 <prvAddNewTaskToReadyList>
 800ac32:	e001      	b.n	800ac38 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ac34:	2300      	movs	r3, #0
 800ac36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac38:	697b      	ldr	r3, [r7, #20]
	}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3728      	adds	r7, #40	; 0x28
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b08c      	sub	sp, #48	; 0x30
 800ac46:	af04      	add	r7, sp, #16
 800ac48:	60f8      	str	r0, [r7, #12]
 800ac4a:	60b9      	str	r1, [r7, #8]
 800ac4c:	603b      	str	r3, [r7, #0]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac52:	88fb      	ldrh	r3, [r7, #6]
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fe fba8 	bl	80093ac <pvPortMalloc>
 800ac5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00e      	beq.n	800ac82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac64:	20a8      	movs	r0, #168	; 0xa8
 800ac66:	f7fe fba1 	bl	80093ac <pvPortMalloc>
 800ac6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d003      	beq.n	800ac7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	697a      	ldr	r2, [r7, #20]
 800ac76:	631a      	str	r2, [r3, #48]	; 0x30
 800ac78:	e005      	b.n	800ac86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac7a:	6978      	ldr	r0, [r7, #20]
 800ac7c:	f7fe fc62 	bl	8009544 <vPortFree>
 800ac80:	e001      	b.n	800ac86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d017      	beq.n	800acbc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac94:	88fa      	ldrh	r2, [r7, #6]
 800ac96:	2300      	movs	r3, #0
 800ac98:	9303      	str	r3, [sp, #12]
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	9302      	str	r3, [sp, #8]
 800ac9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca0:	9301      	str	r3, [sp, #4]
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	68b9      	ldr	r1, [r7, #8]
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	f000 f80e 	bl	800accc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acb0:	69f8      	ldr	r0, [r7, #28]
 800acb2:	f000 f8b1 	bl	800ae18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800acb6:	2301      	movs	r3, #1
 800acb8:	61bb      	str	r3, [r7, #24]
 800acba:	e002      	b.n	800acc2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800acbc:	f04f 33ff 	mov.w	r3, #4294967295
 800acc0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800acc2:	69bb      	ldr	r3, [r7, #24]
	}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3720      	adds	r7, #32
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b088      	sub	sp, #32
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
 800acd8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800acda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acdc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	461a      	mov	r2, r3
 800ace4:	21a5      	movs	r1, #165	; 0xa5
 800ace6:	f002 f915 	bl	800cf14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800acea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acee:	6879      	ldr	r1, [r7, #4]
 800acf0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800acf4:	440b      	add	r3, r1
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	f023 0307 	bic.w	r3, r3, #7
 800ad02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	f003 0307 	and.w	r3, r3, #7
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00a      	beq.n	800ad24 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	617b      	str	r3, [r7, #20]
}
 800ad20:	bf00      	nop
 800ad22:	e7fe      	b.n	800ad22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d01f      	beq.n	800ad6a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	61fb      	str	r3, [r7, #28]
 800ad2e:	e012      	b.n	800ad56 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	4413      	add	r3, r2
 800ad36:	7819      	ldrb	r1, [r3, #0]
 800ad38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	3334      	adds	r3, #52	; 0x34
 800ad40:	460a      	mov	r2, r1
 800ad42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	4413      	add	r3, r2
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d006      	beq.n	800ad5e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	3301      	adds	r3, #1
 800ad54:	61fb      	str	r3, [r7, #28]
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	2b0f      	cmp	r3, #15
 800ad5a:	d9e9      	bls.n	800ad30 <prvInitialiseNewTask+0x64>
 800ad5c:	e000      	b.n	800ad60 <prvInitialiseNewTask+0x94>
			{
				break;
 800ad5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad68:	e003      	b.n	800ad72 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad74:	2b37      	cmp	r3, #55	; 0x37
 800ad76:	d901      	bls.n	800ad7c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad78:	2337      	movs	r3, #55	; 0x37
 800ad7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ad88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad90:	3304      	adds	r3, #4
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7fe fd14 	bl	80097c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9a:	3318      	adds	r3, #24
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7fe fd0f 	bl	80097c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ada6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800adae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adb6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800adb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adba:	2200      	movs	r2, #0
 800adbc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800adc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800adc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adca:	3354      	adds	r3, #84	; 0x54
 800adcc:	224c      	movs	r2, #76	; 0x4c
 800adce:	2100      	movs	r1, #0
 800add0:	4618      	mov	r0, r3
 800add2:	f002 f89f 	bl	800cf14 <memset>
 800add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add8:	4a0c      	ldr	r2, [pc, #48]	; (800ae0c <prvInitialiseNewTask+0x140>)
 800adda:	659a      	str	r2, [r3, #88]	; 0x58
 800addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adde:	4a0c      	ldr	r2, [pc, #48]	; (800ae10 <prvInitialiseNewTask+0x144>)
 800ade0:	65da      	str	r2, [r3, #92]	; 0x5c
 800ade2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade4:	4a0b      	ldr	r2, [pc, #44]	; (800ae14 <prvInitialiseNewTask+0x148>)
 800ade6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	68f9      	ldr	r1, [r7, #12]
 800adec:	69b8      	ldr	r0, [r7, #24]
 800adee:	f7fe fd7b 	bl	80098e8 <pxPortInitialiseStack>
 800adf2:	4602      	mov	r2, r0
 800adf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800adf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d002      	beq.n	800ae04 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800adfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae04:	bf00      	nop
 800ae06:	3720      	adds	r7, #32
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	24004f24 	.word	0x24004f24
 800ae10:	24004f8c 	.word	0x24004f8c
 800ae14:	24004ff4 	.word	0x24004ff4

0800ae18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae20:	f7fe fe90 	bl	8009b44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae24:	4b2d      	ldr	r3, [pc, #180]	; (800aedc <prvAddNewTaskToReadyList+0xc4>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	4a2c      	ldr	r2, [pc, #176]	; (800aedc <prvAddNewTaskToReadyList+0xc4>)
 800ae2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae2e:	4b2c      	ldr	r3, [pc, #176]	; (800aee0 <prvAddNewTaskToReadyList+0xc8>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d109      	bne.n	800ae4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae36:	4a2a      	ldr	r2, [pc, #168]	; (800aee0 <prvAddNewTaskToReadyList+0xc8>)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae3c:	4b27      	ldr	r3, [pc, #156]	; (800aedc <prvAddNewTaskToReadyList+0xc4>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d110      	bne.n	800ae66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae44:	f000 fc26 	bl	800b694 <prvInitialiseTaskLists>
 800ae48:	e00d      	b.n	800ae66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae4a:	4b26      	ldr	r3, [pc, #152]	; (800aee4 <prvAddNewTaskToReadyList+0xcc>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d109      	bne.n	800ae66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae52:	4b23      	ldr	r3, [pc, #140]	; (800aee0 <prvAddNewTaskToReadyList+0xc8>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d802      	bhi.n	800ae66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae60:	4a1f      	ldr	r2, [pc, #124]	; (800aee0 <prvAddNewTaskToReadyList+0xc8>)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae66:	4b20      	ldr	r3, [pc, #128]	; (800aee8 <prvAddNewTaskToReadyList+0xd0>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	4a1e      	ldr	r2, [pc, #120]	; (800aee8 <prvAddNewTaskToReadyList+0xd0>)
 800ae6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ae70:	4b1d      	ldr	r3, [pc, #116]	; (800aee8 <prvAddNewTaskToReadyList+0xd0>)
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae7c:	4b1b      	ldr	r3, [pc, #108]	; (800aeec <prvAddNewTaskToReadyList+0xd4>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d903      	bls.n	800ae8c <prvAddNewTaskToReadyList+0x74>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae88:	4a18      	ldr	r2, [pc, #96]	; (800aeec <prvAddNewTaskToReadyList+0xd4>)
 800ae8a:	6013      	str	r3, [r2, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae90:	4613      	mov	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4a15      	ldr	r2, [pc, #84]	; (800aef0 <prvAddNewTaskToReadyList+0xd8>)
 800ae9a:	441a      	add	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4619      	mov	r1, r3
 800aea2:	4610      	mov	r0, r2
 800aea4:	f7fe fc99 	bl	80097da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aea8:	f7fe fe7c 	bl	8009ba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aeac:	4b0d      	ldr	r3, [pc, #52]	; (800aee4 <prvAddNewTaskToReadyList+0xcc>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00e      	beq.n	800aed2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aeb4:	4b0a      	ldr	r3, [pc, #40]	; (800aee0 <prvAddNewTaskToReadyList+0xc8>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d207      	bcs.n	800aed2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aec2:	4b0c      	ldr	r3, [pc, #48]	; (800aef4 <prvAddNewTaskToReadyList+0xdc>)
 800aec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec8:	601a      	str	r2, [r3, #0]
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aed2:	bf00      	nop
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	24004dcc 	.word	0x24004dcc
 800aee0:	240048f8 	.word	0x240048f8
 800aee4:	24004dd8 	.word	0x24004dd8
 800aee8:	24004de8 	.word	0x24004de8
 800aeec:	24004dd4 	.word	0x24004dd4
 800aef0:	240048fc 	.word	0x240048fc
 800aef4:	e000ed04 	.word	0xe000ed04

0800aef8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af00:	2300      	movs	r3, #0
 800af02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d017      	beq.n	800af3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af0a:	4b13      	ldr	r3, [pc, #76]	; (800af58 <vTaskDelay+0x60>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00a      	beq.n	800af28 <vTaskDelay+0x30>
	__asm volatile
 800af12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af16:	f383 8811 	msr	BASEPRI, r3
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	60bb      	str	r3, [r7, #8]
}
 800af24:	bf00      	nop
 800af26:	e7fe      	b.n	800af26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800af28:	f000 f88a 	bl	800b040 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af2c:	2100      	movs	r1, #0
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fe0c 	bl	800bb4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af34:	f000 f892 	bl	800b05c <xTaskResumeAll>
 800af38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d107      	bne.n	800af50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800af40:	4b06      	ldr	r3, [pc, #24]	; (800af5c <vTaskDelay+0x64>)
 800af42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af50:	bf00      	nop
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	24004df4 	.word	0x24004df4
 800af5c:	e000ed04 	.word	0xe000ed04

0800af60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b08a      	sub	sp, #40	; 0x28
 800af64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af66:	2300      	movs	r3, #0
 800af68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af6a:	2300      	movs	r3, #0
 800af6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af6e:	463a      	mov	r2, r7
 800af70:	1d39      	adds	r1, r7, #4
 800af72:	f107 0308 	add.w	r3, r7, #8
 800af76:	4618      	mov	r0, r3
 800af78:	f7fe f9e4 	bl	8009344 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	68ba      	ldr	r2, [r7, #8]
 800af82:	9202      	str	r2, [sp, #8]
 800af84:	9301      	str	r3, [sp, #4]
 800af86:	2300      	movs	r3, #0
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	2300      	movs	r3, #0
 800af8c:	460a      	mov	r2, r1
 800af8e:	4924      	ldr	r1, [pc, #144]	; (800b020 <vTaskStartScheduler+0xc0>)
 800af90:	4824      	ldr	r0, [pc, #144]	; (800b024 <vTaskStartScheduler+0xc4>)
 800af92:	f7ff fdf9 	bl	800ab88 <xTaskCreateStatic>
 800af96:	4603      	mov	r3, r0
 800af98:	4a23      	ldr	r2, [pc, #140]	; (800b028 <vTaskStartScheduler+0xc8>)
 800af9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af9c:	4b22      	ldr	r3, [pc, #136]	; (800b028 <vTaskStartScheduler+0xc8>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d002      	beq.n	800afaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800afa4:	2301      	movs	r3, #1
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	e001      	b.n	800afae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800afaa:	2300      	movs	r3, #0
 800afac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d102      	bne.n	800afba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800afb4:	f000 fe1e 	bl	800bbf4 <xTimerCreateTimerTask>
 800afb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d11b      	bne.n	800aff8 <vTaskStartScheduler+0x98>
	__asm volatile
 800afc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc4:	f383 8811 	msr	BASEPRI, r3
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	613b      	str	r3, [r7, #16]
}
 800afd2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800afd4:	4b15      	ldr	r3, [pc, #84]	; (800b02c <vTaskStartScheduler+0xcc>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	3354      	adds	r3, #84	; 0x54
 800afda:	4a15      	ldr	r2, [pc, #84]	; (800b030 <vTaskStartScheduler+0xd0>)
 800afdc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800afde:	4b15      	ldr	r3, [pc, #84]	; (800b034 <vTaskStartScheduler+0xd4>)
 800afe0:	f04f 32ff 	mov.w	r2, #4294967295
 800afe4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800afe6:	4b14      	ldr	r3, [pc, #80]	; (800b038 <vTaskStartScheduler+0xd8>)
 800afe8:	2201      	movs	r2, #1
 800afea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800afec:	4b13      	ldr	r3, [pc, #76]	; (800b03c <vTaskStartScheduler+0xdc>)
 800afee:	2200      	movs	r2, #0
 800aff0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aff2:	f7fe fd05 	bl	8009a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aff6:	e00e      	b.n	800b016 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800affe:	d10a      	bne.n	800b016 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b004:	f383 8811 	msr	BASEPRI, r3
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	60fb      	str	r3, [r7, #12]
}
 800b012:	bf00      	nop
 800b014:	e7fe      	b.n	800b014 <vTaskStartScheduler+0xb4>
}
 800b016:	bf00      	nop
 800b018:	3718      	adds	r7, #24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	0800fd6c 	.word	0x0800fd6c
 800b024:	0800b665 	.word	0x0800b665
 800b028:	24004df0 	.word	0x24004df0
 800b02c:	240048f8 	.word	0x240048f8
 800b030:	2400006c 	.word	0x2400006c
 800b034:	24004dec 	.word	0x24004dec
 800b038:	24004dd8 	.word	0x24004dd8
 800b03c:	24004dd0 	.word	0x24004dd0

0800b040 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b040:	b480      	push	{r7}
 800b042:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b044:	4b04      	ldr	r3, [pc, #16]	; (800b058 <vTaskSuspendAll+0x18>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	3301      	adds	r3, #1
 800b04a:	4a03      	ldr	r2, [pc, #12]	; (800b058 <vTaskSuspendAll+0x18>)
 800b04c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b04e:	bf00      	nop
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	24004df4 	.word	0x24004df4

0800b05c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b062:	2300      	movs	r3, #0
 800b064:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b066:	2300      	movs	r3, #0
 800b068:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b06a:	4b42      	ldr	r3, [pc, #264]	; (800b174 <xTaskResumeAll+0x118>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10a      	bne.n	800b088 <xTaskResumeAll+0x2c>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	603b      	str	r3, [r7, #0]
}
 800b084:	bf00      	nop
 800b086:	e7fe      	b.n	800b086 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b088:	f7fe fd5c 	bl	8009b44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b08c:	4b39      	ldr	r3, [pc, #228]	; (800b174 <xTaskResumeAll+0x118>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	3b01      	subs	r3, #1
 800b092:	4a38      	ldr	r2, [pc, #224]	; (800b174 <xTaskResumeAll+0x118>)
 800b094:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b096:	4b37      	ldr	r3, [pc, #220]	; (800b174 <xTaskResumeAll+0x118>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d162      	bne.n	800b164 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b09e:	4b36      	ldr	r3, [pc, #216]	; (800b178 <xTaskResumeAll+0x11c>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d05e      	beq.n	800b164 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0a6:	e02f      	b.n	800b108 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0a8:	4b34      	ldr	r3, [pc, #208]	; (800b17c <xTaskResumeAll+0x120>)
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	3318      	adds	r3, #24
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7fe fbed 	bl	8009894 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	3304      	adds	r3, #4
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fe fbe8 	bl	8009894 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c8:	4b2d      	ldr	r3, [pc, #180]	; (800b180 <xTaskResumeAll+0x124>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d903      	bls.n	800b0d8 <xTaskResumeAll+0x7c>
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d4:	4a2a      	ldr	r2, [pc, #168]	; (800b180 <xTaskResumeAll+0x124>)
 800b0d6:	6013      	str	r3, [r2, #0]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0dc:	4613      	mov	r3, r2
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	4413      	add	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4a27      	ldr	r2, [pc, #156]	; (800b184 <xTaskResumeAll+0x128>)
 800b0e6:	441a      	add	r2, r3
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	3304      	adds	r3, #4
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	f7fe fb73 	bl	80097da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f8:	4b23      	ldr	r3, [pc, #140]	; (800b188 <xTaskResumeAll+0x12c>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d302      	bcc.n	800b108 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b102:	4b22      	ldr	r3, [pc, #136]	; (800b18c <xTaskResumeAll+0x130>)
 800b104:	2201      	movs	r2, #1
 800b106:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b108:	4b1c      	ldr	r3, [pc, #112]	; (800b17c <xTaskResumeAll+0x120>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1cb      	bne.n	800b0a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b116:	f000 fb5f 	bl	800b7d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b11a:	4b1d      	ldr	r3, [pc, #116]	; (800b190 <xTaskResumeAll+0x134>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d010      	beq.n	800b148 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b126:	f000 f847 	bl	800b1b8 <xTaskIncrementTick>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b130:	4b16      	ldr	r3, [pc, #88]	; (800b18c <xTaskResumeAll+0x130>)
 800b132:	2201      	movs	r2, #1
 800b134:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	3b01      	subs	r3, #1
 800b13a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1f1      	bne.n	800b126 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b142:	4b13      	ldr	r3, [pc, #76]	; (800b190 <xTaskResumeAll+0x134>)
 800b144:	2200      	movs	r2, #0
 800b146:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b148:	4b10      	ldr	r3, [pc, #64]	; (800b18c <xTaskResumeAll+0x130>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d009      	beq.n	800b164 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b150:	2301      	movs	r3, #1
 800b152:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b154:	4b0f      	ldr	r3, [pc, #60]	; (800b194 <xTaskResumeAll+0x138>)
 800b156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b15a:	601a      	str	r2, [r3, #0]
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b164:	f7fe fd1e 	bl	8009ba4 <vPortExitCritical>

	return xAlreadyYielded;
 800b168:	68bb      	ldr	r3, [r7, #8]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	24004df4 	.word	0x24004df4
 800b178:	24004dcc 	.word	0x24004dcc
 800b17c:	24004d8c 	.word	0x24004d8c
 800b180:	24004dd4 	.word	0x24004dd4
 800b184:	240048fc 	.word	0x240048fc
 800b188:	240048f8 	.word	0x240048f8
 800b18c:	24004de0 	.word	0x24004de0
 800b190:	24004ddc 	.word	0x24004ddc
 800b194:	e000ed04 	.word	0xe000ed04

0800b198 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b19e:	4b05      	ldr	r3, [pc, #20]	; (800b1b4 <xTaskGetTickCount+0x1c>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b1a4:	687b      	ldr	r3, [r7, #4]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	24004dd0 	.word	0x24004dd0

0800b1b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1c2:	4b4f      	ldr	r3, [pc, #316]	; (800b300 <xTaskIncrementTick+0x148>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f040 808f 	bne.w	800b2ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b1cc:	4b4d      	ldr	r3, [pc, #308]	; (800b304 <xTaskIncrementTick+0x14c>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b1d4:	4a4b      	ldr	r2, [pc, #300]	; (800b304 <xTaskIncrementTick+0x14c>)
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d120      	bne.n	800b222 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1e0:	4b49      	ldr	r3, [pc, #292]	; (800b308 <xTaskIncrementTick+0x150>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00a      	beq.n	800b200 <xTaskIncrementTick+0x48>
	__asm volatile
 800b1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ee:	f383 8811 	msr	BASEPRI, r3
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	603b      	str	r3, [r7, #0]
}
 800b1fc:	bf00      	nop
 800b1fe:	e7fe      	b.n	800b1fe <xTaskIncrementTick+0x46>
 800b200:	4b41      	ldr	r3, [pc, #260]	; (800b308 <xTaskIncrementTick+0x150>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	60fb      	str	r3, [r7, #12]
 800b206:	4b41      	ldr	r3, [pc, #260]	; (800b30c <xTaskIncrementTick+0x154>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a3f      	ldr	r2, [pc, #252]	; (800b308 <xTaskIncrementTick+0x150>)
 800b20c:	6013      	str	r3, [r2, #0]
 800b20e:	4a3f      	ldr	r2, [pc, #252]	; (800b30c <xTaskIncrementTick+0x154>)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6013      	str	r3, [r2, #0]
 800b214:	4b3e      	ldr	r3, [pc, #248]	; (800b310 <xTaskIncrementTick+0x158>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	3301      	adds	r3, #1
 800b21a:	4a3d      	ldr	r2, [pc, #244]	; (800b310 <xTaskIncrementTick+0x158>)
 800b21c:	6013      	str	r3, [r2, #0]
 800b21e:	f000 fadb 	bl	800b7d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b222:	4b3c      	ldr	r3, [pc, #240]	; (800b314 <xTaskIncrementTick+0x15c>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	693a      	ldr	r2, [r7, #16]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d349      	bcc.n	800b2c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b22c:	4b36      	ldr	r3, [pc, #216]	; (800b308 <xTaskIncrementTick+0x150>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d104      	bne.n	800b240 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b236:	4b37      	ldr	r3, [pc, #220]	; (800b314 <xTaskIncrementTick+0x15c>)
 800b238:	f04f 32ff 	mov.w	r2, #4294967295
 800b23c:	601a      	str	r2, [r3, #0]
					break;
 800b23e:	e03f      	b.n	800b2c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b240:	4b31      	ldr	r3, [pc, #196]	; (800b308 <xTaskIncrementTick+0x150>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	429a      	cmp	r2, r3
 800b256:	d203      	bcs.n	800b260 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b258:	4a2e      	ldr	r2, [pc, #184]	; (800b314 <xTaskIncrementTick+0x15c>)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b25e:	e02f      	b.n	800b2c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	3304      	adds	r3, #4
 800b264:	4618      	mov	r0, r3
 800b266:	f7fe fb15 	bl	8009894 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d004      	beq.n	800b27c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	3318      	adds	r3, #24
 800b276:	4618      	mov	r0, r3
 800b278:	f7fe fb0c 	bl	8009894 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b280:	4b25      	ldr	r3, [pc, #148]	; (800b318 <xTaskIncrementTick+0x160>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	429a      	cmp	r2, r3
 800b286:	d903      	bls.n	800b290 <xTaskIncrementTick+0xd8>
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28c:	4a22      	ldr	r2, [pc, #136]	; (800b318 <xTaskIncrementTick+0x160>)
 800b28e:	6013      	str	r3, [r2, #0]
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b294:	4613      	mov	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	4413      	add	r3, r2
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	4a1f      	ldr	r2, [pc, #124]	; (800b31c <xTaskIncrementTick+0x164>)
 800b29e:	441a      	add	r2, r3
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4610      	mov	r0, r2
 800b2a8:	f7fe fa97 	bl	80097da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b0:	4b1b      	ldr	r3, [pc, #108]	; (800b320 <xTaskIncrementTick+0x168>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d3b8      	bcc.n	800b22c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2be:	e7b5      	b.n	800b22c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2c0:	4b17      	ldr	r3, [pc, #92]	; (800b320 <xTaskIncrementTick+0x168>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c6:	4915      	ldr	r1, [pc, #84]	; (800b31c <xTaskIncrementTick+0x164>)
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	4413      	add	r3, r2
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	440b      	add	r3, r1
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d901      	bls.n	800b2dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b2dc:	4b11      	ldr	r3, [pc, #68]	; (800b324 <xTaskIncrementTick+0x16c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d007      	beq.n	800b2f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	617b      	str	r3, [r7, #20]
 800b2e8:	e004      	b.n	800b2f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b2ea:	4b0f      	ldr	r3, [pc, #60]	; (800b328 <xTaskIncrementTick+0x170>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	4a0d      	ldr	r2, [pc, #52]	; (800b328 <xTaskIncrementTick+0x170>)
 800b2f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b2f4:	697b      	ldr	r3, [r7, #20]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	24004df4 	.word	0x24004df4
 800b304:	24004dd0 	.word	0x24004dd0
 800b308:	24004d84 	.word	0x24004d84
 800b30c:	24004d88 	.word	0x24004d88
 800b310:	24004de4 	.word	0x24004de4
 800b314:	24004dec 	.word	0x24004dec
 800b318:	24004dd4 	.word	0x24004dd4
 800b31c:	240048fc 	.word	0x240048fc
 800b320:	240048f8 	.word	0x240048f8
 800b324:	24004de0 	.word	0x24004de0
 800b328:	24004ddc 	.word	0x24004ddc

0800b32c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b332:	4b2a      	ldr	r3, [pc, #168]	; (800b3dc <vTaskSwitchContext+0xb0>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d003      	beq.n	800b342 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b33a:	4b29      	ldr	r3, [pc, #164]	; (800b3e0 <vTaskSwitchContext+0xb4>)
 800b33c:	2201      	movs	r2, #1
 800b33e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b340:	e046      	b.n	800b3d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b342:	4b27      	ldr	r3, [pc, #156]	; (800b3e0 <vTaskSwitchContext+0xb4>)
 800b344:	2200      	movs	r2, #0
 800b346:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b348:	4b26      	ldr	r3, [pc, #152]	; (800b3e4 <vTaskSwitchContext+0xb8>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	60fb      	str	r3, [r7, #12]
 800b34e:	e010      	b.n	800b372 <vTaskSwitchContext+0x46>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10a      	bne.n	800b36c <vTaskSwitchContext+0x40>
	__asm volatile
 800b356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35a:	f383 8811 	msr	BASEPRI, r3
 800b35e:	f3bf 8f6f 	isb	sy
 800b362:	f3bf 8f4f 	dsb	sy
 800b366:	607b      	str	r3, [r7, #4]
}
 800b368:	bf00      	nop
 800b36a:	e7fe      	b.n	800b36a <vTaskSwitchContext+0x3e>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	3b01      	subs	r3, #1
 800b370:	60fb      	str	r3, [r7, #12]
 800b372:	491d      	ldr	r1, [pc, #116]	; (800b3e8 <vTaskSwitchContext+0xbc>)
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	4613      	mov	r3, r2
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4413      	add	r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	440b      	add	r3, r1
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d0e4      	beq.n	800b350 <vTaskSwitchContext+0x24>
 800b386:	68fa      	ldr	r2, [r7, #12]
 800b388:	4613      	mov	r3, r2
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	4413      	add	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4a15      	ldr	r2, [pc, #84]	; (800b3e8 <vTaskSwitchContext+0xbc>)
 800b392:	4413      	add	r3, r2
 800b394:	60bb      	str	r3, [r7, #8]
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	605a      	str	r2, [r3, #4]
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	3308      	adds	r3, #8
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d104      	bne.n	800b3b6 <vTaskSwitchContext+0x8a>
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	605a      	str	r2, [r3, #4]
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	4a0b      	ldr	r2, [pc, #44]	; (800b3ec <vTaskSwitchContext+0xc0>)
 800b3be:	6013      	str	r3, [r2, #0]
 800b3c0:	4a08      	ldr	r2, [pc, #32]	; (800b3e4 <vTaskSwitchContext+0xb8>)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b3c6:	4b09      	ldr	r3, [pc, #36]	; (800b3ec <vTaskSwitchContext+0xc0>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	3354      	adds	r3, #84	; 0x54
 800b3cc:	4a08      	ldr	r2, [pc, #32]	; (800b3f0 <vTaskSwitchContext+0xc4>)
 800b3ce:	6013      	str	r3, [r2, #0]
}
 800b3d0:	bf00      	nop
 800b3d2:	3714      	adds	r7, #20
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr
 800b3dc:	24004df4 	.word	0x24004df4
 800b3e0:	24004de0 	.word	0x24004de0
 800b3e4:	24004dd4 	.word	0x24004dd4
 800b3e8:	240048fc 	.word	0x240048fc
 800b3ec:	240048f8 	.word	0x240048f8
 800b3f0:	2400006c 	.word	0x2400006c

0800b3f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10a      	bne.n	800b41a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	60fb      	str	r3, [r7, #12]
}
 800b416:	bf00      	nop
 800b418:	e7fe      	b.n	800b418 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b41a:	4b07      	ldr	r3, [pc, #28]	; (800b438 <vTaskPlaceOnEventList+0x44>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	3318      	adds	r3, #24
 800b420:	4619      	mov	r1, r3
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7fe f9fd 	bl	8009822 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b428:	2101      	movs	r1, #1
 800b42a:	6838      	ldr	r0, [r7, #0]
 800b42c:	f000 fb8e 	bl	800bb4c <prvAddCurrentTaskToDelayedList>
}
 800b430:	bf00      	nop
 800b432:	3710      	adds	r7, #16
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	240048f8 	.word	0x240048f8

0800b43c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10a      	bne.n	800b464 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	617b      	str	r3, [r7, #20]
}
 800b460:	bf00      	nop
 800b462:	e7fe      	b.n	800b462 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b464:	4b0a      	ldr	r3, [pc, #40]	; (800b490 <vTaskPlaceOnEventListRestricted+0x54>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	3318      	adds	r3, #24
 800b46a:	4619      	mov	r1, r3
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f7fe f9b4 	bl	80097da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b478:	f04f 33ff 	mov.w	r3, #4294967295
 800b47c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b47e:	6879      	ldr	r1, [r7, #4]
 800b480:	68b8      	ldr	r0, [r7, #8]
 800b482:	f000 fb63 	bl	800bb4c <prvAddCurrentTaskToDelayedList>
	}
 800b486:	bf00      	nop
 800b488:	3718      	adds	r7, #24
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	240048f8 	.word	0x240048f8

0800b494 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10a      	bne.n	800b4c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	60fb      	str	r3, [r7, #12]
}
 800b4bc:	bf00      	nop
 800b4be:	e7fe      	b.n	800b4be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	3318      	adds	r3, #24
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7fe f9e5 	bl	8009894 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4ca:	4b1e      	ldr	r3, [pc, #120]	; (800b544 <xTaskRemoveFromEventList+0xb0>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d11d      	bne.n	800b50e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	3304      	adds	r3, #4
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7fe f9dc 	bl	8009894 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4e0:	4b19      	ldr	r3, [pc, #100]	; (800b548 <xTaskRemoveFromEventList+0xb4>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d903      	bls.n	800b4f0 <xTaskRemoveFromEventList+0x5c>
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ec:	4a16      	ldr	r2, [pc, #88]	; (800b548 <xTaskRemoveFromEventList+0xb4>)
 800b4ee:	6013      	str	r3, [r2, #0]
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	4413      	add	r3, r2
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	4a13      	ldr	r2, [pc, #76]	; (800b54c <xTaskRemoveFromEventList+0xb8>)
 800b4fe:	441a      	add	r2, r3
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	3304      	adds	r3, #4
 800b504:	4619      	mov	r1, r3
 800b506:	4610      	mov	r0, r2
 800b508:	f7fe f967 	bl	80097da <vListInsertEnd>
 800b50c:	e005      	b.n	800b51a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	3318      	adds	r3, #24
 800b512:	4619      	mov	r1, r3
 800b514:	480e      	ldr	r0, [pc, #56]	; (800b550 <xTaskRemoveFromEventList+0xbc>)
 800b516:	f7fe f960 	bl	80097da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b51e:	4b0d      	ldr	r3, [pc, #52]	; (800b554 <xTaskRemoveFromEventList+0xc0>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b524:	429a      	cmp	r2, r3
 800b526:	d905      	bls.n	800b534 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b528:	2301      	movs	r3, #1
 800b52a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b52c:	4b0a      	ldr	r3, [pc, #40]	; (800b558 <xTaskRemoveFromEventList+0xc4>)
 800b52e:	2201      	movs	r2, #1
 800b530:	601a      	str	r2, [r3, #0]
 800b532:	e001      	b.n	800b538 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b534:	2300      	movs	r3, #0
 800b536:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b538:	697b      	ldr	r3, [r7, #20]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3718      	adds	r7, #24
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	24004df4 	.word	0x24004df4
 800b548:	24004dd4 	.word	0x24004dd4
 800b54c:	240048fc 	.word	0x240048fc
 800b550:	24004d8c 	.word	0x24004d8c
 800b554:	240048f8 	.word	0x240048f8
 800b558:	24004de0 	.word	0x24004de0

0800b55c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b564:	4b06      	ldr	r3, [pc, #24]	; (800b580 <vTaskInternalSetTimeOutState+0x24>)
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b56c:	4b05      	ldr	r3, [pc, #20]	; (800b584 <vTaskInternalSetTimeOutState+0x28>)
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	605a      	str	r2, [r3, #4]
}
 800b574:	bf00      	nop
 800b576:	370c      	adds	r7, #12
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr
 800b580:	24004de4 	.word	0x24004de4
 800b584:	24004dd0 	.word	0x24004dd0

0800b588 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b088      	sub	sp, #32
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d10a      	bne.n	800b5ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59c:	f383 8811 	msr	BASEPRI, r3
 800b5a0:	f3bf 8f6f 	isb	sy
 800b5a4:	f3bf 8f4f 	dsb	sy
 800b5a8:	613b      	str	r3, [r7, #16]
}
 800b5aa:	bf00      	nop
 800b5ac:	e7fe      	b.n	800b5ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10a      	bne.n	800b5ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	60fb      	str	r3, [r7, #12]
}
 800b5c6:	bf00      	nop
 800b5c8:	e7fe      	b.n	800b5c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b5ca:	f7fe fabb 	bl	8009b44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b5ce:	4b1d      	ldr	r3, [pc, #116]	; (800b644 <xTaskCheckForTimeOut+0xbc>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	69ba      	ldr	r2, [r7, #24]
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5e6:	d102      	bne.n	800b5ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	61fb      	str	r3, [r7, #28]
 800b5ec:	e023      	b.n	800b636 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	4b15      	ldr	r3, [pc, #84]	; (800b648 <xTaskCheckForTimeOut+0xc0>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d007      	beq.n	800b60a <xTaskCheckForTimeOut+0x82>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	69ba      	ldr	r2, [r7, #24]
 800b600:	429a      	cmp	r2, r3
 800b602:	d302      	bcc.n	800b60a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b604:	2301      	movs	r3, #1
 800b606:	61fb      	str	r3, [r7, #28]
 800b608:	e015      	b.n	800b636 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	429a      	cmp	r2, r3
 800b612:	d20b      	bcs.n	800b62c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	1ad2      	subs	r2, r2, r3
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7ff ff9b 	bl	800b55c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b626:	2300      	movs	r3, #0
 800b628:	61fb      	str	r3, [r7, #28]
 800b62a:	e004      	b.n	800b636 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	2200      	movs	r2, #0
 800b630:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b632:	2301      	movs	r3, #1
 800b634:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b636:	f7fe fab5 	bl	8009ba4 <vPortExitCritical>

	return xReturn;
 800b63a:	69fb      	ldr	r3, [r7, #28]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3720      	adds	r7, #32
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	24004dd0 	.word	0x24004dd0
 800b648:	24004de4 	.word	0x24004de4

0800b64c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b64c:	b480      	push	{r7}
 800b64e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b650:	4b03      	ldr	r3, [pc, #12]	; (800b660 <vTaskMissedYield+0x14>)
 800b652:	2201      	movs	r2, #1
 800b654:	601a      	str	r2, [r3, #0]
}
 800b656:	bf00      	nop
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	24004de0 	.word	0x24004de0

0800b664 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b66c:	f000 f852 	bl	800b714 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b670:	4b06      	ldr	r3, [pc, #24]	; (800b68c <prvIdleTask+0x28>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d9f9      	bls.n	800b66c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b678:	4b05      	ldr	r3, [pc, #20]	; (800b690 <prvIdleTask+0x2c>)
 800b67a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b67e:	601a      	str	r2, [r3, #0]
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b688:	e7f0      	b.n	800b66c <prvIdleTask+0x8>
 800b68a:	bf00      	nop
 800b68c:	240048fc 	.word	0x240048fc
 800b690:	e000ed04 	.word	0xe000ed04

0800b694 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b69a:	2300      	movs	r3, #0
 800b69c:	607b      	str	r3, [r7, #4]
 800b69e:	e00c      	b.n	800b6ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	4a12      	ldr	r2, [pc, #72]	; (800b6f4 <prvInitialiseTaskLists+0x60>)
 800b6ac:	4413      	add	r3, r2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fe f866 	bl	8009780 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	607b      	str	r3, [r7, #4]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2b37      	cmp	r3, #55	; 0x37
 800b6be:	d9ef      	bls.n	800b6a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6c0:	480d      	ldr	r0, [pc, #52]	; (800b6f8 <prvInitialiseTaskLists+0x64>)
 800b6c2:	f7fe f85d 	bl	8009780 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6c6:	480d      	ldr	r0, [pc, #52]	; (800b6fc <prvInitialiseTaskLists+0x68>)
 800b6c8:	f7fe f85a 	bl	8009780 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6cc:	480c      	ldr	r0, [pc, #48]	; (800b700 <prvInitialiseTaskLists+0x6c>)
 800b6ce:	f7fe f857 	bl	8009780 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6d2:	480c      	ldr	r0, [pc, #48]	; (800b704 <prvInitialiseTaskLists+0x70>)
 800b6d4:	f7fe f854 	bl	8009780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6d8:	480b      	ldr	r0, [pc, #44]	; (800b708 <prvInitialiseTaskLists+0x74>)
 800b6da:	f7fe f851 	bl	8009780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6de:	4b0b      	ldr	r3, [pc, #44]	; (800b70c <prvInitialiseTaskLists+0x78>)
 800b6e0:	4a05      	ldr	r2, [pc, #20]	; (800b6f8 <prvInitialiseTaskLists+0x64>)
 800b6e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6e4:	4b0a      	ldr	r3, [pc, #40]	; (800b710 <prvInitialiseTaskLists+0x7c>)
 800b6e6:	4a05      	ldr	r2, [pc, #20]	; (800b6fc <prvInitialiseTaskLists+0x68>)
 800b6e8:	601a      	str	r2, [r3, #0]
}
 800b6ea:	bf00      	nop
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	240048fc 	.word	0x240048fc
 800b6f8:	24004d5c 	.word	0x24004d5c
 800b6fc:	24004d70 	.word	0x24004d70
 800b700:	24004d8c 	.word	0x24004d8c
 800b704:	24004da0 	.word	0x24004da0
 800b708:	24004db8 	.word	0x24004db8
 800b70c:	24004d84 	.word	0x24004d84
 800b710:	24004d88 	.word	0x24004d88

0800b714 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b71a:	e019      	b.n	800b750 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b71c:	f7fe fa12 	bl	8009b44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b720:	4b10      	ldr	r3, [pc, #64]	; (800b764 <prvCheckTasksWaitingTermination+0x50>)
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	3304      	adds	r3, #4
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7fe f8b1 	bl	8009894 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b732:	4b0d      	ldr	r3, [pc, #52]	; (800b768 <prvCheckTasksWaitingTermination+0x54>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3b01      	subs	r3, #1
 800b738:	4a0b      	ldr	r2, [pc, #44]	; (800b768 <prvCheckTasksWaitingTermination+0x54>)
 800b73a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b73c:	4b0b      	ldr	r3, [pc, #44]	; (800b76c <prvCheckTasksWaitingTermination+0x58>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3b01      	subs	r3, #1
 800b742:	4a0a      	ldr	r2, [pc, #40]	; (800b76c <prvCheckTasksWaitingTermination+0x58>)
 800b744:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b746:	f7fe fa2d 	bl	8009ba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f810 	bl	800b770 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b750:	4b06      	ldr	r3, [pc, #24]	; (800b76c <prvCheckTasksWaitingTermination+0x58>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1e1      	bne.n	800b71c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b758:	bf00      	nop
 800b75a:	bf00      	nop
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	24004da0 	.word	0x24004da0
 800b768:	24004dcc 	.word	0x24004dcc
 800b76c:	24004db4 	.word	0x24004db4

0800b770 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	3354      	adds	r3, #84	; 0x54
 800b77c:	4618      	mov	r0, r3
 800b77e:	f001 fbe5 	bl	800cf4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d108      	bne.n	800b79e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b790:	4618      	mov	r0, r3
 800b792:	f7fd fed7 	bl	8009544 <vPortFree>
				vPortFree( pxTCB );
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f7fd fed4 	bl	8009544 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b79c:	e018      	b.n	800b7d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d103      	bne.n	800b7b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f7fd fecb 	bl	8009544 <vPortFree>
	}
 800b7ae:	e00f      	b.n	800b7d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	d00a      	beq.n	800b7d0 <prvDeleteTCB+0x60>
	__asm volatile
 800b7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7be:	f383 8811 	msr	BASEPRI, r3
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	60fb      	str	r3, [r7, #12]
}
 800b7cc:	bf00      	nop
 800b7ce:	e7fe      	b.n	800b7ce <prvDeleteTCB+0x5e>
	}
 800b7d0:	bf00      	nop
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7de:	4b0c      	ldr	r3, [pc, #48]	; (800b810 <prvResetNextTaskUnblockTime+0x38>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d104      	bne.n	800b7f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7e8:	4b0a      	ldr	r3, [pc, #40]	; (800b814 <prvResetNextTaskUnblockTime+0x3c>)
 800b7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7f0:	e008      	b.n	800b804 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f2:	4b07      	ldr	r3, [pc, #28]	; (800b810 <prvResetNextTaskUnblockTime+0x38>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	4a04      	ldr	r2, [pc, #16]	; (800b814 <prvResetNextTaskUnblockTime+0x3c>)
 800b802:	6013      	str	r3, [r2, #0]
}
 800b804:	bf00      	nop
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr
 800b810:	24004d84 	.word	0x24004d84
 800b814:	24004dec 	.word	0x24004dec

0800b818 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b81e:	4b05      	ldr	r3, [pc, #20]	; (800b834 <xTaskGetCurrentTaskHandle+0x1c>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b824:	687b      	ldr	r3, [r7, #4]
	}
 800b826:	4618      	mov	r0, r3
 800b828:	370c      	adds	r7, #12
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	240048f8 	.word	0x240048f8

0800b838 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b83e:	4b0b      	ldr	r3, [pc, #44]	; (800b86c <xTaskGetSchedulerState+0x34>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d102      	bne.n	800b84c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b846:	2301      	movs	r3, #1
 800b848:	607b      	str	r3, [r7, #4]
 800b84a:	e008      	b.n	800b85e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b84c:	4b08      	ldr	r3, [pc, #32]	; (800b870 <xTaskGetSchedulerState+0x38>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d102      	bne.n	800b85a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b854:	2302      	movs	r3, #2
 800b856:	607b      	str	r3, [r7, #4]
 800b858:	e001      	b.n	800b85e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b85a:	2300      	movs	r3, #0
 800b85c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b85e:	687b      	ldr	r3, [r7, #4]
	}
 800b860:	4618      	mov	r0, r3
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	24004dd8 	.word	0x24004dd8
 800b870:	24004df4 	.word	0x24004df4

0800b874 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b880:	2300      	movs	r3, #0
 800b882:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d051      	beq.n	800b92e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b88e:	4b2a      	ldr	r3, [pc, #168]	; (800b938 <xTaskPriorityInherit+0xc4>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b894:	429a      	cmp	r2, r3
 800b896:	d241      	bcs.n	800b91c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	699b      	ldr	r3, [r3, #24]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	db06      	blt.n	800b8ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8a0:	4b25      	ldr	r3, [pc, #148]	; (800b938 <xTaskPriorityInherit+0xc4>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	6959      	ldr	r1, [r3, #20]
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	4413      	add	r3, r2
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	4a1f      	ldr	r2, [pc, #124]	; (800b93c <xTaskPriorityInherit+0xc8>)
 800b8c0:	4413      	add	r3, r2
 800b8c2:	4299      	cmp	r1, r3
 800b8c4:	d122      	bne.n	800b90c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fd ffe2 	bl	8009894 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b8d0:	4b19      	ldr	r3, [pc, #100]	; (800b938 <xTaskPriorityInherit+0xc4>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8de:	4b18      	ldr	r3, [pc, #96]	; (800b940 <xTaskPriorityInherit+0xcc>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d903      	bls.n	800b8ee <xTaskPriorityInherit+0x7a>
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ea:	4a15      	ldr	r2, [pc, #84]	; (800b940 <xTaskPriorityInherit+0xcc>)
 800b8ec:	6013      	str	r3, [r2, #0]
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	4413      	add	r3, r2
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	4a10      	ldr	r2, [pc, #64]	; (800b93c <xTaskPriorityInherit+0xc8>)
 800b8fc:	441a      	add	r2, r3
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	3304      	adds	r3, #4
 800b902:	4619      	mov	r1, r3
 800b904:	4610      	mov	r0, r2
 800b906:	f7fd ff68 	bl	80097da <vListInsertEnd>
 800b90a:	e004      	b.n	800b916 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b90c:	4b0a      	ldr	r3, [pc, #40]	; (800b938 <xTaskPriorityInherit+0xc4>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b916:	2301      	movs	r3, #1
 800b918:	60fb      	str	r3, [r7, #12]
 800b91a:	e008      	b.n	800b92e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b920:	4b05      	ldr	r3, [pc, #20]	; (800b938 <xTaskPriorityInherit+0xc4>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b926:	429a      	cmp	r2, r3
 800b928:	d201      	bcs.n	800b92e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b92a:	2301      	movs	r3, #1
 800b92c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b92e:	68fb      	ldr	r3, [r7, #12]
	}
 800b930:	4618      	mov	r0, r3
 800b932:	3710      	adds	r7, #16
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	240048f8 	.word	0x240048f8
 800b93c:	240048fc 	.word	0x240048fc
 800b940:	24004dd4 	.word	0x24004dd4

0800b944 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b950:	2300      	movs	r3, #0
 800b952:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d056      	beq.n	800ba08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b95a:	4b2e      	ldr	r3, [pc, #184]	; (800ba14 <xTaskPriorityDisinherit+0xd0>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	429a      	cmp	r2, r3
 800b962:	d00a      	beq.n	800b97a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	60fb      	str	r3, [r7, #12]
}
 800b976:	bf00      	nop
 800b978:	e7fe      	b.n	800b978 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d10a      	bne.n	800b998 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	60bb      	str	r3, [r7, #8]
}
 800b994:	bf00      	nop
 800b996:	e7fe      	b.n	800b996 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b99c:	1e5a      	subs	r2, r3, #1
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d02c      	beq.n	800ba08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d128      	bne.n	800ba08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	3304      	adds	r3, #4
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fd ff6a 	bl	8009894 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d8:	4b0f      	ldr	r3, [pc, #60]	; (800ba18 <xTaskPriorityDisinherit+0xd4>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d903      	bls.n	800b9e8 <xTaskPriorityDisinherit+0xa4>
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e4:	4a0c      	ldr	r2, [pc, #48]	; (800ba18 <xTaskPriorityDisinherit+0xd4>)
 800b9e6:	6013      	str	r3, [r2, #0]
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	4413      	add	r3, r2
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	4a09      	ldr	r2, [pc, #36]	; (800ba1c <xTaskPriorityDisinherit+0xd8>)
 800b9f6:	441a      	add	r2, r3
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	3304      	adds	r3, #4
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	4610      	mov	r0, r2
 800ba00:	f7fd feeb 	bl	80097da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba04:	2301      	movs	r3, #1
 800ba06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba08:	697b      	ldr	r3, [r7, #20]
	}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3718      	adds	r7, #24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	240048f8 	.word	0x240048f8
 800ba18:	24004dd4 	.word	0x24004dd4
 800ba1c:	240048fc 	.word	0x240048fc

0800ba20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b088      	sub	sp, #32
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d06a      	beq.n	800bb0e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d10a      	bne.n	800ba56 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ba40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	60fb      	str	r3, [r7, #12]
}
 800ba52:	bf00      	nop
 800ba54:	e7fe      	b.n	800ba54 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba5a:	683a      	ldr	r2, [r7, #0]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d902      	bls.n	800ba66 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	61fb      	str	r3, [r7, #28]
 800ba64:	e002      	b.n	800ba6c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba6a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba70:	69fa      	ldr	r2, [r7, #28]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d04b      	beq.n	800bb0e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba7a:	697a      	ldr	r2, [r7, #20]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d146      	bne.n	800bb0e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ba80:	4b25      	ldr	r3, [pc, #148]	; (800bb18 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	69ba      	ldr	r2, [r7, #24]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d10a      	bne.n	800baa0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ba8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8e:	f383 8811 	msr	BASEPRI, r3
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	60bb      	str	r3, [r7, #8]
}
 800ba9c:	bf00      	nop
 800ba9e:	e7fe      	b.n	800ba9e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	69fa      	ldr	r2, [r7, #28]
 800baaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	699b      	ldr	r3, [r3, #24]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	db04      	blt.n	800babe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	6959      	ldr	r1, [r3, #20]
 800bac2:	693a      	ldr	r2, [r7, #16]
 800bac4:	4613      	mov	r3, r2
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	4413      	add	r3, r2
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	4a13      	ldr	r2, [pc, #76]	; (800bb1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bace:	4413      	add	r3, r2
 800bad0:	4299      	cmp	r1, r3
 800bad2:	d11c      	bne.n	800bb0e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bad4:	69bb      	ldr	r3, [r7, #24]
 800bad6:	3304      	adds	r3, #4
 800bad8:	4618      	mov	r0, r3
 800bada:	f7fd fedb 	bl	8009894 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bade:	69bb      	ldr	r3, [r7, #24]
 800bae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae2:	4b0f      	ldr	r3, [pc, #60]	; (800bb20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d903      	bls.n	800baf2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800baea:	69bb      	ldr	r3, [r7, #24]
 800baec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baee:	4a0c      	ldr	r2, [pc, #48]	; (800bb20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800baf0:	6013      	str	r3, [r2, #0]
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baf6:	4613      	mov	r3, r2
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	4413      	add	r3, r2
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	4a07      	ldr	r2, [pc, #28]	; (800bb1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bb00:	441a      	add	r2, r3
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	3304      	adds	r3, #4
 800bb06:	4619      	mov	r1, r3
 800bb08:	4610      	mov	r0, r2
 800bb0a:	f7fd fe66 	bl	80097da <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb0e:	bf00      	nop
 800bb10:	3720      	adds	r7, #32
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	240048f8 	.word	0x240048f8
 800bb1c:	240048fc 	.word	0x240048fc
 800bb20:	24004dd4 	.word	0x24004dd4

0800bb24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bb24:	b480      	push	{r7}
 800bb26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bb28:	4b07      	ldr	r3, [pc, #28]	; (800bb48 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d004      	beq.n	800bb3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bb30:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb36:	3201      	adds	r2, #1
 800bb38:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bb3a:	4b03      	ldr	r3, [pc, #12]	; (800bb48 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
	}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr
 800bb48:	240048f8 	.word	0x240048f8

0800bb4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb56:	4b21      	ldr	r3, [pc, #132]	; (800bbdc <prvAddCurrentTaskToDelayedList+0x90>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb5c:	4b20      	ldr	r3, [pc, #128]	; (800bbe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	3304      	adds	r3, #4
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fd fe96 	bl	8009894 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb6e:	d10a      	bne.n	800bb86 <prvAddCurrentTaskToDelayedList+0x3a>
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d007      	beq.n	800bb86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb76:	4b1a      	ldr	r3, [pc, #104]	; (800bbe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	3304      	adds	r3, #4
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	4819      	ldr	r0, [pc, #100]	; (800bbe4 <prvAddCurrentTaskToDelayedList+0x98>)
 800bb80:	f7fd fe2b 	bl	80097da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb84:	e026      	b.n	800bbd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb86:	68fa      	ldr	r2, [r7, #12]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb8e:	4b14      	ldr	r3, [pc, #80]	; (800bbe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68ba      	ldr	r2, [r7, #8]
 800bb94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb96:	68ba      	ldr	r2, [r7, #8]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d209      	bcs.n	800bbb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb9e:	4b12      	ldr	r3, [pc, #72]	; (800bbe8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	4b0f      	ldr	r3, [pc, #60]	; (800bbe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	3304      	adds	r3, #4
 800bba8:	4619      	mov	r1, r3
 800bbaa:	4610      	mov	r0, r2
 800bbac:	f7fd fe39 	bl	8009822 <vListInsert>
}
 800bbb0:	e010      	b.n	800bbd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbb2:	4b0e      	ldr	r3, [pc, #56]	; (800bbec <prvAddCurrentTaskToDelayedList+0xa0>)
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	4b0a      	ldr	r3, [pc, #40]	; (800bbe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3304      	adds	r3, #4
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	4610      	mov	r0, r2
 800bbc0:	f7fd fe2f 	bl	8009822 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bbc4:	4b0a      	ldr	r3, [pc, #40]	; (800bbf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d202      	bcs.n	800bbd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bbce:	4a08      	ldr	r2, [pc, #32]	; (800bbf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	6013      	str	r3, [r2, #0]
}
 800bbd4:	bf00      	nop
 800bbd6:	3710      	adds	r7, #16
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	24004dd0 	.word	0x24004dd0
 800bbe0:	240048f8 	.word	0x240048f8
 800bbe4:	24004db8 	.word	0x24004db8
 800bbe8:	24004d88 	.word	0x24004d88
 800bbec:	24004d84 	.word	0x24004d84
 800bbf0:	24004dec 	.word	0x24004dec

0800bbf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b08a      	sub	sp, #40	; 0x28
 800bbf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bbfe:	f000 fb07 	bl	800c210 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc02:	4b1c      	ldr	r3, [pc, #112]	; (800bc74 <xTimerCreateTimerTask+0x80>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d021      	beq.n	800bc4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc12:	1d3a      	adds	r2, r7, #4
 800bc14:	f107 0108 	add.w	r1, r7, #8
 800bc18:	f107 030c 	add.w	r3, r7, #12
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7fd fbab 	bl	8009378 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc22:	6879      	ldr	r1, [r7, #4]
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	9202      	str	r2, [sp, #8]
 800bc2a:	9301      	str	r3, [sp, #4]
 800bc2c:	2302      	movs	r3, #2
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	2300      	movs	r3, #0
 800bc32:	460a      	mov	r2, r1
 800bc34:	4910      	ldr	r1, [pc, #64]	; (800bc78 <xTimerCreateTimerTask+0x84>)
 800bc36:	4811      	ldr	r0, [pc, #68]	; (800bc7c <xTimerCreateTimerTask+0x88>)
 800bc38:	f7fe ffa6 	bl	800ab88 <xTaskCreateStatic>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	4a10      	ldr	r2, [pc, #64]	; (800bc80 <xTimerCreateTimerTask+0x8c>)
 800bc40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc42:	4b0f      	ldr	r3, [pc, #60]	; (800bc80 <xTimerCreateTimerTask+0x8c>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d001      	beq.n	800bc4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10a      	bne.n	800bc6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	613b      	str	r3, [r7, #16]
}
 800bc66:	bf00      	nop
 800bc68:	e7fe      	b.n	800bc68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bc6a:	697b      	ldr	r3, [r7, #20]
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3718      	adds	r7, #24
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}
 800bc74:	24004e28 	.word	0x24004e28
 800bc78:	0800fd74 	.word	0x0800fd74
 800bc7c:	0800bdb9 	.word	0x0800bdb9
 800bc80:	24004e2c 	.word	0x24004e2c

0800bc84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b08a      	sub	sp, #40	; 0x28
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	607a      	str	r2, [r7, #4]
 800bc90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bc92:	2300      	movs	r3, #0
 800bc94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d10a      	bne.n	800bcb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca0:	f383 8811 	msr	BASEPRI, r3
 800bca4:	f3bf 8f6f 	isb	sy
 800bca8:	f3bf 8f4f 	dsb	sy
 800bcac:	623b      	str	r3, [r7, #32]
}
 800bcae:	bf00      	nop
 800bcb0:	e7fe      	b.n	800bcb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bcb2:	4b1a      	ldr	r3, [pc, #104]	; (800bd1c <xTimerGenericCommand+0x98>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d02a      	beq.n	800bd10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	2b05      	cmp	r3, #5
 800bcca:	dc18      	bgt.n	800bcfe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bccc:	f7ff fdb4 	bl	800b838 <xTaskGetSchedulerState>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d109      	bne.n	800bcea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bcd6:	4b11      	ldr	r3, [pc, #68]	; (800bd1c <xTimerGenericCommand+0x98>)
 800bcd8:	6818      	ldr	r0, [r3, #0]
 800bcda:	f107 0110 	add.w	r1, r7, #16
 800bcde:	2300      	movs	r3, #0
 800bce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bce2:	f7fe fa45 	bl	800a170 <xQueueGenericSend>
 800bce6:	6278      	str	r0, [r7, #36]	; 0x24
 800bce8:	e012      	b.n	800bd10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bcea:	4b0c      	ldr	r3, [pc, #48]	; (800bd1c <xTimerGenericCommand+0x98>)
 800bcec:	6818      	ldr	r0, [r3, #0]
 800bcee:	f107 0110 	add.w	r1, r7, #16
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	f7fe fa3b 	bl	800a170 <xQueueGenericSend>
 800bcfa:	6278      	str	r0, [r7, #36]	; 0x24
 800bcfc:	e008      	b.n	800bd10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bcfe:	4b07      	ldr	r3, [pc, #28]	; (800bd1c <xTimerGenericCommand+0x98>)
 800bd00:	6818      	ldr	r0, [r3, #0]
 800bd02:	f107 0110 	add.w	r1, r7, #16
 800bd06:	2300      	movs	r3, #0
 800bd08:	683a      	ldr	r2, [r7, #0]
 800bd0a:	f7fe fb2f 	bl	800a36c <xQueueGenericSendFromISR>
 800bd0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3728      	adds	r7, #40	; 0x28
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	24004e28 	.word	0x24004e28

0800bd20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b088      	sub	sp, #32
 800bd24:	af02      	add	r7, sp, #8
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd2a:	4b22      	ldr	r3, [pc, #136]	; (800bdb4 <prvProcessExpiredTimer+0x94>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	3304      	adds	r3, #4
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7fd fdab 	bl	8009894 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd44:	f003 0304 	and.w	r3, r3, #4
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d022      	beq.n	800bd92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	699a      	ldr	r2, [r3, #24]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	18d1      	adds	r1, r2, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	683a      	ldr	r2, [r7, #0]
 800bd58:	6978      	ldr	r0, [r7, #20]
 800bd5a:	f000 f8d1 	bl	800bf00 <prvInsertTimerInActiveList>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d01f      	beq.n	800bda4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd64:	2300      	movs	r3, #0
 800bd66:	9300      	str	r3, [sp, #0]
 800bd68:	2300      	movs	r3, #0
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	2100      	movs	r1, #0
 800bd6e:	6978      	ldr	r0, [r7, #20]
 800bd70:	f7ff ff88 	bl	800bc84 <xTimerGenericCommand>
 800bd74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d113      	bne.n	800bda4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd80:	f383 8811 	msr	BASEPRI, r3
 800bd84:	f3bf 8f6f 	isb	sy
 800bd88:	f3bf 8f4f 	dsb	sy
 800bd8c:	60fb      	str	r3, [r7, #12]
}
 800bd8e:	bf00      	nop
 800bd90:	e7fe      	b.n	800bd90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd98:	f023 0301 	bic.w	r3, r3, #1
 800bd9c:	b2da      	uxtb	r2, r3
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	6a1b      	ldr	r3, [r3, #32]
 800bda8:	6978      	ldr	r0, [r7, #20]
 800bdaa:	4798      	blx	r3
}
 800bdac:	bf00      	nop
 800bdae:	3718      	adds	r7, #24
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	24004e20 	.word	0x24004e20

0800bdb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bdc0:	f107 0308 	add.w	r3, r7, #8
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 f857 	bl	800be78 <prvGetNextExpireTime>
 800bdca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	4619      	mov	r1, r3
 800bdd0:	68f8      	ldr	r0, [r7, #12]
 800bdd2:	f000 f803 	bl	800bddc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bdd6:	f000 f8d5 	bl	800bf84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bdda:	e7f1      	b.n	800bdc0 <prvTimerTask+0x8>

0800bddc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bde6:	f7ff f92b 	bl	800b040 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdea:	f107 0308 	add.w	r3, r7, #8
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f000 f866 	bl	800bec0 <prvSampleTimeNow>
 800bdf4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d130      	bne.n	800be5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d10a      	bne.n	800be18 <prvProcessTimerOrBlockTask+0x3c>
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	429a      	cmp	r2, r3
 800be08:	d806      	bhi.n	800be18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be0a:	f7ff f927 	bl	800b05c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be0e:	68f9      	ldr	r1, [r7, #12]
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f7ff ff85 	bl	800bd20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be16:	e024      	b.n	800be62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d008      	beq.n	800be30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be1e:	4b13      	ldr	r3, [pc, #76]	; (800be6c <prvProcessTimerOrBlockTask+0x90>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d101      	bne.n	800be2c <prvProcessTimerOrBlockTask+0x50>
 800be28:	2301      	movs	r3, #1
 800be2a:	e000      	b.n	800be2e <prvProcessTimerOrBlockTask+0x52>
 800be2c:	2300      	movs	r3, #0
 800be2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be30:	4b0f      	ldr	r3, [pc, #60]	; (800be70 <prvProcessTimerOrBlockTask+0x94>)
 800be32:	6818      	ldr	r0, [r3, #0]
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	4619      	mov	r1, r3
 800be3e:	f7fe fe6f 	bl	800ab20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be42:	f7ff f90b 	bl	800b05c <xTaskResumeAll>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d10a      	bne.n	800be62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800be4c:	4b09      	ldr	r3, [pc, #36]	; (800be74 <prvProcessTimerOrBlockTask+0x98>)
 800be4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be52:	601a      	str	r2, [r3, #0]
 800be54:	f3bf 8f4f 	dsb	sy
 800be58:	f3bf 8f6f 	isb	sy
}
 800be5c:	e001      	b.n	800be62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800be5e:	f7ff f8fd 	bl	800b05c <xTaskResumeAll>
}
 800be62:	bf00      	nop
 800be64:	3710      	adds	r7, #16
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	24004e24 	.word	0x24004e24
 800be70:	24004e28 	.word	0x24004e28
 800be74:	e000ed04 	.word	0xe000ed04

0800be78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800be80:	4b0e      	ldr	r3, [pc, #56]	; (800bebc <prvGetNextExpireTime+0x44>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d101      	bne.n	800be8e <prvGetNextExpireTime+0x16>
 800be8a:	2201      	movs	r2, #1
 800be8c:	e000      	b.n	800be90 <prvGetNextExpireTime+0x18>
 800be8e:	2200      	movs	r2, #0
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d105      	bne.n	800bea8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be9c:	4b07      	ldr	r3, [pc, #28]	; (800bebc <prvGetNextExpireTime+0x44>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	60fb      	str	r3, [r7, #12]
 800bea6:	e001      	b.n	800beac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bea8:	2300      	movs	r3, #0
 800beaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800beac:	68fb      	ldr	r3, [r7, #12]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3714      	adds	r7, #20
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	24004e20 	.word	0x24004e20

0800bec0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bec8:	f7ff f966 	bl	800b198 <xTaskGetTickCount>
 800becc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bece:	4b0b      	ldr	r3, [pc, #44]	; (800befc <prvSampleTimeNow+0x3c>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d205      	bcs.n	800bee4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bed8:	f000 f936 	bl	800c148 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2201      	movs	r2, #1
 800bee0:	601a      	str	r2, [r3, #0]
 800bee2:	e002      	b.n	800beea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800beea:	4a04      	ldr	r2, [pc, #16]	; (800befc <prvSampleTimeNow+0x3c>)
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bef0:	68fb      	ldr	r3, [r7, #12]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	24004e30 	.word	0x24004e30

0800bf00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b086      	sub	sp, #24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	607a      	str	r2, [r7, #4]
 800bf0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	68fa      	ldr	r2, [r7, #12]
 800bf1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d812      	bhi.n	800bf4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	1ad2      	subs	r2, r2, r3
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	699b      	ldr	r3, [r3, #24]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d302      	bcc.n	800bf3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf34:	2301      	movs	r3, #1
 800bf36:	617b      	str	r3, [r7, #20]
 800bf38:	e01b      	b.n	800bf72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf3a:	4b10      	ldr	r3, [pc, #64]	; (800bf7c <prvInsertTimerInActiveList+0x7c>)
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	3304      	adds	r3, #4
 800bf42:	4619      	mov	r1, r3
 800bf44:	4610      	mov	r0, r2
 800bf46:	f7fd fc6c 	bl	8009822 <vListInsert>
 800bf4a:	e012      	b.n	800bf72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d206      	bcs.n	800bf62 <prvInsertTimerInActiveList+0x62>
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d302      	bcc.n	800bf62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	617b      	str	r3, [r7, #20]
 800bf60:	e007      	b.n	800bf72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf62:	4b07      	ldr	r3, [pc, #28]	; (800bf80 <prvInsertTimerInActiveList+0x80>)
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	3304      	adds	r3, #4
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	4610      	mov	r0, r2
 800bf6e:	f7fd fc58 	bl	8009822 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bf72:	697b      	ldr	r3, [r7, #20]
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3718      	adds	r7, #24
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	24004e24 	.word	0x24004e24
 800bf80:	24004e20 	.word	0x24004e20

0800bf84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b08e      	sub	sp, #56	; 0x38
 800bf88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf8a:	e0ca      	b.n	800c122 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	da18      	bge.n	800bfc4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bf92:	1d3b      	adds	r3, r7, #4
 800bf94:	3304      	adds	r3, #4
 800bf96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d10a      	bne.n	800bfb4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa2:	f383 8811 	msr	BASEPRI, r3
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	f3bf 8f4f 	dsb	sy
 800bfae:	61fb      	str	r3, [r7, #28]
}
 800bfb0:	bf00      	nop
 800bfb2:	e7fe      	b.n	800bfb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfba:	6850      	ldr	r0, [r2, #4]
 800bfbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfbe:	6892      	ldr	r2, [r2, #8]
 800bfc0:	4611      	mov	r1, r2
 800bfc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	f2c0 80ab 	blt.w	800c122 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd2:	695b      	ldr	r3, [r3, #20]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d004      	beq.n	800bfe2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfda:	3304      	adds	r3, #4
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7fd fc59 	bl	8009894 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bfe2:	463b      	mov	r3, r7
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7ff ff6b 	bl	800bec0 <prvSampleTimeNow>
 800bfea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2b09      	cmp	r3, #9
 800bff0:	f200 8096 	bhi.w	800c120 <prvProcessReceivedCommands+0x19c>
 800bff4:	a201      	add	r2, pc, #4	; (adr r2, 800bffc <prvProcessReceivedCommands+0x78>)
 800bff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bffa:	bf00      	nop
 800bffc:	0800c025 	.word	0x0800c025
 800c000:	0800c025 	.word	0x0800c025
 800c004:	0800c025 	.word	0x0800c025
 800c008:	0800c099 	.word	0x0800c099
 800c00c:	0800c0ad 	.word	0x0800c0ad
 800c010:	0800c0f7 	.word	0x0800c0f7
 800c014:	0800c025 	.word	0x0800c025
 800c018:	0800c025 	.word	0x0800c025
 800c01c:	0800c099 	.word	0x0800c099
 800c020:	0800c0ad 	.word	0x0800c0ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c02a:	f043 0301 	orr.w	r3, r3, #1
 800c02e:	b2da      	uxtb	r2, r3
 800c030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03a:	699b      	ldr	r3, [r3, #24]
 800c03c:	18d1      	adds	r1, r2, r3
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c044:	f7ff ff5c 	bl	800bf00 <prvInsertTimerInActiveList>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d069      	beq.n	800c122 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c050:	6a1b      	ldr	r3, [r3, #32]
 800c052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c054:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c05c:	f003 0304 	and.w	r3, r3, #4
 800c060:	2b00      	cmp	r3, #0
 800c062:	d05e      	beq.n	800c122 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c068:	699b      	ldr	r3, [r3, #24]
 800c06a:	441a      	add	r2, r3
 800c06c:	2300      	movs	r3, #0
 800c06e:	9300      	str	r3, [sp, #0]
 800c070:	2300      	movs	r3, #0
 800c072:	2100      	movs	r1, #0
 800c074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c076:	f7ff fe05 	bl	800bc84 <xTimerGenericCommand>
 800c07a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c07c:	6a3b      	ldr	r3, [r7, #32]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d14f      	bne.n	800c122 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c086:	f383 8811 	msr	BASEPRI, r3
 800c08a:	f3bf 8f6f 	isb	sy
 800c08e:	f3bf 8f4f 	dsb	sy
 800c092:	61bb      	str	r3, [r7, #24]
}
 800c094:	bf00      	nop
 800c096:	e7fe      	b.n	800c096 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c09e:	f023 0301 	bic.w	r3, r3, #1
 800c0a2:	b2da      	uxtb	r2, r3
 800c0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c0aa:	e03a      	b.n	800c122 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0b2:	f043 0301 	orr.w	r3, r3, #1
 800c0b6:	b2da      	uxtb	r2, r3
 800c0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c0be:	68ba      	ldr	r2, [r7, #8]
 800c0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c6:	699b      	ldr	r3, [r3, #24]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d10a      	bne.n	800c0e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	617b      	str	r3, [r7, #20]
}
 800c0de:	bf00      	nop
 800c0e0:	e7fe      	b.n	800c0e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e4:	699a      	ldr	r2, [r3, #24]
 800c0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e8:	18d1      	adds	r1, r2, r3
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0f0:	f7ff ff06 	bl	800bf00 <prvInsertTimerInActiveList>
					break;
 800c0f4:	e015      	b.n	800c122 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0fc:	f003 0302 	and.w	r3, r3, #2
 800c100:	2b00      	cmp	r3, #0
 800c102:	d103      	bne.n	800c10c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c106:	f7fd fa1d 	bl	8009544 <vPortFree>
 800c10a:	e00a      	b.n	800c122 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c112:	f023 0301 	bic.w	r3, r3, #1
 800c116:	b2da      	uxtb	r2, r3
 800c118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c11e:	e000      	b.n	800c122 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c120:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c122:	4b08      	ldr	r3, [pc, #32]	; (800c144 <prvProcessReceivedCommands+0x1c0>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	1d39      	adds	r1, r7, #4
 800c128:	2200      	movs	r2, #0
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7fe f9ba 	bl	800a4a4 <xQueueReceive>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	f47f af2a 	bne.w	800bf8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c138:	bf00      	nop
 800c13a:	bf00      	nop
 800c13c:	3730      	adds	r7, #48	; 0x30
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	24004e28 	.word	0x24004e28

0800c148 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b088      	sub	sp, #32
 800c14c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c14e:	e048      	b.n	800c1e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c150:	4b2d      	ldr	r3, [pc, #180]	; (800c208 <prvSwitchTimerLists+0xc0>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c15a:	4b2b      	ldr	r3, [pc, #172]	; (800c208 <prvSwitchTimerLists+0xc0>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	3304      	adds	r3, #4
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fd fb93 	bl	8009894 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6a1b      	ldr	r3, [r3, #32]
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c17c:	f003 0304 	and.w	r3, r3, #4
 800c180:	2b00      	cmp	r3, #0
 800c182:	d02e      	beq.n	800c1e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	699b      	ldr	r3, [r3, #24]
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	4413      	add	r3, r2
 800c18c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c18e:	68ba      	ldr	r2, [r7, #8]
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	429a      	cmp	r2, r3
 800c194:	d90e      	bls.n	800c1b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	68ba      	ldr	r2, [r7, #8]
 800c19a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	68fa      	ldr	r2, [r7, #12]
 800c1a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1a2:	4b19      	ldr	r3, [pc, #100]	; (800c208 <prvSwitchTimerLists+0xc0>)
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	3304      	adds	r3, #4
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	4610      	mov	r0, r2
 800c1ae:	f7fd fb38 	bl	8009822 <vListInsert>
 800c1b2:	e016      	b.n	800c1e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	693a      	ldr	r2, [r7, #16]
 800c1bc:	2100      	movs	r1, #0
 800c1be:	68f8      	ldr	r0, [r7, #12]
 800c1c0:	f7ff fd60 	bl	800bc84 <xTimerGenericCommand>
 800c1c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10a      	bne.n	800c1e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d0:	f383 8811 	msr	BASEPRI, r3
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	603b      	str	r3, [r7, #0]
}
 800c1de:	bf00      	nop
 800c1e0:	e7fe      	b.n	800c1e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1e2:	4b09      	ldr	r3, [pc, #36]	; (800c208 <prvSwitchTimerLists+0xc0>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d1b1      	bne.n	800c150 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c1ec:	4b06      	ldr	r3, [pc, #24]	; (800c208 <prvSwitchTimerLists+0xc0>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c1f2:	4b06      	ldr	r3, [pc, #24]	; (800c20c <prvSwitchTimerLists+0xc4>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a04      	ldr	r2, [pc, #16]	; (800c208 <prvSwitchTimerLists+0xc0>)
 800c1f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c1fa:	4a04      	ldr	r2, [pc, #16]	; (800c20c <prvSwitchTimerLists+0xc4>)
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	6013      	str	r3, [r2, #0]
}
 800c200:	bf00      	nop
 800c202:	3718      	adds	r7, #24
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	24004e20 	.word	0x24004e20
 800c20c:	24004e24 	.word	0x24004e24

0800c210 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c216:	f7fd fc95 	bl	8009b44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c21a:	4b15      	ldr	r3, [pc, #84]	; (800c270 <prvCheckForValidListAndQueue+0x60>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d120      	bne.n	800c264 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c222:	4814      	ldr	r0, [pc, #80]	; (800c274 <prvCheckForValidListAndQueue+0x64>)
 800c224:	f7fd faac 	bl	8009780 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c228:	4813      	ldr	r0, [pc, #76]	; (800c278 <prvCheckForValidListAndQueue+0x68>)
 800c22a:	f7fd faa9 	bl	8009780 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c22e:	4b13      	ldr	r3, [pc, #76]	; (800c27c <prvCheckForValidListAndQueue+0x6c>)
 800c230:	4a10      	ldr	r2, [pc, #64]	; (800c274 <prvCheckForValidListAndQueue+0x64>)
 800c232:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c234:	4b12      	ldr	r3, [pc, #72]	; (800c280 <prvCheckForValidListAndQueue+0x70>)
 800c236:	4a10      	ldr	r2, [pc, #64]	; (800c278 <prvCheckForValidListAndQueue+0x68>)
 800c238:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c23a:	2300      	movs	r3, #0
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	4b11      	ldr	r3, [pc, #68]	; (800c284 <prvCheckForValidListAndQueue+0x74>)
 800c240:	4a11      	ldr	r2, [pc, #68]	; (800c288 <prvCheckForValidListAndQueue+0x78>)
 800c242:	2110      	movs	r1, #16
 800c244:	200a      	movs	r0, #10
 800c246:	f7fd fe07 	bl	8009e58 <xQueueGenericCreateStatic>
 800c24a:	4603      	mov	r3, r0
 800c24c:	4a08      	ldr	r2, [pc, #32]	; (800c270 <prvCheckForValidListAndQueue+0x60>)
 800c24e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c250:	4b07      	ldr	r3, [pc, #28]	; (800c270 <prvCheckForValidListAndQueue+0x60>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d005      	beq.n	800c264 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c258:	4b05      	ldr	r3, [pc, #20]	; (800c270 <prvCheckForValidListAndQueue+0x60>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	490b      	ldr	r1, [pc, #44]	; (800c28c <prvCheckForValidListAndQueue+0x7c>)
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fe fc34 	bl	800aacc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c264:	f7fd fc9e 	bl	8009ba4 <vPortExitCritical>
}
 800c268:	bf00      	nop
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	24004e28 	.word	0x24004e28
 800c274:	24004df8 	.word	0x24004df8
 800c278:	24004e0c 	.word	0x24004e0c
 800c27c:	24004e20 	.word	0x24004e20
 800c280:	24004e24 	.word	0x24004e24
 800c284:	24004ed4 	.word	0x24004ed4
 800c288:	24004e34 	.word	0x24004e34
 800c28c:	0800fd7c 	.word	0x0800fd7c

0800c290 <__cvt>:
 800c290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c292:	ed2d 8b02 	vpush	{d8}
 800c296:	eeb0 8b40 	vmov.f64	d8, d0
 800c29a:	b085      	sub	sp, #20
 800c29c:	4617      	mov	r7, r2
 800c29e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c2a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c2a2:	ee18 2a90 	vmov	r2, s17
 800c2a6:	f025 0520 	bic.w	r5, r5, #32
 800c2aa:	2a00      	cmp	r2, #0
 800c2ac:	bfb6      	itet	lt
 800c2ae:	222d      	movlt	r2, #45	; 0x2d
 800c2b0:	2200      	movge	r2, #0
 800c2b2:	eeb1 8b40 	vneglt.f64	d8, d0
 800c2b6:	2d46      	cmp	r5, #70	; 0x46
 800c2b8:	460c      	mov	r4, r1
 800c2ba:	701a      	strb	r2, [r3, #0]
 800c2bc:	d004      	beq.n	800c2c8 <__cvt+0x38>
 800c2be:	2d45      	cmp	r5, #69	; 0x45
 800c2c0:	d100      	bne.n	800c2c4 <__cvt+0x34>
 800c2c2:	3401      	adds	r4, #1
 800c2c4:	2102      	movs	r1, #2
 800c2c6:	e000      	b.n	800c2ca <__cvt+0x3a>
 800c2c8:	2103      	movs	r1, #3
 800c2ca:	ab03      	add	r3, sp, #12
 800c2cc:	9301      	str	r3, [sp, #4]
 800c2ce:	ab02      	add	r3, sp, #8
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	4622      	mov	r2, r4
 800c2d4:	4633      	mov	r3, r6
 800c2d6:	eeb0 0b48 	vmov.f64	d0, d8
 800c2da:	f000 ff89 	bl	800d1f0 <_dtoa_r>
 800c2de:	2d47      	cmp	r5, #71	; 0x47
 800c2e0:	d101      	bne.n	800c2e6 <__cvt+0x56>
 800c2e2:	07fb      	lsls	r3, r7, #31
 800c2e4:	d51a      	bpl.n	800c31c <__cvt+0x8c>
 800c2e6:	2d46      	cmp	r5, #70	; 0x46
 800c2e8:	eb00 0204 	add.w	r2, r0, r4
 800c2ec:	d10c      	bne.n	800c308 <__cvt+0x78>
 800c2ee:	7803      	ldrb	r3, [r0, #0]
 800c2f0:	2b30      	cmp	r3, #48	; 0x30
 800c2f2:	d107      	bne.n	800c304 <__cvt+0x74>
 800c2f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2fc:	bf1c      	itt	ne
 800c2fe:	f1c4 0401 	rsbne	r4, r4, #1
 800c302:	6034      	strne	r4, [r6, #0]
 800c304:	6833      	ldr	r3, [r6, #0]
 800c306:	441a      	add	r2, r3
 800c308:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c310:	bf08      	it	eq
 800c312:	9203      	streq	r2, [sp, #12]
 800c314:	2130      	movs	r1, #48	; 0x30
 800c316:	9b03      	ldr	r3, [sp, #12]
 800c318:	4293      	cmp	r3, r2
 800c31a:	d307      	bcc.n	800c32c <__cvt+0x9c>
 800c31c:	9b03      	ldr	r3, [sp, #12]
 800c31e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c320:	1a1b      	subs	r3, r3, r0
 800c322:	6013      	str	r3, [r2, #0]
 800c324:	b005      	add	sp, #20
 800c326:	ecbd 8b02 	vpop	{d8}
 800c32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c32c:	1c5c      	adds	r4, r3, #1
 800c32e:	9403      	str	r4, [sp, #12]
 800c330:	7019      	strb	r1, [r3, #0]
 800c332:	e7f0      	b.n	800c316 <__cvt+0x86>

0800c334 <__exponent>:
 800c334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c336:	4603      	mov	r3, r0
 800c338:	2900      	cmp	r1, #0
 800c33a:	bfb8      	it	lt
 800c33c:	4249      	neglt	r1, r1
 800c33e:	f803 2b02 	strb.w	r2, [r3], #2
 800c342:	bfb4      	ite	lt
 800c344:	222d      	movlt	r2, #45	; 0x2d
 800c346:	222b      	movge	r2, #43	; 0x2b
 800c348:	2909      	cmp	r1, #9
 800c34a:	7042      	strb	r2, [r0, #1]
 800c34c:	dd2a      	ble.n	800c3a4 <__exponent+0x70>
 800c34e:	f10d 0207 	add.w	r2, sp, #7
 800c352:	4617      	mov	r7, r2
 800c354:	260a      	movs	r6, #10
 800c356:	4694      	mov	ip, r2
 800c358:	fb91 f5f6 	sdiv	r5, r1, r6
 800c35c:	fb06 1415 	mls	r4, r6, r5, r1
 800c360:	3430      	adds	r4, #48	; 0x30
 800c362:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c366:	460c      	mov	r4, r1
 800c368:	2c63      	cmp	r4, #99	; 0x63
 800c36a:	f102 32ff 	add.w	r2, r2, #4294967295
 800c36e:	4629      	mov	r1, r5
 800c370:	dcf1      	bgt.n	800c356 <__exponent+0x22>
 800c372:	3130      	adds	r1, #48	; 0x30
 800c374:	f1ac 0402 	sub.w	r4, ip, #2
 800c378:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c37c:	1c41      	adds	r1, r0, #1
 800c37e:	4622      	mov	r2, r4
 800c380:	42ba      	cmp	r2, r7
 800c382:	d30a      	bcc.n	800c39a <__exponent+0x66>
 800c384:	f10d 0209 	add.w	r2, sp, #9
 800c388:	eba2 020c 	sub.w	r2, r2, ip
 800c38c:	42bc      	cmp	r4, r7
 800c38e:	bf88      	it	hi
 800c390:	2200      	movhi	r2, #0
 800c392:	4413      	add	r3, r2
 800c394:	1a18      	subs	r0, r3, r0
 800c396:	b003      	add	sp, #12
 800c398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c39a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c39e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c3a2:	e7ed      	b.n	800c380 <__exponent+0x4c>
 800c3a4:	2330      	movs	r3, #48	; 0x30
 800c3a6:	3130      	adds	r1, #48	; 0x30
 800c3a8:	7083      	strb	r3, [r0, #2]
 800c3aa:	70c1      	strb	r1, [r0, #3]
 800c3ac:	1d03      	adds	r3, r0, #4
 800c3ae:	e7f1      	b.n	800c394 <__exponent+0x60>

0800c3b0 <_printf_float>:
 800c3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b4:	b08b      	sub	sp, #44	; 0x2c
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c3bc:	4616      	mov	r6, r2
 800c3be:	461f      	mov	r7, r3
 800c3c0:	4605      	mov	r5, r0
 800c3c2:	f000 fdaf 	bl	800cf24 <_localeconv_r>
 800c3c6:	f8d0 b000 	ldr.w	fp, [r0]
 800c3ca:	4658      	mov	r0, fp
 800c3cc:	f7f3 ffd8 	bl	8000380 <strlen>
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	9308      	str	r3, [sp, #32]
 800c3d4:	f8d8 3000 	ldr.w	r3, [r8]
 800c3d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c3dc:	6822      	ldr	r2, [r4, #0]
 800c3de:	3307      	adds	r3, #7
 800c3e0:	f023 0307 	bic.w	r3, r3, #7
 800c3e4:	f103 0108 	add.w	r1, r3, #8
 800c3e8:	f8c8 1000 	str.w	r1, [r8]
 800c3ec:	ed93 0b00 	vldr	d0, [r3]
 800c3f0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800c650 <_printf_float+0x2a0>
 800c3f4:	eeb0 7bc0 	vabs.f64	d7, d0
 800c3f8:	eeb4 7b46 	vcmp.f64	d7, d6
 800c3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c400:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800c404:	4682      	mov	sl, r0
 800c406:	dd24      	ble.n	800c452 <_printf_float+0xa2>
 800c408:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c410:	d502      	bpl.n	800c418 <_printf_float+0x68>
 800c412:	232d      	movs	r3, #45	; 0x2d
 800c414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c418:	498f      	ldr	r1, [pc, #572]	; (800c658 <_printf_float+0x2a8>)
 800c41a:	4b90      	ldr	r3, [pc, #576]	; (800c65c <_printf_float+0x2ac>)
 800c41c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c420:	bf94      	ite	ls
 800c422:	4688      	movls	r8, r1
 800c424:	4698      	movhi	r8, r3
 800c426:	2303      	movs	r3, #3
 800c428:	6123      	str	r3, [r4, #16]
 800c42a:	f022 0204 	bic.w	r2, r2, #4
 800c42e:	2300      	movs	r3, #0
 800c430:	6022      	str	r2, [r4, #0]
 800c432:	9304      	str	r3, [sp, #16]
 800c434:	9700      	str	r7, [sp, #0]
 800c436:	4633      	mov	r3, r6
 800c438:	aa09      	add	r2, sp, #36	; 0x24
 800c43a:	4621      	mov	r1, r4
 800c43c:	4628      	mov	r0, r5
 800c43e:	f000 f9d1 	bl	800c7e4 <_printf_common>
 800c442:	3001      	adds	r0, #1
 800c444:	f040 808a 	bne.w	800c55c <_printf_float+0x1ac>
 800c448:	f04f 30ff 	mov.w	r0, #4294967295
 800c44c:	b00b      	add	sp, #44	; 0x2c
 800c44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c452:	eeb4 0b40 	vcmp.f64	d0, d0
 800c456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c45a:	d709      	bvc.n	800c470 <_printf_float+0xc0>
 800c45c:	ee10 3a90 	vmov	r3, s1
 800c460:	2b00      	cmp	r3, #0
 800c462:	bfbc      	itt	lt
 800c464:	232d      	movlt	r3, #45	; 0x2d
 800c466:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c46a:	497d      	ldr	r1, [pc, #500]	; (800c660 <_printf_float+0x2b0>)
 800c46c:	4b7d      	ldr	r3, [pc, #500]	; (800c664 <_printf_float+0x2b4>)
 800c46e:	e7d5      	b.n	800c41c <_printf_float+0x6c>
 800c470:	6863      	ldr	r3, [r4, #4]
 800c472:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c476:	9104      	str	r1, [sp, #16]
 800c478:	1c59      	adds	r1, r3, #1
 800c47a:	d13c      	bne.n	800c4f6 <_printf_float+0x146>
 800c47c:	2306      	movs	r3, #6
 800c47e:	6063      	str	r3, [r4, #4]
 800c480:	2300      	movs	r3, #0
 800c482:	9303      	str	r3, [sp, #12]
 800c484:	ab08      	add	r3, sp, #32
 800c486:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c48a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c48e:	ab07      	add	r3, sp, #28
 800c490:	6861      	ldr	r1, [r4, #4]
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	6022      	str	r2, [r4, #0]
 800c496:	f10d 031b 	add.w	r3, sp, #27
 800c49a:	4628      	mov	r0, r5
 800c49c:	f7ff fef8 	bl	800c290 <__cvt>
 800c4a0:	9b04      	ldr	r3, [sp, #16]
 800c4a2:	9907      	ldr	r1, [sp, #28]
 800c4a4:	2b47      	cmp	r3, #71	; 0x47
 800c4a6:	4680      	mov	r8, r0
 800c4a8:	d108      	bne.n	800c4bc <_printf_float+0x10c>
 800c4aa:	1cc8      	adds	r0, r1, #3
 800c4ac:	db02      	blt.n	800c4b4 <_printf_float+0x104>
 800c4ae:	6863      	ldr	r3, [r4, #4]
 800c4b0:	4299      	cmp	r1, r3
 800c4b2:	dd41      	ble.n	800c538 <_printf_float+0x188>
 800c4b4:	f1a9 0902 	sub.w	r9, r9, #2
 800c4b8:	fa5f f989 	uxtb.w	r9, r9
 800c4bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c4c0:	d820      	bhi.n	800c504 <_printf_float+0x154>
 800c4c2:	3901      	subs	r1, #1
 800c4c4:	464a      	mov	r2, r9
 800c4c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c4ca:	9107      	str	r1, [sp, #28]
 800c4cc:	f7ff ff32 	bl	800c334 <__exponent>
 800c4d0:	9a08      	ldr	r2, [sp, #32]
 800c4d2:	9004      	str	r0, [sp, #16]
 800c4d4:	1813      	adds	r3, r2, r0
 800c4d6:	2a01      	cmp	r2, #1
 800c4d8:	6123      	str	r3, [r4, #16]
 800c4da:	dc02      	bgt.n	800c4e2 <_printf_float+0x132>
 800c4dc:	6822      	ldr	r2, [r4, #0]
 800c4de:	07d2      	lsls	r2, r2, #31
 800c4e0:	d501      	bpl.n	800c4e6 <_printf_float+0x136>
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	6123      	str	r3, [r4, #16]
 800c4e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d0a2      	beq.n	800c434 <_printf_float+0x84>
 800c4ee:	232d      	movs	r3, #45	; 0x2d
 800c4f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4f4:	e79e      	b.n	800c434 <_printf_float+0x84>
 800c4f6:	9904      	ldr	r1, [sp, #16]
 800c4f8:	2947      	cmp	r1, #71	; 0x47
 800c4fa:	d1c1      	bne.n	800c480 <_printf_float+0xd0>
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d1bf      	bne.n	800c480 <_printf_float+0xd0>
 800c500:	2301      	movs	r3, #1
 800c502:	e7bc      	b.n	800c47e <_printf_float+0xce>
 800c504:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c508:	d118      	bne.n	800c53c <_printf_float+0x18c>
 800c50a:	2900      	cmp	r1, #0
 800c50c:	6863      	ldr	r3, [r4, #4]
 800c50e:	dd0b      	ble.n	800c528 <_printf_float+0x178>
 800c510:	6121      	str	r1, [r4, #16]
 800c512:	b913      	cbnz	r3, 800c51a <_printf_float+0x16a>
 800c514:	6822      	ldr	r2, [r4, #0]
 800c516:	07d0      	lsls	r0, r2, #31
 800c518:	d502      	bpl.n	800c520 <_printf_float+0x170>
 800c51a:	3301      	adds	r3, #1
 800c51c:	440b      	add	r3, r1
 800c51e:	6123      	str	r3, [r4, #16]
 800c520:	2300      	movs	r3, #0
 800c522:	65a1      	str	r1, [r4, #88]	; 0x58
 800c524:	9304      	str	r3, [sp, #16]
 800c526:	e7de      	b.n	800c4e6 <_printf_float+0x136>
 800c528:	b913      	cbnz	r3, 800c530 <_printf_float+0x180>
 800c52a:	6822      	ldr	r2, [r4, #0]
 800c52c:	07d2      	lsls	r2, r2, #31
 800c52e:	d501      	bpl.n	800c534 <_printf_float+0x184>
 800c530:	3302      	adds	r3, #2
 800c532:	e7f4      	b.n	800c51e <_printf_float+0x16e>
 800c534:	2301      	movs	r3, #1
 800c536:	e7f2      	b.n	800c51e <_printf_float+0x16e>
 800c538:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c53c:	9b08      	ldr	r3, [sp, #32]
 800c53e:	4299      	cmp	r1, r3
 800c540:	db05      	blt.n	800c54e <_printf_float+0x19e>
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	6121      	str	r1, [r4, #16]
 800c546:	07d8      	lsls	r0, r3, #31
 800c548:	d5ea      	bpl.n	800c520 <_printf_float+0x170>
 800c54a:	1c4b      	adds	r3, r1, #1
 800c54c:	e7e7      	b.n	800c51e <_printf_float+0x16e>
 800c54e:	2900      	cmp	r1, #0
 800c550:	bfd4      	ite	le
 800c552:	f1c1 0202 	rsble	r2, r1, #2
 800c556:	2201      	movgt	r2, #1
 800c558:	4413      	add	r3, r2
 800c55a:	e7e0      	b.n	800c51e <_printf_float+0x16e>
 800c55c:	6823      	ldr	r3, [r4, #0]
 800c55e:	055a      	lsls	r2, r3, #21
 800c560:	d407      	bmi.n	800c572 <_printf_float+0x1c2>
 800c562:	6923      	ldr	r3, [r4, #16]
 800c564:	4642      	mov	r2, r8
 800c566:	4631      	mov	r1, r6
 800c568:	4628      	mov	r0, r5
 800c56a:	47b8      	blx	r7
 800c56c:	3001      	adds	r0, #1
 800c56e:	d12a      	bne.n	800c5c6 <_printf_float+0x216>
 800c570:	e76a      	b.n	800c448 <_printf_float+0x98>
 800c572:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c576:	f240 80e0 	bls.w	800c73a <_printf_float+0x38a>
 800c57a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c57e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c586:	d133      	bne.n	800c5f0 <_printf_float+0x240>
 800c588:	4a37      	ldr	r2, [pc, #220]	; (800c668 <_printf_float+0x2b8>)
 800c58a:	2301      	movs	r3, #1
 800c58c:	4631      	mov	r1, r6
 800c58e:	4628      	mov	r0, r5
 800c590:	47b8      	blx	r7
 800c592:	3001      	adds	r0, #1
 800c594:	f43f af58 	beq.w	800c448 <_printf_float+0x98>
 800c598:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	db02      	blt.n	800c5a6 <_printf_float+0x1f6>
 800c5a0:	6823      	ldr	r3, [r4, #0]
 800c5a2:	07d8      	lsls	r0, r3, #31
 800c5a4:	d50f      	bpl.n	800c5c6 <_printf_float+0x216>
 800c5a6:	4653      	mov	r3, sl
 800c5a8:	465a      	mov	r2, fp
 800c5aa:	4631      	mov	r1, r6
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	47b8      	blx	r7
 800c5b0:	3001      	adds	r0, #1
 800c5b2:	f43f af49 	beq.w	800c448 <_printf_float+0x98>
 800c5b6:	f04f 0800 	mov.w	r8, #0
 800c5ba:	f104 091a 	add.w	r9, r4, #26
 800c5be:	9b08      	ldr	r3, [sp, #32]
 800c5c0:	3b01      	subs	r3, #1
 800c5c2:	4543      	cmp	r3, r8
 800c5c4:	dc09      	bgt.n	800c5da <_printf_float+0x22a>
 800c5c6:	6823      	ldr	r3, [r4, #0]
 800c5c8:	079b      	lsls	r3, r3, #30
 800c5ca:	f100 8106 	bmi.w	800c7da <_printf_float+0x42a>
 800c5ce:	68e0      	ldr	r0, [r4, #12]
 800c5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5d2:	4298      	cmp	r0, r3
 800c5d4:	bfb8      	it	lt
 800c5d6:	4618      	movlt	r0, r3
 800c5d8:	e738      	b.n	800c44c <_printf_float+0x9c>
 800c5da:	2301      	movs	r3, #1
 800c5dc:	464a      	mov	r2, r9
 800c5de:	4631      	mov	r1, r6
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	47b8      	blx	r7
 800c5e4:	3001      	adds	r0, #1
 800c5e6:	f43f af2f 	beq.w	800c448 <_printf_float+0x98>
 800c5ea:	f108 0801 	add.w	r8, r8, #1
 800c5ee:	e7e6      	b.n	800c5be <_printf_float+0x20e>
 800c5f0:	9b07      	ldr	r3, [sp, #28]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	dc3a      	bgt.n	800c66c <_printf_float+0x2bc>
 800c5f6:	4a1c      	ldr	r2, [pc, #112]	; (800c668 <_printf_float+0x2b8>)
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	4631      	mov	r1, r6
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	47b8      	blx	r7
 800c600:	3001      	adds	r0, #1
 800c602:	f43f af21 	beq.w	800c448 <_printf_float+0x98>
 800c606:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c60a:	4313      	orrs	r3, r2
 800c60c:	d102      	bne.n	800c614 <_printf_float+0x264>
 800c60e:	6823      	ldr	r3, [r4, #0]
 800c610:	07d9      	lsls	r1, r3, #31
 800c612:	d5d8      	bpl.n	800c5c6 <_printf_float+0x216>
 800c614:	4653      	mov	r3, sl
 800c616:	465a      	mov	r2, fp
 800c618:	4631      	mov	r1, r6
 800c61a:	4628      	mov	r0, r5
 800c61c:	47b8      	blx	r7
 800c61e:	3001      	adds	r0, #1
 800c620:	f43f af12 	beq.w	800c448 <_printf_float+0x98>
 800c624:	f04f 0900 	mov.w	r9, #0
 800c628:	f104 0a1a 	add.w	sl, r4, #26
 800c62c:	9b07      	ldr	r3, [sp, #28]
 800c62e:	425b      	negs	r3, r3
 800c630:	454b      	cmp	r3, r9
 800c632:	dc01      	bgt.n	800c638 <_printf_float+0x288>
 800c634:	9b08      	ldr	r3, [sp, #32]
 800c636:	e795      	b.n	800c564 <_printf_float+0x1b4>
 800c638:	2301      	movs	r3, #1
 800c63a:	4652      	mov	r2, sl
 800c63c:	4631      	mov	r1, r6
 800c63e:	4628      	mov	r0, r5
 800c640:	47b8      	blx	r7
 800c642:	3001      	adds	r0, #1
 800c644:	f43f af00 	beq.w	800c448 <_printf_float+0x98>
 800c648:	f109 0901 	add.w	r9, r9, #1
 800c64c:	e7ee      	b.n	800c62c <_printf_float+0x27c>
 800c64e:	bf00      	nop
 800c650:	ffffffff 	.word	0xffffffff
 800c654:	7fefffff 	.word	0x7fefffff
 800c658:	0800fea4 	.word	0x0800fea4
 800c65c:	0800fea8 	.word	0x0800fea8
 800c660:	0800feac 	.word	0x0800feac
 800c664:	0800feb0 	.word	0x0800feb0
 800c668:	0800feb4 	.word	0x0800feb4
 800c66c:	9a08      	ldr	r2, [sp, #32]
 800c66e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c670:	429a      	cmp	r2, r3
 800c672:	bfa8      	it	ge
 800c674:	461a      	movge	r2, r3
 800c676:	2a00      	cmp	r2, #0
 800c678:	4691      	mov	r9, r2
 800c67a:	dc38      	bgt.n	800c6ee <_printf_float+0x33e>
 800c67c:	2300      	movs	r3, #0
 800c67e:	9305      	str	r3, [sp, #20]
 800c680:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c684:	f104 021a 	add.w	r2, r4, #26
 800c688:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c68a:	9905      	ldr	r1, [sp, #20]
 800c68c:	9304      	str	r3, [sp, #16]
 800c68e:	eba3 0309 	sub.w	r3, r3, r9
 800c692:	428b      	cmp	r3, r1
 800c694:	dc33      	bgt.n	800c6fe <_printf_float+0x34e>
 800c696:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	db3c      	blt.n	800c718 <_printf_float+0x368>
 800c69e:	6823      	ldr	r3, [r4, #0]
 800c6a0:	07da      	lsls	r2, r3, #31
 800c6a2:	d439      	bmi.n	800c718 <_printf_float+0x368>
 800c6a4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c6a8:	eba2 0903 	sub.w	r9, r2, r3
 800c6ac:	9b04      	ldr	r3, [sp, #16]
 800c6ae:	1ad2      	subs	r2, r2, r3
 800c6b0:	4591      	cmp	r9, r2
 800c6b2:	bfa8      	it	ge
 800c6b4:	4691      	movge	r9, r2
 800c6b6:	f1b9 0f00 	cmp.w	r9, #0
 800c6ba:	dc35      	bgt.n	800c728 <_printf_float+0x378>
 800c6bc:	f04f 0800 	mov.w	r8, #0
 800c6c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6c4:	f104 0a1a 	add.w	sl, r4, #26
 800c6c8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c6cc:	1a9b      	subs	r3, r3, r2
 800c6ce:	eba3 0309 	sub.w	r3, r3, r9
 800c6d2:	4543      	cmp	r3, r8
 800c6d4:	f77f af77 	ble.w	800c5c6 <_printf_float+0x216>
 800c6d8:	2301      	movs	r3, #1
 800c6da:	4652      	mov	r2, sl
 800c6dc:	4631      	mov	r1, r6
 800c6de:	4628      	mov	r0, r5
 800c6e0:	47b8      	blx	r7
 800c6e2:	3001      	adds	r0, #1
 800c6e4:	f43f aeb0 	beq.w	800c448 <_printf_float+0x98>
 800c6e8:	f108 0801 	add.w	r8, r8, #1
 800c6ec:	e7ec      	b.n	800c6c8 <_printf_float+0x318>
 800c6ee:	4613      	mov	r3, r2
 800c6f0:	4631      	mov	r1, r6
 800c6f2:	4642      	mov	r2, r8
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	47b8      	blx	r7
 800c6f8:	3001      	adds	r0, #1
 800c6fa:	d1bf      	bne.n	800c67c <_printf_float+0x2cc>
 800c6fc:	e6a4      	b.n	800c448 <_printf_float+0x98>
 800c6fe:	2301      	movs	r3, #1
 800c700:	4631      	mov	r1, r6
 800c702:	4628      	mov	r0, r5
 800c704:	9204      	str	r2, [sp, #16]
 800c706:	47b8      	blx	r7
 800c708:	3001      	adds	r0, #1
 800c70a:	f43f ae9d 	beq.w	800c448 <_printf_float+0x98>
 800c70e:	9b05      	ldr	r3, [sp, #20]
 800c710:	9a04      	ldr	r2, [sp, #16]
 800c712:	3301      	adds	r3, #1
 800c714:	9305      	str	r3, [sp, #20]
 800c716:	e7b7      	b.n	800c688 <_printf_float+0x2d8>
 800c718:	4653      	mov	r3, sl
 800c71a:	465a      	mov	r2, fp
 800c71c:	4631      	mov	r1, r6
 800c71e:	4628      	mov	r0, r5
 800c720:	47b8      	blx	r7
 800c722:	3001      	adds	r0, #1
 800c724:	d1be      	bne.n	800c6a4 <_printf_float+0x2f4>
 800c726:	e68f      	b.n	800c448 <_printf_float+0x98>
 800c728:	9a04      	ldr	r2, [sp, #16]
 800c72a:	464b      	mov	r3, r9
 800c72c:	4442      	add	r2, r8
 800c72e:	4631      	mov	r1, r6
 800c730:	4628      	mov	r0, r5
 800c732:	47b8      	blx	r7
 800c734:	3001      	adds	r0, #1
 800c736:	d1c1      	bne.n	800c6bc <_printf_float+0x30c>
 800c738:	e686      	b.n	800c448 <_printf_float+0x98>
 800c73a:	9a08      	ldr	r2, [sp, #32]
 800c73c:	2a01      	cmp	r2, #1
 800c73e:	dc01      	bgt.n	800c744 <_printf_float+0x394>
 800c740:	07db      	lsls	r3, r3, #31
 800c742:	d537      	bpl.n	800c7b4 <_printf_float+0x404>
 800c744:	2301      	movs	r3, #1
 800c746:	4642      	mov	r2, r8
 800c748:	4631      	mov	r1, r6
 800c74a:	4628      	mov	r0, r5
 800c74c:	47b8      	blx	r7
 800c74e:	3001      	adds	r0, #1
 800c750:	f43f ae7a 	beq.w	800c448 <_printf_float+0x98>
 800c754:	4653      	mov	r3, sl
 800c756:	465a      	mov	r2, fp
 800c758:	4631      	mov	r1, r6
 800c75a:	4628      	mov	r0, r5
 800c75c:	47b8      	blx	r7
 800c75e:	3001      	adds	r0, #1
 800c760:	f43f ae72 	beq.w	800c448 <_printf_float+0x98>
 800c764:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c768:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c770:	9b08      	ldr	r3, [sp, #32]
 800c772:	d01a      	beq.n	800c7aa <_printf_float+0x3fa>
 800c774:	3b01      	subs	r3, #1
 800c776:	f108 0201 	add.w	r2, r8, #1
 800c77a:	4631      	mov	r1, r6
 800c77c:	4628      	mov	r0, r5
 800c77e:	47b8      	blx	r7
 800c780:	3001      	adds	r0, #1
 800c782:	d10e      	bne.n	800c7a2 <_printf_float+0x3f2>
 800c784:	e660      	b.n	800c448 <_printf_float+0x98>
 800c786:	2301      	movs	r3, #1
 800c788:	464a      	mov	r2, r9
 800c78a:	4631      	mov	r1, r6
 800c78c:	4628      	mov	r0, r5
 800c78e:	47b8      	blx	r7
 800c790:	3001      	adds	r0, #1
 800c792:	f43f ae59 	beq.w	800c448 <_printf_float+0x98>
 800c796:	f108 0801 	add.w	r8, r8, #1
 800c79a:	9b08      	ldr	r3, [sp, #32]
 800c79c:	3b01      	subs	r3, #1
 800c79e:	4543      	cmp	r3, r8
 800c7a0:	dcf1      	bgt.n	800c786 <_printf_float+0x3d6>
 800c7a2:	9b04      	ldr	r3, [sp, #16]
 800c7a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c7a8:	e6dd      	b.n	800c566 <_printf_float+0x1b6>
 800c7aa:	f04f 0800 	mov.w	r8, #0
 800c7ae:	f104 091a 	add.w	r9, r4, #26
 800c7b2:	e7f2      	b.n	800c79a <_printf_float+0x3ea>
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	4642      	mov	r2, r8
 800c7b8:	e7df      	b.n	800c77a <_printf_float+0x3ca>
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	464a      	mov	r2, r9
 800c7be:	4631      	mov	r1, r6
 800c7c0:	4628      	mov	r0, r5
 800c7c2:	47b8      	blx	r7
 800c7c4:	3001      	adds	r0, #1
 800c7c6:	f43f ae3f 	beq.w	800c448 <_printf_float+0x98>
 800c7ca:	f108 0801 	add.w	r8, r8, #1
 800c7ce:	68e3      	ldr	r3, [r4, #12]
 800c7d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7d2:	1a5b      	subs	r3, r3, r1
 800c7d4:	4543      	cmp	r3, r8
 800c7d6:	dcf0      	bgt.n	800c7ba <_printf_float+0x40a>
 800c7d8:	e6f9      	b.n	800c5ce <_printf_float+0x21e>
 800c7da:	f04f 0800 	mov.w	r8, #0
 800c7de:	f104 0919 	add.w	r9, r4, #25
 800c7e2:	e7f4      	b.n	800c7ce <_printf_float+0x41e>

0800c7e4 <_printf_common>:
 800c7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e8:	4616      	mov	r6, r2
 800c7ea:	4699      	mov	r9, r3
 800c7ec:	688a      	ldr	r2, [r1, #8]
 800c7ee:	690b      	ldr	r3, [r1, #16]
 800c7f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	bfb8      	it	lt
 800c7f8:	4613      	movlt	r3, r2
 800c7fa:	6033      	str	r3, [r6, #0]
 800c7fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c800:	4607      	mov	r7, r0
 800c802:	460c      	mov	r4, r1
 800c804:	b10a      	cbz	r2, 800c80a <_printf_common+0x26>
 800c806:	3301      	adds	r3, #1
 800c808:	6033      	str	r3, [r6, #0]
 800c80a:	6823      	ldr	r3, [r4, #0]
 800c80c:	0699      	lsls	r1, r3, #26
 800c80e:	bf42      	ittt	mi
 800c810:	6833      	ldrmi	r3, [r6, #0]
 800c812:	3302      	addmi	r3, #2
 800c814:	6033      	strmi	r3, [r6, #0]
 800c816:	6825      	ldr	r5, [r4, #0]
 800c818:	f015 0506 	ands.w	r5, r5, #6
 800c81c:	d106      	bne.n	800c82c <_printf_common+0x48>
 800c81e:	f104 0a19 	add.w	sl, r4, #25
 800c822:	68e3      	ldr	r3, [r4, #12]
 800c824:	6832      	ldr	r2, [r6, #0]
 800c826:	1a9b      	subs	r3, r3, r2
 800c828:	42ab      	cmp	r3, r5
 800c82a:	dc26      	bgt.n	800c87a <_printf_common+0x96>
 800c82c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c830:	1e13      	subs	r3, r2, #0
 800c832:	6822      	ldr	r2, [r4, #0]
 800c834:	bf18      	it	ne
 800c836:	2301      	movne	r3, #1
 800c838:	0692      	lsls	r2, r2, #26
 800c83a:	d42b      	bmi.n	800c894 <_printf_common+0xb0>
 800c83c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c840:	4649      	mov	r1, r9
 800c842:	4638      	mov	r0, r7
 800c844:	47c0      	blx	r8
 800c846:	3001      	adds	r0, #1
 800c848:	d01e      	beq.n	800c888 <_printf_common+0xa4>
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	6922      	ldr	r2, [r4, #16]
 800c84e:	f003 0306 	and.w	r3, r3, #6
 800c852:	2b04      	cmp	r3, #4
 800c854:	bf02      	ittt	eq
 800c856:	68e5      	ldreq	r5, [r4, #12]
 800c858:	6833      	ldreq	r3, [r6, #0]
 800c85a:	1aed      	subeq	r5, r5, r3
 800c85c:	68a3      	ldr	r3, [r4, #8]
 800c85e:	bf0c      	ite	eq
 800c860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c864:	2500      	movne	r5, #0
 800c866:	4293      	cmp	r3, r2
 800c868:	bfc4      	itt	gt
 800c86a:	1a9b      	subgt	r3, r3, r2
 800c86c:	18ed      	addgt	r5, r5, r3
 800c86e:	2600      	movs	r6, #0
 800c870:	341a      	adds	r4, #26
 800c872:	42b5      	cmp	r5, r6
 800c874:	d11a      	bne.n	800c8ac <_printf_common+0xc8>
 800c876:	2000      	movs	r0, #0
 800c878:	e008      	b.n	800c88c <_printf_common+0xa8>
 800c87a:	2301      	movs	r3, #1
 800c87c:	4652      	mov	r2, sl
 800c87e:	4649      	mov	r1, r9
 800c880:	4638      	mov	r0, r7
 800c882:	47c0      	blx	r8
 800c884:	3001      	adds	r0, #1
 800c886:	d103      	bne.n	800c890 <_printf_common+0xac>
 800c888:	f04f 30ff 	mov.w	r0, #4294967295
 800c88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c890:	3501      	adds	r5, #1
 800c892:	e7c6      	b.n	800c822 <_printf_common+0x3e>
 800c894:	18e1      	adds	r1, r4, r3
 800c896:	1c5a      	adds	r2, r3, #1
 800c898:	2030      	movs	r0, #48	; 0x30
 800c89a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c89e:	4422      	add	r2, r4
 800c8a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8a8:	3302      	adds	r3, #2
 800c8aa:	e7c7      	b.n	800c83c <_printf_common+0x58>
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	4622      	mov	r2, r4
 800c8b0:	4649      	mov	r1, r9
 800c8b2:	4638      	mov	r0, r7
 800c8b4:	47c0      	blx	r8
 800c8b6:	3001      	adds	r0, #1
 800c8b8:	d0e6      	beq.n	800c888 <_printf_common+0xa4>
 800c8ba:	3601      	adds	r6, #1
 800c8bc:	e7d9      	b.n	800c872 <_printf_common+0x8e>
	...

0800c8c0 <_printf_i>:
 800c8c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8c4:	7e0f      	ldrb	r7, [r1, #24]
 800c8c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c8c8:	2f78      	cmp	r7, #120	; 0x78
 800c8ca:	4691      	mov	r9, r2
 800c8cc:	4680      	mov	r8, r0
 800c8ce:	460c      	mov	r4, r1
 800c8d0:	469a      	mov	sl, r3
 800c8d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c8d6:	d807      	bhi.n	800c8e8 <_printf_i+0x28>
 800c8d8:	2f62      	cmp	r7, #98	; 0x62
 800c8da:	d80a      	bhi.n	800c8f2 <_printf_i+0x32>
 800c8dc:	2f00      	cmp	r7, #0
 800c8de:	f000 80d4 	beq.w	800ca8a <_printf_i+0x1ca>
 800c8e2:	2f58      	cmp	r7, #88	; 0x58
 800c8e4:	f000 80c0 	beq.w	800ca68 <_printf_i+0x1a8>
 800c8e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8f0:	e03a      	b.n	800c968 <_printf_i+0xa8>
 800c8f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8f6:	2b15      	cmp	r3, #21
 800c8f8:	d8f6      	bhi.n	800c8e8 <_printf_i+0x28>
 800c8fa:	a101      	add	r1, pc, #4	; (adr r1, 800c900 <_printf_i+0x40>)
 800c8fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c900:	0800c959 	.word	0x0800c959
 800c904:	0800c96d 	.word	0x0800c96d
 800c908:	0800c8e9 	.word	0x0800c8e9
 800c90c:	0800c8e9 	.word	0x0800c8e9
 800c910:	0800c8e9 	.word	0x0800c8e9
 800c914:	0800c8e9 	.word	0x0800c8e9
 800c918:	0800c96d 	.word	0x0800c96d
 800c91c:	0800c8e9 	.word	0x0800c8e9
 800c920:	0800c8e9 	.word	0x0800c8e9
 800c924:	0800c8e9 	.word	0x0800c8e9
 800c928:	0800c8e9 	.word	0x0800c8e9
 800c92c:	0800ca71 	.word	0x0800ca71
 800c930:	0800c999 	.word	0x0800c999
 800c934:	0800ca2b 	.word	0x0800ca2b
 800c938:	0800c8e9 	.word	0x0800c8e9
 800c93c:	0800c8e9 	.word	0x0800c8e9
 800c940:	0800ca93 	.word	0x0800ca93
 800c944:	0800c8e9 	.word	0x0800c8e9
 800c948:	0800c999 	.word	0x0800c999
 800c94c:	0800c8e9 	.word	0x0800c8e9
 800c950:	0800c8e9 	.word	0x0800c8e9
 800c954:	0800ca33 	.word	0x0800ca33
 800c958:	682b      	ldr	r3, [r5, #0]
 800c95a:	1d1a      	adds	r2, r3, #4
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	602a      	str	r2, [r5, #0]
 800c960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c968:	2301      	movs	r3, #1
 800c96a:	e09f      	b.n	800caac <_printf_i+0x1ec>
 800c96c:	6820      	ldr	r0, [r4, #0]
 800c96e:	682b      	ldr	r3, [r5, #0]
 800c970:	0607      	lsls	r7, r0, #24
 800c972:	f103 0104 	add.w	r1, r3, #4
 800c976:	6029      	str	r1, [r5, #0]
 800c978:	d501      	bpl.n	800c97e <_printf_i+0xbe>
 800c97a:	681e      	ldr	r6, [r3, #0]
 800c97c:	e003      	b.n	800c986 <_printf_i+0xc6>
 800c97e:	0646      	lsls	r6, r0, #25
 800c980:	d5fb      	bpl.n	800c97a <_printf_i+0xba>
 800c982:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c986:	2e00      	cmp	r6, #0
 800c988:	da03      	bge.n	800c992 <_printf_i+0xd2>
 800c98a:	232d      	movs	r3, #45	; 0x2d
 800c98c:	4276      	negs	r6, r6
 800c98e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c992:	485a      	ldr	r0, [pc, #360]	; (800cafc <_printf_i+0x23c>)
 800c994:	230a      	movs	r3, #10
 800c996:	e012      	b.n	800c9be <_printf_i+0xfe>
 800c998:	682b      	ldr	r3, [r5, #0]
 800c99a:	6820      	ldr	r0, [r4, #0]
 800c99c:	1d19      	adds	r1, r3, #4
 800c99e:	6029      	str	r1, [r5, #0]
 800c9a0:	0605      	lsls	r5, r0, #24
 800c9a2:	d501      	bpl.n	800c9a8 <_printf_i+0xe8>
 800c9a4:	681e      	ldr	r6, [r3, #0]
 800c9a6:	e002      	b.n	800c9ae <_printf_i+0xee>
 800c9a8:	0641      	lsls	r1, r0, #25
 800c9aa:	d5fb      	bpl.n	800c9a4 <_printf_i+0xe4>
 800c9ac:	881e      	ldrh	r6, [r3, #0]
 800c9ae:	4853      	ldr	r0, [pc, #332]	; (800cafc <_printf_i+0x23c>)
 800c9b0:	2f6f      	cmp	r7, #111	; 0x6f
 800c9b2:	bf0c      	ite	eq
 800c9b4:	2308      	moveq	r3, #8
 800c9b6:	230a      	movne	r3, #10
 800c9b8:	2100      	movs	r1, #0
 800c9ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9be:	6865      	ldr	r5, [r4, #4]
 800c9c0:	60a5      	str	r5, [r4, #8]
 800c9c2:	2d00      	cmp	r5, #0
 800c9c4:	bfa2      	ittt	ge
 800c9c6:	6821      	ldrge	r1, [r4, #0]
 800c9c8:	f021 0104 	bicge.w	r1, r1, #4
 800c9cc:	6021      	strge	r1, [r4, #0]
 800c9ce:	b90e      	cbnz	r6, 800c9d4 <_printf_i+0x114>
 800c9d0:	2d00      	cmp	r5, #0
 800c9d2:	d04b      	beq.n	800ca6c <_printf_i+0x1ac>
 800c9d4:	4615      	mov	r5, r2
 800c9d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c9da:	fb03 6711 	mls	r7, r3, r1, r6
 800c9de:	5dc7      	ldrb	r7, [r0, r7]
 800c9e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c9e4:	4637      	mov	r7, r6
 800c9e6:	42bb      	cmp	r3, r7
 800c9e8:	460e      	mov	r6, r1
 800c9ea:	d9f4      	bls.n	800c9d6 <_printf_i+0x116>
 800c9ec:	2b08      	cmp	r3, #8
 800c9ee:	d10b      	bne.n	800ca08 <_printf_i+0x148>
 800c9f0:	6823      	ldr	r3, [r4, #0]
 800c9f2:	07de      	lsls	r6, r3, #31
 800c9f4:	d508      	bpl.n	800ca08 <_printf_i+0x148>
 800c9f6:	6923      	ldr	r3, [r4, #16]
 800c9f8:	6861      	ldr	r1, [r4, #4]
 800c9fa:	4299      	cmp	r1, r3
 800c9fc:	bfde      	ittt	le
 800c9fe:	2330      	movle	r3, #48	; 0x30
 800ca00:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca04:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca08:	1b52      	subs	r2, r2, r5
 800ca0a:	6122      	str	r2, [r4, #16]
 800ca0c:	f8cd a000 	str.w	sl, [sp]
 800ca10:	464b      	mov	r3, r9
 800ca12:	aa03      	add	r2, sp, #12
 800ca14:	4621      	mov	r1, r4
 800ca16:	4640      	mov	r0, r8
 800ca18:	f7ff fee4 	bl	800c7e4 <_printf_common>
 800ca1c:	3001      	adds	r0, #1
 800ca1e:	d14a      	bne.n	800cab6 <_printf_i+0x1f6>
 800ca20:	f04f 30ff 	mov.w	r0, #4294967295
 800ca24:	b004      	add	sp, #16
 800ca26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca2a:	6823      	ldr	r3, [r4, #0]
 800ca2c:	f043 0320 	orr.w	r3, r3, #32
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	4833      	ldr	r0, [pc, #204]	; (800cb00 <_printf_i+0x240>)
 800ca34:	2778      	movs	r7, #120	; 0x78
 800ca36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	6829      	ldr	r1, [r5, #0]
 800ca3e:	061f      	lsls	r7, r3, #24
 800ca40:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca44:	d402      	bmi.n	800ca4c <_printf_i+0x18c>
 800ca46:	065f      	lsls	r7, r3, #25
 800ca48:	bf48      	it	mi
 800ca4a:	b2b6      	uxthmi	r6, r6
 800ca4c:	07df      	lsls	r7, r3, #31
 800ca4e:	bf48      	it	mi
 800ca50:	f043 0320 	orrmi.w	r3, r3, #32
 800ca54:	6029      	str	r1, [r5, #0]
 800ca56:	bf48      	it	mi
 800ca58:	6023      	strmi	r3, [r4, #0]
 800ca5a:	b91e      	cbnz	r6, 800ca64 <_printf_i+0x1a4>
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	f023 0320 	bic.w	r3, r3, #32
 800ca62:	6023      	str	r3, [r4, #0]
 800ca64:	2310      	movs	r3, #16
 800ca66:	e7a7      	b.n	800c9b8 <_printf_i+0xf8>
 800ca68:	4824      	ldr	r0, [pc, #144]	; (800cafc <_printf_i+0x23c>)
 800ca6a:	e7e4      	b.n	800ca36 <_printf_i+0x176>
 800ca6c:	4615      	mov	r5, r2
 800ca6e:	e7bd      	b.n	800c9ec <_printf_i+0x12c>
 800ca70:	682b      	ldr	r3, [r5, #0]
 800ca72:	6826      	ldr	r6, [r4, #0]
 800ca74:	6961      	ldr	r1, [r4, #20]
 800ca76:	1d18      	adds	r0, r3, #4
 800ca78:	6028      	str	r0, [r5, #0]
 800ca7a:	0635      	lsls	r5, r6, #24
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	d501      	bpl.n	800ca84 <_printf_i+0x1c4>
 800ca80:	6019      	str	r1, [r3, #0]
 800ca82:	e002      	b.n	800ca8a <_printf_i+0x1ca>
 800ca84:	0670      	lsls	r0, r6, #25
 800ca86:	d5fb      	bpl.n	800ca80 <_printf_i+0x1c0>
 800ca88:	8019      	strh	r1, [r3, #0]
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	6123      	str	r3, [r4, #16]
 800ca8e:	4615      	mov	r5, r2
 800ca90:	e7bc      	b.n	800ca0c <_printf_i+0x14c>
 800ca92:	682b      	ldr	r3, [r5, #0]
 800ca94:	1d1a      	adds	r2, r3, #4
 800ca96:	602a      	str	r2, [r5, #0]
 800ca98:	681d      	ldr	r5, [r3, #0]
 800ca9a:	6862      	ldr	r2, [r4, #4]
 800ca9c:	2100      	movs	r1, #0
 800ca9e:	4628      	mov	r0, r5
 800caa0:	f7f3 fc1e 	bl	80002e0 <memchr>
 800caa4:	b108      	cbz	r0, 800caaa <_printf_i+0x1ea>
 800caa6:	1b40      	subs	r0, r0, r5
 800caa8:	6060      	str	r0, [r4, #4]
 800caaa:	6863      	ldr	r3, [r4, #4]
 800caac:	6123      	str	r3, [r4, #16]
 800caae:	2300      	movs	r3, #0
 800cab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cab4:	e7aa      	b.n	800ca0c <_printf_i+0x14c>
 800cab6:	6923      	ldr	r3, [r4, #16]
 800cab8:	462a      	mov	r2, r5
 800caba:	4649      	mov	r1, r9
 800cabc:	4640      	mov	r0, r8
 800cabe:	47d0      	blx	sl
 800cac0:	3001      	adds	r0, #1
 800cac2:	d0ad      	beq.n	800ca20 <_printf_i+0x160>
 800cac4:	6823      	ldr	r3, [r4, #0]
 800cac6:	079b      	lsls	r3, r3, #30
 800cac8:	d413      	bmi.n	800caf2 <_printf_i+0x232>
 800caca:	68e0      	ldr	r0, [r4, #12]
 800cacc:	9b03      	ldr	r3, [sp, #12]
 800cace:	4298      	cmp	r0, r3
 800cad0:	bfb8      	it	lt
 800cad2:	4618      	movlt	r0, r3
 800cad4:	e7a6      	b.n	800ca24 <_printf_i+0x164>
 800cad6:	2301      	movs	r3, #1
 800cad8:	4632      	mov	r2, r6
 800cada:	4649      	mov	r1, r9
 800cadc:	4640      	mov	r0, r8
 800cade:	47d0      	blx	sl
 800cae0:	3001      	adds	r0, #1
 800cae2:	d09d      	beq.n	800ca20 <_printf_i+0x160>
 800cae4:	3501      	adds	r5, #1
 800cae6:	68e3      	ldr	r3, [r4, #12]
 800cae8:	9903      	ldr	r1, [sp, #12]
 800caea:	1a5b      	subs	r3, r3, r1
 800caec:	42ab      	cmp	r3, r5
 800caee:	dcf2      	bgt.n	800cad6 <_printf_i+0x216>
 800caf0:	e7eb      	b.n	800caca <_printf_i+0x20a>
 800caf2:	2500      	movs	r5, #0
 800caf4:	f104 0619 	add.w	r6, r4, #25
 800caf8:	e7f5      	b.n	800cae6 <_printf_i+0x226>
 800cafa:	bf00      	nop
 800cafc:	0800feb6 	.word	0x0800feb6
 800cb00:	0800fec7 	.word	0x0800fec7

0800cb04 <std>:
 800cb04:	2300      	movs	r3, #0
 800cb06:	b510      	push	{r4, lr}
 800cb08:	4604      	mov	r4, r0
 800cb0a:	e9c0 3300 	strd	r3, r3, [r0]
 800cb0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb12:	6083      	str	r3, [r0, #8]
 800cb14:	8181      	strh	r1, [r0, #12]
 800cb16:	6643      	str	r3, [r0, #100]	; 0x64
 800cb18:	81c2      	strh	r2, [r0, #14]
 800cb1a:	6183      	str	r3, [r0, #24]
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	2208      	movs	r2, #8
 800cb20:	305c      	adds	r0, #92	; 0x5c
 800cb22:	f000 f9f7 	bl	800cf14 <memset>
 800cb26:	4b0d      	ldr	r3, [pc, #52]	; (800cb5c <std+0x58>)
 800cb28:	6263      	str	r3, [r4, #36]	; 0x24
 800cb2a:	4b0d      	ldr	r3, [pc, #52]	; (800cb60 <std+0x5c>)
 800cb2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb2e:	4b0d      	ldr	r3, [pc, #52]	; (800cb64 <std+0x60>)
 800cb30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb32:	4b0d      	ldr	r3, [pc, #52]	; (800cb68 <std+0x64>)
 800cb34:	6323      	str	r3, [r4, #48]	; 0x30
 800cb36:	4b0d      	ldr	r3, [pc, #52]	; (800cb6c <std+0x68>)
 800cb38:	6224      	str	r4, [r4, #32]
 800cb3a:	429c      	cmp	r4, r3
 800cb3c:	d006      	beq.n	800cb4c <std+0x48>
 800cb3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cb42:	4294      	cmp	r4, r2
 800cb44:	d002      	beq.n	800cb4c <std+0x48>
 800cb46:	33d0      	adds	r3, #208	; 0xd0
 800cb48:	429c      	cmp	r4, r3
 800cb4a:	d105      	bne.n	800cb58 <std+0x54>
 800cb4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb54:	f000 bab0 	b.w	800d0b8 <__retarget_lock_init_recursive>
 800cb58:	bd10      	pop	{r4, pc}
 800cb5a:	bf00      	nop
 800cb5c:	0800cd65 	.word	0x0800cd65
 800cb60:	0800cd87 	.word	0x0800cd87
 800cb64:	0800cdbf 	.word	0x0800cdbf
 800cb68:	0800cde3 	.word	0x0800cde3
 800cb6c:	24004f24 	.word	0x24004f24

0800cb70 <stdio_exit_handler>:
 800cb70:	4a02      	ldr	r2, [pc, #8]	; (800cb7c <stdio_exit_handler+0xc>)
 800cb72:	4903      	ldr	r1, [pc, #12]	; (800cb80 <stdio_exit_handler+0x10>)
 800cb74:	4803      	ldr	r0, [pc, #12]	; (800cb84 <stdio_exit_handler+0x14>)
 800cb76:	f000 b869 	b.w	800cc4c <_fwalk_sglue>
 800cb7a:	bf00      	nop
 800cb7c:	24000014 	.word	0x24000014
 800cb80:	0800e955 	.word	0x0800e955
 800cb84:	24000020 	.word	0x24000020

0800cb88 <cleanup_stdio>:
 800cb88:	6841      	ldr	r1, [r0, #4]
 800cb8a:	4b0c      	ldr	r3, [pc, #48]	; (800cbbc <cleanup_stdio+0x34>)
 800cb8c:	4299      	cmp	r1, r3
 800cb8e:	b510      	push	{r4, lr}
 800cb90:	4604      	mov	r4, r0
 800cb92:	d001      	beq.n	800cb98 <cleanup_stdio+0x10>
 800cb94:	f001 fede 	bl	800e954 <_fflush_r>
 800cb98:	68a1      	ldr	r1, [r4, #8]
 800cb9a:	4b09      	ldr	r3, [pc, #36]	; (800cbc0 <cleanup_stdio+0x38>)
 800cb9c:	4299      	cmp	r1, r3
 800cb9e:	d002      	beq.n	800cba6 <cleanup_stdio+0x1e>
 800cba0:	4620      	mov	r0, r4
 800cba2:	f001 fed7 	bl	800e954 <_fflush_r>
 800cba6:	68e1      	ldr	r1, [r4, #12]
 800cba8:	4b06      	ldr	r3, [pc, #24]	; (800cbc4 <cleanup_stdio+0x3c>)
 800cbaa:	4299      	cmp	r1, r3
 800cbac:	d004      	beq.n	800cbb8 <cleanup_stdio+0x30>
 800cbae:	4620      	mov	r0, r4
 800cbb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbb4:	f001 bece 	b.w	800e954 <_fflush_r>
 800cbb8:	bd10      	pop	{r4, pc}
 800cbba:	bf00      	nop
 800cbbc:	24004f24 	.word	0x24004f24
 800cbc0:	24004f8c 	.word	0x24004f8c
 800cbc4:	24004ff4 	.word	0x24004ff4

0800cbc8 <global_stdio_init.part.0>:
 800cbc8:	b510      	push	{r4, lr}
 800cbca:	4b0b      	ldr	r3, [pc, #44]	; (800cbf8 <global_stdio_init.part.0+0x30>)
 800cbcc:	4c0b      	ldr	r4, [pc, #44]	; (800cbfc <global_stdio_init.part.0+0x34>)
 800cbce:	4a0c      	ldr	r2, [pc, #48]	; (800cc00 <global_stdio_init.part.0+0x38>)
 800cbd0:	601a      	str	r2, [r3, #0]
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	2104      	movs	r1, #4
 800cbd8:	f7ff ff94 	bl	800cb04 <std>
 800cbdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	2109      	movs	r1, #9
 800cbe4:	f7ff ff8e 	bl	800cb04 <std>
 800cbe8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cbec:	2202      	movs	r2, #2
 800cbee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbf2:	2112      	movs	r1, #18
 800cbf4:	f7ff bf86 	b.w	800cb04 <std>
 800cbf8:	2400505c 	.word	0x2400505c
 800cbfc:	24004f24 	.word	0x24004f24
 800cc00:	0800cb71 	.word	0x0800cb71

0800cc04 <__sfp_lock_acquire>:
 800cc04:	4801      	ldr	r0, [pc, #4]	; (800cc0c <__sfp_lock_acquire+0x8>)
 800cc06:	f000 ba58 	b.w	800d0ba <__retarget_lock_acquire_recursive>
 800cc0a:	bf00      	nop
 800cc0c:	24005065 	.word	0x24005065

0800cc10 <__sfp_lock_release>:
 800cc10:	4801      	ldr	r0, [pc, #4]	; (800cc18 <__sfp_lock_release+0x8>)
 800cc12:	f000 ba53 	b.w	800d0bc <__retarget_lock_release_recursive>
 800cc16:	bf00      	nop
 800cc18:	24005065 	.word	0x24005065

0800cc1c <__sinit>:
 800cc1c:	b510      	push	{r4, lr}
 800cc1e:	4604      	mov	r4, r0
 800cc20:	f7ff fff0 	bl	800cc04 <__sfp_lock_acquire>
 800cc24:	6a23      	ldr	r3, [r4, #32]
 800cc26:	b11b      	cbz	r3, 800cc30 <__sinit+0x14>
 800cc28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc2c:	f7ff bff0 	b.w	800cc10 <__sfp_lock_release>
 800cc30:	4b04      	ldr	r3, [pc, #16]	; (800cc44 <__sinit+0x28>)
 800cc32:	6223      	str	r3, [r4, #32]
 800cc34:	4b04      	ldr	r3, [pc, #16]	; (800cc48 <__sinit+0x2c>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d1f5      	bne.n	800cc28 <__sinit+0xc>
 800cc3c:	f7ff ffc4 	bl	800cbc8 <global_stdio_init.part.0>
 800cc40:	e7f2      	b.n	800cc28 <__sinit+0xc>
 800cc42:	bf00      	nop
 800cc44:	0800cb89 	.word	0x0800cb89
 800cc48:	2400505c 	.word	0x2400505c

0800cc4c <_fwalk_sglue>:
 800cc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc50:	4607      	mov	r7, r0
 800cc52:	4688      	mov	r8, r1
 800cc54:	4614      	mov	r4, r2
 800cc56:	2600      	movs	r6, #0
 800cc58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc5c:	f1b9 0901 	subs.w	r9, r9, #1
 800cc60:	d505      	bpl.n	800cc6e <_fwalk_sglue+0x22>
 800cc62:	6824      	ldr	r4, [r4, #0]
 800cc64:	2c00      	cmp	r4, #0
 800cc66:	d1f7      	bne.n	800cc58 <_fwalk_sglue+0xc>
 800cc68:	4630      	mov	r0, r6
 800cc6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc6e:	89ab      	ldrh	r3, [r5, #12]
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d907      	bls.n	800cc84 <_fwalk_sglue+0x38>
 800cc74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	d003      	beq.n	800cc84 <_fwalk_sglue+0x38>
 800cc7c:	4629      	mov	r1, r5
 800cc7e:	4638      	mov	r0, r7
 800cc80:	47c0      	blx	r8
 800cc82:	4306      	orrs	r6, r0
 800cc84:	3568      	adds	r5, #104	; 0x68
 800cc86:	e7e9      	b.n	800cc5c <_fwalk_sglue+0x10>

0800cc88 <iprintf>:
 800cc88:	b40f      	push	{r0, r1, r2, r3}
 800cc8a:	b507      	push	{r0, r1, r2, lr}
 800cc8c:	4906      	ldr	r1, [pc, #24]	; (800cca8 <iprintf+0x20>)
 800cc8e:	ab04      	add	r3, sp, #16
 800cc90:	6808      	ldr	r0, [r1, #0]
 800cc92:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc96:	6881      	ldr	r1, [r0, #8]
 800cc98:	9301      	str	r3, [sp, #4]
 800cc9a:	f001 fcbb 	bl	800e614 <_vfiprintf_r>
 800cc9e:	b003      	add	sp, #12
 800cca0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cca4:	b004      	add	sp, #16
 800cca6:	4770      	bx	lr
 800cca8:	2400006c 	.word	0x2400006c

0800ccac <_puts_r>:
 800ccac:	6a03      	ldr	r3, [r0, #32]
 800ccae:	b570      	push	{r4, r5, r6, lr}
 800ccb0:	6884      	ldr	r4, [r0, #8]
 800ccb2:	4605      	mov	r5, r0
 800ccb4:	460e      	mov	r6, r1
 800ccb6:	b90b      	cbnz	r3, 800ccbc <_puts_r+0x10>
 800ccb8:	f7ff ffb0 	bl	800cc1c <__sinit>
 800ccbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ccbe:	07db      	lsls	r3, r3, #31
 800ccc0:	d405      	bmi.n	800ccce <_puts_r+0x22>
 800ccc2:	89a3      	ldrh	r3, [r4, #12]
 800ccc4:	0598      	lsls	r0, r3, #22
 800ccc6:	d402      	bmi.n	800ccce <_puts_r+0x22>
 800ccc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccca:	f000 f9f6 	bl	800d0ba <__retarget_lock_acquire_recursive>
 800ccce:	89a3      	ldrh	r3, [r4, #12]
 800ccd0:	0719      	lsls	r1, r3, #28
 800ccd2:	d513      	bpl.n	800ccfc <_puts_r+0x50>
 800ccd4:	6923      	ldr	r3, [r4, #16]
 800ccd6:	b18b      	cbz	r3, 800ccfc <_puts_r+0x50>
 800ccd8:	3e01      	subs	r6, #1
 800ccda:	68a3      	ldr	r3, [r4, #8]
 800ccdc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cce0:	3b01      	subs	r3, #1
 800cce2:	60a3      	str	r3, [r4, #8]
 800cce4:	b9e9      	cbnz	r1, 800cd22 <_puts_r+0x76>
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	da2e      	bge.n	800cd48 <_puts_r+0x9c>
 800ccea:	4622      	mov	r2, r4
 800ccec:	210a      	movs	r1, #10
 800ccee:	4628      	mov	r0, r5
 800ccf0:	f000 f87b 	bl	800cdea <__swbuf_r>
 800ccf4:	3001      	adds	r0, #1
 800ccf6:	d007      	beq.n	800cd08 <_puts_r+0x5c>
 800ccf8:	250a      	movs	r5, #10
 800ccfa:	e007      	b.n	800cd0c <_puts_r+0x60>
 800ccfc:	4621      	mov	r1, r4
 800ccfe:	4628      	mov	r0, r5
 800cd00:	f000 f8b0 	bl	800ce64 <__swsetup_r>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d0e7      	beq.n	800ccd8 <_puts_r+0x2c>
 800cd08:	f04f 35ff 	mov.w	r5, #4294967295
 800cd0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd0e:	07da      	lsls	r2, r3, #31
 800cd10:	d405      	bmi.n	800cd1e <_puts_r+0x72>
 800cd12:	89a3      	ldrh	r3, [r4, #12]
 800cd14:	059b      	lsls	r3, r3, #22
 800cd16:	d402      	bmi.n	800cd1e <_puts_r+0x72>
 800cd18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd1a:	f000 f9cf 	bl	800d0bc <__retarget_lock_release_recursive>
 800cd1e:	4628      	mov	r0, r5
 800cd20:	bd70      	pop	{r4, r5, r6, pc}
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	da04      	bge.n	800cd30 <_puts_r+0x84>
 800cd26:	69a2      	ldr	r2, [r4, #24]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	dc06      	bgt.n	800cd3a <_puts_r+0x8e>
 800cd2c:	290a      	cmp	r1, #10
 800cd2e:	d004      	beq.n	800cd3a <_puts_r+0x8e>
 800cd30:	6823      	ldr	r3, [r4, #0]
 800cd32:	1c5a      	adds	r2, r3, #1
 800cd34:	6022      	str	r2, [r4, #0]
 800cd36:	7019      	strb	r1, [r3, #0]
 800cd38:	e7cf      	b.n	800ccda <_puts_r+0x2e>
 800cd3a:	4622      	mov	r2, r4
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	f000 f854 	bl	800cdea <__swbuf_r>
 800cd42:	3001      	adds	r0, #1
 800cd44:	d1c9      	bne.n	800ccda <_puts_r+0x2e>
 800cd46:	e7df      	b.n	800cd08 <_puts_r+0x5c>
 800cd48:	6823      	ldr	r3, [r4, #0]
 800cd4a:	250a      	movs	r5, #10
 800cd4c:	1c5a      	adds	r2, r3, #1
 800cd4e:	6022      	str	r2, [r4, #0]
 800cd50:	701d      	strb	r5, [r3, #0]
 800cd52:	e7db      	b.n	800cd0c <_puts_r+0x60>

0800cd54 <puts>:
 800cd54:	4b02      	ldr	r3, [pc, #8]	; (800cd60 <puts+0xc>)
 800cd56:	4601      	mov	r1, r0
 800cd58:	6818      	ldr	r0, [r3, #0]
 800cd5a:	f7ff bfa7 	b.w	800ccac <_puts_r>
 800cd5e:	bf00      	nop
 800cd60:	2400006c 	.word	0x2400006c

0800cd64 <__sread>:
 800cd64:	b510      	push	{r4, lr}
 800cd66:	460c      	mov	r4, r1
 800cd68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd6c:	f000 f956 	bl	800d01c <_read_r>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	bfab      	itete	ge
 800cd74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd76:	89a3      	ldrhlt	r3, [r4, #12]
 800cd78:	181b      	addge	r3, r3, r0
 800cd7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd7e:	bfac      	ite	ge
 800cd80:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd82:	81a3      	strhlt	r3, [r4, #12]
 800cd84:	bd10      	pop	{r4, pc}

0800cd86 <__swrite>:
 800cd86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd8a:	461f      	mov	r7, r3
 800cd8c:	898b      	ldrh	r3, [r1, #12]
 800cd8e:	05db      	lsls	r3, r3, #23
 800cd90:	4605      	mov	r5, r0
 800cd92:	460c      	mov	r4, r1
 800cd94:	4616      	mov	r6, r2
 800cd96:	d505      	bpl.n	800cda4 <__swrite+0x1e>
 800cd98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd9c:	2302      	movs	r3, #2
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f000 f92a 	bl	800cff8 <_lseek_r>
 800cda4:	89a3      	ldrh	r3, [r4, #12]
 800cda6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cdae:	81a3      	strh	r3, [r4, #12]
 800cdb0:	4632      	mov	r2, r6
 800cdb2:	463b      	mov	r3, r7
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdba:	f000 b941 	b.w	800d040 <_write_r>

0800cdbe <__sseek>:
 800cdbe:	b510      	push	{r4, lr}
 800cdc0:	460c      	mov	r4, r1
 800cdc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdc6:	f000 f917 	bl	800cff8 <_lseek_r>
 800cdca:	1c43      	adds	r3, r0, #1
 800cdcc:	89a3      	ldrh	r3, [r4, #12]
 800cdce:	bf15      	itete	ne
 800cdd0:	6560      	strne	r0, [r4, #84]	; 0x54
 800cdd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cdd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cdda:	81a3      	strheq	r3, [r4, #12]
 800cddc:	bf18      	it	ne
 800cdde:	81a3      	strhne	r3, [r4, #12]
 800cde0:	bd10      	pop	{r4, pc}

0800cde2 <__sclose>:
 800cde2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cde6:	f000 b8a1 	b.w	800cf2c <_close_r>

0800cdea <__swbuf_r>:
 800cdea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdec:	460e      	mov	r6, r1
 800cdee:	4614      	mov	r4, r2
 800cdf0:	4605      	mov	r5, r0
 800cdf2:	b118      	cbz	r0, 800cdfc <__swbuf_r+0x12>
 800cdf4:	6a03      	ldr	r3, [r0, #32]
 800cdf6:	b90b      	cbnz	r3, 800cdfc <__swbuf_r+0x12>
 800cdf8:	f7ff ff10 	bl	800cc1c <__sinit>
 800cdfc:	69a3      	ldr	r3, [r4, #24]
 800cdfe:	60a3      	str	r3, [r4, #8]
 800ce00:	89a3      	ldrh	r3, [r4, #12]
 800ce02:	071a      	lsls	r2, r3, #28
 800ce04:	d525      	bpl.n	800ce52 <__swbuf_r+0x68>
 800ce06:	6923      	ldr	r3, [r4, #16]
 800ce08:	b31b      	cbz	r3, 800ce52 <__swbuf_r+0x68>
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	6922      	ldr	r2, [r4, #16]
 800ce0e:	1a98      	subs	r0, r3, r2
 800ce10:	6963      	ldr	r3, [r4, #20]
 800ce12:	b2f6      	uxtb	r6, r6
 800ce14:	4283      	cmp	r3, r0
 800ce16:	4637      	mov	r7, r6
 800ce18:	dc04      	bgt.n	800ce24 <__swbuf_r+0x3a>
 800ce1a:	4621      	mov	r1, r4
 800ce1c:	4628      	mov	r0, r5
 800ce1e:	f001 fd99 	bl	800e954 <_fflush_r>
 800ce22:	b9e0      	cbnz	r0, 800ce5e <__swbuf_r+0x74>
 800ce24:	68a3      	ldr	r3, [r4, #8]
 800ce26:	3b01      	subs	r3, #1
 800ce28:	60a3      	str	r3, [r4, #8]
 800ce2a:	6823      	ldr	r3, [r4, #0]
 800ce2c:	1c5a      	adds	r2, r3, #1
 800ce2e:	6022      	str	r2, [r4, #0]
 800ce30:	701e      	strb	r6, [r3, #0]
 800ce32:	6962      	ldr	r2, [r4, #20]
 800ce34:	1c43      	adds	r3, r0, #1
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d004      	beq.n	800ce44 <__swbuf_r+0x5a>
 800ce3a:	89a3      	ldrh	r3, [r4, #12]
 800ce3c:	07db      	lsls	r3, r3, #31
 800ce3e:	d506      	bpl.n	800ce4e <__swbuf_r+0x64>
 800ce40:	2e0a      	cmp	r6, #10
 800ce42:	d104      	bne.n	800ce4e <__swbuf_r+0x64>
 800ce44:	4621      	mov	r1, r4
 800ce46:	4628      	mov	r0, r5
 800ce48:	f001 fd84 	bl	800e954 <_fflush_r>
 800ce4c:	b938      	cbnz	r0, 800ce5e <__swbuf_r+0x74>
 800ce4e:	4638      	mov	r0, r7
 800ce50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce52:	4621      	mov	r1, r4
 800ce54:	4628      	mov	r0, r5
 800ce56:	f000 f805 	bl	800ce64 <__swsetup_r>
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	d0d5      	beq.n	800ce0a <__swbuf_r+0x20>
 800ce5e:	f04f 37ff 	mov.w	r7, #4294967295
 800ce62:	e7f4      	b.n	800ce4e <__swbuf_r+0x64>

0800ce64 <__swsetup_r>:
 800ce64:	b538      	push	{r3, r4, r5, lr}
 800ce66:	4b2a      	ldr	r3, [pc, #168]	; (800cf10 <__swsetup_r+0xac>)
 800ce68:	4605      	mov	r5, r0
 800ce6a:	6818      	ldr	r0, [r3, #0]
 800ce6c:	460c      	mov	r4, r1
 800ce6e:	b118      	cbz	r0, 800ce78 <__swsetup_r+0x14>
 800ce70:	6a03      	ldr	r3, [r0, #32]
 800ce72:	b90b      	cbnz	r3, 800ce78 <__swsetup_r+0x14>
 800ce74:	f7ff fed2 	bl	800cc1c <__sinit>
 800ce78:	89a3      	ldrh	r3, [r4, #12]
 800ce7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce7e:	0718      	lsls	r0, r3, #28
 800ce80:	d422      	bmi.n	800cec8 <__swsetup_r+0x64>
 800ce82:	06d9      	lsls	r1, r3, #27
 800ce84:	d407      	bmi.n	800ce96 <__swsetup_r+0x32>
 800ce86:	2309      	movs	r3, #9
 800ce88:	602b      	str	r3, [r5, #0]
 800ce8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce8e:	81a3      	strh	r3, [r4, #12]
 800ce90:	f04f 30ff 	mov.w	r0, #4294967295
 800ce94:	e034      	b.n	800cf00 <__swsetup_r+0x9c>
 800ce96:	0758      	lsls	r0, r3, #29
 800ce98:	d512      	bpl.n	800cec0 <__swsetup_r+0x5c>
 800ce9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce9c:	b141      	cbz	r1, 800ceb0 <__swsetup_r+0x4c>
 800ce9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cea2:	4299      	cmp	r1, r3
 800cea4:	d002      	beq.n	800ceac <__swsetup_r+0x48>
 800cea6:	4628      	mov	r0, r5
 800cea8:	f000 ff0e 	bl	800dcc8 <_free_r>
 800ceac:	2300      	movs	r3, #0
 800ceae:	6363      	str	r3, [r4, #52]	; 0x34
 800ceb0:	89a3      	ldrh	r3, [r4, #12]
 800ceb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ceb6:	81a3      	strh	r3, [r4, #12]
 800ceb8:	2300      	movs	r3, #0
 800ceba:	6063      	str	r3, [r4, #4]
 800cebc:	6923      	ldr	r3, [r4, #16]
 800cebe:	6023      	str	r3, [r4, #0]
 800cec0:	89a3      	ldrh	r3, [r4, #12]
 800cec2:	f043 0308 	orr.w	r3, r3, #8
 800cec6:	81a3      	strh	r3, [r4, #12]
 800cec8:	6923      	ldr	r3, [r4, #16]
 800ceca:	b94b      	cbnz	r3, 800cee0 <__swsetup_r+0x7c>
 800cecc:	89a3      	ldrh	r3, [r4, #12]
 800cece:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ced2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ced6:	d003      	beq.n	800cee0 <__swsetup_r+0x7c>
 800ced8:	4621      	mov	r1, r4
 800ceda:	4628      	mov	r0, r5
 800cedc:	f001 fd88 	bl	800e9f0 <__smakebuf_r>
 800cee0:	89a0      	ldrh	r0, [r4, #12]
 800cee2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cee6:	f010 0301 	ands.w	r3, r0, #1
 800ceea:	d00a      	beq.n	800cf02 <__swsetup_r+0x9e>
 800ceec:	2300      	movs	r3, #0
 800ceee:	60a3      	str	r3, [r4, #8]
 800cef0:	6963      	ldr	r3, [r4, #20]
 800cef2:	425b      	negs	r3, r3
 800cef4:	61a3      	str	r3, [r4, #24]
 800cef6:	6923      	ldr	r3, [r4, #16]
 800cef8:	b943      	cbnz	r3, 800cf0c <__swsetup_r+0xa8>
 800cefa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cefe:	d1c4      	bne.n	800ce8a <__swsetup_r+0x26>
 800cf00:	bd38      	pop	{r3, r4, r5, pc}
 800cf02:	0781      	lsls	r1, r0, #30
 800cf04:	bf58      	it	pl
 800cf06:	6963      	ldrpl	r3, [r4, #20]
 800cf08:	60a3      	str	r3, [r4, #8]
 800cf0a:	e7f4      	b.n	800cef6 <__swsetup_r+0x92>
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	e7f7      	b.n	800cf00 <__swsetup_r+0x9c>
 800cf10:	2400006c 	.word	0x2400006c

0800cf14 <memset>:
 800cf14:	4402      	add	r2, r0
 800cf16:	4603      	mov	r3, r0
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d100      	bne.n	800cf1e <memset+0xa>
 800cf1c:	4770      	bx	lr
 800cf1e:	f803 1b01 	strb.w	r1, [r3], #1
 800cf22:	e7f9      	b.n	800cf18 <memset+0x4>

0800cf24 <_localeconv_r>:
 800cf24:	4800      	ldr	r0, [pc, #0]	; (800cf28 <_localeconv_r+0x4>)
 800cf26:	4770      	bx	lr
 800cf28:	24000160 	.word	0x24000160

0800cf2c <_close_r>:
 800cf2c:	b538      	push	{r3, r4, r5, lr}
 800cf2e:	4d06      	ldr	r5, [pc, #24]	; (800cf48 <_close_r+0x1c>)
 800cf30:	2300      	movs	r3, #0
 800cf32:	4604      	mov	r4, r0
 800cf34:	4608      	mov	r0, r1
 800cf36:	602b      	str	r3, [r5, #0]
 800cf38:	f7f5 fc8a 	bl	8002850 <_close>
 800cf3c:	1c43      	adds	r3, r0, #1
 800cf3e:	d102      	bne.n	800cf46 <_close_r+0x1a>
 800cf40:	682b      	ldr	r3, [r5, #0]
 800cf42:	b103      	cbz	r3, 800cf46 <_close_r+0x1a>
 800cf44:	6023      	str	r3, [r4, #0]
 800cf46:	bd38      	pop	{r3, r4, r5, pc}
 800cf48:	24005060 	.word	0x24005060

0800cf4c <_reclaim_reent>:
 800cf4c:	4b29      	ldr	r3, [pc, #164]	; (800cff4 <_reclaim_reent+0xa8>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4283      	cmp	r3, r0
 800cf52:	b570      	push	{r4, r5, r6, lr}
 800cf54:	4604      	mov	r4, r0
 800cf56:	d04b      	beq.n	800cff0 <_reclaim_reent+0xa4>
 800cf58:	69c3      	ldr	r3, [r0, #28]
 800cf5a:	b143      	cbz	r3, 800cf6e <_reclaim_reent+0x22>
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d144      	bne.n	800cfec <_reclaim_reent+0xa0>
 800cf62:	69e3      	ldr	r3, [r4, #28]
 800cf64:	6819      	ldr	r1, [r3, #0]
 800cf66:	b111      	cbz	r1, 800cf6e <_reclaim_reent+0x22>
 800cf68:	4620      	mov	r0, r4
 800cf6a:	f000 fead 	bl	800dcc8 <_free_r>
 800cf6e:	6961      	ldr	r1, [r4, #20]
 800cf70:	b111      	cbz	r1, 800cf78 <_reclaim_reent+0x2c>
 800cf72:	4620      	mov	r0, r4
 800cf74:	f000 fea8 	bl	800dcc8 <_free_r>
 800cf78:	69e1      	ldr	r1, [r4, #28]
 800cf7a:	b111      	cbz	r1, 800cf82 <_reclaim_reent+0x36>
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f000 fea3 	bl	800dcc8 <_free_r>
 800cf82:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cf84:	b111      	cbz	r1, 800cf8c <_reclaim_reent+0x40>
 800cf86:	4620      	mov	r0, r4
 800cf88:	f000 fe9e 	bl	800dcc8 <_free_r>
 800cf8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf8e:	b111      	cbz	r1, 800cf96 <_reclaim_reent+0x4a>
 800cf90:	4620      	mov	r0, r4
 800cf92:	f000 fe99 	bl	800dcc8 <_free_r>
 800cf96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cf98:	b111      	cbz	r1, 800cfa0 <_reclaim_reent+0x54>
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	f000 fe94 	bl	800dcc8 <_free_r>
 800cfa0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cfa2:	b111      	cbz	r1, 800cfaa <_reclaim_reent+0x5e>
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f000 fe8f 	bl	800dcc8 <_free_r>
 800cfaa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cfac:	b111      	cbz	r1, 800cfb4 <_reclaim_reent+0x68>
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f000 fe8a 	bl	800dcc8 <_free_r>
 800cfb4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cfb6:	b111      	cbz	r1, 800cfbe <_reclaim_reent+0x72>
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f000 fe85 	bl	800dcc8 <_free_r>
 800cfbe:	6a23      	ldr	r3, [r4, #32]
 800cfc0:	b1b3      	cbz	r3, 800cff0 <_reclaim_reent+0xa4>
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cfc8:	4718      	bx	r3
 800cfca:	5949      	ldr	r1, [r1, r5]
 800cfcc:	b941      	cbnz	r1, 800cfe0 <_reclaim_reent+0x94>
 800cfce:	3504      	adds	r5, #4
 800cfd0:	69e3      	ldr	r3, [r4, #28]
 800cfd2:	2d80      	cmp	r5, #128	; 0x80
 800cfd4:	68d9      	ldr	r1, [r3, #12]
 800cfd6:	d1f8      	bne.n	800cfca <_reclaim_reent+0x7e>
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f000 fe75 	bl	800dcc8 <_free_r>
 800cfde:	e7c0      	b.n	800cf62 <_reclaim_reent+0x16>
 800cfe0:	680e      	ldr	r6, [r1, #0]
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	f000 fe70 	bl	800dcc8 <_free_r>
 800cfe8:	4631      	mov	r1, r6
 800cfea:	e7ef      	b.n	800cfcc <_reclaim_reent+0x80>
 800cfec:	2500      	movs	r5, #0
 800cfee:	e7ef      	b.n	800cfd0 <_reclaim_reent+0x84>
 800cff0:	bd70      	pop	{r4, r5, r6, pc}
 800cff2:	bf00      	nop
 800cff4:	2400006c 	.word	0x2400006c

0800cff8 <_lseek_r>:
 800cff8:	b538      	push	{r3, r4, r5, lr}
 800cffa:	4d07      	ldr	r5, [pc, #28]	; (800d018 <_lseek_r+0x20>)
 800cffc:	4604      	mov	r4, r0
 800cffe:	4608      	mov	r0, r1
 800d000:	4611      	mov	r1, r2
 800d002:	2200      	movs	r2, #0
 800d004:	602a      	str	r2, [r5, #0]
 800d006:	461a      	mov	r2, r3
 800d008:	f7f5 fc49 	bl	800289e <_lseek>
 800d00c:	1c43      	adds	r3, r0, #1
 800d00e:	d102      	bne.n	800d016 <_lseek_r+0x1e>
 800d010:	682b      	ldr	r3, [r5, #0]
 800d012:	b103      	cbz	r3, 800d016 <_lseek_r+0x1e>
 800d014:	6023      	str	r3, [r4, #0]
 800d016:	bd38      	pop	{r3, r4, r5, pc}
 800d018:	24005060 	.word	0x24005060

0800d01c <_read_r>:
 800d01c:	b538      	push	{r3, r4, r5, lr}
 800d01e:	4d07      	ldr	r5, [pc, #28]	; (800d03c <_read_r+0x20>)
 800d020:	4604      	mov	r4, r0
 800d022:	4608      	mov	r0, r1
 800d024:	4611      	mov	r1, r2
 800d026:	2200      	movs	r2, #0
 800d028:	602a      	str	r2, [r5, #0]
 800d02a:	461a      	mov	r2, r3
 800d02c:	f7f5 fbd7 	bl	80027de <_read>
 800d030:	1c43      	adds	r3, r0, #1
 800d032:	d102      	bne.n	800d03a <_read_r+0x1e>
 800d034:	682b      	ldr	r3, [r5, #0]
 800d036:	b103      	cbz	r3, 800d03a <_read_r+0x1e>
 800d038:	6023      	str	r3, [r4, #0]
 800d03a:	bd38      	pop	{r3, r4, r5, pc}
 800d03c:	24005060 	.word	0x24005060

0800d040 <_write_r>:
 800d040:	b538      	push	{r3, r4, r5, lr}
 800d042:	4d07      	ldr	r5, [pc, #28]	; (800d060 <_write_r+0x20>)
 800d044:	4604      	mov	r4, r0
 800d046:	4608      	mov	r0, r1
 800d048:	4611      	mov	r1, r2
 800d04a:	2200      	movs	r2, #0
 800d04c:	602a      	str	r2, [r5, #0]
 800d04e:	461a      	mov	r2, r3
 800d050:	f7f5 fbe2 	bl	8002818 <_write>
 800d054:	1c43      	adds	r3, r0, #1
 800d056:	d102      	bne.n	800d05e <_write_r+0x1e>
 800d058:	682b      	ldr	r3, [r5, #0]
 800d05a:	b103      	cbz	r3, 800d05e <_write_r+0x1e>
 800d05c:	6023      	str	r3, [r4, #0]
 800d05e:	bd38      	pop	{r3, r4, r5, pc}
 800d060:	24005060 	.word	0x24005060

0800d064 <__errno>:
 800d064:	4b01      	ldr	r3, [pc, #4]	; (800d06c <__errno+0x8>)
 800d066:	6818      	ldr	r0, [r3, #0]
 800d068:	4770      	bx	lr
 800d06a:	bf00      	nop
 800d06c:	2400006c 	.word	0x2400006c

0800d070 <__libc_init_array>:
 800d070:	b570      	push	{r4, r5, r6, lr}
 800d072:	4d0d      	ldr	r5, [pc, #52]	; (800d0a8 <__libc_init_array+0x38>)
 800d074:	4c0d      	ldr	r4, [pc, #52]	; (800d0ac <__libc_init_array+0x3c>)
 800d076:	1b64      	subs	r4, r4, r5
 800d078:	10a4      	asrs	r4, r4, #2
 800d07a:	2600      	movs	r6, #0
 800d07c:	42a6      	cmp	r6, r4
 800d07e:	d109      	bne.n	800d094 <__libc_init_array+0x24>
 800d080:	4d0b      	ldr	r5, [pc, #44]	; (800d0b0 <__libc_init_array+0x40>)
 800d082:	4c0c      	ldr	r4, [pc, #48]	; (800d0b4 <__libc_init_array+0x44>)
 800d084:	f002 fdcc 	bl	800fc20 <_init>
 800d088:	1b64      	subs	r4, r4, r5
 800d08a:	10a4      	asrs	r4, r4, #2
 800d08c:	2600      	movs	r6, #0
 800d08e:	42a6      	cmp	r6, r4
 800d090:	d105      	bne.n	800d09e <__libc_init_array+0x2e>
 800d092:	bd70      	pop	{r4, r5, r6, pc}
 800d094:	f855 3b04 	ldr.w	r3, [r5], #4
 800d098:	4798      	blx	r3
 800d09a:	3601      	adds	r6, #1
 800d09c:	e7ee      	b.n	800d07c <__libc_init_array+0xc>
 800d09e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0a2:	4798      	blx	r3
 800d0a4:	3601      	adds	r6, #1
 800d0a6:	e7f2      	b.n	800d08e <__libc_init_array+0x1e>
 800d0a8:	08010468 	.word	0x08010468
 800d0ac:	08010468 	.word	0x08010468
 800d0b0:	08010468 	.word	0x08010468
 800d0b4:	0801046c 	.word	0x0801046c

0800d0b8 <__retarget_lock_init_recursive>:
 800d0b8:	4770      	bx	lr

0800d0ba <__retarget_lock_acquire_recursive>:
 800d0ba:	4770      	bx	lr

0800d0bc <__retarget_lock_release_recursive>:
 800d0bc:	4770      	bx	lr

0800d0be <memcpy>:
 800d0be:	440a      	add	r2, r1
 800d0c0:	4291      	cmp	r1, r2
 800d0c2:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0c6:	d100      	bne.n	800d0ca <memcpy+0xc>
 800d0c8:	4770      	bx	lr
 800d0ca:	b510      	push	{r4, lr}
 800d0cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0d4:	4291      	cmp	r1, r2
 800d0d6:	d1f9      	bne.n	800d0cc <memcpy+0xe>
 800d0d8:	bd10      	pop	{r4, pc}

0800d0da <quorem>:
 800d0da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0de:	6903      	ldr	r3, [r0, #16]
 800d0e0:	690c      	ldr	r4, [r1, #16]
 800d0e2:	42a3      	cmp	r3, r4
 800d0e4:	4607      	mov	r7, r0
 800d0e6:	db7e      	blt.n	800d1e6 <quorem+0x10c>
 800d0e8:	3c01      	subs	r4, #1
 800d0ea:	f101 0814 	add.w	r8, r1, #20
 800d0ee:	f100 0514 	add.w	r5, r0, #20
 800d0f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0f6:	9301      	str	r3, [sp, #4]
 800d0f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d0fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d100:	3301      	adds	r3, #1
 800d102:	429a      	cmp	r2, r3
 800d104:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d108:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d10c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d110:	d331      	bcc.n	800d176 <quorem+0x9c>
 800d112:	f04f 0e00 	mov.w	lr, #0
 800d116:	4640      	mov	r0, r8
 800d118:	46ac      	mov	ip, r5
 800d11a:	46f2      	mov	sl, lr
 800d11c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d120:	b293      	uxth	r3, r2
 800d122:	fb06 e303 	mla	r3, r6, r3, lr
 800d126:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d12a:	0c1a      	lsrs	r2, r3, #16
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	ebaa 0303 	sub.w	r3, sl, r3
 800d132:	f8dc a000 	ldr.w	sl, [ip]
 800d136:	fa13 f38a 	uxtah	r3, r3, sl
 800d13a:	fb06 220e 	mla	r2, r6, lr, r2
 800d13e:	9300      	str	r3, [sp, #0]
 800d140:	9b00      	ldr	r3, [sp, #0]
 800d142:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d146:	b292      	uxth	r2, r2
 800d148:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d14c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d150:	f8bd 3000 	ldrh.w	r3, [sp]
 800d154:	4581      	cmp	r9, r0
 800d156:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d15a:	f84c 3b04 	str.w	r3, [ip], #4
 800d15e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d162:	d2db      	bcs.n	800d11c <quorem+0x42>
 800d164:	f855 300b 	ldr.w	r3, [r5, fp]
 800d168:	b92b      	cbnz	r3, 800d176 <quorem+0x9c>
 800d16a:	9b01      	ldr	r3, [sp, #4]
 800d16c:	3b04      	subs	r3, #4
 800d16e:	429d      	cmp	r5, r3
 800d170:	461a      	mov	r2, r3
 800d172:	d32c      	bcc.n	800d1ce <quorem+0xf4>
 800d174:	613c      	str	r4, [r7, #16]
 800d176:	4638      	mov	r0, r7
 800d178:	f001 f922 	bl	800e3c0 <__mcmp>
 800d17c:	2800      	cmp	r0, #0
 800d17e:	db22      	blt.n	800d1c6 <quorem+0xec>
 800d180:	3601      	adds	r6, #1
 800d182:	4629      	mov	r1, r5
 800d184:	2000      	movs	r0, #0
 800d186:	f858 2b04 	ldr.w	r2, [r8], #4
 800d18a:	f8d1 c000 	ldr.w	ip, [r1]
 800d18e:	b293      	uxth	r3, r2
 800d190:	1ac3      	subs	r3, r0, r3
 800d192:	0c12      	lsrs	r2, r2, #16
 800d194:	fa13 f38c 	uxtah	r3, r3, ip
 800d198:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d19c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1a6:	45c1      	cmp	r9, r8
 800d1a8:	f841 3b04 	str.w	r3, [r1], #4
 800d1ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d1b0:	d2e9      	bcs.n	800d186 <quorem+0xac>
 800d1b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d1b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d1ba:	b922      	cbnz	r2, 800d1c6 <quorem+0xec>
 800d1bc:	3b04      	subs	r3, #4
 800d1be:	429d      	cmp	r5, r3
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	d30a      	bcc.n	800d1da <quorem+0x100>
 800d1c4:	613c      	str	r4, [r7, #16]
 800d1c6:	4630      	mov	r0, r6
 800d1c8:	b003      	add	sp, #12
 800d1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ce:	6812      	ldr	r2, [r2, #0]
 800d1d0:	3b04      	subs	r3, #4
 800d1d2:	2a00      	cmp	r2, #0
 800d1d4:	d1ce      	bne.n	800d174 <quorem+0x9a>
 800d1d6:	3c01      	subs	r4, #1
 800d1d8:	e7c9      	b.n	800d16e <quorem+0x94>
 800d1da:	6812      	ldr	r2, [r2, #0]
 800d1dc:	3b04      	subs	r3, #4
 800d1de:	2a00      	cmp	r2, #0
 800d1e0:	d1f0      	bne.n	800d1c4 <quorem+0xea>
 800d1e2:	3c01      	subs	r4, #1
 800d1e4:	e7eb      	b.n	800d1be <quorem+0xe4>
 800d1e6:	2000      	movs	r0, #0
 800d1e8:	e7ee      	b.n	800d1c8 <quorem+0xee>
 800d1ea:	0000      	movs	r0, r0
 800d1ec:	0000      	movs	r0, r0
	...

0800d1f0 <_dtoa_r>:
 800d1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f4:	ed2d 8b02 	vpush	{d8}
 800d1f8:	69c5      	ldr	r5, [r0, #28]
 800d1fa:	b091      	sub	sp, #68	; 0x44
 800d1fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d200:	ec59 8b10 	vmov	r8, r9, d0
 800d204:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800d206:	9106      	str	r1, [sp, #24]
 800d208:	4606      	mov	r6, r0
 800d20a:	9208      	str	r2, [sp, #32]
 800d20c:	930c      	str	r3, [sp, #48]	; 0x30
 800d20e:	b975      	cbnz	r5, 800d22e <_dtoa_r+0x3e>
 800d210:	2010      	movs	r0, #16
 800d212:	f000 fda5 	bl	800dd60 <malloc>
 800d216:	4602      	mov	r2, r0
 800d218:	61f0      	str	r0, [r6, #28]
 800d21a:	b920      	cbnz	r0, 800d226 <_dtoa_r+0x36>
 800d21c:	4ba6      	ldr	r3, [pc, #664]	; (800d4b8 <_dtoa_r+0x2c8>)
 800d21e:	21ef      	movs	r1, #239	; 0xef
 800d220:	48a6      	ldr	r0, [pc, #664]	; (800d4bc <_dtoa_r+0x2cc>)
 800d222:	f001 fc53 	bl	800eacc <__assert_func>
 800d226:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d22a:	6005      	str	r5, [r0, #0]
 800d22c:	60c5      	str	r5, [r0, #12]
 800d22e:	69f3      	ldr	r3, [r6, #28]
 800d230:	6819      	ldr	r1, [r3, #0]
 800d232:	b151      	cbz	r1, 800d24a <_dtoa_r+0x5a>
 800d234:	685a      	ldr	r2, [r3, #4]
 800d236:	604a      	str	r2, [r1, #4]
 800d238:	2301      	movs	r3, #1
 800d23a:	4093      	lsls	r3, r2
 800d23c:	608b      	str	r3, [r1, #8]
 800d23e:	4630      	mov	r0, r6
 800d240:	f000 fe82 	bl	800df48 <_Bfree>
 800d244:	69f3      	ldr	r3, [r6, #28]
 800d246:	2200      	movs	r2, #0
 800d248:	601a      	str	r2, [r3, #0]
 800d24a:	f1b9 0300 	subs.w	r3, r9, #0
 800d24e:	bfbb      	ittet	lt
 800d250:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d254:	9303      	strlt	r3, [sp, #12]
 800d256:	2300      	movge	r3, #0
 800d258:	2201      	movlt	r2, #1
 800d25a:	bfac      	ite	ge
 800d25c:	6023      	strge	r3, [r4, #0]
 800d25e:	6022      	strlt	r2, [r4, #0]
 800d260:	4b97      	ldr	r3, [pc, #604]	; (800d4c0 <_dtoa_r+0x2d0>)
 800d262:	9c03      	ldr	r4, [sp, #12]
 800d264:	43a3      	bics	r3, r4
 800d266:	d11c      	bne.n	800d2a2 <_dtoa_r+0xb2>
 800d268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d26a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d26e:	6013      	str	r3, [r2, #0]
 800d270:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d274:	ea53 0308 	orrs.w	r3, r3, r8
 800d278:	f000 84fb 	beq.w	800dc72 <_dtoa_r+0xa82>
 800d27c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d27e:	b963      	cbnz	r3, 800d29a <_dtoa_r+0xaa>
 800d280:	4b90      	ldr	r3, [pc, #576]	; (800d4c4 <_dtoa_r+0x2d4>)
 800d282:	e020      	b.n	800d2c6 <_dtoa_r+0xd6>
 800d284:	4b90      	ldr	r3, [pc, #576]	; (800d4c8 <_dtoa_r+0x2d8>)
 800d286:	9301      	str	r3, [sp, #4]
 800d288:	3308      	adds	r3, #8
 800d28a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d28c:	6013      	str	r3, [r2, #0]
 800d28e:	9801      	ldr	r0, [sp, #4]
 800d290:	b011      	add	sp, #68	; 0x44
 800d292:	ecbd 8b02 	vpop	{d8}
 800d296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d29a:	4b8a      	ldr	r3, [pc, #552]	; (800d4c4 <_dtoa_r+0x2d4>)
 800d29c:	9301      	str	r3, [sp, #4]
 800d29e:	3303      	adds	r3, #3
 800d2a0:	e7f3      	b.n	800d28a <_dtoa_r+0x9a>
 800d2a2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d2a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ae:	d10c      	bne.n	800d2ca <_dtoa_r+0xda>
 800d2b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	6013      	str	r3, [r2, #0]
 800d2b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	f000 84d7 	beq.w	800dc6c <_dtoa_r+0xa7c>
 800d2be:	4b83      	ldr	r3, [pc, #524]	; (800d4cc <_dtoa_r+0x2dc>)
 800d2c0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d2c2:	6013      	str	r3, [r2, #0]
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	9301      	str	r3, [sp, #4]
 800d2c8:	e7e1      	b.n	800d28e <_dtoa_r+0x9e>
 800d2ca:	aa0e      	add	r2, sp, #56	; 0x38
 800d2cc:	a90f      	add	r1, sp, #60	; 0x3c
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	eeb0 0b48 	vmov.f64	d0, d8
 800d2d4:	f001 f91a 	bl	800e50c <__d2b>
 800d2d8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800d2dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2de:	4605      	mov	r5, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d046      	beq.n	800d372 <_dtoa_r+0x182>
 800d2e4:	eeb0 7b48 	vmov.f64	d7, d8
 800d2e8:	ee18 1a90 	vmov	r1, s17
 800d2ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d2f0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800d2f4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d2f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d2fc:	2000      	movs	r0, #0
 800d2fe:	ee07 1a90 	vmov	s15, r1
 800d302:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800d306:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d4a0 <_dtoa_r+0x2b0>
 800d30a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d30e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800d4a8 <_dtoa_r+0x2b8>
 800d312:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d316:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d4b0 <_dtoa_r+0x2c0>
 800d31a:	ee07 3a90 	vmov	s15, r3
 800d31e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d322:	eeb0 7b46 	vmov.f64	d7, d6
 800d326:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d32a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d32e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d336:	ee16 ba90 	vmov	fp, s13
 800d33a:	9009      	str	r0, [sp, #36]	; 0x24
 800d33c:	d508      	bpl.n	800d350 <_dtoa_r+0x160>
 800d33e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d342:	eeb4 6b47 	vcmp.f64	d6, d7
 800d346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d34a:	bf18      	it	ne
 800d34c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d350:	f1bb 0f16 	cmp.w	fp, #22
 800d354:	d82b      	bhi.n	800d3ae <_dtoa_r+0x1be>
 800d356:	495e      	ldr	r1, [pc, #376]	; (800d4d0 <_dtoa_r+0x2e0>)
 800d358:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800d35c:	ed91 7b00 	vldr	d7, [r1]
 800d360:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d368:	d501      	bpl.n	800d36e <_dtoa_r+0x17e>
 800d36a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d36e:	2100      	movs	r1, #0
 800d370:	e01e      	b.n	800d3b0 <_dtoa_r+0x1c0>
 800d372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d374:	4413      	add	r3, r2
 800d376:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800d37a:	2920      	cmp	r1, #32
 800d37c:	bfc1      	itttt	gt
 800d37e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800d382:	408c      	lslgt	r4, r1
 800d384:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800d388:	fa28 f101 	lsrgt.w	r1, r8, r1
 800d38c:	bfd6      	itet	le
 800d38e:	f1c1 0120 	rsble	r1, r1, #32
 800d392:	4321      	orrgt	r1, r4
 800d394:	fa08 f101 	lslle.w	r1, r8, r1
 800d398:	ee07 1a90 	vmov	s15, r1
 800d39c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d3a0:	3b01      	subs	r3, #1
 800d3a2:	ee17 1a90 	vmov	r1, s15
 800d3a6:	2001      	movs	r0, #1
 800d3a8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d3ac:	e7a7      	b.n	800d2fe <_dtoa_r+0x10e>
 800d3ae:	2101      	movs	r1, #1
 800d3b0:	1ad2      	subs	r2, r2, r3
 800d3b2:	1e53      	subs	r3, r2, #1
 800d3b4:	9305      	str	r3, [sp, #20]
 800d3b6:	bf45      	ittet	mi
 800d3b8:	f1c2 0301 	rsbmi	r3, r2, #1
 800d3bc:	9304      	strmi	r3, [sp, #16]
 800d3be:	2300      	movpl	r3, #0
 800d3c0:	2300      	movmi	r3, #0
 800d3c2:	bf4c      	ite	mi
 800d3c4:	9305      	strmi	r3, [sp, #20]
 800d3c6:	9304      	strpl	r3, [sp, #16]
 800d3c8:	f1bb 0f00 	cmp.w	fp, #0
 800d3cc:	910b      	str	r1, [sp, #44]	; 0x2c
 800d3ce:	db18      	blt.n	800d402 <_dtoa_r+0x212>
 800d3d0:	9b05      	ldr	r3, [sp, #20]
 800d3d2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d3d6:	445b      	add	r3, fp
 800d3d8:	9305      	str	r3, [sp, #20]
 800d3da:	2300      	movs	r3, #0
 800d3dc:	9a06      	ldr	r2, [sp, #24]
 800d3de:	2a09      	cmp	r2, #9
 800d3e0:	d848      	bhi.n	800d474 <_dtoa_r+0x284>
 800d3e2:	2a05      	cmp	r2, #5
 800d3e4:	bfc4      	itt	gt
 800d3e6:	3a04      	subgt	r2, #4
 800d3e8:	9206      	strgt	r2, [sp, #24]
 800d3ea:	9a06      	ldr	r2, [sp, #24]
 800d3ec:	f1a2 0202 	sub.w	r2, r2, #2
 800d3f0:	bfcc      	ite	gt
 800d3f2:	2400      	movgt	r4, #0
 800d3f4:	2401      	movle	r4, #1
 800d3f6:	2a03      	cmp	r2, #3
 800d3f8:	d847      	bhi.n	800d48a <_dtoa_r+0x29a>
 800d3fa:	e8df f002 	tbb	[pc, r2]
 800d3fe:	2d0b      	.short	0x2d0b
 800d400:	392b      	.short	0x392b
 800d402:	9b04      	ldr	r3, [sp, #16]
 800d404:	2200      	movs	r2, #0
 800d406:	eba3 030b 	sub.w	r3, r3, fp
 800d40a:	9304      	str	r3, [sp, #16]
 800d40c:	920a      	str	r2, [sp, #40]	; 0x28
 800d40e:	f1cb 0300 	rsb	r3, fp, #0
 800d412:	e7e3      	b.n	800d3dc <_dtoa_r+0x1ec>
 800d414:	2200      	movs	r2, #0
 800d416:	9207      	str	r2, [sp, #28]
 800d418:	9a08      	ldr	r2, [sp, #32]
 800d41a:	2a00      	cmp	r2, #0
 800d41c:	dc38      	bgt.n	800d490 <_dtoa_r+0x2a0>
 800d41e:	f04f 0a01 	mov.w	sl, #1
 800d422:	46d1      	mov	r9, sl
 800d424:	4652      	mov	r2, sl
 800d426:	f8cd a020 	str.w	sl, [sp, #32]
 800d42a:	69f7      	ldr	r7, [r6, #28]
 800d42c:	2100      	movs	r1, #0
 800d42e:	2004      	movs	r0, #4
 800d430:	f100 0c14 	add.w	ip, r0, #20
 800d434:	4594      	cmp	ip, r2
 800d436:	d930      	bls.n	800d49a <_dtoa_r+0x2aa>
 800d438:	6079      	str	r1, [r7, #4]
 800d43a:	4630      	mov	r0, r6
 800d43c:	930d      	str	r3, [sp, #52]	; 0x34
 800d43e:	f000 fd43 	bl	800dec8 <_Balloc>
 800d442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d444:	9001      	str	r0, [sp, #4]
 800d446:	4602      	mov	r2, r0
 800d448:	2800      	cmp	r0, #0
 800d44a:	d145      	bne.n	800d4d8 <_dtoa_r+0x2e8>
 800d44c:	4b21      	ldr	r3, [pc, #132]	; (800d4d4 <_dtoa_r+0x2e4>)
 800d44e:	f240 11af 	movw	r1, #431	; 0x1af
 800d452:	e6e5      	b.n	800d220 <_dtoa_r+0x30>
 800d454:	2201      	movs	r2, #1
 800d456:	e7de      	b.n	800d416 <_dtoa_r+0x226>
 800d458:	2200      	movs	r2, #0
 800d45a:	9207      	str	r2, [sp, #28]
 800d45c:	9a08      	ldr	r2, [sp, #32]
 800d45e:	eb0b 0a02 	add.w	sl, fp, r2
 800d462:	f10a 0901 	add.w	r9, sl, #1
 800d466:	464a      	mov	r2, r9
 800d468:	2a01      	cmp	r2, #1
 800d46a:	bfb8      	it	lt
 800d46c:	2201      	movlt	r2, #1
 800d46e:	e7dc      	b.n	800d42a <_dtoa_r+0x23a>
 800d470:	2201      	movs	r2, #1
 800d472:	e7f2      	b.n	800d45a <_dtoa_r+0x26a>
 800d474:	2401      	movs	r4, #1
 800d476:	2200      	movs	r2, #0
 800d478:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800d47c:	f04f 3aff 	mov.w	sl, #4294967295
 800d480:	2100      	movs	r1, #0
 800d482:	46d1      	mov	r9, sl
 800d484:	2212      	movs	r2, #18
 800d486:	9108      	str	r1, [sp, #32]
 800d488:	e7cf      	b.n	800d42a <_dtoa_r+0x23a>
 800d48a:	2201      	movs	r2, #1
 800d48c:	9207      	str	r2, [sp, #28]
 800d48e:	e7f5      	b.n	800d47c <_dtoa_r+0x28c>
 800d490:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d494:	46d1      	mov	r9, sl
 800d496:	4652      	mov	r2, sl
 800d498:	e7c7      	b.n	800d42a <_dtoa_r+0x23a>
 800d49a:	3101      	adds	r1, #1
 800d49c:	0040      	lsls	r0, r0, #1
 800d49e:	e7c7      	b.n	800d430 <_dtoa_r+0x240>
 800d4a0:	636f4361 	.word	0x636f4361
 800d4a4:	3fd287a7 	.word	0x3fd287a7
 800d4a8:	8b60c8b3 	.word	0x8b60c8b3
 800d4ac:	3fc68a28 	.word	0x3fc68a28
 800d4b0:	509f79fb 	.word	0x509f79fb
 800d4b4:	3fd34413 	.word	0x3fd34413
 800d4b8:	0800fee5 	.word	0x0800fee5
 800d4bc:	0800fefc 	.word	0x0800fefc
 800d4c0:	7ff00000 	.word	0x7ff00000
 800d4c4:	0800fee1 	.word	0x0800fee1
 800d4c8:	0800fed8 	.word	0x0800fed8
 800d4cc:	0800feb5 	.word	0x0800feb5
 800d4d0:	0800ffe8 	.word	0x0800ffe8
 800d4d4:	0800ff54 	.word	0x0800ff54
 800d4d8:	69f2      	ldr	r2, [r6, #28]
 800d4da:	9901      	ldr	r1, [sp, #4]
 800d4dc:	6011      	str	r1, [r2, #0]
 800d4de:	f1b9 0f0e 	cmp.w	r9, #14
 800d4e2:	d86c      	bhi.n	800d5be <_dtoa_r+0x3ce>
 800d4e4:	2c00      	cmp	r4, #0
 800d4e6:	d06a      	beq.n	800d5be <_dtoa_r+0x3ce>
 800d4e8:	f1bb 0f00 	cmp.w	fp, #0
 800d4ec:	f340 80a0 	ble.w	800d630 <_dtoa_r+0x440>
 800d4f0:	4ac1      	ldr	r2, [pc, #772]	; (800d7f8 <_dtoa_r+0x608>)
 800d4f2:	f00b 010f 	and.w	r1, fp, #15
 800d4f6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d4fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d4fe:	ed92 7b00 	vldr	d7, [r2]
 800d502:	ea4f 122b 	mov.w	r2, fp, asr #4
 800d506:	f000 8087 	beq.w	800d618 <_dtoa_r+0x428>
 800d50a:	49bc      	ldr	r1, [pc, #752]	; (800d7fc <_dtoa_r+0x60c>)
 800d50c:	ed91 6b08 	vldr	d6, [r1, #32]
 800d510:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d514:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d518:	f002 020f 	and.w	r2, r2, #15
 800d51c:	2103      	movs	r1, #3
 800d51e:	48b7      	ldr	r0, [pc, #732]	; (800d7fc <_dtoa_r+0x60c>)
 800d520:	2a00      	cmp	r2, #0
 800d522:	d17b      	bne.n	800d61c <_dtoa_r+0x42c>
 800d524:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d528:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d52c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d530:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d532:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d536:	2a00      	cmp	r2, #0
 800d538:	f000 80a0 	beq.w	800d67c <_dtoa_r+0x48c>
 800d53c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d540:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d548:	f140 8098 	bpl.w	800d67c <_dtoa_r+0x48c>
 800d54c:	f1b9 0f00 	cmp.w	r9, #0
 800d550:	f000 8094 	beq.w	800d67c <_dtoa_r+0x48c>
 800d554:	f1ba 0f00 	cmp.w	sl, #0
 800d558:	dd2f      	ble.n	800d5ba <_dtoa_r+0x3ca>
 800d55a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d55e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d562:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d566:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d56a:	3101      	adds	r1, #1
 800d56c:	4654      	mov	r4, sl
 800d56e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d572:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d576:	ee07 1a90 	vmov	s15, r1
 800d57a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d57e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d582:	ee15 7a90 	vmov	r7, s11
 800d586:	ec51 0b15 	vmov	r0, r1, d5
 800d58a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800d58e:	2c00      	cmp	r4, #0
 800d590:	d177      	bne.n	800d682 <_dtoa_r+0x492>
 800d592:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d596:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d59a:	ec41 0b17 	vmov	d7, r0, r1
 800d59e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5a6:	f300 826a 	bgt.w	800da7e <_dtoa_r+0x88e>
 800d5aa:	eeb1 7b47 	vneg.f64	d7, d7
 800d5ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5b6:	f100 8260 	bmi.w	800da7a <_dtoa_r+0x88a>
 800d5ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d5be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d5c0:	2a00      	cmp	r2, #0
 800d5c2:	f2c0 811d 	blt.w	800d800 <_dtoa_r+0x610>
 800d5c6:	f1bb 0f0e 	cmp.w	fp, #14
 800d5ca:	f300 8119 	bgt.w	800d800 <_dtoa_r+0x610>
 800d5ce:	4b8a      	ldr	r3, [pc, #552]	; (800d7f8 <_dtoa_r+0x608>)
 800d5d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d5d4:	ed93 6b00 	vldr	d6, [r3]
 800d5d8:	9b08      	ldr	r3, [sp, #32]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	f280 80b7 	bge.w	800d74e <_dtoa_r+0x55e>
 800d5e0:	f1b9 0f00 	cmp.w	r9, #0
 800d5e4:	f300 80b3 	bgt.w	800d74e <_dtoa_r+0x55e>
 800d5e8:	f040 8246 	bne.w	800da78 <_dtoa_r+0x888>
 800d5ec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d5f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d5f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d600:	464c      	mov	r4, r9
 800d602:	464f      	mov	r7, r9
 800d604:	f280 821c 	bge.w	800da40 <_dtoa_r+0x850>
 800d608:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d60c:	2331      	movs	r3, #49	; 0x31
 800d60e:	f808 3b01 	strb.w	r3, [r8], #1
 800d612:	f10b 0b01 	add.w	fp, fp, #1
 800d616:	e218      	b.n	800da4a <_dtoa_r+0x85a>
 800d618:	2102      	movs	r1, #2
 800d61a:	e780      	b.n	800d51e <_dtoa_r+0x32e>
 800d61c:	07d4      	lsls	r4, r2, #31
 800d61e:	d504      	bpl.n	800d62a <_dtoa_r+0x43a>
 800d620:	ed90 6b00 	vldr	d6, [r0]
 800d624:	3101      	adds	r1, #1
 800d626:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d62a:	1052      	asrs	r2, r2, #1
 800d62c:	3008      	adds	r0, #8
 800d62e:	e777      	b.n	800d520 <_dtoa_r+0x330>
 800d630:	d022      	beq.n	800d678 <_dtoa_r+0x488>
 800d632:	f1cb 0200 	rsb	r2, fp, #0
 800d636:	4970      	ldr	r1, [pc, #448]	; (800d7f8 <_dtoa_r+0x608>)
 800d638:	f002 000f 	and.w	r0, r2, #15
 800d63c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d640:	ed91 7b00 	vldr	d7, [r1]
 800d644:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d648:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d64c:	486b      	ldr	r0, [pc, #428]	; (800d7fc <_dtoa_r+0x60c>)
 800d64e:	1112      	asrs	r2, r2, #4
 800d650:	2400      	movs	r4, #0
 800d652:	2102      	movs	r1, #2
 800d654:	b92a      	cbnz	r2, 800d662 <_dtoa_r+0x472>
 800d656:	2c00      	cmp	r4, #0
 800d658:	f43f af6a 	beq.w	800d530 <_dtoa_r+0x340>
 800d65c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d660:	e766      	b.n	800d530 <_dtoa_r+0x340>
 800d662:	07d7      	lsls	r7, r2, #31
 800d664:	d505      	bpl.n	800d672 <_dtoa_r+0x482>
 800d666:	ed90 6b00 	vldr	d6, [r0]
 800d66a:	3101      	adds	r1, #1
 800d66c:	2401      	movs	r4, #1
 800d66e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d672:	1052      	asrs	r2, r2, #1
 800d674:	3008      	adds	r0, #8
 800d676:	e7ed      	b.n	800d654 <_dtoa_r+0x464>
 800d678:	2102      	movs	r1, #2
 800d67a:	e759      	b.n	800d530 <_dtoa_r+0x340>
 800d67c:	465a      	mov	r2, fp
 800d67e:	464c      	mov	r4, r9
 800d680:	e775      	b.n	800d56e <_dtoa_r+0x37e>
 800d682:	ec41 0b17 	vmov	d7, r0, r1
 800d686:	495c      	ldr	r1, [pc, #368]	; (800d7f8 <_dtoa_r+0x608>)
 800d688:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800d68c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800d690:	9901      	ldr	r1, [sp, #4]
 800d692:	440c      	add	r4, r1
 800d694:	9907      	ldr	r1, [sp, #28]
 800d696:	b351      	cbz	r1, 800d6ee <_dtoa_r+0x4fe>
 800d698:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d69c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d6a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d6a4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d6a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d6ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d6b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d6b4:	ee14 1a90 	vmov	r1, s9
 800d6b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d6bc:	3130      	adds	r1, #48	; 0x30
 800d6be:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d6c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ca:	f808 1b01 	strb.w	r1, [r8], #1
 800d6ce:	d439      	bmi.n	800d744 <_dtoa_r+0x554>
 800d6d0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d6d4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6dc:	d472      	bmi.n	800d7c4 <_dtoa_r+0x5d4>
 800d6de:	45a0      	cmp	r8, r4
 800d6e0:	f43f af6b 	beq.w	800d5ba <_dtoa_r+0x3ca>
 800d6e4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d6e8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d6ec:	e7e0      	b.n	800d6b0 <_dtoa_r+0x4c0>
 800d6ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d6f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d6fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d700:	ee14 1a90 	vmov	r1, s9
 800d704:	3130      	adds	r1, #48	; 0x30
 800d706:	f808 1b01 	strb.w	r1, [r8], #1
 800d70a:	45a0      	cmp	r8, r4
 800d70c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d710:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d714:	d118      	bne.n	800d748 <_dtoa_r+0x558>
 800d716:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d71a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d71e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d726:	dc4d      	bgt.n	800d7c4 <_dtoa_r+0x5d4>
 800d728:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d72c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d734:	f57f af41 	bpl.w	800d5ba <_dtoa_r+0x3ca>
 800d738:	4680      	mov	r8, r0
 800d73a:	3801      	subs	r0, #1
 800d73c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d740:	2b30      	cmp	r3, #48	; 0x30
 800d742:	d0f9      	beq.n	800d738 <_dtoa_r+0x548>
 800d744:	4693      	mov	fp, r2
 800d746:	e02a      	b.n	800d79e <_dtoa_r+0x5ae>
 800d748:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d74c:	e7d6      	b.n	800d6fc <_dtoa_r+0x50c>
 800d74e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d752:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d756:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d75a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d75e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d762:	ee15 3a10 	vmov	r3, s10
 800d766:	3330      	adds	r3, #48	; 0x30
 800d768:	f808 3b01 	strb.w	r3, [r8], #1
 800d76c:	9b01      	ldr	r3, [sp, #4]
 800d76e:	eba8 0303 	sub.w	r3, r8, r3
 800d772:	4599      	cmp	r9, r3
 800d774:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d778:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d77c:	d133      	bne.n	800d7e6 <_dtoa_r+0x5f6>
 800d77e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d782:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d78a:	dc1a      	bgt.n	800d7c2 <_dtoa_r+0x5d2>
 800d78c:	eeb4 7b46 	vcmp.f64	d7, d6
 800d790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d794:	d103      	bne.n	800d79e <_dtoa_r+0x5ae>
 800d796:	ee15 3a10 	vmov	r3, s10
 800d79a:	07d9      	lsls	r1, r3, #31
 800d79c:	d411      	bmi.n	800d7c2 <_dtoa_r+0x5d2>
 800d79e:	4629      	mov	r1, r5
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	f000 fbd1 	bl	800df48 <_Bfree>
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7aa:	f888 3000 	strb.w	r3, [r8]
 800d7ae:	f10b 0301 	add.w	r3, fp, #1
 800d7b2:	6013      	str	r3, [r2, #0]
 800d7b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	f43f ad69 	beq.w	800d28e <_dtoa_r+0x9e>
 800d7bc:	f8c3 8000 	str.w	r8, [r3]
 800d7c0:	e565      	b.n	800d28e <_dtoa_r+0x9e>
 800d7c2:	465a      	mov	r2, fp
 800d7c4:	4643      	mov	r3, r8
 800d7c6:	4698      	mov	r8, r3
 800d7c8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800d7cc:	2939      	cmp	r1, #57	; 0x39
 800d7ce:	d106      	bne.n	800d7de <_dtoa_r+0x5ee>
 800d7d0:	9901      	ldr	r1, [sp, #4]
 800d7d2:	4299      	cmp	r1, r3
 800d7d4:	d1f7      	bne.n	800d7c6 <_dtoa_r+0x5d6>
 800d7d6:	9801      	ldr	r0, [sp, #4]
 800d7d8:	2130      	movs	r1, #48	; 0x30
 800d7da:	3201      	adds	r2, #1
 800d7dc:	7001      	strb	r1, [r0, #0]
 800d7de:	7819      	ldrb	r1, [r3, #0]
 800d7e0:	3101      	adds	r1, #1
 800d7e2:	7019      	strb	r1, [r3, #0]
 800d7e4:	e7ae      	b.n	800d744 <_dtoa_r+0x554>
 800d7e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d7ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f2:	d1b2      	bne.n	800d75a <_dtoa_r+0x56a>
 800d7f4:	e7d3      	b.n	800d79e <_dtoa_r+0x5ae>
 800d7f6:	bf00      	nop
 800d7f8:	0800ffe8 	.word	0x0800ffe8
 800d7fc:	0800ffc0 	.word	0x0800ffc0
 800d800:	9907      	ldr	r1, [sp, #28]
 800d802:	2900      	cmp	r1, #0
 800d804:	f000 80d0 	beq.w	800d9a8 <_dtoa_r+0x7b8>
 800d808:	9906      	ldr	r1, [sp, #24]
 800d80a:	2901      	cmp	r1, #1
 800d80c:	f300 80b4 	bgt.w	800d978 <_dtoa_r+0x788>
 800d810:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d812:	2900      	cmp	r1, #0
 800d814:	f000 80ac 	beq.w	800d970 <_dtoa_r+0x780>
 800d818:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d81c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d820:	461c      	mov	r4, r3
 800d822:	9309      	str	r3, [sp, #36]	; 0x24
 800d824:	9b04      	ldr	r3, [sp, #16]
 800d826:	4413      	add	r3, r2
 800d828:	9304      	str	r3, [sp, #16]
 800d82a:	9b05      	ldr	r3, [sp, #20]
 800d82c:	2101      	movs	r1, #1
 800d82e:	4413      	add	r3, r2
 800d830:	4630      	mov	r0, r6
 800d832:	9305      	str	r3, [sp, #20]
 800d834:	f000 fc3e 	bl	800e0b4 <__i2b>
 800d838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d83a:	4607      	mov	r7, r0
 800d83c:	f1b8 0f00 	cmp.w	r8, #0
 800d840:	d00d      	beq.n	800d85e <_dtoa_r+0x66e>
 800d842:	9a05      	ldr	r2, [sp, #20]
 800d844:	2a00      	cmp	r2, #0
 800d846:	dd0a      	ble.n	800d85e <_dtoa_r+0x66e>
 800d848:	4542      	cmp	r2, r8
 800d84a:	9904      	ldr	r1, [sp, #16]
 800d84c:	bfa8      	it	ge
 800d84e:	4642      	movge	r2, r8
 800d850:	1a89      	subs	r1, r1, r2
 800d852:	9104      	str	r1, [sp, #16]
 800d854:	9905      	ldr	r1, [sp, #20]
 800d856:	eba8 0802 	sub.w	r8, r8, r2
 800d85a:	1a8a      	subs	r2, r1, r2
 800d85c:	9205      	str	r2, [sp, #20]
 800d85e:	b303      	cbz	r3, 800d8a2 <_dtoa_r+0x6b2>
 800d860:	9a07      	ldr	r2, [sp, #28]
 800d862:	2a00      	cmp	r2, #0
 800d864:	f000 80a5 	beq.w	800d9b2 <_dtoa_r+0x7c2>
 800d868:	2c00      	cmp	r4, #0
 800d86a:	dd13      	ble.n	800d894 <_dtoa_r+0x6a4>
 800d86c:	4639      	mov	r1, r7
 800d86e:	4622      	mov	r2, r4
 800d870:	4630      	mov	r0, r6
 800d872:	930d      	str	r3, [sp, #52]	; 0x34
 800d874:	f000 fcde 	bl	800e234 <__pow5mult>
 800d878:	462a      	mov	r2, r5
 800d87a:	4601      	mov	r1, r0
 800d87c:	4607      	mov	r7, r0
 800d87e:	4630      	mov	r0, r6
 800d880:	f000 fc2e 	bl	800e0e0 <__multiply>
 800d884:	4629      	mov	r1, r5
 800d886:	9009      	str	r0, [sp, #36]	; 0x24
 800d888:	4630      	mov	r0, r6
 800d88a:	f000 fb5d 	bl	800df48 <_Bfree>
 800d88e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d892:	4615      	mov	r5, r2
 800d894:	1b1a      	subs	r2, r3, r4
 800d896:	d004      	beq.n	800d8a2 <_dtoa_r+0x6b2>
 800d898:	4629      	mov	r1, r5
 800d89a:	4630      	mov	r0, r6
 800d89c:	f000 fcca 	bl	800e234 <__pow5mult>
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	2101      	movs	r1, #1
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	f000 fc05 	bl	800e0b4 <__i2b>
 800d8aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	4604      	mov	r4, r0
 800d8b0:	f340 8081 	ble.w	800d9b6 <_dtoa_r+0x7c6>
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	4601      	mov	r1, r0
 800d8b8:	4630      	mov	r0, r6
 800d8ba:	f000 fcbb 	bl	800e234 <__pow5mult>
 800d8be:	9b06      	ldr	r3, [sp, #24]
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	dd7a      	ble.n	800d9bc <_dtoa_r+0x7cc>
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ca:	6922      	ldr	r2, [r4, #16]
 800d8cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d8d0:	6910      	ldr	r0, [r2, #16]
 800d8d2:	f000 fba1 	bl	800e018 <__hi0bits>
 800d8d6:	f1c0 0020 	rsb	r0, r0, #32
 800d8da:	9b05      	ldr	r3, [sp, #20]
 800d8dc:	4418      	add	r0, r3
 800d8de:	f010 001f 	ands.w	r0, r0, #31
 800d8e2:	f000 8093 	beq.w	800da0c <_dtoa_r+0x81c>
 800d8e6:	f1c0 0220 	rsb	r2, r0, #32
 800d8ea:	2a04      	cmp	r2, #4
 800d8ec:	f340 8085 	ble.w	800d9fa <_dtoa_r+0x80a>
 800d8f0:	9b04      	ldr	r3, [sp, #16]
 800d8f2:	f1c0 001c 	rsb	r0, r0, #28
 800d8f6:	4403      	add	r3, r0
 800d8f8:	9304      	str	r3, [sp, #16]
 800d8fa:	9b05      	ldr	r3, [sp, #20]
 800d8fc:	4480      	add	r8, r0
 800d8fe:	4403      	add	r3, r0
 800d900:	9305      	str	r3, [sp, #20]
 800d902:	9b04      	ldr	r3, [sp, #16]
 800d904:	2b00      	cmp	r3, #0
 800d906:	dd05      	ble.n	800d914 <_dtoa_r+0x724>
 800d908:	4629      	mov	r1, r5
 800d90a:	461a      	mov	r2, r3
 800d90c:	4630      	mov	r0, r6
 800d90e:	f000 fceb 	bl	800e2e8 <__lshift>
 800d912:	4605      	mov	r5, r0
 800d914:	9b05      	ldr	r3, [sp, #20]
 800d916:	2b00      	cmp	r3, #0
 800d918:	dd05      	ble.n	800d926 <_dtoa_r+0x736>
 800d91a:	4621      	mov	r1, r4
 800d91c:	461a      	mov	r2, r3
 800d91e:	4630      	mov	r0, r6
 800d920:	f000 fce2 	bl	800e2e8 <__lshift>
 800d924:	4604      	mov	r4, r0
 800d926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d071      	beq.n	800da10 <_dtoa_r+0x820>
 800d92c:	4621      	mov	r1, r4
 800d92e:	4628      	mov	r0, r5
 800d930:	f000 fd46 	bl	800e3c0 <__mcmp>
 800d934:	2800      	cmp	r0, #0
 800d936:	da6b      	bge.n	800da10 <_dtoa_r+0x820>
 800d938:	2300      	movs	r3, #0
 800d93a:	4629      	mov	r1, r5
 800d93c:	220a      	movs	r2, #10
 800d93e:	4630      	mov	r0, r6
 800d940:	f000 fb24 	bl	800df8c <__multadd>
 800d944:	9b07      	ldr	r3, [sp, #28]
 800d946:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d94a:	4605      	mov	r5, r0
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f000 8197 	beq.w	800dc80 <_dtoa_r+0xa90>
 800d952:	4639      	mov	r1, r7
 800d954:	2300      	movs	r3, #0
 800d956:	220a      	movs	r2, #10
 800d958:	4630      	mov	r0, r6
 800d95a:	f000 fb17 	bl	800df8c <__multadd>
 800d95e:	f1ba 0f00 	cmp.w	sl, #0
 800d962:	4607      	mov	r7, r0
 800d964:	f300 8093 	bgt.w	800da8e <_dtoa_r+0x89e>
 800d968:	9b06      	ldr	r3, [sp, #24]
 800d96a:	2b02      	cmp	r3, #2
 800d96c:	dc57      	bgt.n	800da1e <_dtoa_r+0x82e>
 800d96e:	e08e      	b.n	800da8e <_dtoa_r+0x89e>
 800d970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d972:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d976:	e751      	b.n	800d81c <_dtoa_r+0x62c>
 800d978:	f109 34ff 	add.w	r4, r9, #4294967295
 800d97c:	42a3      	cmp	r3, r4
 800d97e:	bfbf      	itttt	lt
 800d980:	1ae2      	sublt	r2, r4, r3
 800d982:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d984:	189b      	addlt	r3, r3, r2
 800d986:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d988:	bfae      	itee	ge
 800d98a:	1b1c      	subge	r4, r3, r4
 800d98c:	4623      	movlt	r3, r4
 800d98e:	2400      	movlt	r4, #0
 800d990:	f1b9 0f00 	cmp.w	r9, #0
 800d994:	bfb5      	itete	lt
 800d996:	9a04      	ldrlt	r2, [sp, #16]
 800d998:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800d99c:	eba2 0809 	sublt.w	r8, r2, r9
 800d9a0:	464a      	movge	r2, r9
 800d9a2:	bfb8      	it	lt
 800d9a4:	2200      	movlt	r2, #0
 800d9a6:	e73c      	b.n	800d822 <_dtoa_r+0x632>
 800d9a8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d9ac:	9f07      	ldr	r7, [sp, #28]
 800d9ae:	461c      	mov	r4, r3
 800d9b0:	e744      	b.n	800d83c <_dtoa_r+0x64c>
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	e770      	b.n	800d898 <_dtoa_r+0x6a8>
 800d9b6:	9b06      	ldr	r3, [sp, #24]
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	dc18      	bgt.n	800d9ee <_dtoa_r+0x7fe>
 800d9bc:	9b02      	ldr	r3, [sp, #8]
 800d9be:	b9b3      	cbnz	r3, 800d9ee <_dtoa_r+0x7fe>
 800d9c0:	9b03      	ldr	r3, [sp, #12]
 800d9c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d9c6:	b9a2      	cbnz	r2, 800d9f2 <_dtoa_r+0x802>
 800d9c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d9cc:	0d12      	lsrs	r2, r2, #20
 800d9ce:	0512      	lsls	r2, r2, #20
 800d9d0:	b18a      	cbz	r2, 800d9f6 <_dtoa_r+0x806>
 800d9d2:	9b04      	ldr	r3, [sp, #16]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	9304      	str	r3, [sp, #16]
 800d9d8:	9b05      	ldr	r3, [sp, #20]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	9305      	str	r3, [sp, #20]
 800d9de:	2301      	movs	r3, #1
 800d9e0:	9309      	str	r3, [sp, #36]	; 0x24
 800d9e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	f47f af70 	bne.w	800d8ca <_dtoa_r+0x6da>
 800d9ea:	2001      	movs	r0, #1
 800d9ec:	e775      	b.n	800d8da <_dtoa_r+0x6ea>
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	e7f6      	b.n	800d9e0 <_dtoa_r+0x7f0>
 800d9f2:	9b02      	ldr	r3, [sp, #8]
 800d9f4:	e7f4      	b.n	800d9e0 <_dtoa_r+0x7f0>
 800d9f6:	9209      	str	r2, [sp, #36]	; 0x24
 800d9f8:	e7f3      	b.n	800d9e2 <_dtoa_r+0x7f2>
 800d9fa:	d082      	beq.n	800d902 <_dtoa_r+0x712>
 800d9fc:	9b04      	ldr	r3, [sp, #16]
 800d9fe:	321c      	adds	r2, #28
 800da00:	4413      	add	r3, r2
 800da02:	9304      	str	r3, [sp, #16]
 800da04:	9b05      	ldr	r3, [sp, #20]
 800da06:	4490      	add	r8, r2
 800da08:	4413      	add	r3, r2
 800da0a:	e779      	b.n	800d900 <_dtoa_r+0x710>
 800da0c:	4602      	mov	r2, r0
 800da0e:	e7f5      	b.n	800d9fc <_dtoa_r+0x80c>
 800da10:	f1b9 0f00 	cmp.w	r9, #0
 800da14:	dc36      	bgt.n	800da84 <_dtoa_r+0x894>
 800da16:	9b06      	ldr	r3, [sp, #24]
 800da18:	2b02      	cmp	r3, #2
 800da1a:	dd33      	ble.n	800da84 <_dtoa_r+0x894>
 800da1c:	46ca      	mov	sl, r9
 800da1e:	f1ba 0f00 	cmp.w	sl, #0
 800da22:	d10d      	bne.n	800da40 <_dtoa_r+0x850>
 800da24:	4621      	mov	r1, r4
 800da26:	4653      	mov	r3, sl
 800da28:	2205      	movs	r2, #5
 800da2a:	4630      	mov	r0, r6
 800da2c:	f000 faae 	bl	800df8c <__multadd>
 800da30:	4601      	mov	r1, r0
 800da32:	4604      	mov	r4, r0
 800da34:	4628      	mov	r0, r5
 800da36:	f000 fcc3 	bl	800e3c0 <__mcmp>
 800da3a:	2800      	cmp	r0, #0
 800da3c:	f73f ade4 	bgt.w	800d608 <_dtoa_r+0x418>
 800da40:	9b08      	ldr	r3, [sp, #32]
 800da42:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800da46:	ea6f 0b03 	mvn.w	fp, r3
 800da4a:	f04f 0900 	mov.w	r9, #0
 800da4e:	4621      	mov	r1, r4
 800da50:	4630      	mov	r0, r6
 800da52:	f000 fa79 	bl	800df48 <_Bfree>
 800da56:	2f00      	cmp	r7, #0
 800da58:	f43f aea1 	beq.w	800d79e <_dtoa_r+0x5ae>
 800da5c:	f1b9 0f00 	cmp.w	r9, #0
 800da60:	d005      	beq.n	800da6e <_dtoa_r+0x87e>
 800da62:	45b9      	cmp	r9, r7
 800da64:	d003      	beq.n	800da6e <_dtoa_r+0x87e>
 800da66:	4649      	mov	r1, r9
 800da68:	4630      	mov	r0, r6
 800da6a:	f000 fa6d 	bl	800df48 <_Bfree>
 800da6e:	4639      	mov	r1, r7
 800da70:	4630      	mov	r0, r6
 800da72:	f000 fa69 	bl	800df48 <_Bfree>
 800da76:	e692      	b.n	800d79e <_dtoa_r+0x5ae>
 800da78:	2400      	movs	r4, #0
 800da7a:	4627      	mov	r7, r4
 800da7c:	e7e0      	b.n	800da40 <_dtoa_r+0x850>
 800da7e:	4693      	mov	fp, r2
 800da80:	4627      	mov	r7, r4
 800da82:	e5c1      	b.n	800d608 <_dtoa_r+0x418>
 800da84:	9b07      	ldr	r3, [sp, #28]
 800da86:	46ca      	mov	sl, r9
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f000 8100 	beq.w	800dc8e <_dtoa_r+0xa9e>
 800da8e:	f1b8 0f00 	cmp.w	r8, #0
 800da92:	dd05      	ble.n	800daa0 <_dtoa_r+0x8b0>
 800da94:	4639      	mov	r1, r7
 800da96:	4642      	mov	r2, r8
 800da98:	4630      	mov	r0, r6
 800da9a:	f000 fc25 	bl	800e2e8 <__lshift>
 800da9e:	4607      	mov	r7, r0
 800daa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d05d      	beq.n	800db62 <_dtoa_r+0x972>
 800daa6:	6879      	ldr	r1, [r7, #4]
 800daa8:	4630      	mov	r0, r6
 800daaa:	f000 fa0d 	bl	800dec8 <_Balloc>
 800daae:	4680      	mov	r8, r0
 800dab0:	b928      	cbnz	r0, 800dabe <_dtoa_r+0x8ce>
 800dab2:	4b82      	ldr	r3, [pc, #520]	; (800dcbc <_dtoa_r+0xacc>)
 800dab4:	4602      	mov	r2, r0
 800dab6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800daba:	f7ff bbb1 	b.w	800d220 <_dtoa_r+0x30>
 800dabe:	693a      	ldr	r2, [r7, #16]
 800dac0:	3202      	adds	r2, #2
 800dac2:	0092      	lsls	r2, r2, #2
 800dac4:	f107 010c 	add.w	r1, r7, #12
 800dac8:	300c      	adds	r0, #12
 800daca:	f7ff faf8 	bl	800d0be <memcpy>
 800dace:	2201      	movs	r2, #1
 800dad0:	4641      	mov	r1, r8
 800dad2:	4630      	mov	r0, r6
 800dad4:	f000 fc08 	bl	800e2e8 <__lshift>
 800dad8:	9b01      	ldr	r3, [sp, #4]
 800dada:	3301      	adds	r3, #1
 800dadc:	9304      	str	r3, [sp, #16]
 800dade:	9b01      	ldr	r3, [sp, #4]
 800dae0:	4453      	add	r3, sl
 800dae2:	9308      	str	r3, [sp, #32]
 800dae4:	9b02      	ldr	r3, [sp, #8]
 800dae6:	f003 0301 	and.w	r3, r3, #1
 800daea:	46b9      	mov	r9, r7
 800daec:	9307      	str	r3, [sp, #28]
 800daee:	4607      	mov	r7, r0
 800daf0:	9b04      	ldr	r3, [sp, #16]
 800daf2:	4621      	mov	r1, r4
 800daf4:	3b01      	subs	r3, #1
 800daf6:	4628      	mov	r0, r5
 800daf8:	9302      	str	r3, [sp, #8]
 800dafa:	f7ff faee 	bl	800d0da <quorem>
 800dafe:	4603      	mov	r3, r0
 800db00:	3330      	adds	r3, #48	; 0x30
 800db02:	9005      	str	r0, [sp, #20]
 800db04:	4649      	mov	r1, r9
 800db06:	4628      	mov	r0, r5
 800db08:	9309      	str	r3, [sp, #36]	; 0x24
 800db0a:	f000 fc59 	bl	800e3c0 <__mcmp>
 800db0e:	463a      	mov	r2, r7
 800db10:	4682      	mov	sl, r0
 800db12:	4621      	mov	r1, r4
 800db14:	4630      	mov	r0, r6
 800db16:	f000 fc6f 	bl	800e3f8 <__mdiff>
 800db1a:	68c2      	ldr	r2, [r0, #12]
 800db1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db1e:	4680      	mov	r8, r0
 800db20:	bb0a      	cbnz	r2, 800db66 <_dtoa_r+0x976>
 800db22:	4601      	mov	r1, r0
 800db24:	4628      	mov	r0, r5
 800db26:	f000 fc4b 	bl	800e3c0 <__mcmp>
 800db2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db2c:	4602      	mov	r2, r0
 800db2e:	4641      	mov	r1, r8
 800db30:	4630      	mov	r0, r6
 800db32:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800db36:	f000 fa07 	bl	800df48 <_Bfree>
 800db3a:	9b06      	ldr	r3, [sp, #24]
 800db3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db3e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800db42:	ea43 0102 	orr.w	r1, r3, r2
 800db46:	9b07      	ldr	r3, [sp, #28]
 800db48:	4319      	orrs	r1, r3
 800db4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db4c:	d10d      	bne.n	800db6a <_dtoa_r+0x97a>
 800db4e:	2b39      	cmp	r3, #57	; 0x39
 800db50:	d029      	beq.n	800dba6 <_dtoa_r+0x9b6>
 800db52:	f1ba 0f00 	cmp.w	sl, #0
 800db56:	dd01      	ble.n	800db5c <_dtoa_r+0x96c>
 800db58:	9b05      	ldr	r3, [sp, #20]
 800db5a:	3331      	adds	r3, #49	; 0x31
 800db5c:	9a02      	ldr	r2, [sp, #8]
 800db5e:	7013      	strb	r3, [r2, #0]
 800db60:	e775      	b.n	800da4e <_dtoa_r+0x85e>
 800db62:	4638      	mov	r0, r7
 800db64:	e7b8      	b.n	800dad8 <_dtoa_r+0x8e8>
 800db66:	2201      	movs	r2, #1
 800db68:	e7e1      	b.n	800db2e <_dtoa_r+0x93e>
 800db6a:	f1ba 0f00 	cmp.w	sl, #0
 800db6e:	db06      	blt.n	800db7e <_dtoa_r+0x98e>
 800db70:	9906      	ldr	r1, [sp, #24]
 800db72:	ea41 0a0a 	orr.w	sl, r1, sl
 800db76:	9907      	ldr	r1, [sp, #28]
 800db78:	ea5a 0a01 	orrs.w	sl, sl, r1
 800db7c:	d120      	bne.n	800dbc0 <_dtoa_r+0x9d0>
 800db7e:	2a00      	cmp	r2, #0
 800db80:	ddec      	ble.n	800db5c <_dtoa_r+0x96c>
 800db82:	4629      	mov	r1, r5
 800db84:	2201      	movs	r2, #1
 800db86:	4630      	mov	r0, r6
 800db88:	9304      	str	r3, [sp, #16]
 800db8a:	f000 fbad 	bl	800e2e8 <__lshift>
 800db8e:	4621      	mov	r1, r4
 800db90:	4605      	mov	r5, r0
 800db92:	f000 fc15 	bl	800e3c0 <__mcmp>
 800db96:	2800      	cmp	r0, #0
 800db98:	9b04      	ldr	r3, [sp, #16]
 800db9a:	dc02      	bgt.n	800dba2 <_dtoa_r+0x9b2>
 800db9c:	d1de      	bne.n	800db5c <_dtoa_r+0x96c>
 800db9e:	07da      	lsls	r2, r3, #31
 800dba0:	d5dc      	bpl.n	800db5c <_dtoa_r+0x96c>
 800dba2:	2b39      	cmp	r3, #57	; 0x39
 800dba4:	d1d8      	bne.n	800db58 <_dtoa_r+0x968>
 800dba6:	9a02      	ldr	r2, [sp, #8]
 800dba8:	2339      	movs	r3, #57	; 0x39
 800dbaa:	7013      	strb	r3, [r2, #0]
 800dbac:	4643      	mov	r3, r8
 800dbae:	4698      	mov	r8, r3
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800dbb6:	2a39      	cmp	r2, #57	; 0x39
 800dbb8:	d051      	beq.n	800dc5e <_dtoa_r+0xa6e>
 800dbba:	3201      	adds	r2, #1
 800dbbc:	701a      	strb	r2, [r3, #0]
 800dbbe:	e746      	b.n	800da4e <_dtoa_r+0x85e>
 800dbc0:	2a00      	cmp	r2, #0
 800dbc2:	dd03      	ble.n	800dbcc <_dtoa_r+0x9dc>
 800dbc4:	2b39      	cmp	r3, #57	; 0x39
 800dbc6:	d0ee      	beq.n	800dba6 <_dtoa_r+0x9b6>
 800dbc8:	3301      	adds	r3, #1
 800dbca:	e7c7      	b.n	800db5c <_dtoa_r+0x96c>
 800dbcc:	9a04      	ldr	r2, [sp, #16]
 800dbce:	9908      	ldr	r1, [sp, #32]
 800dbd0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dbd4:	428a      	cmp	r2, r1
 800dbd6:	d02b      	beq.n	800dc30 <_dtoa_r+0xa40>
 800dbd8:	4629      	mov	r1, r5
 800dbda:	2300      	movs	r3, #0
 800dbdc:	220a      	movs	r2, #10
 800dbde:	4630      	mov	r0, r6
 800dbe0:	f000 f9d4 	bl	800df8c <__multadd>
 800dbe4:	45b9      	cmp	r9, r7
 800dbe6:	4605      	mov	r5, r0
 800dbe8:	f04f 0300 	mov.w	r3, #0
 800dbec:	f04f 020a 	mov.w	r2, #10
 800dbf0:	4649      	mov	r1, r9
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	d107      	bne.n	800dc06 <_dtoa_r+0xa16>
 800dbf6:	f000 f9c9 	bl	800df8c <__multadd>
 800dbfa:	4681      	mov	r9, r0
 800dbfc:	4607      	mov	r7, r0
 800dbfe:	9b04      	ldr	r3, [sp, #16]
 800dc00:	3301      	adds	r3, #1
 800dc02:	9304      	str	r3, [sp, #16]
 800dc04:	e774      	b.n	800daf0 <_dtoa_r+0x900>
 800dc06:	f000 f9c1 	bl	800df8c <__multadd>
 800dc0a:	4639      	mov	r1, r7
 800dc0c:	4681      	mov	r9, r0
 800dc0e:	2300      	movs	r3, #0
 800dc10:	220a      	movs	r2, #10
 800dc12:	4630      	mov	r0, r6
 800dc14:	f000 f9ba 	bl	800df8c <__multadd>
 800dc18:	4607      	mov	r7, r0
 800dc1a:	e7f0      	b.n	800dbfe <_dtoa_r+0xa0e>
 800dc1c:	f1ba 0f00 	cmp.w	sl, #0
 800dc20:	9a01      	ldr	r2, [sp, #4]
 800dc22:	bfcc      	ite	gt
 800dc24:	46d0      	movgt	r8, sl
 800dc26:	f04f 0801 	movle.w	r8, #1
 800dc2a:	4490      	add	r8, r2
 800dc2c:	f04f 0900 	mov.w	r9, #0
 800dc30:	4629      	mov	r1, r5
 800dc32:	2201      	movs	r2, #1
 800dc34:	4630      	mov	r0, r6
 800dc36:	9302      	str	r3, [sp, #8]
 800dc38:	f000 fb56 	bl	800e2e8 <__lshift>
 800dc3c:	4621      	mov	r1, r4
 800dc3e:	4605      	mov	r5, r0
 800dc40:	f000 fbbe 	bl	800e3c0 <__mcmp>
 800dc44:	2800      	cmp	r0, #0
 800dc46:	dcb1      	bgt.n	800dbac <_dtoa_r+0x9bc>
 800dc48:	d102      	bne.n	800dc50 <_dtoa_r+0xa60>
 800dc4a:	9b02      	ldr	r3, [sp, #8]
 800dc4c:	07db      	lsls	r3, r3, #31
 800dc4e:	d4ad      	bmi.n	800dbac <_dtoa_r+0x9bc>
 800dc50:	4643      	mov	r3, r8
 800dc52:	4698      	mov	r8, r3
 800dc54:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc58:	2a30      	cmp	r2, #48	; 0x30
 800dc5a:	d0fa      	beq.n	800dc52 <_dtoa_r+0xa62>
 800dc5c:	e6f7      	b.n	800da4e <_dtoa_r+0x85e>
 800dc5e:	9a01      	ldr	r2, [sp, #4]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d1a4      	bne.n	800dbae <_dtoa_r+0x9be>
 800dc64:	f10b 0b01 	add.w	fp, fp, #1
 800dc68:	2331      	movs	r3, #49	; 0x31
 800dc6a:	e778      	b.n	800db5e <_dtoa_r+0x96e>
 800dc6c:	4b14      	ldr	r3, [pc, #80]	; (800dcc0 <_dtoa_r+0xad0>)
 800dc6e:	f7ff bb2a 	b.w	800d2c6 <_dtoa_r+0xd6>
 800dc72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	f47f ab05 	bne.w	800d284 <_dtoa_r+0x94>
 800dc7a:	4b12      	ldr	r3, [pc, #72]	; (800dcc4 <_dtoa_r+0xad4>)
 800dc7c:	f7ff bb23 	b.w	800d2c6 <_dtoa_r+0xd6>
 800dc80:	f1ba 0f00 	cmp.w	sl, #0
 800dc84:	dc03      	bgt.n	800dc8e <_dtoa_r+0xa9e>
 800dc86:	9b06      	ldr	r3, [sp, #24]
 800dc88:	2b02      	cmp	r3, #2
 800dc8a:	f73f aec8 	bgt.w	800da1e <_dtoa_r+0x82e>
 800dc8e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dc92:	4621      	mov	r1, r4
 800dc94:	4628      	mov	r0, r5
 800dc96:	f7ff fa20 	bl	800d0da <quorem>
 800dc9a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800dc9e:	f808 3b01 	strb.w	r3, [r8], #1
 800dca2:	9a01      	ldr	r2, [sp, #4]
 800dca4:	eba8 0202 	sub.w	r2, r8, r2
 800dca8:	4592      	cmp	sl, r2
 800dcaa:	ddb7      	ble.n	800dc1c <_dtoa_r+0xa2c>
 800dcac:	4629      	mov	r1, r5
 800dcae:	2300      	movs	r3, #0
 800dcb0:	220a      	movs	r2, #10
 800dcb2:	4630      	mov	r0, r6
 800dcb4:	f000 f96a 	bl	800df8c <__multadd>
 800dcb8:	4605      	mov	r5, r0
 800dcba:	e7ea      	b.n	800dc92 <_dtoa_r+0xaa2>
 800dcbc:	0800ff54 	.word	0x0800ff54
 800dcc0:	0800feb4 	.word	0x0800feb4
 800dcc4:	0800fed8 	.word	0x0800fed8

0800dcc8 <_free_r>:
 800dcc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dcca:	2900      	cmp	r1, #0
 800dccc:	d044      	beq.n	800dd58 <_free_r+0x90>
 800dcce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcd2:	9001      	str	r0, [sp, #4]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	f1a1 0404 	sub.w	r4, r1, #4
 800dcda:	bfb8      	it	lt
 800dcdc:	18e4      	addlt	r4, r4, r3
 800dcde:	f000 f8e7 	bl	800deb0 <__malloc_lock>
 800dce2:	4a1e      	ldr	r2, [pc, #120]	; (800dd5c <_free_r+0x94>)
 800dce4:	9801      	ldr	r0, [sp, #4]
 800dce6:	6813      	ldr	r3, [r2, #0]
 800dce8:	b933      	cbnz	r3, 800dcf8 <_free_r+0x30>
 800dcea:	6063      	str	r3, [r4, #4]
 800dcec:	6014      	str	r4, [r2, #0]
 800dcee:	b003      	add	sp, #12
 800dcf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dcf4:	f000 b8e2 	b.w	800debc <__malloc_unlock>
 800dcf8:	42a3      	cmp	r3, r4
 800dcfa:	d908      	bls.n	800dd0e <_free_r+0x46>
 800dcfc:	6825      	ldr	r5, [r4, #0]
 800dcfe:	1961      	adds	r1, r4, r5
 800dd00:	428b      	cmp	r3, r1
 800dd02:	bf01      	itttt	eq
 800dd04:	6819      	ldreq	r1, [r3, #0]
 800dd06:	685b      	ldreq	r3, [r3, #4]
 800dd08:	1949      	addeq	r1, r1, r5
 800dd0a:	6021      	streq	r1, [r4, #0]
 800dd0c:	e7ed      	b.n	800dcea <_free_r+0x22>
 800dd0e:	461a      	mov	r2, r3
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	b10b      	cbz	r3, 800dd18 <_free_r+0x50>
 800dd14:	42a3      	cmp	r3, r4
 800dd16:	d9fa      	bls.n	800dd0e <_free_r+0x46>
 800dd18:	6811      	ldr	r1, [r2, #0]
 800dd1a:	1855      	adds	r5, r2, r1
 800dd1c:	42a5      	cmp	r5, r4
 800dd1e:	d10b      	bne.n	800dd38 <_free_r+0x70>
 800dd20:	6824      	ldr	r4, [r4, #0]
 800dd22:	4421      	add	r1, r4
 800dd24:	1854      	adds	r4, r2, r1
 800dd26:	42a3      	cmp	r3, r4
 800dd28:	6011      	str	r1, [r2, #0]
 800dd2a:	d1e0      	bne.n	800dcee <_free_r+0x26>
 800dd2c:	681c      	ldr	r4, [r3, #0]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	6053      	str	r3, [r2, #4]
 800dd32:	440c      	add	r4, r1
 800dd34:	6014      	str	r4, [r2, #0]
 800dd36:	e7da      	b.n	800dcee <_free_r+0x26>
 800dd38:	d902      	bls.n	800dd40 <_free_r+0x78>
 800dd3a:	230c      	movs	r3, #12
 800dd3c:	6003      	str	r3, [r0, #0]
 800dd3e:	e7d6      	b.n	800dcee <_free_r+0x26>
 800dd40:	6825      	ldr	r5, [r4, #0]
 800dd42:	1961      	adds	r1, r4, r5
 800dd44:	428b      	cmp	r3, r1
 800dd46:	bf04      	itt	eq
 800dd48:	6819      	ldreq	r1, [r3, #0]
 800dd4a:	685b      	ldreq	r3, [r3, #4]
 800dd4c:	6063      	str	r3, [r4, #4]
 800dd4e:	bf04      	itt	eq
 800dd50:	1949      	addeq	r1, r1, r5
 800dd52:	6021      	streq	r1, [r4, #0]
 800dd54:	6054      	str	r4, [r2, #4]
 800dd56:	e7ca      	b.n	800dcee <_free_r+0x26>
 800dd58:	b003      	add	sp, #12
 800dd5a:	bd30      	pop	{r4, r5, pc}
 800dd5c:	24005068 	.word	0x24005068

0800dd60 <malloc>:
 800dd60:	4b02      	ldr	r3, [pc, #8]	; (800dd6c <malloc+0xc>)
 800dd62:	4601      	mov	r1, r0
 800dd64:	6818      	ldr	r0, [r3, #0]
 800dd66:	f000 b823 	b.w	800ddb0 <_malloc_r>
 800dd6a:	bf00      	nop
 800dd6c:	2400006c 	.word	0x2400006c

0800dd70 <sbrk_aligned>:
 800dd70:	b570      	push	{r4, r5, r6, lr}
 800dd72:	4e0e      	ldr	r6, [pc, #56]	; (800ddac <sbrk_aligned+0x3c>)
 800dd74:	460c      	mov	r4, r1
 800dd76:	6831      	ldr	r1, [r6, #0]
 800dd78:	4605      	mov	r5, r0
 800dd7a:	b911      	cbnz	r1, 800dd82 <sbrk_aligned+0x12>
 800dd7c:	f000 fe96 	bl	800eaac <_sbrk_r>
 800dd80:	6030      	str	r0, [r6, #0]
 800dd82:	4621      	mov	r1, r4
 800dd84:	4628      	mov	r0, r5
 800dd86:	f000 fe91 	bl	800eaac <_sbrk_r>
 800dd8a:	1c43      	adds	r3, r0, #1
 800dd8c:	d00a      	beq.n	800dda4 <sbrk_aligned+0x34>
 800dd8e:	1cc4      	adds	r4, r0, #3
 800dd90:	f024 0403 	bic.w	r4, r4, #3
 800dd94:	42a0      	cmp	r0, r4
 800dd96:	d007      	beq.n	800dda8 <sbrk_aligned+0x38>
 800dd98:	1a21      	subs	r1, r4, r0
 800dd9a:	4628      	mov	r0, r5
 800dd9c:	f000 fe86 	bl	800eaac <_sbrk_r>
 800dda0:	3001      	adds	r0, #1
 800dda2:	d101      	bne.n	800dda8 <sbrk_aligned+0x38>
 800dda4:	f04f 34ff 	mov.w	r4, #4294967295
 800dda8:	4620      	mov	r0, r4
 800ddaa:	bd70      	pop	{r4, r5, r6, pc}
 800ddac:	2400506c 	.word	0x2400506c

0800ddb0 <_malloc_r>:
 800ddb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddb4:	1ccd      	adds	r5, r1, #3
 800ddb6:	f025 0503 	bic.w	r5, r5, #3
 800ddba:	3508      	adds	r5, #8
 800ddbc:	2d0c      	cmp	r5, #12
 800ddbe:	bf38      	it	cc
 800ddc0:	250c      	movcc	r5, #12
 800ddc2:	2d00      	cmp	r5, #0
 800ddc4:	4607      	mov	r7, r0
 800ddc6:	db01      	blt.n	800ddcc <_malloc_r+0x1c>
 800ddc8:	42a9      	cmp	r1, r5
 800ddca:	d905      	bls.n	800ddd8 <_malloc_r+0x28>
 800ddcc:	230c      	movs	r3, #12
 800ddce:	603b      	str	r3, [r7, #0]
 800ddd0:	2600      	movs	r6, #0
 800ddd2:	4630      	mov	r0, r6
 800ddd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800deac <_malloc_r+0xfc>
 800dddc:	f000 f868 	bl	800deb0 <__malloc_lock>
 800dde0:	f8d8 3000 	ldr.w	r3, [r8]
 800dde4:	461c      	mov	r4, r3
 800dde6:	bb5c      	cbnz	r4, 800de40 <_malloc_r+0x90>
 800dde8:	4629      	mov	r1, r5
 800ddea:	4638      	mov	r0, r7
 800ddec:	f7ff ffc0 	bl	800dd70 <sbrk_aligned>
 800ddf0:	1c43      	adds	r3, r0, #1
 800ddf2:	4604      	mov	r4, r0
 800ddf4:	d155      	bne.n	800dea2 <_malloc_r+0xf2>
 800ddf6:	f8d8 4000 	ldr.w	r4, [r8]
 800ddfa:	4626      	mov	r6, r4
 800ddfc:	2e00      	cmp	r6, #0
 800ddfe:	d145      	bne.n	800de8c <_malloc_r+0xdc>
 800de00:	2c00      	cmp	r4, #0
 800de02:	d048      	beq.n	800de96 <_malloc_r+0xe6>
 800de04:	6823      	ldr	r3, [r4, #0]
 800de06:	4631      	mov	r1, r6
 800de08:	4638      	mov	r0, r7
 800de0a:	eb04 0903 	add.w	r9, r4, r3
 800de0e:	f000 fe4d 	bl	800eaac <_sbrk_r>
 800de12:	4581      	cmp	r9, r0
 800de14:	d13f      	bne.n	800de96 <_malloc_r+0xe6>
 800de16:	6821      	ldr	r1, [r4, #0]
 800de18:	1a6d      	subs	r5, r5, r1
 800de1a:	4629      	mov	r1, r5
 800de1c:	4638      	mov	r0, r7
 800de1e:	f7ff ffa7 	bl	800dd70 <sbrk_aligned>
 800de22:	3001      	adds	r0, #1
 800de24:	d037      	beq.n	800de96 <_malloc_r+0xe6>
 800de26:	6823      	ldr	r3, [r4, #0]
 800de28:	442b      	add	r3, r5
 800de2a:	6023      	str	r3, [r4, #0]
 800de2c:	f8d8 3000 	ldr.w	r3, [r8]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d038      	beq.n	800dea6 <_malloc_r+0xf6>
 800de34:	685a      	ldr	r2, [r3, #4]
 800de36:	42a2      	cmp	r2, r4
 800de38:	d12b      	bne.n	800de92 <_malloc_r+0xe2>
 800de3a:	2200      	movs	r2, #0
 800de3c:	605a      	str	r2, [r3, #4]
 800de3e:	e00f      	b.n	800de60 <_malloc_r+0xb0>
 800de40:	6822      	ldr	r2, [r4, #0]
 800de42:	1b52      	subs	r2, r2, r5
 800de44:	d41f      	bmi.n	800de86 <_malloc_r+0xd6>
 800de46:	2a0b      	cmp	r2, #11
 800de48:	d917      	bls.n	800de7a <_malloc_r+0xca>
 800de4a:	1961      	adds	r1, r4, r5
 800de4c:	42a3      	cmp	r3, r4
 800de4e:	6025      	str	r5, [r4, #0]
 800de50:	bf18      	it	ne
 800de52:	6059      	strne	r1, [r3, #4]
 800de54:	6863      	ldr	r3, [r4, #4]
 800de56:	bf08      	it	eq
 800de58:	f8c8 1000 	streq.w	r1, [r8]
 800de5c:	5162      	str	r2, [r4, r5]
 800de5e:	604b      	str	r3, [r1, #4]
 800de60:	4638      	mov	r0, r7
 800de62:	f104 060b 	add.w	r6, r4, #11
 800de66:	f000 f829 	bl	800debc <__malloc_unlock>
 800de6a:	f026 0607 	bic.w	r6, r6, #7
 800de6e:	1d23      	adds	r3, r4, #4
 800de70:	1af2      	subs	r2, r6, r3
 800de72:	d0ae      	beq.n	800ddd2 <_malloc_r+0x22>
 800de74:	1b9b      	subs	r3, r3, r6
 800de76:	50a3      	str	r3, [r4, r2]
 800de78:	e7ab      	b.n	800ddd2 <_malloc_r+0x22>
 800de7a:	42a3      	cmp	r3, r4
 800de7c:	6862      	ldr	r2, [r4, #4]
 800de7e:	d1dd      	bne.n	800de3c <_malloc_r+0x8c>
 800de80:	f8c8 2000 	str.w	r2, [r8]
 800de84:	e7ec      	b.n	800de60 <_malloc_r+0xb0>
 800de86:	4623      	mov	r3, r4
 800de88:	6864      	ldr	r4, [r4, #4]
 800de8a:	e7ac      	b.n	800dde6 <_malloc_r+0x36>
 800de8c:	4634      	mov	r4, r6
 800de8e:	6876      	ldr	r6, [r6, #4]
 800de90:	e7b4      	b.n	800ddfc <_malloc_r+0x4c>
 800de92:	4613      	mov	r3, r2
 800de94:	e7cc      	b.n	800de30 <_malloc_r+0x80>
 800de96:	230c      	movs	r3, #12
 800de98:	603b      	str	r3, [r7, #0]
 800de9a:	4638      	mov	r0, r7
 800de9c:	f000 f80e 	bl	800debc <__malloc_unlock>
 800dea0:	e797      	b.n	800ddd2 <_malloc_r+0x22>
 800dea2:	6025      	str	r5, [r4, #0]
 800dea4:	e7dc      	b.n	800de60 <_malloc_r+0xb0>
 800dea6:	605b      	str	r3, [r3, #4]
 800dea8:	deff      	udf	#255	; 0xff
 800deaa:	bf00      	nop
 800deac:	24005068 	.word	0x24005068

0800deb0 <__malloc_lock>:
 800deb0:	4801      	ldr	r0, [pc, #4]	; (800deb8 <__malloc_lock+0x8>)
 800deb2:	f7ff b902 	b.w	800d0ba <__retarget_lock_acquire_recursive>
 800deb6:	bf00      	nop
 800deb8:	24005064 	.word	0x24005064

0800debc <__malloc_unlock>:
 800debc:	4801      	ldr	r0, [pc, #4]	; (800dec4 <__malloc_unlock+0x8>)
 800debe:	f7ff b8fd 	b.w	800d0bc <__retarget_lock_release_recursive>
 800dec2:	bf00      	nop
 800dec4:	24005064 	.word	0x24005064

0800dec8 <_Balloc>:
 800dec8:	b570      	push	{r4, r5, r6, lr}
 800deca:	69c6      	ldr	r6, [r0, #28]
 800decc:	4604      	mov	r4, r0
 800dece:	460d      	mov	r5, r1
 800ded0:	b976      	cbnz	r6, 800def0 <_Balloc+0x28>
 800ded2:	2010      	movs	r0, #16
 800ded4:	f7ff ff44 	bl	800dd60 <malloc>
 800ded8:	4602      	mov	r2, r0
 800deda:	61e0      	str	r0, [r4, #28]
 800dedc:	b920      	cbnz	r0, 800dee8 <_Balloc+0x20>
 800dede:	4b18      	ldr	r3, [pc, #96]	; (800df40 <_Balloc+0x78>)
 800dee0:	4818      	ldr	r0, [pc, #96]	; (800df44 <_Balloc+0x7c>)
 800dee2:	216b      	movs	r1, #107	; 0x6b
 800dee4:	f000 fdf2 	bl	800eacc <__assert_func>
 800dee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800deec:	6006      	str	r6, [r0, #0]
 800deee:	60c6      	str	r6, [r0, #12]
 800def0:	69e6      	ldr	r6, [r4, #28]
 800def2:	68f3      	ldr	r3, [r6, #12]
 800def4:	b183      	cbz	r3, 800df18 <_Balloc+0x50>
 800def6:	69e3      	ldr	r3, [r4, #28]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800defe:	b9b8      	cbnz	r0, 800df30 <_Balloc+0x68>
 800df00:	2101      	movs	r1, #1
 800df02:	fa01 f605 	lsl.w	r6, r1, r5
 800df06:	1d72      	adds	r2, r6, #5
 800df08:	0092      	lsls	r2, r2, #2
 800df0a:	4620      	mov	r0, r4
 800df0c:	f000 fdfc 	bl	800eb08 <_calloc_r>
 800df10:	b160      	cbz	r0, 800df2c <_Balloc+0x64>
 800df12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df16:	e00e      	b.n	800df36 <_Balloc+0x6e>
 800df18:	2221      	movs	r2, #33	; 0x21
 800df1a:	2104      	movs	r1, #4
 800df1c:	4620      	mov	r0, r4
 800df1e:	f000 fdf3 	bl	800eb08 <_calloc_r>
 800df22:	69e3      	ldr	r3, [r4, #28]
 800df24:	60f0      	str	r0, [r6, #12]
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d1e4      	bne.n	800def6 <_Balloc+0x2e>
 800df2c:	2000      	movs	r0, #0
 800df2e:	bd70      	pop	{r4, r5, r6, pc}
 800df30:	6802      	ldr	r2, [r0, #0]
 800df32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df36:	2300      	movs	r3, #0
 800df38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df3c:	e7f7      	b.n	800df2e <_Balloc+0x66>
 800df3e:	bf00      	nop
 800df40:	0800fee5 	.word	0x0800fee5
 800df44:	0800ff65 	.word	0x0800ff65

0800df48 <_Bfree>:
 800df48:	b570      	push	{r4, r5, r6, lr}
 800df4a:	69c6      	ldr	r6, [r0, #28]
 800df4c:	4605      	mov	r5, r0
 800df4e:	460c      	mov	r4, r1
 800df50:	b976      	cbnz	r6, 800df70 <_Bfree+0x28>
 800df52:	2010      	movs	r0, #16
 800df54:	f7ff ff04 	bl	800dd60 <malloc>
 800df58:	4602      	mov	r2, r0
 800df5a:	61e8      	str	r0, [r5, #28]
 800df5c:	b920      	cbnz	r0, 800df68 <_Bfree+0x20>
 800df5e:	4b09      	ldr	r3, [pc, #36]	; (800df84 <_Bfree+0x3c>)
 800df60:	4809      	ldr	r0, [pc, #36]	; (800df88 <_Bfree+0x40>)
 800df62:	218f      	movs	r1, #143	; 0x8f
 800df64:	f000 fdb2 	bl	800eacc <__assert_func>
 800df68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df6c:	6006      	str	r6, [r0, #0]
 800df6e:	60c6      	str	r6, [r0, #12]
 800df70:	b13c      	cbz	r4, 800df82 <_Bfree+0x3a>
 800df72:	69eb      	ldr	r3, [r5, #28]
 800df74:	6862      	ldr	r2, [r4, #4]
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df7c:	6021      	str	r1, [r4, #0]
 800df7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df82:	bd70      	pop	{r4, r5, r6, pc}
 800df84:	0800fee5 	.word	0x0800fee5
 800df88:	0800ff65 	.word	0x0800ff65

0800df8c <__multadd>:
 800df8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df90:	690d      	ldr	r5, [r1, #16]
 800df92:	4607      	mov	r7, r0
 800df94:	460c      	mov	r4, r1
 800df96:	461e      	mov	r6, r3
 800df98:	f101 0c14 	add.w	ip, r1, #20
 800df9c:	2000      	movs	r0, #0
 800df9e:	f8dc 3000 	ldr.w	r3, [ip]
 800dfa2:	b299      	uxth	r1, r3
 800dfa4:	fb02 6101 	mla	r1, r2, r1, r6
 800dfa8:	0c1e      	lsrs	r6, r3, #16
 800dfaa:	0c0b      	lsrs	r3, r1, #16
 800dfac:	fb02 3306 	mla	r3, r2, r6, r3
 800dfb0:	b289      	uxth	r1, r1
 800dfb2:	3001      	adds	r0, #1
 800dfb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dfb8:	4285      	cmp	r5, r0
 800dfba:	f84c 1b04 	str.w	r1, [ip], #4
 800dfbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dfc2:	dcec      	bgt.n	800df9e <__multadd+0x12>
 800dfc4:	b30e      	cbz	r6, 800e00a <__multadd+0x7e>
 800dfc6:	68a3      	ldr	r3, [r4, #8]
 800dfc8:	42ab      	cmp	r3, r5
 800dfca:	dc19      	bgt.n	800e000 <__multadd+0x74>
 800dfcc:	6861      	ldr	r1, [r4, #4]
 800dfce:	4638      	mov	r0, r7
 800dfd0:	3101      	adds	r1, #1
 800dfd2:	f7ff ff79 	bl	800dec8 <_Balloc>
 800dfd6:	4680      	mov	r8, r0
 800dfd8:	b928      	cbnz	r0, 800dfe6 <__multadd+0x5a>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	4b0c      	ldr	r3, [pc, #48]	; (800e010 <__multadd+0x84>)
 800dfde:	480d      	ldr	r0, [pc, #52]	; (800e014 <__multadd+0x88>)
 800dfe0:	21ba      	movs	r1, #186	; 0xba
 800dfe2:	f000 fd73 	bl	800eacc <__assert_func>
 800dfe6:	6922      	ldr	r2, [r4, #16]
 800dfe8:	3202      	adds	r2, #2
 800dfea:	f104 010c 	add.w	r1, r4, #12
 800dfee:	0092      	lsls	r2, r2, #2
 800dff0:	300c      	adds	r0, #12
 800dff2:	f7ff f864 	bl	800d0be <memcpy>
 800dff6:	4621      	mov	r1, r4
 800dff8:	4638      	mov	r0, r7
 800dffa:	f7ff ffa5 	bl	800df48 <_Bfree>
 800dffe:	4644      	mov	r4, r8
 800e000:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e004:	3501      	adds	r5, #1
 800e006:	615e      	str	r6, [r3, #20]
 800e008:	6125      	str	r5, [r4, #16]
 800e00a:	4620      	mov	r0, r4
 800e00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e010:	0800ff54 	.word	0x0800ff54
 800e014:	0800ff65 	.word	0x0800ff65

0800e018 <__hi0bits>:
 800e018:	0c03      	lsrs	r3, r0, #16
 800e01a:	041b      	lsls	r3, r3, #16
 800e01c:	b9d3      	cbnz	r3, 800e054 <__hi0bits+0x3c>
 800e01e:	0400      	lsls	r0, r0, #16
 800e020:	2310      	movs	r3, #16
 800e022:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e026:	bf04      	itt	eq
 800e028:	0200      	lsleq	r0, r0, #8
 800e02a:	3308      	addeq	r3, #8
 800e02c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e030:	bf04      	itt	eq
 800e032:	0100      	lsleq	r0, r0, #4
 800e034:	3304      	addeq	r3, #4
 800e036:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e03a:	bf04      	itt	eq
 800e03c:	0080      	lsleq	r0, r0, #2
 800e03e:	3302      	addeq	r3, #2
 800e040:	2800      	cmp	r0, #0
 800e042:	db05      	blt.n	800e050 <__hi0bits+0x38>
 800e044:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e048:	f103 0301 	add.w	r3, r3, #1
 800e04c:	bf08      	it	eq
 800e04e:	2320      	moveq	r3, #32
 800e050:	4618      	mov	r0, r3
 800e052:	4770      	bx	lr
 800e054:	2300      	movs	r3, #0
 800e056:	e7e4      	b.n	800e022 <__hi0bits+0xa>

0800e058 <__lo0bits>:
 800e058:	6803      	ldr	r3, [r0, #0]
 800e05a:	f013 0207 	ands.w	r2, r3, #7
 800e05e:	d00c      	beq.n	800e07a <__lo0bits+0x22>
 800e060:	07d9      	lsls	r1, r3, #31
 800e062:	d422      	bmi.n	800e0aa <__lo0bits+0x52>
 800e064:	079a      	lsls	r2, r3, #30
 800e066:	bf49      	itett	mi
 800e068:	085b      	lsrmi	r3, r3, #1
 800e06a:	089b      	lsrpl	r3, r3, #2
 800e06c:	6003      	strmi	r3, [r0, #0]
 800e06e:	2201      	movmi	r2, #1
 800e070:	bf5c      	itt	pl
 800e072:	6003      	strpl	r3, [r0, #0]
 800e074:	2202      	movpl	r2, #2
 800e076:	4610      	mov	r0, r2
 800e078:	4770      	bx	lr
 800e07a:	b299      	uxth	r1, r3
 800e07c:	b909      	cbnz	r1, 800e082 <__lo0bits+0x2a>
 800e07e:	0c1b      	lsrs	r3, r3, #16
 800e080:	2210      	movs	r2, #16
 800e082:	b2d9      	uxtb	r1, r3
 800e084:	b909      	cbnz	r1, 800e08a <__lo0bits+0x32>
 800e086:	3208      	adds	r2, #8
 800e088:	0a1b      	lsrs	r3, r3, #8
 800e08a:	0719      	lsls	r1, r3, #28
 800e08c:	bf04      	itt	eq
 800e08e:	091b      	lsreq	r3, r3, #4
 800e090:	3204      	addeq	r2, #4
 800e092:	0799      	lsls	r1, r3, #30
 800e094:	bf04      	itt	eq
 800e096:	089b      	lsreq	r3, r3, #2
 800e098:	3202      	addeq	r2, #2
 800e09a:	07d9      	lsls	r1, r3, #31
 800e09c:	d403      	bmi.n	800e0a6 <__lo0bits+0x4e>
 800e09e:	085b      	lsrs	r3, r3, #1
 800e0a0:	f102 0201 	add.w	r2, r2, #1
 800e0a4:	d003      	beq.n	800e0ae <__lo0bits+0x56>
 800e0a6:	6003      	str	r3, [r0, #0]
 800e0a8:	e7e5      	b.n	800e076 <__lo0bits+0x1e>
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	e7e3      	b.n	800e076 <__lo0bits+0x1e>
 800e0ae:	2220      	movs	r2, #32
 800e0b0:	e7e1      	b.n	800e076 <__lo0bits+0x1e>
	...

0800e0b4 <__i2b>:
 800e0b4:	b510      	push	{r4, lr}
 800e0b6:	460c      	mov	r4, r1
 800e0b8:	2101      	movs	r1, #1
 800e0ba:	f7ff ff05 	bl	800dec8 <_Balloc>
 800e0be:	4602      	mov	r2, r0
 800e0c0:	b928      	cbnz	r0, 800e0ce <__i2b+0x1a>
 800e0c2:	4b05      	ldr	r3, [pc, #20]	; (800e0d8 <__i2b+0x24>)
 800e0c4:	4805      	ldr	r0, [pc, #20]	; (800e0dc <__i2b+0x28>)
 800e0c6:	f240 1145 	movw	r1, #325	; 0x145
 800e0ca:	f000 fcff 	bl	800eacc <__assert_func>
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	6144      	str	r4, [r0, #20]
 800e0d2:	6103      	str	r3, [r0, #16]
 800e0d4:	bd10      	pop	{r4, pc}
 800e0d6:	bf00      	nop
 800e0d8:	0800ff54 	.word	0x0800ff54
 800e0dc:	0800ff65 	.word	0x0800ff65

0800e0e0 <__multiply>:
 800e0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e4:	4691      	mov	r9, r2
 800e0e6:	690a      	ldr	r2, [r1, #16]
 800e0e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	bfb8      	it	lt
 800e0f0:	460b      	movlt	r3, r1
 800e0f2:	460c      	mov	r4, r1
 800e0f4:	bfbc      	itt	lt
 800e0f6:	464c      	movlt	r4, r9
 800e0f8:	4699      	movlt	r9, r3
 800e0fa:	6927      	ldr	r7, [r4, #16]
 800e0fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e100:	68a3      	ldr	r3, [r4, #8]
 800e102:	6861      	ldr	r1, [r4, #4]
 800e104:	eb07 060a 	add.w	r6, r7, sl
 800e108:	42b3      	cmp	r3, r6
 800e10a:	b085      	sub	sp, #20
 800e10c:	bfb8      	it	lt
 800e10e:	3101      	addlt	r1, #1
 800e110:	f7ff feda 	bl	800dec8 <_Balloc>
 800e114:	b930      	cbnz	r0, 800e124 <__multiply+0x44>
 800e116:	4602      	mov	r2, r0
 800e118:	4b44      	ldr	r3, [pc, #272]	; (800e22c <__multiply+0x14c>)
 800e11a:	4845      	ldr	r0, [pc, #276]	; (800e230 <__multiply+0x150>)
 800e11c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e120:	f000 fcd4 	bl	800eacc <__assert_func>
 800e124:	f100 0514 	add.w	r5, r0, #20
 800e128:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e12c:	462b      	mov	r3, r5
 800e12e:	2200      	movs	r2, #0
 800e130:	4543      	cmp	r3, r8
 800e132:	d321      	bcc.n	800e178 <__multiply+0x98>
 800e134:	f104 0314 	add.w	r3, r4, #20
 800e138:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e13c:	f109 0314 	add.w	r3, r9, #20
 800e140:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e144:	9202      	str	r2, [sp, #8]
 800e146:	1b3a      	subs	r2, r7, r4
 800e148:	3a15      	subs	r2, #21
 800e14a:	f022 0203 	bic.w	r2, r2, #3
 800e14e:	3204      	adds	r2, #4
 800e150:	f104 0115 	add.w	r1, r4, #21
 800e154:	428f      	cmp	r7, r1
 800e156:	bf38      	it	cc
 800e158:	2204      	movcc	r2, #4
 800e15a:	9201      	str	r2, [sp, #4]
 800e15c:	9a02      	ldr	r2, [sp, #8]
 800e15e:	9303      	str	r3, [sp, #12]
 800e160:	429a      	cmp	r2, r3
 800e162:	d80c      	bhi.n	800e17e <__multiply+0x9e>
 800e164:	2e00      	cmp	r6, #0
 800e166:	dd03      	ble.n	800e170 <__multiply+0x90>
 800e168:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d05b      	beq.n	800e228 <__multiply+0x148>
 800e170:	6106      	str	r6, [r0, #16]
 800e172:	b005      	add	sp, #20
 800e174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e178:	f843 2b04 	str.w	r2, [r3], #4
 800e17c:	e7d8      	b.n	800e130 <__multiply+0x50>
 800e17e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e182:	f1ba 0f00 	cmp.w	sl, #0
 800e186:	d024      	beq.n	800e1d2 <__multiply+0xf2>
 800e188:	f104 0e14 	add.w	lr, r4, #20
 800e18c:	46a9      	mov	r9, r5
 800e18e:	f04f 0c00 	mov.w	ip, #0
 800e192:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e196:	f8d9 1000 	ldr.w	r1, [r9]
 800e19a:	fa1f fb82 	uxth.w	fp, r2
 800e19e:	b289      	uxth	r1, r1
 800e1a0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e1a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e1a8:	f8d9 2000 	ldr.w	r2, [r9]
 800e1ac:	4461      	add	r1, ip
 800e1ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e1b2:	fb0a c20b 	mla	r2, sl, fp, ip
 800e1b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e1ba:	b289      	uxth	r1, r1
 800e1bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e1c0:	4577      	cmp	r7, lr
 800e1c2:	f849 1b04 	str.w	r1, [r9], #4
 800e1c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e1ca:	d8e2      	bhi.n	800e192 <__multiply+0xb2>
 800e1cc:	9a01      	ldr	r2, [sp, #4]
 800e1ce:	f845 c002 	str.w	ip, [r5, r2]
 800e1d2:	9a03      	ldr	r2, [sp, #12]
 800e1d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e1d8:	3304      	adds	r3, #4
 800e1da:	f1b9 0f00 	cmp.w	r9, #0
 800e1de:	d021      	beq.n	800e224 <__multiply+0x144>
 800e1e0:	6829      	ldr	r1, [r5, #0]
 800e1e2:	f104 0c14 	add.w	ip, r4, #20
 800e1e6:	46ae      	mov	lr, r5
 800e1e8:	f04f 0a00 	mov.w	sl, #0
 800e1ec:	f8bc b000 	ldrh.w	fp, [ip]
 800e1f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e1f4:	fb09 220b 	mla	r2, r9, fp, r2
 800e1f8:	4452      	add	r2, sl
 800e1fa:	b289      	uxth	r1, r1
 800e1fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e200:	f84e 1b04 	str.w	r1, [lr], #4
 800e204:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e208:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e20c:	f8be 1000 	ldrh.w	r1, [lr]
 800e210:	fb09 110a 	mla	r1, r9, sl, r1
 800e214:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e218:	4567      	cmp	r7, ip
 800e21a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e21e:	d8e5      	bhi.n	800e1ec <__multiply+0x10c>
 800e220:	9a01      	ldr	r2, [sp, #4]
 800e222:	50a9      	str	r1, [r5, r2]
 800e224:	3504      	adds	r5, #4
 800e226:	e799      	b.n	800e15c <__multiply+0x7c>
 800e228:	3e01      	subs	r6, #1
 800e22a:	e79b      	b.n	800e164 <__multiply+0x84>
 800e22c:	0800ff54 	.word	0x0800ff54
 800e230:	0800ff65 	.word	0x0800ff65

0800e234 <__pow5mult>:
 800e234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e238:	4615      	mov	r5, r2
 800e23a:	f012 0203 	ands.w	r2, r2, #3
 800e23e:	4606      	mov	r6, r0
 800e240:	460f      	mov	r7, r1
 800e242:	d007      	beq.n	800e254 <__pow5mult+0x20>
 800e244:	4c25      	ldr	r4, [pc, #148]	; (800e2dc <__pow5mult+0xa8>)
 800e246:	3a01      	subs	r2, #1
 800e248:	2300      	movs	r3, #0
 800e24a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e24e:	f7ff fe9d 	bl	800df8c <__multadd>
 800e252:	4607      	mov	r7, r0
 800e254:	10ad      	asrs	r5, r5, #2
 800e256:	d03d      	beq.n	800e2d4 <__pow5mult+0xa0>
 800e258:	69f4      	ldr	r4, [r6, #28]
 800e25a:	b97c      	cbnz	r4, 800e27c <__pow5mult+0x48>
 800e25c:	2010      	movs	r0, #16
 800e25e:	f7ff fd7f 	bl	800dd60 <malloc>
 800e262:	4602      	mov	r2, r0
 800e264:	61f0      	str	r0, [r6, #28]
 800e266:	b928      	cbnz	r0, 800e274 <__pow5mult+0x40>
 800e268:	4b1d      	ldr	r3, [pc, #116]	; (800e2e0 <__pow5mult+0xac>)
 800e26a:	481e      	ldr	r0, [pc, #120]	; (800e2e4 <__pow5mult+0xb0>)
 800e26c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e270:	f000 fc2c 	bl	800eacc <__assert_func>
 800e274:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e278:	6004      	str	r4, [r0, #0]
 800e27a:	60c4      	str	r4, [r0, #12]
 800e27c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e280:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e284:	b94c      	cbnz	r4, 800e29a <__pow5mult+0x66>
 800e286:	f240 2171 	movw	r1, #625	; 0x271
 800e28a:	4630      	mov	r0, r6
 800e28c:	f7ff ff12 	bl	800e0b4 <__i2b>
 800e290:	2300      	movs	r3, #0
 800e292:	f8c8 0008 	str.w	r0, [r8, #8]
 800e296:	4604      	mov	r4, r0
 800e298:	6003      	str	r3, [r0, #0]
 800e29a:	f04f 0900 	mov.w	r9, #0
 800e29e:	07eb      	lsls	r3, r5, #31
 800e2a0:	d50a      	bpl.n	800e2b8 <__pow5mult+0x84>
 800e2a2:	4639      	mov	r1, r7
 800e2a4:	4622      	mov	r2, r4
 800e2a6:	4630      	mov	r0, r6
 800e2a8:	f7ff ff1a 	bl	800e0e0 <__multiply>
 800e2ac:	4639      	mov	r1, r7
 800e2ae:	4680      	mov	r8, r0
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	f7ff fe49 	bl	800df48 <_Bfree>
 800e2b6:	4647      	mov	r7, r8
 800e2b8:	106d      	asrs	r5, r5, #1
 800e2ba:	d00b      	beq.n	800e2d4 <__pow5mult+0xa0>
 800e2bc:	6820      	ldr	r0, [r4, #0]
 800e2be:	b938      	cbnz	r0, 800e2d0 <__pow5mult+0x9c>
 800e2c0:	4622      	mov	r2, r4
 800e2c2:	4621      	mov	r1, r4
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	f7ff ff0b 	bl	800e0e0 <__multiply>
 800e2ca:	6020      	str	r0, [r4, #0]
 800e2cc:	f8c0 9000 	str.w	r9, [r0]
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	e7e4      	b.n	800e29e <__pow5mult+0x6a>
 800e2d4:	4638      	mov	r0, r7
 800e2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2da:	bf00      	nop
 800e2dc:	080100b0 	.word	0x080100b0
 800e2e0:	0800fee5 	.word	0x0800fee5
 800e2e4:	0800ff65 	.word	0x0800ff65

0800e2e8 <__lshift>:
 800e2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ec:	460c      	mov	r4, r1
 800e2ee:	6849      	ldr	r1, [r1, #4]
 800e2f0:	6923      	ldr	r3, [r4, #16]
 800e2f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e2f6:	68a3      	ldr	r3, [r4, #8]
 800e2f8:	4607      	mov	r7, r0
 800e2fa:	4691      	mov	r9, r2
 800e2fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e300:	f108 0601 	add.w	r6, r8, #1
 800e304:	42b3      	cmp	r3, r6
 800e306:	db0b      	blt.n	800e320 <__lshift+0x38>
 800e308:	4638      	mov	r0, r7
 800e30a:	f7ff fddd 	bl	800dec8 <_Balloc>
 800e30e:	4605      	mov	r5, r0
 800e310:	b948      	cbnz	r0, 800e326 <__lshift+0x3e>
 800e312:	4602      	mov	r2, r0
 800e314:	4b28      	ldr	r3, [pc, #160]	; (800e3b8 <__lshift+0xd0>)
 800e316:	4829      	ldr	r0, [pc, #164]	; (800e3bc <__lshift+0xd4>)
 800e318:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e31c:	f000 fbd6 	bl	800eacc <__assert_func>
 800e320:	3101      	adds	r1, #1
 800e322:	005b      	lsls	r3, r3, #1
 800e324:	e7ee      	b.n	800e304 <__lshift+0x1c>
 800e326:	2300      	movs	r3, #0
 800e328:	f100 0114 	add.w	r1, r0, #20
 800e32c:	f100 0210 	add.w	r2, r0, #16
 800e330:	4618      	mov	r0, r3
 800e332:	4553      	cmp	r3, sl
 800e334:	db33      	blt.n	800e39e <__lshift+0xb6>
 800e336:	6920      	ldr	r0, [r4, #16]
 800e338:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e33c:	f104 0314 	add.w	r3, r4, #20
 800e340:	f019 091f 	ands.w	r9, r9, #31
 800e344:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e348:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e34c:	d02b      	beq.n	800e3a6 <__lshift+0xbe>
 800e34e:	f1c9 0e20 	rsb	lr, r9, #32
 800e352:	468a      	mov	sl, r1
 800e354:	2200      	movs	r2, #0
 800e356:	6818      	ldr	r0, [r3, #0]
 800e358:	fa00 f009 	lsl.w	r0, r0, r9
 800e35c:	4310      	orrs	r0, r2
 800e35e:	f84a 0b04 	str.w	r0, [sl], #4
 800e362:	f853 2b04 	ldr.w	r2, [r3], #4
 800e366:	459c      	cmp	ip, r3
 800e368:	fa22 f20e 	lsr.w	r2, r2, lr
 800e36c:	d8f3      	bhi.n	800e356 <__lshift+0x6e>
 800e36e:	ebac 0304 	sub.w	r3, ip, r4
 800e372:	3b15      	subs	r3, #21
 800e374:	f023 0303 	bic.w	r3, r3, #3
 800e378:	3304      	adds	r3, #4
 800e37a:	f104 0015 	add.w	r0, r4, #21
 800e37e:	4584      	cmp	ip, r0
 800e380:	bf38      	it	cc
 800e382:	2304      	movcc	r3, #4
 800e384:	50ca      	str	r2, [r1, r3]
 800e386:	b10a      	cbz	r2, 800e38c <__lshift+0xa4>
 800e388:	f108 0602 	add.w	r6, r8, #2
 800e38c:	3e01      	subs	r6, #1
 800e38e:	4638      	mov	r0, r7
 800e390:	612e      	str	r6, [r5, #16]
 800e392:	4621      	mov	r1, r4
 800e394:	f7ff fdd8 	bl	800df48 <_Bfree>
 800e398:	4628      	mov	r0, r5
 800e39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e39e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	e7c5      	b.n	800e332 <__lshift+0x4a>
 800e3a6:	3904      	subs	r1, #4
 800e3a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800e3b0:	459c      	cmp	ip, r3
 800e3b2:	d8f9      	bhi.n	800e3a8 <__lshift+0xc0>
 800e3b4:	e7ea      	b.n	800e38c <__lshift+0xa4>
 800e3b6:	bf00      	nop
 800e3b8:	0800ff54 	.word	0x0800ff54
 800e3bc:	0800ff65 	.word	0x0800ff65

0800e3c0 <__mcmp>:
 800e3c0:	b530      	push	{r4, r5, lr}
 800e3c2:	6902      	ldr	r2, [r0, #16]
 800e3c4:	690c      	ldr	r4, [r1, #16]
 800e3c6:	1b12      	subs	r2, r2, r4
 800e3c8:	d10e      	bne.n	800e3e8 <__mcmp+0x28>
 800e3ca:	f100 0314 	add.w	r3, r0, #20
 800e3ce:	3114      	adds	r1, #20
 800e3d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e3d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e3d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e3dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e3e0:	42a5      	cmp	r5, r4
 800e3e2:	d003      	beq.n	800e3ec <__mcmp+0x2c>
 800e3e4:	d305      	bcc.n	800e3f2 <__mcmp+0x32>
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	4610      	mov	r0, r2
 800e3ea:	bd30      	pop	{r4, r5, pc}
 800e3ec:	4283      	cmp	r3, r0
 800e3ee:	d3f3      	bcc.n	800e3d8 <__mcmp+0x18>
 800e3f0:	e7fa      	b.n	800e3e8 <__mcmp+0x28>
 800e3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3f6:	e7f7      	b.n	800e3e8 <__mcmp+0x28>

0800e3f8 <__mdiff>:
 800e3f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3fc:	460c      	mov	r4, r1
 800e3fe:	4606      	mov	r6, r0
 800e400:	4611      	mov	r1, r2
 800e402:	4620      	mov	r0, r4
 800e404:	4690      	mov	r8, r2
 800e406:	f7ff ffdb 	bl	800e3c0 <__mcmp>
 800e40a:	1e05      	subs	r5, r0, #0
 800e40c:	d110      	bne.n	800e430 <__mdiff+0x38>
 800e40e:	4629      	mov	r1, r5
 800e410:	4630      	mov	r0, r6
 800e412:	f7ff fd59 	bl	800dec8 <_Balloc>
 800e416:	b930      	cbnz	r0, 800e426 <__mdiff+0x2e>
 800e418:	4b3a      	ldr	r3, [pc, #232]	; (800e504 <__mdiff+0x10c>)
 800e41a:	4602      	mov	r2, r0
 800e41c:	f240 2137 	movw	r1, #567	; 0x237
 800e420:	4839      	ldr	r0, [pc, #228]	; (800e508 <__mdiff+0x110>)
 800e422:	f000 fb53 	bl	800eacc <__assert_func>
 800e426:	2301      	movs	r3, #1
 800e428:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e42c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e430:	bfa4      	itt	ge
 800e432:	4643      	movge	r3, r8
 800e434:	46a0      	movge	r8, r4
 800e436:	4630      	mov	r0, r6
 800e438:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e43c:	bfa6      	itte	ge
 800e43e:	461c      	movge	r4, r3
 800e440:	2500      	movge	r5, #0
 800e442:	2501      	movlt	r5, #1
 800e444:	f7ff fd40 	bl	800dec8 <_Balloc>
 800e448:	b920      	cbnz	r0, 800e454 <__mdiff+0x5c>
 800e44a:	4b2e      	ldr	r3, [pc, #184]	; (800e504 <__mdiff+0x10c>)
 800e44c:	4602      	mov	r2, r0
 800e44e:	f240 2145 	movw	r1, #581	; 0x245
 800e452:	e7e5      	b.n	800e420 <__mdiff+0x28>
 800e454:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e458:	6926      	ldr	r6, [r4, #16]
 800e45a:	60c5      	str	r5, [r0, #12]
 800e45c:	f104 0914 	add.w	r9, r4, #20
 800e460:	f108 0514 	add.w	r5, r8, #20
 800e464:	f100 0e14 	add.w	lr, r0, #20
 800e468:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e46c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e470:	f108 0210 	add.w	r2, r8, #16
 800e474:	46f2      	mov	sl, lr
 800e476:	2100      	movs	r1, #0
 800e478:	f859 3b04 	ldr.w	r3, [r9], #4
 800e47c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e480:	fa11 f88b 	uxtah	r8, r1, fp
 800e484:	b299      	uxth	r1, r3
 800e486:	0c1b      	lsrs	r3, r3, #16
 800e488:	eba8 0801 	sub.w	r8, r8, r1
 800e48c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e490:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e494:	fa1f f888 	uxth.w	r8, r8
 800e498:	1419      	asrs	r1, r3, #16
 800e49a:	454e      	cmp	r6, r9
 800e49c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e4a0:	f84a 3b04 	str.w	r3, [sl], #4
 800e4a4:	d8e8      	bhi.n	800e478 <__mdiff+0x80>
 800e4a6:	1b33      	subs	r3, r6, r4
 800e4a8:	3b15      	subs	r3, #21
 800e4aa:	f023 0303 	bic.w	r3, r3, #3
 800e4ae:	3304      	adds	r3, #4
 800e4b0:	3415      	adds	r4, #21
 800e4b2:	42a6      	cmp	r6, r4
 800e4b4:	bf38      	it	cc
 800e4b6:	2304      	movcc	r3, #4
 800e4b8:	441d      	add	r5, r3
 800e4ba:	4473      	add	r3, lr
 800e4bc:	469e      	mov	lr, r3
 800e4be:	462e      	mov	r6, r5
 800e4c0:	4566      	cmp	r6, ip
 800e4c2:	d30e      	bcc.n	800e4e2 <__mdiff+0xea>
 800e4c4:	f10c 0203 	add.w	r2, ip, #3
 800e4c8:	1b52      	subs	r2, r2, r5
 800e4ca:	f022 0203 	bic.w	r2, r2, #3
 800e4ce:	3d03      	subs	r5, #3
 800e4d0:	45ac      	cmp	ip, r5
 800e4d2:	bf38      	it	cc
 800e4d4:	2200      	movcc	r2, #0
 800e4d6:	4413      	add	r3, r2
 800e4d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e4dc:	b17a      	cbz	r2, 800e4fe <__mdiff+0x106>
 800e4de:	6107      	str	r7, [r0, #16]
 800e4e0:	e7a4      	b.n	800e42c <__mdiff+0x34>
 800e4e2:	f856 8b04 	ldr.w	r8, [r6], #4
 800e4e6:	fa11 f288 	uxtah	r2, r1, r8
 800e4ea:	1414      	asrs	r4, r2, #16
 800e4ec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e4f0:	b292      	uxth	r2, r2
 800e4f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e4f6:	f84e 2b04 	str.w	r2, [lr], #4
 800e4fa:	1421      	asrs	r1, r4, #16
 800e4fc:	e7e0      	b.n	800e4c0 <__mdiff+0xc8>
 800e4fe:	3f01      	subs	r7, #1
 800e500:	e7ea      	b.n	800e4d8 <__mdiff+0xe0>
 800e502:	bf00      	nop
 800e504:	0800ff54 	.word	0x0800ff54
 800e508:	0800ff65 	.word	0x0800ff65

0800e50c <__d2b>:
 800e50c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e510:	460f      	mov	r7, r1
 800e512:	2101      	movs	r1, #1
 800e514:	ec59 8b10 	vmov	r8, r9, d0
 800e518:	4616      	mov	r6, r2
 800e51a:	f7ff fcd5 	bl	800dec8 <_Balloc>
 800e51e:	4604      	mov	r4, r0
 800e520:	b930      	cbnz	r0, 800e530 <__d2b+0x24>
 800e522:	4602      	mov	r2, r0
 800e524:	4b24      	ldr	r3, [pc, #144]	; (800e5b8 <__d2b+0xac>)
 800e526:	4825      	ldr	r0, [pc, #148]	; (800e5bc <__d2b+0xb0>)
 800e528:	f240 310f 	movw	r1, #783	; 0x30f
 800e52c:	f000 face 	bl	800eacc <__assert_func>
 800e530:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e534:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e538:	bb2d      	cbnz	r5, 800e586 <__d2b+0x7a>
 800e53a:	9301      	str	r3, [sp, #4]
 800e53c:	f1b8 0300 	subs.w	r3, r8, #0
 800e540:	d026      	beq.n	800e590 <__d2b+0x84>
 800e542:	4668      	mov	r0, sp
 800e544:	9300      	str	r3, [sp, #0]
 800e546:	f7ff fd87 	bl	800e058 <__lo0bits>
 800e54a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e54e:	b1e8      	cbz	r0, 800e58c <__d2b+0x80>
 800e550:	f1c0 0320 	rsb	r3, r0, #32
 800e554:	fa02 f303 	lsl.w	r3, r2, r3
 800e558:	430b      	orrs	r3, r1
 800e55a:	40c2      	lsrs	r2, r0
 800e55c:	6163      	str	r3, [r4, #20]
 800e55e:	9201      	str	r2, [sp, #4]
 800e560:	9b01      	ldr	r3, [sp, #4]
 800e562:	61a3      	str	r3, [r4, #24]
 800e564:	2b00      	cmp	r3, #0
 800e566:	bf14      	ite	ne
 800e568:	2202      	movne	r2, #2
 800e56a:	2201      	moveq	r2, #1
 800e56c:	6122      	str	r2, [r4, #16]
 800e56e:	b1bd      	cbz	r5, 800e5a0 <__d2b+0x94>
 800e570:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e574:	4405      	add	r5, r0
 800e576:	603d      	str	r5, [r7, #0]
 800e578:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e57c:	6030      	str	r0, [r6, #0]
 800e57e:	4620      	mov	r0, r4
 800e580:	b003      	add	sp, #12
 800e582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e58a:	e7d6      	b.n	800e53a <__d2b+0x2e>
 800e58c:	6161      	str	r1, [r4, #20]
 800e58e:	e7e7      	b.n	800e560 <__d2b+0x54>
 800e590:	a801      	add	r0, sp, #4
 800e592:	f7ff fd61 	bl	800e058 <__lo0bits>
 800e596:	9b01      	ldr	r3, [sp, #4]
 800e598:	6163      	str	r3, [r4, #20]
 800e59a:	3020      	adds	r0, #32
 800e59c:	2201      	movs	r2, #1
 800e59e:	e7e5      	b.n	800e56c <__d2b+0x60>
 800e5a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e5a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e5a8:	6038      	str	r0, [r7, #0]
 800e5aa:	6918      	ldr	r0, [r3, #16]
 800e5ac:	f7ff fd34 	bl	800e018 <__hi0bits>
 800e5b0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e5b4:	e7e2      	b.n	800e57c <__d2b+0x70>
 800e5b6:	bf00      	nop
 800e5b8:	0800ff54 	.word	0x0800ff54
 800e5bc:	0800ff65 	.word	0x0800ff65

0800e5c0 <__sfputc_r>:
 800e5c0:	6893      	ldr	r3, [r2, #8]
 800e5c2:	3b01      	subs	r3, #1
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	b410      	push	{r4}
 800e5c8:	6093      	str	r3, [r2, #8]
 800e5ca:	da08      	bge.n	800e5de <__sfputc_r+0x1e>
 800e5cc:	6994      	ldr	r4, [r2, #24]
 800e5ce:	42a3      	cmp	r3, r4
 800e5d0:	db01      	blt.n	800e5d6 <__sfputc_r+0x16>
 800e5d2:	290a      	cmp	r1, #10
 800e5d4:	d103      	bne.n	800e5de <__sfputc_r+0x1e>
 800e5d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5da:	f7fe bc06 	b.w	800cdea <__swbuf_r>
 800e5de:	6813      	ldr	r3, [r2, #0]
 800e5e0:	1c58      	adds	r0, r3, #1
 800e5e2:	6010      	str	r0, [r2, #0]
 800e5e4:	7019      	strb	r1, [r3, #0]
 800e5e6:	4608      	mov	r0, r1
 800e5e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5ec:	4770      	bx	lr

0800e5ee <__sfputs_r>:
 800e5ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5f0:	4606      	mov	r6, r0
 800e5f2:	460f      	mov	r7, r1
 800e5f4:	4614      	mov	r4, r2
 800e5f6:	18d5      	adds	r5, r2, r3
 800e5f8:	42ac      	cmp	r4, r5
 800e5fa:	d101      	bne.n	800e600 <__sfputs_r+0x12>
 800e5fc:	2000      	movs	r0, #0
 800e5fe:	e007      	b.n	800e610 <__sfputs_r+0x22>
 800e600:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e604:	463a      	mov	r2, r7
 800e606:	4630      	mov	r0, r6
 800e608:	f7ff ffda 	bl	800e5c0 <__sfputc_r>
 800e60c:	1c43      	adds	r3, r0, #1
 800e60e:	d1f3      	bne.n	800e5f8 <__sfputs_r+0xa>
 800e610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e614 <_vfiprintf_r>:
 800e614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e618:	460d      	mov	r5, r1
 800e61a:	b09d      	sub	sp, #116	; 0x74
 800e61c:	4614      	mov	r4, r2
 800e61e:	4698      	mov	r8, r3
 800e620:	4606      	mov	r6, r0
 800e622:	b118      	cbz	r0, 800e62c <_vfiprintf_r+0x18>
 800e624:	6a03      	ldr	r3, [r0, #32]
 800e626:	b90b      	cbnz	r3, 800e62c <_vfiprintf_r+0x18>
 800e628:	f7fe faf8 	bl	800cc1c <__sinit>
 800e62c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e62e:	07d9      	lsls	r1, r3, #31
 800e630:	d405      	bmi.n	800e63e <_vfiprintf_r+0x2a>
 800e632:	89ab      	ldrh	r3, [r5, #12]
 800e634:	059a      	lsls	r2, r3, #22
 800e636:	d402      	bmi.n	800e63e <_vfiprintf_r+0x2a>
 800e638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e63a:	f7fe fd3e 	bl	800d0ba <__retarget_lock_acquire_recursive>
 800e63e:	89ab      	ldrh	r3, [r5, #12]
 800e640:	071b      	lsls	r3, r3, #28
 800e642:	d501      	bpl.n	800e648 <_vfiprintf_r+0x34>
 800e644:	692b      	ldr	r3, [r5, #16]
 800e646:	b99b      	cbnz	r3, 800e670 <_vfiprintf_r+0x5c>
 800e648:	4629      	mov	r1, r5
 800e64a:	4630      	mov	r0, r6
 800e64c:	f7fe fc0a 	bl	800ce64 <__swsetup_r>
 800e650:	b170      	cbz	r0, 800e670 <_vfiprintf_r+0x5c>
 800e652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e654:	07dc      	lsls	r4, r3, #31
 800e656:	d504      	bpl.n	800e662 <_vfiprintf_r+0x4e>
 800e658:	f04f 30ff 	mov.w	r0, #4294967295
 800e65c:	b01d      	add	sp, #116	; 0x74
 800e65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e662:	89ab      	ldrh	r3, [r5, #12]
 800e664:	0598      	lsls	r0, r3, #22
 800e666:	d4f7      	bmi.n	800e658 <_vfiprintf_r+0x44>
 800e668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e66a:	f7fe fd27 	bl	800d0bc <__retarget_lock_release_recursive>
 800e66e:	e7f3      	b.n	800e658 <_vfiprintf_r+0x44>
 800e670:	2300      	movs	r3, #0
 800e672:	9309      	str	r3, [sp, #36]	; 0x24
 800e674:	2320      	movs	r3, #32
 800e676:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e67a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e67e:	2330      	movs	r3, #48	; 0x30
 800e680:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e834 <_vfiprintf_r+0x220>
 800e684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e688:	f04f 0901 	mov.w	r9, #1
 800e68c:	4623      	mov	r3, r4
 800e68e:	469a      	mov	sl, r3
 800e690:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e694:	b10a      	cbz	r2, 800e69a <_vfiprintf_r+0x86>
 800e696:	2a25      	cmp	r2, #37	; 0x25
 800e698:	d1f9      	bne.n	800e68e <_vfiprintf_r+0x7a>
 800e69a:	ebba 0b04 	subs.w	fp, sl, r4
 800e69e:	d00b      	beq.n	800e6b8 <_vfiprintf_r+0xa4>
 800e6a0:	465b      	mov	r3, fp
 800e6a2:	4622      	mov	r2, r4
 800e6a4:	4629      	mov	r1, r5
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	f7ff ffa1 	bl	800e5ee <__sfputs_r>
 800e6ac:	3001      	adds	r0, #1
 800e6ae:	f000 80a9 	beq.w	800e804 <_vfiprintf_r+0x1f0>
 800e6b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6b4:	445a      	add	r2, fp
 800e6b6:	9209      	str	r2, [sp, #36]	; 0x24
 800e6b8:	f89a 3000 	ldrb.w	r3, [sl]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f000 80a1 	beq.w	800e804 <_vfiprintf_r+0x1f0>
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6cc:	f10a 0a01 	add.w	sl, sl, #1
 800e6d0:	9304      	str	r3, [sp, #16]
 800e6d2:	9307      	str	r3, [sp, #28]
 800e6d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e6d8:	931a      	str	r3, [sp, #104]	; 0x68
 800e6da:	4654      	mov	r4, sl
 800e6dc:	2205      	movs	r2, #5
 800e6de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6e2:	4854      	ldr	r0, [pc, #336]	; (800e834 <_vfiprintf_r+0x220>)
 800e6e4:	f7f1 fdfc 	bl	80002e0 <memchr>
 800e6e8:	9a04      	ldr	r2, [sp, #16]
 800e6ea:	b9d8      	cbnz	r0, 800e724 <_vfiprintf_r+0x110>
 800e6ec:	06d1      	lsls	r1, r2, #27
 800e6ee:	bf44      	itt	mi
 800e6f0:	2320      	movmi	r3, #32
 800e6f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6f6:	0713      	lsls	r3, r2, #28
 800e6f8:	bf44      	itt	mi
 800e6fa:	232b      	movmi	r3, #43	; 0x2b
 800e6fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e700:	f89a 3000 	ldrb.w	r3, [sl]
 800e704:	2b2a      	cmp	r3, #42	; 0x2a
 800e706:	d015      	beq.n	800e734 <_vfiprintf_r+0x120>
 800e708:	9a07      	ldr	r2, [sp, #28]
 800e70a:	4654      	mov	r4, sl
 800e70c:	2000      	movs	r0, #0
 800e70e:	f04f 0c0a 	mov.w	ip, #10
 800e712:	4621      	mov	r1, r4
 800e714:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e718:	3b30      	subs	r3, #48	; 0x30
 800e71a:	2b09      	cmp	r3, #9
 800e71c:	d94d      	bls.n	800e7ba <_vfiprintf_r+0x1a6>
 800e71e:	b1b0      	cbz	r0, 800e74e <_vfiprintf_r+0x13a>
 800e720:	9207      	str	r2, [sp, #28]
 800e722:	e014      	b.n	800e74e <_vfiprintf_r+0x13a>
 800e724:	eba0 0308 	sub.w	r3, r0, r8
 800e728:	fa09 f303 	lsl.w	r3, r9, r3
 800e72c:	4313      	orrs	r3, r2
 800e72e:	9304      	str	r3, [sp, #16]
 800e730:	46a2      	mov	sl, r4
 800e732:	e7d2      	b.n	800e6da <_vfiprintf_r+0xc6>
 800e734:	9b03      	ldr	r3, [sp, #12]
 800e736:	1d19      	adds	r1, r3, #4
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	9103      	str	r1, [sp, #12]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	bfbb      	ittet	lt
 800e740:	425b      	neglt	r3, r3
 800e742:	f042 0202 	orrlt.w	r2, r2, #2
 800e746:	9307      	strge	r3, [sp, #28]
 800e748:	9307      	strlt	r3, [sp, #28]
 800e74a:	bfb8      	it	lt
 800e74c:	9204      	strlt	r2, [sp, #16]
 800e74e:	7823      	ldrb	r3, [r4, #0]
 800e750:	2b2e      	cmp	r3, #46	; 0x2e
 800e752:	d10c      	bne.n	800e76e <_vfiprintf_r+0x15a>
 800e754:	7863      	ldrb	r3, [r4, #1]
 800e756:	2b2a      	cmp	r3, #42	; 0x2a
 800e758:	d134      	bne.n	800e7c4 <_vfiprintf_r+0x1b0>
 800e75a:	9b03      	ldr	r3, [sp, #12]
 800e75c:	1d1a      	adds	r2, r3, #4
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	9203      	str	r2, [sp, #12]
 800e762:	2b00      	cmp	r3, #0
 800e764:	bfb8      	it	lt
 800e766:	f04f 33ff 	movlt.w	r3, #4294967295
 800e76a:	3402      	adds	r4, #2
 800e76c:	9305      	str	r3, [sp, #20]
 800e76e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e844 <_vfiprintf_r+0x230>
 800e772:	7821      	ldrb	r1, [r4, #0]
 800e774:	2203      	movs	r2, #3
 800e776:	4650      	mov	r0, sl
 800e778:	f7f1 fdb2 	bl	80002e0 <memchr>
 800e77c:	b138      	cbz	r0, 800e78e <_vfiprintf_r+0x17a>
 800e77e:	9b04      	ldr	r3, [sp, #16]
 800e780:	eba0 000a 	sub.w	r0, r0, sl
 800e784:	2240      	movs	r2, #64	; 0x40
 800e786:	4082      	lsls	r2, r0
 800e788:	4313      	orrs	r3, r2
 800e78a:	3401      	adds	r4, #1
 800e78c:	9304      	str	r3, [sp, #16]
 800e78e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e792:	4829      	ldr	r0, [pc, #164]	; (800e838 <_vfiprintf_r+0x224>)
 800e794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e798:	2206      	movs	r2, #6
 800e79a:	f7f1 fda1 	bl	80002e0 <memchr>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	d03f      	beq.n	800e822 <_vfiprintf_r+0x20e>
 800e7a2:	4b26      	ldr	r3, [pc, #152]	; (800e83c <_vfiprintf_r+0x228>)
 800e7a4:	bb1b      	cbnz	r3, 800e7ee <_vfiprintf_r+0x1da>
 800e7a6:	9b03      	ldr	r3, [sp, #12]
 800e7a8:	3307      	adds	r3, #7
 800e7aa:	f023 0307 	bic.w	r3, r3, #7
 800e7ae:	3308      	adds	r3, #8
 800e7b0:	9303      	str	r3, [sp, #12]
 800e7b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7b4:	443b      	add	r3, r7
 800e7b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e7b8:	e768      	b.n	800e68c <_vfiprintf_r+0x78>
 800e7ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7be:	460c      	mov	r4, r1
 800e7c0:	2001      	movs	r0, #1
 800e7c2:	e7a6      	b.n	800e712 <_vfiprintf_r+0xfe>
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	3401      	adds	r4, #1
 800e7c8:	9305      	str	r3, [sp, #20]
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	f04f 0c0a 	mov.w	ip, #10
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7d6:	3a30      	subs	r2, #48	; 0x30
 800e7d8:	2a09      	cmp	r2, #9
 800e7da:	d903      	bls.n	800e7e4 <_vfiprintf_r+0x1d0>
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d0c6      	beq.n	800e76e <_vfiprintf_r+0x15a>
 800e7e0:	9105      	str	r1, [sp, #20]
 800e7e2:	e7c4      	b.n	800e76e <_vfiprintf_r+0x15a>
 800e7e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7e8:	4604      	mov	r4, r0
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e7f0      	b.n	800e7d0 <_vfiprintf_r+0x1bc>
 800e7ee:	ab03      	add	r3, sp, #12
 800e7f0:	9300      	str	r3, [sp, #0]
 800e7f2:	462a      	mov	r2, r5
 800e7f4:	4b12      	ldr	r3, [pc, #72]	; (800e840 <_vfiprintf_r+0x22c>)
 800e7f6:	a904      	add	r1, sp, #16
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	f7fd fdd9 	bl	800c3b0 <_printf_float>
 800e7fe:	4607      	mov	r7, r0
 800e800:	1c78      	adds	r0, r7, #1
 800e802:	d1d6      	bne.n	800e7b2 <_vfiprintf_r+0x19e>
 800e804:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e806:	07d9      	lsls	r1, r3, #31
 800e808:	d405      	bmi.n	800e816 <_vfiprintf_r+0x202>
 800e80a:	89ab      	ldrh	r3, [r5, #12]
 800e80c:	059a      	lsls	r2, r3, #22
 800e80e:	d402      	bmi.n	800e816 <_vfiprintf_r+0x202>
 800e810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e812:	f7fe fc53 	bl	800d0bc <__retarget_lock_release_recursive>
 800e816:	89ab      	ldrh	r3, [r5, #12]
 800e818:	065b      	lsls	r3, r3, #25
 800e81a:	f53f af1d 	bmi.w	800e658 <_vfiprintf_r+0x44>
 800e81e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e820:	e71c      	b.n	800e65c <_vfiprintf_r+0x48>
 800e822:	ab03      	add	r3, sp, #12
 800e824:	9300      	str	r3, [sp, #0]
 800e826:	462a      	mov	r2, r5
 800e828:	4b05      	ldr	r3, [pc, #20]	; (800e840 <_vfiprintf_r+0x22c>)
 800e82a:	a904      	add	r1, sp, #16
 800e82c:	4630      	mov	r0, r6
 800e82e:	f7fe f847 	bl	800c8c0 <_printf_i>
 800e832:	e7e4      	b.n	800e7fe <_vfiprintf_r+0x1ea>
 800e834:	080100bc 	.word	0x080100bc
 800e838:	080100c6 	.word	0x080100c6
 800e83c:	0800c3b1 	.word	0x0800c3b1
 800e840:	0800e5ef 	.word	0x0800e5ef
 800e844:	080100c2 	.word	0x080100c2

0800e848 <__sflush_r>:
 800e848:	898a      	ldrh	r2, [r1, #12]
 800e84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e84e:	4605      	mov	r5, r0
 800e850:	0710      	lsls	r0, r2, #28
 800e852:	460c      	mov	r4, r1
 800e854:	d458      	bmi.n	800e908 <__sflush_r+0xc0>
 800e856:	684b      	ldr	r3, [r1, #4]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	dc05      	bgt.n	800e868 <__sflush_r+0x20>
 800e85c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e85e:	2b00      	cmp	r3, #0
 800e860:	dc02      	bgt.n	800e868 <__sflush_r+0x20>
 800e862:	2000      	movs	r0, #0
 800e864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e86a:	2e00      	cmp	r6, #0
 800e86c:	d0f9      	beq.n	800e862 <__sflush_r+0x1a>
 800e86e:	2300      	movs	r3, #0
 800e870:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e874:	682f      	ldr	r7, [r5, #0]
 800e876:	6a21      	ldr	r1, [r4, #32]
 800e878:	602b      	str	r3, [r5, #0]
 800e87a:	d032      	beq.n	800e8e2 <__sflush_r+0x9a>
 800e87c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e87e:	89a3      	ldrh	r3, [r4, #12]
 800e880:	075a      	lsls	r2, r3, #29
 800e882:	d505      	bpl.n	800e890 <__sflush_r+0x48>
 800e884:	6863      	ldr	r3, [r4, #4]
 800e886:	1ac0      	subs	r0, r0, r3
 800e888:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e88a:	b10b      	cbz	r3, 800e890 <__sflush_r+0x48>
 800e88c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e88e:	1ac0      	subs	r0, r0, r3
 800e890:	2300      	movs	r3, #0
 800e892:	4602      	mov	r2, r0
 800e894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e896:	6a21      	ldr	r1, [r4, #32]
 800e898:	4628      	mov	r0, r5
 800e89a:	47b0      	blx	r6
 800e89c:	1c43      	adds	r3, r0, #1
 800e89e:	89a3      	ldrh	r3, [r4, #12]
 800e8a0:	d106      	bne.n	800e8b0 <__sflush_r+0x68>
 800e8a2:	6829      	ldr	r1, [r5, #0]
 800e8a4:	291d      	cmp	r1, #29
 800e8a6:	d82b      	bhi.n	800e900 <__sflush_r+0xb8>
 800e8a8:	4a29      	ldr	r2, [pc, #164]	; (800e950 <__sflush_r+0x108>)
 800e8aa:	410a      	asrs	r2, r1
 800e8ac:	07d6      	lsls	r6, r2, #31
 800e8ae:	d427      	bmi.n	800e900 <__sflush_r+0xb8>
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	6062      	str	r2, [r4, #4]
 800e8b4:	04d9      	lsls	r1, r3, #19
 800e8b6:	6922      	ldr	r2, [r4, #16]
 800e8b8:	6022      	str	r2, [r4, #0]
 800e8ba:	d504      	bpl.n	800e8c6 <__sflush_r+0x7e>
 800e8bc:	1c42      	adds	r2, r0, #1
 800e8be:	d101      	bne.n	800e8c4 <__sflush_r+0x7c>
 800e8c0:	682b      	ldr	r3, [r5, #0]
 800e8c2:	b903      	cbnz	r3, 800e8c6 <__sflush_r+0x7e>
 800e8c4:	6560      	str	r0, [r4, #84]	; 0x54
 800e8c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8c8:	602f      	str	r7, [r5, #0]
 800e8ca:	2900      	cmp	r1, #0
 800e8cc:	d0c9      	beq.n	800e862 <__sflush_r+0x1a>
 800e8ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8d2:	4299      	cmp	r1, r3
 800e8d4:	d002      	beq.n	800e8dc <__sflush_r+0x94>
 800e8d6:	4628      	mov	r0, r5
 800e8d8:	f7ff f9f6 	bl	800dcc8 <_free_r>
 800e8dc:	2000      	movs	r0, #0
 800e8de:	6360      	str	r0, [r4, #52]	; 0x34
 800e8e0:	e7c0      	b.n	800e864 <__sflush_r+0x1c>
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	4628      	mov	r0, r5
 800e8e6:	47b0      	blx	r6
 800e8e8:	1c41      	adds	r1, r0, #1
 800e8ea:	d1c8      	bne.n	800e87e <__sflush_r+0x36>
 800e8ec:	682b      	ldr	r3, [r5, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d0c5      	beq.n	800e87e <__sflush_r+0x36>
 800e8f2:	2b1d      	cmp	r3, #29
 800e8f4:	d001      	beq.n	800e8fa <__sflush_r+0xb2>
 800e8f6:	2b16      	cmp	r3, #22
 800e8f8:	d101      	bne.n	800e8fe <__sflush_r+0xb6>
 800e8fa:	602f      	str	r7, [r5, #0]
 800e8fc:	e7b1      	b.n	800e862 <__sflush_r+0x1a>
 800e8fe:	89a3      	ldrh	r3, [r4, #12]
 800e900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e904:	81a3      	strh	r3, [r4, #12]
 800e906:	e7ad      	b.n	800e864 <__sflush_r+0x1c>
 800e908:	690f      	ldr	r7, [r1, #16]
 800e90a:	2f00      	cmp	r7, #0
 800e90c:	d0a9      	beq.n	800e862 <__sflush_r+0x1a>
 800e90e:	0793      	lsls	r3, r2, #30
 800e910:	680e      	ldr	r6, [r1, #0]
 800e912:	bf08      	it	eq
 800e914:	694b      	ldreq	r3, [r1, #20]
 800e916:	600f      	str	r7, [r1, #0]
 800e918:	bf18      	it	ne
 800e91a:	2300      	movne	r3, #0
 800e91c:	eba6 0807 	sub.w	r8, r6, r7
 800e920:	608b      	str	r3, [r1, #8]
 800e922:	f1b8 0f00 	cmp.w	r8, #0
 800e926:	dd9c      	ble.n	800e862 <__sflush_r+0x1a>
 800e928:	6a21      	ldr	r1, [r4, #32]
 800e92a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e92c:	4643      	mov	r3, r8
 800e92e:	463a      	mov	r2, r7
 800e930:	4628      	mov	r0, r5
 800e932:	47b0      	blx	r6
 800e934:	2800      	cmp	r0, #0
 800e936:	dc06      	bgt.n	800e946 <__sflush_r+0xfe>
 800e938:	89a3      	ldrh	r3, [r4, #12]
 800e93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e93e:	81a3      	strh	r3, [r4, #12]
 800e940:	f04f 30ff 	mov.w	r0, #4294967295
 800e944:	e78e      	b.n	800e864 <__sflush_r+0x1c>
 800e946:	4407      	add	r7, r0
 800e948:	eba8 0800 	sub.w	r8, r8, r0
 800e94c:	e7e9      	b.n	800e922 <__sflush_r+0xda>
 800e94e:	bf00      	nop
 800e950:	dfbffffe 	.word	0xdfbffffe

0800e954 <_fflush_r>:
 800e954:	b538      	push	{r3, r4, r5, lr}
 800e956:	690b      	ldr	r3, [r1, #16]
 800e958:	4605      	mov	r5, r0
 800e95a:	460c      	mov	r4, r1
 800e95c:	b913      	cbnz	r3, 800e964 <_fflush_r+0x10>
 800e95e:	2500      	movs	r5, #0
 800e960:	4628      	mov	r0, r5
 800e962:	bd38      	pop	{r3, r4, r5, pc}
 800e964:	b118      	cbz	r0, 800e96e <_fflush_r+0x1a>
 800e966:	6a03      	ldr	r3, [r0, #32]
 800e968:	b90b      	cbnz	r3, 800e96e <_fflush_r+0x1a>
 800e96a:	f7fe f957 	bl	800cc1c <__sinit>
 800e96e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d0f3      	beq.n	800e95e <_fflush_r+0xa>
 800e976:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e978:	07d0      	lsls	r0, r2, #31
 800e97a:	d404      	bmi.n	800e986 <_fflush_r+0x32>
 800e97c:	0599      	lsls	r1, r3, #22
 800e97e:	d402      	bmi.n	800e986 <_fflush_r+0x32>
 800e980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e982:	f7fe fb9a 	bl	800d0ba <__retarget_lock_acquire_recursive>
 800e986:	4628      	mov	r0, r5
 800e988:	4621      	mov	r1, r4
 800e98a:	f7ff ff5d 	bl	800e848 <__sflush_r>
 800e98e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e990:	07da      	lsls	r2, r3, #31
 800e992:	4605      	mov	r5, r0
 800e994:	d4e4      	bmi.n	800e960 <_fflush_r+0xc>
 800e996:	89a3      	ldrh	r3, [r4, #12]
 800e998:	059b      	lsls	r3, r3, #22
 800e99a:	d4e1      	bmi.n	800e960 <_fflush_r+0xc>
 800e99c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e99e:	f7fe fb8d 	bl	800d0bc <__retarget_lock_release_recursive>
 800e9a2:	e7dd      	b.n	800e960 <_fflush_r+0xc>

0800e9a4 <__swhatbuf_r>:
 800e9a4:	b570      	push	{r4, r5, r6, lr}
 800e9a6:	460c      	mov	r4, r1
 800e9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9ac:	2900      	cmp	r1, #0
 800e9ae:	b096      	sub	sp, #88	; 0x58
 800e9b0:	4615      	mov	r5, r2
 800e9b2:	461e      	mov	r6, r3
 800e9b4:	da0d      	bge.n	800e9d2 <__swhatbuf_r+0x2e>
 800e9b6:	89a3      	ldrh	r3, [r4, #12]
 800e9b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e9bc:	f04f 0100 	mov.w	r1, #0
 800e9c0:	bf0c      	ite	eq
 800e9c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e9c6:	2340      	movne	r3, #64	; 0x40
 800e9c8:	2000      	movs	r0, #0
 800e9ca:	6031      	str	r1, [r6, #0]
 800e9cc:	602b      	str	r3, [r5, #0]
 800e9ce:	b016      	add	sp, #88	; 0x58
 800e9d0:	bd70      	pop	{r4, r5, r6, pc}
 800e9d2:	466a      	mov	r2, sp
 800e9d4:	f000 f848 	bl	800ea68 <_fstat_r>
 800e9d8:	2800      	cmp	r0, #0
 800e9da:	dbec      	blt.n	800e9b6 <__swhatbuf_r+0x12>
 800e9dc:	9901      	ldr	r1, [sp, #4]
 800e9de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e9e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e9e6:	4259      	negs	r1, r3
 800e9e8:	4159      	adcs	r1, r3
 800e9ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9ee:	e7eb      	b.n	800e9c8 <__swhatbuf_r+0x24>

0800e9f0 <__smakebuf_r>:
 800e9f0:	898b      	ldrh	r3, [r1, #12]
 800e9f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e9f4:	079d      	lsls	r5, r3, #30
 800e9f6:	4606      	mov	r6, r0
 800e9f8:	460c      	mov	r4, r1
 800e9fa:	d507      	bpl.n	800ea0c <__smakebuf_r+0x1c>
 800e9fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ea00:	6023      	str	r3, [r4, #0]
 800ea02:	6123      	str	r3, [r4, #16]
 800ea04:	2301      	movs	r3, #1
 800ea06:	6163      	str	r3, [r4, #20]
 800ea08:	b002      	add	sp, #8
 800ea0a:	bd70      	pop	{r4, r5, r6, pc}
 800ea0c:	ab01      	add	r3, sp, #4
 800ea0e:	466a      	mov	r2, sp
 800ea10:	f7ff ffc8 	bl	800e9a4 <__swhatbuf_r>
 800ea14:	9900      	ldr	r1, [sp, #0]
 800ea16:	4605      	mov	r5, r0
 800ea18:	4630      	mov	r0, r6
 800ea1a:	f7ff f9c9 	bl	800ddb0 <_malloc_r>
 800ea1e:	b948      	cbnz	r0, 800ea34 <__smakebuf_r+0x44>
 800ea20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea24:	059a      	lsls	r2, r3, #22
 800ea26:	d4ef      	bmi.n	800ea08 <__smakebuf_r+0x18>
 800ea28:	f023 0303 	bic.w	r3, r3, #3
 800ea2c:	f043 0302 	orr.w	r3, r3, #2
 800ea30:	81a3      	strh	r3, [r4, #12]
 800ea32:	e7e3      	b.n	800e9fc <__smakebuf_r+0xc>
 800ea34:	89a3      	ldrh	r3, [r4, #12]
 800ea36:	6020      	str	r0, [r4, #0]
 800ea38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea3c:	81a3      	strh	r3, [r4, #12]
 800ea3e:	9b00      	ldr	r3, [sp, #0]
 800ea40:	6163      	str	r3, [r4, #20]
 800ea42:	9b01      	ldr	r3, [sp, #4]
 800ea44:	6120      	str	r0, [r4, #16]
 800ea46:	b15b      	cbz	r3, 800ea60 <__smakebuf_r+0x70>
 800ea48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea4c:	4630      	mov	r0, r6
 800ea4e:	f000 f81d 	bl	800ea8c <_isatty_r>
 800ea52:	b128      	cbz	r0, 800ea60 <__smakebuf_r+0x70>
 800ea54:	89a3      	ldrh	r3, [r4, #12]
 800ea56:	f023 0303 	bic.w	r3, r3, #3
 800ea5a:	f043 0301 	orr.w	r3, r3, #1
 800ea5e:	81a3      	strh	r3, [r4, #12]
 800ea60:	89a3      	ldrh	r3, [r4, #12]
 800ea62:	431d      	orrs	r5, r3
 800ea64:	81a5      	strh	r5, [r4, #12]
 800ea66:	e7cf      	b.n	800ea08 <__smakebuf_r+0x18>

0800ea68 <_fstat_r>:
 800ea68:	b538      	push	{r3, r4, r5, lr}
 800ea6a:	4d07      	ldr	r5, [pc, #28]	; (800ea88 <_fstat_r+0x20>)
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	4604      	mov	r4, r0
 800ea70:	4608      	mov	r0, r1
 800ea72:	4611      	mov	r1, r2
 800ea74:	602b      	str	r3, [r5, #0]
 800ea76:	f7f3 fef7 	bl	8002868 <_fstat>
 800ea7a:	1c43      	adds	r3, r0, #1
 800ea7c:	d102      	bne.n	800ea84 <_fstat_r+0x1c>
 800ea7e:	682b      	ldr	r3, [r5, #0]
 800ea80:	b103      	cbz	r3, 800ea84 <_fstat_r+0x1c>
 800ea82:	6023      	str	r3, [r4, #0]
 800ea84:	bd38      	pop	{r3, r4, r5, pc}
 800ea86:	bf00      	nop
 800ea88:	24005060 	.word	0x24005060

0800ea8c <_isatty_r>:
 800ea8c:	b538      	push	{r3, r4, r5, lr}
 800ea8e:	4d06      	ldr	r5, [pc, #24]	; (800eaa8 <_isatty_r+0x1c>)
 800ea90:	2300      	movs	r3, #0
 800ea92:	4604      	mov	r4, r0
 800ea94:	4608      	mov	r0, r1
 800ea96:	602b      	str	r3, [r5, #0]
 800ea98:	f7f3 fef6 	bl	8002888 <_isatty>
 800ea9c:	1c43      	adds	r3, r0, #1
 800ea9e:	d102      	bne.n	800eaa6 <_isatty_r+0x1a>
 800eaa0:	682b      	ldr	r3, [r5, #0]
 800eaa2:	b103      	cbz	r3, 800eaa6 <_isatty_r+0x1a>
 800eaa4:	6023      	str	r3, [r4, #0]
 800eaa6:	bd38      	pop	{r3, r4, r5, pc}
 800eaa8:	24005060 	.word	0x24005060

0800eaac <_sbrk_r>:
 800eaac:	b538      	push	{r3, r4, r5, lr}
 800eaae:	4d06      	ldr	r5, [pc, #24]	; (800eac8 <_sbrk_r+0x1c>)
 800eab0:	2300      	movs	r3, #0
 800eab2:	4604      	mov	r4, r0
 800eab4:	4608      	mov	r0, r1
 800eab6:	602b      	str	r3, [r5, #0]
 800eab8:	f7f3 fefe 	bl	80028b8 <_sbrk>
 800eabc:	1c43      	adds	r3, r0, #1
 800eabe:	d102      	bne.n	800eac6 <_sbrk_r+0x1a>
 800eac0:	682b      	ldr	r3, [r5, #0]
 800eac2:	b103      	cbz	r3, 800eac6 <_sbrk_r+0x1a>
 800eac4:	6023      	str	r3, [r4, #0]
 800eac6:	bd38      	pop	{r3, r4, r5, pc}
 800eac8:	24005060 	.word	0x24005060

0800eacc <__assert_func>:
 800eacc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eace:	4614      	mov	r4, r2
 800ead0:	461a      	mov	r2, r3
 800ead2:	4b09      	ldr	r3, [pc, #36]	; (800eaf8 <__assert_func+0x2c>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	4605      	mov	r5, r0
 800ead8:	68d8      	ldr	r0, [r3, #12]
 800eada:	b14c      	cbz	r4, 800eaf0 <__assert_func+0x24>
 800eadc:	4b07      	ldr	r3, [pc, #28]	; (800eafc <__assert_func+0x30>)
 800eade:	9100      	str	r1, [sp, #0]
 800eae0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eae4:	4906      	ldr	r1, [pc, #24]	; (800eb00 <__assert_func+0x34>)
 800eae6:	462b      	mov	r3, r5
 800eae8:	f000 f844 	bl	800eb74 <fiprintf>
 800eaec:	f000 f854 	bl	800eb98 <abort>
 800eaf0:	4b04      	ldr	r3, [pc, #16]	; (800eb04 <__assert_func+0x38>)
 800eaf2:	461c      	mov	r4, r3
 800eaf4:	e7f3      	b.n	800eade <__assert_func+0x12>
 800eaf6:	bf00      	nop
 800eaf8:	2400006c 	.word	0x2400006c
 800eafc:	080100d7 	.word	0x080100d7
 800eb00:	080100e4 	.word	0x080100e4
 800eb04:	08010112 	.word	0x08010112

0800eb08 <_calloc_r>:
 800eb08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb0a:	fba1 2402 	umull	r2, r4, r1, r2
 800eb0e:	b94c      	cbnz	r4, 800eb24 <_calloc_r+0x1c>
 800eb10:	4611      	mov	r1, r2
 800eb12:	9201      	str	r2, [sp, #4]
 800eb14:	f7ff f94c 	bl	800ddb0 <_malloc_r>
 800eb18:	9a01      	ldr	r2, [sp, #4]
 800eb1a:	4605      	mov	r5, r0
 800eb1c:	b930      	cbnz	r0, 800eb2c <_calloc_r+0x24>
 800eb1e:	4628      	mov	r0, r5
 800eb20:	b003      	add	sp, #12
 800eb22:	bd30      	pop	{r4, r5, pc}
 800eb24:	220c      	movs	r2, #12
 800eb26:	6002      	str	r2, [r0, #0]
 800eb28:	2500      	movs	r5, #0
 800eb2a:	e7f8      	b.n	800eb1e <_calloc_r+0x16>
 800eb2c:	4621      	mov	r1, r4
 800eb2e:	f7fe f9f1 	bl	800cf14 <memset>
 800eb32:	e7f4      	b.n	800eb1e <_calloc_r+0x16>

0800eb34 <__ascii_mbtowc>:
 800eb34:	b082      	sub	sp, #8
 800eb36:	b901      	cbnz	r1, 800eb3a <__ascii_mbtowc+0x6>
 800eb38:	a901      	add	r1, sp, #4
 800eb3a:	b142      	cbz	r2, 800eb4e <__ascii_mbtowc+0x1a>
 800eb3c:	b14b      	cbz	r3, 800eb52 <__ascii_mbtowc+0x1e>
 800eb3e:	7813      	ldrb	r3, [r2, #0]
 800eb40:	600b      	str	r3, [r1, #0]
 800eb42:	7812      	ldrb	r2, [r2, #0]
 800eb44:	1e10      	subs	r0, r2, #0
 800eb46:	bf18      	it	ne
 800eb48:	2001      	movne	r0, #1
 800eb4a:	b002      	add	sp, #8
 800eb4c:	4770      	bx	lr
 800eb4e:	4610      	mov	r0, r2
 800eb50:	e7fb      	b.n	800eb4a <__ascii_mbtowc+0x16>
 800eb52:	f06f 0001 	mvn.w	r0, #1
 800eb56:	e7f8      	b.n	800eb4a <__ascii_mbtowc+0x16>

0800eb58 <__ascii_wctomb>:
 800eb58:	b149      	cbz	r1, 800eb6e <__ascii_wctomb+0x16>
 800eb5a:	2aff      	cmp	r2, #255	; 0xff
 800eb5c:	bf85      	ittet	hi
 800eb5e:	238a      	movhi	r3, #138	; 0x8a
 800eb60:	6003      	strhi	r3, [r0, #0]
 800eb62:	700a      	strbls	r2, [r1, #0]
 800eb64:	f04f 30ff 	movhi.w	r0, #4294967295
 800eb68:	bf98      	it	ls
 800eb6a:	2001      	movls	r0, #1
 800eb6c:	4770      	bx	lr
 800eb6e:	4608      	mov	r0, r1
 800eb70:	4770      	bx	lr
	...

0800eb74 <fiprintf>:
 800eb74:	b40e      	push	{r1, r2, r3}
 800eb76:	b503      	push	{r0, r1, lr}
 800eb78:	4601      	mov	r1, r0
 800eb7a:	ab03      	add	r3, sp, #12
 800eb7c:	4805      	ldr	r0, [pc, #20]	; (800eb94 <fiprintf+0x20>)
 800eb7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb82:	6800      	ldr	r0, [r0, #0]
 800eb84:	9301      	str	r3, [sp, #4]
 800eb86:	f7ff fd45 	bl	800e614 <_vfiprintf_r>
 800eb8a:	b002      	add	sp, #8
 800eb8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb90:	b003      	add	sp, #12
 800eb92:	4770      	bx	lr
 800eb94:	2400006c 	.word	0x2400006c

0800eb98 <abort>:
 800eb98:	b508      	push	{r3, lr}
 800eb9a:	2006      	movs	r0, #6
 800eb9c:	f000 f82c 	bl	800ebf8 <raise>
 800eba0:	2001      	movs	r0, #1
 800eba2:	f7f3 fe12 	bl	80027ca <_exit>

0800eba6 <_raise_r>:
 800eba6:	291f      	cmp	r1, #31
 800eba8:	b538      	push	{r3, r4, r5, lr}
 800ebaa:	4604      	mov	r4, r0
 800ebac:	460d      	mov	r5, r1
 800ebae:	d904      	bls.n	800ebba <_raise_r+0x14>
 800ebb0:	2316      	movs	r3, #22
 800ebb2:	6003      	str	r3, [r0, #0]
 800ebb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebb8:	bd38      	pop	{r3, r4, r5, pc}
 800ebba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ebbc:	b112      	cbz	r2, 800ebc4 <_raise_r+0x1e>
 800ebbe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ebc2:	b94b      	cbnz	r3, 800ebd8 <_raise_r+0x32>
 800ebc4:	4620      	mov	r0, r4
 800ebc6:	f000 f831 	bl	800ec2c <_getpid_r>
 800ebca:	462a      	mov	r2, r5
 800ebcc:	4601      	mov	r1, r0
 800ebce:	4620      	mov	r0, r4
 800ebd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebd4:	f000 b818 	b.w	800ec08 <_kill_r>
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d00a      	beq.n	800ebf2 <_raise_r+0x4c>
 800ebdc:	1c59      	adds	r1, r3, #1
 800ebde:	d103      	bne.n	800ebe8 <_raise_r+0x42>
 800ebe0:	2316      	movs	r3, #22
 800ebe2:	6003      	str	r3, [r0, #0]
 800ebe4:	2001      	movs	r0, #1
 800ebe6:	e7e7      	b.n	800ebb8 <_raise_r+0x12>
 800ebe8:	2400      	movs	r4, #0
 800ebea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ebee:	4628      	mov	r0, r5
 800ebf0:	4798      	blx	r3
 800ebf2:	2000      	movs	r0, #0
 800ebf4:	e7e0      	b.n	800ebb8 <_raise_r+0x12>
	...

0800ebf8 <raise>:
 800ebf8:	4b02      	ldr	r3, [pc, #8]	; (800ec04 <raise+0xc>)
 800ebfa:	4601      	mov	r1, r0
 800ebfc:	6818      	ldr	r0, [r3, #0]
 800ebfe:	f7ff bfd2 	b.w	800eba6 <_raise_r>
 800ec02:	bf00      	nop
 800ec04:	2400006c 	.word	0x2400006c

0800ec08 <_kill_r>:
 800ec08:	b538      	push	{r3, r4, r5, lr}
 800ec0a:	4d07      	ldr	r5, [pc, #28]	; (800ec28 <_kill_r+0x20>)
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	4604      	mov	r4, r0
 800ec10:	4608      	mov	r0, r1
 800ec12:	4611      	mov	r1, r2
 800ec14:	602b      	str	r3, [r5, #0]
 800ec16:	f7f3 fdc8 	bl	80027aa <_kill>
 800ec1a:	1c43      	adds	r3, r0, #1
 800ec1c:	d102      	bne.n	800ec24 <_kill_r+0x1c>
 800ec1e:	682b      	ldr	r3, [r5, #0]
 800ec20:	b103      	cbz	r3, 800ec24 <_kill_r+0x1c>
 800ec22:	6023      	str	r3, [r4, #0]
 800ec24:	bd38      	pop	{r3, r4, r5, pc}
 800ec26:	bf00      	nop
 800ec28:	24005060 	.word	0x24005060

0800ec2c <_getpid_r>:
 800ec2c:	f7f3 bdb5 	b.w	800279a <_getpid>

0800ec30 <atan2>:
 800ec30:	f000 b95e 	b.w	800eef0 <__ieee754_atan2>
 800ec34:	0000      	movs	r0, r0
	...

0800ec38 <cos>:
 800ec38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec3a:	eeb0 7b40 	vmov.f64	d7, d0
 800ec3e:	ee17 3a90 	vmov	r3, s15
 800ec42:	4a21      	ldr	r2, [pc, #132]	; (800ecc8 <cos+0x90>)
 800ec44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ec48:	4293      	cmp	r3, r2
 800ec4a:	dc06      	bgt.n	800ec5a <cos+0x22>
 800ec4c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800ecc0 <cos+0x88>
 800ec50:	b005      	add	sp, #20
 800ec52:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec56:	f000 b887 	b.w	800ed68 <__kernel_cos>
 800ec5a:	4a1c      	ldr	r2, [pc, #112]	; (800eccc <cos+0x94>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	dd04      	ble.n	800ec6a <cos+0x32>
 800ec60:	ee30 0b40 	vsub.f64	d0, d0, d0
 800ec64:	b005      	add	sp, #20
 800ec66:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec6a:	4668      	mov	r0, sp
 800ec6c:	f000 fa04 	bl	800f078 <__ieee754_rem_pio2>
 800ec70:	f000 0003 	and.w	r0, r0, #3
 800ec74:	2801      	cmp	r0, #1
 800ec76:	d009      	beq.n	800ec8c <cos+0x54>
 800ec78:	2802      	cmp	r0, #2
 800ec7a:	d010      	beq.n	800ec9e <cos+0x66>
 800ec7c:	b9b0      	cbnz	r0, 800ecac <cos+0x74>
 800ec7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec82:	ed9d 0b00 	vldr	d0, [sp]
 800ec86:	f000 f86f 	bl	800ed68 <__kernel_cos>
 800ec8a:	e7eb      	b.n	800ec64 <cos+0x2c>
 800ec8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec90:	ed9d 0b00 	vldr	d0, [sp]
 800ec94:	f000 f8d4 	bl	800ee40 <__kernel_sin>
 800ec98:	eeb1 0b40 	vneg.f64	d0, d0
 800ec9c:	e7e2      	b.n	800ec64 <cos+0x2c>
 800ec9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eca2:	ed9d 0b00 	vldr	d0, [sp]
 800eca6:	f000 f85f 	bl	800ed68 <__kernel_cos>
 800ecaa:	e7f5      	b.n	800ec98 <cos+0x60>
 800ecac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ecb0:	ed9d 0b00 	vldr	d0, [sp]
 800ecb4:	2001      	movs	r0, #1
 800ecb6:	f000 f8c3 	bl	800ee40 <__kernel_sin>
 800ecba:	e7d3      	b.n	800ec64 <cos+0x2c>
 800ecbc:	f3af 8000 	nop.w
	...
 800ecc8:	3fe921fb 	.word	0x3fe921fb
 800eccc:	7fefffff 	.word	0x7fefffff

0800ecd0 <sin>:
 800ecd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ecd2:	eeb0 7b40 	vmov.f64	d7, d0
 800ecd6:	ee17 3a90 	vmov	r3, s15
 800ecda:	4a21      	ldr	r2, [pc, #132]	; (800ed60 <sin+0x90>)
 800ecdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ece0:	4293      	cmp	r3, r2
 800ece2:	dc07      	bgt.n	800ecf4 <sin+0x24>
 800ece4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800ed58 <sin+0x88>
 800ece8:	2000      	movs	r0, #0
 800ecea:	b005      	add	sp, #20
 800ecec:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecf0:	f000 b8a6 	b.w	800ee40 <__kernel_sin>
 800ecf4:	4a1b      	ldr	r2, [pc, #108]	; (800ed64 <sin+0x94>)
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	dd04      	ble.n	800ed04 <sin+0x34>
 800ecfa:	ee30 0b40 	vsub.f64	d0, d0, d0
 800ecfe:	b005      	add	sp, #20
 800ed00:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed04:	4668      	mov	r0, sp
 800ed06:	f000 f9b7 	bl	800f078 <__ieee754_rem_pio2>
 800ed0a:	f000 0003 	and.w	r0, r0, #3
 800ed0e:	2801      	cmp	r0, #1
 800ed10:	d00a      	beq.n	800ed28 <sin+0x58>
 800ed12:	2802      	cmp	r0, #2
 800ed14:	d00f      	beq.n	800ed36 <sin+0x66>
 800ed16:	b9c0      	cbnz	r0, 800ed4a <sin+0x7a>
 800ed18:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ed1c:	ed9d 0b00 	vldr	d0, [sp]
 800ed20:	2001      	movs	r0, #1
 800ed22:	f000 f88d 	bl	800ee40 <__kernel_sin>
 800ed26:	e7ea      	b.n	800ecfe <sin+0x2e>
 800ed28:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ed2c:	ed9d 0b00 	vldr	d0, [sp]
 800ed30:	f000 f81a 	bl	800ed68 <__kernel_cos>
 800ed34:	e7e3      	b.n	800ecfe <sin+0x2e>
 800ed36:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ed3a:	ed9d 0b00 	vldr	d0, [sp]
 800ed3e:	2001      	movs	r0, #1
 800ed40:	f000 f87e 	bl	800ee40 <__kernel_sin>
 800ed44:	eeb1 0b40 	vneg.f64	d0, d0
 800ed48:	e7d9      	b.n	800ecfe <sin+0x2e>
 800ed4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ed4e:	ed9d 0b00 	vldr	d0, [sp]
 800ed52:	f000 f809 	bl	800ed68 <__kernel_cos>
 800ed56:	e7f5      	b.n	800ed44 <sin+0x74>
	...
 800ed60:	3fe921fb 	.word	0x3fe921fb
 800ed64:	7fefffff 	.word	0x7fefffff

0800ed68 <__kernel_cos>:
 800ed68:	ee10 1a90 	vmov	r1, s1
 800ed6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ed70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ed74:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800ed78:	da05      	bge.n	800ed86 <__kernel_cos+0x1e>
 800ed7a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ed7e:	ee17 3a90 	vmov	r3, s15
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d03d      	beq.n	800ee02 <__kernel_cos+0x9a>
 800ed86:	ee20 5b00 	vmul.f64	d5, d0, d0
 800ed8a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800ed8e:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 800ee08 <__kernel_cos+0xa0>
 800ed92:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800ee10 <__kernel_cos+0xa8>
 800ed96:	eea5 4b07 	vfma.f64	d4, d5, d7
 800ed9a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ee18 <__kernel_cos+0xb0>
 800ed9e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800eda2:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800ee20 <__kernel_cos+0xb8>
 800eda6:	eea7 4b05 	vfma.f64	d4, d7, d5
 800edaa:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ee28 <__kernel_cos+0xc0>
 800edae:	4b22      	ldr	r3, [pc, #136]	; (800ee38 <__kernel_cos+0xd0>)
 800edb0:	eea4 7b05 	vfma.f64	d7, d4, d5
 800edb4:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 800ee30 <__kernel_cos+0xc8>
 800edb8:	4299      	cmp	r1, r3
 800edba:	eea7 4b05 	vfma.f64	d4, d7, d5
 800edbe:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800edc2:	ee24 4b05 	vmul.f64	d4, d4, d5
 800edc6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800edca:	eea5 1b04 	vfma.f64	d1, d5, d4
 800edce:	dc04      	bgt.n	800edda <__kernel_cos+0x72>
 800edd0:	ee37 7b41 	vsub.f64	d7, d7, d1
 800edd4:	ee36 0b47 	vsub.f64	d0, d6, d7
 800edd8:	4770      	bx	lr
 800edda:	4b18      	ldr	r3, [pc, #96]	; (800ee3c <__kernel_cos+0xd4>)
 800eddc:	4299      	cmp	r1, r3
 800edde:	dc0d      	bgt.n	800edfc <__kernel_cos+0x94>
 800ede0:	2200      	movs	r2, #0
 800ede2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800ede6:	ec43 2b15 	vmov	d5, r2, r3
 800edea:	ee36 0b45 	vsub.f64	d0, d6, d5
 800edee:	ee37 7b45 	vsub.f64	d7, d7, d5
 800edf2:	ee37 7b41 	vsub.f64	d7, d7, d1
 800edf6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800edfa:	4770      	bx	lr
 800edfc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800ee00:	e7f3      	b.n	800edea <__kernel_cos+0x82>
 800ee02:	eeb0 0b46 	vmov.f64	d0, d6
 800ee06:	4770      	bx	lr
 800ee08:	be8838d4 	.word	0xbe8838d4
 800ee0c:	bda8fae9 	.word	0xbda8fae9
 800ee10:	bdb4b1c4 	.word	0xbdb4b1c4
 800ee14:	3e21ee9e 	.word	0x3e21ee9e
 800ee18:	809c52ad 	.word	0x809c52ad
 800ee1c:	be927e4f 	.word	0xbe927e4f
 800ee20:	19cb1590 	.word	0x19cb1590
 800ee24:	3efa01a0 	.word	0x3efa01a0
 800ee28:	16c15177 	.word	0x16c15177
 800ee2c:	bf56c16c 	.word	0xbf56c16c
 800ee30:	5555554c 	.word	0x5555554c
 800ee34:	3fa55555 	.word	0x3fa55555
 800ee38:	3fd33332 	.word	0x3fd33332
 800ee3c:	3fe90000 	.word	0x3fe90000

0800ee40 <__kernel_sin>:
 800ee40:	ee10 3a90 	vmov	r3, s1
 800ee44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee48:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ee4c:	da04      	bge.n	800ee58 <__kernel_sin+0x18>
 800ee4e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ee52:	ee17 3a90 	vmov	r3, s15
 800ee56:	b35b      	cbz	r3, 800eeb0 <__kernel_sin+0x70>
 800ee58:	ee20 6b00 	vmul.f64	d6, d0, d0
 800ee5c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800ee60:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800eeb8 <__kernel_sin+0x78>
 800ee64:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800eec0 <__kernel_sin+0x80>
 800ee68:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ee6c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800eec8 <__kernel_sin+0x88>
 800ee70:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ee74:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800eed0 <__kernel_sin+0x90>
 800ee78:	eea7 4b06 	vfma.f64	d4, d7, d6
 800ee7c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800eed8 <__kernel_sin+0x98>
 800ee80:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ee84:	b930      	cbnz	r0, 800ee94 <__kernel_sin+0x54>
 800ee86:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800eee0 <__kernel_sin+0xa0>
 800ee8a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ee8e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800ee92:	4770      	bx	lr
 800ee94:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800ee98:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ee9c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800eea0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800eea4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800eee8 <__kernel_sin+0xa8>
 800eea8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800eeac:	ee30 0b41 	vsub.f64	d0, d0, d1
 800eeb0:	4770      	bx	lr
 800eeb2:	bf00      	nop
 800eeb4:	f3af 8000 	nop.w
 800eeb8:	5acfd57c 	.word	0x5acfd57c
 800eebc:	3de5d93a 	.word	0x3de5d93a
 800eec0:	8a2b9ceb 	.word	0x8a2b9ceb
 800eec4:	be5ae5e6 	.word	0xbe5ae5e6
 800eec8:	57b1fe7d 	.word	0x57b1fe7d
 800eecc:	3ec71de3 	.word	0x3ec71de3
 800eed0:	19c161d5 	.word	0x19c161d5
 800eed4:	bf2a01a0 	.word	0xbf2a01a0
 800eed8:	1110f8a6 	.word	0x1110f8a6
 800eedc:	3f811111 	.word	0x3f811111
 800eee0:	55555549 	.word	0x55555549
 800eee4:	bfc55555 	.word	0xbfc55555
 800eee8:	55555549 	.word	0x55555549
 800eeec:	3fc55555 	.word	0x3fc55555

0800eef0 <__ieee754_atan2>:
 800eef0:	ee11 1a10 	vmov	r1, s2
 800eef4:	eeb0 7b40 	vmov.f64	d7, d0
 800eef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eefa:	ee11 5a90 	vmov	r5, s3
 800eefe:	424b      	negs	r3, r1
 800ef00:	4f59      	ldr	r7, [pc, #356]	; (800f068 <__ieee754_atan2+0x178>)
 800ef02:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800ef06:	430b      	orrs	r3, r1
 800ef08:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ef0c:	42bb      	cmp	r3, r7
 800ef0e:	d80d      	bhi.n	800ef2c <__ieee754_atan2+0x3c>
 800ef10:	ee10 ca10 	vmov	ip, s0
 800ef14:	ee17 6a90 	vmov	r6, s15
 800ef18:	f1cc 0000 	rsb	r0, ip, #0
 800ef1c:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800ef20:	ea40 000c 	orr.w	r0, r0, ip
 800ef24:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 800ef28:	42b8      	cmp	r0, r7
 800ef2a:	d904      	bls.n	800ef36 <__ieee754_atan2+0x46>
 800ef2c:	ee37 7b01 	vadd.f64	d7, d7, d1
 800ef30:	eeb0 0b47 	vmov.f64	d0, d7
 800ef34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef36:	f105 4040 	add.w	r0, r5, #3221225472	; 0xc0000000
 800ef3a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ef3e:	4308      	orrs	r0, r1
 800ef40:	d103      	bne.n	800ef4a <__ieee754_atan2+0x5a>
 800ef42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ef46:	f000 b9db 	b.w	800f300 <atan>
 800ef4a:	17ac      	asrs	r4, r5, #30
 800ef4c:	f004 0402 	and.w	r4, r4, #2
 800ef50:	ea53 0c0c 	orrs.w	ip, r3, ip
 800ef54:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 800ef58:	d107      	bne.n	800ef6a <__ieee754_atan2+0x7a>
 800ef5a:	2c02      	cmp	r4, #2
 800ef5c:	d05c      	beq.n	800f018 <__ieee754_atan2+0x128>
 800ef5e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800f030 <__ieee754_atan2+0x140>
 800ef62:	2c03      	cmp	r4, #3
 800ef64:	fe06 7b00 	vseleq.f64	d7, d6, d0
 800ef68:	e7e2      	b.n	800ef30 <__ieee754_atan2+0x40>
 800ef6a:	4311      	orrs	r1, r2
 800ef6c:	d107      	bne.n	800ef7e <__ieee754_atan2+0x8e>
 800ef6e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800f038 <__ieee754_atan2+0x148>
 800ef72:	ed9f 6b33 	vldr	d6, [pc, #204]	; 800f040 <__ieee754_atan2+0x150>
 800ef76:	2e00      	cmp	r6, #0
 800ef78:	fe27 7b06 	vselge.f64	d7, d7, d6
 800ef7c:	e7d8      	b.n	800ef30 <__ieee754_atan2+0x40>
 800ef7e:	42ba      	cmp	r2, r7
 800ef80:	d10f      	bne.n	800efa2 <__ieee754_atan2+0xb2>
 800ef82:	4293      	cmp	r3, r2
 800ef84:	f104 34ff 	add.w	r4, r4, #4294967295
 800ef88:	d107      	bne.n	800ef9a <__ieee754_atan2+0xaa>
 800ef8a:	2c02      	cmp	r4, #2
 800ef8c:	d847      	bhi.n	800f01e <__ieee754_atan2+0x12e>
 800ef8e:	4b37      	ldr	r3, [pc, #220]	; (800f06c <__ieee754_atan2+0x17c>)
 800ef90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef94:	ed93 7b00 	vldr	d7, [r3]
 800ef98:	e7ca      	b.n	800ef30 <__ieee754_atan2+0x40>
 800ef9a:	2c02      	cmp	r4, #2
 800ef9c:	d842      	bhi.n	800f024 <__ieee754_atan2+0x134>
 800ef9e:	4b34      	ldr	r3, [pc, #208]	; (800f070 <__ieee754_atan2+0x180>)
 800efa0:	e7f6      	b.n	800ef90 <__ieee754_atan2+0xa0>
 800efa2:	42bb      	cmp	r3, r7
 800efa4:	d0e3      	beq.n	800ef6e <__ieee754_atan2+0x7e>
 800efa6:	1a9b      	subs	r3, r3, r2
 800efa8:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800efac:	ea4f 5223 	mov.w	r2, r3, asr #20
 800efb0:	da1a      	bge.n	800efe8 <__ieee754_atan2+0xf8>
 800efb2:	2d00      	cmp	r5, #0
 800efb4:	da01      	bge.n	800efba <__ieee754_atan2+0xca>
 800efb6:	323c      	adds	r2, #60	; 0x3c
 800efb8:	db19      	blt.n	800efee <__ieee754_atan2+0xfe>
 800efba:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800efbe:	f000 fa99 	bl	800f4f4 <fabs>
 800efc2:	f000 f99d 	bl	800f300 <atan>
 800efc6:	eeb0 7b40 	vmov.f64	d7, d0
 800efca:	2c01      	cmp	r4, #1
 800efcc:	d012      	beq.n	800eff4 <__ieee754_atan2+0x104>
 800efce:	2c02      	cmp	r4, #2
 800efd0:	d019      	beq.n	800f006 <__ieee754_atan2+0x116>
 800efd2:	2c00      	cmp	r4, #0
 800efd4:	d0ac      	beq.n	800ef30 <__ieee754_atan2+0x40>
 800efd6:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800f048 <__ieee754_atan2+0x158>
 800efda:	ee37 7b46 	vsub.f64	d7, d7, d6
 800efde:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800f050 <__ieee754_atan2+0x160>
 800efe2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800efe6:	e7a3      	b.n	800ef30 <__ieee754_atan2+0x40>
 800efe8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f038 <__ieee754_atan2+0x148>
 800efec:	e7ed      	b.n	800efca <__ieee754_atan2+0xda>
 800efee:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 800f058 <__ieee754_atan2+0x168>
 800eff2:	e7ea      	b.n	800efca <__ieee754_atan2+0xda>
 800eff4:	ee17 1a90 	vmov	r1, s15
 800eff8:	ec53 2b17 	vmov	r2, r3, d7
 800effc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f000:	ec43 2b17 	vmov	d7, r2, r3
 800f004:	e794      	b.n	800ef30 <__ieee754_atan2+0x40>
 800f006:	ed9f 6b10 	vldr	d6, [pc, #64]	; 800f048 <__ieee754_atan2+0x158>
 800f00a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f00e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 800f050 <__ieee754_atan2+0x160>
 800f012:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f016:	e78b      	b.n	800ef30 <__ieee754_atan2+0x40>
 800f018:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800f050 <__ieee754_atan2+0x160>
 800f01c:	e788      	b.n	800ef30 <__ieee754_atan2+0x40>
 800f01e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800f060 <__ieee754_atan2+0x170>
 800f022:	e785      	b.n	800ef30 <__ieee754_atan2+0x40>
 800f024:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800f058 <__ieee754_atan2+0x168>
 800f028:	e782      	b.n	800ef30 <__ieee754_atan2+0x40>
 800f02a:	bf00      	nop
 800f02c:	f3af 8000 	nop.w
 800f030:	54442d18 	.word	0x54442d18
 800f034:	c00921fb 	.word	0xc00921fb
 800f038:	54442d18 	.word	0x54442d18
 800f03c:	3ff921fb 	.word	0x3ff921fb
 800f040:	54442d18 	.word	0x54442d18
 800f044:	bff921fb 	.word	0xbff921fb
 800f048:	33145c07 	.word	0x33145c07
 800f04c:	3ca1a626 	.word	0x3ca1a626
 800f050:	54442d18 	.word	0x54442d18
 800f054:	400921fb 	.word	0x400921fb
	...
 800f060:	54442d18 	.word	0x54442d18
 800f064:	3fe921fb 	.word	0x3fe921fb
 800f068:	7ff00000 	.word	0x7ff00000
 800f06c:	08010218 	.word	0x08010218
 800f070:	08010230 	.word	0x08010230
 800f074:	00000000 	.word	0x00000000

0800f078 <__ieee754_rem_pio2>:
 800f078:	b570      	push	{r4, r5, r6, lr}
 800f07a:	eeb0 7b40 	vmov.f64	d7, d0
 800f07e:	ee17 5a90 	vmov	r5, s15
 800f082:	4b99      	ldr	r3, [pc, #612]	; (800f2e8 <__ieee754_rem_pio2+0x270>)
 800f084:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f088:	429e      	cmp	r6, r3
 800f08a:	b088      	sub	sp, #32
 800f08c:	4604      	mov	r4, r0
 800f08e:	dc07      	bgt.n	800f0a0 <__ieee754_rem_pio2+0x28>
 800f090:	2200      	movs	r2, #0
 800f092:	2300      	movs	r3, #0
 800f094:	ed84 0b00 	vstr	d0, [r4]
 800f098:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f09c:	2000      	movs	r0, #0
 800f09e:	e01b      	b.n	800f0d8 <__ieee754_rem_pio2+0x60>
 800f0a0:	4b92      	ldr	r3, [pc, #584]	; (800f2ec <__ieee754_rem_pio2+0x274>)
 800f0a2:	429e      	cmp	r6, r3
 800f0a4:	dc3b      	bgt.n	800f11e <__ieee754_rem_pio2+0xa6>
 800f0a6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800f0aa:	2d00      	cmp	r5, #0
 800f0ac:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800f2a8 <__ieee754_rem_pio2+0x230>
 800f0b0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800f0b4:	dd19      	ble.n	800f0ea <__ieee754_rem_pio2+0x72>
 800f0b6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800f0ba:	429e      	cmp	r6, r3
 800f0bc:	d00e      	beq.n	800f0dc <__ieee754_rem_pio2+0x64>
 800f0be:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800f2b0 <__ieee754_rem_pio2+0x238>
 800f0c2:	ee37 5b46 	vsub.f64	d5, d7, d6
 800f0c6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800f0ca:	ed84 5b00 	vstr	d5, [r4]
 800f0ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f0d2:	ed84 7b02 	vstr	d7, [r4, #8]
 800f0d6:	2001      	movs	r0, #1
 800f0d8:	b008      	add	sp, #32
 800f0da:	bd70      	pop	{r4, r5, r6, pc}
 800f0dc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800f2b8 <__ieee754_rem_pio2+0x240>
 800f0e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f0e4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800f2c0 <__ieee754_rem_pio2+0x248>
 800f0e8:	e7eb      	b.n	800f0c2 <__ieee754_rem_pio2+0x4a>
 800f0ea:	429e      	cmp	r6, r3
 800f0ec:	ee30 7b06 	vadd.f64	d7, d0, d6
 800f0f0:	d00e      	beq.n	800f110 <__ieee754_rem_pio2+0x98>
 800f0f2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800f2b0 <__ieee754_rem_pio2+0x238>
 800f0f6:	ee37 5b06 	vadd.f64	d5, d7, d6
 800f0fa:	ee37 7b45 	vsub.f64	d7, d7, d5
 800f0fe:	ed84 5b00 	vstr	d5, [r4]
 800f102:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f106:	f04f 30ff 	mov.w	r0, #4294967295
 800f10a:	ed84 7b02 	vstr	d7, [r4, #8]
 800f10e:	e7e3      	b.n	800f0d8 <__ieee754_rem_pio2+0x60>
 800f110:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800f2b8 <__ieee754_rem_pio2+0x240>
 800f114:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f118:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800f2c0 <__ieee754_rem_pio2+0x248>
 800f11c:	e7eb      	b.n	800f0f6 <__ieee754_rem_pio2+0x7e>
 800f11e:	4b74      	ldr	r3, [pc, #464]	; (800f2f0 <__ieee754_rem_pio2+0x278>)
 800f120:	429e      	cmp	r6, r3
 800f122:	dc70      	bgt.n	800f206 <__ieee754_rem_pio2+0x18e>
 800f124:	f000 f9e6 	bl	800f4f4 <fabs>
 800f128:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f12c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800f2c8 <__ieee754_rem_pio2+0x250>
 800f130:	eea0 7b06 	vfma.f64	d7, d0, d6
 800f134:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800f138:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800f13c:	ee17 0a90 	vmov	r0, s15
 800f140:	eeb1 4b45 	vneg.f64	d4, d5
 800f144:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800f2a8 <__ieee754_rem_pio2+0x230>
 800f148:	eea5 0b47 	vfms.f64	d0, d5, d7
 800f14c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800f2b0 <__ieee754_rem_pio2+0x238>
 800f150:	281f      	cmp	r0, #31
 800f152:	ee25 7b07 	vmul.f64	d7, d5, d7
 800f156:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f15a:	dc08      	bgt.n	800f16e <__ieee754_rem_pio2+0xf6>
 800f15c:	4b65      	ldr	r3, [pc, #404]	; (800f2f4 <__ieee754_rem_pio2+0x27c>)
 800f15e:	1e42      	subs	r2, r0, #1
 800f160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f164:	42b3      	cmp	r3, r6
 800f166:	d002      	beq.n	800f16e <__ieee754_rem_pio2+0xf6>
 800f168:	ed84 6b00 	vstr	d6, [r4]
 800f16c:	e024      	b.n	800f1b8 <__ieee754_rem_pio2+0x140>
 800f16e:	ee16 3a90 	vmov	r3, s13
 800f172:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800f176:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800f17a:	2b10      	cmp	r3, #16
 800f17c:	ea4f 5226 	mov.w	r2, r6, asr #20
 800f180:	ddf2      	ble.n	800f168 <__ieee754_rem_pio2+0xf0>
 800f182:	eeb0 6b40 	vmov.f64	d6, d0
 800f186:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 800f2b8 <__ieee754_rem_pio2+0x240>
 800f18a:	eea4 6b03 	vfma.f64	d6, d4, d3
 800f18e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800f192:	eea4 7b03 	vfma.f64	d7, d4, d3
 800f196:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800f2c0 <__ieee754_rem_pio2+0x248>
 800f19a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800f19e:	ee36 3b47 	vsub.f64	d3, d6, d7
 800f1a2:	ee13 3a90 	vmov	r3, s7
 800f1a6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800f1aa:	1ad3      	subs	r3, r2, r3
 800f1ac:	2b31      	cmp	r3, #49	; 0x31
 800f1ae:	dc17      	bgt.n	800f1e0 <__ieee754_rem_pio2+0x168>
 800f1b0:	eeb0 0b46 	vmov.f64	d0, d6
 800f1b4:	ed84 3b00 	vstr	d3, [r4]
 800f1b8:	ed94 6b00 	vldr	d6, [r4]
 800f1bc:	2d00      	cmp	r5, #0
 800f1be:	ee30 0b46 	vsub.f64	d0, d0, d6
 800f1c2:	ee30 0b47 	vsub.f64	d0, d0, d7
 800f1c6:	ed84 0b02 	vstr	d0, [r4, #8]
 800f1ca:	da85      	bge.n	800f0d8 <__ieee754_rem_pio2+0x60>
 800f1cc:	eeb1 6b46 	vneg.f64	d6, d6
 800f1d0:	eeb1 0b40 	vneg.f64	d0, d0
 800f1d4:	ed84 6b00 	vstr	d6, [r4]
 800f1d8:	ed84 0b02 	vstr	d0, [r4, #8]
 800f1dc:	4240      	negs	r0, r0
 800f1de:	e77b      	b.n	800f0d8 <__ieee754_rem_pio2+0x60>
 800f1e0:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800f2d0 <__ieee754_rem_pio2+0x258>
 800f1e4:	eeb0 0b46 	vmov.f64	d0, d6
 800f1e8:	eea4 0b07 	vfma.f64	d0, d4, d7
 800f1ec:	ee36 6b40 	vsub.f64	d6, d6, d0
 800f1f0:	eea4 6b07 	vfma.f64	d6, d4, d7
 800f1f4:	ed9f 4b38 	vldr	d4, [pc, #224]	; 800f2d8 <__ieee754_rem_pio2+0x260>
 800f1f8:	eeb0 7b46 	vmov.f64	d7, d6
 800f1fc:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800f200:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f204:	e7b0      	b.n	800f168 <__ieee754_rem_pio2+0xf0>
 800f206:	4b3c      	ldr	r3, [pc, #240]	; (800f2f8 <__ieee754_rem_pio2+0x280>)
 800f208:	429e      	cmp	r6, r3
 800f20a:	dd06      	ble.n	800f21a <__ieee754_rem_pio2+0x1a2>
 800f20c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800f210:	ed80 7b02 	vstr	d7, [r0, #8]
 800f214:	ed80 7b00 	vstr	d7, [r0]
 800f218:	e740      	b.n	800f09c <__ieee754_rem_pio2+0x24>
 800f21a:	1532      	asrs	r2, r6, #20
 800f21c:	ee10 0a10 	vmov	r0, s0
 800f220:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800f224:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800f228:	ec41 0b17 	vmov	d7, r0, r1
 800f22c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800f230:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800f2e0 <__ieee754_rem_pio2+0x268>
 800f234:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800f238:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f23c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f240:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f244:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800f248:	a808      	add	r0, sp, #32
 800f24a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800f24e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f252:	ed8d 6b04 	vstr	d6, [sp, #16]
 800f256:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f25a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f25e:	2103      	movs	r1, #3
 800f260:	ed30 7b02 	vldmdb	r0!, {d7}
 800f264:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f26c:	460b      	mov	r3, r1
 800f26e:	f101 31ff 	add.w	r1, r1, #4294967295
 800f272:	d0f5      	beq.n	800f260 <__ieee754_rem_pio2+0x1e8>
 800f274:	4921      	ldr	r1, [pc, #132]	; (800f2fc <__ieee754_rem_pio2+0x284>)
 800f276:	9101      	str	r1, [sp, #4]
 800f278:	2102      	movs	r1, #2
 800f27a:	9100      	str	r1, [sp, #0]
 800f27c:	a802      	add	r0, sp, #8
 800f27e:	4621      	mov	r1, r4
 800f280:	f000 f942 	bl	800f508 <__kernel_rem_pio2>
 800f284:	2d00      	cmp	r5, #0
 800f286:	f6bf af27 	bge.w	800f0d8 <__ieee754_rem_pio2+0x60>
 800f28a:	ed94 7b00 	vldr	d7, [r4]
 800f28e:	eeb1 7b47 	vneg.f64	d7, d7
 800f292:	ed84 7b00 	vstr	d7, [r4]
 800f296:	ed94 7b02 	vldr	d7, [r4, #8]
 800f29a:	eeb1 7b47 	vneg.f64	d7, d7
 800f29e:	ed84 7b02 	vstr	d7, [r4, #8]
 800f2a2:	e79b      	b.n	800f1dc <__ieee754_rem_pio2+0x164>
 800f2a4:	f3af 8000 	nop.w
 800f2a8:	54400000 	.word	0x54400000
 800f2ac:	3ff921fb 	.word	0x3ff921fb
 800f2b0:	1a626331 	.word	0x1a626331
 800f2b4:	3dd0b461 	.word	0x3dd0b461
 800f2b8:	1a600000 	.word	0x1a600000
 800f2bc:	3dd0b461 	.word	0x3dd0b461
 800f2c0:	2e037073 	.word	0x2e037073
 800f2c4:	3ba3198a 	.word	0x3ba3198a
 800f2c8:	6dc9c883 	.word	0x6dc9c883
 800f2cc:	3fe45f30 	.word	0x3fe45f30
 800f2d0:	2e000000 	.word	0x2e000000
 800f2d4:	3ba3198a 	.word	0x3ba3198a
 800f2d8:	252049c1 	.word	0x252049c1
 800f2dc:	397b839a 	.word	0x397b839a
 800f2e0:	00000000 	.word	0x00000000
 800f2e4:	41700000 	.word	0x41700000
 800f2e8:	3fe921fb 	.word	0x3fe921fb
 800f2ec:	4002d97b 	.word	0x4002d97b
 800f2f0:	413921fb 	.word	0x413921fb
 800f2f4:	08010248 	.word	0x08010248
 800f2f8:	7fefffff 	.word	0x7fefffff
 800f2fc:	080102c8 	.word	0x080102c8

0800f300 <atan>:
 800f300:	b538      	push	{r3, r4, r5, lr}
 800f302:	eeb0 7b40 	vmov.f64	d7, d0
 800f306:	ee17 5a90 	vmov	r5, s15
 800f30a:	4b73      	ldr	r3, [pc, #460]	; (800f4d8 <atan+0x1d8>)
 800f30c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f310:	429c      	cmp	r4, r3
 800f312:	dd13      	ble.n	800f33c <atan+0x3c>
 800f314:	4b71      	ldr	r3, [pc, #452]	; (800f4dc <atan+0x1dc>)
 800f316:	429c      	cmp	r4, r3
 800f318:	dc03      	bgt.n	800f322 <atan+0x22>
 800f31a:	d107      	bne.n	800f32c <atan+0x2c>
 800f31c:	ee10 3a10 	vmov	r3, s0
 800f320:	b123      	cbz	r3, 800f32c <atan+0x2c>
 800f322:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f326:	eeb0 0b47 	vmov.f64	d0, d7
 800f32a:	bd38      	pop	{r3, r4, r5, pc}
 800f32c:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 800f468 <atan+0x168>
 800f330:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 800f470 <atan+0x170>
 800f334:	2d00      	cmp	r5, #0
 800f336:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800f33a:	e7f4      	b.n	800f326 <atan+0x26>
 800f33c:	4b68      	ldr	r3, [pc, #416]	; (800f4e0 <atan+0x1e0>)
 800f33e:	429c      	cmp	r4, r3
 800f340:	dc11      	bgt.n	800f366 <atan+0x66>
 800f342:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f346:	429c      	cmp	r4, r3
 800f348:	dc0a      	bgt.n	800f360 <atan+0x60>
 800f34a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800f34e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800f478 <atan+0x178>
 800f352:	ee30 6b06 	vadd.f64	d6, d0, d6
 800f356:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f35e:	dce2      	bgt.n	800f326 <atan+0x26>
 800f360:	f04f 33ff 	mov.w	r3, #4294967295
 800f364:	e013      	b.n	800f38e <atan+0x8e>
 800f366:	f000 f8c5 	bl	800f4f4 <fabs>
 800f36a:	4b5e      	ldr	r3, [pc, #376]	; (800f4e4 <atan+0x1e4>)
 800f36c:	429c      	cmp	r4, r3
 800f36e:	dc4f      	bgt.n	800f410 <atan+0x110>
 800f370:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f374:	429c      	cmp	r4, r3
 800f376:	dc41      	bgt.n	800f3fc <atan+0xfc>
 800f378:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800f37c:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 800f380:	2300      	movs	r3, #0
 800f382:	eea0 5b07 	vfma.f64	d5, d0, d7
 800f386:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f38a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800f38e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f480 <atan+0x180>
 800f392:	ee27 4b07 	vmul.f64	d4, d7, d7
 800f396:	ee24 5b04 	vmul.f64	d5, d4, d4
 800f39a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800f488 <atan+0x188>
 800f39e:	eea5 3b06 	vfma.f64	d3, d5, d6
 800f3a2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800f490 <atan+0x190>
 800f3a6:	eea3 6b05 	vfma.f64	d6, d3, d5
 800f3aa:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800f498 <atan+0x198>
 800f3ae:	eea6 3b05 	vfma.f64	d3, d6, d5
 800f3b2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800f4a0 <atan+0x1a0>
 800f3b6:	eea3 6b05 	vfma.f64	d6, d3, d5
 800f3ba:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800f4a8 <atan+0x1a8>
 800f3be:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800f4b0 <atan+0x1b0>
 800f3c2:	eea6 3b05 	vfma.f64	d3, d6, d5
 800f3c6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f4b8 <atan+0x1b8>
 800f3ca:	eea5 2b06 	vfma.f64	d2, d5, d6
 800f3ce:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f4c0 <atan+0x1c0>
 800f3d2:	eea2 6b05 	vfma.f64	d6, d2, d5
 800f3d6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800f4c8 <atan+0x1c8>
 800f3da:	eea6 2b05 	vfma.f64	d2, d6, d5
 800f3de:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f4d0 <atan+0x1d0>
 800f3e2:	1c5a      	adds	r2, r3, #1
 800f3e4:	eea2 6b05 	vfma.f64	d6, d2, d5
 800f3e8:	ee26 6b05 	vmul.f64	d6, d6, d5
 800f3ec:	eea3 6b04 	vfma.f64	d6, d3, d4
 800f3f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f3f4:	d121      	bne.n	800f43a <atan+0x13a>
 800f3f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f3fa:	e794      	b.n	800f326 <atan+0x26>
 800f3fc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f400:	2301      	movs	r3, #1
 800f402:	ee30 5b47 	vsub.f64	d5, d0, d7
 800f406:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f40a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800f40e:	e7be      	b.n	800f38e <atan+0x8e>
 800f410:	4b35      	ldr	r3, [pc, #212]	; (800f4e8 <atan+0x1e8>)
 800f412:	429c      	cmp	r4, r3
 800f414:	da0b      	bge.n	800f42e <atan+0x12e>
 800f416:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f41a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f41e:	ee30 5b47 	vsub.f64	d5, d0, d7
 800f422:	eea0 6b07 	vfma.f64	d6, d0, d7
 800f426:	2302      	movs	r3, #2
 800f428:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800f42c:	e7af      	b.n	800f38e <atan+0x8e>
 800f42e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800f432:	2303      	movs	r3, #3
 800f434:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f438:	e7a9      	b.n	800f38e <atan+0x8e>
 800f43a:	4a2c      	ldr	r2, [pc, #176]	; (800f4ec <atan+0x1ec>)
 800f43c:	492c      	ldr	r1, [pc, #176]	; (800f4f0 <atan+0x1f0>)
 800f43e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f442:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800f446:	ed93 5b00 	vldr	d5, [r3]
 800f44a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f44e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f452:	ed92 7b00 	vldr	d7, [r2]
 800f456:	2d00      	cmp	r5, #0
 800f458:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f45c:	bfb8      	it	lt
 800f45e:	eeb1 7b47 	vneglt.f64	d7, d7
 800f462:	e760      	b.n	800f326 <atan+0x26>
 800f464:	f3af 8000 	nop.w
 800f468:	54442d18 	.word	0x54442d18
 800f46c:	3ff921fb 	.word	0x3ff921fb
 800f470:	54442d18 	.word	0x54442d18
 800f474:	bff921fb 	.word	0xbff921fb
 800f478:	8800759c 	.word	0x8800759c
 800f47c:	7e37e43c 	.word	0x7e37e43c
 800f480:	e322da11 	.word	0xe322da11
 800f484:	3f90ad3a 	.word	0x3f90ad3a
 800f488:	24760deb 	.word	0x24760deb
 800f48c:	3fa97b4b 	.word	0x3fa97b4b
 800f490:	a0d03d51 	.word	0xa0d03d51
 800f494:	3fb10d66 	.word	0x3fb10d66
 800f498:	c54c206e 	.word	0xc54c206e
 800f49c:	3fb745cd 	.word	0x3fb745cd
 800f4a0:	920083ff 	.word	0x920083ff
 800f4a4:	3fc24924 	.word	0x3fc24924
 800f4a8:	5555550d 	.word	0x5555550d
 800f4ac:	3fd55555 	.word	0x3fd55555
 800f4b0:	52defd9a 	.word	0x52defd9a
 800f4b4:	bfadde2d 	.word	0xbfadde2d
 800f4b8:	2c6a6c2f 	.word	0x2c6a6c2f
 800f4bc:	bfa2b444 	.word	0xbfa2b444
 800f4c0:	af749a6d 	.word	0xaf749a6d
 800f4c4:	bfb3b0f2 	.word	0xbfb3b0f2
 800f4c8:	fe231671 	.word	0xfe231671
 800f4cc:	bfbc71c6 	.word	0xbfbc71c6
 800f4d0:	9998ebc4 	.word	0x9998ebc4
 800f4d4:	bfc99999 	.word	0xbfc99999
 800f4d8:	440fffff 	.word	0x440fffff
 800f4dc:	7ff00000 	.word	0x7ff00000
 800f4e0:	3fdbffff 	.word	0x3fdbffff
 800f4e4:	3ff2ffff 	.word	0x3ff2ffff
 800f4e8:	40038000 	.word	0x40038000
 800f4ec:	080103d0 	.word	0x080103d0
 800f4f0:	080103f0 	.word	0x080103f0

0800f4f4 <fabs>:
 800f4f4:	ec51 0b10 	vmov	r0, r1, d0
 800f4f8:	ee10 2a10 	vmov	r2, s0
 800f4fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f500:	ec43 2b10 	vmov	d0, r2, r3
 800f504:	4770      	bx	lr
	...

0800f508 <__kernel_rem_pio2>:
 800f508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f50c:	ed2d 8b06 	vpush	{d8-d10}
 800f510:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800f514:	460f      	mov	r7, r1
 800f516:	9002      	str	r0, [sp, #8]
 800f518:	49c3      	ldr	r1, [pc, #780]	; (800f828 <__kernel_rem_pio2+0x320>)
 800f51a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800f51c:	9301      	str	r3, [sp, #4]
 800f51e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800f522:	9901      	ldr	r1, [sp, #4]
 800f524:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800f526:	f112 0f14 	cmn.w	r2, #20
 800f52a:	bfa8      	it	ge
 800f52c:	1ed0      	subge	r0, r2, #3
 800f52e:	f101 3aff 	add.w	sl, r1, #4294967295
 800f532:	bfaa      	itet	ge
 800f534:	2418      	movge	r4, #24
 800f536:	2000      	movlt	r0, #0
 800f538:	fb90 f0f4 	sdivge	r0, r0, r4
 800f53c:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 800f810 <__kernel_rem_pio2+0x308>
 800f540:	f06f 0417 	mvn.w	r4, #23
 800f544:	fb00 4404 	mla	r4, r0, r4, r4
 800f548:	eba0 060a 	sub.w	r6, r0, sl
 800f54c:	4414      	add	r4, r2
 800f54e:	eb09 0c0a 	add.w	ip, r9, sl
 800f552:	ad1a      	add	r5, sp, #104	; 0x68
 800f554:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 800f558:	2200      	movs	r2, #0
 800f55a:	4562      	cmp	r2, ip
 800f55c:	dd10      	ble.n	800f580 <__kernel_rem_pio2+0x78>
 800f55e:	9a01      	ldr	r2, [sp, #4]
 800f560:	a91a      	add	r1, sp, #104	; 0x68
 800f562:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f566:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 800f56a:	f04f 0c00 	mov.w	ip, #0
 800f56e:	45cc      	cmp	ip, r9
 800f570:	dc26      	bgt.n	800f5c0 <__kernel_rem_pio2+0xb8>
 800f572:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 800f810 <__kernel_rem_pio2+0x308>
 800f576:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f57a:	4616      	mov	r6, r2
 800f57c:	2500      	movs	r5, #0
 800f57e:	e015      	b.n	800f5ac <__kernel_rem_pio2+0xa4>
 800f580:	42d6      	cmn	r6, r2
 800f582:	d409      	bmi.n	800f598 <__kernel_rem_pio2+0x90>
 800f584:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 800f588:	ee07 1a90 	vmov	s15, r1
 800f58c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f590:	eca5 7b02 	vstmia	r5!, {d7}
 800f594:	3201      	adds	r2, #1
 800f596:	e7e0      	b.n	800f55a <__kernel_rem_pio2+0x52>
 800f598:	eeb0 7b46 	vmov.f64	d7, d6
 800f59c:	e7f8      	b.n	800f590 <__kernel_rem_pio2+0x88>
 800f59e:	ecbe 5b02 	vldmia	lr!, {d5}
 800f5a2:	ed96 6b00 	vldr	d6, [r6]
 800f5a6:	3501      	adds	r5, #1
 800f5a8:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f5ac:	4555      	cmp	r5, sl
 800f5ae:	f1a6 0608 	sub.w	r6, r6, #8
 800f5b2:	ddf4      	ble.n	800f59e <__kernel_rem_pio2+0x96>
 800f5b4:	eca8 7b02 	vstmia	r8!, {d7}
 800f5b8:	f10c 0c01 	add.w	ip, ip, #1
 800f5bc:	3208      	adds	r2, #8
 800f5be:	e7d6      	b.n	800f56e <__kernel_rem_pio2+0x66>
 800f5c0:	aa06      	add	r2, sp, #24
 800f5c2:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800f818 <__kernel_rem_pio2+0x310>
 800f5c6:	ed9f ab96 	vldr	d10, [pc, #600]	; 800f820 <__kernel_rem_pio2+0x318>
 800f5ca:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800f5ce:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800f5d2:	9204      	str	r2, [sp, #16]
 800f5d4:	9303      	str	r3, [sp, #12]
 800f5d6:	464d      	mov	r5, r9
 800f5d8:	00eb      	lsls	r3, r5, #3
 800f5da:	9305      	str	r3, [sp, #20]
 800f5dc:	ab92      	add	r3, sp, #584	; 0x248
 800f5de:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800f5e2:	f10d 0b18 	add.w	fp, sp, #24
 800f5e6:	ab6a      	add	r3, sp, #424	; 0x1a8
 800f5e8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800f5ec:	465e      	mov	r6, fp
 800f5ee:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	f1a2 0208 	sub.w	r2, r2, #8
 800f5fa:	dc48      	bgt.n	800f68e <__kernel_rem_pio2+0x186>
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	f000 fa17 	bl	800fa30 <scalbn>
 800f602:	eeb0 8b40 	vmov.f64	d8, d0
 800f606:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800f60a:	ee28 0b00 	vmul.f64	d0, d8, d0
 800f60e:	f000 fa8f 	bl	800fb30 <floor>
 800f612:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800f616:	eea0 8b47 	vfms.f64	d8, d0, d7
 800f61a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800f61e:	2c00      	cmp	r4, #0
 800f620:	ee17 8a90 	vmov	r8, s15
 800f624:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f628:	ee38 8b47 	vsub.f64	d8, d8, d7
 800f62c:	dd41      	ble.n	800f6b2 <__kernel_rem_pio2+0x1aa>
 800f62e:	1e68      	subs	r0, r5, #1
 800f630:	ab06      	add	r3, sp, #24
 800f632:	f1c4 0c18 	rsb	ip, r4, #24
 800f636:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800f63a:	fa46 f20c 	asr.w	r2, r6, ip
 800f63e:	4490      	add	r8, r2
 800f640:	fa02 f20c 	lsl.w	r2, r2, ip
 800f644:	1ab6      	subs	r6, r6, r2
 800f646:	f1c4 0217 	rsb	r2, r4, #23
 800f64a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800f64e:	4116      	asrs	r6, r2
 800f650:	2e00      	cmp	r6, #0
 800f652:	dd3d      	ble.n	800f6d0 <__kernel_rem_pio2+0x1c8>
 800f654:	f04f 0c00 	mov.w	ip, #0
 800f658:	f108 0801 	add.w	r8, r8, #1
 800f65c:	4660      	mov	r0, ip
 800f65e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800f662:	4565      	cmp	r5, ip
 800f664:	dc6a      	bgt.n	800f73c <__kernel_rem_pio2+0x234>
 800f666:	2c00      	cmp	r4, #0
 800f668:	dd04      	ble.n	800f674 <__kernel_rem_pio2+0x16c>
 800f66a:	2c01      	cmp	r4, #1
 800f66c:	d07b      	beq.n	800f766 <__kernel_rem_pio2+0x25e>
 800f66e:	2c02      	cmp	r4, #2
 800f670:	f000 8083 	beq.w	800f77a <__kernel_rem_pio2+0x272>
 800f674:	2e02      	cmp	r6, #2
 800f676:	d12b      	bne.n	800f6d0 <__kernel_rem_pio2+0x1c8>
 800f678:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f67c:	ee30 8b48 	vsub.f64	d8, d0, d8
 800f680:	b330      	cbz	r0, 800f6d0 <__kernel_rem_pio2+0x1c8>
 800f682:	4620      	mov	r0, r4
 800f684:	f000 f9d4 	bl	800fa30 <scalbn>
 800f688:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f68c:	e020      	b.n	800f6d0 <__kernel_rem_pio2+0x1c8>
 800f68e:	ee20 7b09 	vmul.f64	d7, d0, d9
 800f692:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f696:	3801      	subs	r0, #1
 800f698:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800f69c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800f6a0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f6a4:	eca6 0a01 	vstmia	r6!, {s0}
 800f6a8:	ed92 0b00 	vldr	d0, [r2]
 800f6ac:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f6b0:	e7a0      	b.n	800f5f4 <__kernel_rem_pio2+0xec>
 800f6b2:	d105      	bne.n	800f6c0 <__kernel_rem_pio2+0x1b8>
 800f6b4:	1e6a      	subs	r2, r5, #1
 800f6b6:	ab06      	add	r3, sp, #24
 800f6b8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800f6bc:	15f6      	asrs	r6, r6, #23
 800f6be:	e7c7      	b.n	800f650 <__kernel_rem_pio2+0x148>
 800f6c0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f6c4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6cc:	da34      	bge.n	800f738 <__kernel_rem_pio2+0x230>
 800f6ce:	2600      	movs	r6, #0
 800f6d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6d8:	f040 80aa 	bne.w	800f830 <__kernel_rem_pio2+0x328>
 800f6dc:	f105 3bff 	add.w	fp, r5, #4294967295
 800f6e0:	4658      	mov	r0, fp
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	4548      	cmp	r0, r9
 800f6e6:	da50      	bge.n	800f78a <__kernel_rem_pio2+0x282>
 800f6e8:	2a00      	cmp	r2, #0
 800f6ea:	d06b      	beq.n	800f7c4 <__kernel_rem_pio2+0x2bc>
 800f6ec:	ab06      	add	r3, sp, #24
 800f6ee:	3c18      	subs	r4, #24
 800f6f0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	f000 8087 	beq.w	800f808 <__kernel_rem_pio2+0x300>
 800f6fa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f6fe:	4620      	mov	r0, r4
 800f700:	f000 f996 	bl	800fa30 <scalbn>
 800f704:	ed9f 6b44 	vldr	d6, [pc, #272]	; 800f818 <__kernel_rem_pio2+0x310>
 800f708:	f10b 0201 	add.w	r2, fp, #1
 800f70c:	a96a      	add	r1, sp, #424	; 0x1a8
 800f70e:	00d3      	lsls	r3, r2, #3
 800f710:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f714:	465a      	mov	r2, fp
 800f716:	2a00      	cmp	r2, #0
 800f718:	f280 80b8 	bge.w	800f88c <__kernel_rem_pio2+0x384>
 800f71c:	465a      	mov	r2, fp
 800f71e:	2a00      	cmp	r2, #0
 800f720:	f2c0 80d6 	blt.w	800f8d0 <__kernel_rem_pio2+0x3c8>
 800f724:	a96a      	add	r1, sp, #424	; 0x1a8
 800f726:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 800f72a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800f810 <__kernel_rem_pio2+0x308>
 800f72e:	4d3f      	ldr	r5, [pc, #252]	; (800f82c <__kernel_rem_pio2+0x324>)
 800f730:	2000      	movs	r0, #0
 800f732:	ebab 0102 	sub.w	r1, fp, r2
 800f736:	e0c0      	b.n	800f8ba <__kernel_rem_pio2+0x3b2>
 800f738:	2602      	movs	r6, #2
 800f73a:	e78b      	b.n	800f654 <__kernel_rem_pio2+0x14c>
 800f73c:	f8db 2000 	ldr.w	r2, [fp]
 800f740:	b958      	cbnz	r0, 800f75a <__kernel_rem_pio2+0x252>
 800f742:	b122      	cbz	r2, 800f74e <__kernel_rem_pio2+0x246>
 800f744:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800f748:	f8cb 2000 	str.w	r2, [fp]
 800f74c:	2201      	movs	r2, #1
 800f74e:	f10c 0c01 	add.w	ip, ip, #1
 800f752:	f10b 0b04 	add.w	fp, fp, #4
 800f756:	4610      	mov	r0, r2
 800f758:	e783      	b.n	800f662 <__kernel_rem_pio2+0x15a>
 800f75a:	ebae 0202 	sub.w	r2, lr, r2
 800f75e:	f8cb 2000 	str.w	r2, [fp]
 800f762:	4602      	mov	r2, r0
 800f764:	e7f3      	b.n	800f74e <__kernel_rem_pio2+0x246>
 800f766:	f105 3cff 	add.w	ip, r5, #4294967295
 800f76a:	ab06      	add	r3, sp, #24
 800f76c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800f770:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800f774:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800f778:	e77c      	b.n	800f674 <__kernel_rem_pio2+0x16c>
 800f77a:	f105 3cff 	add.w	ip, r5, #4294967295
 800f77e:	ab06      	add	r3, sp, #24
 800f780:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800f784:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800f788:	e7f4      	b.n	800f774 <__kernel_rem_pio2+0x26c>
 800f78a:	ab06      	add	r3, sp, #24
 800f78c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f790:	3801      	subs	r0, #1
 800f792:	431a      	orrs	r2, r3
 800f794:	e7a6      	b.n	800f6e4 <__kernel_rem_pio2+0x1dc>
 800f796:	3201      	adds	r2, #1
 800f798:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800f79c:	2e00      	cmp	r6, #0
 800f79e:	d0fa      	beq.n	800f796 <__kernel_rem_pio2+0x28e>
 800f7a0:	9b05      	ldr	r3, [sp, #20]
 800f7a2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800f7a6:	eb0d 0003 	add.w	r0, sp, r3
 800f7aa:	9b01      	ldr	r3, [sp, #4]
 800f7ac:	18ee      	adds	r6, r5, r3
 800f7ae:	ab1a      	add	r3, sp, #104	; 0x68
 800f7b0:	f105 0c01 	add.w	ip, r5, #1
 800f7b4:	3898      	subs	r0, #152	; 0x98
 800f7b6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f7ba:	442a      	add	r2, r5
 800f7bc:	4562      	cmp	r2, ip
 800f7be:	da04      	bge.n	800f7ca <__kernel_rem_pio2+0x2c2>
 800f7c0:	4615      	mov	r5, r2
 800f7c2:	e709      	b.n	800f5d8 <__kernel_rem_pio2+0xd0>
 800f7c4:	9804      	ldr	r0, [sp, #16]
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	e7e6      	b.n	800f798 <__kernel_rem_pio2+0x290>
 800f7ca:	9b03      	ldr	r3, [sp, #12]
 800f7cc:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f7d0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800f7d4:	9305      	str	r3, [sp, #20]
 800f7d6:	ee07 3a90 	vmov	s15, r3
 800f7da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f7de:	2500      	movs	r5, #0
 800f7e0:	eca6 7b02 	vstmia	r6!, {d7}
 800f7e4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 800f810 <__kernel_rem_pio2+0x308>
 800f7e8:	46b0      	mov	r8, r6
 800f7ea:	4555      	cmp	r5, sl
 800f7ec:	dd04      	ble.n	800f7f8 <__kernel_rem_pio2+0x2f0>
 800f7ee:	eca0 7b02 	vstmia	r0!, {d7}
 800f7f2:	f10c 0c01 	add.w	ip, ip, #1
 800f7f6:	e7e1      	b.n	800f7bc <__kernel_rem_pio2+0x2b4>
 800f7f8:	ecbe 5b02 	vldmia	lr!, {d5}
 800f7fc:	ed38 6b02 	vldmdb	r8!, {d6}
 800f800:	3501      	adds	r5, #1
 800f802:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f806:	e7f0      	b.n	800f7ea <__kernel_rem_pio2+0x2e2>
 800f808:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f80c:	e76e      	b.n	800f6ec <__kernel_rem_pio2+0x1e4>
 800f80e:	bf00      	nop
	...
 800f81c:	3e700000 	.word	0x3e700000
 800f820:	00000000 	.word	0x00000000
 800f824:	41700000 	.word	0x41700000
 800f828:	08010450 	.word	0x08010450
 800f82c:	08010410 	.word	0x08010410
 800f830:	4260      	negs	r0, r4
 800f832:	eeb0 0b48 	vmov.f64	d0, d8
 800f836:	f000 f8fb 	bl	800fa30 <scalbn>
 800f83a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800fa18 <__kernel_rem_pio2+0x510>
 800f83e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800f842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f846:	db18      	blt.n	800f87a <__kernel_rem_pio2+0x372>
 800f848:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800fa20 <__kernel_rem_pio2+0x518>
 800f84c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f850:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f854:	aa06      	add	r2, sp, #24
 800f856:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800f85a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800f85e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f862:	f105 0b01 	add.w	fp, r5, #1
 800f866:	ee10 3a10 	vmov	r3, s0
 800f86a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f86e:	ee17 3a10 	vmov	r3, s14
 800f872:	3418      	adds	r4, #24
 800f874:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800f878:	e73f      	b.n	800f6fa <__kernel_rem_pio2+0x1f2>
 800f87a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f87e:	aa06      	add	r2, sp, #24
 800f880:	ee10 3a10 	vmov	r3, s0
 800f884:	46ab      	mov	fp, r5
 800f886:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f88a:	e736      	b.n	800f6fa <__kernel_rem_pio2+0x1f2>
 800f88c:	a806      	add	r0, sp, #24
 800f88e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800f892:	9001      	str	r0, [sp, #4]
 800f894:	ee07 0a90 	vmov	s15, r0
 800f898:	3a01      	subs	r2, #1
 800f89a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f89e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800f8a2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f8a6:	ed21 7b02 	vstmdb	r1!, {d7}
 800f8aa:	e734      	b.n	800f716 <__kernel_rem_pio2+0x20e>
 800f8ac:	ecb5 5b02 	vldmia	r5!, {d5}
 800f8b0:	ecb4 6b02 	vldmia	r4!, {d6}
 800f8b4:	3001      	adds	r0, #1
 800f8b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f8ba:	4548      	cmp	r0, r9
 800f8bc:	dc01      	bgt.n	800f8c2 <__kernel_rem_pio2+0x3ba>
 800f8be:	4288      	cmp	r0, r1
 800f8c0:	ddf4      	ble.n	800f8ac <__kernel_rem_pio2+0x3a4>
 800f8c2:	a842      	add	r0, sp, #264	; 0x108
 800f8c4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f8c8:	ed81 7b00 	vstr	d7, [r1]
 800f8cc:	3a01      	subs	r2, #1
 800f8ce:	e726      	b.n	800f71e <__kernel_rem_pio2+0x216>
 800f8d0:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800f8d2:	2a02      	cmp	r2, #2
 800f8d4:	dc0a      	bgt.n	800f8ec <__kernel_rem_pio2+0x3e4>
 800f8d6:	2a00      	cmp	r2, #0
 800f8d8:	dc2e      	bgt.n	800f938 <__kernel_rem_pio2+0x430>
 800f8da:	d047      	beq.n	800f96c <__kernel_rem_pio2+0x464>
 800f8dc:	f008 0007 	and.w	r0, r8, #7
 800f8e0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800f8e4:	ecbd 8b06 	vpop	{d8-d10}
 800f8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ec:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800f8ee:	2a03      	cmp	r2, #3
 800f8f0:	d1f4      	bne.n	800f8dc <__kernel_rem_pio2+0x3d4>
 800f8f2:	a942      	add	r1, sp, #264	; 0x108
 800f8f4:	f1a3 0208 	sub.w	r2, r3, #8
 800f8f8:	440a      	add	r2, r1
 800f8fa:	4611      	mov	r1, r2
 800f8fc:	4658      	mov	r0, fp
 800f8fe:	2800      	cmp	r0, #0
 800f900:	f1a1 0108 	sub.w	r1, r1, #8
 800f904:	dc55      	bgt.n	800f9b2 <__kernel_rem_pio2+0x4aa>
 800f906:	4659      	mov	r1, fp
 800f908:	2901      	cmp	r1, #1
 800f90a:	f1a2 0208 	sub.w	r2, r2, #8
 800f90e:	dc60      	bgt.n	800f9d2 <__kernel_rem_pio2+0x4ca>
 800f910:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800fa28 <__kernel_rem_pio2+0x520>
 800f914:	aa42      	add	r2, sp, #264	; 0x108
 800f916:	4413      	add	r3, r2
 800f918:	f1bb 0f01 	cmp.w	fp, #1
 800f91c:	dc69      	bgt.n	800f9f2 <__kernel_rem_pio2+0x4ea>
 800f91e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800f922:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800f926:	2e00      	cmp	r6, #0
 800f928:	d16a      	bne.n	800fa00 <__kernel_rem_pio2+0x4f8>
 800f92a:	ed87 5b00 	vstr	d5, [r7]
 800f92e:	ed87 6b02 	vstr	d6, [r7, #8]
 800f932:	ed87 7b04 	vstr	d7, [r7, #16]
 800f936:	e7d1      	b.n	800f8dc <__kernel_rem_pio2+0x3d4>
 800f938:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800fa28 <__kernel_rem_pio2+0x520>
 800f93c:	aa42      	add	r2, sp, #264	; 0x108
 800f93e:	4413      	add	r3, r2
 800f940:	465a      	mov	r2, fp
 800f942:	2a00      	cmp	r2, #0
 800f944:	da26      	bge.n	800f994 <__kernel_rem_pio2+0x48c>
 800f946:	b35e      	cbz	r6, 800f9a0 <__kernel_rem_pio2+0x498>
 800f948:	eeb1 7b46 	vneg.f64	d7, d6
 800f94c:	ed87 7b00 	vstr	d7, [r7]
 800f950:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800f954:	aa44      	add	r2, sp, #272	; 0x110
 800f956:	2301      	movs	r3, #1
 800f958:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f95c:	459b      	cmp	fp, r3
 800f95e:	da22      	bge.n	800f9a6 <__kernel_rem_pio2+0x49e>
 800f960:	b10e      	cbz	r6, 800f966 <__kernel_rem_pio2+0x45e>
 800f962:	eeb1 7b47 	vneg.f64	d7, d7
 800f966:	ed87 7b02 	vstr	d7, [r7, #8]
 800f96a:	e7b7      	b.n	800f8dc <__kernel_rem_pio2+0x3d4>
 800f96c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800fa28 <__kernel_rem_pio2+0x520>
 800f970:	aa42      	add	r2, sp, #264	; 0x108
 800f972:	4413      	add	r3, r2
 800f974:	f1bb 0f00 	cmp.w	fp, #0
 800f978:	da05      	bge.n	800f986 <__kernel_rem_pio2+0x47e>
 800f97a:	b10e      	cbz	r6, 800f980 <__kernel_rem_pio2+0x478>
 800f97c:	eeb1 7b47 	vneg.f64	d7, d7
 800f980:	ed87 7b00 	vstr	d7, [r7]
 800f984:	e7aa      	b.n	800f8dc <__kernel_rem_pio2+0x3d4>
 800f986:	ed33 6b02 	vldmdb	r3!, {d6}
 800f98a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f98e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f992:	e7ef      	b.n	800f974 <__kernel_rem_pio2+0x46c>
 800f994:	ed33 7b02 	vldmdb	r3!, {d7}
 800f998:	3a01      	subs	r2, #1
 800f99a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f99e:	e7d0      	b.n	800f942 <__kernel_rem_pio2+0x43a>
 800f9a0:	eeb0 7b46 	vmov.f64	d7, d6
 800f9a4:	e7d2      	b.n	800f94c <__kernel_rem_pio2+0x444>
 800f9a6:	ecb2 6b02 	vldmia	r2!, {d6}
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f9b0:	e7d4      	b.n	800f95c <__kernel_rem_pio2+0x454>
 800f9b2:	ed91 7b00 	vldr	d7, [r1]
 800f9b6:	ed91 5b02 	vldr	d5, [r1, #8]
 800f9ba:	3801      	subs	r0, #1
 800f9bc:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f9c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f9c4:	ed81 6b00 	vstr	d6, [r1]
 800f9c8:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f9cc:	ed81 7b02 	vstr	d7, [r1, #8]
 800f9d0:	e795      	b.n	800f8fe <__kernel_rem_pio2+0x3f6>
 800f9d2:	ed92 7b00 	vldr	d7, [r2]
 800f9d6:	ed92 5b02 	vldr	d5, [r2, #8]
 800f9da:	3901      	subs	r1, #1
 800f9dc:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f9e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f9e4:	ed82 6b00 	vstr	d6, [r2]
 800f9e8:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f9ec:	ed82 7b02 	vstr	d7, [r2, #8]
 800f9f0:	e78a      	b.n	800f908 <__kernel_rem_pio2+0x400>
 800f9f2:	ed33 6b02 	vldmdb	r3!, {d6}
 800f9f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f9fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f9fe:	e78b      	b.n	800f918 <__kernel_rem_pio2+0x410>
 800fa00:	eeb1 5b45 	vneg.f64	d5, d5
 800fa04:	eeb1 6b46 	vneg.f64	d6, d6
 800fa08:	ed87 5b00 	vstr	d5, [r7]
 800fa0c:	eeb1 7b47 	vneg.f64	d7, d7
 800fa10:	ed87 6b02 	vstr	d6, [r7, #8]
 800fa14:	e78d      	b.n	800f932 <__kernel_rem_pio2+0x42a>
 800fa16:	bf00      	nop
 800fa18:	00000000 	.word	0x00000000
 800fa1c:	41700000 	.word	0x41700000
 800fa20:	00000000 	.word	0x00000000
 800fa24:	3e700000 	.word	0x3e700000
	...

0800fa30 <scalbn>:
 800fa30:	ee10 1a90 	vmov	r1, s1
 800fa34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fa38:	b98b      	cbnz	r3, 800fa5e <scalbn+0x2e>
 800fa3a:	ee10 3a10 	vmov	r3, s0
 800fa3e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fa42:	4319      	orrs	r1, r3
 800fa44:	d00a      	beq.n	800fa5c <scalbn+0x2c>
 800fa46:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800faf8 <scalbn+0xc8>
 800fa4a:	4b37      	ldr	r3, [pc, #220]	; (800fb28 <scalbn+0xf8>)
 800fa4c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fa50:	4298      	cmp	r0, r3
 800fa52:	da0b      	bge.n	800fa6c <scalbn+0x3c>
 800fa54:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 800fb00 <scalbn+0xd0>
 800fa58:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fa5c:	4770      	bx	lr
 800fa5e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d107      	bne.n	800fa76 <scalbn+0x46>
 800fa66:	ee30 0b00 	vadd.f64	d0, d0, d0
 800fa6a:	4770      	bx	lr
 800fa6c:	ee10 1a90 	vmov	r1, s1
 800fa70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fa74:	3b36      	subs	r3, #54	; 0x36
 800fa76:	f24c 3250 	movw	r2, #50000	; 0xc350
 800fa7a:	4290      	cmp	r0, r2
 800fa7c:	dd0d      	ble.n	800fa9a <scalbn+0x6a>
 800fa7e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800fb08 <scalbn+0xd8>
 800fa82:	ee10 3a90 	vmov	r3, s1
 800fa86:	eeb0 6b47 	vmov.f64	d6, d7
 800fa8a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 800fb10 <scalbn+0xe0>
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	fe27 7b05 	vselge.f64	d7, d7, d5
 800fa94:	ee27 0b06 	vmul.f64	d0, d7, d6
 800fa98:	4770      	bx	lr
 800fa9a:	4418      	add	r0, r3
 800fa9c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800faa0:	4298      	cmp	r0, r3
 800faa2:	dcec      	bgt.n	800fa7e <scalbn+0x4e>
 800faa4:	2800      	cmp	r0, #0
 800faa6:	dd0a      	ble.n	800fabe <scalbn+0x8e>
 800faa8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800faac:	ec53 2b10 	vmov	r2, r3, d0
 800fab0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800fab4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800fab8:	ec43 2b10 	vmov	d0, r2, r3
 800fabc:	4770      	bx	lr
 800fabe:	f110 0f35 	cmn.w	r0, #53	; 0x35
 800fac2:	da09      	bge.n	800fad8 <scalbn+0xa8>
 800fac4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800fb00 <scalbn+0xd0>
 800fac8:	ee10 3a90 	vmov	r3, s1
 800facc:	eeb0 6b47 	vmov.f64	d6, d7
 800fad0:	ed9f 5b11 	vldr	d5, [pc, #68]	; 800fb18 <scalbn+0xe8>
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	e7db      	b.n	800fa90 <scalbn+0x60>
 800fad8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800fadc:	ec53 2b10 	vmov	r2, r3, d0
 800fae0:	3036      	adds	r0, #54	; 0x36
 800fae2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800fae6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800faea:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800fb20 <scalbn+0xf0>
 800faee:	ec43 2b10 	vmov	d0, r2, r3
 800faf2:	e7b1      	b.n	800fa58 <scalbn+0x28>
 800faf4:	f3af 8000 	nop.w
 800faf8:	00000000 	.word	0x00000000
 800fafc:	43500000 	.word	0x43500000
 800fb00:	c2f8f359 	.word	0xc2f8f359
 800fb04:	01a56e1f 	.word	0x01a56e1f
 800fb08:	8800759c 	.word	0x8800759c
 800fb0c:	7e37e43c 	.word	0x7e37e43c
 800fb10:	8800759c 	.word	0x8800759c
 800fb14:	fe37e43c 	.word	0xfe37e43c
 800fb18:	c2f8f359 	.word	0xc2f8f359
 800fb1c:	81a56e1f 	.word	0x81a56e1f
 800fb20:	00000000 	.word	0x00000000
 800fb24:	3c900000 	.word	0x3c900000
 800fb28:	ffff3cb0 	.word	0xffff3cb0
 800fb2c:	00000000 	.word	0x00000000

0800fb30 <floor>:
 800fb30:	ee10 1a90 	vmov	r1, s1
 800fb34:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fb38:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800fb3c:	2b13      	cmp	r3, #19
 800fb3e:	b530      	push	{r4, r5, lr}
 800fb40:	ee10 0a10 	vmov	r0, s0
 800fb44:	ee10 5a10 	vmov	r5, s0
 800fb48:	dc31      	bgt.n	800fbae <floor+0x7e>
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	da15      	bge.n	800fb7a <floor+0x4a>
 800fb4e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800fc10 <floor+0xe0>
 800fb52:	ee30 0b07 	vadd.f64	d0, d0, d7
 800fb56:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fb5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb5e:	dd07      	ble.n	800fb70 <floor+0x40>
 800fb60:	2900      	cmp	r1, #0
 800fb62:	da4e      	bge.n	800fc02 <floor+0xd2>
 800fb64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fb68:	4308      	orrs	r0, r1
 800fb6a:	d04d      	beq.n	800fc08 <floor+0xd8>
 800fb6c:	492a      	ldr	r1, [pc, #168]	; (800fc18 <floor+0xe8>)
 800fb6e:	2000      	movs	r0, #0
 800fb70:	460b      	mov	r3, r1
 800fb72:	4602      	mov	r2, r0
 800fb74:	ec43 2b10 	vmov	d0, r2, r3
 800fb78:	e020      	b.n	800fbbc <floor+0x8c>
 800fb7a:	4a28      	ldr	r2, [pc, #160]	; (800fc1c <floor+0xec>)
 800fb7c:	411a      	asrs	r2, r3
 800fb7e:	ea01 0402 	and.w	r4, r1, r2
 800fb82:	4304      	orrs	r4, r0
 800fb84:	d01a      	beq.n	800fbbc <floor+0x8c>
 800fb86:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800fc10 <floor+0xe0>
 800fb8a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800fb8e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb96:	ddeb      	ble.n	800fb70 <floor+0x40>
 800fb98:	2900      	cmp	r1, #0
 800fb9a:	bfbe      	ittt	lt
 800fb9c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800fba0:	fa40 f303 	asrlt.w	r3, r0, r3
 800fba4:	18c9      	addlt	r1, r1, r3
 800fba6:	ea21 0102 	bic.w	r1, r1, r2
 800fbaa:	2000      	movs	r0, #0
 800fbac:	e7e0      	b.n	800fb70 <floor+0x40>
 800fbae:	2b33      	cmp	r3, #51	; 0x33
 800fbb0:	dd05      	ble.n	800fbbe <floor+0x8e>
 800fbb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fbb6:	d101      	bne.n	800fbbc <floor+0x8c>
 800fbb8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800fbbc:	bd30      	pop	{r4, r5, pc}
 800fbbe:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800fbc2:	f04f 32ff 	mov.w	r2, #4294967295
 800fbc6:	40e2      	lsrs	r2, r4
 800fbc8:	4210      	tst	r0, r2
 800fbca:	d0f7      	beq.n	800fbbc <floor+0x8c>
 800fbcc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800fc10 <floor+0xe0>
 800fbd0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800fbd4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbdc:	ddc8      	ble.n	800fb70 <floor+0x40>
 800fbde:	2900      	cmp	r1, #0
 800fbe0:	da02      	bge.n	800fbe8 <floor+0xb8>
 800fbe2:	2b14      	cmp	r3, #20
 800fbe4:	d103      	bne.n	800fbee <floor+0xbe>
 800fbe6:	3101      	adds	r1, #1
 800fbe8:	ea20 0002 	bic.w	r0, r0, r2
 800fbec:	e7c0      	b.n	800fb70 <floor+0x40>
 800fbee:	2401      	movs	r4, #1
 800fbf0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800fbf4:	fa04 f303 	lsl.w	r3, r4, r3
 800fbf8:	4418      	add	r0, r3
 800fbfa:	4285      	cmp	r5, r0
 800fbfc:	bf88      	it	hi
 800fbfe:	1909      	addhi	r1, r1, r4
 800fc00:	e7f2      	b.n	800fbe8 <floor+0xb8>
 800fc02:	2000      	movs	r0, #0
 800fc04:	4601      	mov	r1, r0
 800fc06:	e7b3      	b.n	800fb70 <floor+0x40>
 800fc08:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800fc0c:	e7b0      	b.n	800fb70 <floor+0x40>
 800fc0e:	bf00      	nop
 800fc10:	8800759c 	.word	0x8800759c
 800fc14:	7e37e43c 	.word	0x7e37e43c
 800fc18:	bff00000 	.word	0xbff00000
 800fc1c:	000fffff 	.word	0x000fffff

0800fc20 <_init>:
 800fc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc22:	bf00      	nop
 800fc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc26:	bc08      	pop	{r3}
 800fc28:	469e      	mov	lr, r3
 800fc2a:	4770      	bx	lr

0800fc2c <_fini>:
 800fc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc2e:	bf00      	nop
 800fc30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc32:	bc08      	pop	{r3}
 800fc34:	469e      	mov	lr, r3
 800fc36:	4770      	bx	lr
